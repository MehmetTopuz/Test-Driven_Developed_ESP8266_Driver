
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020298  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005140  08020478  08020478  00030478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080255b8  080255b8  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  080255b8  080255b8  000355b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080255c0  080255c0  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080255c0  080255c0  000355c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  080255d0  080255d0  000355d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  080255e0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a28  2000033c  0802591c  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d64  0802591c  00040d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00066629  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bfa8  00000000  00000000  000a6995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004070  00000000  00000000  000b2940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003e50  00000000  00000000  000b69b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d750  00000000  00000000  000ba800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bfef  00000000  00000000  000e7f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e993  00000000  00000000  00113f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002228d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00013820  00000000  00000000  00222928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00236148  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0023616c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08020460 	.word	0x08020460

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08020460 	.word	0x08020460

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200003fc 	.word	0x200003fc

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01b fe6e 	bl	801ca4c <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01b fdc6 	bl	801ca4c <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	20000d68 	.word	0x20000d68

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01c f99d 	bl	801d288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 fe15 	bl	8003b7c <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f60:	080255e0 	.word	0x080255e0
  ldr r2, =_sbss
 8000f64:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f68:	20000d64 	.word	0x20000d64

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000d50 	.word	0x20000d50
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000d50 	.word	0x20000d50

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	080231bc 	.word	0x080231bc
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	080231cc 	.word	0x080231cc

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	080231cc 	.word	0x080231cc

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	080231d4 	.word	0x080231d4
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	080231ec 	.word	0x080231ec
 8003904:	080231f4 	.word	0x080231f4

08003908 <ESP_Init>:

int ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 uint8_t 	(*UART_Receive)(void),
			 uint32_t 	(*getTick)(void),
			 uint32_t	UART_Buffer_Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <ESP_Init+0x42>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <ESP_Init+0x42>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <ESP_Init+0x42>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <ESP_Init+0x50>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <ESP_Init+0x50>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003934:	4a08      	ldr	r2, [pc, #32]	; (8003958 <ESP_Init+0x50>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 f838 	bl	80039b0 <ringBuffer_init>
 8003940:	4603      	mov	r3, r0
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <ESP_Init+0x54>)
 8003944:	6013      	str	r3, [r2, #0]

		return 1;
 8003946:	2301      	movs	r3, #1
 8003948:	e001      	b.n	800394e <ESP_Init+0x46>
	}
	else
	{
		return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000360 	.word	0x20000360
 800395c:	2000048c 	.word	0x2000048c

08003960 <Send_AT_Command>:


void Send_AT_Command(char *cmd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <Send_AT_Command+0x18>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000360 	.word	0x20000360

0800397c <ESP_UART_ReceiveHandler>:

void ESP_UART_ReceiveHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	uint8_t rx_data=0;
 8003982:	2300      	movs	r3, #0
 8003984:	71fb      	strb	r3, [r7, #7]

	rx_data = ESP8266.UART_Receive();
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <ESP_UART_ReceiveHandler+0x2c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4798      	blx	r3
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
	ringBuffer_push(rx_buffer, rx_data);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <ESP_UART_ReceiveHandler+0x30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 f84a 	bl	8003a32 <ringBuffer_push>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000360 	.word	0x20000360
 80039ac:	2000048c 	.word	0x2000048c

080039b0 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 80039b8:	2010      	movs	r0, #16
 80039ba:	f019 fe07 	bl	801d5cc <malloc>
 80039be:	4603      	mov	r3, r0
 80039c0:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e017      	b.n	80039fc <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 80039de:	2101      	movs	r1, #1
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f019 f82b 	bl	801ca3c <calloc>
 80039e6:	4603      	mov	r3, r0
 80039e8:	461a      	mov	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e000      	b.n	80039fc <ringBuffer_init+0x4c>
		}

	return rBuf;
 80039fa:	68fb      	ldr	r3, [r7, #12]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d004      	beq.n	8003a24 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f019 fddc 	bl	801d5dc <free>
		}
		free(buffer);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f019 fdd9 	bl	801d5dc <free>
	}
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d00c      	beq.n	8003a66 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4413      	add	r3, r2
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003a64:	e009      	b.n	8003a7a <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4413      	add	r3, r2
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b085      	sub	sp, #20
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d00d      	beq.n	8003ab8 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	605a      	str	r2, [r3, #4]
		return data;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	e00a      	b.n	8003ace <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	605a      	str	r2, [r3, #4]
		return data;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68d8      	ldr	r0, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	461a      	mov	r2, r3
 8003aec:	2100      	movs	r1, #0
 8003aee:	f019 fd8b 	bl	801d608 <memset>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e00a      	b.n	8003b20 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	4413      	add	r3, r2
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ff8c 	bl	8003a32 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	6838      	ldr	r0, [r7, #0]
 8003b22:	f7fc fb8b 	bl	800023c <strlen>
 8003b26:	4602      	mov	r2, r0
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d8ed      	bhi.n	8003b0a <ringBuffer_pushArray+0x10>
}
 8003b2e:	bf00      	nop
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	6839      	ldr	r1, [r7, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f01a fcb3 	bl	801e4b4 <strstr>
 8003b4e:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <ringBuffer_lookFor+0x22>
		return 1;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <ringBuffer_lookFor+0x24>
	else
		return 0;
 8003b5a:	2300      	movs	r3, #0

}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b82:	f7fd f9f4 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b86:	f000 f81d 	bl	8003bc4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b8a:	f000 f951 	bl	8003e30 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003b8e:	f000 f891 	bl	8003cb4 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003b92:	f000 f8ed 	bl	8003d70 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003b96:	4a0a      	ldr	r2, [pc, #40]	; (8003bc0 <main+0x44>)
 8003b98:	463b      	mov	r3, r7
 8003b9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b9e:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003ba2:	463b      	mov	r3, r7
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	2002      	movs	r0, #2
 8003ba8:	f001 ffbe 	bl	8005b28 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003bac:	2120      	movs	r1, #32
 8003bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bb2:	f7fd fdd9 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003bb6:	2064      	movs	r0, #100	; 0x64
 8003bb8:	f7fd fa4a 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003bbc:	e7f6      	b.n	8003bac <main+0x30>
 8003bbe:	bf00      	nop
 8003bc0:	08020480 	.word	0x08020480

08003bc4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b0a8      	sub	sp, #160	; 0xa0
 8003bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003bce:	2238      	movs	r2, #56	; 0x38
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f019 fd18 	bl	801d608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	609a      	str	r2, [r3, #8]
 8003be4:	60da      	str	r2, [r3, #12]
 8003be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003be8:	463b      	mov	r3, r7
 8003bea:	2254      	movs	r2, #84	; 0x54
 8003bec:	2100      	movs	r1, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f019 fd0a 	bl	801d608 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f7fd fdf5 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c02:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c04:	2340      	movs	r3, #64	; 0x40
 8003c06:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003c14:	2304      	movs	r3, #4
 8003c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003c1a:	2355      	movs	r3, #85	; 0x55
 8003c1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c20:	2302      	movs	r3, #2
 8003c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003c26:	2302      	movs	r3, #2
 8003c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c32:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fd fe88 	bl	800194c <HAL_RCC_OscConfig>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bf14      	ite	ne
 8003c42:	2301      	movne	r3, #1
 8003c44:	2300      	moveq	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003c4c:	f000 f960 	bl	8003f10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c50:	230f      	movs	r3, #15
 8003c52:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c54:	2303      	movs	r3, #3
 8003c56:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c60:	2300      	movs	r3, #0
 8003c62:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003c64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c68:	2104      	movs	r1, #4
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fe f986 	bl	8001f7c <HAL_RCC_ClockConfig>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003c80:	f000 f946 	bl	8003f10 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003c84:	2321      	movs	r3, #33	; 0x21
 8003c86:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c90:	463b      	mov	r3, r7
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe fb8e 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bf14      	ite	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	2300      	moveq	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003ca8:	f000 f932 	bl	8003f10 <Error_Handler>
  }
}
 8003cac:	bf00      	nop
 8003cae:	37a0      	adds	r7, #160	; 0xa0
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003cb8:	4b2b      	ldr	r3, [pc, #172]	; (8003d68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cba:	4a2c      	ldr	r2, [pc, #176]	; (8003d6c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003cbc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003cbe:	4b2a      	ldr	r3, [pc, #168]	; (8003d68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003cc4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cc6:	4b28      	ldr	r3, [pc, #160]	; (8003d68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003ccc:	4b26      	ldr	r3, [pc, #152]	; (8003d68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003cd2:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003cd8:	4b23      	ldr	r3, [pc, #140]	; (8003d68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cda:	220c      	movs	r2, #12
 8003cdc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ce4:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003cea:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003cf6:	481c      	ldr	r0, [pc, #112]	; (8003d68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cf8:	f7fe fda8 	bl	800284c <HAL_UART_Init>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	bf14      	ite	ne
 8003d02:	2301      	movne	r3, #1
 8003d04:	2300      	moveq	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003d0c:	f000 f900 	bl	8003f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d10:	2100      	movs	r1, #0
 8003d12:	4815      	ldr	r0, [pc, #84]	; (8003d68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d14:	f7ff fd2e 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	bf14      	ite	ne
 8003d1e:	2301      	movne	r3, #1
 8003d20:	2300      	moveq	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003d28:	f000 f8f2 	bl	8003f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	480e      	ldr	r0, [pc, #56]	; (8003d68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d30:	f7ff fd5e 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	bf14      	ite	ne
 8003d3a:	2301      	movne	r3, #1
 8003d3c:	2300      	moveq	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003d44:	f000 f8e4 	bl	8003f10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003d48:	4807      	ldr	r0, [pc, #28]	; (8003d68 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d4a:	f7ff fcda 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf14      	ite	ne
 8003d54:	2301      	movne	r3, #1
 8003d56:	2300      	moveq	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003d5e:	f000 f8d7 	bl	8003f10 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	2000036c 	.word	0x2000036c
 8003d6c:	40008000 	.word	0x40008000

08003d70 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d74:	4b2c      	ldr	r3, [pc, #176]	; (8003e28 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d76:	4a2d      	ldr	r2, [pc, #180]	; (8003e2c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d7a:	4b2b      	ldr	r3, [pc, #172]	; (8003e28 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d82:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d88:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d8e:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d94:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d96:	220c      	movs	r2, #12
 8003d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003da0:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003dac:	4b1e      	ldr	r3, [pc, #120]	; (8003e28 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003db2:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003db8:	481b      	ldr	r0, [pc, #108]	; (8003e28 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dba:	f7fe fd47 	bl	800284c <HAL_UART_Init>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003dce:	f000 f89f 	bl	8003f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4814      	ldr	r0, [pc, #80]	; (8003e28 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dd6:	f7ff fccd 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	bf14      	ite	ne
 8003de0:	2301      	movne	r3, #1
 8003de2:	2300      	moveq	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003dea:	f000 f891 	bl	8003f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dee:	2100      	movs	r1, #0
 8003df0:	480d      	ldr	r0, [pc, #52]	; (8003e28 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003df2:	f7ff fcfd 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bf14      	ite	ne
 8003dfc:	2301      	movne	r3, #1
 8003dfe:	2300      	moveq	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003e06:	f000 f883 	bl	8003f10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003e0a:	4807      	ldr	r0, [pc, #28]	; (8003e28 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e0c:	f7ff fc79 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	bf14      	ite	ne
 8003e16:	2301      	movne	r3, #1
 8003e18:	2300      	moveq	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003e20:	f000 f876 	bl	8003f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e24:	bf00      	nop
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	200003fc 	.word	0x200003fc
 8003e2c:	40013800 	.word	0x40013800

08003e30 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	; 0x28
 8003e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e36:	f107 0314 	add.w	r3, r7, #20
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	609a      	str	r2, [r3, #8]
 8003e42:	60da      	str	r2, [r3, #12]
 8003e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e46:	4b2f      	ldr	r3, [pc, #188]	; (8003f04 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4a:	4a2e      	ldr	r2, [pc, #184]	; (8003f04 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e4c:	f043 0304 	orr.w	r3, r3, #4
 8003e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e52:	4b2c      	ldr	r3, [pc, #176]	; (8003f04 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e5e:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e62:	4a28      	ldr	r2, [pc, #160]	; (8003f04 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e64:	f043 0320 	orr.w	r3, r3, #32
 8003e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e6a:	4b26      	ldr	r3, [pc, #152]	; (8003f04 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e76:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	4a22      	ldr	r2, [pc, #136]	; (8003f04 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e82:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e92:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e94:	f043 0302 	orr.w	r3, r3, #2
 8003e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	607b      	str	r3, [r7, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2120      	movs	r1, #32
 8003eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eae:	f7fd fc43 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003eb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003eb8:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <_ZL12MX_GPIO_Initv+0xd8>)
 8003eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003ec0:	f107 0314 	add.w	r3, r7, #20
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4811      	ldr	r0, [pc, #68]	; (8003f0c <_ZL12MX_GPIO_Initv+0xdc>)
 8003ec8:	f7fd fab4 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003ecc:	2320      	movs	r3, #32
 8003ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003edc:	f107 0314 	add.w	r3, r7, #20
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ee6:	f7fd faa5 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003eea:	2200      	movs	r2, #0
 8003eec:	2100      	movs	r1, #0
 8003eee:	2028      	movs	r0, #40	; 0x28
 8003ef0:	f7fd f9ab 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ef4:	2028      	movs	r0, #40	; 0x28
 8003ef6:	f7fd f9c2 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 8003efa:	bf00      	nop
 8003efc:	3728      	adds	r7, #40	; 0x28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	10110000 	.word	0x10110000
 8003f0c:	48000800 	.word	0x48000800

08003f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f14:	b672      	cpsid	i
}
 8003f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f18:	e7fe      	b.n	8003f18 <Error_Handler+0x8>

08003f1a <_ZN14MockActualCall13withParameterERK12SimpleStringPv>:
    MockActualCall& withParameter(const SimpleString& name, unsigned long int value) { return withUnsignedLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, cpputest_longlong value) { return withLongLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, cpputest_ulonglong value) { return withUnsignedLongLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, double value) { return withDoubleParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3340      	adds	r3, #64	; 0x40
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	4798      	blx	r3
 8003f36:	4603      	mov	r3, r0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>:
    MockExpectedCall& withParameter(const SimpleString& name, cpputest_longlong value) { return withLongLongIntParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, cpputest_ulonglong value) { return withUnsignedLongLongIntParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, double value) { return withDoubleParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, double value, double tolerance) { return withDoubleParameter(name, value, tolerance); }
    MockExpectedCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3350      	adds	r3, #80	; 0x50
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	4798      	blx	r3
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8003f6e:	2032      	movs	r0, #50	; 0x32
 8003f70:	f7ff fd1e 	bl	80039b0 <ringBuffer_init>
 8003f74:	4602      	mov	r2, r0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	605a      	str	r2, [r3, #4]

	}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff fd38 	bl	8003a04 <ringBuffer_deInit>
	}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f00d fa5c 	bl	8011464 <_ZN5UtestC1Ev>
 8003fac:	4a03      	ldr	r2, [pc, #12]	; (8003fbc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	08023bb4 	.word	0x08023bb4

08003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f00d fa57 	bl	8011484 <_ZN5UtestD1Ev>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	08023bb4 	.word	0x08023bb4

08003fe4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff ffe7 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8003ff2:	2108      	movs	r1, #8
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f003 fa79 	bl	80074ec <_ZdlPvj>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff ffbe 	bl	8003f9c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004020:	4a03      	ldr	r2, [pc, #12]	; (8004030 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	08023b94 	.word	0x08023b94

08004034 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	2224      	movs	r2, #36	; 0x24
 800403e:	4906      	ldr	r1, [pc, #24]	; (8004058 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8004040:	2008      	movs	r0, #8
 8004042:	f003 fa3f 	bl	80074c4 <_ZnwjPKci>
 8004046:	4604      	mov	r4, r0
 8004048:	4620      	mov	r0, r4
 800404a:	f7ff ffdb 	bl	8004004 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 800404e:	4623      	mov	r3, r4
 8004050:	4618      	mov	r0, r3
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bd90      	pop	{r4, r7, pc}
 8004058:	08020488 	.word	0x08020488

0800405c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4618      	mov	r0, r3
 8004068:	f00b fe1a 	bl	800fca0 <_ZN10UtestShellC1Ev>
 800406c:	4a03      	ldr	r2, [pc, #12]	; (800407c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	08023ae8 	.word	0x08023ae8

08004080 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8004080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004082:	b087      	sub	sp, #28
 8004084:	af04      	add	r7, sp, #16
 8004086:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8004088:	f00d f9c2 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 800408c:	4604      	mov	r4, r0
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	3338      	adds	r3, #56	; 0x38
 8004092:	681d      	ldr	r5, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	461e      	mov	r6, r3
 800409c:	f00d f9c8 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80040a0:	4603      	mov	r3, r0
 80040a2:	9302      	str	r3, [sp, #8]
 80040a4:	2327      	movs	r3, #39	; 0x27
 80040a6:	9301      	str	r3, [sp, #4]
 80040a8:	4b2a      	ldr	r3, [pc, #168]	; (8004154 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	4b2a      	ldr	r3, [pc, #168]	; (8004158 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 80040ae:	4632      	mov	r2, r6
 80040b0:	2132      	movs	r1, #50	; 0x32
 80040b2:	4620      	mov	r0, r4
 80040b4:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 80040b6:	f00d f9ab 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 80040ba:	4604      	mov	r4, r0
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	3320      	adds	r3, #32
 80040c0:	681d      	ldr	r5, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf14      	ite	ne
 80040cc:	2301      	movne	r3, #1
 80040ce:	2300      	moveq	r3, #0
 80040d0:	b2de      	uxtb	r6, r3
 80040d2:	f00d f9ad 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80040d6:	4603      	mov	r3, r0
 80040d8:	9303      	str	r3, [sp, #12]
 80040da:	2328      	movs	r3, #40	; 0x28
 80040dc:	9302      	str	r3, [sp, #8]
 80040de:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	2300      	movs	r3, #0
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 80040e8:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 80040ea:	4631      	mov	r1, r6
 80040ec:	4620      	mov	r0, r4
 80040ee:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 80040f0:	f00d f98e 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 80040f4:	4604      	mov	r4, r0
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	3338      	adds	r3, #56	; 0x38
 80040fa:	681d      	ldr	r5, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	461e      	mov	r6, r3
 8004104:	f00d f994 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004108:	4603      	mov	r3, r0
 800410a:	9302      	str	r3, [sp, #8]
 800410c:	2329      	movs	r3, #41	; 0x29
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	4b10      	ldr	r3, [pc, #64]	; (8004154 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	4b13      	ldr	r3, [pc, #76]	; (8004164 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 8004116:	4632      	mov	r2, r6
 8004118:	2100      	movs	r1, #0
 800411a:	4620      	mov	r0, r4
 800411c:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 800411e:	f00d f977 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8004122:	4604      	mov	r4, r0
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	3338      	adds	r3, #56	; 0x38
 8004128:	681d      	ldr	r5, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	461e      	mov	r6, r3
 8004132:	f00d f97d 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004136:	4603      	mov	r3, r0
 8004138:	9302      	str	r3, [sp, #8]
 800413a:	232a      	movs	r3, #42	; 0x2a
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	4b09      	ldr	r3, [pc, #36]	; (8004168 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 8004144:	4632      	mov	r2, r6
 8004146:	2100      	movs	r1, #0
 8004148:	4620      	mov	r0, r4
 800414a:	47a8      	blx	r5

}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004154:	08020488 	.word	0x08020488
 8004158:	0802049c 	.word	0x0802049c
 800415c:	080204c4 	.word	0x080204c4
 8004160:	080204dc 	.word	0x080204dc
 8004164:	080204e4 	.word	0x080204e4
 8004168:	0802050c 	.word	0x0802050c

0800416c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff ff0a 	bl	8003f9c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004188:	4a03      	ldr	r2, [pc, #12]	; (8004198 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	08023ac8 	.word	0x08023ac8

0800419c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 800419c:	b590      	push	{r4, r7, lr}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	222e      	movs	r2, #46	; 0x2e
 80041a6:	4906      	ldr	r1, [pc, #24]	; (80041c0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 80041a8:	2008      	movs	r0, #8
 80041aa:	f003 f98b 	bl	80074c4 <_ZnwjPKci>
 80041ae:	4604      	mov	r4, r0
 80041b0:	4620      	mov	r0, r4
 80041b2:	f7ff ffdb 	bl	800416c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 80041b6:	4623      	mov	r3, r4
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd90      	pop	{r4, r7, pc}
 80041c0:	08020488 	.word	0x08020488

080041c4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f00b fd66 	bl	800fca0 <_ZN10UtestShellC1Ev>
 80041d4:	4a03      	ldr	r2, [pc, #12]	; (80041e4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	08023a1c 	.word	0x08023a1c

080041e8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 80041e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af04      	add	r7, sp, #16
 80041ee:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2145      	movs	r1, #69	; 0x45
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fc1b 	bl	8003a32 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 80041fc:	f00d f908 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8004200:	4604      	mov	r4, r0
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	3338      	adds	r3, #56	; 0x38
 8004206:	681d      	ldr	r5, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	461e      	mov	r6, r3
 8004212:	f00d f90d 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004216:	4603      	mov	r3, r0
 8004218:	9302      	str	r3, [sp, #8]
 800421a:	2331      	movs	r3, #49	; 0x31
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	4b15      	ldr	r3, [pc, #84]	; (8004274 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	4b15      	ldr	r3, [pc, #84]	; (8004278 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 8004224:	4632      	mov	r2, r6
 8004226:	2145      	movs	r1, #69	; 0x45
 8004228:	4620      	mov	r0, r4
 800422a:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2110      	movs	r1, #16
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fbfd 	bl	8003a32 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8004238:	f00d f8ea 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 800423c:	4604      	mov	r4, r0
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	3338      	adds	r3, #56	; 0x38
 8004242:	681d      	ldr	r5, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	3301      	adds	r3, #1
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	461e      	mov	r6, r3
 8004250:	f00d f8ee 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004254:	4603      	mov	r3, r0
 8004256:	9302      	str	r3, [sp, #8]
 8004258:	2334      	movs	r3, #52	; 0x34
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 8004262:	4632      	mov	r2, r6
 8004264:	2110      	movs	r1, #16
 8004266:	4620      	mov	r0, r4
 8004268:	47a8      	blx	r5

}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004272:	bf00      	nop
 8004274:	08020488 	.word	0x08020488
 8004278:	08020534 	.word	0x08020534
 800427c:	08020564 	.word	0x08020564

08004280 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	605a      	str	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fe80 	bl	8003f9c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800429c:	4a03      	ldr	r2, [pc, #12]	; (80042ac <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	080239fc 	.word	0x080239fc

080042b0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 80042b0:	b590      	push	{r4, r7, lr}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	2238      	movs	r2, #56	; 0x38
 80042ba:	4906      	ldr	r1, [pc, #24]	; (80042d4 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 80042bc:	2008      	movs	r0, #8
 80042be:	f003 f901 	bl	80074c4 <_ZnwjPKci>
 80042c2:	4604      	mov	r4, r0
 80042c4:	4620      	mov	r0, r4
 80042c6:	f7ff ffdb 	bl	8004280 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 80042ca:	4623      	mov	r3, r4
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd90      	pop	{r4, r7, pc}
 80042d4:	08020488 	.word	0x08020488

080042d8 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f00b fcdc 	bl	800fca0 <_ZN10UtestShellC1Ev>
 80042e8:	4a03      	ldr	r2, [pc, #12]	; (80042f8 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	08023950 	.word	0x08023950

080042fc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 80042fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042fe:	b089      	sub	sp, #36	; 0x24
 8004300:	af04      	add	r7, sp, #16
 8004302:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	3b01      	subs	r3, #1
 800431a:	429a      	cmp	r2, r3
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4293      	cmp	r3, r2
 800432a:	da0b      	bge.n	8004344 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fb7b 	bl	8003a32 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3301      	adds	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	e7e3      	b.n	800430c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	21ff      	movs	r1, #255	; 0xff
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fb71 	bl	8003a32 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 8004350:	f00d f85e 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8004354:	4604      	mov	r4, r0
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	3338      	adds	r3, #56	; 0x38
 800435a:	681d      	ldr	r5, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	461e      	mov	r6, r3
 8004366:	f00d f863 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800436a:	4603      	mov	r3, r0
 800436c:	9302      	str	r3, [sp, #8]
 800436e:	2340      	movs	r3, #64	; 0x40
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	4b05      	ldr	r3, [pc, #20]	; (800438c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004378:	4632      	mov	r2, r6
 800437a:	21ff      	movs	r1, #255	; 0xff
 800437c:	4620      	mov	r0, r4
 800437e:	47a8      	blx	r5
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004388:	08020488 	.word	0x08020488
 800438c:	08020594 	.word	0x08020594

08004390 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	605a      	str	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fdf8 	bl	8003f9c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80043ac:	4a03      	ldr	r2, [pc, #12]	; (80043bc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	08023930 	.word	0x08023930

080043c0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	2243      	movs	r2, #67	; 0x43
 80043ca:	4906      	ldr	r1, [pc, #24]	; (80043e4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 80043cc:	2008      	movs	r0, #8
 80043ce:	f003 f879 	bl	80074c4 <_ZnwjPKci>
 80043d2:	4604      	mov	r4, r0
 80043d4:	4620      	mov	r0, r4
 80043d6:	f7ff ffdb 	bl	8004390 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 80043da:	4623      	mov	r3, r4
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd90      	pop	{r4, r7, pc}
 80043e4:	08020488 	.word	0x08020488

080043e8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f00b fc54 	bl	800fca0 <_ZN10UtestShellC1Ev>
 80043f8:	4a03      	ldr	r2, [pc, #12]	; (8004408 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	08023884 	.word	0x08023884

0800440c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 800440c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800440e:	b089      	sub	sp, #36	; 0x24
 8004410:	af04      	add	r7, sp, #16
 8004412:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	21ff      	movs	r1, #255	; 0xff
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff fb09 	bl	8003a32 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fb2e 	bl	8003a86 <ringBuffer_pop>
 800442a:	4603      	mov	r3, r0
 800442c:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 800442e:	f00c ffef 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8004432:	4604      	mov	r4, r0
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	3338      	adds	r3, #56	; 0x38
 8004438:	681d      	ldr	r5, [r3, #0]
 800443a:	7bfe      	ldrb	r6, [r7, #15]
 800443c:	f00c fff8 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004440:	4603      	mov	r3, r0
 8004442:	9302      	str	r3, [sp, #8]
 8004444:	2348      	movs	r3, #72	; 0x48
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 800444e:	4632      	mov	r2, r6
 8004450:	21ff      	movs	r1, #255	; 0xff
 8004452:	4620      	mov	r0, r4
 8004454:	47a8      	blx	r5

}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800445e:	bf00      	nop
 8004460:	08020488 	.word	0x08020488
 8004464:	080205c4 	.word	0x080205c4

08004468 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	605a      	str	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fd8c 	bl	8003f9c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004484:	4a03      	ldr	r2, [pc, #12]	; (8004494 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	08023864 	.word	0x08023864

08004498 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	224c      	movs	r2, #76	; 0x4c
 80044a2:	4906      	ldr	r1, [pc, #24]	; (80044bc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 80044a4:	2008      	movs	r0, #8
 80044a6:	f003 f80d 	bl	80074c4 <_ZnwjPKci>
 80044aa:	4604      	mov	r4, r0
 80044ac:	4620      	mov	r0, r4
 80044ae:	f7ff ffdb 	bl	8004468 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 80044b2:	4623      	mov	r3, r4
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd90      	pop	{r4, r7, pc}
 80044bc:	08020488 	.word	0x08020488

080044c0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f00b fbe8 	bl	800fca0 <_ZN10UtestShellC1Ev>
 80044d0:	4a03      	ldr	r2, [pc, #12]	; (80044e0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	080237b8 	.word	0x080237b8

080044e4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 80044e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e6:	b089      	sub	sp, #36	; 0x24
 80044e8:	af04      	add	r7, sp, #16
 80044ea:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	21aa      	movs	r1, #170	; 0xaa
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fa9b 	bl	8003a32 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	3b01      	subs	r3, #1
 8004512:	429a      	cmp	r2, r3
 8004514:	bf0c      	ite	eq
 8004516:	2301      	moveq	r3, #1
 8004518:	2300      	movne	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4293      	cmp	r3, r2
 8004522:	da0a      	bge.n	800453a <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff faac 	bl	8003a86 <ringBuffer_pop>
 800452e:	4603      	mov	r3, r0
 8004530:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3301      	adds	r3, #1
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	e7e4      	b.n	8004504 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff faa1 	bl	8003a86 <ringBuffer_pop>
 8004544:	4603      	mov	r3, r0
 8004546:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 8004548:	f00c ff62 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 800454c:	4604      	mov	r4, r0
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	3338      	adds	r3, #56	; 0x38
 8004552:	681d      	ldr	r5, [r3, #0]
 8004554:	7afe      	ldrb	r6, [r7, #11]
 8004556:	f00c ff6b 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800455a:	4603      	mov	r3, r0
 800455c:	9302      	str	r3, [sp, #8]
 800455e:	2359      	movs	r3, #89	; 0x59
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 8004568:	4632      	mov	r2, r6
 800456a:	21aa      	movs	r1, #170	; 0xaa
 800456c:	4620      	mov	r0, r4
 800456e:	47a8      	blx	r5
}
 8004570:	bf00      	nop
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004578:	08020488 	.word	0x08020488
 800457c:	080205e4 	.word	0x080205e4

08004580 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	605a      	str	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fd00 	bl	8003f9c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800459c:	4a03      	ldr	r2, [pc, #12]	; (80045ac <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	08023798 	.word	0x08023798

080045b0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 80045b0:	b590      	push	{r4, r7, lr}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	225c      	movs	r2, #92	; 0x5c
 80045ba:	4906      	ldr	r1, [pc, #24]	; (80045d4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 80045bc:	2008      	movs	r0, #8
 80045be:	f002 ff81 	bl	80074c4 <_ZnwjPKci>
 80045c2:	4604      	mov	r4, r0
 80045c4:	4620      	mov	r0, r4
 80045c6:	f7ff ffdb 	bl	8004580 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 80045ca:	4623      	mov	r3, r4
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd90      	pop	{r4, r7, pc}
 80045d4:	08020488 	.word	0x08020488

080045d8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f00b fb5c 	bl	800fca0 <_ZN10UtestShellC1Ev>
 80045e8:	4a03      	ldr	r2, [pc, #12]	; (80045f8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	080236ec 	.word	0x080236ec

080045fc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 80045fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045fe:	b089      	sub	sp, #36	; 0x24
 8004600:	af04      	add	r7, sp, #16
 8004602:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	429a      	cmp	r2, r3
 8004612:	d20b      	bcs.n	800462c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	4611      	mov	r1, r2
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff fa07 	bl	8003a32 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3301      	adds	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	e7ed      	b.n	8004608 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 800462c:	f00c fef0 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8004630:	4604      	mov	r4, r0
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	3338      	adds	r3, #56	; 0x38
 8004636:	681d      	ldr	r5, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	3b01      	subs	r3, #1
 8004646:	4413      	add	r3, r2
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	461e      	mov	r6, r3
 800464c:	f00c fef0 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004650:	4603      	mov	r3, r0
 8004652:	9302      	str	r3, [sp, #8]
 8004654:	2363      	movs	r3, #99	; 0x63
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	4b24      	ldr	r3, [pc, #144]	; (80046ec <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	4b24      	ldr	r3, [pc, #144]	; (80046f0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 800465e:	4632      	mov	r2, r6
 8004660:	2131      	movs	r1, #49	; 0x31
 8004662:	4620      	mov	r0, r4
 8004664:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fa35 	bl	8003ada <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004670:	f00c fece 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8004674:	4604      	mov	r4, r0
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	3338      	adds	r3, #56	; 0x38
 800467a:	681d      	ldr	r5, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	3b01      	subs	r3, #1
 800468a:	4413      	add	r3, r2
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	461e      	mov	r6, r3
 8004690:	f00c fece 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004694:	4603      	mov	r3, r0
 8004696:	9302      	str	r3, [sp, #8]
 8004698:	2367      	movs	r3, #103	; 0x67
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	4b13      	ldr	r3, [pc, #76]	; (80046ec <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 80046a2:	4632      	mov	r2, r6
 80046a4:	2100      	movs	r1, #0
 80046a6:	4620      	mov	r0, r4
 80046a8:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 80046aa:	f00c feb1 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 80046ae:	4604      	mov	r4, r0
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	3338      	adds	r3, #56	; 0x38
 80046b4:	681d      	ldr	r5, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	4413      	add	r3, r2
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	461e      	mov	r6, r3
 80046ca:	f00c feb1 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046ce:	4603      	mov	r3, r0
 80046d0:	9302      	str	r3, [sp, #8]
 80046d2:	2368      	movs	r3, #104	; 0x68
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	4b05      	ldr	r3, [pc, #20]	; (80046ec <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 80046dc:	4632      	mov	r2, r6
 80046de:	2100      	movs	r1, #0
 80046e0:	4620      	mov	r0, r4
 80046e2:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ec:	08020488 	.word	0x08020488
 80046f0:	08020604 	.word	0x08020604
 80046f4:	08020640 	.word	0x08020640
 80046f8:	0802067c 	.word	0x0802067c

080046fc <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	605a      	str	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fc42 	bl	8003f9c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004718:	4a03      	ldr	r2, [pc, #12]	; (8004728 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	080236cc 	.word	0x080236cc

0800472c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 800472c:	b590      	push	{r4, r7, lr}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	2271      	movs	r2, #113	; 0x71
 8004736:	4906      	ldr	r1, [pc, #24]	; (8004750 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004738:	2008      	movs	r0, #8
 800473a:	f002 fec3 	bl	80074c4 <_ZnwjPKci>
 800473e:	4604      	mov	r4, r0
 8004740:	4620      	mov	r0, r4
 8004742:	f7ff ffdb 	bl	80046fc <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004746:	4623      	mov	r3, r4
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	bd90      	pop	{r4, r7, pc}
 8004750:	08020488 	.word	0x08020488

08004754 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4618      	mov	r0, r3
 8004760:	f00b fa9e 	bl	800fca0 <_ZN10UtestShellC1Ev>
 8004764:	4a03      	ldr	r2, [pc, #12]	; (8004774 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	08023620 	.word	0x08023620

08004778 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477a:	b087      	sub	sp, #28
 800477c:	af04      	add	r7, sp, #16
 800477e:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	490e      	ldr	r1, [pc, #56]	; (80047c0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff f9b7 	bl	8003afa <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 800478c:	f00c fe40 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8004790:	4604      	mov	r4, r0
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	3324      	adds	r3, #36	; 0x24
 8004796:	681d      	ldr	r5, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	68de      	ldr	r6, [r3, #12]
 800479e:	f00c fe47 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80047a2:	4603      	mov	r3, r0
 80047a4:	9302      	str	r3, [sp, #8]
 80047a6:	2375      	movs	r3, #117	; 0x75
 80047a8:	9301      	str	r3, [sp, #4]
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	2300      	movs	r3, #0
 80047b0:	4632      	mov	r2, r6
 80047b2:	4903      	ldr	r1, [pc, #12]	; (80047c0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 80047b4:	4620      	mov	r0, r4
 80047b6:	47a8      	blx	r5
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047c0:	080206b4 	.word	0x080206b4
 80047c4:	08020488 	.word	0x08020488

080047c8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	605a      	str	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fbdc 	bl	8003f9c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80047e4:	4a03      	ldr	r2, [pc, #12]	; (80047f4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	08023600 	.word	0x08023600

080047f8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	2278      	movs	r2, #120	; 0x78
 8004802:	4906      	ldr	r1, [pc, #24]	; (800481c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004804:	2008      	movs	r0, #8
 8004806:	f002 fe5d 	bl	80074c4 <_ZnwjPKci>
 800480a:	4604      	mov	r4, r0
 800480c:	4620      	mov	r0, r4
 800480e:	f7ff ffdb 	bl	80047c8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004812:	4623      	mov	r3, r4
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	bd90      	pop	{r4, r7, pc}
 800481c:	08020488 	.word	0x08020488

08004820 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4618      	mov	r0, r3
 800482c:	f00b fa38 	bl	800fca0 <_ZN10UtestShellC1Ev>
 8004830:	4a03      	ldr	r2, [pc, #12]	; (8004840 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	08023554 	.word	0x08023554

08004844 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004848:	b08a      	sub	sp, #40	; 0x28
 800484a:	af04      	add	r7, sp, #16
 800484c:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	494e      	ldr	r1, [pc, #312]	; (800498c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff f950 	bl	8003afa <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 800485a:	f00c fdd9 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 800485e:	4604      	mov	r4, r0
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	3324      	adds	r3, #36	; 0x24
 8004864:	681d      	ldr	r5, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	68de      	ldr	r6, [r3, #12]
 800486c:	f00c fde0 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004870:	4603      	mov	r3, r0
 8004872:	9302      	str	r3, [sp, #8]
 8004874:	237c      	movs	r3, #124	; 0x7c
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	4b45      	ldr	r3, [pc, #276]	; (8004990 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	2300      	movs	r3, #0
 800487e:	4632      	mov	r2, r6
 8004880:	4942      	ldr	r1, [pc, #264]	; (800498c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004882:	4620      	mov	r0, r4
 8004884:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	4942      	ldr	r1, [pc, #264]	; (8004994 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff f953 	bl	8003b38 <ringBuffer_lookFor>
 8004892:	4603      	mov	r3, r0
 8004894:	2b01      	cmp	r3, #1
 8004896:	bf14      	ite	ne
 8004898:	2301      	movne	r3, #1
 800489a:	2300      	moveq	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d05c      	beq.n	800495c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	493b      	ldr	r1, [pc, #236]	; (8004994 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff f945 	bl	8003b38 <ringBuffer_lookFor>
 80048ae:	4604      	mov	r4, r0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4937      	ldr	r1, [pc, #220]	; (8004994 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff f93e 	bl	8003b38 <ringBuffer_lookFor>
 80048bc:	4603      	mov	r3, r0
 80048be:	429c      	cmp	r4, r3
 80048c0:	bf14      	ite	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	2300      	moveq	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 80048cc:	f00c fda0 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 80048d0:	6803      	ldr	r3, [r0, #0]
 80048d2:	3370      	adds	r3, #112	; 0x70
 80048d4:	681c      	ldr	r4, [r3, #0]
 80048d6:	237d      	movs	r3, #125	; 0x7d
 80048d8:	4a2d      	ldr	r2, [pc, #180]	; (8004990 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80048da:	492f      	ldr	r1, [pc, #188]	; (8004998 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 80048dc:	47a0      	blx	r4
 80048de:	f00c fd97 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 80048e2:	4604      	mov	r4, r0
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	3358      	adds	r3, #88	; 0x58
 80048e8:	681d      	ldr	r5, [r3, #0]
 80048ea:	f107 0308 	add.w	r3, r7, #8
 80048ee:	2101      	movs	r1, #1
 80048f0:	4618      	mov	r0, r3
 80048f2:	f006 f829 	bl	800a948 <_Z10StringFromi>
 80048f6:	f107 0308 	add.w	r3, r7, #8
 80048fa:	4618      	mov	r0, r3
 80048fc:	f005 fd30 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8004900:	4606      	mov	r6, r0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4923      	ldr	r1, [pc, #140]	; (8004994 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff f915 	bl	8003b38 <ringBuffer_lookFor>
 800490e:	4602      	mov	r2, r0
 8004910:	f107 0310 	add.w	r3, r7, #16
 8004914:	4611      	mov	r1, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f006 fa90 	bl	800ae3c <_Z10StringFromm>
 800491c:	f107 0310 	add.w	r3, r7, #16
 8004920:	4618      	mov	r0, r3
 8004922:	f005 fd1d 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8004926:	4680      	mov	r8, r0
 8004928:	f00c fd82 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800492c:	4603      	mov	r3, r0
 800492e:	9303      	str	r3, [sp, #12]
 8004930:	237d      	movs	r3, #125	; 0x7d
 8004932:	9302      	str	r3, [sp, #8]
 8004934:	4b16      	ldr	r3, [pc, #88]	; (8004990 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	2300      	movs	r3, #0
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	4643      	mov	r3, r8
 800493e:	4632      	mov	r2, r6
 8004940:	2101      	movs	r1, #1
 8004942:	4620      	mov	r0, r4
 8004944:	47a8      	blx	r5
 8004946:	f107 0310 	add.w	r3, r7, #16
 800494a:	4618      	mov	r0, r3
 800494c:	f005 fd35 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8004950:	f107 0308 	add.w	r3, r7, #8
 8004954:	4618      	mov	r0, r3
 8004956:	f005 fd30 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800495a:	e012      	b.n	8004982 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 800495c:	f00c fd58 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8004960:	4604      	mov	r4, r0
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	3338      	adds	r3, #56	; 0x38
 8004966:	681d      	ldr	r5, [r3, #0]
 8004968:	f00c fd62 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800496c:	4603      	mov	r3, r0
 800496e:	9302      	str	r3, [sp, #8]
 8004970:	237d      	movs	r3, #125	; 0x7d
 8004972:	9301      	str	r3, [sp, #4]
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	2300      	movs	r3, #0
 800497a:	2200      	movs	r2, #0
 800497c:	2100      	movs	r1, #0
 800497e:	4620      	mov	r0, r4
 8004980:	47a8      	blx	r5
}
 8004982:	bf00      	nop
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800498c:	080206bc 	.word	0x080206bc
 8004990:	08020488 	.word	0x08020488
 8004994:	080206c8 	.word	0x080206c8
 8004998:	080206d0 	.word	0x080206d0

0800499c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	605a      	str	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff faf2 	bl	8003f9c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80049b8:	4a03      	ldr	r2, [pc, #12]	; (80049c8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4618      	mov	r0, r3
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	08023534 	.word	0x08023534

080049cc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	2280      	movs	r2, #128	; 0x80
 80049d6:	4906      	ldr	r1, [pc, #24]	; (80049f0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 80049d8:	2008      	movs	r0, #8
 80049da:	f002 fd73 	bl	80074c4 <_ZnwjPKci>
 80049de:	4604      	mov	r4, r0
 80049e0:	4620      	mov	r0, r4
 80049e2:	f7ff ffdb 	bl	800499c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 80049e6:	4623      	mov	r3, r4
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd90      	pop	{r4, r7, pc}
 80049f0:	08020488 	.word	0x08020488

080049f4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f00b f94e 	bl	800fca0 <_ZN10UtestShellC1Ev>
 8004a04:	4a03      	ldr	r2, [pc, #12]	; (8004a14 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	08023488 	.word	0x08023488

08004a18 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af04      	add	r7, sp, #16
 8004a1e:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004a20:	f00c fcf6 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8004a24:	4604      	mov	r4, r0
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	3338      	adds	r3, #56	; 0x38
 8004a2a:	681d      	ldr	r5, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff f897 	bl	8003b64 <ringBuffer_capacity>
 8004a36:	4603      	mov	r3, r0
 8004a38:	461e      	mov	r6, r3
 8004a3a:	f00c fcf9 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	9302      	str	r3, [sp, #8]
 8004a42:	2383      	movs	r3, #131	; 0x83
 8004a44:	9301      	str	r3, [sp, #4]
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004a4c:	4632      	mov	r2, r6
 8004a4e:	2132      	movs	r1, #50	; 0x32
 8004a50:	4620      	mov	r0, r4
 8004a52:	47a8      	blx	r5

}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a5c:	08020488 	.word	0x08020488
 8004a60:	08020774 	.word	0x08020774

08004a64 <_Z18UART_Transmit_FakePh>:

//char TxString[50];

void UART_Transmit_Fake(uint8_t* data)
{
 8004a64:	b5b0      	push	{r4, r5, r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
	mock().actualCall("UART_Transmit_Fake").withParameter("data", data);
 8004a6c:	f107 0308 	add.w	r3, r7, #8
 8004a70:	491c      	ldr	r1, [pc, #112]	; (8004ae4 <_Z18UART_Transmit_FakePh+0x80>)
 8004a72:	4618      	mov	r0, r3
 8004a74:	f005 f8e9 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004a78:	f107 0308 	add.w	r3, r7, #8
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f003 f9bc 	bl	8007dfc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004a84:	4604      	mov	r4, r0
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	3318      	adds	r3, #24
 8004a8a:	681d      	ldr	r5, [r3, #0]
 8004a8c:	f107 0310 	add.w	r3, r7, #16
 8004a90:	4915      	ldr	r1, [pc, #84]	; (8004ae8 <_Z18UART_Transmit_FakePh+0x84>)
 8004a92:	4618      	mov	r0, r3
 8004a94:	f005 f8d9 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004a98:	f107 0310 	add.w	r3, r7, #16
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	47a8      	blx	r5
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	f107 0318 	add.w	r3, r7, #24
 8004aa8:	4910      	ldr	r1, [pc, #64]	; (8004aec <_Z18UART_Transmit_FakePh+0x88>)
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f005 f8cd 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004ab0:	f107 0318 	add.w	r3, r7, #24
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f7ff fa2e 	bl	8003f1a <_ZN14MockActualCall13withParameterERK12SimpleStringPv>
 8004abe:	f107 0318 	add.w	r3, r7, #24
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f005 fc79 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8004ac8:	f107 0310 	add.w	r3, r7, #16
 8004acc:	4618      	mov	r0, r3
 8004ace:	f005 fc74 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8004ad2:	f107 0308 	add.w	r3, r7, #8
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f005 fc6f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
	//memcpy(TxString,data,sizeof(data));
}
 8004adc:	bf00      	nop
 8004ade:	3720      	adds	r7, #32
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae4:	080207ac 	.word	0x080207ac
 8004ae8:	080207b0 	.word	0x080207b0
 8004aec:	080207c4 	.word	0x080207c4

08004af0 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004af0:	b5b0      	push	{r4, r5, r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004af6:	463b      	mov	r3, r7
 8004af8:	4916      	ldr	r1, [pc, #88]	; (8004b54 <_Z17UART_Receive_Fakev+0x64>)
 8004afa:	4618      	mov	r0, r3
 8004afc:	f005 f8a5 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004b00:	463b      	mov	r3, r7
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f003 f979 	bl	8007dfc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	3318      	adds	r3, #24
 8004b10:	681d      	ldr	r5, [r3, #0]
 8004b12:	f107 0308 	add.w	r3, r7, #8
 8004b16:	4910      	ldr	r1, [pc, #64]	; (8004b58 <_Z17UART_Receive_Fakev+0x68>)
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f005 f896 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004b1e:	f107 0308 	add.w	r3, r7, #8
 8004b22:	4619      	mov	r1, r3
 8004b24:	4620      	mov	r0, r4
 8004b26:	47a8      	blx	r5
 8004b28:	4603      	mov	r3, r0
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	3264      	adds	r2, #100	; 0x64
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	4790      	blx	r2
 8004b34:	4603      	mov	r3, r0
 8004b36:	b2dc      	uxtb	r4, r3
 8004b38:	f107 0308 	add.w	r3, r7, #8
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f005 fc3c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8004b42:	463b      	mov	r3, r7
 8004b44:	4618      	mov	r0, r3
 8004b46:	f005 fc38 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8004b4a:	4623      	mov	r3, r4
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bdb0      	pop	{r4, r5, r7, pc}
 8004b54:	080207ac 	.word	0x080207ac
 8004b58:	080207cc 	.word	0x080207cc

08004b5c <_Z12getTick_Fakev>:

uint32_t getTick_Fake(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
	return 1;
 8004b60:	2301      	movs	r3, #1
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8004b74:	2364      	movs	r3, #100	; 0x64
 8004b76:	4a04      	ldr	r2, [pc, #16]	; (8004b88 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8004b78:	4904      	ldr	r1, [pc, #16]	; (8004b8c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8004b7a:	4805      	ldr	r0, [pc, #20]	; (8004b90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8004b7c:	f7fe fec4 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);

	}
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	08004b5d 	.word	0x08004b5d
 8004b8c:	08004af1 	.word	0x08004af1
 8004b90:	08004a65 	.word	0x08004a65

08004b94 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	{

		mock().clear();
 8004b9c:	f107 0308 	add.w	r3, r7, #8
 8004ba0:	490c      	ldr	r1, [pc, #48]	; (8004bd4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x40>)
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f005 f851 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004ba8:	f107 0308 	add.w	r3, r7, #8
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f003 f924 	bl	8007dfc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	329c      	adds	r2, #156	; 0x9c
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	4790      	blx	r2
 8004bc0:	f107 0308 	add.w	r3, r7, #8
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f005 fbf8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
	}
 8004bca:	bf00      	nop
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	080207ac 	.word	0x080207ac

08004bd8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f00c fc3e 	bl	8011464 <_ZN5UtestC1Ev>
 8004be8:	4a03      	ldr	r2, [pc, #12]	; (8004bf8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	08023468 	.word	0x08023468

08004bfc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	4a05      	ldr	r2, [pc, #20]	; (8004c1c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f00c fc39 	bl	8011484 <_ZN5UtestD1Ev>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	08023468 	.word	0x08023468

08004c20 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ffe7 	bl	8004bfc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8004c2e:	2104      	movs	r1, #4
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f002 fc5b 	bl	80074ec <_ZdlPvj>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff ffc4 	bl	8004bd8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004c50:	4a03      	ldr	r2, [pc, #12]	; (8004c60 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	08023448 	.word	0x08023448

08004c64 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8004c64:	b590      	push	{r4, r7, lr}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	22b2      	movs	r2, #178	; 0xb2
 8004c6e:	4906      	ldr	r1, [pc, #24]	; (8004c88 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8004c70:	2004      	movs	r0, #4
 8004c72:	f002 fc27 	bl	80074c4 <_ZnwjPKci>
 8004c76:	4604      	mov	r4, r0
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f7ff ffe1 	bl	8004c40 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8004c7e:	4623      	mov	r3, r4
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd90      	pop	{r4, r7, pc}
 8004c88:	08020488 	.word	0x08020488

08004c8c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f00b f802 	bl	800fca0 <_ZN10UtestShellC1Ev>
 8004c9c:	4a03      	ldr	r2, [pc, #12]	; (8004cac <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	0802339c 	.word	0x0802339c

08004cb0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8004cb0:	b5b0      	push	{r4, r5, r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af04      	add	r7, sp, #16
 8004cb6:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8004cb8:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004cba:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8004cbc:	601a      	str	r2, [r3, #0]
	int result = ESP_Init(transmit,
 8004cbe:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	2364      	movs	r3, #100	; 0x64
 8004cc4:	4a0f      	ldr	r2, [pc, #60]	; (8004d04 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8004cc6:	4910      	ldr	r1, [pc, #64]	; (8004d08 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8004cc8:	f7fe fe1e 	bl	8003908 <ESP_Init>
 8004ccc:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 8004cce:	f00c fb9f 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	3338      	adds	r3, #56	; 0x38
 8004cd8:	681d      	ldr	r5, [r3, #0]
 8004cda:	f00c fba9 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	9302      	str	r3, [sp, #8]
 8004ce2:	23c0      	movs	r3, #192	; 0xc0
 8004ce4:	9301      	str	r3, [sp, #4]
 8004ce6:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	2101      	movs	r1, #1
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	47a8      	blx	r5

}
 8004cf4:	bf00      	nop
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8004cfc:	200005b0 	.word	0x200005b0
 8004d00:	08004a65 	.word	0x08004a65
 8004d04:	08004b5d 	.word	0x08004b5d
 8004d08:	08004af1 	.word	0x08004af1
 8004d0c:	08020488 	.word	0x08020488
 8004d10:	080207e0 	.word	0x080207e0

08004d14 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff ff5a 	bl	8004bd8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004d24:	4a03      	ldr	r2, [pc, #12]	; (8004d34 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	0802337c 	.word	0x0802337c

08004d38 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8004d38:	b590      	push	{r4, r7, lr}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	22c4      	movs	r2, #196	; 0xc4
 8004d42:	4906      	ldr	r1, [pc, #24]	; (8004d5c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8004d44:	2004      	movs	r0, #4
 8004d46:	f002 fbbd 	bl	80074c4 <_ZnwjPKci>
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7ff ffe1 	bl	8004d14 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 8004d52:	4623      	mov	r3, r4
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd90      	pop	{r4, r7, pc}
 8004d5c:	08020488 	.word	0x08020488

08004d60 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f00a ff98 	bl	800fca0 <_ZN10UtestShellC1Ev>
 8004d70:	4a03      	ldr	r2, [pc, #12]	; (8004d80 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	080232d0 	.word	0x080232d0

08004d84 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8004d84:	b5b0      	push	{r4, r5, r7, lr}
 8004d86:	b090      	sub	sp, #64	; 0x40
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t *)"Test");
 8004d8c:	f107 0308 	add.w	r3, r7, #8
 8004d90:	4947      	ldr	r1, [pc, #284]	; (8004eb0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8004d92:	4618      	mov	r0, r3
 8004d94:	f004 ff59 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004d98:	f107 0308 	add.w	r3, r7, #8
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f003 f82c 	bl	8007dfc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004da4:	4604      	mov	r4, r0
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	681d      	ldr	r5, [r3, #0]
 8004dac:	f107 0310 	add.w	r3, r7, #16
 8004db0:	4940      	ldr	r1, [pc, #256]	; (8004eb4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x130>)
 8004db2:	4618      	mov	r0, r3
 8004db4:	f004 ff49 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004db8:	f107 0310 	add.w	r3, r7, #16
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	47a8      	blx	r5
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	f107 0318 	add.w	r3, r7, #24
 8004dc8:	493b      	ldr	r1, [pc, #236]	; (8004eb8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x134>)
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f004 ff3d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004dd0:	f107 0318 	add.w	r3, r7, #24
 8004dd4:	4a39      	ldr	r2, [pc, #228]	; (8004ebc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x138>)
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7ff f8b1 	bl	8003f40 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>
 8004dde:	f107 0318 	add.w	r3, r7, #24
 8004de2:	4618      	mov	r0, r3
 8004de4:	f005 fae9 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8004de8:	f107 0310 	add.w	r3, r7, #16
 8004dec:	4618      	mov	r0, r3
 8004dee:	f005 fae4 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8004df2:	f107 0308 	add.w	r3, r7, #8
 8004df6:	4618      	mov	r0, r3
 8004df8:	f005 fadf 	bl	800a3ba <_ZN12SimpleStringD1Ev>
	Send_AT_Command((char*)"Test");
 8004dfc:	482f      	ldr	r0, [pc, #188]	; (8004ebc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x138>)
 8004dfe:	f7fe fdaf 	bl	8003960 <Send_AT_Command>
	//STRCMP_EQUAL("Test",TxString);
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t *)"AT\r\n");
 8004e02:	f107 0320 	add.w	r3, r7, #32
 8004e06:	492a      	ldr	r1, [pc, #168]	; (8004eb0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f004 ff1e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004e0e:	f107 0320 	add.w	r3, r7, #32
 8004e12:	2100      	movs	r1, #0
 8004e14:	4618      	mov	r0, r3
 8004e16:	f002 fff1 	bl	8007dfc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	681d      	ldr	r5, [r3, #0]
 8004e22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e26:	4923      	ldr	r1, [pc, #140]	; (8004eb4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x130>)
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f004 ff0e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004e2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e32:	4619      	mov	r1, r3
 8004e34:	4620      	mov	r0, r4
 8004e36:	47a8      	blx	r5
 8004e38:	4604      	mov	r4, r0
 8004e3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e3e:	491e      	ldr	r1, [pc, #120]	; (8004eb8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x134>)
 8004e40:	4618      	mov	r0, r3
 8004e42:	f004 ff02 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004e46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e4a:	4a1d      	ldr	r2, [pc, #116]	; (8004ec0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x13c>)
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f7ff f876 	bl	8003f40 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>
 8004e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f005 faae 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8004e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e62:	4618      	mov	r0, r3
 8004e64:	f005 faa9 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8004e68:	f107 0320 	add.w	r3, r7, #32
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f005 faa4 	bl	800a3ba <_ZN12SimpleStringD1Ev>
	Send_AT_Command((char*)"AT\r\n");
 8004e72:	4813      	ldr	r0, [pc, #76]	; (8004ec0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x13c>)
 8004e74:	f7fe fd74 	bl	8003960 <Send_AT_Command>
	mock().checkExpectations();
 8004e78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e7c:	490c      	ldr	r1, [pc, #48]	; (8004eb0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f004 fee3 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004e84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e88:	2100      	movs	r1, #0
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f002 ffb6 	bl	8007dfc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e90:	4603      	mov	r3, r0
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	3294      	adds	r2, #148	; 0x94
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	4790      	blx	r2
 8004e9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f005 fa8a 	bl	800a3ba <_ZN12SimpleStringD1Ev>

}
 8004ea6:	bf00      	nop
 8004ea8:	3740      	adds	r7, #64	; 0x40
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bdb0      	pop	{r4, r5, r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	080207ac 	.word	0x080207ac
 8004eb4:	080207b0 	.word	0x080207b0
 8004eb8:	080207c4 	.word	0x080207c4
 8004ebc:	080206b4 	.word	0x080206b4
 8004ec0:	08020800 	.word	0x08020800

08004ec4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff fe82 	bl	8004bd8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004ed4:	4a03      	ldr	r2, [pc, #12]	; (8004ee4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	080232b0 	.word	0x080232b0

08004ee8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	22cf      	movs	r2, #207	; 0xcf
 8004ef2:	4906      	ldr	r1, [pc, #24]	; (8004f0c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8004ef4:	2004      	movs	r0, #4
 8004ef6:	f002 fae5 	bl	80074c4 <_ZnwjPKci>
 8004efa:	4604      	mov	r4, r0
 8004efc:	4620      	mov	r0, r4
 8004efe:	f7ff ffe1 	bl	8004ec4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 8004f02:	4623      	mov	r3, r4
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd90      	pop	{r4, r7, pc}
 8004f0c:	08020488 	.word	0x08020488

08004f10 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f00a fec0 	bl	800fca0 <_ZN10UtestShellC1Ev>
 8004f20:	4a03      	ldr	r2, [pc, #12]	; (8004f30 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	08023204 	.word	0x08023204

08004f34 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 8004f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f36:	b099      	sub	sp, #100	; 0x64
 8004f38:	af04      	add	r7, sp, #16
 8004f3a:	6078      	str	r0, [r7, #4]

	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'O');
 8004f3c:	f107 0308 	add.w	r3, r7, #8
 8004f40:	4973      	ldr	r1, [pc, #460]	; (8005110 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 8004f42:	4618      	mov	r0, r3
 8004f44:	f004 fe81 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004f48:	f107 0308 	add.w	r3, r7, #8
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f002 ff54 	bl	8007dfc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f54:	4604      	mov	r4, r0
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	330c      	adds	r3, #12
 8004f5a:	681d      	ldr	r5, [r3, #0]
 8004f5c:	f107 0310 	add.w	r3, r7, #16
 8004f60:	496c      	ldr	r1, [pc, #432]	; (8005114 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 8004f62:	4618      	mov	r0, r3
 8004f64:	f004 fe71 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004f68:	f107 0310 	add.w	r3, r7, #16
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4620      	mov	r0, r4
 8004f70:	47a8      	blx	r5
 8004f72:	4603      	mov	r3, r0
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	3264      	adds	r2, #100	; 0x64
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	214f      	movs	r1, #79	; 0x4f
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	4790      	blx	r2
 8004f80:	f107 0310 	add.w	r3, r7, #16
 8004f84:	4618      	mov	r0, r3
 8004f86:	f005 fa18 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8004f8a:	f107 0308 	add.w	r3, r7, #8
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f005 fa13 	bl	800a3ba <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8004f94:	f7fe fcf2 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'K');
 8004f98:	f107 0318 	add.w	r3, r7, #24
 8004f9c:	495c      	ldr	r1, [pc, #368]	; (8005110 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f004 fe53 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004fa4:	f107 0318 	add.w	r3, r7, #24
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f002 ff26 	bl	8007dfc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	330c      	adds	r3, #12
 8004fb6:	681d      	ldr	r5, [r3, #0]
 8004fb8:	f107 0320 	add.w	r3, r7, #32
 8004fbc:	4955      	ldr	r1, [pc, #340]	; (8005114 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f004 fe43 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8004fc4:	f107 0320 	add.w	r3, r7, #32
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4620      	mov	r0, r4
 8004fcc:	47a8      	blx	r5
 8004fce:	4603      	mov	r3, r0
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	3264      	adds	r2, #100	; 0x64
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	214b      	movs	r1, #75	; 0x4b
 8004fd8:	4618      	mov	r0, r3
 8004fda:	4790      	blx	r2
 8004fdc:	f107 0320 	add.w	r3, r7, #32
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f005 f9ea 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8004fe6:	f107 0318 	add.w	r3, r7, #24
 8004fea:	4618      	mov	r0, r3
 8004fec:	f005 f9e5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8004ff0:	f7fe fcc4 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\r');
 8004ff4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ff8:	4945      	ldr	r1, [pc, #276]	; (8005110 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f004 fe25 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8005000:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005004:	2100      	movs	r1, #0
 8005006:	4618      	mov	r0, r3
 8005008:	f002 fef8 	bl	8007dfc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800500c:	4604      	mov	r4, r0
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	681d      	ldr	r5, [r3, #0]
 8005014:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005018:	493e      	ldr	r1, [pc, #248]	; (8005114 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 800501a:	4618      	mov	r0, r3
 800501c:	f004 fe15 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8005020:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005024:	4619      	mov	r1, r3
 8005026:	4620      	mov	r0, r4
 8005028:	47a8      	blx	r5
 800502a:	4603      	mov	r3, r0
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	3264      	adds	r2, #100	; 0x64
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	210d      	movs	r1, #13
 8005034:	4618      	mov	r0, r3
 8005036:	4790      	blx	r2
 8005038:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800503c:	4618      	mov	r0, r3
 800503e:	f005 f9bc 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8005042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005046:	4618      	mov	r0, r3
 8005048:	f005 f9b7 	bl	800a3ba <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 800504c:	f7fe fc96 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\n');
 8005050:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005054:	492e      	ldr	r1, [pc, #184]	; (8005110 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 8005056:	4618      	mov	r0, r3
 8005058:	f004 fdf7 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800505c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f002 feca 	bl	8007dfc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005068:	4604      	mov	r4, r0
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	330c      	adds	r3, #12
 800506e:	681d      	ldr	r5, [r3, #0]
 8005070:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005074:	4927      	ldr	r1, [pc, #156]	; (8005114 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 8005076:	4618      	mov	r0, r3
 8005078:	f004 fde7 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800507c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005080:	4619      	mov	r1, r3
 8005082:	4620      	mov	r0, r4
 8005084:	47a8      	blx	r5
 8005086:	4603      	mov	r3, r0
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	3264      	adds	r2, #100	; 0x64
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	210a      	movs	r1, #10
 8005090:	4618      	mov	r0, r3
 8005092:	4790      	blx	r2
 8005094:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005098:	4618      	mov	r0, r3
 800509a:	f005 f98e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800509e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80050a2:	4618      	mov	r0, r3
 80050a4:	f005 f989 	bl	800a3ba <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80050a8:	f7fe fc68 	bl	800397c <ESP_UART_ReceiveHandler>

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the rx ring buffer.
 80050ac:	f00c f9b0 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 80050b0:	4604      	mov	r4, r0
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	3324      	adds	r3, #36	; 0x24
 80050b6:	681d      	ldr	r5, [r3, #0]
 80050b8:	4b17      	ldr	r3, [pc, #92]	; (8005118 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68de      	ldr	r6, [r3, #12]
 80050be:	f00c f9b7 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80050c2:	4603      	mov	r3, r0
 80050c4:	9302      	str	r3, [sp, #8]
 80050c6:	23db      	movs	r3, #219	; 0xdb
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	4b14      	ldr	r3, [pc, #80]	; (800511c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e8>)
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2300      	movs	r3, #0
 80050d0:	4632      	mov	r2, r6
 80050d2:	4913      	ldr	r1, [pc, #76]	; (8005120 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ec>)
 80050d4:	4620      	mov	r0, r4
 80050d6:	47a8      	blx	r5
	mock().checkExpectations();
 80050d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80050dc:	490c      	ldr	r1, [pc, #48]	; (8005110 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 80050de:	4618      	mov	r0, r3
 80050e0:	f004 fdb3 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80050e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80050e8:	2100      	movs	r1, #0
 80050ea:	4618      	mov	r0, r3
 80050ec:	f002 fe86 	bl	8007dfc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80050f0:	4603      	mov	r3, r0
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	3294      	adds	r2, #148	; 0x94
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	4790      	blx	r2
 80050fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005100:	4618      	mov	r0, r3
 8005102:	f005 f95a 	bl	800a3ba <_ZN12SimpleStringD1Ev>

}
 8005106:	bf00      	nop
 8005108:	3754      	adds	r7, #84	; 0x54
 800510a:	46bd      	mov	sp, r7
 800510c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800510e:	bf00      	nop
 8005110:	080207ac 	.word	0x080207ac
 8005114:	080207cc 	.word	0x080207cc
 8005118:	2000048c 	.word	0x2000048c
 800511c:	08020488 	.word	0x08020488
 8005120:	08020808 	.word	0x08020808

08005124 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	4a05      	ldr	r2, [pc, #20]	; (8005144 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4618      	mov	r0, r3
 8005136:	f00a fe07 	bl	800fd48 <_ZN10UtestShellD1Ev>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	08023204 	.word	0x08023204

08005148 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ffe7 	bl	8005124 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8005156:	211c      	movs	r1, #28
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f002 f9c7 	bl	80074ec <_ZdlPvj>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	4a05      	ldr	r2, [pc, #20]	; (8005188 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff fd3f 	bl	8004bfc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	080232b0 	.word	0x080232b0

0800518c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff ffe7 	bl	8005168 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 800519a:	2104      	movs	r1, #4
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f002 f9a5 	bl	80074ec <_ZdlPvj>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	4a05      	ldr	r2, [pc, #20]	; (80051cc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4618      	mov	r0, r3
 80051be:	f00a fdc3 	bl	800fd48 <_ZN10UtestShellD1Ev>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	080232d0 	.word	0x080232d0

080051d0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff ffe7 	bl	80051ac <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 80051de:	211c      	movs	r1, #28
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f002 f983 	bl	80074ec <_ZdlPvj>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	4a05      	ldr	r2, [pc, #20]	; (8005210 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff fcfb 	bl	8004bfc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	0802337c 	.word	0x0802337c

08005214 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff ffe7 	bl	80051f0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8005222:	2104      	movs	r1, #4
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f002 f961 	bl	80074ec <_ZdlPvj>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	4a05      	ldr	r2, [pc, #20]	; (8005254 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4618      	mov	r0, r3
 8005246:	f00a fd7f 	bl	800fd48 <_ZN10UtestShellD1Ev>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	0802339c 	.word	0x0802339c

08005258 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff ffe7 	bl	8005234 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8005266:	211c      	movs	r1, #28
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f002 f93f 	bl	80074ec <_ZdlPvj>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	4a05      	ldr	r2, [pc, #20]	; (8005298 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff fcb7 	bl	8004bfc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	08023448 	.word	0x08023448

0800529c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff ffe7 	bl	8005278 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 80052aa:	2104      	movs	r1, #4
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f002 f91d 	bl	80074ec <_ZdlPvj>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	4a05      	ldr	r2, [pc, #20]	; (80052dc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f00a fd3b 	bl	800fd48 <_ZN10UtestShellD1Ev>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	08023488 	.word	0x08023488

080052e0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7ff ffe7 	bl	80052bc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 80052ee:	211c      	movs	r1, #28
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f002 f8fb 	bl	80074ec <_ZdlPvj>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	4a05      	ldr	r2, [pc, #20]	; (8005320 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4618      	mov	r0, r3
 8005312:	f7fe fe55 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	08023534 	.word	0x08023534

08005324 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff ffe7 	bl	8005300 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8005332:	2108      	movs	r1, #8
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f002 f8d9 	bl	80074ec <_ZdlPvj>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	4a05      	ldr	r2, [pc, #20]	; (8005364 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4618      	mov	r0, r3
 8005356:	f00a fcf7 	bl	800fd48 <_ZN10UtestShellD1Ev>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	08023554 	.word	0x08023554

08005368 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff ffe7 	bl	8005344 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8005376:	211c      	movs	r1, #28
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f002 f8b7 	bl	80074ec <_ZdlPvj>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	4a05      	ldr	r2, [pc, #20]	; (80053a8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4618      	mov	r0, r3
 800539a:	f7fe fe11 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	08023600 	.word	0x08023600

080053ac <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff ffe7 	bl	8005388 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 80053ba:	2108      	movs	r1, #8
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f002 f895 	bl	80074ec <_ZdlPvj>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	4a05      	ldr	r2, [pc, #20]	; (80053ec <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4618      	mov	r0, r3
 80053de:	f00a fcb3 	bl	800fd48 <_ZN10UtestShellD1Ev>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	08023620 	.word	0x08023620

080053f0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff ffe7 	bl	80053cc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 80053fe:	211c      	movs	r1, #28
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f002 f873 	bl	80074ec <_ZdlPvj>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	4a05      	ldr	r2, [pc, #20]	; (8005430 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4618      	mov	r0, r3
 8005422:	f7fe fdcd 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	080236cc 	.word	0x080236cc

08005434 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7ff ffe7 	bl	8005410 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8005442:	2108      	movs	r1, #8
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f002 f851 	bl	80074ec <_ZdlPvj>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4618      	mov	r0, r3
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	4a05      	ldr	r2, [pc, #20]	; (8005474 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4618      	mov	r0, r3
 8005466:	f00a fc6f 	bl	800fd48 <_ZN10UtestShellD1Ev>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	080236ec 	.word	0x080236ec

08005478 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff ffe7 	bl	8005454 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8005486:	211c      	movs	r1, #28
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f002 f82f 	bl	80074ec <_ZdlPvj>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	4a05      	ldr	r2, [pc, #20]	; (80054b8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fe fd89 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	08023798 	.word	0x08023798

080054bc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff ffe7 	bl	8005498 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 80054ca:	2108      	movs	r1, #8
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f002 f80d 	bl	80074ec <_ZdlPvj>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4618      	mov	r0, r3
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	4a05      	ldr	r2, [pc, #20]	; (80054fc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f00a fc2b 	bl	800fd48 <_ZN10UtestShellD1Ev>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	080237b8 	.word	0x080237b8

08005500 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff ffe7 	bl	80054dc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 800550e:	211c      	movs	r1, #28
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f001 ffeb 	bl	80074ec <_ZdlPvj>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	4a05      	ldr	r2, [pc, #20]	; (8005540 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4618      	mov	r0, r3
 8005532:	f7fe fd45 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	08023864 	.word	0x08023864

08005544 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff ffe7 	bl	8005520 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8005552:	2108      	movs	r1, #8
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f001 ffc9 	bl	80074ec <_ZdlPvj>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	4a05      	ldr	r2, [pc, #20]	; (8005584 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4618      	mov	r0, r3
 8005576:	f00a fbe7 	bl	800fd48 <_ZN10UtestShellD1Ev>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	08023884 	.word	0x08023884

08005588 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff ffe7 	bl	8005564 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8005596:	211c      	movs	r1, #28
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 ffa7 	bl	80074ec <_ZdlPvj>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	4a05      	ldr	r2, [pc, #20]	; (80055c8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fe fd01 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	08023930 	.word	0x08023930

080055cc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff ffe7 	bl	80055a8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 80055da:	2108      	movs	r1, #8
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 ff85 	bl	80074ec <_ZdlPvj>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	4a05      	ldr	r2, [pc, #20]	; (800560c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f00a fba3 	bl	800fd48 <_ZN10UtestShellD1Ev>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	08023950 	.word	0x08023950

08005610 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff ffe7 	bl	80055ec <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 800561e:	211c      	movs	r1, #28
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f001 ff63 	bl	80074ec <_ZdlPvj>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	4a05      	ldr	r2, [pc, #20]	; (8005650 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4618      	mov	r0, r3
 8005642:	f7fe fcbd 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	080239fc 	.word	0x080239fc

08005654 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff ffe7 	bl	8005630 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8005662:	2108      	movs	r1, #8
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f001 ff41 	bl	80074ec <_ZdlPvj>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	4a05      	ldr	r2, [pc, #20]	; (8005694 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4618      	mov	r0, r3
 8005686:	f00a fb5f 	bl	800fd48 <_ZN10UtestShellD1Ev>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	08023a1c 	.word	0x08023a1c

08005698 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff ffe7 	bl	8005674 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 80056a6:	211c      	movs	r1, #28
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f001 ff1f 	bl	80074ec <_ZdlPvj>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	4a05      	ldr	r2, [pc, #20]	; (80056d8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fe fc79 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	08023ac8 	.word	0x08023ac8

080056dc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff ffe7 	bl	80056b8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 80056ea:	2108      	movs	r1, #8
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f001 fefd 	bl	80074ec <_ZdlPvj>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	4a05      	ldr	r2, [pc, #20]	; (800571c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4618      	mov	r0, r3
 800570e:	f00a fb1b 	bl	800fd48 <_ZN10UtestShellD1Ev>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	08023ae8 	.word	0x08023ae8

08005720 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ffe7 	bl	80056fc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 800572e:	211c      	movs	r1, #28
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f001 fedb 	bl	80074ec <_ZdlPvj>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	4a05      	ldr	r2, [pc, #20]	; (8005760 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4618      	mov	r0, r3
 8005752:	f7fe fc35 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	08023b94 	.word	0x08023b94

08005764 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff ffe7 	bl	8005740 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8005772:	2108      	movs	r1, #8
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 feb9 	bl	80074ec <_ZdlPvj>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <_Z41__static_initialization_and_destruction_0ii>:
}
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af02      	add	r7, sp, #8
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b01      	cmp	r3, #1
 8005792:	f040 80a2 	bne.w	80058da <_Z41__static_initialization_and_destruction_0ii+0x156>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800579c:	4293      	cmp	r3, r2
 800579e:	f040 809c 	bne.w	80058da <_Z41__static_initialization_and_destruction_0ii+0x156>
TEST(RingBuffer_Test_Group, InitTest)
 80057a2:	4878      	ldr	r0, [pc, #480]	; (8005984 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80057a4:	f7fe fc5a 	bl	800405c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 80057a8:	2324      	movs	r3, #36	; 0x24
 80057aa:	9301      	str	r3, [sp, #4]
 80057ac:	4b76      	ldr	r3, [pc, #472]	; (8005988 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	4b76      	ldr	r3, [pc, #472]	; (800598c <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80057b2:	4a77      	ldr	r2, [pc, #476]	; (8005990 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 80057b4:	4973      	ldr	r1, [pc, #460]	; (8005984 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80057b6:	4877      	ldr	r0, [pc, #476]	; (8005994 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 80057b8:	f00c f8c2 	bl	8011940 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 80057bc:	4876      	ldr	r0, [pc, #472]	; (8005998 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80057be:	f7fe fd01 	bl	80041c4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 80057c2:	232e      	movs	r3, #46	; 0x2e
 80057c4:	9301      	str	r3, [sp, #4]
 80057c6:	4b70      	ldr	r3, [pc, #448]	; (8005988 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	4b74      	ldr	r3, [pc, #464]	; (800599c <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80057cc:	4a70      	ldr	r2, [pc, #448]	; (8005990 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 80057ce:	4972      	ldr	r1, [pc, #456]	; (8005998 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80057d0:	4873      	ldr	r0, [pc, #460]	; (80059a0 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80057d2:	f00c f8b5 	bl	8011940 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80057d6:	4873      	ldr	r0, [pc, #460]	; (80059a4 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80057d8:	f7fe fd7e 	bl	80042d8 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 80057dc:	2338      	movs	r3, #56	; 0x38
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	4b69      	ldr	r3, [pc, #420]	; (8005988 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	4b70      	ldr	r3, [pc, #448]	; (80059a8 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80057e6:	4a6a      	ldr	r2, [pc, #424]	; (8005990 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 80057e8:	496e      	ldr	r1, [pc, #440]	; (80059a4 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80057ea:	4870      	ldr	r0, [pc, #448]	; (80059ac <_Z41__static_initialization_and_destruction_0ii+0x228>)
 80057ec:	f00c f8a8 	bl	8011940 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 80057f0:	486f      	ldr	r0, [pc, #444]	; (80059b0 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80057f2:	f7fe fdf9 	bl	80043e8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 80057f6:	2343      	movs	r3, #67	; 0x43
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	4b63      	ldr	r3, [pc, #396]	; (8005988 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	4b6d      	ldr	r3, [pc, #436]	; (80059b4 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8005800:	4a63      	ldr	r2, [pc, #396]	; (8005990 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8005802:	496b      	ldr	r1, [pc, #428]	; (80059b0 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8005804:	486c      	ldr	r0, [pc, #432]	; (80059b8 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8005806:	f00c f89b 	bl	8011940 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800580a:	486c      	ldr	r0, [pc, #432]	; (80059bc <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800580c:	f7fe fe58 	bl	80044c0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8005810:	234c      	movs	r3, #76	; 0x4c
 8005812:	9301      	str	r3, [sp, #4]
 8005814:	4b5c      	ldr	r3, [pc, #368]	; (8005988 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	4b69      	ldr	r3, [pc, #420]	; (80059c0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 800581a:	4a5d      	ldr	r2, [pc, #372]	; (8005990 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 800581c:	4967      	ldr	r1, [pc, #412]	; (80059bc <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800581e:	4869      	ldr	r0, [pc, #420]	; (80059c4 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8005820:	f00c f88e 	bl	8011940 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8005824:	4868      	ldr	r0, [pc, #416]	; (80059c8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8005826:	f7fe fed7 	bl	80045d8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 800582a:	235c      	movs	r3, #92	; 0x5c
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	4b56      	ldr	r3, [pc, #344]	; (8005988 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	4b66      	ldr	r3, [pc, #408]	; (80059cc <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8005834:	4a56      	ldr	r2, [pc, #344]	; (8005990 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8005836:	4964      	ldr	r1, [pc, #400]	; (80059c8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8005838:	4865      	ldr	r0, [pc, #404]	; (80059d0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800583a:	f00c f881 	bl	8011940 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 800583e:	4865      	ldr	r0, [pc, #404]	; (80059d4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005840:	f7fe ff88 	bl	8004754 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8005844:	2371      	movs	r3, #113	; 0x71
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	4b4f      	ldr	r3, [pc, #316]	; (8005988 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	4b62      	ldr	r3, [pc, #392]	; (80059d8 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800584e:	4a50      	ldr	r2, [pc, #320]	; (8005990 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8005850:	4960      	ldr	r1, [pc, #384]	; (80059d4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005852:	4862      	ldr	r0, [pc, #392]	; (80059dc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005854:	f00c f874 	bl	8011940 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 8005858:	4861      	ldr	r0, [pc, #388]	; (80059e0 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 800585a:	f7fe ffe1 	bl	8004820 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 800585e:	2378      	movs	r3, #120	; 0x78
 8005860:	9301      	str	r3, [sp, #4]
 8005862:	4b49      	ldr	r3, [pc, #292]	; (8005988 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	4b5f      	ldr	r3, [pc, #380]	; (80059e4 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8005868:	4a49      	ldr	r2, [pc, #292]	; (8005990 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 800586a:	495d      	ldr	r1, [pc, #372]	; (80059e0 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 800586c:	485e      	ldr	r0, [pc, #376]	; (80059e8 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800586e:	f00c f867 	bl	8011940 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 8005872:	485e      	ldr	r0, [pc, #376]	; (80059ec <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005874:	f7ff f8be 	bl	80049f4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	4b42      	ldr	r3, [pc, #264]	; (8005988 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	4b5b      	ldr	r3, [pc, #364]	; (80059f0 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8005882:	4a43      	ldr	r2, [pc, #268]	; (8005990 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8005884:	4959      	ldr	r1, [pc, #356]	; (80059ec <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005886:	485b      	ldr	r0, [pc, #364]	; (80059f4 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8005888:	f00c f85a 	bl	8011940 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 800588c:	485a      	ldr	r0, [pc, #360]	; (80059f8 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 800588e:	f7ff f9fd 	bl	8004c8c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 8005892:	23b2      	movs	r3, #178	; 0xb2
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	4b3c      	ldr	r3, [pc, #240]	; (8005988 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	4b58      	ldr	r3, [pc, #352]	; (80059fc <_Z41__static_initialization_and_destruction_0ii+0x278>)
 800589c:	4a58      	ldr	r2, [pc, #352]	; (8005a00 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 800589e:	4956      	ldr	r1, [pc, #344]	; (80059f8 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 80058a0:	4858      	ldr	r0, [pc, #352]	; (8005a04 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 80058a2:	f00c f84d 	bl	8011940 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80058a6:	4858      	ldr	r0, [pc, #352]	; (8005a08 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 80058a8:	f7ff fa5a 	bl	8004d60 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 80058ac:	23c4      	movs	r3, #196	; 0xc4
 80058ae:	9301      	str	r3, [sp, #4]
 80058b0:	4b35      	ldr	r3, [pc, #212]	; (8005988 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	4b55      	ldr	r3, [pc, #340]	; (8005a0c <_Z41__static_initialization_and_destruction_0ii+0x288>)
 80058b6:	4a52      	ldr	r2, [pc, #328]	; (8005a00 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 80058b8:	4953      	ldr	r1, [pc, #332]	; (8005a08 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 80058ba:	4855      	ldr	r0, [pc, #340]	; (8005a10 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 80058bc:	f00c f840 	bl	8011940 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80058c0:	4854      	ldr	r0, [pc, #336]	; (8005a14 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 80058c2:	f7ff fb25 	bl	8004f10 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 80058c6:	23cf      	movs	r3, #207	; 0xcf
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	4b2f      	ldr	r3, [pc, #188]	; (8005988 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	4b52      	ldr	r3, [pc, #328]	; (8005a18 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 80058d0:	4a4b      	ldr	r2, [pc, #300]	; (8005a00 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 80058d2:	4950      	ldr	r1, [pc, #320]	; (8005a14 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 80058d4:	4851      	ldr	r0, [pc, #324]	; (8005a1c <_Z41__static_initialization_and_destruction_0ii+0x298>)
 80058d6:	f00c f833 	bl	8011940 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d14c      	bne.n	800597a <_Z41__static_initialization_and_destruction_0ii+0x1f6>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d147      	bne.n	800597a <_Z41__static_initialization_and_destruction_0ii+0x1f6>
 80058ea:	484c      	ldr	r0, [pc, #304]	; (8005a1c <_Z41__static_initialization_and_destruction_0ii+0x298>)
 80058ec:	f00c f852 	bl	8011994 <_ZN13TestInstallerD1Ev>
 80058f0:	4848      	ldr	r0, [pc, #288]	; (8005a14 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 80058f2:	f7ff fc17 	bl	8005124 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80058f6:	4846      	ldr	r0, [pc, #280]	; (8005a10 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 80058f8:	f00c f84c 	bl	8011994 <_ZN13TestInstallerD1Ev>
 80058fc:	4842      	ldr	r0, [pc, #264]	; (8005a08 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 80058fe:	f7ff fc55 	bl	80051ac <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005902:	4840      	ldr	r0, [pc, #256]	; (8005a04 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8005904:	f00c f846 	bl	8011994 <_ZN13TestInstallerD1Ev>
 8005908:	483b      	ldr	r0, [pc, #236]	; (80059f8 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 800590a:	f7ff fc93 	bl	8005234 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 800590e:	4839      	ldr	r0, [pc, #228]	; (80059f4 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8005910:	f00c f840 	bl	8011994 <_ZN13TestInstallerD1Ev>
 8005914:	4835      	ldr	r0, [pc, #212]	; (80059ec <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005916:	f7ff fcd1 	bl	80052bc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 800591a:	4833      	ldr	r0, [pc, #204]	; (80059e8 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800591c:	f00c f83a 	bl	8011994 <_ZN13TestInstallerD1Ev>
 8005920:	482f      	ldr	r0, [pc, #188]	; (80059e0 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8005922:	f7ff fd0f 	bl	8005344 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8005926:	482d      	ldr	r0, [pc, #180]	; (80059dc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005928:	f00c f834 	bl	8011994 <_ZN13TestInstallerD1Ev>
 800592c:	4829      	ldr	r0, [pc, #164]	; (80059d4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800592e:	f7ff fd4d 	bl	80053cc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8005932:	4827      	ldr	r0, [pc, #156]	; (80059d0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005934:	f00c f82e 	bl	8011994 <_ZN13TestInstallerD1Ev>
 8005938:	4823      	ldr	r0, [pc, #140]	; (80059c8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800593a:	f7ff fd8b 	bl	8005454 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800593e:	4821      	ldr	r0, [pc, #132]	; (80059c4 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8005940:	f00c f828 	bl	8011994 <_ZN13TestInstallerD1Ev>
 8005944:	481d      	ldr	r0, [pc, #116]	; (80059bc <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8005946:	f7ff fdc9 	bl	80054dc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 800594a:	481b      	ldr	r0, [pc, #108]	; (80059b8 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800594c:	f00c f822 	bl	8011994 <_ZN13TestInstallerD1Ev>
 8005950:	4817      	ldr	r0, [pc, #92]	; (80059b0 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8005952:	f7ff fe07 	bl	8005564 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8005956:	4815      	ldr	r0, [pc, #84]	; (80059ac <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005958:	f00c f81c 	bl	8011994 <_ZN13TestInstallerD1Ev>
 800595c:	4811      	ldr	r0, [pc, #68]	; (80059a4 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 800595e:	f7ff fe45 	bl	80055ec <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8005962:	480f      	ldr	r0, [pc, #60]	; (80059a0 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8005964:	f00c f816 	bl	8011994 <_ZN13TestInstallerD1Ev>
 8005968:	480b      	ldr	r0, [pc, #44]	; (8005998 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 800596a:	f7ff fe83 	bl	8005674 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 800596e:	4809      	ldr	r0, [pc, #36]	; (8005994 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8005970:	f00c f810 	bl	8011994 <_ZN13TestInstallerD1Ev>
 8005974:	4803      	ldr	r0, [pc, #12]	; (8005984 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8005976:	f7ff fec1 	bl	80056fc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000490 	.word	0x20000490
 8005988:	08020488 	.word	0x08020488
 800598c:	08020810 	.word	0x08020810
 8005990:	0802081c 	.word	0x0802081c
 8005994:	200004ac 	.word	0x200004ac
 8005998:	200004b0 	.word	0x200004b0
 800599c:	08020834 	.word	0x08020834
 80059a0:	200004cc 	.word	0x200004cc
 80059a4:	200004d0 	.word	0x200004d0
 80059a8:	08020844 	.word	0x08020844
 80059ac:	200004ec 	.word	0x200004ec
 80059b0:	200004f0 	.word	0x200004f0
 80059b4:	08020858 	.word	0x08020858
 80059b8:	2000050c 	.word	0x2000050c
 80059bc:	20000510 	.word	0x20000510
 80059c0:	08020868 	.word	0x08020868
 80059c4:	2000052c 	.word	0x2000052c
 80059c8:	20000530 	.word	0x20000530
 80059cc:	08020880 	.word	0x08020880
 80059d0:	2000054c 	.word	0x2000054c
 80059d4:	20000550 	.word	0x20000550
 80059d8:	08020890 	.word	0x08020890
 80059dc:	2000056c 	.word	0x2000056c
 80059e0:	20000570 	.word	0x20000570
 80059e4:	080208a0 	.word	0x080208a0
 80059e8:	2000058c 	.word	0x2000058c
 80059ec:	20000590 	.word	0x20000590
 80059f0:	080208ac 	.word	0x080208ac
 80059f4:	200005ac 	.word	0x200005ac
 80059f8:	200005b4 	.word	0x200005b4
 80059fc:	080208bc 	.word	0x080208bc
 8005a00:	080208cc 	.word	0x080208cc
 8005a04:	200005d0 	.word	0x200005d0
 8005a08:	200005d4 	.word	0x200005d4
 8005a0c:	080208e4 	.word	0x080208e4
 8005a10:	200005f0 	.word	0x200005f0
 8005a14:	200005f4 	.word	0x200005f4
 8005a18:	080208fc 	.word	0x080208fc
 8005a1c:	20000610 	.word	0x20000610

08005a20 <_GLOBAL__sub_I_rx_buffer>:
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005a28:	2001      	movs	r0, #1
 8005a2a:	f7ff feab 	bl	8005784 <_Z41__static_initialization_and_destruction_0ii>
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <_GLOBAL__sub_D_rx_buffer>:
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005a38:	2000      	movs	r0, #0
 8005a3a:	f7ff fea3 	bl	8005784 <_Z41__static_initialization_and_destruction_0ii>
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
    }
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
    }
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	695b      	ldr	r3, [r3, #20]
    }
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8005a88:	b590      	push	{r4, r7, lr}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff ffed 	bl	8005a70 <_ZNK10TestResult15getFailureCountEv>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10a      	bne.n	8005ab2 <_ZNK10TestResult9isFailureEv+0x2a>
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff ffcf 	bl	8005a40 <_ZNK10TestResult11getRunCountEv>
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff ffd7 	bl	8005a58 <_ZNK10TestResult15getIgnoredCountEv>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4423      	add	r3, r4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <_ZNK10TestResult9isFailureEv+0x2e>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <_ZNK10TestResult9isFailureEv+0x30>
 8005ab6:	2300      	movs	r3, #0
    }
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd90      	pop	{r4, r7, pc}

08005ac0 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
    {
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f007 fde6 	bl	800d69c <_ZN10TestOutputC1Ev>
 8005ad0:	4a03      	ldr	r2, [pc, #12]	; (8005ae0 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
    }
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	08024248 	.word	0x08024248

08005ae4 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
    {
 8005aec:	4a05      	ldr	r2, [pc, #20]	; (8005b04 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f007 fdef 	bl	800d6d8 <_ZN10TestOutputD1Ev>
    }
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	08024248 	.word	0x08024248

08005b08 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
    }
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff ffe7 	bl	8005ae4 <_ZN17ConsoleTestOutputD1Ev>
 8005b16:	2110      	movs	r1, #16
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 fce7 	bl	80074ec <_ZdlPvj>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8005b28:	b5b0      	push	{r4, r5, r7, lr}
 8005b2a:	b098      	sub	sp, #96	; 0x60
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
    int result = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8005b36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff ffc0 	bl	8005ac0 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8005b40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b44:	4935      	ldr	r1, [pc, #212]	; (8005c1c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8005b46:	4618      	mov	r0, r3
 8005b48:	f004 f87f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8005b4c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8005b50:	f107 0318 	add.w	r3, r7, #24
 8005b54:	2200      	movs	r2, #0
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 ff6a 	bl	8007a30 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8005b5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b60:	4618      	mov	r0, r3
 8005b62:	f004 fc2a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8005b66:	f107 0318 	add.w	r3, r7, #24
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 ff2f 	bl	80079d0 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8005b72:	f009 fb21 	bl	800f1b8 <_ZN12TestRegistry18getCurrentRegistryEv>
 8005b76:	4603      	mov	r3, r0
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	3234      	adds	r2, #52	; 0x34
 8005b7c:	6812      	ldr	r2, [r2, #0]
 8005b7e:	f107 0118 	add.w	r1, r7, #24
 8005b82:	4618      	mov	r0, r3
 8005b84:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8005b86:	f009 fb17 	bl	800f1b8 <_ZN12TestRegistry18getCurrentRegistryEv>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f107 0008 	add.w	r0, r7, #8
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	f000 f844 	bl	8005c20 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8005b98:	f107 0308 	add.w	r3, r7, #8
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 f899 	bl	8005cd4 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8005ba2:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8005ba4:	f107 0308 	add.w	r3, r7, #8
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 f863 	bl	8005c74 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8005bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10c      	bne.n	8005bce <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8005bb4:	f107 0318 	add.w	r3, r7, #24
 8005bb8:	2100      	movs	r1, #0
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f002 f83a 	bl	8007c34 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f007 fe27 	bl	800d81c <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8005bce:	f009 faf3 	bl	800f1b8 <_ZN12TestRegistry18getCurrentRegistryEv>
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	3344      	adds	r3, #68	; 0x44
 8005bd8:	681d      	ldr	r5, [r3, #0]
 8005bda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005bde:	490f      	ldr	r1, [pc, #60]	; (8005c1c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8005be0:	4618      	mov	r0, r3
 8005be2:	f004 f832 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8005be6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005bea:	4619      	mov	r1, r3
 8005bec:	4620      	mov	r0, r4
 8005bee:	47a8      	blx	r5
 8005bf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f004 fbe0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return result;
 8005bfa:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8005bfc:	f107 0318 	add.w	r3, r7, #24
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 ff4d 	bl	8007aa0 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8005c06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff ff6a 	bl	8005ae4 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8005c10:	4623      	mov	r3, r4
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3760      	adds	r7, #96	; 0x60
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bdb0      	pop	{r4, r5, r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	08020918 	.word	0x08020918

08005c20 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8005c2e:	4a0f      	ldr	r2, [pc, #60]	; (8005c6c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	605a      	str	r2, [r3, #4]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	609a      	str	r2, [r3, #8]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8005c46:	2241      	movs	r2, #65	; 0x41
 8005c48:	4909      	ldr	r1, [pc, #36]	; (8005c70 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8005c4a:	2038      	movs	r0, #56	; 0x38
 8005c4c:	f001 fc3a 	bl	80074c4 <_ZnwjPKci>
 8005c50:	4604      	mov	r4, r0
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	4620      	mov	r0, r4
 8005c58:	f00c f84a 	bl	8011cf0 <_ZN20CommandLineArgumentsC1EiPKPKc>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	609c      	str	r4, [r3, #8]
}
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd90      	pop	{r4, r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	08023bd4 	.word	0x08023bd4
 8005c70:	0802092c 	.word	0x0802092c

08005c74 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	4a0c      	ldr	r2, [pc, #48]	; (8005cb0 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	3204      	adds	r2, #4
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	4790      	blx	r2
    delete output_;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d004      	beq.n	8005ca6 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	3204      	adds	r2, #4
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	4790      	blx	r2
}
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	08023bd4 	.word	0x08023bd4

08005cb4 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
}
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff ffd9 	bl	8005c74 <_ZN21CommandLineTestRunnerD1Ev>
 8005cc2:	2110      	movs	r1, #16
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 fc11 	bl	80074ec <_ZdlPvj>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8005cd4:	b5b0      	push	{r4, r5, r7, lr}
 8005cd6:	b08c      	sub	sp, #48	; 0x30
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8005ce0:	f107 031c 	add.w	r3, r7, #28
 8005ce4:	4929      	ldr	r1, [pc, #164]	; (8005d8c <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f003 ffaf 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8005cec:	f107 021c 	add.w	r2, r7, #28
 8005cf0:	f107 0308 	add.w	r3, r7, #8
 8005cf4:	4611      	mov	r1, r2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f008 fe1c 	bl	800e934 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8005cfc:	f107 031c 	add.w	r3, r7, #28
 8005d00:	4618      	mov	r0, r3
 8005d02:	f004 fb5a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3334      	adds	r3, #52	; 0x34
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f107 0108 	add.w	r1, r7, #8
 8005d18:	4610      	mov	r0, r2
 8005d1a:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68da      	ldr	r2, [r3, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	333c      	adds	r3, #60	; 0x3c
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	4798      	blx	r3
 8005d2e:	4603      	mov	r3, r0
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fa3e 	bl	80061b4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f8ac 	bl	8005e9c <_ZN21CommandLineTestRunner11runAllTestsEv>
 8005d44:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68dd      	ldr	r5, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3344      	adds	r3, #68	; 0x44
 8005d52:	681c      	ldr	r4, [r3, #0]
 8005d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d58:	490c      	ldr	r1, [pc, #48]	; (8005d8c <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f003 ff75 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8005d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d64:	4619      	mov	r1, r3
 8005d66:	4628      	mov	r0, r5
 8005d68:	47a0      	blx	r4
 8005d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f004 fb23 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return testResult;
 8005d74:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8005d76:	f107 0308 	add.w	r3, r7, #8
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 faaa 	bl	80062d4 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 8005d80:	4623      	mov	r3, r4
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3730      	adds	r7, #48	; 0x30
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bdb0      	pop	{r4, r5, r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	08020950 	.word	0x08020950

08005d90 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 8005d90:	b5b0      	push	{r4, r5, r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68dd      	ldr	r5, [r3, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3330      	adds	r3, #48	; 0x30
 8005da4:	681c      	ldr	r4, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f00c fce0 	bl	8012770 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8005db0:	4603      	mov	r3, r0
 8005db2:	4619      	mov	r1, r3
 8005db4:	4628      	mov	r0, r5
 8005db6:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68dd      	ldr	r5, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	332c      	adds	r3, #44	; 0x2c
 8005dc4:	681c      	ldr	r4, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f00c fcdc 	bl	8012788 <_ZNK20CommandLineArguments14getNameFiltersEv>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f00c fc2b 	bl	8012638 <_ZNK20CommandLineArguments9isVerboseEv>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d009      	beq.n	8005dfc <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3320      	adds	r3, #32
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2101      	movs	r1, #1
 8005df8:	4610      	mov	r0, r2
 8005dfa:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f00c fc25 	bl	8012650 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d009      	beq.n	8005e20 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3320      	adds	r3, #32
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2102      	movs	r1, #2
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f00c fc1f 	bl	8012668 <_ZNK20CommandLineArguments7isColorEv>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d008      	beq.n	8005e42 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3324      	adds	r3, #36	; 0x24
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4610      	mov	r0, r2
 8005e40:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f00c fc4a 	bl	80126e0 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d008      	beq.n	8005e64 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3360      	adds	r3, #96	; 0x60
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4610      	mov	r0, r2
 8005e62:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f00c fc2d 	bl	80126c8 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d004      	beq.n	8005e7e <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f009 fa19 	bl	800f2b0 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f00c fc50 	bl	8012728 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 8005e8e:	f00b fadb 	bl	8011448 <_ZN10UtestShell14setCrashOnFailEv>
}
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005e9c <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 8005e9c:	b5b0      	push	{r4, r5, r7, lr}
 8005e9e:	b094      	sub	sp, #80	; 0x50
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff ff73 	bl	8005d90 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f00c fc1c 	bl	80126f8 <_ZNK20CommandLineArguments14getRepeatCountEv>
 8005ec0:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f00c fbda 	bl	8012680 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d019      	beq.n	8005f06 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	f107 0308 	add.w	r3, r7, #8
 8005eda:	4611      	mov	r1, r2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f009 fbaf 	bl	800f640 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3320      	adds	r3, #32
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f107 0108 	add.w	r1, r7, #8
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	4798      	blx	r3
        return 0;
 8005ef8:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8005efa:	f107 0308 	add.w	r3, r7, #8
 8005efe:	4618      	mov	r0, r3
 8005f00:	f009 fbd6 	bl	800f6b0 <_ZN10TestResultD1Ev>
 8005f04:	e0e1      	b.n	80060ca <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f00c fbc4 	bl	8012698 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d019      	beq.n	8005f4a <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	f107 0308 	add.w	r3, r7, #8
 8005f1e:	4611      	mov	r1, r2
 8005f20:	4618      	mov	r0, r3
 8005f22:	f009 fb8d 	bl	800f640 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3324      	adds	r3, #36	; 0x24
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f107 0108 	add.w	r1, r7, #8
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4798      	blx	r3
        return 0;
 8005f3c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8005f3e:	f107 0308 	add.w	r3, r7, #8
 8005f42:	4618      	mov	r0, r3
 8005f44:	f009 fbb4 	bl	800f6b0 <_ZN10TestResultD1Ev>
 8005f48:	e0bf      	b.n	80060ca <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f00c fbae 	bl	80126b0 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d019      	beq.n	8005f8e <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	f107 0308 	add.w	r3, r7, #8
 8005f62:	4611      	mov	r1, r2
 8005f64:	4618      	mov	r0, r3
 8005f66:	f009 fb6b 	bl	800f640 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3328      	adds	r3, #40	; 0x28
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f107 0108 	add.w	r1, r7, #8
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	4798      	blx	r3
        return 0;
 8005f80:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8005f82:	f107 0308 	add.w	r3, r7, #8
 8005f86:	4618      	mov	r0, r3
 8005f88:	f009 fb92 	bl	800f6b0 <_ZN10TestResultD1Ev>
 8005f8c:	e09d      	b.n	80060ca <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f00c fbbc 	bl	8012710 <_ZNK20CommandLineArguments11isReversingEv>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d008      	beq.n	8005fb0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	331c      	adds	r3, #28
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4610      	mov	r0, r2
 8005fae:	4798      	blx	r3

    if (arguments_->isShuffling())
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f00c fbc3 	bl	8012740 <_ZNK20CommandLineArguments11isShufflingEv>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d023      	beq.n	8006008 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	332c      	adds	r3, #44	; 0x2c
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4941      	ldr	r1, [pc, #260]	; (80060d4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685d      	ldr	r5, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3334      	adds	r3, #52	; 0x34
 8005fe0:	681c      	ldr	r4, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f00c fbb6 	bl	8012758 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8005fec:	4603      	mov	r3, r0
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	47a0      	blx	r4
        output_->print("\n");
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	332c      	adds	r3, #44	; 0x2c
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4935      	ldr	r1, [pc, #212]	; (80060d8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8006004:	4610      	mov	r0, r2
 8006006:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8006008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800600e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006010:	429a      	cmp	r2, r3
 8006012:	bf8c      	ite	hi
 8006014:	2301      	movhi	r3, #1
 8006016:	2300      	movls	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d04e      	beq.n	80060bc <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	4618      	mov	r0, r3
 8006024:	f00c fb8c 	bl	8012740 <_ZNK20CommandLineArguments11isShufflingEv>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00f      	beq.n	800604e <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68dd      	ldr	r5, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3318      	adds	r3, #24
 800603a:	681c      	ldr	r4, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	4618      	mov	r0, r3
 8006042:	f00c fb89 	bl	8012758 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8006046:	4603      	mov	r3, r0
 8006048:	4619      	mov	r1, r3
 800604a:	4628      	mov	r0, r5
 800604c:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6858      	ldr	r0, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3340      	adds	r3, #64	; 0x40
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800605e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006060:	4798      	blx	r3
        TestResult tr(*output_);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	f107 0308 	add.w	r3, r7, #8
 800606a:	4611      	mov	r1, r2
 800606c:	4618      	mov	r0, r3
 800606e:	f009 fae7 	bl	800f640 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3314      	adds	r3, #20
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f107 0108 	add.w	r1, r7, #8
 8006084:	4610      	mov	r0, r2
 8006086:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 8006088:	f107 0308 	add.w	r3, r7, #8
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fcef 	bl	8005a70 <_ZNK10TestResult15getFailureCountEv>
 8006092:	4602      	mov	r2, r0
 8006094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006096:	4413      	add	r3, r2
 8006098:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 800609a:	f107 0308 	add.w	r3, r7, #8
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff fcf2 	bl	8005a88 <_ZNK10TestResult9isFailureEv>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 80060aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ac:	3301      	adds	r3, #1
 80060ae:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 80060b0:	f107 0308 	add.w	r3, r7, #8
 80060b4:	4618      	mov	r0, r3
 80060b6:	f009 fafb 	bl	800f6b0 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 80060ba:	e7a5      	b.n	8006008 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 80060bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 80060c2:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80060c4:	e000      	b.n	80060c8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 80060c6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80060c8:	bf00      	nop
 80060ca:	4623      	mov	r3, r4
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3750      	adds	r7, #80	; 0x50
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bdb0      	pop	{r4, r5, r7, pc}
 80060d4:	08020964 	.word	0x08020964
 80060d8:	08020990 	.word	0x08020990

080060dc <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 80060dc:	b590      	push	{r4, r7, lr}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 80060e4:	229d      	movs	r2, #157	; 0x9d
 80060e6:	4906      	ldr	r1, [pc, #24]	; (8006100 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 80060e8:	201c      	movs	r0, #28
 80060ea:	f001 f9eb 	bl	80074c4 <_ZnwjPKci>
 80060ee:	4604      	mov	r4, r0
 80060f0:	4620      	mov	r0, r4
 80060f2:	f005 f955 	bl	800b3a0 <_ZN18TeamCityTestOutputC1Ev>
 80060f6:	4623      	mov	r3, r4
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd90      	pop	{r4, r7, pc}
 8006100:	0802092c 	.word	0x0802092c

08006104 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8006104:	b590      	push	{r4, r7, lr}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 800610e:	22a2      	movs	r2, #162	; 0xa2
 8006110:	490a      	ldr	r1, [pc, #40]	; (800613c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8006112:	2014      	movs	r0, #20
 8006114:	f001 f9d6 	bl	80074c4 <_ZnwjPKci>
 8006118:	4604      	mov	r4, r0
 800611a:	4620      	mov	r0, r4
 800611c:	f000 f980 	bl	8006420 <_ZN15JUnitTestOutputC1Ev>
 8006120:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fbb2 	bl	8006894 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8006130:	68fb      	ldr	r3, [r7, #12]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	bd90      	pop	{r4, r7, pc}
 800613a:	bf00      	nop
 800613c:	0802092c 	.word	0x0802092c

08006140 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8006140:	b590      	push	{r4, r7, lr}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8006148:	22ab      	movs	r2, #171	; 0xab
 800614a:	4906      	ldr	r1, [pc, #24]	; (8006164 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 800614c:	2010      	movs	r0, #16
 800614e:	f001 f9b9 	bl	80074c4 <_ZnwjPKci>
 8006152:	4604      	mov	r4, r0
 8006154:	4620      	mov	r0, r4
 8006156:	f7ff fcb3 	bl	8005ac0 <_ZN17ConsoleTestOutputC1Ev>
 800615a:	4623      	mov	r3, r4
}
 800615c:	4618      	mov	r0, r3
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	bd90      	pop	{r4, r7, pc}
 8006164:	0802092c 	.word	0x0802092c

08006168 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8006168:	b590      	push	{r4, r7, lr}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8006174:	22b0      	movs	r2, #176	; 0xb0
 8006176:	490e      	ldr	r1, [pc, #56]	; (80061b0 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8006178:	2018      	movs	r0, #24
 800617a:	f001 f9a3 	bl	80074c4 <_ZnwjPKci>
 800617e:	4604      	mov	r4, r0
 8006180:	4620      	mov	r0, r4
 8006182:	f007 ff83 	bl	800e08c <_ZN19CompositeTestOutputC1Ev>
 8006186:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	335c      	adds	r3, #92	; 0x5c
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	6978      	ldr	r0, [r7, #20]
 8006194:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3360      	adds	r3, #96	; 0x60
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	6978      	ldr	r0, [r7, #20]
 80061a2:	4798      	blx	r3
  return composite;
 80061a4:	697b      	ldr	r3, [r7, #20]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd90      	pop	{r4, r7, pc}
 80061ae:	bf00      	nop
 80061b0:	0802092c 	.word	0x0802092c

080061b4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 80061b4:	b5b0      	push	{r4, r5, r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	6839      	ldr	r1, [r7, #0]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f00b fe4f 	bl	8011e68 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f083 0301 	eor.w	r3, r3, #1
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d029      	beq.n	800622a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3310      	adds	r3, #16
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
 80061e2:	4602      	mov	r2, r0
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685d      	ldr	r5, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	332c      	adds	r3, #44	; 0x2c
 80061f4:	681c      	ldr	r4, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f00c fa10 	bl	8012620 <_ZNK20CommandLineArguments8needHelpEv>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d006      	beq.n	8006214 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	4618      	mov	r0, r3
 800620c:	f00c f9fa 	bl	8012604 <_ZNK20CommandLineArguments4helpEv>
 8006210:	4603      	mov	r3, r0
 8006212:	e005      	b.n	8006220 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	4618      	mov	r0, r3
 800621a:	f00c f9e5 	bl	80125e8 <_ZNK20CommandLineArguments5usageEv>
 800621e:	4603      	mov	r3, r0
 8006220:	4619      	mov	r1, r3
 8006222:	4628      	mov	r0, r5
 8006224:	47a0      	blx	r4
    return false;
 8006226:	2300      	movs	r3, #0
 8006228:	e050      	b.n	80062cc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	4618      	mov	r0, r3
 8006230:	f00d f84c 	bl	80132cc <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d02c      	beq.n	8006294 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	330c      	adds	r3, #12
 8006240:	681c      	ldr	r4, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	4618      	mov	r0, r3
 8006248:	f00d f864 	bl	8013314 <_ZNK20CommandLineArguments14getPackageNameEv>
 800624c:	4603      	mov	r3, r0
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	47a0      	blx	r4
 8006254:	4602      	mov	r2, r0
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	4618      	mov	r0, r3
 8006260:	f00c f9ea 	bl	8012638 <_ZNK20CommandLineArguments9isVerboseEv>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d02f      	beq.n	80062ca <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3314      	adds	r3, #20
 8006270:	681c      	ldr	r4, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685d      	ldr	r5, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3310      	adds	r3, #16
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	4798      	blx	r3
 8006282:	4603      	mov	r3, r0
 8006284:	461a      	mov	r2, r3
 8006286:	4629      	mov	r1, r5
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	47a0      	blx	r4
 800628c:	4602      	mov	r2, r0
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	605a      	str	r2, [r3, #4]
 8006292:	e01a      	b.n	80062ca <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	4618      	mov	r0, r3
 800629a:	f00d f829 	bl	80132f0 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d009      	beq.n	80062b8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3308      	adds	r3, #8
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	4798      	blx	r3
 80062b0:	4602      	mov	r2, r0
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	605a      	str	r2, [r3, #4]
 80062b6:	e008      	b.n	80062ca <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3310      	adds	r3, #16
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	4798      	blx	r3
 80062c4:	4602      	mov	r2, r0
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	605a      	str	r2, [r3, #4]
  return true;
 80062ca:	2301      	movs	r3, #1
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bdb0      	pop	{r4, r5, r7, pc}

080062d4 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	4a05      	ldr	r2, [pc, #20]	; (80062f4 <_ZN16SetPointerPluginD1Ev+0x20>)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f008 f9e7 	bl	800e6b8 <_ZN10TestPluginD1Ev>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4618      	mov	r0, r3
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	08024354 	.word	0x08024354

080062f8 <_ZN16SetPointerPluginD0Ev>:
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ffe7 	bl	80062d4 <_ZN16SetPointerPluginD1Ev>
 8006306:	2114      	movs	r1, #20
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 f8ef 	bl	80074ec <_ZdlPvj>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
    }
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4910      	ldr	r1, [pc, #64]	; (800637c <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800633c:	4618      	mov	r0, r3
 800633e:	f003 fc84 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	609a      	str	r2, [r3, #8]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	60da      	str	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	741a      	strb	r2, [r3, #16]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3314      	adds	r3, #20
 8006358:	4908      	ldr	r1, [pc, #32]	; (800637c <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800635a:	4618      	mov	r0, r3
 800635c:	f003 fc75 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	61da      	str	r2, [r3, #28]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	621a      	str	r2, [r3, #32]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	08020994 	.word	0x08020994

08006380 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	605a      	str	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	609a      	str	r2, [r3, #8]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	60da      	str	r2, [r3, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	611a      	str	r2, [r3, #16]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3314      	adds	r3, #20
 80063aa:	4907      	ldr	r1, [pc, #28]	; (80063c8 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 80063ac:	4618      	mov	r0, r3
 80063ae:	f003 fc4c 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	61da      	str	r2, [r3, #28]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	621a      	str	r2, [r3, #32]
    {
    }
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4618      	mov	r0, r3
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	08020994 	.word	0x08020994

080063cc <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3314      	adds	r3, #20
 80063d8:	4618      	mov	r0, r3
 80063da:	f003 ffee 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff ffc4 	bl	8006380 <_ZN20JUnitTestGroupResultC1Ev>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3328      	adds	r3, #40	; 0x28
 80063fc:	4907      	ldr	r1, [pc, #28]	; (800641c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 80063fe:	4618      	mov	r0, r3
 8006400:	f003 fc23 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3330      	adds	r3, #48	; 0x30
 8006408:	4904      	ldr	r1, [pc, #16]	; (800641c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800640a:	4618      	mov	r0, r3
 800640c:	f003 fc1d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	08020994 	.word	0x08020994

08006420 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8006420:	b590      	push	{r4, r7, lr}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4618      	mov	r0, r3
 800642c:	f007 f936 	bl	800d69c <_ZN10TestOutputC1Ev>
 8006430:	4a09      	ldr	r2, [pc, #36]	; (8006458 <_ZN15JUnitTestOutputC1Ev+0x38>)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	224d      	movs	r2, #77	; 0x4d
 8006438:	4908      	ldr	r1, [pc, #32]	; (800645c <_ZN15JUnitTestOutputC1Ev+0x3c>)
 800643a:	2038      	movs	r0, #56	; 0x38
 800643c:	f001 f842 	bl	80074c4 <_ZnwjPKci>
 8006440:	4604      	mov	r4, r0
 8006442:	4620      	mov	r0, r4
 8006444:	f7ff ffd0 	bl	80063e8 <_ZN19JUnitTestOutputImplC1Ev>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	611c      	str	r4, [r3, #16]
{
}
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4618      	mov	r0, r3
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	bd90      	pop	{r4, r7, pc}
 8006456:	bf00      	nop
 8006458:	08023bf4 	.word	0x08023bf4
 800645c:	08020998 	.word	0x08020998

08006460 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3330      	adds	r3, #48	; 0x30
 800646c:	4618      	mov	r0, r3
 800646e:	f003 ffa4 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3328      	adds	r3, #40	; 0x28
 8006476:	4618      	mov	r0, r3
 8006478:	f003 ff9f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff ffa4 	bl	80063cc <_ZN20JUnitTestGroupResultD1Ev>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8006490:	b590      	push	{r4, r7, lr}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	4a0c      	ldr	r2, [pc, #48]	; (80064cc <_ZN15JUnitTestOutputD1Ev+0x3c>)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f838 	bl	8006514 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691c      	ldr	r4, [r3, #16]
 80064a8:	2c00      	cmp	r4, #0
 80064aa:	d006      	beq.n	80064ba <_ZN15JUnitTestOutputD1Ev+0x2a>
 80064ac:	4620      	mov	r0, r4
 80064ae:	f7ff ffd7 	bl	8006460 <_ZN19JUnitTestOutputImplD1Ev>
 80064b2:	2138      	movs	r1, #56	; 0x38
 80064b4:	4620      	mov	r0, r4
 80064b6:	f001 f819 	bl	80074ec <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4618      	mov	r0, r3
 80064be:	f007 f90b 	bl	800d6d8 <_ZN10TestOutputD1Ev>
}
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd90      	pop	{r4, r7, pc}
 80064cc:	08023bf4 	.word	0x08023bf4

080064d0 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
}
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff ffd9 	bl	8006490 <_ZN15JUnitTestOutputD1Ev>
 80064de:	2114      	movs	r1, #20
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 f803 	bl	80074ec <_ZdlPvj>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3314      	adds	r3, #20
 80064fc:	4618      	mov	r0, r3
 80064fe:	f003 ff5c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4618      	mov	r0, r3
 8006506:	f003 ff58 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4618      	mov	r0, r3
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8006514:	b590      	push	{r4, r7, lr}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	2200      	movs	r2, #0
 800652a:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f103 0414 	add.w	r4, r3, #20
 8006534:	f107 0308 	add.w	r3, r7, #8
 8006538:	491d      	ldr	r1, [pc, #116]	; (80065b0 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 800653a:	4618      	mov	r0, r3
 800653c:	f003 fb85 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8006540:	f107 0308 	add.w	r3, r7, #8
 8006544:	4619      	mov	r1, r3
 8006546:	4620      	mov	r0, r4
 8006548:	f003 fbeb 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800654c:	f107 0308 	add.w	r3, r7, #8
 8006550:	4618      	mov	r0, r3
 8006552:	f003 ff32 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	617b      	str	r3, [r7, #20]
    while (cur) {
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d018      	beq.n	8006596 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d004      	beq.n	800657c <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	3204      	adds	r2, #4
 8006576:	6812      	ldr	r2, [r2, #0]
 8006578:	4618      	mov	r0, r3
 800657a:	4790      	blx	r2
        delete cur;
 800657c:	697c      	ldr	r4, [r7, #20]
 800657e:	2c00      	cmp	r4, #0
 8006580:	d006      	beq.n	8006590 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8006582:	4620      	mov	r0, r4
 8006584:	f7ff ffb4 	bl	80064f0 <_ZN23JUnitTestCaseResultNodeD1Ev>
 8006588:	2128      	movs	r1, #40	; 0x28
 800658a:	4620      	mov	r0, r4
 800658c:	f000 ffae 	bl	80074ec <_ZdlPvj>
        cur = tmp;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	617b      	str	r3, [r7, #20]
    while (cur) {
 8006594:	e7e3      	b.n	800655e <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2200      	movs	r2, #0
 800659c:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	2200      	movs	r2, #0
 80065a4:	621a      	str	r2, [r3, #32]
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd90      	pop	{r4, r7, pc}
 80065ae:	bf00      	nop
 80065b0:	08020994 	.word	0x08020994

080065b4 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 80065de:	b590      	push	{r4, r7, lr}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	6a1c      	ldr	r4, [r3, #32]
 80065ee:	6838      	ldr	r0, [r7, #0]
 80065f0:	f009 f9c6 	bl	800f980 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 80065f4:	4603      	mov	r3, r0
 80065f6:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	6a1c      	ldr	r4, [r3, #32]
 80065fe:	6838      	ldr	r0, [r7, #0]
 8006600:	f7ff fe8a 	bl	8006318 <_ZNK10TestResult13getCheckCountEv>
 8006604:	4603      	mov	r3, r0
 8006606:	6223      	str	r3, [r4, #32]
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	bd90      	pop	{r4, r7, pc}

08006610 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8006626:	b590      	push	{r4, r7, lr}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691c      	ldr	r4, [r3, #16]
 8006634:	6838      	ldr	r0, [r7, #0]
 8006636:	f009 f9af 	bl	800f998 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 800663a:	4603      	mov	r3, r0
 800663c:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3364      	adds	r3, #100	; 0x64
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	4798      	blx	r3
    resetTestGroupResult();
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff ff62 	bl	8006514 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	bd90      	pop	{r4, r7, pc}

08006658 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8006658:	b590      	push	{r4, r7, lr}
 800665a:	b089      	sub	sp, #36	; 0x24
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	3201      	adds	r2, #1
 800666a:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f103 0414 	add.w	r4, r3, #20
 8006674:	f107 0308 	add.w	r3, r7, #8
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f009 fcef 	bl	801005e <_ZNK10UtestShell8getGroupEv>
 8006680:	f107 0308 	add.w	r3, r7, #8
 8006684:	4619      	mov	r1, r3
 8006686:	4620      	mov	r0, r4
 8006688:	f003 fb4b 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800668c:	f107 0308 	add.w	r3, r7, #8
 8006690:	4618      	mov	r0, r3
 8006692:	f003 fe92 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8006696:	4b3c      	ldr	r3, [pc, #240]	; (8006788 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4798      	blx	r3
 800669c:	4602      	mov	r2, r0
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d110      	bne.n	80066d0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 80066ae:	2288      	movs	r2, #136	; 0x88
 80066b0:	4936      	ldr	r1, [pc, #216]	; (800678c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 80066b2:	2028      	movs	r0, #40	; 0x28
 80066b4:	f000 ff06 	bl	80074c4 <_ZnwjPKci>
 80066b8:	4604      	mov	r4, r0
 80066ba:	4620      	mov	r0, r4
 80066bc:	f7ff fe38 	bl	8006330 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 80066c4:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	6912      	ldr	r2, [r2, #16]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	61d3      	str	r3, [r2, #28]
 80066ce:	e013      	b.n	80066f8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 80066d0:	228b      	movs	r2, #139	; 0x8b
 80066d2:	492e      	ldr	r1, [pc, #184]	; (800678c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 80066d4:	2028      	movs	r0, #40	; 0x28
 80066d6:	f000 fef5 	bl	80074c4 <_ZnwjPKci>
 80066da:	4604      	mov	r4, r0
 80066dc:	4620      	mov	r0, r4
 80066de:	f7ff fe27 	bl	8006330 <_ZN23JUnitTestCaseResultNodeC1Ev>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	6a1a      	ldr	r2, [r3, #32]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066f6:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	461c      	mov	r4, r3
 8006700:	f107 0310 	add.w	r3, r7, #16
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f009 fc9a 	bl	8010040 <_ZNK10UtestShell7getNameEv>
 800670c:	f107 0310 	add.w	r3, r7, #16
 8006710:	4619      	mov	r1, r3
 8006712:	4620      	mov	r0, r4
 8006714:	f003 fb05 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 8006718:	f107 0310 	add.w	r3, r7, #16
 800671c:	4618      	mov	r0, r3
 800671e:	f003 fe4c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	f103 0414 	add.w	r4, r3, #20
 800672c:	f107 0318 	add.w	r3, r7, #24
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f009 fd55 	bl	80101e2 <_ZNK10UtestShell7getFileEv>
 8006738:	f107 0318 	add.w	r3, r7, #24
 800673c:	4619      	mov	r1, r3
 800673e:	4620      	mov	r0, r4
 8006740:	f003 faef 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 8006744:	f107 0318 	add.w	r3, r7, #24
 8006748:	4618      	mov	r0, r3
 800674a:	f003 fe36 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	6a1c      	ldr	r4, [r3, #32]
 8006754:	6838      	ldr	r0, [r7, #0]
 8006756:	f009 fd53 	bl	8010200 <_ZNK10UtestShell13getLineNumberEv>
 800675a:	4603      	mov	r3, r0
 800675c:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3318      	adds	r3, #24
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6838      	ldr	r0, [r7, #0]
 8006768:	4798      	blx	r3
 800676a:	4603      	mov	r3, r0
 800676c:	f083 0301 	eor.w	r3, r3, #1
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d004      	beq.n	8006780 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	2201      	movs	r2, #1
 800677e:	741a      	strb	r2, [r3, #16]
    }
}
 8006780:	bf00      	nop
 8006782:	3724      	adds	r7, #36	; 0x24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd90      	pop	{r4, r7, pc}
 8006788:	200000a4 	.word	0x200000a4
 800678c:	08020998 	.word	0x08020998

08006790 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	; 0x28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 800679c:	f107 0310 	add.w	r3, r7, #16
 80067a0:	4928      	ldr	r1, [pc, #160]	; (8006844 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 80067a2:	4618      	mov	r0, r3
 80067a4:	f003 fa51 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	3328      	adds	r3, #40	; 0x28
 80067ae:	4618      	mov	r0, r3
 80067b0:	f003 fdf2 	bl	800a398 <_ZNK12SimpleString7isEmptyEv>
 80067b4:	4603      	mov	r3, r0
 80067b6:	f083 0301 	eor.w	r3, r3, #1
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00f      	beq.n	80067e0 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80067c8:	f107 0310 	add.w	r3, r7, #16
 80067cc:	4611      	mov	r1, r2
 80067ce:	4618      	mov	r0, r3
 80067d0:	f003 fe70 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 80067d4:	f107 0310 	add.w	r3, r7, #16
 80067d8:	491b      	ldr	r1, [pc, #108]	; (8006848 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 80067da:	4618      	mov	r0, r3
 80067dc:	f003 fe7c 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 80067e0:	f107 0310 	add.w	r3, r7, #16
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f003 fe64 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3384      	adds	r3, #132	; 0x84
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f107 0018 	add.w	r0, r7, #24
 80067f8:	f107 0210 	add.w	r2, r7, #16
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	4798      	blx	r3
 8006800:	f107 0320 	add.w	r3, r7, #32
 8006804:	4911      	ldr	r1, [pc, #68]	; (800684c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 8006806:	4618      	mov	r0, r3
 8006808:	f003 fa1f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f107 0220 	add.w	r2, r7, #32
 8006812:	f107 0118 	add.w	r1, r7, #24
 8006816:	4618      	mov	r0, r3
 8006818:	f003 fe31 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800681c:	f107 0320 	add.w	r3, r7, #32
 8006820:	4618      	mov	r0, r3
 8006822:	f003 fdca 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8006826:	f107 0318 	add.w	r3, r7, #24
 800682a:	4618      	mov	r0, r3
 800682c:	f003 fdc5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8006830:	f107 0310 	add.w	r3, r7, #16
 8006834:	4618      	mov	r0, r3
 8006836:	f003 fdc0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 800683a:	bf00      	nop
}
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	3728      	adds	r7, #40	; 0x28
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	080209b4 	.word	0x080209b4
 8006848:	080209c0 	.word	0x080209c0
 800684c:	080209c4 	.word	0x080209c4

08006850 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f003 fa47 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8006864:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00a      	beq.n	8006886 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	225f      	movs	r2, #95	; 0x5f
 8006876:	4619      	mov	r1, r3
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f003 fbcc 	bl	800a016 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	3301      	adds	r3, #1
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	e7f0      	b.n	8006868 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 8006886:	bf00      	nop
}
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	080209cc 	.word	0x080209cc

08006894 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d006      	beq.n	80068b4 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	3328      	adds	r3, #40	; 0x28
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f003 fa37 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
    }
}
 80068b4:	bf00      	nop
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 80068bc:	b590      	push	{r4, r7, lr}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3368      	adds	r3, #104	; 0x68
 80068ca:	681c      	ldr	r4, [r3, #0]
 80068cc:	f107 0308 	add.w	r3, r7, #8
 80068d0:	4908      	ldr	r1, [pc, #32]	; (80068f4 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 80068d2:	4618      	mov	r0, r3
 80068d4:	f003 f9b9 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80068d8:	f107 0308 	add.w	r3, r7, #8
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	47a0      	blx	r4
 80068e2:	f107 0308 	add.w	r3, r7, #8
 80068e6:	4618      	mov	r0, r3
 80068e8:	f003 fd67 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 80068ec:	bf00      	nop
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd90      	pop	{r4, r7, pc}
 80068f4:	080209d8 	.word	0x080209d8

080068f8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 80068f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068fc:	b08a      	sub	sp, #40	; 0x28
 80068fe:	af04      	add	r7, sp, #16
 8006900:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8006908:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 800690e:	3314      	adds	r3, #20
 8006910:	4618      	mov	r0, r3
 8006912:	f003 fd25 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8006916:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 800691e:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	4a23      	ldr	r2, [pc, #140]	; (80069b4 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8006928:	fba2 2303 	umull	r2, r3, r2, r3
 800692c:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 800692e:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	691a      	ldr	r2, [r3, #16]
 8006936:	4b1f      	ldr	r3, [pc, #124]	; (80069b4 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8006938:	fba3 1302 	umull	r1, r3, r3, r2
 800693c:	099b      	lsrs	r3, r3, #6
 800693e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006942:	fb01 f303 	mul.w	r3, r1, r3
 8006946:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8006948:	603b      	str	r3, [r7, #0]
 800694a:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4798      	blx	r3
 8006950:	4603      	mov	r3, r0
 8006952:	f107 0008 	add.w	r0, r7, #8
 8006956:	9303      	str	r3, [sp, #12]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	9302      	str	r3, [sp, #8]
 800695c:	9601      	str	r6, [sp, #4]
 800695e:	9500      	str	r5, [sp, #0]
 8006960:	4623      	mov	r3, r4
 8006962:	4642      	mov	r2, r8
 8006964:	4915      	ldr	r1, [pc, #84]	; (80069bc <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8006966:	f004 fa2f 	bl	800adc8 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3368      	adds	r3, #104	; 0x68
 8006970:	681c      	ldr	r4, [r3, #0]
 8006972:	f107 0308 	add.w	r3, r7, #8
 8006976:	4618      	mov	r0, r3
 8006978:	f003 fcf2 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800697c:	4602      	mov	r2, r0
 800697e:	f107 0310 	add.w	r3, r7, #16
 8006982:	4611      	mov	r1, r2
 8006984:	4618      	mov	r0, r3
 8006986:	f003 f960 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800698a:	f107 0310 	add.w	r3, r7, #16
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	47a0      	blx	r4
 8006994:	f107 0310 	add.w	r3, r7, #16
 8006998:	4618      	mov	r0, r3
 800699a:	f003 fd0e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 800699e:	f107 0308 	add.w	r3, r7, #8
 80069a2:	4618      	mov	r0, r3
 80069a4:	f003 fd09 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 80069a8:	bf00      	nop
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b2:	bf00      	nop
 80069b4:	10624dd3 	.word	0x10624dd3
 80069b8:	200000a8 	.word	0x200000a8
 80069bc:	08020a04 	.word	0x08020a04

080069c0 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 80069c0:	b590      	push	{r4, r7, lr}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3368      	adds	r3, #104	; 0x68
 80069ce:	681c      	ldr	r4, [r3, #0]
 80069d0:	f107 0308 	add.w	r3, r7, #8
 80069d4:	4912      	ldr	r1, [pc, #72]	; (8006a20 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 80069d6:	4618      	mov	r0, r3
 80069d8:	f003 f937 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80069dc:	f107 0308 	add.w	r3, r7, #8
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	47a0      	blx	r4
 80069e6:	f107 0308 	add.w	r3, r7, #8
 80069ea:	4618      	mov	r0, r3
 80069ec:	f003 fce5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3368      	adds	r3, #104	; 0x68
 80069f6:	681c      	ldr	r4, [r3, #0]
 80069f8:	f107 0310 	add.w	r3, r7, #16
 80069fc:	4909      	ldr	r1, [pc, #36]	; (8006a24 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 80069fe:	4618      	mov	r0, r3
 8006a00:	f003 f923 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8006a04:	f107 0310 	add.w	r3, r7, #16
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	47a0      	blx	r4
 8006a0e:	f107 0310 	add.w	r3, r7, #16
 8006a12:	4618      	mov	r0, r3
 8006a14:	f003 fcd1 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8006a18:	bf00      	nop
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd90      	pop	{r4, r7, pc}
 8006a20:	08020a74 	.word	0x08020a74
 8006a24:	08020a84 	.word	0x08020a84

08006a28 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f003 fc93 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f003 f903 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8006a44:	4a0e      	ldr	r2, [pc, #56]	; (8006a80 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8006a46:	490f      	ldr	r1, [pc, #60]	; (8006a84 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f003 fb13 	bl	800a074 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 8006a4e:	4a0e      	ldr	r2, [pc, #56]	; (8006a88 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8006a50:	490e      	ldr	r1, [pc, #56]	; (8006a8c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f003 fb0e 	bl	800a074 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8006a58:	4a0d      	ldr	r2, [pc, #52]	; (8006a90 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 8006a5a:	490e      	ldr	r1, [pc, #56]	; (8006a94 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f003 fb09 	bl	800a074 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 8006a62:	4a0d      	ldr	r2, [pc, #52]	; (8006a98 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8006a64:	490d      	ldr	r1, [pc, #52]	; (8006a9c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f003 fb04 	bl	800a074 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8006a6c:	4a0c      	ldr	r2, [pc, #48]	; (8006aa0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 8006a6e:	490d      	ldr	r1, [pc, #52]	; (8006aa4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f003 faff 	bl	800a074 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8006a76:	bf00      	nop
}
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	08020a94 	.word	0x08020a94
 8006a84:	08020a9c 	.word	0x08020a9c
 8006a88:	08020aa0 	.word	0x08020aa0
 8006a8c:	08020aa8 	.word	0x08020aa8
 8006a90:	08020aac 	.word	0x08020aac
 8006a94:	08020ab4 	.word	0x08020ab4
 8006a98:	08020ab8 	.word	0x08020ab8
 8006a9c:	08020ac0 	.word	0x08020ac0
 8006aa0:	08020ac4 	.word	0x08020ac4
 8006aa4:	08020ad0 	.word	0x08020ad0

08006aa8 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8006aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aac:	b096      	sub	sp, #88	; 0x58
 8006aae:	af08      	add	r7, sp, #32
 8006ab0:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8006aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 80b2 	beq.w	8006c26 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8006ac6:	3328      	adds	r3, #40	; 0x28
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f003 fc49 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8006ace:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	3328      	adds	r3, #40	; 0x28
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f003 fc5e 	bl	800a398 <_ZNK12SimpleString7isEmptyEv>
 8006adc:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8006ae2:	4c53      	ldr	r4, [pc, #332]	; (8006c30 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8006ae4:	e000      	b.n	8006ae8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8006ae6:	4c53      	ldr	r4, [pc, #332]	; (8006c34 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8006aec:	3314      	adds	r3, #20
 8006aee:	4618      	mov	r0, r3
 8006af0:	f003 fc36 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8006af4:	4605      	mov	r5, r0
 8006af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af8:	4618      	mov	r0, r3
 8006afa:	f003 fc31 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8006afe:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8006b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b02:	6a1a      	ldr	r2, [r3, #32]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8006b0c:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8006b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	4a49      	ldr	r2, [pc, #292]	; (8006c38 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8006b14:	fba2 2303 	umull	r2, r3, r2, r3
 8006b18:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8006b1a:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8006b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	4b45      	ldr	r3, [pc, #276]	; (8006c38 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8006b22:	fba3 1302 	umull	r1, r3, r3, r2
 8006b26:	099b      	lsrs	r3, r3, #6
 8006b28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b2c:	fb01 f303 	mul.w	r3, r1, r3
 8006b30:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b36:	3314      	adds	r3, #20
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f003 fc11 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	f107 0014 	add.w	r0, r7, #20
 8006b48:	9306      	str	r3, [sp, #24]
 8006b4a:	9205      	str	r2, [sp, #20]
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	9204      	str	r2, [sp, #16]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	9203      	str	r2, [sp, #12]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	9302      	str	r3, [sp, #8]
 8006b58:	9601      	str	r6, [sp, #4]
 8006b5a:	9500      	str	r5, [sp, #0]
 8006b5c:	4623      	mov	r3, r4
 8006b5e:	4642      	mov	r2, r8
 8006b60:	4936      	ldr	r1, [pc, #216]	; (8006c3c <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 8006b62:	f004 f931 	bl	800adc8 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3368      	adds	r3, #104	; 0x68
 8006b6c:	681c      	ldr	r4, [r3, #0]
 8006b6e:	f107 0314 	add.w	r3, r7, #20
 8006b72:	4618      	mov	r0, r3
 8006b74:	f003 fbf4 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	f107 031c 	add.w	r3, r7, #28
 8006b7e:	4611      	mov	r1, r2
 8006b80:	4618      	mov	r0, r3
 8006b82:	f003 f862 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8006b86:	f107 031c 	add.w	r3, r7, #28
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	47a0      	blx	r4
 8006b90:	f107 031c 	add.w	r3, r7, #28
 8006b94:	4618      	mov	r0, r3
 8006b96:	f003 fc10 	bl	800a3ba <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ba0:	6a12      	ldr	r2, [r2, #32]
 8006ba2:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8006ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d007      	beq.n	8006bbc <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3388      	adds	r3, #136	; 0x88
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	4798      	blx	r3
 8006bba:	e017      	b.n	8006bec <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8006bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbe:	7c1b      	ldrb	r3, [r3, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d013      	beq.n	8006bec <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3368      	adds	r3, #104	; 0x68
 8006bca:	681c      	ldr	r4, [r3, #0]
 8006bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bd0:	491b      	ldr	r1, [pc, #108]	; (8006c40 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f003 f839 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8006bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bdc:	4619      	mov	r1, r3
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	47a0      	blx	r4
 8006be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006be6:	4618      	mov	r0, r3
 8006be8:	f003 fbe7 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3368      	adds	r3, #104	; 0x68
 8006bf2:	681c      	ldr	r4, [r3, #0]
 8006bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bf8:	4912      	ldr	r1, [pc, #72]	; (8006c44 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f003 f825 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8006c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c04:	4619      	mov	r1, r3
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	47a0      	blx	r4
 8006c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f003 fbd3 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8006c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8006c1a:	f107 0314 	add.w	r3, r7, #20
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f003 fbcb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    while (cur) {
 8006c24:	e749      	b.n	8006aba <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8006c26:	bf00      	nop
 8006c28:	3738      	adds	r7, #56	; 0x38
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c30:	08020994 	.word	0x08020994
 8006c34:	08020ad4 	.word	0x08020ad4
 8006c38:	10624dd3 	.word	0x10624dd3
 8006c3c:	08020ad8 	.word	0x08020ad8
 8006c40:	08020b34 	.word	0x08020b34
 8006c44:	08020b44 	.word	0x08020b44

08006c48 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8006c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c4a:	b091      	sub	sp, #68	; 0x44
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68d9      	ldr	r1, [r3, #12]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3308      	adds	r3, #8
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f107 0210 	add.w	r2, r7, #16
 8006c64:	4610      	mov	r0, r2
 8006c66:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8006c68:	f107 0310 	add.w	r3, r7, #16
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f003 fb77 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8006c72:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3314      	adds	r3, #20
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4610      	mov	r0, r2
 8006c84:	4798      	blx	r3
 8006c86:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8006c88:	461e      	mov	r6, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3380      	adds	r3, #128	; 0x80
 8006c90:	681c      	ldr	r4, [r3, #0]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	68d9      	ldr	r1, [r3, #12]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3318      	adds	r3, #24
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f107 0220 	add.w	r2, r7, #32
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	4798      	blx	r3
 8006ca8:	f107 0318 	add.w	r3, r7, #24
 8006cac:	f107 0220 	add.w	r2, r7, #32
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	47a0      	blx	r4
 8006cb6:	f107 0318 	add.w	r3, r7, #24
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f003 fb50 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f107 0008 	add.w	r0, r7, #8
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	4633      	mov	r3, r6
 8006cca:	462a      	mov	r2, r5
 8006ccc:	4924      	ldr	r1, [pc, #144]	; (8006d60 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 8006cce:	f004 f87b 	bl	800adc8 <_Z16StringFromFormatPKcz>
 8006cd2:	f107 0318 	add.w	r3, r7, #24
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f003 fb6f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8006cdc:	f107 0320 	add.w	r3, r7, #32
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f003 fb6a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8006ce6:	f107 0310 	add.w	r3, r7, #16
 8006cea:	4618      	mov	r0, r3
 8006cec:	f003 fb65 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3368      	adds	r3, #104	; 0x68
 8006cf6:	681c      	ldr	r4, [r3, #0]
 8006cf8:	f107 0308 	add.w	r3, r7, #8
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f003 fb2f 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8006d02:	4602      	mov	r2, r0
 8006d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d08:	4611      	mov	r1, r2
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f002 ff9d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8006d10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	47a0      	blx	r4
 8006d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f003 fb4b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3368      	adds	r3, #104	; 0x68
 8006d2a:	681c      	ldr	r4, [r3, #0]
 8006d2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d30:	490c      	ldr	r1, [pc, #48]	; (8006d64 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8006d32:	4618      	mov	r0, r3
 8006d34:	f002 ff89 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8006d38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	47a0      	blx	r4
 8006d42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d46:	4618      	mov	r0, r3
 8006d48:	f003 fb37 	bl	800a3ba <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8006d4c:	f107 0308 	add.w	r3, r7, #8
 8006d50:	4618      	mov	r0, r3
 8006d52:	f003 fb32 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8006d56:	bf00      	nop
 8006d58:	373c      	adds	r7, #60	; 0x3c
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	08020b54 	.word	0x08020b54
 8006d64:	08020b90 	.word	0x08020b90

08006d68 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 8006d68:	b590      	push	{r4, r7, lr}
 8006d6a:	b08d      	sub	sp, #52	; 0x34
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3368      	adds	r3, #104	; 0x68
 8006d76:	681c      	ldr	r4, [r3, #0]
 8006d78:	f107 0308 	add.w	r3, r7, #8
 8006d7c:	4933      	ldr	r1, [pc, #204]	; (8006e4c <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f002 ff63 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8006d84:	f107 0308 	add.w	r3, r7, #8
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	47a0      	blx	r4
 8006d8e:	f107 0308 	add.w	r3, r7, #8
 8006d92:	4618      	mov	r0, r3
 8006d94:	f003 fb11 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3368      	adds	r3, #104	; 0x68
 8006d9e:	681c      	ldr	r4, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3380      	adds	r3, #128	; 0x80
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6912      	ldr	r2, [r2, #16]
 8006dac:	3230      	adds	r2, #48	; 0x30
 8006dae:	f107 0010 	add.w	r0, r7, #16
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	4798      	blx	r3
 8006db6:	f107 0310 	add.w	r3, r7, #16
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	47a0      	blx	r4
 8006dc0:	f107 0310 	add.w	r3, r7, #16
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f003 faf8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3368      	adds	r3, #104	; 0x68
 8006dd0:	681c      	ldr	r4, [r3, #0]
 8006dd2:	f107 0318 	add.w	r3, r7, #24
 8006dd6:	491e      	ldr	r1, [pc, #120]	; (8006e50 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f002 ff36 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8006dde:	f107 0318 	add.w	r3, r7, #24
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	47a0      	blx	r4
 8006de8:	f107 0318 	add.w	r3, r7, #24
 8006dec:	4618      	mov	r0, r3
 8006dee:	f003 fae4 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3368      	adds	r3, #104	; 0x68
 8006df8:	681c      	ldr	r4, [r3, #0]
 8006dfa:	f107 0320 	add.w	r3, r7, #32
 8006dfe:	4915      	ldr	r1, [pc, #84]	; (8006e54 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8006e00:	4618      	mov	r0, r3
 8006e02:	f002 ff22 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8006e06:	f107 0320 	add.w	r3, r7, #32
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	47a0      	blx	r4
 8006e10:	f107 0320 	add.w	r3, r7, #32
 8006e14:	4618      	mov	r0, r3
 8006e16:	f003 fad0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3368      	adds	r3, #104	; 0x68
 8006e20:	681c      	ldr	r4, [r3, #0]
 8006e22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e26:	490c      	ldr	r1, [pc, #48]	; (8006e58 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f002 ff0e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8006e2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	47a0      	blx	r4
 8006e38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f003 fabc 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8006e42:	bf00      	nop
 8006e44:	3734      	adds	r7, #52	; 0x34
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd90      	pop	{r4, r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	08020b9c 	.word	0x08020b9c
 8006e50:	08020bac 	.word	0x08020bac
 8006e54:	08020bbc 	.word	0x08020bbc
 8006e58:	08020bd8 	.word	0x08020bd8

08006e5c <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 8006e5c:	b590      	push	{r4, r7, lr}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3360      	adds	r3, #96	; 0x60
 8006e6a:	681c      	ldr	r4, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	335c      	adds	r3, #92	; 0x5c
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6912      	ldr	r2, [r2, #16]
 8006e78:	3214      	adds	r2, #20
 8006e7a:	f107 0008 	add.w	r0, r7, #8
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	4798      	blx	r3
 8006e82:	f107 0308 	add.w	r3, r7, #8
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	47a0      	blx	r4
 8006e8c:	f107 0308 	add.w	r3, r7, #8
 8006e90:	4618      	mov	r0, r3
 8006e92:	f003 fa92 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3370      	adds	r3, #112	; 0x70
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	4798      	blx	r3
    writeTestSuiteSummary();
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3374      	adds	r3, #116	; 0x74
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
    writeProperties();
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3378      	adds	r3, #120	; 0x78
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
    writeTestCases();
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	337c      	adds	r3, #124	; 0x7c
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	4798      	blx	r3
    writeFileEnding();
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	338c      	adds	r3, #140	; 0x8c
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
    closeFile();
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	336c      	adds	r3, #108	; 0x6c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
}
 8006ede:	bf00      	nop
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd90      	pop	{r4, r7, pc}

08006ee6 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	3330      	adds	r3, #48	; 0x30
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f003 fae2 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
}
 8006f14:	bf00      	nop
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 8006f5c:	b590      	push	{r4, r7, lr}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d113      	bne.n	8006f9a <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	3201      	adds	r2, #1
 8006f7a:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 8006f7c:	f240 1233 	movw	r2, #307	; 0x133
 8006f80:	4908      	ldr	r1, [pc, #32]	; (8006fa4 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 8006f82:	2034      	movs	r0, #52	; 0x34
 8006f84:	f000 fa9e 	bl	80074c4 <_ZnwjPKci>
 8006f88:	4604      	mov	r4, r0
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f004 fd37 	bl	800ba00 <_ZN11TestFailureC1ERKS_>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	60dc      	str	r4, [r3, #12]
    }
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd90      	pop	{r4, r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	08020998 	.word	0x08020998

08006fa8 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 8006fa8:	b5b0      	push	{r4, r5, r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 8006fb2:	4b08      	ldr	r3, [pc, #32]	; (8006fd4 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8006fb4:	681d      	ldr	r5, [r3, #0]
 8006fb6:	6838      	ldr	r0, [r7, #0]
 8006fb8:	f003 f9d2 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691c      	ldr	r4, [r3, #16]
 8006fc2:	4905      	ldr	r1, [pc, #20]	; (8006fd8 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	47a8      	blx	r5
 8006fc8:	4603      	mov	r3, r0
 8006fca:	6263      	str	r3, [r4, #36]	; 0x24
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8006fd4:	200000b0 	.word	0x200000b0
 8006fd8:	08020be8 	.word	0x08020be8

08006fdc <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 8006fdc:	b590      	push	{r4, r7, lr}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 8006fe6:	4b08      	ldr	r3, [pc, #32]	; (8007008 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 8006fe8:	681c      	ldr	r4, [r3, #0]
 8006fea:	6838      	ldr	r0, [r7, #0]
 8006fec:	f003 f9b8 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	47a0      	blx	r4
}
 8006ffe:	bf00      	nop
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	bd90      	pop	{r4, r7, pc}
 8007006:	bf00      	nop
 8007008:	200000b4 	.word	0x200000b4

0800700c <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8007014:	4b05      	ldr	r3, [pc, #20]	; (800702c <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6912      	ldr	r2, [r2, #16]
 800701c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800701e:	4610      	mov	r0, r2
 8007020:	4798      	blx	r3
}
 8007022:	bf00      	nop
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	200000b8 	.word	0x200000b8

08007030 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
        return false;
 800703e:	2300      	movs	r3, #0
    }
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
    {
 8007054:	4a04      	ldr	r2, [pc, #16]	; (8007068 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	601a      	str	r2, [r3, #0]
    }
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	08023ca0 	.word	0x08023ca0

0800706c <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
    }
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff ffe9 	bl	800704c <_ZN17MemoryLeakFailureD1Ev>
 800707a:	2104      	movs	r1, #4
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fa35 	bl	80074ec <_ZdlPvj>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 800708c:	b590      	push	{r4, r7, lr}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	687c      	ldr	r4, [r7, #4]
 8007096:	f000 fc71 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800709a:	4603      	mov	r3, r0
 800709c:	4618      	mov	r0, r3
 800709e:	f00c ff6c 	bl	8013f7a <_ZN18MemoryLeakDetector8getMutexEv>
 80070a2:	4603      	mov	r3, r0
 80070a4:	4619      	mov	r1, r3
 80070a6:	4620      	mov	r0, r4
 80070a8:	f002 fb24 	bl	80096f4 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4618      	mov	r0, r3
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd90      	pop	{r4, r7, pc}

080070b6 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f002 fb29 	bl	8009718 <_ZN15ScopedMutexLockD1Ev>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4618      	mov	r0, r3
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 80070d0:	b590      	push	{r4, r7, lr}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 80070dc:	f000 fc4e 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80070e0:	4604      	mov	r4, r0
 80070e2:	f006 f8df 	bl	800d2a4 <_Z25getCurrentMallocAllocatorv>
 80070e6:	4601      	mov	r1, r0
 80070e8:	2301      	movs	r3, #1
 80070ea:	9301      	str	r3, [sp, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	4620      	mov	r0, r4
 80070f6:	f00d f983 	bl	8014400 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80070fa:	4603      	mov	r3, r0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	bd90      	pop	{r4, r7, pc}

08007104 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8007104:	b590      	push	{r4, r7, lr}
 8007106:	b087      	sub	sp, #28
 8007108:	af02      	add	r7, sp, #8
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8007110:	f000 fc34 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007114:	4603      	mov	r3, r0
 8007116:	68f9      	ldr	r1, [r7, #12]
 8007118:	4618      	mov	r0, r3
 800711a:	f00c ffdd 	bl	80140d8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800711e:	f000 fc2d 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007122:	4604      	mov	r4, r0
 8007124:	f006 f8be 	bl	800d2a4 <_Z25getCurrentMallocAllocatorv>
 8007128:	4601      	mov	r1, r0
 800712a:	2301      	movs	r3, #1
 800712c:	9301      	str	r3, [sp, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	4620      	mov	r0, r4
 8007138:	f00d f996 	bl	8014468 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 800713c:	bf00      	nop
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	bd90      	pop	{r4, r7, pc}

08007144 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8007144:	b590      	push	{r4, r7, lr}
 8007146:	b089      	sub	sp, #36	; 0x24
 8007148:	af04      	add	r7, sp, #16
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 8007152:	f000 fc13 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007156:	4604      	mov	r4, r0
 8007158:	f006 f8a4 	bl	800d2a4 <_Z25getCurrentMallocAllocatorv>
 800715c:	4601      	mov	r1, r0
 800715e:	2301      	movs	r3, #1
 8007160:	9302      	str	r3, [sp, #8]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	9301      	str	r3, [sp, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	4620      	mov	r0, r4
 8007170:	f00d f9de 	bl	8014530 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 8007174:	4603      	mov	r3, r0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	bd90      	pop	{r4, r7, pc}
	...

08007180 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 800718c:	4b04      	ldr	r3, [pc, #16]	; (80071a0 <_ZL13normal_mallocjPKcj+0x20>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	4798      	blx	r3
 8007194:	4603      	mov	r3, r0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	200000c4 	.word	0x200000c4

080071a4 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 80071b2:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <_ZL14normal_reallocPvjPKcj+0x24>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68b9      	ldr	r1, [r7, #8]
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	4798      	blx	r3
 80071bc:	4603      	mov	r3, r0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	200000c8 	.word	0x200000c8

080071cc <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 80071d8:	4b03      	ldr	r3, [pc, #12]	; (80071e8 <_ZL11normal_freePvPKcj+0x1c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	4798      	blx	r3
}
 80071e0:	bf00      	nop
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	200000cc 	.word	0x200000cc

080071ec <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 80071ec:	b590      	push	{r4, r7, lr}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 80071f4:	f107 0308 	add.w	r3, r7, #8
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff ff47 	bl	800708c <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 80071fe:	f000 fbbd 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007202:	4604      	mov	r4, r0
 8007204:	f005 ff9e 	bl	800d144 <_Z22getCurrentNewAllocatorv>
 8007208:	4601      	mov	r1, r0
 800720a:	2300      	movs	r3, #0
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	4620      	mov	r0, r4
 8007210:	f00d f864 	bl	80142dc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8007214:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007216:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8007218:	f107 0308 	add.w	r3, r7, #8
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff ff4a 	bl	80070b6 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8007222:	4623      	mov	r3, r4
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	bd90      	pop	{r4, r7, pc}

0800722c <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800722c:	b590      	push	{r4, r7, lr}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8007234:	f000 fba2 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007238:	4604      	mov	r4, r0
 800723a:	f005 ff83 	bl	800d144 <_Z22getCurrentNewAllocatorv>
 800723e:	4601      	mov	r1, r0
 8007240:	2300      	movs	r3, #0
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	4620      	mov	r0, r4
 8007246:	f00d f849 	bl	80142dc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800724a:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800724c:	68fb      	ldr	r3, [r7, #12]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	bd90      	pop	{r4, r7, pc}

08007256 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8007256:	b590      	push	{r4, r7, lr}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800725e:	f000 fb8d 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007262:	4604      	mov	r4, r0
 8007264:	f005 ff6e 	bl	800d144 <_Z22getCurrentNewAllocatorv>
 8007268:	4601      	mov	r1, r0
 800726a:	2300      	movs	r3, #0
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	4620      	mov	r0, r4
 8007270:	f00d f834 	bl	80142dc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8007274:	4603      	mov	r3, r0
}
 8007276:	4618      	mov	r0, r3
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	bd90      	pop	{r4, r7, pc}

0800727e <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800727e:	b590      	push	{r4, r7, lr}
 8007280:	b089      	sub	sp, #36	; 0x24
 8007282:	af02      	add	r7, sp, #8
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	60b9      	str	r1, [r7, #8]
 8007288:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 800728a:	f000 fb77 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800728e:	4604      	mov	r4, r0
 8007290:	f005 ff58 	bl	800d144 <_Z22getCurrentNewAllocatorv>
 8007294:	4601      	mov	r1, r0
 8007296:	2300      	movs	r3, #0
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4620      	mov	r0, r4
 80072a4:	f00d f8ac 	bl	8014400 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80072a8:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80072aa:	697b      	ldr	r3, [r7, #20]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	371c      	adds	r7, #28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd90      	pop	{r4, r7, pc}

080072b4 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 80072b4:	b590      	push	{r4, r7, lr}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 80072bc:	f000 fb5e 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80072c0:	4604      	mov	r4, r0
 80072c2:	f005 ff97 	bl	800d1f4 <_Z27getCurrentNewArrayAllocatorv>
 80072c6:	4601      	mov	r1, r0
 80072c8:	2300      	movs	r3, #0
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	4620      	mov	r0, r4
 80072ce:	f00d f805 	bl	80142dc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80072d2:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80072d4:	68fb      	ldr	r3, [r7, #12]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd90      	pop	{r4, r7, pc}

080072de <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 80072de:	b590      	push	{r4, r7, lr}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 80072e6:	f000 fb49 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80072ea:	4604      	mov	r4, r0
 80072ec:	f005 ff82 	bl	800d1f4 <_Z27getCurrentNewArrayAllocatorv>
 80072f0:	4601      	mov	r1, r0
 80072f2:	2300      	movs	r3, #0
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	4620      	mov	r0, r4
 80072f8:	f00c fff0 	bl	80142dc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80072fc:	4603      	mov	r3, r0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	bd90      	pop	{r4, r7, pc}

08007306 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8007306:	b590      	push	{r4, r7, lr}
 8007308:	b089      	sub	sp, #36	; 0x24
 800730a:	af02      	add	r7, sp, #8
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8007312:	f000 fb33 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007316:	4604      	mov	r4, r0
 8007318:	f005 ff6c 	bl	800d1f4 <_Z27getCurrentNewArrayAllocatorv>
 800731c:	4601      	mov	r1, r0
 800731e:	2300      	movs	r3, #0
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4620      	mov	r0, r4
 800732c:	f00d f868 	bl	8014400 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8007330:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007332:	697b      	ldr	r3, [r7, #20]
}
 8007334:	4618      	mov	r0, r3
 8007336:	371c      	adds	r7, #28
 8007338:	46bd      	mov	sp, r7
 800733a:	bd90      	pop	{r4, r7, pc}

0800733c <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 800733c:	b590      	push	{r4, r7, lr}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8007344:	f000 fb1a 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007348:	4603      	mov	r3, r0
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	4618      	mov	r0, r3
 800734e:	f00c fec3 	bl	80140d8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8007352:	f000 fb13 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007356:	4604      	mov	r4, r0
 8007358:	f005 fef4 	bl	800d144 <_Z22getCurrentNewAllocatorv>
 800735c:	4601      	mov	r1, r0
 800735e:	2300      	movs	r3, #0
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	4620      	mov	r0, r4
 8007364:	f00d f8ca 	bl	80144fc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	bd90      	pop	{r4, r7, pc}

08007370 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8007370:	b590      	push	{r4, r7, lr}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8007378:	f000 fb00 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800737c:	4603      	mov	r3, r0
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	4618      	mov	r0, r3
 8007382:	f00c fea9 	bl	80140d8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 8007386:	f000 faf9 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800738a:	4604      	mov	r4, r0
 800738c:	f005 ff32 	bl	800d1f4 <_Z27getCurrentNewArrayAllocatorv>
 8007390:	4601      	mov	r1, r0
 8007392:	2300      	movs	r3, #0
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	4620      	mov	r0, r4
 8007398:	f00d f8b0 	bl	80144fc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd90      	pop	{r4, r7, pc}

080073a4 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 80073ac:	4b04      	ldr	r3, [pc, #16]	; (80073c0 <_ZL19normal_operator_newj+0x1c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	4798      	blx	r3
 80073b4:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80073b6:	68fb      	ldr	r3, [r7, #12]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	200000c4 	.word	0x200000c4

080073c4 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 80073cc:	4b04      	ldr	r3, [pc, #16]	; (80073e0 <_ZL27normal_operator_new_nothrowj+0x1c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
 80073d4:	4603      	mov	r3, r0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	200000c4 	.word	0x200000c4

080073e4 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 80073f0:	4b04      	ldr	r3, [pc, #16]	; (8007404 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	4798      	blx	r3
 80073f8:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80073fa:	697b      	ldr	r3, [r7, #20]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	200000c4 	.word	0x200000c4

08007408 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8007410:	4b04      	ldr	r3, [pc, #16]	; (8007424 <_ZL25normal_operator_new_arrayj+0x1c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	4798      	blx	r3
 8007418:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800741a:	68fb      	ldr	r3, [r7, #12]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	200000c4 	.word	0x200000c4

08007428 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8007430:	4b04      	ldr	r3, [pc, #16]	; (8007444 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	4798      	blx	r3
 8007438:	4603      	mov	r3, r0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	200000c4 	.word	0x200000c4

08007448 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8007454:	4b04      	ldr	r3, [pc, #16]	; (8007468 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	4798      	blx	r3
 800745c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800745e:	697b      	ldr	r3, [r7, #20]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	200000c4 	.word	0x200000c4

0800746c <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8007474:	4b03      	ldr	r3, [pc, #12]	; (8007484 <_ZL22normal_operator_deletePv+0x18>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	4798      	blx	r3
}
 800747c:	bf00      	nop
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	200000cc 	.word	0x200000cc

08007488 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8007490:	4b03      	ldr	r3, [pc, #12]	; (80074a0 <_ZL28normal_operator_delete_arrayPv+0x18>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
}
 8007498:	bf00      	nop
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	200000cc 	.word	0x200000cc

080074a4 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 80074ac:	4b04      	ldr	r3, [pc, #16]	; (80074c0 <_Znwj+0x1c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	4798      	blx	r3
 80074b4:	4603      	mov	r3, r0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	20000028 	.word	0x20000028

080074c4 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 80074d0:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <_ZnwjPKci+0x24>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	68b9      	ldr	r1, [r7, #8]
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	4798      	blx	r3
 80074dc:	4603      	mov	r3, r0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000030 	.word	0x20000030

080074ec <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 80074f6:	4b04      	ldr	r3, [pc, #16]	; (8007508 <_ZdlPvj+0x1c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	4798      	blx	r3
}
 80074fe:	bf00      	nop
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20000040 	.word	0x20000040

0800750c <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8007518:	4b05      	ldr	r3, [pc, #20]	; (8007530 <_ZnajPKci+0x24>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	68b9      	ldr	r1, [r7, #8]
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	4798      	blx	r3
 8007524:	4603      	mov	r3, r0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	2000003c 	.word	0x2000003c

08007534 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 800753c:	4b03      	ldr	r3, [pc, #12]	; (800754c <_ZdaPv+0x18>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	4798      	blx	r3
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20000044 	.word	0x20000044

08007550 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800755a:	4b04      	ldr	r3, [pc, #16]	; (800756c <_ZdaPvj+0x1c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	4798      	blx	r3
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20000044 	.word	0x20000044

08007570 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 8007574:	4b12      	ldr	r3, [pc, #72]	; (80075c0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 8007576:	4a13      	ldr	r2, [pc, #76]	; (80075c4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 8007578:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 800757a:	4b13      	ldr	r3, [pc, #76]	; (80075c8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 800757c:	4a13      	ldr	r2, [pc, #76]	; (80075cc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 800757e:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 8007580:	4b13      	ldr	r3, [pc, #76]	; (80075d0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 8007582:	4a14      	ldr	r2, [pc, #80]	; (80075d4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 8007584:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 8007586:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 8007588:	4a14      	ldr	r2, [pc, #80]	; (80075dc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 800758a:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 800758c:	4b14      	ldr	r3, [pc, #80]	; (80075e0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 800758e:	4a15      	ldr	r2, [pc, #84]	; (80075e4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8007590:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 8007592:	4b15      	ldr	r3, [pc, #84]	; (80075e8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8007594:	4a15      	ldr	r2, [pc, #84]	; (80075ec <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8007596:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8007598:	4b15      	ldr	r3, [pc, #84]	; (80075f0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800759a:	4a16      	ldr	r2, [pc, #88]	; (80075f4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 800759c:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800759e:	4b16      	ldr	r3, [pc, #88]	; (80075f8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 80075a0:	4a16      	ldr	r2, [pc, #88]	; (80075fc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 80075a2:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 80075a4:	4b16      	ldr	r3, [pc, #88]	; (8007600 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 80075a6:	4a17      	ldr	r2, [pc, #92]	; (8007604 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 80075a8:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 80075aa:	4b17      	ldr	r3, [pc, #92]	; (8007608 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 80075ac:	4a17      	ldr	r2, [pc, #92]	; (800760c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 80075ae:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 80075b0:	4b17      	ldr	r3, [pc, #92]	; (8007610 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 80075b2:	4a18      	ldr	r2, [pc, #96]	; (8007614 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 80075b4:	601a      	str	r2, [r3, #0]

#endif
}
 80075b6:	bf00      	nop
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	20000028 	.word	0x20000028
 80075c4:	080073a5 	.word	0x080073a5
 80075c8:	2000002c 	.word	0x2000002c
 80075cc:	080073c5 	.word	0x080073c5
 80075d0:	20000030 	.word	0x20000030
 80075d4:	080073e5 	.word	0x080073e5
 80075d8:	20000034 	.word	0x20000034
 80075dc:	08007409 	.word	0x08007409
 80075e0:	20000038 	.word	0x20000038
 80075e4:	08007429 	.word	0x08007429
 80075e8:	2000003c 	.word	0x2000003c
 80075ec:	08007449 	.word	0x08007449
 80075f0:	20000040 	.word	0x20000040
 80075f4:	0800746d 	.word	0x0800746d
 80075f8:	20000044 	.word	0x20000044
 80075fc:	08007489 	.word	0x08007489
 8007600:	20000010 	.word	0x20000010
 8007604:	08007181 	.word	0x08007181
 8007608:	20000018 	.word	0x20000018
 800760c:	080071a5 	.word	0x080071a5
 8007610:	20000014 	.word	0x20000014
 8007614:	080071cd 	.word	0x080071cd

08007618 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8007618:	b480      	push	{r7}
 800761a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 800761c:	4b08      	ldr	r3, [pc, #32]	; (8007640 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a08      	ldr	r2, [pc, #32]	; (8007644 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d004      	beq.n	8007630 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 8007626:	4b06      	ldr	r3, [pc, #24]	; (8007640 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a07      	ldr	r2, [pc, #28]	; (8007648 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d101      	bne.n	8007634 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8007630:	2301      	movs	r3, #1
 8007632:	e000      	b.n	8007636 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 8007634:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 8007636:	4618      	mov	r0, r3
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	20000028 	.word	0x20000028
 8007644:	0800722d 	.word	0x0800722d
 8007648:	080071ed 	.word	0x080071ed

0800764c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8007650:	4b1f      	ldr	r3, [pc, #124]	; (80076d0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3301      	adds	r3, #1
 8007656:	4a1e      	ldr	r2, [pc, #120]	; (80076d0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	4b1d      	ldr	r3, [pc, #116]	; (80076d0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b01      	cmp	r3, #1
 8007660:	bfcc      	ite	gt
 8007662:	2301      	movgt	r3, #1
 8007664:	2300      	movle	r3, #0
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b00      	cmp	r3, #0
 800766a:	d12e      	bne.n	80076ca <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 800766c:	4b19      	ldr	r3, [pc, #100]	; (80076d4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a19      	ldr	r2, [pc, #100]	; (80076d8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 8007672:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8007674:	4b19      	ldr	r3, [pc, #100]	; (80076dc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a19      	ldr	r2, [pc, #100]	; (80076e0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 800767a:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 800767c:	4b19      	ldr	r3, [pc, #100]	; (80076e4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a19      	ldr	r2, [pc, #100]	; (80076e8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 8007682:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 8007684:	4b19      	ldr	r3, [pc, #100]	; (80076ec <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a19      	ldr	r2, [pc, #100]	; (80076f0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 800768a:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 800768c:	4b19      	ldr	r3, [pc, #100]	; (80076f4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a19      	ldr	r2, [pc, #100]	; (80076f8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8007692:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8007694:	4b19      	ldr	r3, [pc, #100]	; (80076fc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a19      	ldr	r2, [pc, #100]	; (8007700 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800769a:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 800769c:	4b19      	ldr	r3, [pc, #100]	; (8007704 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a19      	ldr	r2, [pc, #100]	; (8007708 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 80076a2:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 80076a4:	4b19      	ldr	r3, [pc, #100]	; (800770c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a19      	ldr	r2, [pc, #100]	; (8007710 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 80076aa:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 80076ac:	4b19      	ldr	r3, [pc, #100]	; (8007714 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a19      	ldr	r2, [pc, #100]	; (8007718 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 80076b2:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 80076b4:	4b19      	ldr	r3, [pc, #100]	; (800771c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a19      	ldr	r2, [pc, #100]	; (8007720 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 80076ba:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 80076bc:	4b19      	ldr	r3, [pc, #100]	; (8007724 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a19      	ldr	r2, [pc, #100]	; (8007728 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 80076c2:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 80076c4:	f7ff ff54 	bl	8007570 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 80076c8:	e000      	b.n	80076cc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 80076ca:	bf00      	nop
#endif
}
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20000614 	.word	0x20000614
 80076d4:	20000028 	.word	0x20000028
 80076d8:	20000048 	.word	0x20000048
 80076dc:	2000002c 	.word	0x2000002c
 80076e0:	2000004c 	.word	0x2000004c
 80076e4:	20000030 	.word	0x20000030
 80076e8:	20000050 	.word	0x20000050
 80076ec:	20000034 	.word	0x20000034
 80076f0:	20000054 	.word	0x20000054
 80076f4:	20000038 	.word	0x20000038
 80076f8:	20000058 	.word	0x20000058
 80076fc:	2000003c 	.word	0x2000003c
 8007700:	2000005c 	.word	0x2000005c
 8007704:	20000040 	.word	0x20000040
 8007708:	20000060 	.word	0x20000060
 800770c:	20000044 	.word	0x20000044
 8007710:	20000064 	.word	0x20000064
 8007714:	20000010 	.word	0x20000010
 8007718:	2000001c 	.word	0x2000001c
 800771c:	20000018 	.word	0x20000018
 8007720:	20000024 	.word	0x20000024
 8007724:	20000014 	.word	0x20000014
 8007728:	20000020 	.word	0x20000020

0800772c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 8007730:	4b1f      	ldr	r3, [pc, #124]	; (80077b0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3b01      	subs	r3, #1
 8007736:	4a1e      	ldr	r2, [pc, #120]	; (80077b0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	4b1d      	ldr	r3, [pc, #116]	; (80077b0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	bfcc      	ite	gt
 8007742:	2301      	movgt	r3, #1
 8007744:	2300      	movle	r3, #0
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	d12c      	bne.n	80077a6 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800774c:	4b19      	ldr	r3, [pc, #100]	; (80077b4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a19      	ldr	r2, [pc, #100]	; (80077b8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 8007752:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 8007754:	4b19      	ldr	r3, [pc, #100]	; (80077bc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a19      	ldr	r2, [pc, #100]	; (80077c0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800775a:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800775c:	4b19      	ldr	r3, [pc, #100]	; (80077c4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a19      	ldr	r2, [pc, #100]	; (80077c8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 8007762:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 8007764:	4b19      	ldr	r3, [pc, #100]	; (80077cc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a19      	ldr	r2, [pc, #100]	; (80077d0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800776a:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800776c:	4b19      	ldr	r3, [pc, #100]	; (80077d4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a19      	ldr	r2, [pc, #100]	; (80077d8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 8007772:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 8007774:	4b19      	ldr	r3, [pc, #100]	; (80077dc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a19      	ldr	r2, [pc, #100]	; (80077e0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800777a:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800777c:	4b19      	ldr	r3, [pc, #100]	; (80077e4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a19      	ldr	r2, [pc, #100]	; (80077e8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 8007782:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 8007784:	4b19      	ldr	r3, [pc, #100]	; (80077ec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a19      	ldr	r2, [pc, #100]	; (80077f0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800778a:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800778c:	4b19      	ldr	r3, [pc, #100]	; (80077f4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a19      	ldr	r2, [pc, #100]	; (80077f8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 8007792:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 8007794:	4b19      	ldr	r3, [pc, #100]	; (80077fc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a19      	ldr	r2, [pc, #100]	; (8007800 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800779a:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800779c:	4b19      	ldr	r3, [pc, #100]	; (8007804 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a19      	ldr	r2, [pc, #100]	; (8007808 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	e000      	b.n	80077a8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 80077a6:	bf00      	nop
#endif
}
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	20000614 	.word	0x20000614
 80077b4:	20000048 	.word	0x20000048
 80077b8:	20000028 	.word	0x20000028
 80077bc:	2000004c 	.word	0x2000004c
 80077c0:	2000002c 	.word	0x2000002c
 80077c4:	20000050 	.word	0x20000050
 80077c8:	20000030 	.word	0x20000030
 80077cc:	20000054 	.word	0x20000054
 80077d0:	20000034 	.word	0x20000034
 80077d4:	20000058 	.word	0x20000058
 80077d8:	20000038 	.word	0x20000038
 80077dc:	2000005c 	.word	0x2000005c
 80077e0:	2000003c 	.word	0x2000003c
 80077e4:	20000060 	.word	0x20000060
 80077e8:	20000040 	.word	0x20000040
 80077ec:	20000064 	.word	0x20000064
 80077f0:	20000044 	.word	0x20000044
 80077f4:	2000001c 	.word	0x2000001c
 80077f8:	20000010 	.word	0x20000010
 80077fc:	20000024 	.word	0x20000024
 8007800:	20000018 	.word	0x20000018
 8007804:	20000020 	.word	0x20000020
 8007808:	20000014 	.word	0x20000014

0800780c <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
    {
 8007814:	4a05      	ldr	r2, [pc, #20]	; (800782c <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4618      	mov	r0, r3
 800781e:	f7ff fc15 	bl	800704c <_ZN17MemoryLeakFailureD1Ev>
    }
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	08023c8c 	.word	0x08023c8c

08007830 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
    }
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff ffe7 	bl	800780c <_ZN25MemoryLeakWarningReporterD1Ev>
 800783e:	2104      	movs	r1, #4
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff fe53 	bl	80074ec <_ZdlPvj>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	4a04      	ldr	r2, [pc, #16]	; (800786c <_ZN14TestTerminatorC1Ev+0x1c>)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4618      	mov	r0, r3
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	08024638 	.word	0x08024638

08007870 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4618      	mov	r0, r3
 800787c:	f7ff ffe8 	bl	8007850 <_ZN14TestTerminatorC1Ev>
 8007880:	4a03      	ldr	r2, [pc, #12]	; (8007890 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	08024610 	.word	0x08024610

08007894 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 8007894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007896:	b099      	sub	sp, #100	; 0x64
 8007898:	af02      	add	r7, sp, #8
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800789e:	f009 fdb7 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 80078a2:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 80078a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	339c      	adds	r3, #156	; 0x9c
 80078aa:	681c      	ldr	r4, [r3, #0]
 80078ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80078b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078b2:	4618      	mov	r0, r3
 80078b4:	f008 fbc4 	bl	8010040 <_ZNK10UtestShell7getNameEv>
 80078b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80078bc:	4618      	mov	r0, r3
 80078be:	f002 fd4f 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 80078c2:	4605      	mov	r5, r0
 80078c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80078c6:	f008 fc9b 	bl	8010200 <_ZNK10UtestShell13getLineNumberEv>
 80078ca:	4606      	mov	r6, r0
 80078cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f002 f9b9 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80078d8:	f107 000c 	add.w	r0, r7, #12
 80078dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	4633      	mov	r3, r6
 80078e4:	462a      	mov	r2, r5
 80078e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078e8:	f004 fd14 	bl	800c314 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 80078ec:	2300      	movs	r3, #0
 80078ee:	653b      	str	r3, [r7, #80]	; 0x50
 80078f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7ff ffbb 	bl	8007870 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 80078fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80078fe:	f107 030c 	add.w	r3, r7, #12
 8007902:	4619      	mov	r1, r3
 8007904:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007906:	47a0      	blx	r4
 8007908:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800790c:	4618      	mov	r0, r3
 800790e:	f009 fe79 	bl	8011604 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8007912:	f107 030c 	add.w	r3, r7, #12
 8007916:	4618      	mov	r0, r3
 8007918:	f000 f9ac 	bl	8007c74 <_ZN11FailFailureD1Ev>
 800791c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007920:	4618      	mov	r0, r3
 8007922:	f002 fd4a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8007926:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800792a:	4618      	mov	r0, r3
 800792c:	f002 fd45 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 8007930:	bf00      	nop
 8007932:	375c      	adds	r7, #92	; 0x5c
 8007934:	46bd      	mov	sp, r7
 8007936:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007938 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	4a04      	ldr	r2, [pc, #16]	; (8007954 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4618      	mov	r0, r3
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	08023ca0 	.word	0x08023ca0

08007958 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff ffe8 	bl	8007938 <_ZN17MemoryLeakFailureC1Ev>
 8007968:	4a03      	ldr	r2, [pc, #12]	; (8007978 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	08023c8c 	.word	0x08023c8c

0800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800797c:	b598      	push	{r3, r4, r7, lr}
 800797e:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 8007980:	4b11      	ldr	r3, [pc, #68]	; (80079c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d11b      	bne.n	80079c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 8007988:	f7ff fe60 	bl	800764c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800798c:	2004      	movs	r0, #4
 800798e:	f7ff fd89 	bl	80074a4 <_Znwj>
 8007992:	4603      	mov	r3, r0
 8007994:	461c      	mov	r4, r3
 8007996:	4620      	mov	r0, r4
 8007998:	f7ff ffde 	bl	8007958 <_ZN25MemoryLeakWarningReporterC1Ev>
 800799c:	4b0b      	ldr	r3, [pc, #44]	; (80079cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800799e:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 80079a0:	f241 1050 	movw	r0, #4432	; 0x1150
 80079a4:	f7ff fd7e 	bl	80074a4 <_Znwj>
 80079a8:	4603      	mov	r3, r0
 80079aa:	461c      	mov	r4, r3
 80079ac:	4b07      	ldr	r3, [pc, #28]	; (80079cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4619      	mov	r1, r3
 80079b2:	4620      	mov	r0, r4
 80079b4:	f00c fa3e 	bl	8013e34 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 80079b8:	4b03      	ldr	r3, [pc, #12]	; (80079c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 80079ba:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 80079bc:	f7ff feb6 	bl	800772c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 80079c0:	4b01      	ldr	r3, [pc, #4]	; (80079c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 80079c2:	681b      	ldr	r3, [r3, #0]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	bd98      	pop	{r3, r4, r7, pc}
 80079c8:	2000061c 	.word	0x2000061c
 80079cc:	20000618 	.word	0x20000618

080079d0 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	765a      	strb	r2, [r3, #25]
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
	...

080079f0 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 80079f4:	f7ff fdbc 	bl	8007570 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 80079f8:	4b0b      	ldr	r3, [pc, #44]	; (8007a28 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d004      	beq.n	8007a0a <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	3204      	adds	r2, #4
 8007a04:	6812      	ldr	r2, [r2, #0]
 8007a06:	4618      	mov	r0, r3
 8007a08:	4790      	blx	r2
    delete globalReporter;
 8007a0a:	4b08      	ldr	r3, [pc, #32]	; (8007a2c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d004      	beq.n	8007a1c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	3204      	adds	r2, #4
 8007a16:	6812      	ldr	r2, [r2, #0]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	4790      	blx	r2
    globalDetector = NULLPTR;
 8007a1c:	4b02      	ldr	r3, [pc, #8]	; (8007a28 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]
}
 8007a22:	bf00      	nop
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	2000061c 	.word	0x2000061c
 8007a2c:	20000618 	.word	0x20000618

08007a30 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	68b9      	ldr	r1, [r7, #8]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f006 fdfd 	bl	800e640 <_ZN10TestPluginC1ERK12SimpleString>
 8007a46:	4a14      	ldr	r2, [pc, #80]	; (8007a98 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	761a      	strb	r2, [r3, #24]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	765a      	strb	r2, [r3, #25]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 8007a5e:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d102      	bne.n	8007a6c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 8007a66:	4a0d      	ldr	r2, [pc, #52]	; (8007a9c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	615a      	str	r2, [r3, #20]
 8007a78:	e004      	b.n	8007a84 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 8007a7a:	f7ff ff7f 	bl	800797c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f00c fa69 	bl	8013f60 <_ZN18MemoryLeakDetector6enableEv>
}
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	08023cb4 	.word	0x08023cb4
 8007a9c:	20000620 	.word	0x20000620

08007aa0 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	4a09      	ldr	r2, [pc, #36]	; (8007ad0 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	7e5b      	ldrb	r3, [r3, #25]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 8007ab6:	f7ff fd5b 	bl	8007570 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 8007aba:	f7ff ff99 	bl	80079f0 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f006 fdf9 	bl	800e6b8 <_ZN10TestPluginD1Ev>
    }
}
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	08023cb4 	.word	0x08023cb4

08007ad4 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
}
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff ffdf 	bl	8007aa0 <_ZN23MemoryLeakWarningPluginD1Ev>
 8007ae2:	2124      	movs	r1, #36	; 0x24
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff fd01 	bl	80074ec <_ZdlPvj>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f00c fa0e 	bl	8013f26 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fd ffb0 	bl	8005a70 <_ZNK10TestResult15getFailureCountEv>
 8007b10:	4602      	mov	r2, r0
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	621a      	str	r2, [r3, #32]
}
 8007b16:	bf00      	nop
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 8007b20:	b590      	push	{r4, r7, lr}
 8007b22:	b097      	sub	sp, #92	; 0x5c
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f00c fa08 	bl	8013f46 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	2103      	movs	r1, #3
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f00c fda5 	bl	801468c <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8007b42:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	7e1b      	ldrb	r3, [r3, #24]
 8007b48:	f083 0301 	eor.w	r3, r3, #1
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00e      	beq.n	8007b70 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d009      	beq.n	8007b70 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6a1c      	ldr	r4, [r3, #32]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7fd ff85 	bl	8005a70 <_ZNK10TestResult15getFailureCountEv>
 8007b66:	4603      	mov	r3, r0
 8007b68:	429c      	cmp	r4, r3
 8007b6a:	d101      	bne.n	8007b70 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 8007b70:	2300      	movs	r3, #0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d04c      	beq.n	8007c10 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 8007b76:	f7ff fd4f 	bl	8007618 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d028      	beq.n	8007bd2 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	2103      	movs	r1, #3
 8007b86:	4618      	mov	r0, r3
 8007b88:	f00c fd45 	bl	8014616 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007b92:	4611      	mov	r1, r2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f002 f858 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8007b9a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007b9e:	f107 0310 	add.w	r3, r7, #16
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f003 feaf 	bl	800b908 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8007baa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f002 fc03 	bl	800a3ba <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3334      	adds	r3, #52	; 0x34
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f107 0210 	add.w	r2, r7, #16
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8007bc6:	f107 0310 	add.w	r3, r7, #16
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f003 ff5c 	bl	800ba88 <_ZN11TestFailureD1Ev>
 8007bd0:	e01e      	b.n	8007c10 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d01a      	beq.n	8007c10 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3338      	adds	r3, #56	; 0x38
 8007be0:	681c      	ldr	r4, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007bec:	4910      	ldr	r1, [pc, #64]	; (8007c30 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f003 f8ea 	bl	800adc8 <_Z16StringFromFormatPKcz>
 8007bf4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f002 fbb1 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	47a0      	blx	r4
 8007c06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f002 fbd5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f00c fd13 	bl	8014640 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	61da      	str	r2, [r3, #28]
}
 8007c26:	bf00      	nop
 8007c28:	375c      	adds	r7, #92	; 0x5c
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd90      	pop	{r4, r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	08020bec 	.word	0x08020bec

08007c34 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	2102      	movs	r1, #2
 8007c44:	4618      	mov	r0, r3
 8007c46:	f00c fd21 	bl	801468c <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8007c4a:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d007      	beq.n	8007c64 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	2102      	movs	r1, #2
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f00c fcdb 	bl	8014616 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8007c60:	4603      	mov	r3, r0
 8007c62:	e000      	b.n	8007c66 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 8007c64:	4b02      	ldr	r3, [pc, #8]	; (8007c70 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	08020c2c 	.word	0x08020c2c

08007c74 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	4a05      	ldr	r2, [pc, #20]	; (8007c94 <_ZN11FailFailureD1Ev+0x20>)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f003 feff 	bl	800ba88 <_ZN11TestFailureD1Ev>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	08023cfc 	.word	0x08023cfc

08007c98 <_ZN11FailFailureD0Ev>:
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff ffe7 	bl	8007c74 <_ZN11FailFailureD1Ev>
 8007ca6:	2134      	movs	r1, #52	; 0x34
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff fc1f 	bl	80074ec <_ZdlPvj>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	4a06      	ldr	r2, [pc, #24]	; (8007d0c <_ZN19MockFailureReporterC1Ev+0x24>)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	711a      	strb	r2, [r3, #4]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	08024ed8 	.word	0x08024ed8

08007d10 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	4a04      	ldr	r2, [pc, #16]	; (8007d2c <_ZN19MockFailureReporterD1Ev+0x1c>)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	08024ed8 	.word	0x08024ed8

08007d30 <_ZN19MockFailureReporterD0Ev>:
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff ffe9 	bl	8007d10 <_ZN19MockFailureReporterD1Ev>
 8007d3e:	2108      	movs	r1, #8
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff fbd3 	bl	80074ec <_ZdlPvj>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	4a05      	ldr	r2, [pc, #20]	; (8007d70 <_ZN11MockFailureD1Ev+0x20>)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f003 fe91 	bl	800ba88 <_ZN11TestFailureD1Ev>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	08023e50 	.word	0x08023e50

08007d74 <_ZN11MockFailureD0Ev>:
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff ffe7 	bl	8007d50 <_ZN11MockFailureD1Ev>
 8007d82:	2134      	movs	r1, #52	; 0x34
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff fbb1 	bl	80074ec <_ZdlPvj>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 8007d94:	b590      	push	{r4, r7, lr}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
 8007d9e:	4a16      	ldr	r2, [pc, #88]	; (8007df8 <_ZN14MockNamedValueC1ERKS_+0x64>)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	1d1a      	adds	r2, r3, #4
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	3304      	adds	r3, #4
 8007dac:	4619      	mov	r1, r3
 8007dae:	4610      	mov	r0, r2
 8007db0:	f001 ff9f 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f103 020c 	add.w	r2, r3, #12
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	330c      	adds	r3, #12
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	f001 ff96 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	f102 0418 	add.w	r4, r2, #24
 8007dce:	3318      	adds	r3, #24
 8007dd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	629a      	str	r2, [r3, #40]	; 0x28
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	62da      	str	r2, [r3, #44]	; 0x2c
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	631a      	str	r2, [r3, #48]	; 0x30
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4618      	mov	r0, r3
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd90      	pop	{r4, r7, pc}
 8007df8:	08024f18 	.word	0x08024f18

08007dfc <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 8007e06:	f107 030c 	add.w	r3, r7, #12
 8007e0a:	4916      	ldr	r1, [pc, #88]	; (8007e64 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f001 ff1c 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8007e12:	f107 030c 	add.w	r3, r7, #12
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f002 fb1f 	bl	800a45c <_ZneRK12SimpleStringS1_>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d005      	beq.n	8007e30 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 8007e24:	6879      	ldr	r1, [r7, #4]
 8007e26:	4810      	ldr	r0, [pc, #64]	; (8007e68 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8007e28:	f000 ff70 	bl	8008d0c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	e000      	b.n	8007e32 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 8007e30:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8007e32:	617b      	str	r3, [r7, #20]
 8007e34:	f107 030c 	add.w	r3, r7, #12
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f002 fabe 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	33a8      	adds	r3, #168	; 0xa8
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6978      	ldr	r0, [r7, #20]
 8007e4a:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	33ac      	adds	r3, #172	; 0xac
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6978      	ldr	r0, [r7, #20]
 8007e56:	4798      	blx	r3
    return mock_support;
 8007e58:	697b      	ldr	r3, [r7, #20]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	08020c30 	.word	0x08020c30
 8007e68:	20000624 	.word	0x20000624

08007e6c <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 8007e76:	4a21      	ldr	r2, [pc, #132]	; (8007efc <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	605a      	str	r2, [r3, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	609a      	str	r2, [r3, #8]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	731a      	strb	r2, [r3, #12]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f103 0218 	add.w	r2, r3, #24
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	615a      	str	r2, [r3, #20]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3318      	adds	r3, #24
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff ff23 	bl	8007ce8 <_ZN19MockFailureReporterC1Ev>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3320      	adds	r3, #32
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f010 fefc 	bl	8018ca4 <_ZN21MockExpectedCallsListC1Ev>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	3330      	adds	r3, #48	; 0x30
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f014 fbe8 	bl	801c69c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	3338      	adds	r3, #56	; 0x38
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f014 faf2 	bl	801c4ba <_ZN18MockNamedValueListC1Ev>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	333c      	adds	r3, #60	; 0x3c
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f001 ff08 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 8007eea:	2100      	movs	r1, #0
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f894 	bl	800801a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	08023d28 	.word	0x08023d28

08007f00 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	4a0d      	ldr	r2, [pc, #52]	; (8007f40 <_ZN11MockSupportD1Ev+0x40>)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	333c      	adds	r3, #60	; 0x3c
 8007f12:	4618      	mov	r0, r3
 8007f14:	f002 fa51 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3330      	adds	r3, #48	; 0x30
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f014 fbd1 	bl	801c6c4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3320      	adds	r3, #32
 8007f26:	4618      	mov	r0, r3
 8007f28:	f010 fed0 	bl	8018ccc <_ZN21MockExpectedCallsListD1Ev>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3318      	adds	r3, #24
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7ff feed 	bl	8007d10 <_ZN19MockFailureReporterD1Ev>
{
}
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	08023d28 	.word	0x08023d28

08007f44 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
}
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff ffd7 	bl	8007f00 <_ZN11MockSupportD1Ev>
 8007f52:	2148      	movs	r1, #72	; 0x48
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7ff fac9 	bl	80074ec <_ZdlPvj>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	691a      	ldr	r2, [r3, #16]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3310      	adds	r3, #16
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	78f9      	ldrb	r1, [r7, #3]
 8007f80:	4610      	mov	r0, r2
 8007f82:	4798      	blx	r3
}
 8007f84:	bf00      	nop
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3318      	adds	r3, #24
 8007fa0:	e000      	b.n	8007fa4 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00a      	beq.n	8007fc6 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	33c8      	adds	r3, #200	; 0xc8
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	6952      	ldr	r2, [r2, #20]
 8007fc2:	4611      	mov	r1, r2
 8007fc4:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3338      	adds	r3, #56	; 0x38
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f014 fb0b 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8007fd0:	60f8      	str	r0, [r7, #12]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d01c      	beq.n	8008012 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 8007fd8:	68f9      	ldr	r1, [r7, #12]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 ff26 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	bf14      	ite	ne
 8007fe6:	2301      	movne	r3, #1
 8007fe8:	2300      	moveq	r3, #0
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00b      	beq.n	8008008 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 8007ff0:	68f9      	ldr	r1, [r7, #12]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 ff1a 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	32a4      	adds	r2, #164	; 0xa4
 8007ffe:	6812      	ldr	r2, [r2, #0]
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	6949      	ldr	r1, [r1, #20]
 8008004:	4618      	mov	r0, r3
 8008006:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f014 f9f5 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	e7df      	b.n	8007fd2 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 8008012:	bf00      	nop
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d102      	bne.n	8008030 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	e000      	b.n	8008032 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	6113      	str	r3, [r2, #16]
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3330      	adds	r3, #48	; 0x30
 800804e:	4618      	mov	r0, r3
 8008050:	f012 fb10 	bl	801a674 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800805c:	b590      	push	{r4, r7, lr}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3330      	adds	r3, #48	; 0x30
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	68b9      	ldr	r1, [r7, #8]
 8008070:	4618      	mov	r0, r3
 8008072:	f014 fb75 	bl	801c760 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3338      	adds	r3, #56	; 0x38
 800807a:	4618      	mov	r0, r3
 800807c:	f014 fab3 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8008080:	6178      	str	r0, [r7, #20]
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01c      	beq.n	80080c2 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 8008088:	6979      	ldr	r1, [r7, #20]
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 fece 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	bf14      	ite	ne
 8008096:	2301      	movne	r3, #1
 8008098:	2300      	moveq	r3, #0
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00b      	beq.n	80080b8 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 80080a0:	6979      	ldr	r1, [r7, #20]
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 fec2 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80080a8:	4603      	mov	r3, r0
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	32b0      	adds	r2, #176	; 0xb0
 80080ae:	6814      	ldr	r4, [r2, #0]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	68b9      	ldr	r1, [r7, #8]
 80080b4:	4618      	mov	r0, r3
 80080b6:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80080b8:	6978      	ldr	r0, [r7, #20]
 80080ba:	f014 f99d 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 80080be:	6178      	str	r0, [r7, #20]
 80080c0:	e7df      	b.n	8008082 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 80080c2:	bf00      	nop
 80080c4:	371c      	adds	r7, #28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd90      	pop	{r4, r7, pc}

080080ca <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 80080ca:	b590      	push	{r4, r7, lr}
 80080cc:	b087      	sub	sp, #28
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3330      	adds	r3, #48	; 0x30
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	68b9      	ldr	r1, [r7, #8]
 80080de:	4618      	mov	r0, r3
 80080e0:	f014 fb5a 	bl	801c798 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	3338      	adds	r3, #56	; 0x38
 80080e8:	4618      	mov	r0, r3
 80080ea:	f014 fa7c 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 80080ee:	6178      	str	r0, [r7, #20]
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d01c      	beq.n	8008130 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 80080f6:	6979      	ldr	r1, [r7, #20]
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fe97 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	bf14      	ite	ne
 8008104:	2301      	movne	r3, #1
 8008106:	2300      	moveq	r3, #0
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00b      	beq.n	8008126 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800810e:	6979      	ldr	r1, [r7, #20]
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 fe8b 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008116:	4603      	mov	r3, r0
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	32b4      	adds	r2, #180	; 0xb4
 800811c:	6814      	ldr	r4, [r2, #0]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	68b9      	ldr	r1, [r7, #8]
 8008122:	4618      	mov	r0, r3
 8008124:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008126:	6978      	ldr	r0, [r7, #20]
 8008128:	f014 f966 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 800812c:	6178      	str	r0, [r7, #20]
 800812e:	e7df      	b.n	80080f0 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 8008130:	bf00      	nop
 8008132:	371c      	adds	r7, #28
 8008134:	46bd      	mov	sp, r7
 8008136:	bd90      	pop	{r4, r7, pc}

08008138 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	3330      	adds	r3, #48	; 0x30
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	4618      	mov	r0, r3
 800814a:	f014 fb91 	bl	801c870 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3338      	adds	r3, #56	; 0x38
 8008152:	4618      	mov	r0, r3
 8008154:	f014 fa47 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01b      	beq.n	8008198 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 8008160:	68f9      	ldr	r1, [r7, #12]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fe62 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	bf14      	ite	ne
 800816e:	2301      	movne	r3, #1
 8008170:	2300      	moveq	r3, #0
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00a      	beq.n	800818e <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 8008178:	68f9      	ldr	r1, [r7, #12]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fe56 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008180:	4603      	mov	r3, r0
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	32b8      	adds	r2, #184	; 0xb8
 8008186:	6812      	ldr	r2, [r2, #0]
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	4618      	mov	r0, r3
 800818c:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f014 f932 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	e7e0      	b.n	800815a <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 8008198:	bf00      	nop
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3330      	adds	r3, #48	; 0x30
 80081ac:	4618      	mov	r0, r3
 80081ae:	f014 fab8 	bl	801c722 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3338      	adds	r3, #56	; 0x38
 80081b6:	4618      	mov	r0, r3
 80081b8:	f014 fa15 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d01a      	beq.n	80081fa <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 80081c4:	68f9      	ldr	r1, [r7, #12]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fe30 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	bf14      	ite	ne
 80081d2:	2301      	movne	r3, #1
 80081d4:	2300      	moveq	r3, #0
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d009      	beq.n	80081f0 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 80081dc:	68f9      	ldr	r1, [r7, #12]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fe24 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80081e4:	4603      	mov	r3, r0
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	32bc      	adds	r2, #188	; 0xbc
 80081ea:	6812      	ldr	r2, [r2, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f014 f901 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	e7e1      	b.n	80081be <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 80081fa:	bf00      	nop
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820e:	2b00      	cmp	r3, #0
 8008210:	d004      	beq.n	800821c <_ZN11MockSupport5clearEv+0x1a>
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	3204      	adds	r2, #4
 8008216:	6812      	ldr	r2, [r2, #0]
 8008218:	4618      	mov	r0, r3
 800821a:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800822a:	f00e fe0d 	bl	8016e48 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	3320      	adds	r3, #32
 8008232:	4618      	mov	r0, r3
 8008234:	f011 f937 	bl	80194a6 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	3338      	adds	r3, #56	; 0x38
 800825e:	4618      	mov	r0, r3
 8008260:	f014 f9c1 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01a      	beq.n	80082a2 <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800826c:	68f9      	ldr	r1, [r7, #12]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fddc 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008274:	60b8      	str	r0, [r7, #8]
        if (support) {
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00d      	beq.n	8008298 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	339c      	adds	r3, #156	; 0x9c
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68b8      	ldr	r0, [r7, #8]
 8008286:	4798      	blx	r3
            delete support;
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d004      	beq.n	8008298 <_ZN11MockSupport5clearEv+0x96>
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	3204      	adds	r2, #4
 8008292:	6812      	ldr	r2, [r2, #0]
 8008294:	4618      	mov	r0, r3
 8008296:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f014 f8ad 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	e7e1      	b.n	8008266 <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3338      	adds	r3, #56	; 0x38
 80082a6:	4618      	mov	r0, r3
 80082a8:	f014 f915 	bl	801c4d6 <_ZN18MockNamedValueList5clearEv>
}
 80082ac:	bf00      	nop
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	731a      	strb	r2, [r3, #12]
}
 80082c2:	bf00      	nop
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
	...

080082d0 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 80082d0:	b590      	push	{r4, r7, lr}
 80082d2:	b089      	sub	sp, #36	; 0x24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	333c      	adds	r3, #60	; 0x3c
 80082e0:	4618      	mov	r0, r3
 80082e2:	f002 f859 	bl	800a398 <_ZNK12SimpleString7isEmptyEv>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d004      	beq.n	80082f6 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 80082ec:	6879      	ldr	r1, [r7, #4]
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f001 fcff 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 80082f4:	e021      	b.n	800833a <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80082fc:	f107 0318 	add.w	r3, r7, #24
 8008300:	4910      	ldr	r1, [pc, #64]	; (8008344 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 8008302:	4618      	mov	r0, r3
 8008304:	f001 fca1 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8008308:	f107 0310 	add.w	r3, r7, #16
 800830c:	f107 0218 	add.w	r2, r7, #24
 8008310:	4621      	mov	r1, r4
 8008312:	4618      	mov	r0, r3
 8008314:	f002 f8b3 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f107 0110 	add.w	r1, r7, #16
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	4618      	mov	r0, r3
 8008322:	f002 f8ac 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 8008326:	f107 0310 	add.w	r3, r7, #16
 800832a:	4618      	mov	r0, r3
 800832c:	f002 f845 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8008330:	f107 0318 	add.w	r3, r7, #24
 8008334:	4618      	mov	r0, r3
 8008336:	f002 f840 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	3724      	adds	r7, #36	; 0x24
 800833e:	46bd      	mov	sp, r7
 8008340:	bd90      	pop	{r4, r7, pc}
 8008342:	bf00      	nop
 8008344:	08020c34 	.word	0x08020c34

08008348 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3314      	adds	r3, #20
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	2101      	movs	r1, #1
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	4798      	blx	r3
 8008362:	4603      	mov	r3, r0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3314      	adds	r3, #20
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	2100      	movs	r1, #0
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	4798      	blx	r3
}
 8008386:	bf00      	nop
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 8008390:	b590      	push	{r4, r7, lr}
 8008392:	b089      	sub	sp, #36	; 0x24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80083a2:	f083 0301 	eor.w	r3, r3, #1
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d003      	beq.n	80083b4 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 80083ac:	f010 fbf6 	bl	8018b9c <_ZN23MockIgnoredExpectedCall8instanceEv>
 80083b0:	4603      	mov	r3, r0
 80083b2:	e041      	b.n	8008438 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 fb1b 	bl	80089f0 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 80083ba:	22a5      	movs	r2, #165	; 0xa5
 80083bc:	4920      	ldr	r1, [pc, #128]	; (8008440 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 80083be:	2070      	movs	r0, #112	; 0x70
 80083c0:	f7ff f880 	bl	80074c4 <_ZnwjPKci>
 80083c4:	4604      	mov	r4, r0
 80083c6:	68b9      	ldr	r1, [r7, #8]
 80083c8:	4620      	mov	r0, r4
 80083ca:	f00f f8f3 	bl	80175b4 <_ZN23MockCheckedExpectedCallC1Ej>
 80083ce:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3308      	adds	r3, #8
 80083d6:	681c      	ldr	r4, [r3, #0]
 80083d8:	f107 0314 	add.w	r3, r7, #20
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	68f9      	ldr	r1, [r7, #12]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7ff ff75 	bl	80082d0 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 80083e6:	f107 0314 	add.w	r3, r7, #20
 80083ea:	4619      	mov	r1, r3
 80083ec:	69f8      	ldr	r0, [r7, #28]
 80083ee:	47a0      	blx	r4
 80083f0:	f107 0314 	add.w	r3, r7, #20
 80083f4:	4618      	mov	r0, r3
 80083f6:	f001 ffe0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	7b1b      	ldrb	r3, [r3, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d013      	beq.n	800842a <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3310      	adds	r3, #16
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	6892      	ldr	r2, [r2, #8]
 800840e:	1c50      	adds	r0, r2, #1
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	6891      	ldr	r1, [r2, #8]
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	440a      	add	r2, r1
 8008418:	4601      	mov	r1, r0
 800841a:	69f8      	ldr	r0, [r7, #28]
 800841c:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	689a      	ldr	r2, [r3, #8]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	441a      	add	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3320      	adds	r3, #32
 800842e:	69f9      	ldr	r1, [r7, #28]
 8008430:	4618      	mov	r0, r3
 8008432:	f010 fd89 	bl	8018f48 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 8008436:	69fb      	ldr	r3, [r7, #28]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3724      	adds	r7, #36	; 0x24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd90      	pop	{r4, r7, pc}
 8008440:	08020c38 	.word	0x08020c38

08008444 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 8008444:	b5b0      	push	{r4, r5, r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	605a      	str	r2, [r3, #4]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685d      	ldr	r5, [r3, #4]
 800845a:	22b1      	movs	r2, #177	; 0xb1
 800845c:	490a      	ldr	r1, [pc, #40]	; (8008488 <_ZN11MockSupport16createActualCallEv+0x44>)
 800845e:	202c      	movs	r0, #44	; 0x2c
 8008460:	f7ff f830 	bl	80074c4 <_ZnwjPKci>
 8008464:	4604      	mov	r4, r0
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	691a      	ldr	r2, [r3, #16]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	3320      	adds	r3, #32
 800846e:	4629      	mov	r1, r5
 8008470:	4620      	mov	r0, r4
 8008472:	f00c fbdb 	bl	8014c2c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bdb0      	pop	{r4, r5, r7, pc}
 8008486:	bf00      	nop
 8008488:	08020c38 	.word	0x08020c38

0800848c <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00d      	beq.n	80084bc <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3320      	adds	r3, #32
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f010 fd2a 	bl	8018f00 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 80084ac:	4603      	mov	r3, r0
 80084ae:	f083 0301 	eor.w	r3, r3, #1
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 80084b8:	2301      	movs	r3, #1
 80084ba:	e000      	b.n	80084be <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 80084c6:	b590      	push	{r4, r7, lr}
 80084c8:	b087      	sub	sp, #28
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 80084d0:	f107 030c 	add.w	r3, r7, #12
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	4618      	mov	r0, r3
 80084da:	f7ff fef9 	bl	80082d0 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d014      	beq.n	8008510 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	33c4      	adds	r3, #196	; 0xc4
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4610      	mov	r0, r2
 80084f6:	4798      	blx	r3
        delete lastActualFunctionCall_;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d004      	beq.n	800850a <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	3204      	adds	r2, #4
 8008504:	6812      	ldr	r2, [r2, #0]
 8008506:	4618      	mov	r0, r3
 8008508:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008516:	f083 0301 	eor.w	r3, r3, #1
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d004      	beq.n	800852a <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 8008520:	f00e fcbe 	bl	8016ea0 <_ZN21MockIgnoredActualCall8instanceEv>
 8008524:	4603      	mov	r3, r0
 8008526:	461c      	mov	r4, r3
 8008528:	e02f      	b.n	800858a <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 8008534:	f00e fc6e 	bl	8016e14 <_ZN19MockActualCallTrace8instanceEv>
 8008538:	4603      	mov	r3, r0
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	3208      	adds	r2, #8
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	f107 010c 	add.w	r1, r7, #12
 8008544:	4618      	mov	r0, r3
 8008546:	4790      	blx	r2
 8008548:	4604      	mov	r4, r0
 800854a:	e01e      	b.n	800858a <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800854c:	f107 030c 	add.w	r3, r7, #12
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7ff ff9a 	bl	800848c <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d004      	beq.n	8008568 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800855e:	f00e fc9f 	bl	8016ea0 <_ZN21MockIgnoredActualCall8instanceEv>
 8008562:	4603      	mov	r3, r0
 8008564:	461c      	mov	r4, r3
 8008566:	e010      	b.n	800858a <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	33c0      	adds	r3, #192	; 0xc0
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	4798      	blx	r3
 8008574:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3308      	adds	r3, #8
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f107 020c 	add.w	r2, r7, #12
 8008582:	4611      	mov	r1, r2
 8008584:	6978      	ldr	r0, [r7, #20]
 8008586:	4798      	blx	r3
    return *call;
 8008588:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800858a:	f107 030c 	add.w	r3, r7, #12
 800858e:	4618      	mov	r0, r3
 8008590:	f001 ff13 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8008594:	4623      	mov	r3, r4
}
 8008596:	4618      	mov	r0, r3
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	bd90      	pop	{r4, r7, pc}

0800859e <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3338      	adds	r3, #56	; 0x38
 80085b2:	4618      	mov	r0, r3
 80085b4:	f014 f817 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 80085b8:	60f8      	str	r0, [r7, #12]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01a      	beq.n	80085f6 <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 80085c0:	68f9      	ldr	r1, [r7, #12]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fc32 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	bf14      	ite	ne
 80085ce:	2301      	movne	r3, #1
 80085d0:	2300      	moveq	r3, #0
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d009      	beq.n	80085ec <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 80085d8:	68f9      	ldr	r1, [r7, #12]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fc26 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80085e0:	4603      	mov	r3, r0
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	3290      	adds	r2, #144	; 0x90
 80085e6:	6812      	ldr	r2, [r2, #0]
 80085e8:	4618      	mov	r0, r3
 80085ea:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f013 ff03 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	e7e1      	b.n	80085ba <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 80085f6:	bf00      	nop
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3338      	adds	r3, #56	; 0x38
 8008612:	4618      	mov	r0, r3
 8008614:	f013 ffe7 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01a      	beq.n	8008656 <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 8008620:	68f9      	ldr	r1, [r7, #12]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fc02 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	bf14      	ite	ne
 800862e:	2301      	movne	r3, #1
 8008630:	2300      	moveq	r3, #0
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d009      	beq.n	800864c <_ZN11MockSupport7disableEv+0x4e>
 8008638:	68f9      	ldr	r1, [r7, #12]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fbf6 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008640:	4603      	mov	r3, r0
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	3284      	adds	r2, #132	; 0x84
 8008646:	6812      	ldr	r2, [r2, #0]
 8008648:	4618      	mov	r0, r3
 800864a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f013 fed3 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	e7e1      	b.n	800861a <_ZN11MockSupport7disableEv+0x1c>
}
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3338      	adds	r3, #56	; 0x38
 8008672:	4618      	mov	r0, r3
 8008674:	f013 ffb7 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d01a      	beq.n	80086b6 <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 8008680:	68f9      	ldr	r1, [r7, #12]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fbd2 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	bf14      	ite	ne
 800868e:	2301      	movne	r3, #1
 8008690:	2300      	moveq	r3, #0
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b00      	cmp	r3, #0
 8008696:	d009      	beq.n	80086ac <_ZN11MockSupport6enableEv+0x4e>
 8008698:	68f9      	ldr	r1, [r7, #12]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fbc6 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80086a0:	4603      	mov	r3, r0
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	3288      	adds	r2, #136	; 0x88
 80086a6:	6812      	ldr	r2, [r2, #0]
 80086a8:	4618      	mov	r0, r3
 80086aa:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f013 fea3 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	e7e1      	b.n	800867a <_ZN11MockSupport6enableEv+0x1c>
}
 80086b6:	bf00      	nop
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	460b      	mov	r3, r1
 80086c8:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	78fa      	ldrb	r2, [r7, #3]
 80086ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	3338      	adds	r3, #56	; 0x38
 80086d6:	4618      	mov	r0, r3
 80086d8:	f013 ff85 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d01b      	beq.n	800871c <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 80086e4:	68f9      	ldr	r1, [r7, #12]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fba0 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bf14      	ite	ne
 80086f2:	2301      	movne	r3, #1
 80086f4:	2300      	moveq	r3, #0
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00a      	beq.n	8008712 <_ZN11MockSupport7tracingEb+0x54>
 80086fc:	68f9      	ldr	r1, [r7, #12]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fb94 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008704:	4603      	mov	r3, r0
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	328c      	adds	r2, #140	; 0x8c
 800870a:	6812      	ldr	r2, [r2, #0]
 800870c:	78f9      	ldrb	r1, [r7, #3]
 800870e:	4618      	mov	r0, r3
 8008710:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f013 fe70 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 8008718:	60f8      	str	r0, [r7, #12]
 800871a:	e7e0      	b.n	80086de <_ZN11MockSupport7tracingEb+0x20>
}
 800871c:	bf00      	nop
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3320      	adds	r3, #32
 8008730:	4618      	mov	r0, r3
 8008732:	f010 fbc1 	bl	8018eb8 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 8008736:	4603      	mov	r3, r0
 8008738:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	3338      	adds	r3, #56	; 0x38
 800873e:	4618      	mov	r0, r3
 8008740:	f013 ff51 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8008744:	60b8      	str	r0, [r7, #8]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d01f      	beq.n	800878c <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800874c:	68b9      	ldr	r1, [r7, #8]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fb6c 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	bf14      	ite	ne
 800875a:	2301      	movne	r3, #1
 800875c:	2300      	moveq	r3, #0
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00e      	beq.n	8008782 <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 8008764:	68b9      	ldr	r1, [r7, #8]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fb60 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800876c:	4603      	mov	r3, r0
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	3298      	adds	r2, #152	; 0x98
 8008772:	6812      	ldr	r2, [r2, #0]
 8008774:	4618      	mov	r0, r3
 8008776:	4790      	blx	r2
 8008778:	4603      	mov	r3, r0
 800877a:	461a      	mov	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008782:	68b8      	ldr	r0, [r7, #8]
 8008784:	f013 fe38 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 8008788:	60b8      	str	r0, [r7, #8]
 800878a:	e7dc      	b.n	8008746 <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	bf14      	ite	ne
 8008792:	2301      	movne	r3, #1
 8008794:	2300      	moveq	r3, #0
 8008796:	b2db      	uxtb	r3, r3
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d010      	beq.n	80087d2 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	33bc      	adds	r3, #188	; 0xbc
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4610      	mov	r0, r2
 80087c0:	4798      	blx	r3
 80087c2:	4603      	mov	r3, r0
 80087c4:	f083 0301 	eor.w	r3, r3, #1
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 80087ce:	2301      	movs	r3, #1
 80087d0:	e000      	b.n	80087d4 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 80087d2:	2300      	movs	r3, #0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 80087d8:	2300      	movs	r3, #0
 80087da:	e02a      	b.n	8008832 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3338      	adds	r3, #56	; 0x38
 80087e0:	4618      	mov	r0, r3
 80087e2:	f013 ff00 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d020      	beq.n	8008830 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 80087ee:	68f9      	ldr	r1, [r7, #12]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fb1b 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00f      	beq.n	800881c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 80087fc:	68f9      	ldr	r1, [r7, #12]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fb14 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008804:	4603      	mov	r3, r0
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff ffca 	bl	80087a0 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800880c:	4603      	mov	r3, r0
 800880e:	f083 0301 	eor.w	r3, r3, #1
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 8008818:	2301      	movs	r3, #1
 800881a:	e000      	b.n	800881e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800881c:	2300      	movs	r3, #0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 8008822:	2300      	movs	r3, #0
 8008824:	e005      	b.n	8008832 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f013 fde6 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 800882c:	60f8      	str	r0, [r7, #12]
 800882e:	e7db      	b.n	80087e8 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 8008830:	2301      	movs	r3, #1
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b092      	sub	sp, #72	; 0x48
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 8008842:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008846:	4618      	mov	r0, r3
 8008848:	f010 fa2c 	bl	8018ca4 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f103 0220 	add.w	r2, r3, #32
 8008852:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008856:	4611      	mov	r1, r2
 8008858:	4618      	mov	r0, r3
 800885a:	f010 fbf3 	bl	8019044 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	3338      	adds	r3, #56	; 0x38
 8008862:	4618      	mov	r0, r3
 8008864:	f013 febf 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8008868:	6478      	str	r0, [r7, #68]	; 0x44
 800886a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800886c:	2b00      	cmp	r3, #0
 800886e:	d01d      	beq.n	80088ac <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 8008870:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fada 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	bf14      	ite	ne
 800887e:	2301      	movne	r3, #1
 8008880:	2300      	moveq	r3, #0
 8008882:	b2db      	uxtb	r3, r3
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00c      	beq.n	80088a2 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 8008888:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 face 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008890:	4603      	mov	r3, r0
 8008892:	f103 0220 	add.w	r2, r3, #32
 8008896:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800889a:	4611      	mov	r1, r2
 800889c:	4618      	mov	r0, r3
 800889e:	f010 fbd1 	bl	8019044 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 80088a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80088a4:	f013 fda8 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 80088a8:	6478      	str	r0, [r7, #68]	; 0x44
 80088aa:	e7de      	b.n	800886a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	691a      	ldr	r2, [r3, #16]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	330c      	adds	r3, #12
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4610      	mov	r0, r2
 80088bc:	4798      	blx	r3
 80088be:	4601      	mov	r1, r0
 80088c0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80088c4:	f107 0308 	add.w	r3, r7, #8
 80088c8:	4618      	mov	r0, r3
 80088ca:	f011 f9f5 	bl	8019cb8 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	33c4      	adds	r3, #196	; 0xc4
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f107 0208 	add.w	r2, r7, #8
 80088da:	4611      	mov	r1, r2
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 80088e0:	f107 0308 	add.w	r3, r7, #8
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 fe6d 	bl	80095c4 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 80088ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80088ee:	4618      	mov	r0, r3
 80088f0:	f010 f9ec 	bl	8018ccc <_ZN21MockExpectedCallsListD1Ev>
}
 80088f4:	bf00      	nop
 80088f6:	3748      	adds	r7, #72	; 0x48
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b092      	sub	sp, #72	; 0x48
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 8008904:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008908:	4618      	mov	r0, r3
 800890a:	f010 f9cb 	bl	8018ca4 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f103 0220 	add.w	r2, r3, #32
 8008914:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008918:	4611      	mov	r1, r2
 800891a:	4618      	mov	r0, r3
 800891c:	f010 fb92 	bl	8019044 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	3338      	adds	r3, #56	; 0x38
 8008924:	4618      	mov	r0, r3
 8008926:	f013 fe5e 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 800892a:	6478      	str	r0, [r7, #68]	; 0x44
 800892c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800892e:	2b00      	cmp	r3, #0
 8008930:	d01d      	beq.n	800896e <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 8008932:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fa79 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	bf14      	ite	ne
 8008940:	2301      	movne	r3, #1
 8008942:	2300      	moveq	r3, #0
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00c      	beq.n	8008964 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800894a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fa6d 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008952:	4603      	mov	r3, r0
 8008954:	f103 0220 	add.w	r2, r3, #32
 8008958:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800895c:	4611      	mov	r1, r2
 800895e:	4618      	mov	r0, r3
 8008960:	f010 fb70 	bl	8019044 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8008964:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008966:	f013 fd47 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 800896a:	6478      	str	r0, [r7, #68]	; 0x44
 800896c:	e7de      	b.n	800892c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	691a      	ldr	r2, [r3, #16]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	330c      	adds	r3, #12
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4610      	mov	r0, r2
 800897e:	4798      	blx	r3
 8008980:	4601      	mov	r1, r0
 8008982:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008986:	f107 0308 	add.w	r3, r7, #8
 800898a:	4618      	mov	r0, r3
 800898c:	f011 fa38 	bl	8019e00 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	33c4      	adds	r3, #196	; 0xc4
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f107 0208 	add.w	r2, r7, #8
 800899c:	4611      	mov	r1, r2
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 80089a2:	f107 0308 	add.w	r3, r7, #8
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 fe2e 	bl	8009608 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 80089ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80089b0:	4618      	mov	r0, r3
 80089b2:	f010 f98b 	bl	8018ccc <_ZN21MockExpectedCallsListD1Ev>
}
 80089b6:	bf00      	nop
 80089b8:	3748      	adds	r7, #72	; 0x48
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b082      	sub	sp, #8
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	6039      	str	r1, [r7, #0]
    clear();
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	339c      	adds	r3, #156	; 0x9c
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	4798      	blx	r3
    activeReporter_->failTest(failure);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	691a      	ldr	r2, [r3, #16]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3308      	adds	r3, #8
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	4610      	mov	r0, r2
 80089e6:	4798      	blx	r3
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 80089f8:	f008 fd0a 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 80089fc:	4603      	mov	r3, r0
 80089fe:	4618      	mov	r0, r3
 8008a00:	f007 fb78 	bl	80100f4 <_ZN10UtestShell10countCheckEv>
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d008      	beq.n	8008a2e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	33c4      	adds	r3, #196	; 0xc4
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3338      	adds	r3, #56	; 0x38
 8008a32:	4618      	mov	r0, r3
 8008a34:	f013 fdd7 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8008a38:	60f8      	str	r0, [r7, #12]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d023      	beq.n	8008a88 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 8008a40:	68f9      	ldr	r1, [r7, #12]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f9f2 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d009      	beq.n	8008a62 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 8008a4e:	68f9      	ldr	r1, [r7, #12]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f9eb 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008a56:	4603      	mov	r3, r0
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e000      	b.n	8008a64 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 8008a62:	2300      	movs	r3, #0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00a      	beq.n	8008a7e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 8008a68:	68f9      	ldr	r1, [r7, #12]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f9de 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008a70:	4603      	mov	r3, r0
 8008a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	32c4      	adds	r2, #196	; 0xc4
 8008a78:	6812      	ldr	r2, [r2, #0]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f013 fcba 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	e7d8      	b.n	8008a3a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 8008a88:	bf00      	nop
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3320      	adds	r3, #32
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f010 f947 	bl	8018d30 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e027      	b.n	8008afc <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3338      	adds	r3, #56	; 0x38
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f013 fd98 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d01d      	beq.n	8008afa <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 8008abe:	68f9      	ldr	r1, [r7, #12]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f9b3 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00c      	beq.n	8008ae6 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 8008acc:	68f9      	ldr	r1, [r7, #12]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f9ac 	bl	8008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff ffda 	bl	8008a90 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e000      	b.n	8008ae8 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e005      	b.n	8008afc <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f013 fc81 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	e7de      	b.n	8008ab8 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff ff7d 	bl	8008a0c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7ff fe44 	bl	80087a0 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00a      	beq.n	8008b34 <_ZN11MockSupport17checkExpectationsEv+0x30>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3398      	adds	r3, #152	; 0x98
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	4798      	blx	r3
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <_ZN11MockSupport17checkExpectationsEv+0x30>
 8008b30:	2301      	movs	r3, #1
 8008b32:	e000      	b.n	8008b36 <_ZN11MockSupport17checkExpectationsEv+0x32>
 8008b34:	2300      	movs	r3, #0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7ff fe7d 	bl	800883a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7ff ffa5 	bl	8008a90 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7ff fed5 	bl	80088fc <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 8008b52:	bf00      	nop
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b082      	sub	sp, #8
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	3338      	adds	r3, #56	; 0x38
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f013 fd0c 	bl	801c588 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	bf14      	ite	ne
 8008b76:	2301      	movne	r3, #1
 8008b78:	2300      	moveq	r3, #0
 8008b7a:	b2db      	uxtb	r3, r3
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 8008b84:	b590      	push	{r4, r7, lr}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	3338      	adds	r3, #56	; 0x38
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f013 fcf7 	bl	801c588 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8008b9a:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d111      	bne.n	8008bc6 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 8008ba2:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008ba6:	490a      	ldr	r1, [pc, #40]	; (8008bd0 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 8008ba8:	2038      	movs	r0, #56	; 0x38
 8008baa:	f7fe fc8b 	bl	80074c4 <_ZnwjPKci>
 8008bae:	4604      	mov	r4, r0
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f011 fd6e 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
 8008bb8:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	3338      	adds	r3, #56	; 0x38
 8008bbe:	68f9      	ldr	r1, [r7, #12]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f013 fcab 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd90      	pop	{r4, r7, pc}
 8008bd0:	08020c38 	.word	0x08020c38

08008bd4 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
 8008be0:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 8008be2:	68b9      	ldr	r1, [r7, #8]
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7ff ffcd 	bl	8008b84 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 8008bea:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3344      	adds	r3, #68	; 0x44
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	6879      	ldr	r1, [r7, #4]
 8008bf8:	6978      	ldr	r0, [r7, #20]
 8008bfa:	4798      	blx	r3
}
 8008bfc:	bf00      	nop
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b088      	sub	sp, #32
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	3338      	adds	r3, #56	; 0x38
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f013 fcb6 	bl	801c588 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8008c1c:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d111      	bne.n	8008c48 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 8008c24:	f107 0314 	add.w	r3, r7, #20
 8008c28:	490b      	ldr	r1, [pc, #44]	; (8008c58 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f001 f80d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8008c30:	f107 0314 	add.w	r3, r7, #20
 8008c34:	4619      	mov	r1, r3
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f011 fd2c 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
 8008c3c:	f107 0314 	add.w	r3, r7, #20
 8008c40:	4618      	mov	r0, r3
 8008c42:	f001 fbba 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8008c46:	e003      	b.n	8008c50 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 8008c48:	69f9      	ldr	r1, [r7, #28]
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f7ff f8a2 	bl	8007d94 <_ZN14MockNamedValueC1ERKS_>
}
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	3720      	adds	r7, #32
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	08020c30 	.word	0x08020c30

08008c5c <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 8008c5c:	b590      	push	{r4, r7, lr}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 8008c66:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008c6a:	4927      	ldr	r1, [pc, #156]	; (8008d08 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 8008c6c:	2048      	movs	r0, #72	; 0x48
 8008c6e:	f7fe fc29 	bl	80074c4 <_ZnwjPKci>
 8008c72:	4604      	mov	r4, r0
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	4620      	mov	r0, r4
 8008c78:	f7ff f8f8 	bl	8007e6c <_ZN11MockSupportC1ERK12SimpleString>
 8008c7c:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	33a4      	adds	r3, #164	; 0xa4
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	6952      	ldr	r2, [r2, #20]
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d005      	beq.n	8008ca6 <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3390      	adds	r3, #144	; 0x90
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008cac:	f083 0301 	eor.w	r3, r3, #1
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d005      	beq.n	8008cc2 <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3384      	adds	r3, #132	; 0x84
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	7b1b      	ldrb	r3, [r3, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d005      	beq.n	8008cd6 <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3308      	adds	r3, #8
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	4798      	blx	r3

    newMock->tracing(tracing_);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	338c      	adds	r3, #140	; 0x8c
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	33b8      	adds	r3, #184	; 0xb8
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	3230      	adds	r2, #48	; 0x30
 8008cf6:	4611      	mov	r1, r2
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	4798      	blx	r3
    return newMock;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd90      	pop	{r4, r7, pc}
 8008d06:	bf00      	nop
 8008d08:	08020c38 	.word	0x08020c38

08008d0c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 8008d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d0e:	b0ab      	sub	sp, #172	; 0xac
 8008d10:	af04      	add	r7, sp, #16
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 8008d16:	f107 0308 	add.w	r3, r7, #8
 8008d1a:	4941      	ldr	r1, [pc, #260]	; (8008e20 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f000 ff94 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 8008d22:	f107 0308 	add.w	r3, r7, #8
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f001 fbc3 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 8008d2e:	f107 0308 	add.w	r3, r7, #8
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7ff ff10 	bl	8008b5a <_ZN11MockSupport7hasDataERK12SimpleString>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d048      	beq.n	8008dd2 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 8008d40:	f008 fb66 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8008d44:	4604      	mov	r4, r0
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	3324      	adds	r3, #36	; 0x24
 8008d4a:	681d      	ldr	r5, [r3, #0]
 8008d4c:	f107 0318 	add.w	r3, r7, #24
 8008d50:	f107 0208 	add.w	r2, r7, #8
 8008d54:	6879      	ldr	r1, [r7, #4]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7ff ff54 	bl	8008c04 <_ZN11MockSupport7getDataERK12SimpleString>
 8008d5c:	f107 0310 	add.w	r3, r7, #16
 8008d60:	f107 0218 	add.w	r2, r7, #24
 8008d64:	4611      	mov	r1, r2
 8008d66:	4618      	mov	r0, r3
 8008d68:	f011 ff61 	bl	801ac2e <_ZNK14MockNamedValue7getTypeEv>
 8008d6c:	f107 0310 	add.w	r3, r7, #16
 8008d70:	4618      	mov	r0, r3
 8008d72:	f001 faf5 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8008d76:	4606      	mov	r6, r0
 8008d78:	f008 fb5a 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	9302      	str	r3, [sp, #8]
 8008d80:	f240 13bd 	movw	r3, #445	; 0x1bd
 8008d84:	9301      	str	r3, [sp, #4]
 8008d86:	4b27      	ldr	r3, [pc, #156]	; (8008e24 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	4632      	mov	r2, r6
 8008d8e:	4926      	ldr	r1, [pc, #152]	; (8008e28 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 8008d90:	4620      	mov	r0, r4
 8008d92:	47a8      	blx	r5
 8008d94:	f107 0310 	add.w	r3, r7, #16
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f001 fb0e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8008d9e:	f107 0318 	add.w	r3, r7, #24
 8008da2:	4618      	mov	r0, r3
 8008da4:	f011 fca0 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 8008da8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008dac:	f107 0208 	add.w	r2, r7, #8
 8008db0:	6879      	ldr	r1, [r7, #4]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7ff ff26 	bl	8008c04 <_ZN11MockSupport7getDataERK12SimpleString>
 8008db8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f012 fa4f 	bl	801b260 <_ZNK14MockNamedValue16getObjectPointerEv>
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	bf00      	nop
 8008dc6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f011 fc8c 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 8008dd0:	e01b      	b.n	8008e0a <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff ff41 	bl	8008c5c <_ZN11MockSupport5cloneERK12SimpleString>
 8008dda:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 8008dde:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008de2:	4911      	ldr	r1, [pc, #68]	; (8008e28 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 ff30 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8008dea:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8008dee:	f107 0108 	add.w	r1, r7, #8
 8008df2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff feec 	bl	8008bd4 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 8008dfc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008e00:	4618      	mov	r0, r3
 8008e02:	f001 fada 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return newMock;
 8008e06:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 8008e0a:	f107 0308 	add.w	r3, r7, #8
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f001 fad3 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8008e14:	4623      	mov	r3, r4
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	379c      	adds	r7, #156	; 0x9c
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	08020c50 	.word	0x08020c50
 8008e24:	08020c38 	.word	0x08020c38
 8008e28:	08020c70 	.word	0x08020c70

08008e2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 8008e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e30:	b08b      	sub	sp, #44	; 0x2c
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 8008e38:	2500      	movs	r5, #0
 8008e3a:	2600      	movs	r6, #0
 8008e3c:	f107 0308 	add.w	r3, r7, #8
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f013 fb26 	bl	801c494 <_ZNK22MockNamedValueListNode7getTypeEv>
 8008e48:	f04f 0801 	mov.w	r8, #1
 8008e4c:	f107 0310 	add.w	r3, r7, #16
 8008e50:	492e      	ldr	r1, [pc, #184]	; (8008f0c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 fef9 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8008e58:	f04f 0901 	mov.w	r9, #1
 8008e5c:	f107 0210 	add.w	r2, r7, #16
 8008e60:	f107 0308 	add.w	r3, r7, #8
 8008e64:	4611      	mov	r1, r2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f001 fab3 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d01a      	beq.n	8008ea8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 8008e72:	f107 0318 	add.w	r3, r7, #24
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f013 faf8 	bl	801c46e <_ZNK22MockNamedValueListNode7getNameEv>
 8008e7e:	2501      	movs	r5, #1
 8008e80:	f107 0320 	add.w	r3, r7, #32
 8008e84:	4922      	ldr	r1, [pc, #136]	; (8008f10 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 fedf 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8008e8c:	2601      	movs	r6, #1
 8008e8e:	f107 0220 	add.w	r2, r7, #32
 8008e92:	f107 0318 	add.w	r3, r7, #24
 8008e96:	4611      	mov	r1, r2
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f000 ff54 	bl	8009d46 <_ZNK12SimpleString8containsERKS_>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 8008ea4:	2401      	movs	r4, #1
 8008ea6:	e000      	b.n	8008eaa <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 8008ea8:	2400      	movs	r4, #0
 8008eaa:	2e00      	cmp	r6, #0
 8008eac:	d004      	beq.n	8008eb8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 8008eae:	f107 0320 	add.w	r3, r7, #32
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f001 fa81 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8008eb8:	2d00      	cmp	r5, #0
 8008eba:	d004      	beq.n	8008ec6 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 8008ebc:	f107 0318 	add.w	r3, r7, #24
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f001 fa7a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8008ec6:	f1b9 0f00 	cmp.w	r9, #0
 8008eca:	d004      	beq.n	8008ed6 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 8008ecc:	f107 0310 	add.w	r3, r7, #16
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f001 fa72 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8008ed6:	f1b8 0f00 	cmp.w	r8, #0
 8008eda:	d004      	beq.n	8008ee6 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 8008edc:	f107 0308 	add.w	r3, r7, #8
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f001 fa6a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8008ee6:	2c00      	cmp	r4, #0
 8008ee8:	d00a      	beq.n	8008f00 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 8008eea:	6838      	ldr	r0, [r7, #0]
 8008eec:	f013 fa90 	bl	801c410 <_ZN22MockNamedValueListNode4itemEv>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	32a0      	adds	r2, #160	; 0xa0
 8008ef6:	6812      	ldr	r2, [r2, #0]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	4790      	blx	r2
 8008efc:	4603      	mov	r3, r0
 8008efe:	e000      	b.n	8008f02 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	372c      	adds	r7, #44	; 0x2c
 8008f06:	46bd      	mov	sp, r7
 8008f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f0c:	08020c70 	.word	0x08020c70
 8008f10:	08020c50 	.word	0x08020c50

08008f14 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00a      	beq.n	8008f3c <_ZN11MockSupport11returnValueEv+0x28>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3354      	adds	r3, #84	; 0x54
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	4610      	mov	r0, r2
 8008f38:	4798      	blx	r3
 8008f3a:	e010      	b.n	8008f5e <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 8008f3c:	f107 0308 	add.w	r3, r7, #8
 8008f40:	4909      	ldr	r1, [pc, #36]	; (8008f68 <_ZN11MockSupport11returnValueEv+0x54>)
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fe81 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8008f48:	f107 0308 	add.w	r3, r7, #8
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f011 fba0 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
 8008f54:	f107 0308 	add.w	r3, r7, #8
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f001 fa2e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	08020c30 	.word	0x08020c30

08008f6c <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 8008f6c:	b590      	push	{r4, r7, lr}
 8008f6e:	b091      	sub	sp, #68	; 0x44
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3320      	adds	r3, #32
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f107 0208 	add.w	r2, r7, #8
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	4610      	mov	r0, r2
 8008f84:	4798      	blx	r3
 8008f86:	f107 0308 	add.w	r3, r7, #8
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f011 fe5e 	bl	801ac4c <_ZNK14MockNamedValue12getBoolValueEv>
 8008f90:	4603      	mov	r3, r0
 8008f92:	461c      	mov	r4, r3
 8008f94:	bf00      	nop
 8008f96:	f107 0308 	add.w	r3, r7, #8
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f011 fba4 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 8008fa0:	4623      	mov	r3, r4
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3744      	adds	r7, #68	; 0x44
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd90      	pop	{r4, r7, pc}

08008faa <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 8008faa:	b590      	push	{r4, r7, lr}
 8008fac:	b091      	sub	sp, #68	; 0x44
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3320      	adds	r3, #32
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f107 0208 	add.w	r2, r7, #8
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	4798      	blx	r3
 8008fc4:	f107 0308 	add.w	r3, r7, #8
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f011 fe67 	bl	801ac9c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8008fce:	4604      	mov	r4, r0
 8008fd0:	bf00      	nop
 8008fd2:	f107 0308 	add.w	r3, r7, #8
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f011 fb86 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 8008fdc:	4623      	mov	r3, r4
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3744      	adds	r7, #68	; 0x44
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd90      	pop	{r4, r7, pc}

08008fe6 <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 8008fe6:	b590      	push	{r4, r7, lr}
 8008fe8:	b091      	sub	sp, #68	; 0x44
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3320      	adds	r3, #32
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f107 0208 	add.w	r2, r7, #8
 8008ffa:	6879      	ldr	r1, [r7, #4]
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	4798      	blx	r3
 8009000:	f107 0308 	add.w	r3, r7, #8
 8009004:	4618      	mov	r0, r3
 8009006:	f011 fe99 	bl	801ad3c <_ZNK14MockNamedValue11getIntValueEv>
 800900a:	4604      	mov	r4, r0
 800900c:	bf00      	nop
 800900e:	f107 0308 	add.w	r3, r7, #8
 8009012:	4618      	mov	r0, r3
 8009014:	f011 fb68 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 8009018:	4623      	mov	r3, r4
}
 800901a:	4618      	mov	r0, r3
 800901c:	3744      	adds	r7, #68	; 0x44
 800901e:	46bd      	mov	sp, r7
 8009020:	bd90      	pop	{r4, r7, pc}

08009022 <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b082      	sub	sp, #8
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	331c      	adds	r3, #28
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	4798      	blx	r3
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d007      	beq.n	800904e <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	335c      	adds	r3, #92	; 0x5c
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	4798      	blx	r3
 800904a:	4603      	mov	r3, r0
 800904c:	e000      	b.n	8009050 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800904e:	683b      	ldr	r3, [r7, #0]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	331c      	adds	r3, #28
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	4798      	blx	r3
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00a      	beq.n	800908c <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3368      	adds	r3, #104	; 0x68
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	4798      	blx	r3
 8009082:	eeb0 7a40 	vmov.f32	s14, s0
 8009086:	eef0 7a60 	vmov.f32	s15, s1
 800908a:	e001      	b.n	8009090 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800908c:	ed97 7b00 	vldr	d7, [r7]
}
 8009090:	eeb0 0a47 	vmov.f32	s0, s14
 8009094:	eef0 0a67 	vmov.f32	s1, s15
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b082      	sub	sp, #8
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	331c      	adds	r3, #28
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	4798      	blx	r3
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d007      	beq.n	80090ca <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3338      	adds	r3, #56	; 0x38
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	4798      	blx	r3
 80090c6:	4603      	mov	r3, r0
 80090c8:	e000      	b.n	80090cc <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 80090ca:	683b      	ldr	r3, [r7, #0]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	331c      	adds	r3, #28
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	4798      	blx	r3
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d007      	beq.n	8009102 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3324      	adds	r3, #36	; 0x24
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	4798      	blx	r3
 80090fe:	4603      	mov	r3, r0
 8009100:	e000      	b.n	8009104 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 8009102:	78fb      	ldrb	r3, [r7, #3]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	331c      	adds	r3, #28
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	4798      	blx	r3
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d007      	beq.n	8009138 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	332c      	adds	r3, #44	; 0x2c
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	4798      	blx	r3
 8009134:	4603      	mov	r3, r0
 8009136:	e000      	b.n	800913a <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 8009138:	683b      	ldr	r3, [r7, #0]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b082      	sub	sp, #8
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	331c      	adds	r3, #28
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	4798      	blx	r3
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d007      	beq.n	800916e <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3334      	adds	r3, #52	; 0x34
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	4798      	blx	r3
 800916a:	4603      	mov	r3, r0
 800916c:	e000      	b.n	8009170 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800916e:	683b      	ldr	r3, [r7, #0]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	331c      	adds	r3, #28
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	4798      	blx	r3
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d007      	beq.n	80091a4 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	3340      	adds	r3, #64	; 0x40
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	4798      	blx	r3
 80091a0:	4603      	mov	r3, r0
 80091a2:	e000      	b.n	80091a6 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 80091a4:	683b      	ldr	r3, [r7, #0]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 80091ae:	b590      	push	{r4, r7, lr}
 80091b0:	b091      	sub	sp, #68	; 0x44
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3320      	adds	r3, #32
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f107 0208 	add.w	r2, r7, #8
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	4610      	mov	r0, r2
 80091c6:	4798      	blx	r3
 80091c8:	f107 0308 	add.w	r3, r7, #8
 80091cc:	4618      	mov	r0, r3
 80091ce:	f011 fddd 	bl	801ad8c <_ZNK14MockNamedValue15getLongIntValueEv>
 80091d2:	4604      	mov	r4, r0
 80091d4:	bf00      	nop
 80091d6:	f107 0308 	add.w	r3, r7, #8
 80091da:	4618      	mov	r0, r3
 80091dc:	f011 fa84 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 80091e0:	4623      	mov	r3, r4
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3744      	adds	r7, #68	; 0x44
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd90      	pop	{r4, r7, pc}

080091ea <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 80091ea:	b590      	push	{r4, r7, lr}
 80091ec:	b091      	sub	sp, #68	; 0x44
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3320      	adds	r3, #32
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f107 0208 	add.w	r2, r7, #8
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	f107 0308 	add.w	r3, r7, #8
 8009208:	4618      	mov	r0, r3
 800920a:	f011 fe21 	bl	801ae50 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800920e:	4604      	mov	r4, r0
 8009210:	bf00      	nop
 8009212:	f107 0308 	add.w	r3, r7, #8
 8009216:	4618      	mov	r0, r3
 8009218:	f011 fa66 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 800921c:	4623      	mov	r3, r4
}
 800921e:	4618      	mov	r0, r3
 8009220:	3744      	adds	r7, #68	; 0x44
 8009222:	46bd      	mov	sp, r7
 8009224:	bd90      	pop	{r4, r7, pc}
	...

08009228 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 8009228:	b5b0      	push	{r4, r5, r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af02      	add	r7, sp, #8
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8009232:	f008 f8ed 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8009236:	4604      	mov	r4, r0
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	3368      	adds	r3, #104	; 0x68
 800923c:	681d      	ldr	r5, [r3, #0]
 800923e:	f008 f8f7 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009242:	4603      	mov	r3, r0
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	f240 2345 	movw	r3, #581	; 0x245
 800924a:	4a06      	ldr	r2, [pc, #24]	; (8009264 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800924c:	4906      	ldr	r1, [pc, #24]	; (8009268 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800924e:	4620      	mov	r0, r4
 8009250:	47a8      	blx	r5
    return cpputest_longlong(0);
 8009252:	2100      	movs	r1, #0
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7fe fd2f 	bl	8007cb8 <_ZN17cpputest_longlongC1Ei>
}
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bdb0      	pop	{r4, r5, r7, pc}
 8009262:	bf00      	nop
 8009264:	08020c38 	.word	0x08020c38
 8009268:	08020c7c 	.word	0x08020c7c

0800926c <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800926c:	b5b0      	push	{r4, r5, r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af02      	add	r7, sp, #8
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8009276:	f008 f8cb 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 800927a:	4604      	mov	r4, r0
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	3368      	adds	r3, #104	; 0x68
 8009280:	681d      	ldr	r5, [r3, #0]
 8009282:	f008 f8d5 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009286:	4603      	mov	r3, r0
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	f240 234b 	movw	r3, #587	; 0x24b
 800928e:	4a06      	ldr	r2, [pc, #24]	; (80092a8 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 8009290:	4906      	ldr	r1, [pc, #24]	; (80092ac <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 8009292:	4620      	mov	r0, r4
 8009294:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8009296:	2100      	movs	r1, #0
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7fe fd19 	bl	8007cd0 <_ZN18cpputest_ulonglongC1Ei>
}
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bdb0      	pop	{r4, r5, r7, pc}
 80092a6:	bf00      	nop
 80092a8:	08020c38 	.word	0x08020c38
 80092ac:	08020c9c 	.word	0x08020c9c

080092b0 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 80092b0:	b5b0      	push	{r4, r5, r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af02      	add	r7, sp, #8
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	4639      	mov	r1, r7
 80092bc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80092c0:	f008 f8a6 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 80092c4:	4604      	mov	r4, r0
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	3368      	adds	r3, #104	; 0x68
 80092ca:	681d      	ldr	r5, [r3, #0]
 80092cc:	f008 f8b0 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80092d0:	4603      	mov	r3, r0
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	f240 2351 	movw	r3, #593	; 0x251
 80092d8:	4a06      	ldr	r2, [pc, #24]	; (80092f4 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 80092da:	4907      	ldr	r1, [pc, #28]	; (80092f8 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 80092dc:	4620      	mov	r0, r4
 80092de:	47a8      	blx	r5
    return defaultValue;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	461a      	mov	r2, r3
 80092e4:	463b      	mov	r3, r7
 80092e6:	cb03      	ldmia	r3!, {r0, r1}
 80092e8:	6010      	str	r0, [r2, #0]
 80092ea:	6051      	str	r1, [r2, #4]
}
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bdb0      	pop	{r4, r5, r7, pc}
 80092f4:	08020c38 	.word	0x08020c38
 80092f8:	08020c7c 	.word	0x08020c7c

080092fc <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 80092fc:	b5b0      	push	{r4, r5, r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af02      	add	r7, sp, #8
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	4639      	mov	r1, r7
 8009308:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800930c:	f008 f880 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8009310:	4604      	mov	r4, r0
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	3368      	adds	r3, #104	; 0x68
 8009316:	681d      	ldr	r5, [r3, #0]
 8009318:	f008 f88a 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800931c:	4603      	mov	r3, r0
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	f240 2357 	movw	r3, #599	; 0x257
 8009324:	4a06      	ldr	r2, [pc, #24]	; (8009340 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8009326:	4907      	ldr	r1, [pc, #28]	; (8009344 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8009328:	4620      	mov	r0, r4
 800932a:	47a8      	blx	r5
    return defaultValue;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	461a      	mov	r2, r3
 8009330:	463b      	mov	r3, r7
 8009332:	cb03      	ldmia	r3!, {r0, r1}
 8009334:	6010      	str	r0, [r2, #0]
 8009336:	6051      	str	r1, [r2, #4]
}
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bdb0      	pop	{r4, r5, r7, pc}
 8009340:	08020c38 	.word	0x08020c38
 8009344:	08020c9c 	.word	0x08020c9c

08009348 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 8009348:	b590      	push	{r4, r7, lr}
 800934a:	b091      	sub	sp, #68	; 0x44
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3320      	adds	r3, #32
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f107 0208 	add.w	r2, r7, #8
 800935c:	6879      	ldr	r1, [r7, #4]
 800935e:	4610      	mov	r0, r2
 8009360:	4798      	blx	r3
 8009362:	f107 0308 	add.w	r3, r7, #8
 8009366:	4618      	mov	r0, r3
 8009368:	f011 fea6 	bl	801b0b8 <_ZNK14MockNamedValue14getStringValueEv>
 800936c:	4604      	mov	r4, r0
 800936e:	bf00      	nop
 8009370:	f107 0308 	add.w	r3, r7, #8
 8009374:	4618      	mov	r0, r3
 8009376:	f011 f9b7 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 800937a:	4623      	mov	r3, r4
}
 800937c:	4618      	mov	r0, r3
 800937e:	3744      	adds	r7, #68	; 0x44
 8009380:	46bd      	mov	sp, r7
 8009382:	bd90      	pop	{r4, r7, pc}

08009384 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 8009384:	b580      	push	{r7, lr}
 8009386:	ed2d 8b02 	vpush	{d8}
 800938a:	b090      	sub	sp, #64	; 0x40
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3320      	adds	r3, #32
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f107 0208 	add.w	r2, r7, #8
 800939c:	6879      	ldr	r1, [r7, #4]
 800939e:	4610      	mov	r0, r2
 80093a0:	4798      	blx	r3
 80093a2:	f107 0308 	add.w	r3, r7, #8
 80093a6:	4618      	mov	r0, r3
 80093a8:	f011 fe2a 	bl	801b000 <_ZNK14MockNamedValue14getDoubleValueEv>
 80093ac:	eeb0 8a40 	vmov.f32	s16, s0
 80093b0:	eef0 8a60 	vmov.f32	s17, s1
 80093b4:	bf00      	nop
 80093b6:	f107 0308 	add.w	r3, r7, #8
 80093ba:	4618      	mov	r0, r3
 80093bc:	f011 f994 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 80093c0:	eeb0 7a48 	vmov.f32	s14, s16
 80093c4:	eef0 7a68 	vmov.f32	s15, s17
}
 80093c8:	eeb0 0a47 	vmov.f32	s0, s14
 80093cc:	eef0 0a67 	vmov.f32	s1, s15
 80093d0:	3740      	adds	r7, #64	; 0x40
 80093d2:	46bd      	mov	sp, r7
 80093d4:	ecbd 8b02 	vpop	{d8}
 80093d8:	bd80      	pop	{r7, pc}

080093da <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b082      	sub	sp, #8
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	331c      	adds	r3, #28
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	4798      	blx	r3
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d007      	beq.n	8009406 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	336c      	adds	r3, #108	; 0x6c
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	4798      	blx	r3
 8009402:	4603      	mov	r3, r0
 8009404:	e000      	b.n	8009408 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 8009406:	683b      	ldr	r3, [r7, #0]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	331c      	adds	r3, #28
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	4798      	blx	r3
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d007      	beq.n	800943c <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3378      	adds	r3, #120	; 0x78
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	4798      	blx	r3
 8009438:	4603      	mov	r3, r0
 800943a:	e000      	b.n	800943e <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800943c:	683b      	ldr	r3, [r7, #0]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b082      	sub	sp, #8
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	331c      	adds	r3, #28
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	4798      	blx	r3
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d007      	beq.n	8009472 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3380      	adds	r3, #128	; 0x80
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	4798      	blx	r3
 800946e:	4603      	mov	r3, r0
 8009470:	e000      	b.n	8009474 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 8009472:	683b      	ldr	r3, [r7, #0]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800947c:	b590      	push	{r4, r7, lr}
 800947e:	b091      	sub	sp, #68	; 0x44
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3320      	adds	r3, #32
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f107 0208 	add.w	r2, r7, #8
 8009490:	6879      	ldr	r1, [r7, #4]
 8009492:	4610      	mov	r0, r2
 8009494:	4798      	blx	r3
 8009496:	f107 0308 	add.w	r3, r7, #8
 800949a:	4618      	mov	r0, r3
 800949c:	f011 fe34 	bl	801b108 <_ZNK14MockNamedValue15getPointerValueEv>
 80094a0:	4604      	mov	r4, r0
 80094a2:	bf00      	nop
 80094a4:	f107 0308 	add.w	r3, r7, #8
 80094a8:	4618      	mov	r0, r3
 80094aa:	f011 f91d 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 80094ae:	4623      	mov	r3, r4
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3744      	adds	r7, #68	; 0x44
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd90      	pop	{r4, r7, pc}

080094b8 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 80094b8:	b590      	push	{r4, r7, lr}
 80094ba:	b091      	sub	sp, #68	; 0x44
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3320      	adds	r3, #32
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f107 0208 	add.w	r2, r7, #8
 80094cc:	6879      	ldr	r1, [r7, #4]
 80094ce:	4610      	mov	r0, r2
 80094d0:	4798      	blx	r3
 80094d2:	f107 0308 	add.w	r3, r7, #8
 80094d6:	4618      	mov	r0, r3
 80094d8:	f011 fe3e 	bl	801b158 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80094dc:	4604      	mov	r4, r0
 80094de:	bf00      	nop
 80094e0:	f107 0308 	add.w	r3, r7, #8
 80094e4:	4618      	mov	r0, r3
 80094e6:	f011 f8ff 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 80094ea:	4623      	mov	r3, r4
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3744      	adds	r7, #68	; 0x44
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd90      	pop	{r4, r7, pc}

080094f4 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 80094f4:	b590      	push	{r4, r7, lr}
 80094f6:	b091      	sub	sp, #68	; 0x44
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3320      	adds	r3, #32
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f107 0208 	add.w	r2, r7, #8
 8009508:	6879      	ldr	r1, [r7, #4]
 800950a:	4610      	mov	r0, r2
 800950c:	4798      	blx	r3
 800950e:	f107 0308 	add.w	r3, r7, #8
 8009512:	4618      	mov	r0, r3
 8009514:	f011 fe48 	bl	801b1a8 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8009518:	4604      	mov	r4, r0
 800951a:	bf00      	nop
 800951c:	f107 0308 	add.w	r3, r7, #8
 8009520:	4618      	mov	r0, r3
 8009522:	f011 f8e1 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 8009526:	4623      	mov	r3, r4
}
 8009528:	4618      	mov	r0, r3
 800952a:	3744      	adds	r7, #68	; 0x44
 800952c:	46bd      	mov	sp, r7
 800952e:	bd90      	pop	{r4, r7, pc}

08009530 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00a      	beq.n	8009556 <_ZN11MockSupport14hasReturnValueEv+0x26>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3350      	adds	r3, #80	; 0x50
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4610      	mov	r0, r2
 8009550:	4798      	blx	r3
 8009552:	4603      	mov	r3, r0
 8009554:	e000      	b.n	8009558 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <_Z41__static_initialization_and_destruction_0ii>:
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d115      	bne.n	800959c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009576:	4293      	cmp	r3, r2
 8009578:	d110      	bne.n	800959c <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800957a:	f107 0308 	add.w	r3, r7, #8
 800957e:	490f      	ldr	r1, [pc, #60]	; (80095bc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8009580:	4618      	mov	r0, r3
 8009582:	f000 fb62 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8009586:	f107 0308 	add.w	r3, r7, #8
 800958a:	4619      	mov	r1, r3
 800958c:	480c      	ldr	r0, [pc, #48]	; (80095c0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800958e:	f7fe fc6d 	bl	8007e6c <_ZN11MockSupportC1ERK12SimpleString>
 8009592:	f107 0308 	add.w	r3, r7, #8
 8009596:	4618      	mov	r0, r3
 8009598:	f000 ff0f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d107      	bne.n	80095b2 <_Z41__static_initialization_and_destruction_0ii+0x52>
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d102      	bne.n	80095b2 <_Z41__static_initialization_and_destruction_0ii+0x52>
 80095ac:	4804      	ldr	r0, [pc, #16]	; (80095c0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80095ae:	f7fe fca7 	bl	8007f00 <_ZN11MockSupportD1Ev>
}
 80095b2:	bf00      	nop
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	08020c30 	.word	0x08020c30
 80095c0:	20000624 	.word	0x20000624

080095c4 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	4a05      	ldr	r2, [pc, #20]	; (80095e4 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fe fbbb 	bl	8007d50 <_ZN11MockFailureD1Ev>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	08023e24 	.word	0x08023e24

080095e8 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7ff ffe7 	bl	80095c4 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 80095f6:	2134      	movs	r1, #52	; 0x34
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7fd ff77 	bl	80074ec <_ZdlPvj>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	4a05      	ldr	r2, [pc, #20]	; (8009628 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4618      	mov	r0, r3
 800961a:	f7fe fb99 	bl	8007d50 <_ZN11MockFailureD1Ev>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	08023df8 	.word	0x08023df8

0800962c <_ZN20MockCallOrderFailureD0Ev>:
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff ffe7 	bl	8009608 <_ZN20MockCallOrderFailureD1Ev>
 800963a:	2134      	movs	r1, #52	; 0x34
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7fd ff55 	bl	80074ec <_ZdlPvj>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4618      	mov	r0, r3
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800964c:	b580      	push	{r7, lr}
 800964e:	af00      	add	r7, sp, #0
 8009650:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009654:	2001      	movs	r0, #1
 8009656:	f7ff ff83 	bl	8009560 <_Z41__static_initialization_and_destruction_0ii>
 800965a:	bd80      	pop	{r7, pc}

0800965c <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800965c:	b580      	push	{r7, lr}
 800965e:	af00      	add	r7, sp, #0
 8009660:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009664:	2000      	movs	r0, #0
 8009666:	f7ff ff7b 	bl	8009560 <_Z41__static_initialization_and_destruction_0ii>
 800966a:	bd80      	pop	{r7, pc}

0800966c <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 8009674:	4b05      	ldr	r3, [pc, #20]	; (800968c <_ZN11SimpleMutexC1Ev+0x20>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4798      	blx	r3
 800967a:	4602      	mov	r2, r0
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	601a      	str	r2, [r3, #0]
}
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4618      	mov	r0, r3
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	200000ec 	.word	0x200000ec

08009690 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 8009698:	4b05      	ldr	r3, [pc, #20]	; (80096b0 <_ZN11SimpleMutexD1Ev+0x20>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	6812      	ldr	r2, [r2, #0]
 80096a0:	4610      	mov	r0, r2
 80096a2:	4798      	blx	r3
}
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	200000f8 	.word	0x200000f8

080096b4 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 80096bc:	4b04      	ldr	r3, [pc, #16]	; (80096d0 <_ZN11SimpleMutex4LockEv+0x1c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	6812      	ldr	r2, [r2, #0]
 80096c4:	4610      	mov	r0, r2
 80096c6:	4798      	blx	r3
}
 80096c8:	bf00      	nop
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	200000f0 	.word	0x200000f0

080096d4 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 80096dc:	4b04      	ldr	r3, [pc, #16]	; (80096f0 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	6812      	ldr	r2, [r2, #0]
 80096e4:	4610      	mov	r0, r2
 80096e6:	4798      	blx	r3
}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	200000f4 	.word	0x200000f4

080096f4 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	683a      	ldr	r2, [r7, #0]
 8009702:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4618      	mov	r0, r3
 800970a:	f7ff ffd3 	bl	80096b4 <_ZN11SimpleMutex4LockEv>
}
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4618      	mov	r0, r3
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4618      	mov	r0, r3
 8009726:	f7ff ffd5 	bl	80096d4 <_ZN11SimpleMutex6UnlockEv>
}
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 8009734:	b580      	push	{r7, lr}
 8009736:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 8009738:	4b05      	ldr	r3, [pc, #20]	; (8009750 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d103      	bne.n	8009748 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 8009740:	f003 fd7a 	bl	800d238 <_Z24defaultNewArrayAllocatorv>
 8009744:	4603      	mov	r3, r0
 8009746:	e001      	b.n	800974c <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 8009748:	4b01      	ldr	r3, [pc, #4]	; (8009750 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800974a:	681b      	ldr	r3, [r3, #0]
}
 800974c:	4618      	mov	r0, r3
 800974e:	bd80      	pop	{r7, pc}
 8009750:	2000066c 	.word	0x2000066c

08009754 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 8009754:	b590      	push	{r4, r7, lr}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 8009760:	f7ff ffe8 	bl	8009734 <_ZN12SimpleString18getStringAllocatorEv>
 8009764:	6803      	ldr	r3, [r0, #0]
 8009766:	3308      	adds	r3, #8
 8009768:	681c      	ldr	r4, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68ba      	ldr	r2, [r7, #8]
 800976e:	68f9      	ldr	r1, [r7, #12]
 8009770:	47a0      	blx	r4
 8009772:	4603      	mov	r3, r0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3714      	adds	r7, #20
 8009778:	46bd      	mov	sp, r7
 800977a:	bd90      	pop	{r4, r7, pc}

0800977c <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800977c:	b590      	push	{r4, r7, lr}
 800977e:	b087      	sub	sp, #28
 8009780:	af02      	add	r7, sp, #8
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800978a:	f7ff ffd3 	bl	8009734 <_ZN12SimpleString18getStringAllocatorEv>
 800978e:	6803      	ldr	r3, [r0, #0]
 8009790:	330c      	adds	r3, #12
 8009792:	681c      	ldr	r4, [r3, #0]
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	68f9      	ldr	r1, [r7, #12]
 800979e:	47a0      	blx	r4
}
 80097a0:	bf00      	nop
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd90      	pop	{r4, r7, pc}

080097a8 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 80097b0:	2284      	movs	r2, #132	; 0x84
 80097b2:	4906      	ldr	r1, [pc, #24]	; (80097cc <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 80097b4:	2001      	movs	r0, #1
 80097b6:	f7ff ffcd 	bl	8009754 <_ZN12SimpleString17allocStringBufferEjPKcj>
 80097ba:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	701a      	strb	r2, [r3, #0]
    return empty;
 80097c2:	68fb      	ldr	r3, [r7, #12]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	08020cc8 	.word	0x08020cc8

080097d0 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	4618      	mov	r0, r3
 80097de:	f001 f809 	bl	800a7f4 <_ZN12SimpleString7isSpaceEc>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d003      	beq.n	80097f0 <_ZN12SimpleString4AtoUEPKc+0x20>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3301      	adds	r3, #1
 80097ec:	607b      	str	r3, [r7, #4]
 80097ee:	e7f3      	b.n	80097d8 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 ffe7 	bl	800a7cc <_ZN12SimpleString7isDigitEc>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d005      	beq.n	8009810 <_ZN12SimpleString4AtoUEPKc+0x40>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	2b2f      	cmp	r3, #47	; 0x2f
 800980a:	d901      	bls.n	8009810 <_ZN12SimpleString4AtoUEPKc+0x40>
 800980c:	2301      	movs	r3, #1
 800980e:	e000      	b.n	8009812 <_ZN12SimpleString4AtoUEPKc+0x42>
 8009810:	2300      	movs	r3, #0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d010      	beq.n	8009838 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	4613      	mov	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	005b      	lsls	r3, r3, #1
 8009820:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	4413      	add	r3, r2
 800982c:	3b30      	subs	r3, #48	; 0x30
 800982e:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3301      	adds	r3, #1
 8009834:	607b      	str	r3, [r7, #4]
 8009836:	e7dd      	b.n	80097f4 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 8009838:	68fb      	ldr	r3, [r7, #12]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 ffd0 	bl	800a7f4 <_ZN12SimpleString7isSpaceEc>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d003      	beq.n	8009862 <_ZN12SimpleString4AtoIEPKc+0x20>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	3301      	adds	r3, #1
 800985e:	607b      	str	r3, [r7, #4]
 8009860:	e7f3      	b.n	800984a <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 8009868:	7afb      	ldrb	r3, [r7, #11]
 800986a:	2b2d      	cmp	r3, #45	; 0x2d
 800986c:	d002      	beq.n	8009874 <_ZN12SimpleString4AtoIEPKc+0x32>
 800986e:	7afb      	ldrb	r3, [r7, #11]
 8009870:	2b2b      	cmp	r3, #43	; 0x2b
 8009872:	d102      	bne.n	800987a <_ZN12SimpleString4AtoIEPKc+0x38>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	3301      	adds	r3, #1
 8009878:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	4618      	mov	r0, r3
 8009884:	f000 ffa2 	bl	800a7cc <_ZN12SimpleString7isDigitEc>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00f      	beq.n	80098ae <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	4613      	mov	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	3b30      	subs	r3, #48	; 0x30
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	4413      	add	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	3301      	adds	r3, #1
 80098aa:	607b      	str	r3, [r7, #4]
 80098ac:	e7e7      	b.n	800987e <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 80098ae:	7afb      	ldrb	r3, [r7, #11]
 80098b0:	2b2d      	cmp	r3, #45	; 0x2d
 80098b2:	d102      	bne.n	80098ba <_ZN12SimpleString4AtoIEPKc+0x78>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	425b      	negs	r3, r3
 80098b8:	e000      	b.n	80098bc <_ZN12SimpleString4AtoIEPKc+0x7a>
 80098ba:	68fb      	ldr	r3, [r7, #12]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00c      	beq.n	80098f0 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	781a      	ldrb	r2, [r3, #0]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d106      	bne.n	80098f0 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	3301      	adds	r3, #1
 80098e6:	607b      	str	r3, [r7, #4]
       ++s2;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	3301      	adds	r3, #1
 80098ec:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 80098ee:	e7ee      	b.n	80098ce <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	461a      	mov	r2, r3
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	1ad3      	subs	r3, r2, r3
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 8009910:	f04f 33ff 	mov.w	r3, #4294967295
 8009914:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3301      	adds	r3, #1
 800991a:	60fb      	str	r3, [r7, #12]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	1c5a      	adds	r2, r3, #1
 8009920:	607a      	str	r2, [r7, #4]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	bf14      	ite	ne
 8009928:	2301      	movne	r3, #1
 800992a:	2300      	moveq	r3, #0
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d000      	beq.n	8009934 <_ZN12SimpleString6StrLenEPKc+0x2c>
 8009932:	e7f0      	b.n	8009916 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 8009934:	68fb      	ldr	r3, [r7, #12]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3714      	adds	r7, #20
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 8009942:	b480      	push	{r7}
 8009944:	b085      	sub	sp, #20
 8009946:	af00      	add	r7, sp, #0
 8009948:	60f8      	str	r0, [r7, #12]
 800994a:	60b9      	str	r1, [r7, #8]
 800994c:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d013      	beq.n	800997c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00f      	beq.n	800997c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	781a      	ldrb	r2, [r3, #0]
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	429a      	cmp	r2, r3
 8009966:	d109      	bne.n	800997c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3b01      	subs	r3, #1
 800996c:	607b      	str	r3, [r7, #4]
        ++s1;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3301      	adds	r3, #1
 8009972:	60fb      	str	r3, [r7, #12]
        ++s2;
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	3301      	adds	r3, #1
 8009978:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800997a:	e7e8      	b.n	800994e <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d006      	beq.n	8009990 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	1ad3      	subs	r3, r2, r3
 800998e:	e000      	b.n	8009992 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800999e:	b480      	push	{r7}
 80099a0:	b087      	sub	sp, #28
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	607a      	str	r2, [r7, #4]
    char* result = s1;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d101      	bne.n	80099be <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	e01e      	b.n	80099fc <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	781a      	ldrb	r2, [r3, #0]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	607b      	str	r3, [r7, #4]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d005      	beq.n	80099de <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 80099da:	2301      	movs	r3, #1
 80099dc:	e000      	b.n	80099e0 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 80099de:	2300      	movs	r3, #0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00a      	beq.n	80099fa <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	3301      	adds	r3, #1
 80099e8:	60bb      	str	r3, [r7, #8]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	3301      	adds	r3, #1
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	781a      	ldrb	r2, [r3, #0]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 80099f8:	e7e5      	b.n	80099c6 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 80099fa:	697b      	ldr	r3, [r7, #20]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	371c      	adds	r7, #28
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d101      	bne.n	8009a1e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	e01b      	b.n	8009a56 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d016      	beq.n	8009a54 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 8009a26:	6838      	ldr	r0, [r7, #0]
 8009a28:	f7ff ff6e 	bl	8009908 <_ZN12SimpleString6StrLenEPKc>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	461a      	mov	r2, r3
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff ff85 	bl	8009942 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	bf0c      	ite	eq
 8009a3e:	2301      	moveq	r3, #1
 8009a40:	2300      	movne	r3, #0
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	e004      	b.n	8009a56 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	607b      	str	r3, [r7, #4]
 8009a52:	e7e4      	b.n	8009a1e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b082      	sub	sp, #8
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	4603      	mov	r3, r0
 8009a66:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 8009a68:	79fb      	ldrb	r3, [r7, #7]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 fed9 	bl	800a822 <_ZN12SimpleString7isUpperEc>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <_ZN12SimpleString7ToLowerEc+0x20>
 8009a76:	79fb      	ldrb	r3, [r7, #7]
 8009a78:	3320      	adds	r3, #32
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	e000      	b.n	8009a80 <_ZN12SimpleString7ToLowerEc+0x22>
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	613b      	str	r3, [r7, #16]

    while (n--)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	1e5a      	subs	r2, r3, #1
 8009aa0:	607a      	str	r2, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	bf14      	ite	ne
 8009aa6:	2301      	movne	r3, #1
 8009aa8:	2300      	moveq	r3, #0
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d013      	beq.n	8009ad8 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	781a      	ldrb	r2, [r3, #0]
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d006      	beq.n	8009aca <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	e007      	b.n	8009ada <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	3301      	adds	r3, #1
 8009ace:	617b      	str	r3, [r7, #20]
            ++p2;
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	613b      	str	r3, [r7, #16]
    while (n--)
 8009ad6:	e7e1      	b.n	8009a9c <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	371c      	adds	r7, #28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
	...

08009ae8 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00d      	beq.n	8009b14 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6818      	ldr	r0, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6859      	ldr	r1, [r3, #4]
 8009b00:	23ee      	movs	r3, #238	; 0xee
 8009b02:	4a06      	ldr	r2, [pc, #24]	; (8009b1c <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 8009b04:	f7ff fe3a 	bl	800977c <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	605a      	str	r2, [r3, #4]
    }
}
 8009b14:	bf00      	nop
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	08020cc8 	.word	0x08020cc8

08009b20 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7ff ffdd 	bl	8009ae8 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7ff fe37 	bl	80097a8 <_ZNK12SimpleString14getEmptyStringEv>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	601a      	str	r2, [r3, #0]
}
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f7ff ffc7 	bl	8009ae8 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	4619      	mov	r1, r3
 8009b66:	68b8      	ldr	r0, [r7, #8]
 8009b68:	f000 fe12 	bl	800a790 <_ZN12SimpleString15copyToNewBufferEPKcj>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	601a      	str	r2, [r3, #0]
}
 8009b72:	bf00      	nop
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
	...

08009b7c <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff ffae 	bl	8009ae8 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	f240 1209 	movw	r2, #265	; 0x109
 8009b9a:	4907      	ldr	r1, [pc, #28]	; (8009bb8 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff fdd9 	bl	8009754 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2200      	movs	r2, #0
 8009bae:	701a      	strb	r2, [r3, #0]
}
 8009bb0:	bf00      	nop
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	08020cc8 	.word	0x08020cc8

08009bbc <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff ff8d 	bl	8009ae8 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	601a      	str	r2, [r3, #0]
}
 8009bda:	bf00      	nop
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 8009be2:	b590      	push	{r4, r7, lr}
 8009be4:	b083      	sub	sp, #12
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	681c      	ldr	r4, [r3, #0]
 8009bf0:	6838      	ldr	r0, [r7, #0]
 8009bf2:	f000 fbc1 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7ff ffa2 	bl	8009b48 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd90      	pop	{r4, r7, pc}

08009c0c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 8009c16:	6838      	ldr	r0, [r7, #0]
 8009c18:	f7ff fe76 	bl	8009908 <_ZN12SimpleString6StrLenEPKc>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	3301      	adds	r3, #1
 8009c20:	461a      	mov	r2, r3
 8009c22:	6839      	ldr	r1, [r7, #0]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff ff8f 	bl	8009b48 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 8009c2a:	bf00      	nop
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 8009c32:	b480      	push	{r7}
 8009c34:	b083      	sub	sp, #12
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
    return buffer_;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b082      	sub	sp, #8
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	601a      	str	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d103      	bne.n	8009c6e <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7ff ff5a 	bl	8009b20 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 8009c6c:	e003      	b.n	8009c76 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff ffcb 	bl	8009c0c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b088      	sub	sp, #32
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 8009c98:	68b8      	ldr	r0, [r7, #8]
 8009c9a:	f7ff fe35 	bl	8009908 <_ZN12SimpleString6StrLenEPKc>
 8009c9e:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	fb02 f303 	mul.w	r3, r2, r3
 8009ca8:	3301      	adds	r3, #1
 8009caa:	4619      	mov	r1, r3
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f7ff ff65 	bl	8009b7c <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 8009cb8:	2300      	movs	r3, #0
 8009cba:	61bb      	str	r3, [r7, #24]
 8009cbc:	69ba      	ldr	r2, [r7, #24]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d20e      	bcs.n	8009ce2 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	461a      	mov	r2, r3
 8009cca:	68b9      	ldr	r1, [r7, #8]
 8009ccc:	69f8      	ldr	r0, [r7, #28]
 8009cce:	f7ff fe66 	bl	800999e <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 8009cd2:	69fa      	ldr	r2, [r7, #28]
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	61bb      	str	r3, [r7, #24]
 8009ce0:	e7ec      	b.n	8009cbc <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	701a      	strb	r2, [r3, #0]
}
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	4618      	mov	r0, r3
 8009cec:	3720      	adds	r7, #32
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b082      	sub	sp, #8
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	601a      	str	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 8009d08:	6838      	ldr	r0, [r7, #0]
 8009d0a:	f7ff ff92 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7ff ff7a 	bl	8009c0c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b082      	sub	sp, #8
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	6039      	str	r1, [r7, #0]
    if (this != &other)
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d003      	beq.n	8009d3c <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7ff ff53 	bl	8009be2 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 8009d3c:	687b      	ldr	r3, [r7, #4]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3708      	adds	r7, #8
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 8009d46:	b590      	push	{r4, r7, lr}
 8009d48:	b083      	sub	sp, #12
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7ff ff6e 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 8009d56:	4604      	mov	r4, r0
 8009d58:	6838      	ldr	r0, [r7, #0]
 8009d5a:	f7ff ff6a 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	4619      	mov	r1, r3
 8009d62:	4620      	mov	r0, r4
 8009d64:	f7ff fe50 	bl	8009a08 <_ZN12SimpleString6StrStrEPKcS1_>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	bf14      	ite	ne
 8009d6e:	2301      	movne	r3, #1
 8009d70:	2300      	moveq	r3, #0
 8009d72:	b2db      	uxtb	r3, r3
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd90      	pop	{r4, r7, pc}

08009d7c <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 8009d7c:	b590      	push	{r4, r7, lr}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 8009d86:	f107 0308 	add.w	r3, r7, #8
 8009d8a:	6879      	ldr	r1, [r7, #4]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f000 fabb 	bl	800a308 <_ZNK12SimpleString9lowerCaseEv>
 8009d92:	f107 0310 	add.w	r3, r7, #16
 8009d96:	6839      	ldr	r1, [r7, #0]
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 fab5 	bl	800a308 <_ZNK12SimpleString9lowerCaseEv>
 8009d9e:	f107 0210 	add.w	r2, r7, #16
 8009da2:	f107 0308 	add.w	r3, r7, #8
 8009da6:	4611      	mov	r1, r2
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7ff ffcc 	bl	8009d46 <_ZNK12SimpleString8containsERKS_>
 8009dae:	4603      	mov	r3, r0
 8009db0:	461c      	mov	r4, r3
 8009db2:	bf00      	nop
 8009db4:	f107 0310 	add.w	r3, r7, #16
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 fafe 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8009dbe:	f107 0308 	add.w	r3, r7, #8
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 faf9 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8009dc8:	4623      	mov	r3, r4
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	371c      	adds	r7, #28
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd90      	pop	{r4, r7, pc}

08009dd2 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 8009dd2:	b590      	push	{r4, r7, lr}
 8009dd4:	b083      	sub	sp, #12
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 8009ddc:	6838      	ldr	r0, [r7, #0]
 8009dde:	f000 facb 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	bf0c      	ite	eq
 8009de8:	2301      	moveq	r3, #1
 8009dea:	2300      	movne	r3, #0
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <_ZNK12SimpleString10startsWithERKS_+0x24>
 8009df2:	2301      	movs	r3, #1
 8009df4:	e022      	b.n	8009e3c <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fabe 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	bf0c      	ite	eq
 8009e02:	2301      	moveq	r3, #1
 8009e04:	2300      	movne	r3, #0
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	e015      	b.n	8009e3c <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f7ff ff0e 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 8009e16:	4604      	mov	r4, r0
 8009e18:	6838      	ldr	r0, [r7, #0]
 8009e1a:	f7ff ff0a 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	4619      	mov	r1, r3
 8009e22:	4620      	mov	r0, r4
 8009e24:	f7ff fdf0 	bl	8009a08 <_ZN12SimpleString6StrStrEPKcS1_>
 8009e28:	4604      	mov	r4, r0
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7ff ff01 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 8009e30:	4603      	mov	r3, r0
 8009e32:	429c      	cmp	r4, r3
 8009e34:	bf0c      	ite	eq
 8009e36:	2301      	moveq	r3, #1
 8009e38:	2300      	movne	r3, #0
 8009e3a:	b2db      	uxtb	r3, r3
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd90      	pop	{r4, r7, pc}

08009e44 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 8009e44:	b590      	push	{r4, r7, lr}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
    size_t length = size();
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fa92 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 8009e54:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 8009e56:	6838      	ldr	r0, [r7, #0]
 8009e58:	f000 fa8e 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 8009e5c:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <_ZNK12SimpleString8endsWithERKS_+0x24>
 8009e64:	2301      	movs	r3, #1
 8009e66:	e020      	b.n	8009eaa <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e01b      	b.n	8009eaa <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d201      	bcs.n	8009e7e <_ZNK12SimpleString8endsWithERKS_+0x3a>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	e015      	b.n	8009eaa <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7ff fed7 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 8009e84:	4601      	mov	r1, r0
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	18cc      	adds	r4, r1, r3
 8009e8e:	6838      	ldr	r0, [r7, #0]
 8009e90:	f7ff fecf 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 8009e94:	4603      	mov	r3, r0
 8009e96:	4619      	mov	r1, r3
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f7ff fd13 	bl	80098c4 <_ZN12SimpleString6StrCmpEPKcS1_>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	bf0c      	ite	eq
 8009ea4:	2301      	moveq	r3, #1
 8009ea6:	2300      	movne	r3, #0
 8009ea8:	b2db      	uxtb	r3, r3
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3714      	adds	r7, #20
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd90      	pop	{r4, r7, pc}

08009eb2 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b086      	sub	sp, #24
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7ff feb6 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 8009ec6:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60fb      	str	r3, [r7, #12]
    if (*str){
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d008      	beq.n	8009ee6 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 8009ed4:	6838      	ldr	r0, [r7, #0]
 8009ed6:	f7ff feac 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 8009eda:	4603      	mov	r3, r0
 8009edc:	4619      	mov	r1, r3
 8009ede:	6938      	ldr	r0, [r7, #16]
 8009ee0:	f7ff fd92 	bl	8009a08 <_ZN12SimpleString6StrStrEPKcS1_>
 8009ee4:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d014      	beq.n	8009f18 <_ZNK12SimpleString5countERKS_+0x66>
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d011      	beq.n	8009f18 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	613b      	str	r3, [r7, #16]
        str++;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	3301      	adds	r3, #1
 8009efc:	613b      	str	r3, [r7, #16]
        num++;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	3301      	adds	r3, #1
 8009f02:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 8009f04:	6838      	ldr	r0, [r7, #0]
 8009f06:	f7ff fe94 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6938      	ldr	r0, [r7, #16]
 8009f10:	f7ff fd7a 	bl	8009a08 <_ZN12SimpleString6StrStrEPKcS1_>
 8009f14:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 8009f16:	e7e6      	b.n	8009ee6 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 8009f18:	697b      	ldr	r3, [r7, #20]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3718      	adds	r7, #24
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 8009f22:	b590      	push	{r4, r7, lr}
 8009f24:	b091      	sub	sp, #68	; 0x44
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	60f8      	str	r0, [r7, #12]
 8009f2a:	60b9      	str	r1, [r7, #8]
 8009f2c:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 8009f2e:	68b9      	ldr	r1, [r7, #8]
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f7ff ffbe 	bl	8009eb2 <_ZNK12SimpleString5countERKS_>
 8009f36:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 8009f38:	68b9      	ldr	r1, [r7, #8]
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f7ff ff82 	bl	8009e44 <_ZNK12SimpleString8endsWithERKS_>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 8009f46:	2300      	movs	r3, #0
 8009f48:	e000      	b.n	8009f4c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 8009f4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f52:	4413      	add	r3, r2
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f001 f95c 	bl	800b214 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7ff fe68 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 8009f62:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 8009f64:	2300      	movs	r3, #0
 8009f66:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d235      	bcs.n	8009fdc <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 8009f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 8009f74:	68b8      	ldr	r0, [r7, #8]
 8009f76:	f7ff fe5c 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009f80:	f7ff fd42 	bl	8009a08 <_ZN12SimpleString6StrStrEPKcS1_>
 8009f84:	4603      	mov	r3, r0
 8009f86:	3301      	adds	r3, #1
 8009f88:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 8009f8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f001 f9db 	bl	800b348 <_ZN22SimpleStringCollectionixEj>
 8009f92:	4604      	mov	r4, r0
 8009f94:	f107 031c 	add.w	r3, r7, #28
 8009f98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7ff fe55 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8009fa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	f107 0014 	add.w	r0, r7, #20
 8009faa:	f107 011c 	add.w	r1, r7, #28
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f000 fb0c 	bl	800a5cc <_ZNK12SimpleString9subStringEjj>
 8009fb4:	f107 0314 	add.w	r3, r7, #20
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f7ff feb1 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 8009fc0:	f107 0314 	add.w	r3, r7, #20
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f000 f9f8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8009fca:	f107 031c 	add.w	r3, r7, #28
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 f9f3 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fda:	e7c5      	b.n	8009f68 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d015      	beq.n	800a00e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 8009fe2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f001 f9af 	bl	800b348 <_ZN22SimpleStringCollectionixEj>
 8009fea:	4604      	mov	r4, r0
 8009fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ff0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7ff fe29 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8009ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	4620      	mov	r0, r4
 800a000:	f7ff fe8f 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800a004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 f9d6 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    }
}
 800a00e:	bf00      	nop
 800a010:	3744      	adds	r7, #68	; 0x44
 800a012:	46bd      	mov	sp, r7
 800a014:	bd90      	pop	{r4, r7, pc}

0800a016 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b084      	sub	sp, #16
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
 800a01e:	460b      	mov	r3, r1
 800a020:	70fb      	strb	r3, [r7, #3]
 800a022:	4613      	mov	r3, r2
 800a024:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f9a6 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800a02c:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800a02e:	2300      	movs	r3, #0
 800a030:	60fb      	str	r3, [r7, #12]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	429a      	cmp	r2, r3
 800a038:	d218      	bcs.n	800a06c <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7ff fdf9 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 800a040:	4602      	mov	r2, r0
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	4413      	add	r3, r2
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	78fa      	ldrb	r2, [r7, #3]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	bf0c      	ite	eq
 800a04e:	2301      	moveq	r3, #1
 800a050:	2300      	movne	r3, #0
 800a052:	b2db      	uxtb	r3, r3
 800a054:	2b00      	cmp	r3, #0
 800a056:	d005      	beq.n	800a064 <_ZN12SimpleString7replaceEcc+0x4e>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4413      	add	r3, r2
 800a060:	78ba      	ldrb	r2, [r7, #2]
 800a062:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3301      	adds	r3, #1
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	e7e2      	b.n	800a032 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800a06c:	bf00      	nop
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08e      	sub	sp, #56	; 0x38
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800a080:	f107 0310 	add.w	r3, r7, #16
 800a084:	68b9      	ldr	r1, [r7, #8]
 800a086:	4618      	mov	r0, r3
 800a088:	f7ff fddf 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800a08c:	f107 0310 	add.w	r3, r7, #16
 800a090:	4619      	mov	r1, r3
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f7ff ff0d 	bl	8009eb2 <_ZNK12SimpleString5countERKS_>
 800a098:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a09a:	f107 0310 	add.w	r3, r7, #16
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 f98b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800a0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d071      	beq.n	800a18e <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f000 f964 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800a0b0:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800a0b2:	68b8      	ldr	r0, [r7, #8]
 800a0b4:	f7ff fc28 	bl	8009908 <_ZN12SimpleString6StrLenEPKc>
 800a0b8:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7ff fc24 	bl	8009908 <_ZN12SimpleString6StrLenEPKc>
 800a0c0:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0c6:	fb02 f203 	mul.w	r2, r2, r3
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	441a      	add	r2, r3
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0d2:	fb01 f303 	mul.w	r3, r1, r3
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	3301      	adds	r3, #1
 800a0da:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d951      	bls.n	800a186 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800a0e2:	f240 129d 	movw	r2, #413	; 0x19d
 800a0e6:	492c      	ldr	r1, [pc, #176]	; (800a198 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800a0e8:	69f8      	ldr	r0, [r7, #28]
 800a0ea:	f7ff fb33 	bl	8009754 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800a0ee:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	637b      	str	r3, [r7, #52]	; 0x34
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	633b      	str	r3, [r7, #48]	; 0x30
 800a0f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d236      	bcs.n	800a16e <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f7ff fd96 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 800a106:	4602      	mov	r2, r0
 800a108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10a:	4413      	add	r3, r2
 800a10c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a10e:	68b9      	ldr	r1, [r7, #8]
 800a110:	4618      	mov	r0, r3
 800a112:	f7ff fc16 	bl	8009942 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	bf0c      	ite	eq
 800a11c:	2301      	moveq	r3, #1
 800a11e:	2300      	movne	r3, #0
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b00      	cmp	r3, #0
 800a124:	d011      	beq.n	800a14a <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800a126:	69ba      	ldr	r2, [r7, #24]
 800a128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12a:	18d0      	adds	r0, r2, r3
 800a12c:	6a3b      	ldr	r3, [r7, #32]
 800a12e:	3301      	adds	r3, #1
 800a130:	461a      	mov	r2, r3
 800a132:	6879      	ldr	r1, [r7, #4]
 800a134:	f7ff fc33 	bl	800999e <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800a138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	4413      	add	r3, r2
 800a13e:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800a140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	4413      	add	r3, r2
 800a146:	637b      	str	r3, [r7, #52]	; 0x34
 800a148:	e7d6      	b.n	800a0f8 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f7ff fd71 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 800a150:	4602      	mov	r2, r0
 800a152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a154:	441a      	add	r2, r3
 800a156:	69b9      	ldr	r1, [r7, #24]
 800a158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15a:	440b      	add	r3, r1
 800a15c:	7812      	ldrb	r2, [r2, #0]
 800a15e:	701a      	strb	r2, [r3, #0]
                j++;
 800a160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a162:	3301      	adds	r3, #1
 800a164:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800a166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a168:	3301      	adds	r3, #1
 800a16a:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800a16c:	e7c4      	b.n	800a0f8 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	3b01      	subs	r3, #1
 800a172:	69ba      	ldr	r2, [r7, #24]
 800a174:	4413      	add	r3, r2
 800a176:	2200      	movs	r2, #0
 800a178:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800a17a:	69fa      	ldr	r2, [r7, #28]
 800a17c:	69b9      	ldr	r1, [r7, #24]
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f7ff fd1c 	bl	8009bbc <_ZN12SimpleString19setInternalBufferToEPcj>
 800a184:	e004      	b.n	800a190 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f7ff fcca 	bl	8009b20 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800a18c:	e000      	b.n	800a190 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800a18e:	bf00      	nop
}
 800a190:	3738      	adds	r7, #56	; 0x38
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	08020cc8 	.word	0x08020cc8

0800a19c <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800a19c:	b590      	push	{r4, r7, lr}
 800a19e:	b089      	sub	sp, #36	; 0x24
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800a1a6:	493b      	ldr	r1, [pc, #236]	; (800a294 <_ZNK12SimpleString9printableEv+0xf8>)
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7ff fd4e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800a1ae:	6838      	ldr	r0, [r7, #0]
 800a1b0:	f000 f876 	bl	800a2a0 <_ZNK12SimpleString16getPrintableSizeEv>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff fcde 	bl	8009b7c <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800a1c0:	6838      	ldr	r0, [r7, #0]
 800a1c2:	f000 f8d9 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800a1c6:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	61bb      	str	r3, [r7, #24]
 800a1d0:	69ba      	ldr	r2, [r7, #24]
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d252      	bcs.n	800a27e <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	4413      	add	r3, r2
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800a1e4:	7cfb      	ldrb	r3, [r7, #19]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 fb43 	bl	800a872 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d012      	beq.n	800a218 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	18d0      	adds	r0, r2, r3
 800a1fa:	7cfb      	ldrb	r3, [r7, #19]
 800a1fc:	3b07      	subs	r3, #7
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	461a      	mov	r2, r3
 800a202:	4b25      	ldr	r3, [pc, #148]	; (800a298 <_ZNK12SimpleString9printableEv+0xfc>)
 800a204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a208:	2202      	movs	r2, #2
 800a20a:	4619      	mov	r1, r3
 800a20c:	f7ff fbc7 	bl	800999e <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	3302      	adds	r3, #2
 800a214:	61fb      	str	r3, [r7, #28]
 800a216:	e02e      	b.n	800a276 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800a218:	7cfb      	ldrb	r3, [r7, #19]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f000 fb15 	bl	800a84a <_ZN12SimpleString9isControlEc>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d01e      	beq.n	800a264 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800a226:	7cfa      	ldrb	r2, [r7, #19]
 800a228:	f107 0308 	add.w	r3, r7, #8
 800a22c:	491b      	ldr	r1, [pc, #108]	; (800a29c <_ZNK12SimpleString9printableEv+0x100>)
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 fdca 	bl	800adc8 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	18d4      	adds	r4, r2, r3
 800a23c:	f107 0308 	add.w	r3, r7, #8
 800a240:	4618      	mov	r0, r3
 800a242:	f000 f88d 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800a246:	4603      	mov	r3, r0
 800a248:	2204      	movs	r2, #4
 800a24a:	4619      	mov	r1, r3
 800a24c:	4620      	mov	r0, r4
 800a24e:	f7ff fba6 	bl	800999e <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	3304      	adds	r3, #4
 800a256:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800a258:	f107 0308 	add.w	r3, r7, #8
 800a25c:	4618      	mov	r0, r3
 800a25e:	f000 f8ac 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800a262:	e008      	b.n	800a276 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	4413      	add	r3, r2
 800a26c:	7cfa      	ldrb	r2, [r7, #19]
 800a26e:	701a      	strb	r2, [r3, #0]
            j++;
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	3301      	adds	r3, #1
 800a274:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	3301      	adds	r3, #1
 800a27a:	61bb      	str	r3, [r7, #24]
 800a27c:	e7a8      	b.n	800a1d0 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	4413      	add	r3, r2
 800a286:	2200      	movs	r2, #0
 800a288:	701a      	strb	r2, [r3, #0]

    return result;
 800a28a:	bf00      	nop
}
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	3724      	adds	r7, #36	; 0x24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd90      	pop	{r4, r7, pc}
 800a294:	08020d88 	.word	0x08020d88
 800a298:	20000068 	.word	0x20000068
 800a29c:	08020d8c 	.word	0x08020d8c

0800a2a0 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f865 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800a2ae:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	613b      	str	r3, [r7, #16]
 800a2b8:	693a      	ldr	r2, [r7, #16]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d21e      	bcs.n	800a2fe <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800a2cc:	7afb      	ldrb	r3, [r7, #11]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 facf 	bl	800a872 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d003      	beq.n	800a2e2 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	e009      	b.n	800a2f6 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800a2e2:	7afb      	ldrb	r3, [r7, #11]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 fab0 	bl	800a84a <_ZN12SimpleString9isControlEc>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	3303      	adds	r3, #3
 800a2f4:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	613b      	str	r3, [r7, #16]
 800a2fc:	e7dc      	b.n	800a2b8 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800a2fe:	697b      	ldr	r3, [r7, #20]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800a308:	b590      	push	{r4, r7, lr}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800a312:	6839      	ldr	r1, [r7, #0]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7ff fcec 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f82c 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800a320:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800a322:	2300      	movs	r3, #0
 800a324:	60fb      	str	r3, [r7, #12]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d213      	bcs.n	800a356 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff fc7f 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 800a334:	4602      	mov	r2, r0
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	4413      	add	r3, r2
 800a33a:	7819      	ldrb	r1, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	18d4      	adds	r4, r2, r3
 800a344:	4608      	mov	r0, r1
 800a346:	f7ff fb8a 	bl	8009a5e <_ZN12SimpleString7ToLowerEc>
 800a34a:	4603      	mov	r3, r0
 800a34c:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3301      	adds	r3, #1
 800a352:	60fb      	str	r3, [r7, #12]
 800a354:	e7e7      	b.n	800a326 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800a356:	bf00      	nop
}
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	3714      	adds	r7, #20
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd90      	pop	{r4, r7, pc}

0800a360 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7ff fc62 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 800a36e:	4603      	mov	r3, r0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7ff fc56 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 800a386:	4603      	mov	r3, r0
 800a388:	4618      	mov	r0, r3
 800a38a:	f7ff fabd 	bl	8009908 <_ZN12SimpleString6StrLenEPKc>
 800a38e:	4603      	mov	r3, r0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f7ff ffe9 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	bf0c      	ite	eq
 800a3ac:	2301      	moveq	r3, #1
 800a3ae:	2300      	movne	r3, #0
 800a3b0:	b2db      	uxtb	r3, r3
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7ff fb90 	bl	8009ae8 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800a3d2:	b590      	push	{r4, r7, lr}
 800a3d4:	b083      	sub	sp, #12
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff ffbf 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	6838      	ldr	r0, [r7, #0]
 800a3e6:	f7ff ffbb 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f7ff fa68 	bl	80098c4 <_ZN12SimpleString6StrCmpEPKcS1_>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	bf0c      	ite	eq
 800a3fa:	2301      	moveq	r3, #1
 800a3fc:	2300      	movne	r3, #0
 800a3fe:	b2db      	uxtb	r3, r3
}
 800a400:	4618      	mov	r0, r3
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	bd90      	pop	{r4, r7, pc}

0800a408 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800a408:	b590      	push	{r4, r7, lr}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800a412:	f107 0308 	add.w	r3, r7, #8
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	4618      	mov	r0, r3
 800a41a:	f7ff ff75 	bl	800a308 <_ZNK12SimpleString9lowerCaseEv>
 800a41e:	f107 0310 	add.w	r3, r7, #16
 800a422:	6839      	ldr	r1, [r7, #0]
 800a424:	4618      	mov	r0, r3
 800a426:	f7ff ff6f 	bl	800a308 <_ZNK12SimpleString9lowerCaseEv>
 800a42a:	f107 0210 	add.w	r2, r7, #16
 800a42e:	f107 0308 	add.w	r3, r7, #8
 800a432:	4611      	mov	r1, r2
 800a434:	4618      	mov	r0, r3
 800a436:	f7ff ffcc 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 800a43a:	4603      	mov	r3, r0
 800a43c:	461c      	mov	r4, r3
 800a43e:	f107 0310 	add.w	r3, r7, #16
 800a442:	4618      	mov	r0, r3
 800a444:	f7ff ffb9 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800a448:	f107 0308 	add.w	r3, r7, #8
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff ffb4 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800a452:	4623      	mov	r3, r4
}
 800a454:	4618      	mov	r0, r3
 800a456:	371c      	adds	r7, #28
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd90      	pop	{r4, r7, pc}

0800a45c <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff ffb2 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 800a46e:	4603      	mov	r3, r0
 800a470:	f083 0301 	eor.w	r3, r3, #1
 800a474:	b2db      	uxtb	r3, r3
}
 800a476:	4618      	mov	r0, r3
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b084      	sub	sp, #16
 800a482:	af00      	add	r7, sp, #0
 800a484:	60f8      	str	r0, [r7, #12]
 800a486:	60b9      	str	r1, [r7, #8]
 800a488:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800a48a:	68b8      	ldr	r0, [r7, #8]
 800a48c:	f7ff fbd1 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 800a490:	4603      	mov	r3, r0
 800a492:	4619      	mov	r1, r3
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f7ff fbd8 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7ff fbc9 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f000 f817 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    return t;
 800a4aa:	bf00      	nop
}
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800a4be:	6838      	ldr	r0, [r7, #0]
 800a4c0:	f7ff fbb7 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f805 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
 800a4ce:	4603      	mov	r3, r0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff ff48 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800a4e8:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800a4ea:	6838      	ldr	r0, [r7, #0]
 800a4ec:	f7ff fa0c 	bl	8009908 <_ZN12SimpleString6StrLenEPKc>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f7ff fb97 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 800a504:	4603      	mov	r3, r0
 800a506:	68f9      	ldr	r1, [r7, #12]
 800a508:	4618      	mov	r0, r3
 800a50a:	f000 f941 	bl	800a790 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800a50e:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	4413      	add	r3, r2
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	6839      	ldr	r1, [r7, #0]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7ff fa3f 	bl	800999e <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	68b9      	ldr	r1, [r7, #8]
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7ff fb49 	bl	8009bbc <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800a52a:	687b      	ldr	r3, [r7, #4]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800a534:	b590      	push	{r4, r7, lr}
 800a536:	b08b      	sub	sp, #44	; 0x2c
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	4613      	mov	r3, r2
 800a540:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f7ff ff18 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800a548:	4604      	mov	r4, r0
 800a54a:	68b8      	ldr	r0, [r7, #8]
 800a54c:	f7ff ff14 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800a550:	4603      	mov	r3, r0
 800a552:	429c      	cmp	r4, r3
 800a554:	bf8c      	ite	hi
 800a556:	2301      	movhi	r3, #1
 800a558:	2300      	movls	r3, #0
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d006      	beq.n	800a56e <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800a560:	79fb      	ldrb	r3, [r7, #7]
 800a562:	461a      	mov	r2, r3
 800a564:	68f9      	ldr	r1, [r7, #12]
 800a566:	68b8      	ldr	r0, [r7, #8]
 800a568:	f7ff ffe4 	bl	800a534 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800a56c:	e02b      	b.n	800a5c6 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800a576:	68b8      	ldr	r0, [r7, #8]
 800a578:	f7ff fefe 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800a57c:	4604      	mov	r4, r0
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff fefa 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800a584:	4603      	mov	r3, r0
 800a586:	1ae2      	subs	r2, r4, r3
 800a588:	f107 0114 	add.w	r1, r7, #20
 800a58c:	f107 0320 	add.w	r3, r7, #32
 800a590:	4618      	mov	r0, r3
 800a592:	f7ff fb75 	bl	8009c80 <_ZN12SimpleStringC1EPKcj>
 800a596:	f107 0318 	add.w	r3, r7, #24
 800a59a:	f107 0120 	add.w	r1, r7, #32
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7ff ff6c 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800a5a6:	f107 0318 	add.w	r3, r7, #24
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f7ff fbb8 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800a5b2:	f107 0318 	add.w	r3, r7, #24
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7ff feff 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800a5bc:	f107 0320 	add.w	r3, r7, #32
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7ff fefa 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800a5c6:	372c      	adds	r7, #44	; 0x2c
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd90      	pop	{r4, r7, pc}

0800a5cc <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800a5da:	68b8      	ldr	r0, [r7, #8]
 800a5dc:	f7ff fecc 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	bf8c      	ite	hi
 800a5ea:	2301      	movhi	r3, #1
 800a5ec:	2300      	movls	r3, #0
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d004      	beq.n	800a5fe <_ZNK12SimpleString9subStringEjj+0x32>
 800a5f4:	4919      	ldr	r1, [pc, #100]	; (800a65c <_ZNK12SimpleString9subStringEjj+0x90>)
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f7ff fb27 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800a5fc:	e029      	b.n	800a652 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800a5fe:	68b8      	ldr	r0, [r7, #8]
 800a600:	f7ff fb17 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 800a604:	4602      	mov	r2, r0
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	441a      	add	r2, r3
 800a60a:	f107 0310 	add.w	r3, r7, #16
 800a60e:	4611      	mov	r1, r2
 800a610:	4618      	mov	r0, r3
 800a612:	f7ff fb1a 	bl	8009c4a <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800a616:	f107 0310 	add.w	r3, r7, #16
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7ff feac 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800a620:	4602      	mov	r2, r0
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	4293      	cmp	r3, r2
 800a626:	bf34      	ite	cc
 800a628:	2301      	movcc	r3, #1
 800a62a:	2300      	movcs	r3, #0
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d004      	beq.n	800a63c <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800a632:	693a      	ldr	r2, [r7, #16]
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	4413      	add	r3, r2
 800a638:	2200      	movs	r2, #0
 800a63a:	701a      	strb	r2, [r3, #0]

    return newString;
 800a63c:	f107 0310 	add.w	r3, r7, #16
 800a640:	4619      	mov	r1, r3
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f7ff fb55 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800a648:	f107 0310 	add.w	r3, r7, #16
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7ff feb4 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	3718      	adds	r7, #24
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	08020d88 	.word	0x08020d88

0800a660 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f04f 33ff 	mov.w	r3, #4294967295
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	68b9      	ldr	r1, [r7, #8]
 800a676:	f7ff ffa9 	bl	800a5cc <_ZNK12SimpleString9subStringEjj>
}
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b082      	sub	sp, #8
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7ff fad0 	bl	8009c32 <_ZNK12SimpleString9getBufferEv>
 800a692:	4602      	mov	r2, r0
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	4413      	add	r3, r2
 800a698:	781b      	ldrb	r3, [r3, #0]
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b082      	sub	sp, #8
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800a6ae:	78fb      	ldrb	r3, [r7, #3]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f805 	bl	800a6c4 <_ZNK12SimpleString8findFromEjc>
 800a6ba:	4603      	mov	r3, r0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f7ff fe50 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800a6d8:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	617b      	str	r3, [r7, #20]
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d213      	bcs.n	800a70e <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800a6e6:	6979      	ldr	r1, [r7, #20]
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f7ff ffca 	bl	800a682 <_ZNK12SimpleString2atEj>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	79fb      	ldrb	r3, [r7, #7]
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	bf0c      	ite	eq
 800a6f8:	2301      	moveq	r3, #1
 800a6fa:	2300      	movne	r3, #0
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d001      	beq.n	800a706 <_ZNK12SimpleString8findFromEjc+0x42>
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	e005      	b.n	800a712 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	3301      	adds	r3, #1
 800a70a:	617b      	str	r3, [r7, #20]
 800a70c:	e7e7      	b.n	800a6de <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800a70e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
	...

0800a71c <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	4611      	mov	r1, r2
 800a728:	461a      	mov	r2, r3
 800a72a:	460b      	mov	r3, r1
 800a72c:	71fb      	strb	r3, [r7, #7]
 800a72e:	4613      	mov	r3, r2
 800a730:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800a732:	79fb      	ldrb	r3, [r7, #7]
 800a734:	4619      	mov	r1, r3
 800a736:	68b8      	ldr	r0, [r7, #8]
 800a738:	f7ff ffb3 	bl	800a6a2 <_ZNK12SimpleString4findEc>
 800a73c:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a744:	d104      	bne.n	800a750 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800a746:	4911      	ldr	r1, [pc, #68]	; (800a78c <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f7ff fa7e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800a74e:	e019      	b.n	800a784 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800a750:	79bb      	ldrb	r3, [r7, #6]
 800a752:	461a      	mov	r2, r3
 800a754:	6979      	ldr	r1, [r7, #20]
 800a756:	68b8      	ldr	r0, [r7, #8]
 800a758:	f7ff ffb4 	bl	800a6c4 <_ZNK12SimpleString8findFromEjc>
 800a75c:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a764:	d106      	bne.n	800a774 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	68b9      	ldr	r1, [r7, #8]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7ff ff77 	bl	800a660 <_ZNK12SimpleString9subStringEj>
 800a772:	e007      	b.n	800a784 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	68b9      	ldr	r1, [r7, #8]
 800a780:	f7ff ff24 	bl	800a5cc <_ZNK12SimpleString9subStringEjj>
}
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	3718      	adds	r7, #24
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	08020d88 	.word	0x08020d88

0800a790 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800a79a:	f240 2275 	movw	r2, #629	; 0x275
 800a79e:	490a      	ldr	r1, [pc, #40]	; (800a7c8 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800a7a0:	6838      	ldr	r0, [r7, #0]
 800a7a2:	f7fe ffd7 	bl	8009754 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800a7a6:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800a7a8:	683a      	ldr	r2, [r7, #0]
 800a7aa:	6879      	ldr	r1, [r7, #4]
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f7ff f8f6 	bl	800999e <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800a7be:	68fb      	ldr	r3, [r7, #12]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	08020cc8 	.word	0x08020cc8

0800a7cc <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	2b2f      	cmp	r3, #47	; 0x2f
 800a7da:	d904      	bls.n	800a7e6 <_ZN12SimpleString7isDigitEc+0x1a>
 800a7dc:	79fb      	ldrb	r3, [r7, #7]
 800a7de:	2b39      	cmp	r3, #57	; 0x39
 800a7e0:	d801      	bhi.n	800a7e6 <_ZN12SimpleString7isDigitEc+0x1a>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e000      	b.n	800a7e8 <_ZN12SimpleString7isDigitEc+0x1c>
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800a7fe:	79fb      	ldrb	r3, [r7, #7]
 800a800:	2b20      	cmp	r3, #32
 800a802:	d005      	beq.n	800a810 <_ZN12SimpleString7isSpaceEc+0x1c>
 800a804:	79fb      	ldrb	r3, [r7, #7]
 800a806:	2b08      	cmp	r3, #8
 800a808:	d904      	bls.n	800a814 <_ZN12SimpleString7isSpaceEc+0x20>
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	2b0d      	cmp	r3, #13
 800a80e:	d801      	bhi.n	800a814 <_ZN12SimpleString7isSpaceEc+0x20>
 800a810:	2301      	movs	r3, #1
 800a812:	e000      	b.n	800a816 <_ZN12SimpleString7isSpaceEc+0x22>
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	370c      	adds	r7, #12
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800a822:	b480      	push	{r7}
 800a824:	b083      	sub	sp, #12
 800a826:	af00      	add	r7, sp, #0
 800a828:	4603      	mov	r3, r0
 800a82a:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	2b40      	cmp	r3, #64	; 0x40
 800a830:	d904      	bls.n	800a83c <_ZN12SimpleString7isUpperEc+0x1a>
 800a832:	79fb      	ldrb	r3, [r7, #7]
 800a834:	2b5a      	cmp	r3, #90	; 0x5a
 800a836:	d801      	bhi.n	800a83c <_ZN12SimpleString7isUpperEc+0x1a>
 800a838:	2301      	movs	r3, #1
 800a83a:	e000      	b.n	800a83e <_ZN12SimpleString7isUpperEc+0x1c>
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr

0800a84a <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800a84a:	b480      	push	{r7}
 800a84c:	b083      	sub	sp, #12
 800a84e:	af00      	add	r7, sp, #0
 800a850:	4603      	mov	r3, r0
 800a852:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800a854:	79fb      	ldrb	r3, [r7, #7]
 800a856:	2b1f      	cmp	r3, #31
 800a858:	d902      	bls.n	800a860 <_ZN12SimpleString9isControlEc+0x16>
 800a85a:	79fb      	ldrb	r3, [r7, #7]
 800a85c:	2b7f      	cmp	r3, #127	; 0x7f
 800a85e:	d101      	bne.n	800a864 <_ZN12SimpleString9isControlEc+0x1a>
 800a860:	2301      	movs	r3, #1
 800a862:	e000      	b.n	800a866 <_ZN12SimpleString9isControlEc+0x1c>
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800a872:	b480      	push	{r7}
 800a874:	b083      	sub	sp, #12
 800a876:	af00      	add	r7, sp, #0
 800a878:	4603      	mov	r3, r0
 800a87a:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800a87c:	79fb      	ldrb	r3, [r7, #7]
 800a87e:	2b06      	cmp	r3, #6
 800a880:	d904      	bls.n	800a88c <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800a882:	79fb      	ldrb	r3, [r7, #7]
 800a884:	2b0d      	cmp	r3, #13
 800a886:	d801      	bhi.n	800a88c <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800a888:	2301      	movs	r3, #1
 800a88a:	e000      	b.n	800a88e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
	...

0800a89c <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800a8a8:	78fb      	ldrb	r3, [r7, #3]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <_Z10StringFromb+0x16>
 800a8ae:	4a06      	ldr	r2, [pc, #24]	; (800a8c8 <_Z10StringFromb+0x2c>)
 800a8b0:	e000      	b.n	800a8b4 <_Z10StringFromb+0x18>
 800a8b2:	4a06      	ldr	r2, [pc, #24]	; (800a8cc <_Z10StringFromb+0x30>)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4906      	ldr	r1, [pc, #24]	; (800a8d0 <_Z10StringFromb+0x34>)
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 fa85 	bl	800adc8 <_Z16StringFromFormatPKcz>
}
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	08020d94 	.word	0x08020d94
 800a8cc:	08020d9c 	.word	0x08020d9c
 800a8d0:	08020da4 	.word	0x08020da4

0800a8d4 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800a8de:	6839      	ldr	r1, [r7, #0]
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f7ff f9b2 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
}
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
	...

0800a8f0 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800a8f0:	b590      	push	{r4, r7, lr}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800a8fa:	2400      	movs	r4, #0
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00e      	beq.n	800a920 <_Z25PrintableStringFromOrNullPKc+0x30>
 800a902:	f107 0308 	add.w	r3, r7, #8
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	4618      	mov	r0, r3
 800a90a:	f7ff ffe3 	bl	800a8d4 <_Z10StringFromPKc>
 800a90e:	2401      	movs	r4, #1
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f107 0208 	add.w	r2, r7, #8
 800a916:	4611      	mov	r1, r2
 800a918:	4618      	mov	r0, r3
 800a91a:	f7ff fc3f 	bl	800a19c <_ZNK12SimpleString9printableEv>
 800a91e:	e004      	b.n	800a92a <_Z25PrintableStringFromOrNullPKc+0x3a>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4908      	ldr	r1, [pc, #32]	; (800a944 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800a924:	4618      	mov	r0, r3
 800a926:	f7ff ffd5 	bl	800a8d4 <_Z10StringFromPKc>
 800a92a:	2c00      	cmp	r4, #0
 800a92c:	d004      	beq.n	800a938 <_Z25PrintableStringFromOrNullPKc+0x48>
 800a92e:	f107 0308 	add.w	r3, r7, #8
 800a932:	4618      	mov	r0, r3
 800a934:	f7ff fd41 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800a938:	bf00      	nop
}
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	3714      	adds	r7, #20
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd90      	pop	{r4, r7, pc}
 800a942:	bf00      	nop
 800a944:	08020da8 	.word	0x08020da8

0800a948 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	683a      	ldr	r2, [r7, #0]
 800a956:	4904      	ldr	r1, [pc, #16]	; (800a968 <_Z10StringFromi+0x20>)
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 fa35 	bl	800adc8 <_Z16StringFromFormatPKcz>
}
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	08020db0 	.word	0x08020db0

0800a96c <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	683a      	ldr	r2, [r7, #0]
 800a97a:	4904      	ldr	r1, [pc, #16]	; (800a98c <_Z10StringFroml+0x20>)
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 fa23 	bl	800adc8 <_Z16StringFromFormatPKcz>
}
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	08020db4 	.word	0x08020db4

0800a990 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800a99a:	f107 0308 	add.w	r3, r7, #8
 800a99e:	4910      	ldr	r1, [pc, #64]	; (800a9e0 <_Z10StringFromPKv+0x50>)
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7ff f952 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800a9a6:	f107 0310 	add.w	r3, r7, #16
 800a9aa:	6839      	ldr	r1, [r7, #0]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f000 f9a1 	bl	800acf4 <_Z13HexStringFromPKv>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f107 0210 	add.w	r2, r7, #16
 800a9b8:	f107 0108 	add.w	r1, r7, #8
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7ff fd5e 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800a9c2:	f107 0310 	add.w	r3, r7, #16
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7ff fcf7 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800a9cc:	f107 0308 	add.w	r3, r7, #8
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7ff fcf2 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800a9d6:	bf00      	nop
}
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	3718      	adds	r7, #24
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	08020db8 	.word	0x08020db8

0800a9e4 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800a9ee:	f107 0308 	add.w	r3, r7, #8
 800a9f2:	4910      	ldr	r1, [pc, #64]	; (800aa34 <_Z10StringFromPFvvE+0x50>)
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7ff f928 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800a9fa:	f107 0310 	add.w	r3, r7, #16
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 f98b 	bl	800ad1c <_Z13HexStringFromPFvvE>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f107 0210 	add.w	r2, r7, #16
 800aa0c:	f107 0108 	add.w	r1, r7, #8
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7ff fd34 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800aa16:	f107 0310 	add.w	r3, r7, #16
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff fccd 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800aa20:	f107 0308 	add.w	r3, r7, #8
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7ff fcc8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800aa2a:	bf00      	nop
}
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	3718      	adds	r7, #24
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	08020db8 	.word	0x08020db8

0800aa38 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	4904      	ldr	r1, [pc, #16]	; (800aa58 <_Z13HexStringFroml+0x20>)
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f000 f9bd 	bl	800adc8 <_Z16StringFromFormatPKcz>
}
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	08020dbc 	.word	0x08020dbc

0800aa5c <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	683a      	ldr	r2, [r7, #0]
 800aa6a:	4904      	ldr	r1, [pc, #16]	; (800aa7c <_Z13HexStringFromi+0x20>)
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 f9ab 	bl	800adc8 <_Z16StringFromFormatPKcz>
}
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	08020dc0 	.word	0x08020dc0

0800aa80 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	460b      	mov	r3, r1
 800aa8a:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800aa8c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4912      	ldr	r1, [pc, #72]	; (800aadc <_Z13HexStringFroma+0x5c>)
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 f997 	bl	800adc8 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800aa9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	da16      	bge.n	800aad0 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7ff fc68 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800aaa8:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	1e9a      	subs	r2, r3, #2
 800aaae:	f107 030c 	add.w	r3, r7, #12
 800aab2:	6879      	ldr	r1, [r7, #4]
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7ff fdd3 	bl	800a660 <_ZNK12SimpleString9subStringEj>
 800aaba:	f107 030c 	add.w	r3, r7, #12
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff f92e 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800aac6:	f107 030c 	add.w	r3, r7, #12
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7ff fc75 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    }
    return result;
 800aad0:	bf00      	nop
}
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	3718      	adds	r7, #24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	08020dc0 	.word	0x08020dc0

0800aae0 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	683a      	ldr	r2, [r7, #0]
 800aaee:	4904      	ldr	r1, [pc, #16]	; (800ab00 <_Z13HexStringFromm+0x20>)
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 f969 	bl	800adc8 <_Z16StringFromFormatPKcz>
}
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	08020dbc 	.word	0x08020dbc

0800ab04 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	4904      	ldr	r1, [pc, #16]	; (800ab24 <_Z13HexStringFromj+0x20>)
 800ab14:	4618      	mov	r0, r3
 800ab16:	f000 f957 	bl	800adc8 <_Z16StringFromFormatPKcz>
}
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	08020dc0 	.word	0x08020dc0

0800ab28 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800ab32:	f107 0308 	add.w	r3, r7, #8
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7ff ff8f 	bl	800aa5c <_Z13HexStringFromi>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f107 0208 	add.w	r2, r7, #8
 800ab44:	4611      	mov	r1, r2
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 f87e 	bl	800ac48 <_Z26BracketsFormattedHexString12SimpleString>
 800ab4c:	f107 0308 	add.w	r3, r7, #8
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7ff fc32 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800ab56:	bf00      	nop
}
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800ab6a:	f107 0308 	add.w	r3, r7, #8
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7ff ffc7 	bl	800ab04 <_Z13HexStringFromj>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f107 0208 	add.w	r2, r7, #8
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 f862 	bl	800ac48 <_Z26BracketsFormattedHexString12SimpleString>
 800ab84:	f107 0308 	add.w	r3, r7, #8
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7ff fc16 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800ab8e:	bf00      	nop
}
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800aba2:	f107 0308 	add.w	r3, r7, #8
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7ff ff45 	bl	800aa38 <_Z13HexStringFroml>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f107 0208 	add.w	r2, r7, #8
 800abb4:	4611      	mov	r1, r2
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 f846 	bl	800ac48 <_Z26BracketsFormattedHexString12SimpleString>
 800abbc:	f107 0308 	add.w	r3, r7, #8
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff fbfa 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800abc6:	bf00      	nop
}
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800abda:	f107 0308 	add.w	r3, r7, #8
 800abde:	6839      	ldr	r1, [r7, #0]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7ff ff7d 	bl	800aae0 <_Z13HexStringFromm>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f107 0208 	add.w	r2, r7, #8
 800abec:	4611      	mov	r1, r2
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 f82a 	bl	800ac48 <_Z26BracketsFormattedHexString12SimpleString>
 800abf4:	f107 0308 	add.w	r3, r7, #8
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7ff fbde 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800abfe:	bf00      	nop
}
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	460b      	mov	r3, r1
 800ac12:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800ac14:	f107 0308 	add.w	r3, r7, #8
 800ac18:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800ac1c:	4611      	mov	r1, r2
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7ff ff2e 	bl	800aa80 <_Z13HexStringFroma>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f107 0208 	add.w	r2, r7, #8
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 f80b 	bl	800ac48 <_Z26BracketsFormattedHexString12SimpleString>
 800ac32:	f107 0308 	add.w	r3, r7, #8
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7ff fbbf 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800ac3c:	bf00      	nop
}
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
	...

0800ac48 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b088      	sub	sp, #32
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800ac52:	f107 0310 	add.w	r3, r7, #16
 800ac56:	4917      	ldr	r1, [pc, #92]	; (800acb4 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7fe fff6 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800ac5e:	f107 0308 	add.w	r3, r7, #8
 800ac62:	f107 0110 	add.w	r1, r7, #16
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7ff fc08 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800ac6e:	f107 0318 	add.w	r3, r7, #24
 800ac72:	4911      	ldr	r1, [pc, #68]	; (800acb8 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7fe ffe8 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f107 0218 	add.w	r2, r7, #24
 800ac80:	f107 0108 	add.w	r1, r7, #8
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7ff fbfa 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800ac8a:	f107 0318 	add.w	r3, r7, #24
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7ff fb93 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800ac94:	f107 0308 	add.w	r3, r7, #8
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7ff fb8e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800ac9e:	f107 0310 	add.w	r3, r7, #16
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7ff fb89 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800aca8:	bf00      	nop
}
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	3720      	adds	r7, #32
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	08020dc4 	.word	0x08020dc4
 800acb8:	08020dc8 	.word	0x08020dc8

0800acbc <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800acc4:	1d3b      	adds	r3, r7, #4
 800acc6:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3714      	adds	r7, #20
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800ace0:	1d3b      	adds	r3, r7, #4
 800ace2:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800acfe:	6838      	ldr	r0, [r7, #0]
 800ad00:	f7ff ffdc 	bl	800acbc <_ZL25convertPointerToLongValuePKv>
 800ad04:	4602      	mov	r2, r0
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4903      	ldr	r1, [pc, #12]	; (800ad18 <_Z13HexStringFromPKv+0x24>)
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 f85c 	bl	800adc8 <_Z16StringFromFormatPKcz>
}
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	08020dbc 	.word	0x08020dbc

0800ad1c <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800ad26:	6838      	ldr	r0, [r7, #0]
 800ad28:	f7ff ffd6 	bl	800acd8 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4903      	ldr	r1, [pc, #12]	; (800ad40 <_Z13HexStringFromPFvvE+0x24>)
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 f848 	bl	800adc8 <_Z16StringFromFormatPKcz>
}
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	08020dbc 	.word	0x08020dbc

0800ad44 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b086      	sub	sp, #24
 800ad48:	af02      	add	r7, sp, #8
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	ed87 0b00 	vstr	d0, [r7]
 800ad50:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800ad52:	4b18      	ldr	r3, [pc, #96]	; (800adb4 <_Z10StringFromdi+0x70>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	ed97 0b00 	vldr	d0, [r7]
 800ad5a:	4798      	blx	r3
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	bf14      	ite	ne
 800ad62:	2301      	movne	r3, #1
 800ad64:	2300      	moveq	r3, #0
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d004      	beq.n	800ad76 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800ad6c:	4912      	ldr	r1, [pc, #72]	; (800adb8 <_Z10StringFromdi+0x74>)
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f7fe ff6b 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800ad74:	e01a      	b.n	800adac <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800ad76:	4b11      	ldr	r3, [pc, #68]	; (800adbc <_Z10StringFromdi+0x78>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	ed97 0b00 	vldr	d0, [r7]
 800ad7e:	4798      	blx	r3
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	bf14      	ite	ne
 800ad86:	2301      	movne	r3, #1
 800ad88:	2300      	moveq	r3, #0
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d004      	beq.n	800ad9a <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800ad90:	490b      	ldr	r1, [pc, #44]	; (800adc0 <_Z10StringFromdi+0x7c>)
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f7fe ff59 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800ad98:	e008      	b.n	800adac <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ada0:	e9cd 2300 	strd	r2, r3, [sp]
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	4907      	ldr	r1, [pc, #28]	; (800adc4 <_Z10StringFromdi+0x80>)
 800ada8:	f000 f80e 	bl	800adc8 <_Z16StringFromFormatPKcz>
}
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	200000e4 	.word	0x200000e4
 800adb8:	08020dfc 	.word	0x08020dfc
 800adbc:	200000e8 	.word	0x200000e8
 800adc0:	08020e10 	.word	0x08020e10
 800adc4:	08020e20 	.word	0x08020e20

0800adc8 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800adc8:	b40e      	push	{r1, r2, r3}
 800adca:	b580      	push	{r7, lr}
 800adcc:	b087      	sub	sp, #28
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800add2:	4910      	ldr	r1, [pc, #64]	; (800ae14 <_Z16StringFromFormatPKcz+0x4c>)
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f7fe ff38 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800adda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800adde:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800ade0:	f107 0310 	add.w	r3, r7, #16
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 f839 	bl	800ae60 <_Z17VStringFromFormatPKcSt9__va_list>
 800adee:	f107 0310 	add.w	r3, r7, #16
 800adf2:	4619      	mov	r1, r3
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f7fe ff94 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800adfa:	f107 0310 	add.w	r3, r7, #16
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff fadb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800ae04:	bf00      	nop
}
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	371c      	adds	r7, #28
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae10:	b003      	add	sp, #12
 800ae12:	4770      	bx	lr
 800ae14:	08020d88 	.word	0x08020d88

0800ae18 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	4904      	ldr	r1, [pc, #16]	; (800ae38 <_Z10StringFromj+0x20>)
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7ff ffcd 	bl	800adc8 <_Z16StringFromFormatPKcz>
}
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	08020e2c 	.word	0x08020e2c

0800ae3c <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	683a      	ldr	r2, [r7, #0]
 800ae4a:	4904      	ldr	r1, [pc, #16]	; (800ae5c <_Z10StringFromm+0x20>)
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7ff ffbb 	bl	800adc8 <_Z16StringFromFormatPKcz>
}
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	08020e30 	.word	0x08020e30

0800ae60 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800ae60:	b590      	push	{r4, r7, lr}
 800ae62:	b0a7      	sub	sp, #156	; 0x9c
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800ae70:	492e      	ldr	r1, [pc, #184]	; (800af2c <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f7fe fee9 	bl	8009c4a <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800ae78:	4b2d      	ldr	r3, [pc, #180]	; (800af30 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800ae7a:	681c      	ldr	r4, [r3, #0]
 800ae7c:	f107 0014 	add.w	r0, r7, #20
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	68ba      	ldr	r2, [r7, #8]
 800ae84:	2164      	movs	r1, #100	; 0x64
 800ae86:	47a0      	blx	r4
 800ae88:	4603      	mov	r3, r0
 800ae8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800ae8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ae92:	2b63      	cmp	r3, #99	; 0x63
 800ae94:	d813      	bhi.n	800aebe <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800ae96:	f107 0214 	add.w	r2, r7, #20
 800ae9a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ae9e:	4611      	mov	r1, r2
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fe fed2 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800aea6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800aeaa:	4619      	mov	r1, r3
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f7fe ff38 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800aeb2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7ff fa7f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800aebc:	e031      	b.n	800af22 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800aebe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aec2:	3301      	adds	r3, #1
 800aec4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800aec8:	f240 32c3 	movw	r2, #963	; 0x3c3
 800aecc:	4919      	ldr	r1, [pc, #100]	; (800af34 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800aece:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800aed2:	f7fe fc3f 	bl	8009754 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800aed6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800aeda:	4b15      	ldr	r3, [pc, #84]	; (800af30 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800aedc:	681c      	ldr	r4, [r3, #0]
 800aede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aee0:	68ba      	ldr	r2, [r7, #8]
 800aee2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aee6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800aeea:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800aeec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800aef0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fe fea8 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800aefa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800aefe:	4619      	mov	r1, r3
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f7fe ff0e 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800af06:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7ff fa55 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800af10:	f240 33c7 	movw	r3, #967	; 0x3c7
 800af14:	4a07      	ldr	r2, [pc, #28]	; (800af34 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800af16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800af1a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800af1e:	f7fe fc2d 	bl	800977c <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800af22:	bf00      	nop
}
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	379c      	adds	r7, #156	; 0x9c
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd90      	pop	{r4, r7, pc}
 800af2c:	08020d88 	.word	0x08020d88
 800af30:	200000ac 	.word	0x200000ac
 800af34:	08020cc8 	.word	0x08020cc8

0800af38 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b08a      	sub	sp, #40	; 0x28
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800af44:	491f      	ldr	r1, [pc, #124]	; (800afc4 <_Z16StringFromBinaryPKhj+0x8c>)
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	f7fe fe7f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800af4c:	2300      	movs	r3, #0
 800af4e:	627b      	str	r3, [r7, #36]	; 0x24
 800af50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	429a      	cmp	r2, r3
 800af56:	d219      	bcs.n	800af8c <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	4413      	add	r3, r2
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	461a      	mov	r2, r3
 800af62:	f107 0314 	add.w	r3, r7, #20
 800af66:	4918      	ldr	r1, [pc, #96]	; (800afc8 <_Z16StringFromBinaryPKhj+0x90>)
 800af68:	4618      	mov	r0, r3
 800af6a:	f7ff ff2d 	bl	800adc8 <_Z16StringFromFormatPKcz>
 800af6e:	f107 0314 	add.w	r3, r7, #20
 800af72:	4619      	mov	r1, r3
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f7ff fa9d 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800af7a:	f107 0314 	add.w	r3, r7, #20
 800af7e:	4618      	mov	r0, r3
 800af80:	f7ff fa1b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800af84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af86:	3301      	adds	r3, #1
 800af88:	627b      	str	r3, [r7, #36]	; 0x24
 800af8a:	e7e1      	b.n	800af50 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f7ff f9f3 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800af92:	4603      	mov	r3, r0
 800af94:	3b01      	subs	r3, #1
 800af96:	f107 001c 	add.w	r0, r7, #28
 800af9a:	2200      	movs	r2, #0
 800af9c:	68f9      	ldr	r1, [r7, #12]
 800af9e:	f7ff fb15 	bl	800a5cc <_ZNK12SimpleString9subStringEjj>
 800afa2:	f107 031c 	add.w	r3, r7, #28
 800afa6:	4619      	mov	r1, r3
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f7fe feba 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800afae:	f107 031c 	add.w	r3, r7, #28
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7ff fa01 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    return result;
 800afb8:	bf00      	nop
}
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	3728      	adds	r7, #40	; 0x28
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	08020d88 	.word	0x08020d88
 800afc8:	08020e34 	.word	0x08020e34

0800afcc <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d006      	beq.n	800afec <_Z22StringFromBinaryOrNullPKhj+0x20>
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	68b9      	ldr	r1, [r7, #8]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7ff ffa7 	bl	800af38 <_Z16StringFromBinaryPKhj>
 800afea:	e004      	b.n	800aff6 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	4904      	ldr	r1, [pc, #16]	; (800b000 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7ff fc6f 	bl	800a8d4 <_Z10StringFromPKc>
}
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	08020da8 	.word	0x08020da8

0800b004 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b088      	sub	sp, #32
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	4913      	ldr	r1, [pc, #76]	; (800b064 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800b016:	4618      	mov	r0, r3
 800b018:	f7ff fed6 	bl	800adc8 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b80      	cmp	r3, #128	; 0x80
 800b020:	bf28      	it	cs
 800b022:	2380      	movcs	r3, #128	; 0x80
 800b024:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800b026:	f107 0314 	add.w	r3, r7, #20
 800b02a:	69fa      	ldr	r2, [r7, #28]
 800b02c:	68b9      	ldr	r1, [r7, #8]
 800b02e:	4618      	mov	r0, r3
 800b030:	f7ff ffcc 	bl	800afcc <_Z22StringFromBinaryOrNullPKhj>
 800b034:	f107 0314 	add.w	r3, r7, #20
 800b038:	4619      	mov	r1, r3
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f7ff fa3a 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800b040:	f107 0314 	add.w	r3, r7, #20
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff f9b8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d903      	bls.n	800b05a <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800b052:	4905      	ldr	r1, [pc, #20]	; (800b068 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f7ff fa3f 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800b05a:	bf00      	nop
}
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	3720      	adds	r7, #32
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	08020e3c 	.word	0x08020e3c
 800b068:	08020e58 	.word	0x08020e58

0800b06c <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d006      	beq.n	800b08c <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	68b9      	ldr	r1, [r7, #8]
 800b084:	4618      	mov	r0, r3
 800b086:	f7ff ffbd 	bl	800b004 <_Z24StringFromBinaryWithSizePKhj>
 800b08a:	e004      	b.n	800b096 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	4904      	ldr	r1, [pc, #16]	; (800b0a0 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800b090:	4618      	mov	r0, r3
 800b092:	f7ff fc1f 	bl	800a8d4 <_Z10StringFromPKc>
}
 800b096:	68f8      	ldr	r0, [r7, #12]
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	08020da8 	.word	0x08020da8

0800b0a4 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b088      	sub	sp, #32
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
 800b0b0:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800b0b2:	4925      	ldr	r1, [pc, #148]	; (800b148 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f7fe fdc8 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	2b04      	cmp	r3, #4
 800b0be:	d802      	bhi.n	800b0c6 <_Z20StringFromMaskedBitsmmj+0x22>
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	00db      	lsls	r3, r3, #3
 800b0c4:	e000      	b.n	800b0c8 <_Z20StringFromMaskedBitsmmj+0x24>
 800b0c6:	2320      	movs	r3, #32
 800b0c8:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d4:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	61fb      	str	r3, [r7, #28]
 800b0da:	69fa      	ldr	r2, [r7, #28]
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d22d      	bcs.n	800b13e <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00c      	beq.n	800b106 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d001      	beq.n	800b0fa <_Z20StringFromMaskedBitsmmj+0x56>
 800b0f6:	4b15      	ldr	r3, [pc, #84]	; (800b14c <_Z20StringFromMaskedBitsmmj+0xa8>)
 800b0f8:	e000      	b.n	800b0fc <_Z20StringFromMaskedBitsmmj+0x58>
 800b0fa:	4b15      	ldr	r3, [pc, #84]	; (800b150 <_Z20StringFromMaskedBitsmmj+0xac>)
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f7ff f9ea 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
 800b104:	e003      	b.n	800b10e <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800b106:	4913      	ldr	r1, [pc, #76]	; (800b154 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f7ff f9e5 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	f003 0307 	and.w	r3, r3, #7
 800b114:	2b07      	cmp	r3, #7
 800b116:	d108      	bne.n	800b12a <_Z20StringFromMaskedBitsmmj+0x86>
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	3b01      	subs	r3, #1
 800b11c:	69fa      	ldr	r2, [r7, #28]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d003      	beq.n	800b12a <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800b122:	490d      	ldr	r1, [pc, #52]	; (800b158 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f7ff f9d7 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	005b      	lsls	r3, r3, #1
 800b12e:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	005b      	lsls	r3, r3, #1
 800b134:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	3301      	adds	r3, #1
 800b13a:	61fb      	str	r3, [r7, #28]
 800b13c:	e7cd      	b.n	800b0da <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800b13e:	bf00      	nop
}
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	3720      	adds	r7, #32
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	08020d88 	.word	0x08020d88
 800b14c:	08020e60 	.word	0x08020e60
 800b150:	08020e64 	.word	0x08020e64
 800b154:	08020e68 	.word	0x08020e68
 800b158:	08020e6c 	.word	0x08020e6c

0800b15c <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800b166:	683a      	ldr	r2, [r7, #0]
 800b168:	4b18      	ldr	r3, [pc, #96]	; (800b1cc <_Z23StringFromOrdinalNumberj+0x70>)
 800b16a:	fba3 1302 	umull	r1, r3, r3, r2
 800b16e:	08d9      	lsrs	r1, r3, #3
 800b170:	460b      	mov	r3, r1
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	440b      	add	r3, r1
 800b176:	005b      	lsls	r3, r3, #1
 800b178:	1ad3      	subs	r3, r2, r3
 800b17a:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	2b0a      	cmp	r3, #10
 800b180:	d905      	bls.n	800b18e <_Z23StringFromOrdinalNumberj+0x32>
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	2b0d      	cmp	r3, #13
 800b186:	d802      	bhi.n	800b18e <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800b188:	4b11      	ldr	r3, [pc, #68]	; (800b1d0 <_Z23StringFromOrdinalNumberj+0x74>)
 800b18a:	60fb      	str	r3, [r7, #12]
 800b18c:	e013      	b.n	800b1b6 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	2b03      	cmp	r3, #3
 800b192:	d102      	bne.n	800b19a <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800b194:	4b0f      	ldr	r3, [pc, #60]	; (800b1d4 <_Z23StringFromOrdinalNumberj+0x78>)
 800b196:	60fb      	str	r3, [r7, #12]
 800b198:	e00d      	b.n	800b1b6 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d102      	bne.n	800b1a6 <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800b1a0:	4b0d      	ldr	r3, [pc, #52]	; (800b1d8 <_Z23StringFromOrdinalNumberj+0x7c>)
 800b1a2:	60fb      	str	r3, [r7, #12]
 800b1a4:	e007      	b.n	800b1b6 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d102      	bne.n	800b1b2 <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800b1ac:	4b0b      	ldr	r3, [pc, #44]	; (800b1dc <_Z23StringFromOrdinalNumberj+0x80>)
 800b1ae:	60fb      	str	r3, [r7, #12]
 800b1b0:	e001      	b.n	800b1b6 <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800b1b2:	4b07      	ldr	r3, [pc, #28]	; (800b1d0 <_Z23StringFromOrdinalNumberj+0x74>)
 800b1b4:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	4908      	ldr	r1, [pc, #32]	; (800b1e0 <_Z23StringFromOrdinalNumberj+0x84>)
 800b1be:	f7ff fe03 	bl	800adc8 <_Z16StringFromFormatPKcz>
}
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	cccccccd 	.word	0xcccccccd
 800b1d0:	08020e70 	.word	0x08020e70
 800b1d4:	08020e74 	.word	0x08020e74
 800b1d8:	08020e78 	.word	0x08020e78
 800b1dc:	08020e7c 	.word	0x08020e7c
 800b1e0:	08020e80 	.word	0x08020e80

0800b1e4 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	4907      	ldr	r1, [pc, #28]	; (800b210 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fe fd29 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	60da      	str	r2, [r3, #12]
}
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4618      	mov	r0, r3
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	08020d88 	.word	0x08020d88

0800b214 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800b214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d01e      	beq.n	800b264 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3b04      	subs	r3, #4
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	00db      	lsls	r3, r3, #3
 800b234:	18d4      	adds	r4, r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	429c      	cmp	r4, r3
 800b23c:	d004      	beq.n	800b248 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800b23e:	3c08      	subs	r4, #8
 800b240:	4620      	mov	r0, r4
 800b242:	f7ff f8ba 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800b246:	e7f6      	b.n	800b236 <_ZN22SimpleStringCollection8allocateEj+0x22>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f1a3 0208 	sub.w	r2, r3, #8
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3b04      	subs	r3, #4
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	3301      	adds	r3, #1
 800b25a:	00db      	lsls	r3, r3, #3
 800b25c:	4619      	mov	r1, r3
 800b25e:	4610      	mov	r0, r2
 800b260:	f7fc f976 	bl	8007550 <_ZdaPvj>

    size_ = _size;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	68dc      	ldr	r4, [r3, #12]
 800b26e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800b272:	d202      	bcs.n	800b27a <_ZN22SimpleStringCollection8allocateEj+0x66>
 800b274:	1c63      	adds	r3, r4, #1
 800b276:	00db      	lsls	r3, r3, #3
 800b278:	e001      	b.n	800b27e <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800b27a:	f04f 33ff 	mov.w	r3, #4294967295
 800b27e:	f240 4227 	movw	r2, #1063	; 0x427
 800b282:	4910      	ldr	r1, [pc, #64]	; (800b2c4 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800b284:	4618      	mov	r0, r3
 800b286:	f7fc f941 	bl	800750c <_ZnajPKci>
 800b28a:	4605      	mov	r5, r0
 800b28c:	1d2b      	adds	r3, r5, #4
 800b28e:	3b04      	subs	r3, #4
 800b290:	2208      	movs	r2, #8
 800b292:	601a      	str	r2, [r3, #0]
 800b294:	1d2b      	adds	r3, r5, #4
 800b296:	601c      	str	r4, [r3, #0]
 800b298:	f105 0308 	add.w	r3, r5, #8
 800b29c:	1e62      	subs	r2, r4, #1
 800b29e:	4614      	mov	r4, r2
 800b2a0:	461e      	mov	r6, r3
 800b2a2:	2c00      	cmp	r4, #0
 800b2a4:	db06      	blt.n	800b2b4 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800b2a6:	4908      	ldr	r1, [pc, #32]	; (800b2c8 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f7fe fcce 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800b2ae:	3608      	adds	r6, #8
 800b2b0:	3c01      	subs	r4, #1
 800b2b2:	e7f6      	b.n	800b2a2 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800b2b4:	f105 0208 	add.w	r2, r5, #8
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	601a      	str	r2, [r3, #0]
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2c4:	08020cc8 	.word	0x08020cc8
 800b2c8:	08020d88 	.word	0x08020d88

0800b2cc <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800b2cc:	b590      	push	{r4, r7, lr}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d01e      	beq.n	800b31a <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3b04      	subs	r3, #4
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	00db      	lsls	r3, r3, #3
 800b2ea:	18d4      	adds	r4, r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	429c      	cmp	r4, r3
 800b2f2:	d004      	beq.n	800b2fe <_ZN22SimpleStringCollectionD1Ev+0x32>
 800b2f4:	3c08      	subs	r4, #8
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f7ff f85f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800b2fc:	e7f6      	b.n	800b2ec <_ZN22SimpleStringCollectionD1Ev+0x20>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f1a3 0208 	sub.w	r2, r3, #8
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	3b04      	subs	r3, #4
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	3301      	adds	r3, #1
 800b310:	00db      	lsls	r3, r3, #3
 800b312:	4619      	mov	r1, r3
 800b314:	4610      	mov	r0, r2
 800b316:	f7fc f91b 	bl	8007550 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	3304      	adds	r3, #4
 800b31e:	4618      	mov	r0, r3
 800b320:	f7ff f84b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4618      	mov	r0, r3
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd90      	pop	{r4, r7, pc}

0800b32e <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800b32e:	b480      	push	{r7}
 800b330:	b083      	sub	sp, #12
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
    return size_;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	68db      	ldr	r3, [r3, #12]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr
	...

0800b348 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800b348:	b590      	push	{r4, r7, lr}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d315      	bcc.n	800b388 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	1d1c      	adds	r4, r3, #4
 800b360:	f107 0308 	add.w	r3, r7, #8
 800b364:	490d      	ldr	r1, [pc, #52]	; (800b39c <_ZN22SimpleStringCollectionixEj+0x54>)
 800b366:	4618      	mov	r0, r3
 800b368:	f7fe fc6f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800b36c:	f107 0308 	add.w	r3, r7, #8
 800b370:	4619      	mov	r1, r3
 800b372:	4620      	mov	r0, r4
 800b374:	f7fe fcd5 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800b378:	f107 0308 	add.w	r3, r7, #8
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7ff f81c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        return empty_;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	3304      	adds	r3, #4
 800b386:	e004      	b.n	800b392 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	00db      	lsls	r3, r3, #3
 800b390:	4413      	add	r3, r2
}
 800b392:	4618      	mov	r0, r3
 800b394:	3714      	adds	r7, #20
 800b396:	46bd      	mov	sp, r7
 800b398:	bd90      	pop	{r4, r7, pc}
 800b39a:	bf00      	nop
 800b39c:	08020d88 	.word	0x08020d88

0800b3a0 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fa fb88 	bl	8005ac0 <_ZN17ConsoleTestOutputC1Ev>
 800b3b0:	4a08      	ldr	r2, [pc, #32]	; (800b3d4 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	601a      	str	r2, [r3, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	611a      	str	r2, [r3, #16]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	3314      	adds	r3, #20
 800b3c0:	4905      	ldr	r1, [pc, #20]	; (800b3d8 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fe fc41 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
{
}
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3708      	adds	r7, #8
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	08023e7c 	.word	0x08023e7c
 800b3d8:	08020e88 	.word	0x08020e88

0800b3dc <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	4a08      	ldr	r2, [pc, #32]	; (800b408 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	601a      	str	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3314      	adds	r3, #20
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fe ffe3 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fa fb74 	bl	8005ae4 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4618      	mov	r0, r3
 800b400:	3708      	adds	r7, #8
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	08023e7c 	.word	0x08023e7c

0800b40c <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
}
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff ffe1 	bl	800b3dc <_ZN18TeamCityTestOutputD1Ev>
 800b41a:	211c      	movs	r1, #28
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7fc f865 	bl	80074ec <_ZdlPvj>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4618      	mov	r0, r3
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	332c      	adds	r3, #44	; 0x2c
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	492b      	ldr	r1, [pc, #172]	; (800b4f0 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800b442:	4610      	mov	r0, r2
 800b444:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800b446:	f107 0308 	add.w	r3, r7, #8
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	4618      	mov	r0, r3
 800b44e:	f004 fdf7 	bl	8010040 <_ZNK10UtestShell7getNameEv>
 800b452:	f107 0308 	add.w	r3, r7, #8
 800b456:	4618      	mov	r0, r3
 800b458:	f7fe ff82 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800b45c:	4603      	mov	r3, r0
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 f919 	bl	800b698 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b466:	f107 0308 	add.w	r3, r7, #8
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fe ffa5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    print("']\n");
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	332c      	adds	r3, #44	; 0x2c
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	491e      	ldr	r1, [pc, #120]	; (800b4f4 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800b47c:	4610      	mov	r0, r2
 800b47e:	4798      	blx	r3
    if (!test.willRun()) {
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	3318      	adds	r3, #24
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	6838      	ldr	r0, [r7, #0]
 800b48a:	4798      	blx	r3
 800b48c:	4603      	mov	r3, r0
 800b48e:	f083 0301 	eor.w	r3, r3, #1
 800b492:	b2db      	uxtb	r3, r3
 800b494:	2b00      	cmp	r3, #0
 800b496:	d024      	beq.n	800b4e2 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	332c      	adds	r3, #44	; 0x2c
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4915      	ldr	r1, [pc, #84]	; (800b4f8 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800b4a4:	4610      	mov	r0, r2
 800b4a6:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800b4a8:	f107 0310 	add.w	r3, r7, #16
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f004 fdc6 	bl	8010040 <_ZNK10UtestShell7getNameEv>
 800b4b4:	f107 0310 	add.w	r3, r7, #16
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fe ff51 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f8e8 	bl	800b698 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b4c8:	f107 0310 	add.w	r3, r7, #16
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fe ff74 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        print("']\n");
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	332c      	adds	r3, #44	; 0x2c
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4905      	ldr	r1, [pc, #20]	; (800b4f4 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800b4de:	4610      	mov	r0, r2
 800b4e0:	4798      	blx	r3
    }
    currtest_ = &test;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	611a      	str	r2, [r3, #16]
}
 800b4e8:	bf00      	nop
 800b4ea:	3718      	adds	r7, #24
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	08020e8c 	.word	0x08020e8c
 800b4f4:	08020eac 	.word	0x08020eac
 800b4f8:	08020eb0 	.word	0x08020eb0

0800b4fc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800b4fc:	b5b0      	push	{r4, r5, r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d03b      	beq.n	800b586 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	332c      	adds	r3, #44	; 0x2c
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	491d      	ldr	r1, [pc, #116]	; (800b590 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800b51a:	4610      	mov	r0, r2
 800b51c:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	691a      	ldr	r2, [r3, #16]
 800b522:	f107 0308 	add.w	r3, r7, #8
 800b526:	4611      	mov	r1, r2
 800b528:	4618      	mov	r0, r3
 800b52a:	f004 fd89 	bl	8010040 <_ZNK10UtestShell7getNameEv>
 800b52e:	f107 0308 	add.w	r3, r7, #8
 800b532:	4618      	mov	r0, r3
 800b534:	f7fe ff14 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800b538:	4603      	mov	r3, r0
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 f8ab 	bl	800b698 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b542:	f107 0308 	add.w	r3, r7, #8
 800b546:	4618      	mov	r0, r3
 800b548:	f7fe ff37 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	332c      	adds	r3, #44	; 0x2c
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	490f      	ldr	r1, [pc, #60]	; (800b594 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800b558:	4610      	mov	r0, r2
 800b55a:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800b55c:	687d      	ldr	r5, [r7, #4]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3334      	adds	r3, #52	; 0x34
 800b564:	681c      	ldr	r4, [r3, #0]
 800b566:	6838      	ldr	r0, [r7, #0]
 800b568:	f004 fa0a 	bl	800f980 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800b56c:	4603      	mov	r3, r0
 800b56e:	4619      	mov	r1, r3
 800b570:	4628      	mov	r0, r5
 800b572:	47a0      	blx	r4
    print("']\n");
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	332c      	adds	r3, #44	; 0x2c
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4906      	ldr	r1, [pc, #24]	; (800b598 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800b580:	4610      	mov	r0, r2
 800b582:	4798      	blx	r3
 800b584:	e000      	b.n	800b588 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800b586:	bf00      	nop
}
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bdb0      	pop	{r4, r5, r7, pc}
 800b58e:	bf00      	nop
 800b590:	08020ed0 	.word	0x08020ed0
 800b594:	08020ef0 	.word	0x08020ef0
 800b598:	08020eac 	.word	0x08020eac

0800b59c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800b59c:	b590      	push	{r4, r7, lr}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f103 0414 	add.w	r4, r3, #20
 800b5ac:	f107 0308 	add.w	r3, r7, #8
 800b5b0:	6839      	ldr	r1, [r7, #0]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f004 fd53 	bl	801005e <_ZNK10UtestShell8getGroupEv>
 800b5b8:	f107 0308 	add.w	r3, r7, #8
 800b5bc:	4619      	mov	r1, r3
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f7fe fbaf 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800b5c4:	f107 0308 	add.w	r3, r7, #8
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fe fef6 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	332c      	adds	r3, #44	; 0x2c
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	490c      	ldr	r1, [pc, #48]	; (800b60c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800b5da:	4610      	mov	r0, r2
 800b5dc:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	3314      	adds	r3, #20
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7fe febc 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f853 	bl	800b698 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	332c      	adds	r3, #44	; 0x2c
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4904      	ldr	r1, [pc, #16]	; (800b610 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800b5fe:	4610      	mov	r0, r2
 800b600:	4798      	blx	r3
}
 800b602:	bf00      	nop
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	bd90      	pop	{r4, r7, pc}
 800b60a:	bf00      	nop
 800b60c:	08020f00 	.word	0x08020f00
 800b610:	08020eac 	.word	0x08020eac

0800b614 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800b614:	b590      	push	{r4, r7, lr}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f103 0414 	add.w	r4, r3, #20
 800b624:	f107 0308 	add.w	r3, r7, #8
 800b628:	4918      	ldr	r1, [pc, #96]	; (800b68c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7fe fb0d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800b630:	f107 0308 	add.w	r3, r7, #8
 800b634:	4619      	mov	r1, r3
 800b636:	4620      	mov	r0, r4
 800b638:	f7fe fecb 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 800b63c:	4603      	mov	r3, r0
 800b63e:	461c      	mov	r4, r3
 800b640:	f107 0308 	add.w	r3, r7, #8
 800b644:	4618      	mov	r0, r3
 800b646:	f7fe feb8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800b64a:	2c00      	cmp	r4, #0
 800b64c:	d11a      	bne.n	800b684 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	332c      	adds	r3, #44	; 0x2c
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	490d      	ldr	r1, [pc, #52]	; (800b690 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800b65a:	4610      	mov	r0, r2
 800b65c:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	3314      	adds	r3, #20
 800b662:	4618      	mov	r0, r3
 800b664:	f7fe fe7c 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800b668:	4603      	mov	r3, r0
 800b66a:	4619      	mov	r1, r3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f813 	bl	800b698 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	332c      	adds	r3, #44	; 0x2c
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4905      	ldr	r1, [pc, #20]	; (800b694 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800b67e:	4610      	mov	r0, r2
 800b680:	4798      	blx	r3
 800b682:	e000      	b.n	800b686 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800b684:	bf00      	nop
}
 800b686:	3714      	adds	r7, #20
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd90      	pop	{r4, r7, pc}
 800b68c:	08020e88 	.word	0x08020e88
 800b690:	08020f24 	.word	0x08020f24
 800b694:	08020eac 	.word	0x08020eac

0800b698 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
    while (*s) {
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d03f      	beq.n	800b72a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	2b27      	cmp	r3, #39	; 0x27
 800b6b0:	d00b      	beq.n	800b6ca <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	2b7c      	cmp	r3, #124	; 0x7c
 800b6b8:	d007      	beq.n	800b6ca <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	2b5b      	cmp	r3, #91	; 0x5b
 800b6c0:	d003      	beq.n	800b6ca <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	2b5d      	cmp	r3, #93	; 0x5d
 800b6c8:	d107      	bne.n	800b6da <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800b6ca:	237c      	movs	r3, #124	; 0x7c
 800b6cc:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	73bb      	strb	r3, [r7, #14]
 800b6d8:	e01a      	b.n	800b710 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	2b0d      	cmp	r3, #13
 800b6e0:	d106      	bne.n	800b6f0 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800b6e2:	237c      	movs	r3, #124	; 0x7c
 800b6e4:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800b6e6:	2372      	movs	r3, #114	; 0x72
 800b6e8:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	73bb      	strb	r3, [r7, #14]
 800b6ee:	e00f      	b.n	800b710 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	2b0a      	cmp	r3, #10
 800b6f6:	d106      	bne.n	800b706 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800b6f8:	237c      	movs	r3, #124	; 0x7c
 800b6fa:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800b6fc:	236e      	movs	r3, #110	; 0x6e
 800b6fe:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	73bb      	strb	r3, [r7, #14]
 800b704:	e004      	b.n	800b710 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3328      	adds	r3, #40	; 0x28
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f107 010c 	add.w	r1, r7, #12
 800b71e:	4610      	mov	r0, r2
 800b720:	4798      	blx	r3
        s++;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	3301      	adds	r3, #1
 800b726:	603b      	str	r3, [r7, #0]
    while (*s) {
 800b728:	e7bb      	b.n	800b6a2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800b72a:	bf00      	nop
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
	...

0800b734 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800b734:	b5b0      	push	{r4, r5, r7, lr}
 800b736:	b08a      	sub	sp, #40	; 0x28
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	332c      	adds	r3, #44	; 0x2c
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4968      	ldr	r1, [pc, #416]	; (800b8ec <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800b74a:	4610      	mov	r0, r2
 800b74c:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3310      	adds	r3, #16
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f107 0208 	add.w	r2, r7, #8
 800b75a:	6839      	ldr	r1, [r7, #0]
 800b75c:	4610      	mov	r0, r2
 800b75e:	4798      	blx	r3
 800b760:	f107 0308 	add.w	r3, r7, #8
 800b764:	4618      	mov	r0, r3
 800b766:	f7fe fdfb 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800b76a:	4603      	mov	r3, r0
 800b76c:	4619      	mov	r1, r3
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f7ff ff92 	bl	800b698 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b774:	f107 0308 	add.w	r3, r7, #8
 800b778:	4618      	mov	r0, r3
 800b77a:	f7fe fe1e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    print("' message='");
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	332c      	adds	r3, #44	; 0x2c
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4959      	ldr	r1, [pc, #356]	; (800b8f0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800b78a:	4610      	mov	r0, r2
 800b78c:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800b78e:	6838      	ldr	r0, [r7, #0]
 800b790:	f000 fa15 	bl	800bbbe <_ZNK11TestFailure17isOutsideTestFileEv>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d105      	bne.n	800b7a6 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800b79a:	6838      	ldr	r0, [r7, #0]
 800b79c:	f000 fa21 	bl	800bbe2 <_ZNK11TestFailure18isInHelperFunctionEv>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e000      	b.n	800b7ac <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d042      	beq.n	800b836 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	332c      	adds	r3, #44	; 0x2c
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	494e      	ldr	r1, [pc, #312]	; (800b8f4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800b7bc:	4610      	mov	r0, r2
 800b7be:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800b7c0:	687d      	ldr	r5, [r7, #4]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	332c      	adds	r3, #44	; 0x2c
 800b7c8:	681c      	ldr	r4, [r3, #0]
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	331c      	adds	r3, #28
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f107 0210 	add.w	r2, r7, #16
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	4610      	mov	r0, r2
 800b7da:	4798      	blx	r3
 800b7dc:	f107 0310 	add.w	r3, r7, #16
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7fe fdbd 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	47a0      	blx	r4
 800b7ee:	f107 0310 	add.w	r3, r7, #16
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe fde1 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        print(":");
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	332c      	adds	r3, #44	; 0x2c
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	493d      	ldr	r1, [pc, #244]	; (800b8f8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800b804:	4610      	mov	r0, r2
 800b806:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800b808:	687d      	ldr	r5, [r7, #4]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3334      	adds	r3, #52	; 0x34
 800b810:	681c      	ldr	r4, [r3, #0]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	3320      	adds	r3, #32
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6838      	ldr	r0, [r7, #0]
 800b81c:	4798      	blx	r3
 800b81e:	4603      	mov	r3, r0
 800b820:	4619      	mov	r1, r3
 800b822:	4628      	mov	r0, r5
 800b824:	47a0      	blx	r4
        print("): ");
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	332c      	adds	r3, #44	; 0x2c
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4932      	ldr	r1, [pc, #200]	; (800b8fc <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800b832:	4610      	mov	r0, r2
 800b834:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	3308      	adds	r3, #8
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f107 0218 	add.w	r2, r7, #24
 800b842:	6839      	ldr	r1, [r7, #0]
 800b844:	4610      	mov	r0, r2
 800b846:	4798      	blx	r3
 800b848:	f107 0318 	add.w	r3, r7, #24
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7fe fd87 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800b852:	4603      	mov	r3, r0
 800b854:	4619      	mov	r1, r3
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f7ff ff1e 	bl	800b698 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b85c:	f107 0318 	add.w	r3, r7, #24
 800b860:	4618      	mov	r0, r3
 800b862:	f7fe fdaa 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    print(":");
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	332c      	adds	r3, #44	; 0x2c
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4921      	ldr	r1, [pc, #132]	; (800b8f8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800b872:	4610      	mov	r0, r2
 800b874:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800b876:	687d      	ldr	r5, [r7, #4]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	3334      	adds	r3, #52	; 0x34
 800b87e:	681c      	ldr	r4, [r3, #0]
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3314      	adds	r3, #20
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	6838      	ldr	r0, [r7, #0]
 800b88a:	4798      	blx	r3
 800b88c:	4603      	mov	r3, r0
 800b88e:	4619      	mov	r1, r3
 800b890:	4628      	mov	r0, r5
 800b892:	47a0      	blx	r4

    print("' details='");
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	332c      	adds	r3, #44	; 0x2c
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4918      	ldr	r1, [pc, #96]	; (800b900 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	3318      	adds	r3, #24
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f107 0220 	add.w	r2, r7, #32
 800b8b0:	6839      	ldr	r1, [r7, #0]
 800b8b2:	4610      	mov	r0, r2
 800b8b4:	4798      	blx	r3
 800b8b6:	f107 0320 	add.w	r3, r7, #32
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fe fd50 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7ff fee7 	bl	800b698 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b8ca:	f107 0320 	add.w	r3, r7, #32
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fe fd73 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    print("']\n");
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	332c      	adds	r3, #44	; 0x2c
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4909      	ldr	r1, [pc, #36]	; (800b904 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800b8e0:	4610      	mov	r0, r2
 800b8e2:	4798      	blx	r3
}
 800b8e4:	bf00      	nop
 800b8e6:	3728      	adds	r7, #40	; 0x28
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bdb0      	pop	{r4, r5, r7, pc}
 800b8ec:	08020f48 	.word	0x08020f48
 800b8f0:	08020f68 	.word	0x08020f68
 800b8f4:	08020f74 	.word	0x08020f74
 800b8f8:	08020f84 	.word	0x08020f84
 800b8fc:	08020f88 	.word	0x08020f88
 800b900:	08020f8c 	.word	0x08020f8c
 800b904:	08020eac 	.word	0x08020eac

0800b908 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800b914:	4a1a      	ldr	r2, [pc, #104]	; (800b980 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	601a      	str	r2, [r3, #0]
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	3314      	adds	r3, #20
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	3204      	adds	r2, #4
 800b926:	68b9      	ldr	r1, [r7, #8]
 800b928:	4610      	mov	r0, r2
 800b92a:	4798      	blx	r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	330c      	adds	r3, #12
 800b930:	68b9      	ldr	r1, [r7, #8]
 800b932:	4618      	mov	r0, r3
 800b934:	f004 fb84 	bl	8010040 <_ZNK10UtestShell7getNameEv>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	3314      	adds	r3, #20
 800b93c:	68b9      	ldr	r1, [r7, #8]
 800b93e:	4618      	mov	r0, r3
 800b940:	f004 fc4f 	bl	80101e2 <_ZNK10UtestShell7getFileEv>
 800b944:	68b8      	ldr	r0, [r7, #8]
 800b946:	f004 fc5b 	bl	8010200 <_ZNK10UtestShell13getLineNumberEv>
 800b94a:	4602      	mov	r2, r0
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	61da      	str	r2, [r3, #28]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	3320      	adds	r3, #32
 800b954:	68b9      	ldr	r1, [r7, #8]
 800b956:	4618      	mov	r0, r3
 800b958:	f004 fc43 	bl	80101e2 <_ZNK10UtestShell7getFileEv>
 800b95c:	68b8      	ldr	r0, [r7, #8]
 800b95e:	f004 fc4f 	bl	8010200 <_ZNK10UtestShell13getLineNumberEv>
 800b962:	4602      	mov	r2, r0
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	629a      	str	r2, [r3, #40]	; 0x28
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	332c      	adds	r3, #44	; 0x2c
 800b96c:	6879      	ldr	r1, [r7, #4]
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe f9bf 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
{
}
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	4618      	mov	r0, r3
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	08024148 	.word	0x08024148

0800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800b992:	4a19      	ldr	r2, [pc, #100]	; (800b9f8 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	601a      	str	r2, [r3, #0]
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	3314      	adds	r3, #20
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	3204      	adds	r2, #4
 800b9a4:	68b9      	ldr	r1, [r7, #8]
 800b9a6:	4610      	mov	r0, r2
 800b9a8:	4798      	blx	r3
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	330c      	adds	r3, #12
 800b9ae:	68b9      	ldr	r1, [r7, #8]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f004 fb45 	bl	8010040 <_ZNK10UtestShell7getNameEv>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3314      	adds	r3, #20
 800b9ba:	6879      	ldr	r1, [r7, #4]
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7fe f944 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	61da      	str	r2, [r3, #28]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	3320      	adds	r3, #32
 800b9cc:	68b9      	ldr	r1, [r7, #8]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f004 fc07 	bl	80101e2 <_ZNK10UtestShell7getFileEv>
 800b9d4:	68b8      	ldr	r0, [r7, #8]
 800b9d6:	f004 fc13 	bl	8010200 <_ZNK10UtestShell13getLineNumberEv>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	629a      	str	r2, [r3, #40]	; 0x28
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	332c      	adds	r3, #44	; 0x2c
 800b9e4:	4905      	ldr	r1, [pc, #20]	; (800b9fc <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fe f92f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
{
}
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	08024148 	.word	0x08024148
 800b9fc:	08020f98 	.word	0x08020f98

0800ba00 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800ba0a:	4a1e      	ldr	r2, [pc, #120]	; (800ba84 <_ZN11TestFailureC1ERKS_+0x84>)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	601a      	str	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	1d1a      	adds	r2, r3, #4
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	3304      	adds	r3, #4
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4610      	mov	r0, r2
 800ba1c:	f7fe f969 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f103 020c 	add.w	r2, r3, #12
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	330c      	adds	r3, #12
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	f7fe f960 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f103 0214 	add.w	r2, r3, #20
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	3314      	adds	r3, #20
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	4610      	mov	r0, r2
 800ba40:	f7fe f957 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	69da      	ldr	r2, [r3, #28]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	61da      	str	r2, [r3, #28]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f103 0220 	add.w	r2, r3, #32
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	3320      	adds	r3, #32
 800ba56:	4619      	mov	r1, r3
 800ba58:	4610      	mov	r0, r2
 800ba5a:	f7fe f94a 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	629a      	str	r2, [r3, #40]	; 0x28
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	332c      	adds	r3, #44	; 0x2c
 800ba70:	4619      	mov	r1, r3
 800ba72:	4610      	mov	r0, r2
 800ba74:	f7fe f93d 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
{
}
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	08024148 	.word	0x08024148

0800ba88 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	4a10      	ldr	r2, [pc, #64]	; (800bad4 <_ZN11TestFailureD1Ev+0x4c>)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	601a      	str	r2, [r3, #0]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	332c      	adds	r3, #44	; 0x2c
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fe fc8d 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	3320      	adds	r3, #32
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fe fc88 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	3314      	adds	r3, #20
 800baae:	4618      	mov	r0, r3
 800bab0:	f7fe fc83 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	330c      	adds	r3, #12
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fe fc7e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	3304      	adds	r3, #4
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fe fc79 	bl	800a3ba <_ZN12SimpleStringD1Ev>
{
}
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	4618      	mov	r0, r3
 800bacc:	3708      	adds	r7, #8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	08024148 	.word	0x08024148

0800bad8 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
}
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7ff ffd1 	bl	800ba88 <_ZN11TestFailureD1Ev>
 800bae6:	2134      	movs	r1, #52	; 0x34
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f7fb fcff 	bl	80074ec <_ZdlPvj>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4618      	mov	r0, r3
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
    return fileName_;
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	3314      	adds	r3, #20
 800bb06:	4619      	mov	r1, r3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7fe f8f2 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
}
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	3708      	adds	r7, #8
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b082      	sub	sp, #8
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
 800bb1e:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	3320      	adds	r3, #32
 800bb24:	4619      	mov	r1, r3
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7fe f8e3 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
}
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
    return testName_;
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	3304      	adds	r3, #4
 800bb42:	4619      	mov	r1, r3
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f7fe f8d4 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
}
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	330c      	adds	r3, #12
 800bb60:	4619      	mov	r1, r3
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f7fe f8c5 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
}
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	69db      	ldr	r3, [r3, #28]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
    return message_;
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	332c      	adds	r3, #44	; 0x2c
 800bbae:	4619      	mov	r1, r3
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f7fe f89e 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
}
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b082      	sub	sp, #8
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f103 0220 	add.w	r2, r3, #32
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	3314      	adds	r3, #20
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	4610      	mov	r0, r2
 800bbd4:	f7fe fc42 	bl	800a45c <_ZneRK12SimpleStringS1_>
 800bbd8:	4603      	mov	r3, r0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b083      	sub	sp, #12
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	69da      	ldr	r2, [r3, #28]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	bf34      	ite	cc
 800bbf6:	2301      	movcc	r3, #1
 800bbf8:	2300      	movcs	r3, #0
 800bbfa:	b2db      	uxtb	r3, r3
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800bc08:	b590      	push	{r4, r7, lr}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f7fe fba2 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	6838      	ldr	r0, [r7, #0]
 800bc20:	f7fe fb9e 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800bc24:	4603      	mov	r3, r0
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	4622      	mov	r2, r4
 800bc2a:	4903      	ldr	r1, [pc, #12]	; (800bc38 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800bc2c:	f7ff f8cc 	bl	800adc8 <_Z16StringFromFormatPKcz>
}
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd90      	pop	{r4, r7, pc}
 800bc38:	08020fa4 	.word	0x08020fa4

0800bc3c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800bc3c:	b590      	push	{r4, r7, lr}
 800bc3e:	b097      	sub	sp, #92	; 0x5c
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
 800bc48:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800bc4a:	494c      	ldr	r1, [pc, #304]	; (800bd7c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f7fd fffc 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800bc52:	2314      	movs	r3, #20
 800bc54:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800bc56:	230a      	movs	r3, #10
 800bc58:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800bc5a:	f107 0320 	add.w	r3, r7, #32
 800bc5e:	220a      	movs	r2, #10
 800bc60:	4947      	ldr	r1, [pc, #284]	; (800bd80 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fe f80c 	bl	8009c80 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800bc68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bc6c:	f107 0120 	add.w	r1, r7, #32
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fe fc03 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800bc78:	f107 0318 	add.w	r3, r7, #24
 800bc7c:	f107 0220 	add.w	r2, r7, #32
 800bc80:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7fe fbfa 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800bc8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fe fb93 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800bc94:	f107 0310 	add.w	r3, r7, #16
 800bc98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc9a:	493a      	ldr	r1, [pc, #232]	; (800bd84 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7ff f893 	bl	800adc8 <_Z16StringFromFormatPKcz>

    result += "\n";
 800bca2:	4939      	ldr	r1, [pc, #228]	; (800bd88 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f7fe fc17 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800bcaa:	f107 0310 	add.w	r3, r7, #16
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fe fb56 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800bcba:	f107 0118 	add.w	r1, r7, #24
 800bcbe:	2314      	movs	r3, #20
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	f7fe fc83 	bl	800a5cc <_ZNK12SimpleString9subStringEjj>
 800bcc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fe fb48 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800bcd6:	4622      	mov	r2, r4
 800bcd8:	492c      	ldr	r1, [pc, #176]	; (800bd8c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800bcda:	f7ff f875 	bl	800adc8 <_Z16StringFromFormatPKcz>
 800bcde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bce2:	4619      	mov	r1, r3
 800bce4:	68f8      	ldr	r0, [r7, #12]
 800bce6:	f7fe fbe5 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800bcea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7fe fb63 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800bcf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7fe fb5e 	bl	800a3ba <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800bcfe:	f107 0310 	add.w	r3, r7, #16
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fe fb38 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	f103 020a 	add.w	r2, r3, #10
 800bd0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bd12:	491b      	ldr	r1, [pc, #108]	; (800bd80 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7fd ffb3 	bl	8009c80 <_ZN12SimpleStringC1EPKcj>
 800bd1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7fe fb1e 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800bd24:	4602      	mov	r2, r0
 800bd26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bd2a:	4919      	ldr	r1, [pc, #100]	; (800bd90 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff f84b 	bl	800adc8 <_Z16StringFromFormatPKcz>
 800bd32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bd36:	4619      	mov	r1, r3
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f7fe fbbb 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800bd3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fe fb39 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800bd48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7fe fb34 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return result;
 800bd52:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800bd54:	f107 0310 	add.w	r3, r7, #16
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fe fb2e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800bd5e:	f107 0318 	add.w	r3, r7, #24
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fe fb29 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800bd68:	f107 0320 	add.w	r3, r7, #32
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7fe fb24 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return result;
 800bd72:	bf00      	nop
}
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	375c      	adds	r7, #92	; 0x5c
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd90      	pop	{r4, r7, pc}
 800bd7c:	08020fc4 	.word	0x08020fc4
 800bd80:	08020fc8 	.word	0x08020fc8
 800bd84:	08020fcc 	.word	0x08020fcc
 800bd88:	08020ff4 	.word	0x08020ff4
 800bd8c:	08020ff8 	.word	0x08020ff8
 800bd90:	08021000 	.word	0x08021000

0800bd94 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800bd94:	b590      	push	{r4, r7, lr}
 800bd96:	b087      	sub	sp, #28
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800bda0:	491a      	ldr	r1, [pc, #104]	; (800be0c <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f7fd ff51 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f7fe faf5 	bl	800a398 <_ZNK12SimpleString7isEmptyEv>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	f083 0301 	eor.w	r3, r3, #1
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d022      	beq.n	800be00 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800bdba:	f107 0310 	add.w	r3, r7, #16
 800bdbe:	4914      	ldr	r1, [pc, #80]	; (800be10 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fd ff42 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800bdc6:	f107 0310 	add.w	r3, r7, #16
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f7fe f800 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	f083 0301 	eor.w	r3, r3, #1
 800bdd8:	b2dc      	uxtb	r4, r3
 800bdda:	f107 0310 	add.w	r3, r7, #16
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fe faeb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800bde4:	2c00      	cmp	r4, #0
 800bde6:	d003      	beq.n	800bdf0 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800bde8:	490a      	ldr	r1, [pc, #40]	; (800be14 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800bdea:	68f8      	ldr	r0, [r7, #12]
 800bdec:	f7fe fb74 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800bdf0:	6879      	ldr	r1, [r7, #4]
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f7fe fb5e 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800bdf8:	4907      	ldr	r1, [pc, #28]	; (800be18 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f7fe fb6c 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800be00:	bf00      	nop
}
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	371c      	adds	r7, #28
 800be06:	46bd      	mov	sp, r7
 800be08:	bd90      	pop	{r4, r7, pc}
 800be0a:	bf00      	nop
 800be0c:	08020fc4 	.word	0x08020fc4
 800be10:	08021008 	.word	0x08021008
 800be14:	08021014 	.word	0x08021014
 800be18:	08021020 	.word	0x08021020

0800be1c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800be1c:	b590      	push	{r4, r7, lr}
 800be1e:	b089      	sub	sp, #36	; 0x24
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
 800be28:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	68b9      	ldr	r1, [r7, #8]
 800be32:	f7ff fda7 	bl	800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800be36:	4a19      	ldr	r2, [pc, #100]	; (800be9c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800be42:	68f9      	ldr	r1, [r7, #12]
 800be44:	f107 0310 	add.w	r3, r7, #16
 800be48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7ff ffa2 	bl	800bd94 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800be50:	f107 0310 	add.w	r3, r7, #16
 800be54:	4619      	mov	r1, r3
 800be56:	4620      	mov	r0, r4
 800be58:	f7fd ff63 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800be5c:	f107 0310 	add.w	r3, r7, #16
 800be60:	4618      	mov	r0, r3
 800be62:	f7fe faaa 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800be6c:	68f9      	ldr	r1, [r7, #12]
 800be6e:	f107 0018 	add.w	r0, r7, #24
 800be72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be76:	f7ff fec7 	bl	800bc08 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800be7a:	f107 0318 	add.w	r3, r7, #24
 800be7e:	4619      	mov	r1, r3
 800be80:	4620      	mov	r0, r4
 800be82:	f7fe fb17 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800be86:	f107 0318 	add.w	r3, r7, #24
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fe fa95 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	4618      	mov	r0, r3
 800be94:	3724      	adds	r7, #36	; 0x24
 800be96:	46bd      	mov	sp, r7
 800be98:	bd90      	pop	{r4, r7, pc}
 800be9a:	bf00      	nop
 800be9c:	0802411c 	.word	0x0802411c

0800bea0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800bea0:	b5b0      	push	{r4, r5, r7, lr}
 800bea2:	b094      	sub	sp, #80	; 0x50
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6278      	str	r0, [r7, #36]	; 0x24
 800bea8:	6239      	str	r1, [r7, #32]
 800beaa:	61fa      	str	r2, [r7, #28]
 800beac:	61bb      	str	r3, [r7, #24]
 800beae:	ed87 0b04 	vstr	d0, [r7, #16]
 800beb2:	ed87 1b02 	vstr	d1, [r7, #8]
 800beb6:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800beba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	69fa      	ldr	r2, [r7, #28]
 800bec0:	6a39      	ldr	r1, [r7, #32]
 800bec2:	f7ff fd5f 	bl	800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800bec6:	4a4a      	ldr	r2, [pc, #296]	; (800bff0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800bec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beca:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800bed2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bed8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800beda:	4618      	mov	r0, r3
 800bedc:	f7ff ff5a 	bl	800bd94 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800bee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bee4:	4619      	mov	r1, r3
 800bee6:	4620      	mov	r0, r4
 800bee8:	f7fd ff1b 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800beec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7fe fa62 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800bef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800befc:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800befe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bf02:	2107      	movs	r1, #7
 800bf04:	ed97 0b04 	vldr	d0, [r7, #16]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7fe ff1b 	bl	800ad44 <_Z10StringFromdi>
 800bf0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf12:	2107      	movs	r1, #7
 800bf14:	ed97 0b02 	vldr	d0, [r7, #8]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7fe ff13 	bl	800ad44 <_Z10StringFromdi>
 800bf1e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800bf22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800bf2a:	4629      	mov	r1, r5
 800bf2c:	f7ff fe6c 	bl	800bc08 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800bf30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf34:	4619      	mov	r1, r3
 800bf36:	4620      	mov	r0, r4
 800bf38:	f7fe fabc 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800bf3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fe fa3a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800bf46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fe fa35 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800bf50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7fe fa30 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5c:	332c      	adds	r3, #44	; 0x2c
 800bf5e:	4925      	ldr	r1, [pc, #148]	; (800bff4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7fe fab9 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800bf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf68:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800bf6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bf70:	2107      	movs	r1, #7
 800bf72:	ed97 0b00 	vldr	d0, [r7]
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7fe fee4 	bl	800ad44 <_Z10StringFromdi>
 800bf7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bf80:	4619      	mov	r1, r3
 800bf82:	4620      	mov	r0, r4
 800bf84:	f7fe fa96 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800bf88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7fe fa14 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800bf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf94:	332c      	adds	r3, #44	; 0x2c
 800bf96:	4918      	ldr	r1, [pc, #96]	; (800bff8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7fe fa9d 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800bf9e:	4b17      	ldr	r3, [pc, #92]	; (800bffc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	ed97 0b04 	vldr	d0, [r7, #16]
 800bfa6:	4798      	blx	r3
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10f      	bne.n	800bfce <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800bfae:	4b13      	ldr	r3, [pc, #76]	; (800bffc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	ed97 0b02 	vldr	d0, [r7, #8]
 800bfb6:	4798      	blx	r3
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d107      	bne.n	800bfce <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800bfbe:	4b0f      	ldr	r3, [pc, #60]	; (800bffc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	ed97 0b00 	vldr	d0, [r7]
 800bfc6:	4798      	blx	r3
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e000      	b.n	800bfd4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d005      	beq.n	800bfe4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800bfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfda:	332c      	adds	r3, #44	; 0x2c
 800bfdc:	4908      	ldr	r1, [pc, #32]	; (800c000 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fe fa7a 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
}
 800bfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3750      	adds	r7, #80	; 0x50
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bdb0      	pop	{r4, r5, r7, pc}
 800bfee:	bf00      	nop
 800bff0:	080240f0 	.word	0x080240f0
 800bff4:	08021024 	.word	0x08021024
 800bff8:	0802103c 	.word	0x0802103c
 800bffc:	200000e4 	.word	0x200000e4
 800c000:	08021040 	.word	0x08021040

0800c004 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800c004:	b590      	push	{r4, r7, lr}
 800c006:	b093      	sub	sp, #76	; 0x4c
 800c008:	af02      	add	r7, sp, #8
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]
 800c010:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	68b9      	ldr	r1, [r7, #8]
 800c01a:	f7ff fcb3 	bl	800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c01e:	4a4f      	ldr	r2, [pc, #316]	; (800c15c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c02a:	68f9      	ldr	r1, [r7, #12]
 800c02c:	f107 0320 	add.w	r3, r7, #32
 800c030:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c032:	4618      	mov	r0, r3
 800c034:	f7ff feae 	bl	800bd94 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c038:	f107 0320 	add.w	r3, r7, #32
 800c03c:	4619      	mov	r1, r3
 800c03e:	4620      	mov	r0, r4
 800c040:	f7fd fe6f 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800c044:	f107 0320 	add.w	r3, r7, #32
 800c048:	4618      	mov	r0, r3
 800c04a:	f7fe f9b6 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800c04e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c050:	f7fe f986 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800c054:	4602      	mov	r2, r0
 800c056:	f107 0318 	add.w	r3, r7, #24
 800c05a:	4611      	mov	r1, r2
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7fe fc47 	bl	800a8f0 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800c062:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c064:	f7fe f97c 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800c068:	4602      	mov	r2, r0
 800c06a:	f107 0310 	add.w	r3, r7, #16
 800c06e:	4611      	mov	r1, r2
 800c070:	4618      	mov	r0, r3
 800c072:	f7fe fc3d 	bl	800a8f0 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c07c:	68f9      	ldr	r1, [r7, #12]
 800c07e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800c082:	f107 0310 	add.w	r3, r7, #16
 800c086:	f107 0218 	add.w	r2, r7, #24
 800c08a:	f7ff fdbd 	bl	800bc08 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c08e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c092:	4619      	mov	r1, r3
 800c094:	4620      	mov	r0, r4
 800c096:	f7fe fa0d 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800c09a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fe f98b 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0aa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c0ac:	f7fe fae9 	bl	800a682 <_ZNK12SimpleString2atEj>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	461c      	mov	r4, r3
 800c0b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0b6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c0b8:	f7fe fae3 	bl	800a682 <_ZNK12SimpleString2atEj>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	429c      	cmp	r4, r3
 800c0c0:	bf0c      	ite	eq
 800c0c2:	2301      	moveq	r3, #1
 800c0c4:	2300      	movne	r3, #0
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d003      	beq.n	800c0d4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800c0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0d2:	e7e9      	b.n	800c0a8 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c0d8:	f107 0310 	add.w	r3, r7, #16
 800c0dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fe facf 	bl	800a682 <_ZNK12SimpleString2atEj>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	461c      	mov	r4, r3
 800c0e8:	f107 0318 	add.w	r3, r7, #24
 800c0ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fe fac7 	bl	800a682 <_ZNK12SimpleString2atEj>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	429c      	cmp	r4, r3
 800c0f8:	bf0c      	ite	eq
 800c0fa:	2301      	moveq	r3, #1
 800c0fc:	2300      	movne	r3, #0
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	2b00      	cmp	r3, #0
 800c102:	d003      	beq.n	800c10c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	3301      	adds	r3, #1
 800c108:	63bb      	str	r3, [r7, #56]	; 0x38
 800c10a:	e7e5      	b.n	800c0d8 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c112:	68f9      	ldr	r1, [r7, #12]
 800c114:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c118:	f107 0210 	add.w	r2, r7, #16
 800c11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c122:	f7ff fd8b 	bl	800bc3c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800c126:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c12a:	4619      	mov	r1, r3
 800c12c:	4620      	mov	r0, r4
 800c12e:	f7fe f9c1 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800c132:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c136:	4618      	mov	r0, r3
 800c138:	f7fe f93f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800c13c:	f107 0310 	add.w	r3, r7, #16
 800c140:	4618      	mov	r0, r3
 800c142:	f7fe f93a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800c146:	f107 0318 	add.w	r3, r7, #24
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fe f935 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	4618      	mov	r0, r3
 800c154:	3744      	adds	r7, #68	; 0x44
 800c156:	46bd      	mov	sp, r7
 800c158:	bd90      	pop	{r4, r7, pc}
 800c15a:	bf00      	nop
 800c15c:	080240c4 	.word	0x080240c4

0800c160 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800c160:	b590      	push	{r4, r7, lr}
 800c162:	b087      	sub	sp, #28
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
 800c16c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c16e:	68f8      	ldr	r0, [r7, #12]
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	68b9      	ldr	r1, [r7, #8]
 800c176:	f7ff fc05 	bl	800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c17a:	4a1a      	ldr	r2, [pc, #104]	; (800c1e4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c186:	68f9      	ldr	r1, [r7, #12]
 800c188:	f107 0310 	add.w	r3, r7, #16
 800c18c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c18e:	4618      	mov	r0, r3
 800c190:	f7ff fe00 	bl	800bd94 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c194:	f107 0310 	add.w	r3, r7, #16
 800c198:	4619      	mov	r1, r3
 800c19a:	4620      	mov	r0, r4
 800c19c:	f7fd fdc1 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800c1a0:	f107 0310 	add.w	r3, r7, #16
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7fe f908 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	332c      	adds	r3, #44	; 0x2c
 800c1ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7fe f97f 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	332c      	adds	r3, #44	; 0x2c
 800c1ba:	490b      	ldr	r1, [pc, #44]	; (800c1e8 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7fe f98b 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	332c      	adds	r3, #44	; 0x2c
 800c1c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fe f973 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	332c      	adds	r3, #44	; 0x2c
 800c1d2:	4906      	ldr	r1, [pc, #24]	; (800c1ec <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fe f97f 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
}
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	371c      	adds	r7, #28
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd90      	pop	{r4, r7, pc}
 800c1e4:	08024098 	.word	0x08024098
 800c1e8:	08021064 	.word	0x08021064
 800c1ec:	08021068 	.word	0x08021068

0800c1f0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800c1f0:	b5b0      	push	{r4, r5, r7, lr}
 800c1f2:	b088      	sub	sp, #32
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
 800c1fc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	68b9      	ldr	r1, [r7, #8]
 800c206:	f7ff fbbd 	bl	800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c20a:	4a1c      	ldr	r2, [pc, #112]	; (800c27c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c216:	68f9      	ldr	r1, [r7, #12]
 800c218:	f107 0310 	add.w	r3, r7, #16
 800c21c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff fdb8 	bl	800bd94 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c224:	f107 0310 	add.w	r3, r7, #16
 800c228:	4619      	mov	r1, r3
 800c22a:	4620      	mov	r0, r4
 800c22c:	f7fd fd79 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800c230:	f107 0310 	add.w	r3, r7, #16
 800c234:	4618      	mov	r0, r3
 800c236:	f7fe f8c0 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c240:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c242:	f7fe f88d 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800c246:	4605      	mov	r5, r0
 800c248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c24a:	f7fe f889 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800c24e:	4603      	mov	r3, r0
 800c250:	f107 0018 	add.w	r0, r7, #24
 800c254:	462a      	mov	r2, r5
 800c256:	490a      	ldr	r1, [pc, #40]	; (800c280 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800c258:	f7fe fdb6 	bl	800adc8 <_Z16StringFromFormatPKcz>
 800c25c:	f107 0318 	add.w	r3, r7, #24
 800c260:	4619      	mov	r1, r3
 800c262:	4620      	mov	r0, r4
 800c264:	f7fe f926 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800c268:	f107 0318 	add.w	r3, r7, #24
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fe f8a4 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	4618      	mov	r0, r3
 800c276:	3720      	adds	r7, #32
 800c278:	46bd      	mov	sp, r7
 800c27a:	bdb0      	pop	{r4, r5, r7, pc}
 800c27c:	0802406c 	.word	0x0802406c
 800c280:	08021074 	.word	0x08021074

0800c284 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800c284:	b590      	push	{r4, r7, lr}
 800c286:	b087      	sub	sp, #28
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	68b9      	ldr	r1, [r7, #8]
 800c29a:	f7ff fb73 	bl	800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c29e:	4a1a      	ldr	r2, [pc, #104]	; (800c308 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c2aa:	68f9      	ldr	r1, [r7, #12]
 800c2ac:	f107 0310 	add.w	r3, r7, #16
 800c2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7ff fd6e 	bl	800bd94 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c2b8:	f107 0310 	add.w	r3, r7, #16
 800c2bc:	4619      	mov	r1, r3
 800c2be:	4620      	mov	r0, r4
 800c2c0:	f7fd fd2f 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800c2c4:	f107 0310 	add.w	r3, r7, #16
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7fe f876 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	332c      	adds	r3, #44	; 0x2c
 800c2d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7fe f8ed 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	332c      	adds	r3, #44	; 0x2c
 800c2de:	490b      	ldr	r1, [pc, #44]	; (800c30c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fe f8f9 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	332c      	adds	r3, #44	; 0x2c
 800c2ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fe f8e1 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	332c      	adds	r3, #44	; 0x2c
 800c2f6:	4906      	ldr	r1, [pc, #24]	; (800c310 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7fe f8ed 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
}
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	4618      	mov	r0, r3
 800c302:	371c      	adds	r7, #28
 800c304:	46bd      	mov	sp, r7
 800c306:	bd90      	pop	{r4, r7, pc}
 800c308:	08024040 	.word	0x08024040
 800c30c:	08021064 	.word	0x08021064
 800c310:	08021068 	.word	0x08021068

0800c314 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
 800c320:	603b      	str	r3, [r7, #0]
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	68b9      	ldr	r1, [r7, #8]
 800c32a:	f7ff fb2b 	bl	800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c32e:	4a07      	ldr	r2, [pc, #28]	; (800c34c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	332c      	adds	r3, #44	; 0x2c
 800c338:	69b9      	ldr	r1, [r7, #24]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fd fcf1 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
}
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	08023cfc 	.word	0x08023cfc

0800c350 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800c350:	b590      	push	{r4, r7, lr}
 800c352:	b09d      	sub	sp, #116	; 0x74
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
 800c35c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c35e:	68f8      	ldr	r0, [r7, #12]
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	68b9      	ldr	r1, [r7, #8]
 800c366:	f7ff fb0d 	bl	800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c36a:	4a5d      	ldr	r2, [pc, #372]	; (800c4e0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c376:	68f9      	ldr	r1, [r7, #12]
 800c378:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c37c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c380:	4618      	mov	r0, r3
 800c382:	f7ff fd07 	bl	800bd94 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c386:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c38a:	4619      	mov	r1, r3
 800c38c:	4620      	mov	r0, r4
 800c38e:	f7fd fcc8 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800c392:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c396:	4618      	mov	r0, r3
 800c398:	f7fe f80f 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800c39c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c3a0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fe fae1 	bl	800a96c <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800c3aa:	f107 0320 	add.w	r3, r7, #32
 800c3ae:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7fe fada 	bl	800a96c <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800c3b8:	f107 0120 	add.w	r1, r7, #32
 800c3bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c3c0:	2220      	movs	r2, #32
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fe f8b6 	bl	800a534 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c3c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c3cc:	4945      	ldr	r1, [pc, #276]	; (800c4e4 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fd fc3b 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800c3d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c3d8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c3dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7fe f84c 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800c3e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c3ea:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7fe fbd2 	bl	800ab98 <_Z30BracketsFormattedHexStringFroml>
 800c3f4:	f107 0318 	add.w	r3, r7, #24
 800c3f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c3fc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c400:	4618      	mov	r0, r3
 800c402:	f7fe f83c 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800c406:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fd ffd5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800c410:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c414:	4618      	mov	r0, r3
 800c416:	f7fd ffd0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800c41a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fd ffcb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c424:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c428:	492e      	ldr	r1, [pc, #184]	; (800c4e4 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fd fc0d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800c430:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c434:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c438:	f107 0120 	add.w	r1, r7, #32
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fe f81e 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800c442:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c446:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c44a:	4618      	mov	r0, r3
 800c44c:	f7fe fba4 	bl	800ab98 <_Z30BracketsFormattedHexStringFroml>
 800c450:	f107 0310 	add.w	r3, r7, #16
 800c454:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c458:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7fe f80e 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800c462:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c466:	4618      	mov	r0, r3
 800c468:	f7fd ffa7 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800c46c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c470:	4618      	mov	r0, r3
 800c472:	f7fd ffa2 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800c476:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7fd ff9d 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c486:	68f9      	ldr	r1, [r7, #12]
 800c488:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800c48c:	f107 0318 	add.w	r3, r7, #24
 800c490:	f107 0210 	add.w	r2, r7, #16
 800c494:	f7ff fbb8 	bl	800bc08 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c498:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c49c:	4619      	mov	r1, r3
 800c49e:	4620      	mov	r0, r4
 800c4a0:	f7fe f808 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800c4a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7fd ff86 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c4ae:	f107 0310 	add.w	r3, r7, #16
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7fd ff81 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c4b8:	f107 0318 	add.w	r3, r7, #24
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7fd ff7c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800c4c2:	f107 0320 	add.w	r3, r7, #32
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fd ff77 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800c4cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fd ff72 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3774      	adds	r7, #116	; 0x74
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd90      	pop	{r4, r7, pc}
 800c4e0:	08024014 	.word	0x08024014
 800c4e4:	08020fc8 	.word	0x08020fc8

0800c4e8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800c4e8:	b590      	push	{r4, r7, lr}
 800c4ea:	b09d      	sub	sp, #116	; 0x74
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
 800c4f4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	68b9      	ldr	r1, [r7, #8]
 800c4fe:	f7ff fa41 	bl	800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c502:	4a5d      	ldr	r2, [pc, #372]	; (800c678 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c50e:	68f9      	ldr	r1, [r7, #12]
 800c510:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c514:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c518:	4618      	mov	r0, r3
 800c51a:	f7ff fc3b 	bl	800bd94 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c51e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c522:	4619      	mov	r1, r3
 800c524:	4620      	mov	r0, r4
 800c526:	f7fd fbfc 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800c52a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c52e:	4618      	mov	r0, r3
 800c530:	f7fd ff43 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800c534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c538:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7fe fc7d 	bl	800ae3c <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800c542:	f107 0320 	add.w	r3, r7, #32
 800c546:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7fe fc76 	bl	800ae3c <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800c550:	f107 0120 	add.w	r1, r7, #32
 800c554:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c558:	2220      	movs	r2, #32
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fd ffea 	bl	800a534 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c560:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c564:	4945      	ldr	r1, [pc, #276]	; (800c67c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800c566:	4618      	mov	r0, r3
 800c568:	f7fd fb6f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800c56c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c570:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c574:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c578:	4618      	mov	r0, r3
 800c57a:	f7fd ff80 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800c57e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c582:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c586:	4618      	mov	r0, r3
 800c588:	f7fe fb22 	bl	800abd0 <_Z30BracketsFormattedHexStringFromm>
 800c58c:	f107 0318 	add.w	r3, r7, #24
 800c590:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c594:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fd ff70 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800c59e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fd ff09 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800c5a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fd ff04 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800c5b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fd feff 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c5bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c5c0:	492e      	ldr	r1, [pc, #184]	; (800c67c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fd fb41 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800c5c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c5cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c5d0:	f107 0120 	add.w	r1, r7, #32
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7fd ff52 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800c5da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c5de:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fe faf4 	bl	800abd0 <_Z30BracketsFormattedHexStringFromm>
 800c5e8:	f107 0310 	add.w	r3, r7, #16
 800c5ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c5f0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7fd ff42 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800c5fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7fd fedb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800c604:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fd fed6 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800c60e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c612:	4618      	mov	r0, r3
 800c614:	f7fd fed1 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c61e:	68f9      	ldr	r1, [r7, #12]
 800c620:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800c624:	f107 0318 	add.w	r3, r7, #24
 800c628:	f107 0210 	add.w	r2, r7, #16
 800c62c:	f7ff faec 	bl	800bc08 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c630:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c634:	4619      	mov	r1, r3
 800c636:	4620      	mov	r0, r4
 800c638:	f7fd ff3c 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800c63c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c640:	4618      	mov	r0, r3
 800c642:	f7fd feba 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c646:	f107 0310 	add.w	r3, r7, #16
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fd feb5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c650:	f107 0318 	add.w	r3, r7, #24
 800c654:	4618      	mov	r0, r3
 800c656:	f7fd feb0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800c65a:	f107 0320 	add.w	r3, r7, #32
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fd feab 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800c664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c668:	4618      	mov	r0, r3
 800c66a:	f7fd fea6 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	4618      	mov	r0, r3
 800c672:	3774      	adds	r7, #116	; 0x74
 800c674:	46bd      	mov	sp, r7
 800c676:	bd90      	pop	{r4, r7, pc}
 800c678:	08023fe8 	.word	0x08023fe8
 800c67c:	08020fc8 	.word	0x08020fc8

0800c680 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800c680:	b590      	push	{r4, r7, lr}
 800c682:	b09d      	sub	sp, #116	; 0x74
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	607a      	str	r2, [r7, #4]
 800c68c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	68b9      	ldr	r1, [r7, #8]
 800c696:	f7ff f975 	bl	800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c69a:	4a5f      	ldr	r2, [pc, #380]	; (800c818 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c6a6:	68f9      	ldr	r1, [r7, #12]
 800c6a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c6ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7ff fb6f 	bl	800bd94 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c6b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f7fd fb30 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800c6c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7fd fe77 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800c6cc:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800c6d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c6d4:	4611      	mov	r1, r2
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7fe f936 	bl	800a948 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800c6dc:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800c6e0:	f107 0320 	add.w	r3, r7, #32
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7fe f92e 	bl	800a948 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800c6ec:	f107 0120 	add.w	r1, r7, #32
 800c6f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c6f4:	2220      	movs	r2, #32
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7fd ff1c 	bl	800a534 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c6fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c700:	4946      	ldr	r1, [pc, #280]	; (800c81c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800c702:	4618      	mov	r0, r3
 800c704:	f7fd faa1 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800c708:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c70c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c710:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c714:	4618      	mov	r0, r3
 800c716:	f7fd feb2 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800c71a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c71e:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800c722:	4611      	mov	r1, r2
 800c724:	4618      	mov	r0, r3
 800c726:	f7fe fa6f 	bl	800ac08 <_Z30BracketsFormattedHexStringFroma>
 800c72a:	f107 0318 	add.w	r3, r7, #24
 800c72e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c732:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c736:	4618      	mov	r0, r3
 800c738:	f7fd fea1 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800c73c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c740:	4618      	mov	r0, r3
 800c742:	f7fd fe3a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800c746:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fd fe35 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800c750:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c754:	4618      	mov	r0, r3
 800c756:	f7fd fe30 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c75a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c75e:	492f      	ldr	r1, [pc, #188]	; (800c81c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800c760:	4618      	mov	r0, r3
 800c762:	f7fd fa72 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800c766:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c76a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c76e:	f107 0120 	add.w	r1, r7, #32
 800c772:	4618      	mov	r0, r3
 800c774:	f7fd fe83 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800c778:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c77c:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800c780:	4611      	mov	r1, r2
 800c782:	4618      	mov	r0, r3
 800c784:	f7fe fa40 	bl	800ac08 <_Z30BracketsFormattedHexStringFroma>
 800c788:	f107 0310 	add.w	r3, r7, #16
 800c78c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c790:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c794:	4618      	mov	r0, r3
 800c796:	f7fd fe72 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 800c79a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7fd fe0b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800c7a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fd fe06 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800c7ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fd fe01 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c7be:	68f9      	ldr	r1, [r7, #12]
 800c7c0:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800c7c4:	f107 0318 	add.w	r3, r7, #24
 800c7c8:	f107 0210 	add.w	r2, r7, #16
 800c7cc:	f7ff fa1c 	bl	800bc08 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c7d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f7fd fe6c 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800c7dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fd fdea 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c7e6:	f107 0310 	add.w	r3, r7, #16
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fd fde5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c7f0:	f107 0318 	add.w	r3, r7, #24
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7fd fde0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800c7fa:	f107 0320 	add.w	r3, r7, #32
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7fd fddb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800c804:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c808:	4618      	mov	r0, r3
 800c80a:	f7fd fdd6 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	4618      	mov	r0, r3
 800c812:	3774      	adds	r7, #116	; 0x74
 800c814:	46bd      	mov	sp, r7
 800c816:	bd90      	pop	{r4, r7, pc}
 800c818:	08023fbc 	.word	0x08023fbc
 800c81c:	08020fc8 	.word	0x08020fc8

0800c820 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800c820:	b590      	push	{r4, r7, lr}
 800c822:	b093      	sub	sp, #76	; 0x4c
 800c824:	af02      	add	r7, sp, #8
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	607a      	str	r2, [r7, #4]
 800c82c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	68b9      	ldr	r1, [r7, #8]
 800c836:	f7ff f8a5 	bl	800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c83a:	4a4a      	ldr	r2, [pc, #296]	; (800c964 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c846:	68f9      	ldr	r1, [r7, #12]
 800c848:	f107 0320 	add.w	r3, r7, #32
 800c84c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c84e:	4618      	mov	r0, r3
 800c850:	f7ff faa0 	bl	800bd94 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c854:	f107 0320 	add.w	r3, r7, #32
 800c858:	4619      	mov	r1, r3
 800c85a:	4620      	mov	r0, r4
 800c85c:	f7fd fa61 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800c860:	f107 0320 	add.w	r3, r7, #32
 800c864:	4618      	mov	r0, r3
 800c866:	f7fd fda8 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800c86a:	f107 0318 	add.w	r3, r7, #24
 800c86e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c870:	4618      	mov	r0, r3
 800c872:	f7fe f83d 	bl	800a8f0 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800c876:	f107 0310 	add.w	r3, r7, #16
 800c87a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fe f837 	bl	800a8f0 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c888:	68f9      	ldr	r1, [r7, #12]
 800c88a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800c88e:	f107 0310 	add.w	r3, r7, #16
 800c892:	f107 0218 	add.w	r2, r7, #24
 800c896:	f7ff f9b7 	bl	800bc08 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c89a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c89e:	4619      	mov	r1, r3
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	f7fd fe07 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800c8a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7fd fd85 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800c8b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d046      	beq.n	800c944 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800c8b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d043      	beq.n	800c944 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800c8bc:	2300      	movs	r3, #0
 800c8be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c8c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8c4:	4413      	add	r3, r2
 800c8c6:	781a      	ldrb	r2, [r3, #0]
 800c8c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8cc:	440b      	add	r3, r1
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d103      	bne.n	800c8dc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800c8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8da:	e7f1      	b.n	800c8c0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800c8dc:	2300      	movs	r3, #0
 800c8de:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8e0:	f107 0310 	add.w	r3, r7, #16
 800c8e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fd fecb 	bl	800a682 <_ZNK12SimpleString2atEj>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	461c      	mov	r4, r3
 800c8f0:	f107 0318 	add.w	r3, r7, #24
 800c8f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fd fec3 	bl	800a682 <_ZNK12SimpleString2atEj>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	429c      	cmp	r4, r3
 800c900:	bf0c      	ite	eq
 800c902:	2301      	moveq	r3, #1
 800c904:	2300      	movne	r3, #0
 800c906:	b2db      	uxtb	r3, r3
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d003      	beq.n	800c914 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800c90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90e:	3301      	adds	r3, #1
 800c910:	63bb      	str	r3, [r7, #56]	; 0x38
 800c912:	e7e5      	b.n	800c8e0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c91a:	68f9      	ldr	r1, [r7, #12]
 800c91c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c920:	f107 0210 	add.w	r2, r7, #16
 800c924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c926:	9300      	str	r3, [sp, #0]
 800c928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92a:	f7ff f987 	bl	800bc3c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800c92e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c932:	4619      	mov	r1, r3
 800c934:	4620      	mov	r0, r4
 800c936:	f7fd fdbd 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800c93a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fd fd3b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800c944:	f107 0310 	add.w	r3, r7, #16
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fd fd36 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800c94e:	f107 0318 	add.w	r3, r7, #24
 800c952:	4618      	mov	r0, r3
 800c954:	f7fd fd31 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    }
}
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	4618      	mov	r0, r3
 800c95c:	3744      	adds	r7, #68	; 0x44
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd90      	pop	{r4, r7, pc}
 800c962:	bf00      	nop
 800c964:	08023f90 	.word	0x08023f90

0800c968 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800c968:	b590      	push	{r4, r7, lr}
 800c96a:	b093      	sub	sp, #76	; 0x4c
 800c96c:	af02      	add	r7, sp, #8
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
 800c974:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	68b9      	ldr	r1, [r7, #8]
 800c97e:	f7ff f801 	bl	800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c982:	4a55      	ldr	r2, [pc, #340]	; (800cad8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c98e:	68f9      	ldr	r1, [r7, #12]
 800c990:	f107 0320 	add.w	r3, r7, #32
 800c994:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c996:	4618      	mov	r0, r3
 800c998:	f7ff f9fc 	bl	800bd94 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c99c:	f107 0320 	add.w	r3, r7, #32
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f7fd f9bd 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800c9a8:	f107 0320 	add.w	r3, r7, #32
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7fd fd04 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800c9b2:	f107 0318 	add.w	r3, r7, #24
 800c9b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7fd ff99 	bl	800a8f0 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800c9be:	f107 0310 	add.w	r3, r7, #16
 800c9c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fd ff93 	bl	800a8f0 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c9d0:	68f9      	ldr	r1, [r7, #12]
 800c9d2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800c9d6:	f107 0310 	add.w	r3, r7, #16
 800c9da:	f107 0218 	add.w	r2, r7, #24
 800c9de:	f7ff f913 	bl	800bc08 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c9e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	f7fd fd63 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800c9ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7fd fce1 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800c9f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d05c      	beq.n	800cab8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800c9fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d059      	beq.n	800cab8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800ca04:	2300      	movs	r3, #0
 800ca06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca0c:	4413      	add	r3, r2
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7fd f824 	bl	8009a5e <_ZN12SimpleString7ToLowerEc>
 800ca16:	4603      	mov	r3, r0
 800ca18:	461c      	mov	r4, r3
 800ca1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca1e:	4413      	add	r3, r2
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fd f81b 	bl	8009a5e <_ZN12SimpleString7ToLowerEc>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	429c      	cmp	r4, r3
 800ca2c:	bf0c      	ite	eq
 800ca2e:	2301      	moveq	r3, #1
 800ca30:	2300      	movne	r3, #0
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d003      	beq.n	800ca40 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800ca38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca3e:	e7e3      	b.n	800ca08 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800ca40:	2300      	movs	r3, #0
 800ca42:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800ca44:	f107 0310 	add.w	r3, r7, #16
 800ca48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fd fe19 	bl	800a682 <_ZNK12SimpleString2atEj>
 800ca50:	4603      	mov	r3, r0
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fd f803 	bl	8009a5e <_ZN12SimpleString7ToLowerEc>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	461c      	mov	r4, r3
 800ca5c:	f107 0318 	add.w	r3, r7, #24
 800ca60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fd fe0d 	bl	800a682 <_ZNK12SimpleString2atEj>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fc fff7 	bl	8009a5e <_ZN12SimpleString7ToLowerEc>
 800ca70:	4603      	mov	r3, r0
 800ca72:	429c      	cmp	r4, r3
 800ca74:	bf0c      	ite	eq
 800ca76:	2301      	moveq	r3, #1
 800ca78:	2300      	movne	r3, #0
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d003      	beq.n	800ca88 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800ca80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca82:	3301      	adds	r3, #1
 800ca84:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca86:	e7dd      	b.n	800ca44 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ca8e:	68f9      	ldr	r1, [r7, #12]
 800ca90:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ca94:	f107 0210 	add.w	r2, r7, #16
 800ca98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	f7ff f8cd 	bl	800bc3c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800caa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800caa6:	4619      	mov	r1, r3
 800caa8:	4620      	mov	r0, r4
 800caaa:	f7fd fd03 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800caae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fd fc81 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800cab8:	f107 0310 	add.w	r3, r7, #16
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7fd fc7c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800cac2:	f107 0318 	add.w	r3, r7, #24
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fd fc77 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    }
}
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	4618      	mov	r0, r3
 800cad0:	3744      	adds	r7, #68	; 0x44
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd90      	pop	{r4, r7, pc}
 800cad6:	bf00      	nop
 800cad8:	08023f64 	.word	0x08023f64

0800cadc <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800cadc:	b5b0      	push	{r4, r5, r7, lr}
 800cade:	b092      	sub	sp, #72	; 0x48
 800cae0:	af02      	add	r7, sp, #8
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
 800cae8:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	68b9      	ldr	r1, [r7, #8]
 800caf2:	f7fe ff47 	bl	800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800caf6:	4a40      	ldr	r2, [pc, #256]	; (800cbf8 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cb02:	68f9      	ldr	r1, [r7, #12]
 800cb04:	f107 031c 	add.w	r3, r7, #28
 800cb08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7ff f942 	bl	800bd94 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cb10:	f107 031c 	add.w	r3, r7, #28
 800cb14:	4619      	mov	r1, r3
 800cb16:	4620      	mov	r0, r4
 800cb18:	f7fd f903 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800cb1c:	f107 031c 	add.w	r3, r7, #28
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fd fc4a 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800cb26:	f107 0314 	add.w	r3, r7, #20
 800cb2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fe fa4c 	bl	800afcc <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cb3a:	68fd      	ldr	r5, [r7, #12]
 800cb3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cb40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fe fa41 	bl	800afcc <_Z22StringFromBinaryOrNullPKhj>
 800cb4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cb4e:	f107 0314 	add.w	r3, r7, #20
 800cb52:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800cb56:	4629      	mov	r1, r5
 800cb58:	f7ff f856 	bl	800bc08 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800cb5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb60:	4619      	mov	r1, r3
 800cb62:	4620      	mov	r0, r4
 800cb64:	f7fd fca6 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800cb68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fd fc24 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800cb72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7fd fc1f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800cb7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d02f      	beq.n	800cbe2 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800cb82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d02c      	beq.n	800cbe2 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800cb88:	2300      	movs	r3, #0
 800cb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb90:	4413      	add	r3, r2
 800cb92:	781a      	ldrb	r2, [r3, #0]
 800cb94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb98:	440b      	add	r3, r1
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d103      	bne.n	800cba8 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800cba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cba2:	3301      	adds	r3, #1
 800cba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cba6:	e7f1      	b.n	800cb8c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cbae:	68f9      	ldr	r1, [r7, #12]
 800cbb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	005b      	lsls	r3, r3, #1
 800cbb6:	4413      	add	r3, r2
 800cbb8:	1c5d      	adds	r5, r3, #1
 800cbba:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800cbbe:	f107 0214 	add.w	r2, r7, #20
 800cbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbc4:	9300      	str	r3, [sp, #0]
 800cbc6:	462b      	mov	r3, r5
 800cbc8:	f7ff f838 	bl	800bc3c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800cbcc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f7fd fc6e 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800cbd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7fd fbec 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800cbe2:	f107 0314 	add.w	r3, r7, #20
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fd fbe7 	bl	800a3ba <_ZN12SimpleStringD1Ev>
	}
}
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3740      	adds	r7, #64	; 0x40
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bdb0      	pop	{r4, r5, r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	08023f38 	.word	0x08023f38

0800cbfc <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800cbfc:	b5b0      	push	{r4, r5, r7, lr}
 800cbfe:	b08c      	sub	sp, #48	; 0x30
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	607a      	str	r2, [r7, #4]
 800cc08:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800cc0a:	68f8      	ldr	r0, [r7, #12]
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	68b9      	ldr	r1, [r7, #8]
 800cc12:	f7fe feb7 	bl	800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cc16:	4a26      	ldr	r2, [pc, #152]	; (800ccb0 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cc22:	68f9      	ldr	r1, [r7, #12]
 800cc24:	f107 0310 	add.w	r3, r7, #16
 800cc28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7ff f8b2 	bl	800bd94 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cc30:	f107 0310 	add.w	r3, r7, #16
 800cc34:	4619      	mov	r1, r3
 800cc36:	4620      	mov	r0, r4
 800cc38:	f7fd f873 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800cc3c:	f107 0310 	add.w	r3, r7, #16
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7fd fbba 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cc4c:	68fd      	ldr	r5, [r7, #12]
 800cc4e:	f107 0020 	add.w	r0, r7, #32
 800cc52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc58:	f7fe fa24 	bl	800b0a4 <_Z20StringFromMaskedBitsmmj>
 800cc5c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cc60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc66:	f7fe fa1d 	bl	800b0a4 <_Z20StringFromMaskedBitsmmj>
 800cc6a:	f107 0018 	add.w	r0, r7, #24
 800cc6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cc72:	f107 0220 	add.w	r2, r7, #32
 800cc76:	4629      	mov	r1, r5
 800cc78:	f7fe ffc6 	bl	800bc08 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800cc7c:	f107 0318 	add.w	r3, r7, #24
 800cc80:	4619      	mov	r1, r3
 800cc82:	4620      	mov	r0, r4
 800cc84:	f7fd fc16 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800cc88:	f107 0318 	add.w	r3, r7, #24
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7fd fb94 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800cc92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fd fb8f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800cc9c:	f107 0320 	add.w	r3, r7, #32
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7fd fb8a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3730      	adds	r7, #48	; 0x30
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bdb0      	pop	{r4, r5, r7, pc}
 800ccb0:	08023f0c 	.word	0x08023f0c

0800ccb4 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800ccb4:	b590      	push	{r4, r7, lr}
 800ccb6:	b089      	sub	sp, #36	; 0x24
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	607a      	str	r2, [r7, #4]
 800ccc0:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800ccc2:	68f8      	ldr	r0, [r7, #12]
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	68b9      	ldr	r1, [r7, #8]
 800ccca:	f7fe fe5b 	bl	800b984 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ccce:	4a1a      	ldr	r2, [pc, #104]	; (800cd38 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ccda:	68f9      	ldr	r1, [r7, #12]
 800ccdc:	f107 0310 	add.w	r3, r7, #16
 800cce0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7ff f856 	bl	800bd94 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cce8:	f107 0310 	add.w	r3, r7, #16
 800ccec:	4619      	mov	r1, r3
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f7fd f817 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800ccf4:	f107 0310 	add.w	r3, r7, #16
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7fd fb5e 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cd04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd06:	f7fd fb2b 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	f107 0318 	add.w	r3, r7, #24
 800cd10:	490a      	ldr	r1, [pc, #40]	; (800cd3c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fe f858 	bl	800adc8 <_Z16StringFromFormatPKcz>
 800cd18:	f107 0318 	add.w	r3, r7, #24
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f7fd fbc8 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800cd24:	f107 0318 	add.w	r3, r7, #24
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7fd fb46 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	4618      	mov	r0, r3
 800cd32:	3724      	adds	r7, #36	; 0x24
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd90      	pop	{r4, r7, pc}
 800cd38:	08023ee0 	.word	0x08023ee0
 800cd3c:	08021098 	.word	0x08021098

0800cd40 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	4a05      	ldr	r2, [pc, #20]	; (800cd60 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	601a      	str	r2, [r3, #0]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fe fe99 	bl	800ba88 <_ZN11TestFailureD1Ev>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	08023ee0 	.word	0x08023ee0

0800cd64 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f7ff ffe7 	bl	800cd40 <_ZN25FeatureUnsupportedFailureD1Ev>
 800cd72:	2134      	movs	r1, #52	; 0x34
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f7fa fbb9 	bl	80074ec <_ZdlPvj>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	4a05      	ldr	r2, [pc, #20]	; (800cda4 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	601a      	str	r2, [r3, #0]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7fe fe77 	bl	800ba88 <_ZN11TestFailureD1Ev>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	08023f0c 	.word	0x08023f0c

0800cda8 <_ZN16BitsEqualFailureD0Ev>:
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f7ff ffe7 	bl	800cd84 <_ZN16BitsEqualFailureD1Ev>
 800cdb6:	2134      	movs	r1, #52	; 0x34
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f7fa fb97 	bl	80074ec <_ZdlPvj>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	4a05      	ldr	r2, [pc, #20]	; (800cde8 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	601a      	str	r2, [r3, #0]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7fe fe55 	bl	800ba88 <_ZN11TestFailureD1Ev>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	4618      	mov	r0, r3
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	08023f38 	.word	0x08023f38

0800cdec <_ZN18BinaryEqualFailureD0Ev>:
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f7ff ffe7 	bl	800cdc8 <_ZN18BinaryEqualFailureD1Ev>
 800cdfa:	2134      	movs	r1, #52	; 0x34
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f7fa fb75 	bl	80074ec <_ZdlPvj>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4618      	mov	r0, r3
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	4a05      	ldr	r2, [pc, #20]	; (800ce2c <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	601a      	str	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fe fe33 	bl	800ba88 <_ZN11TestFailureD1Ev>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	4618      	mov	r0, r3
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	08023f64 	.word	0x08023f64

0800ce30 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7ff ffe7 	bl	800ce0c <_ZN24StringEqualNoCaseFailureD1Ev>
 800ce3e:	2134      	movs	r1, #52	; 0x34
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7fa fb53 	bl	80074ec <_ZdlPvj>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3708      	adds	r7, #8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	4a05      	ldr	r2, [pc, #20]	; (800ce70 <_ZN18StringEqualFailureD1Ev+0x20>)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	601a      	str	r2, [r3, #0]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7fe fe11 	bl	800ba88 <_ZN11TestFailureD1Ev>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	08023f90 	.word	0x08023f90

0800ce74 <_ZN18StringEqualFailureD0Ev>:
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7ff ffe7 	bl	800ce50 <_ZN18StringEqualFailureD1Ev>
 800ce82:	2134      	movs	r1, #52	; 0x34
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f7fa fb31 	bl	80074ec <_ZdlPvj>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	4a05      	ldr	r2, [pc, #20]	; (800ceb4 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	601a      	str	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7fe fdef 	bl	800ba88 <_ZN11TestFailureD1Ev>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	4618      	mov	r0, r3
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	08023fbc 	.word	0x08023fbc

0800ceb8 <_ZN23SignedBytesEqualFailureD0Ev>:
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7ff ffe7 	bl	800ce94 <_ZN23SignedBytesEqualFailureD1Ev>
 800cec6:	2134      	movs	r1, #52	; 0x34
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f7fa fb0f 	bl	80074ec <_ZdlPvj>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4618      	mov	r0, r3
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	4a05      	ldr	r2, [pc, #20]	; (800cef8 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	601a      	str	r2, [r3, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fe fdcd 	bl	800ba88 <_ZN11TestFailureD1Ev>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4618      	mov	r0, r3
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	08023fe8 	.word	0x08023fe8

0800cefc <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f7ff ffe7 	bl	800ced8 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800cf0a:	2134      	movs	r1, #52	; 0x34
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f7fa faed 	bl	80074ec <_ZdlPvj>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	4618      	mov	r0, r3
 800cf16:	3708      	adds	r7, #8
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	4a05      	ldr	r2, [pc, #20]	; (800cf3c <_ZN17LongsEqualFailureD1Ev+0x20>)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	601a      	str	r2, [r3, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fe fdab 	bl	800ba88 <_ZN11TestFailureD1Ev>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4618      	mov	r0, r3
 800cf36:	3708      	adds	r7, #8
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	08024014 	.word	0x08024014

0800cf40 <_ZN17LongsEqualFailureD0Ev>:
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f7ff ffe7 	bl	800cf1c <_ZN17LongsEqualFailureD1Ev>
 800cf4e:	2134      	movs	r1, #52	; 0x34
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7fa facb 	bl	80074ec <_ZdlPvj>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3708      	adds	r7, #8
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	4a05      	ldr	r2, [pc, #20]	; (800cf80 <_ZN12CheckFailureD1Ev+0x20>)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7fe fd89 	bl	800ba88 <_ZN11TestFailureD1Ev>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	08024040 	.word	0x08024040

0800cf84 <_ZN12CheckFailureD0Ev>:
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f7ff ffe7 	bl	800cf60 <_ZN12CheckFailureD1Ev>
 800cf92:	2134      	movs	r1, #52	; 0x34
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f7fa faa9 	bl	80074ec <_ZdlPvj>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	4a05      	ldr	r2, [pc, #20]	; (800cfc4 <_ZN15ContainsFailureD1Ev+0x20>)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	601a      	str	r2, [r3, #0]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fe fd67 	bl	800ba88 <_ZN11TestFailureD1Ev>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	0802406c 	.word	0x0802406c

0800cfc8 <_ZN15ContainsFailureD0Ev>:
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f7ff ffe7 	bl	800cfa4 <_ZN15ContainsFailureD1Ev>
 800cfd6:	2134      	movs	r1, #52	; 0x34
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f7fa fa87 	bl	80074ec <_ZdlPvj>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	4a05      	ldr	r2, [pc, #20]	; (800d008 <_ZN17ComparisonFailureD1Ev+0x20>)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	601a      	str	r2, [r3, #0]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7fe fd45 	bl	800ba88 <_ZN11TestFailureD1Ev>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	4618      	mov	r0, r3
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	08024098 	.word	0x08024098

0800d00c <_ZN17ComparisonFailureD0Ev>:
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f7ff ffe7 	bl	800cfe8 <_ZN17ComparisonFailureD1Ev>
 800d01a:	2134      	movs	r1, #52	; 0x34
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f7fa fa65 	bl	80074ec <_ZdlPvj>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	4618      	mov	r0, r3
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	4a05      	ldr	r2, [pc, #20]	; (800d04c <_ZN17CheckEqualFailureD1Ev+0x20>)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	601a      	str	r2, [r3, #0]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7fe fd23 	bl	800ba88 <_ZN11TestFailureD1Ev>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4618      	mov	r0, r3
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	080240c4 	.word	0x080240c4

0800d050 <_ZN17CheckEqualFailureD0Ev>:
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f7ff ffe7 	bl	800d02c <_ZN17CheckEqualFailureD1Ev>
 800d05e:	2134      	movs	r1, #52	; 0x34
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7fa fa43 	bl	80074ec <_ZdlPvj>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	4618      	mov	r0, r3
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	4a05      	ldr	r2, [pc, #20]	; (800d090 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	601a      	str	r2, [r3, #0]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4618      	mov	r0, r3
 800d082:	f7fe fd01 	bl	800ba88 <_ZN11TestFailureD1Ev>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	4618      	mov	r0, r3
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	080240f0 	.word	0x080240f0

0800d094 <_ZN19DoublesEqualFailureD0Ev>:
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f7ff ffe7 	bl	800d070 <_ZN19DoublesEqualFailureD1Ev>
 800d0a2:	2134      	movs	r1, #52	; 0x34
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7fa fa21 	bl	80074ec <_ZdlPvj>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	4a05      	ldr	r2, [pc, #20]	; (800d0d4 <_ZN13EqualsFailureD1Ev+0x20>)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	601a      	str	r2, [r3, #0]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fe fcdf 	bl	800ba88 <_ZN11TestFailureD1Ev>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3708      	adds	r7, #8
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	0802411c 	.word	0x0802411c

0800d0d8 <_ZN13EqualsFailureD0Ev>:
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7ff ffe7 	bl	800d0b4 <_ZN13EqualsFailureD1Ev>
 800d0e6:	2134      	movs	r1, #52	; 0x34
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f7fa f9ff 	bl	80074ec <_ZdlPvj>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800d0f8:	b5b0      	push	{r4, r5, r7, lr}
 800d0fa:	b086      	sub	sp, #24
 800d0fc:	af02      	add	r7, sp, #8
 800d0fe:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800d100:	4b0d      	ldr	r3, [pc, #52]	; (800d138 <_ZL13checkedMallocj+0x40>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	4798      	blx	r3
 800d108:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d10e      	bne.n	800d12e <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800d110:	f004 f97e 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 800d114:	4604      	mov	r4, r0
 800d116:	6823      	ldr	r3, [r4, #0]
 800d118:	3368      	adds	r3, #104	; 0x68
 800d11a:	681d      	ldr	r5, [r3, #0]
 800d11c:	f004 f988 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800d120:	4603      	mov	r3, r0
 800d122:	9300      	str	r3, [sp, #0]
 800d124:	2325      	movs	r3, #37	; 0x25
 800d126:	4a05      	ldr	r2, [pc, #20]	; (800d13c <_ZL13checkedMallocj+0x44>)
 800d128:	4905      	ldr	r1, [pc, #20]	; (800d140 <_ZL13checkedMallocj+0x48>)
 800d12a:	4620      	mov	r0, r4
 800d12c:	47a8      	blx	r5
    return mem;
 800d12e:	68fb      	ldr	r3, [r7, #12]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bdb0      	pop	{r4, r5, r7, pc}
 800d138:	200000c4 	.word	0x200000c4
 800d13c:	0802110c 	.word	0x0802110c
 800d140:	0802112c 	.word	0x0802112c

0800d144 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800d144:	b580      	push	{r7, lr}
 800d146:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800d148:	4b04      	ldr	r3, [pc, #16]	; (800d15c <_Z22getCurrentNewAllocatorv+0x18>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d101      	bne.n	800d154 <_Z22getCurrentNewAllocatorv+0x10>
 800d150:	f000 f806 	bl	800d160 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800d154:	4b01      	ldr	r3, [pc, #4]	; (800d15c <_Z22getCurrentNewAllocatorv+0x18>)
 800d156:	681b      	ldr	r3, [r3, #0]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	20000670 	.word	0x20000670

0800d160 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800d160:	b580      	push	{r7, lr}
 800d162:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800d164:	f000 f810 	bl	800d188 <_Z19defaultNewAllocatorv>
 800d168:	4603      	mov	r3, r0
 800d16a:	4a02      	ldr	r2, [pc, #8]	; (800d174 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800d16c:	6013      	str	r3, [r2, #0]
}
 800d16e:	bf00      	nop
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	20000670 	.word	0x20000670

0800d178 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800d178:	b580      	push	{r7, lr}
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	4801      	ldr	r0, [pc, #4]	; (800d184 <__tcf_0+0xc>)
 800d17e:	f000 f909 	bl	800d394 <_ZN19TestMemoryAllocatorD1Ev>
 800d182:	bd80      	pop	{r7, pc}
 800d184:	2000067c 	.word	0x2000067c

0800d188 <_Z19defaultNewAllocatorv>:
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800d18c:	4b13      	ldr	r3, [pc, #76]	; (800d1dc <_Z19defaultNewAllocatorv+0x54>)
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	f3bf 8f5b 	dmb	ish
 800d194:	b2db      	uxtb	r3, r3
 800d196:	f003 0301 	and.w	r3, r3, #1
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	bf0c      	ite	eq
 800d19e:	2301      	moveq	r3, #1
 800d1a0:	2300      	movne	r3, #0
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d016      	beq.n	800d1d6 <_Z19defaultNewAllocatorv+0x4e>
 800d1a8:	480c      	ldr	r0, [pc, #48]	; (800d1dc <_Z19defaultNewAllocatorv+0x54>)
 800d1aa:	f00f fc0d 	bl	801c9c8 <__cxa_guard_acquire>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	bf14      	ite	ne
 800d1b4:	2301      	movne	r3, #1
 800d1b6:	2300      	moveq	r3, #0
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00b      	beq.n	800d1d6 <_Z19defaultNewAllocatorv+0x4e>
 800d1be:	4b08      	ldr	r3, [pc, #32]	; (800d1e0 <_Z19defaultNewAllocatorv+0x58>)
 800d1c0:	4a08      	ldr	r2, [pc, #32]	; (800d1e4 <_Z19defaultNewAllocatorv+0x5c>)
 800d1c2:	4909      	ldr	r1, [pc, #36]	; (800d1e8 <_Z19defaultNewAllocatorv+0x60>)
 800d1c4:	4809      	ldr	r0, [pc, #36]	; (800d1ec <_Z19defaultNewAllocatorv+0x64>)
 800d1c6:	f000 f8c5 	bl	800d354 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800d1ca:	4804      	ldr	r0, [pc, #16]	; (800d1dc <_Z19defaultNewAllocatorv+0x54>)
 800d1cc:	f00f fc08 	bl	801c9e0 <__cxa_guard_release>
 800d1d0:	4807      	ldr	r0, [pc, #28]	; (800d1f0 <_Z19defaultNewAllocatorv+0x68>)
 800d1d2:	f00f fc2c 	bl	801ca2e <atexit>
    return &allocator;
 800d1d6:	4b05      	ldr	r3, [pc, #20]	; (800d1ec <_Z19defaultNewAllocatorv+0x64>)
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	20000690 	.word	0x20000690
 800d1e0:	0802114c 	.word	0x0802114c
 800d1e4:	08021154 	.word	0x08021154
 800d1e8:	08021158 	.word	0x08021158
 800d1ec:	2000067c 	.word	0x2000067c
 800d1f0:	0800d179 	.word	0x0800d179

0800d1f4 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800d1f8:	4b04      	ldr	r3, [pc, #16]	; (800d20c <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d101      	bne.n	800d204 <_Z27getCurrentNewArrayAllocatorv+0x10>
 800d200:	f000 f806 	bl	800d210 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800d204:	4b01      	ldr	r3, [pc, #4]	; (800d20c <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800d206:	681b      	ldr	r3, [r3, #0]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	20000674 	.word	0x20000674

0800d210 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800d210:	b580      	push	{r7, lr}
 800d212:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800d214:	f000 f810 	bl	800d238 <_Z24defaultNewArrayAllocatorv>
 800d218:	4603      	mov	r3, r0
 800d21a:	4a02      	ldr	r2, [pc, #8]	; (800d224 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800d21c:	6013      	str	r3, [r2, #0]
}
 800d21e:	bf00      	nop
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	20000674 	.word	0x20000674

0800d228 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800d228:	b580      	push	{r7, lr}
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	4801      	ldr	r0, [pc, #4]	; (800d234 <__tcf_1+0xc>)
 800d22e:	f000 f8b1 	bl	800d394 <_ZN19TestMemoryAllocatorD1Ev>
 800d232:	bd80      	pop	{r7, pc}
 800d234:	20000694 	.word	0x20000694

0800d238 <_Z24defaultNewArrayAllocatorv>:
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800d23c:	4b13      	ldr	r3, [pc, #76]	; (800d28c <_Z24defaultNewArrayAllocatorv+0x54>)
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	f3bf 8f5b 	dmb	ish
 800d244:	b2db      	uxtb	r3, r3
 800d246:	f003 0301 	and.w	r3, r3, #1
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	bf0c      	ite	eq
 800d24e:	2301      	moveq	r3, #1
 800d250:	2300      	movne	r3, #0
 800d252:	b2db      	uxtb	r3, r3
 800d254:	2b00      	cmp	r3, #0
 800d256:	d016      	beq.n	800d286 <_Z24defaultNewArrayAllocatorv+0x4e>
 800d258:	480c      	ldr	r0, [pc, #48]	; (800d28c <_Z24defaultNewArrayAllocatorv+0x54>)
 800d25a:	f00f fbb5 	bl	801c9c8 <__cxa_guard_acquire>
 800d25e:	4603      	mov	r3, r0
 800d260:	2b00      	cmp	r3, #0
 800d262:	bf14      	ite	ne
 800d264:	2301      	movne	r3, #1
 800d266:	2300      	moveq	r3, #0
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00b      	beq.n	800d286 <_Z24defaultNewArrayAllocatorv+0x4e>
 800d26e:	4b08      	ldr	r3, [pc, #32]	; (800d290 <_Z24defaultNewArrayAllocatorv+0x58>)
 800d270:	4a08      	ldr	r2, [pc, #32]	; (800d294 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800d272:	4909      	ldr	r1, [pc, #36]	; (800d298 <_Z24defaultNewArrayAllocatorv+0x60>)
 800d274:	4809      	ldr	r0, [pc, #36]	; (800d29c <_Z24defaultNewArrayAllocatorv+0x64>)
 800d276:	f000 f86d 	bl	800d354 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800d27a:	4804      	ldr	r0, [pc, #16]	; (800d28c <_Z24defaultNewArrayAllocatorv+0x54>)
 800d27c:	f00f fbb0 	bl	801c9e0 <__cxa_guard_release>
 800d280:	4807      	ldr	r0, [pc, #28]	; (800d2a0 <_Z24defaultNewArrayAllocatorv+0x68>)
 800d282:	f00f fbd4 	bl	801ca2e <atexit>
    return &allocator;
 800d286:	4b05      	ldr	r3, [pc, #20]	; (800d29c <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800d288:	4618      	mov	r0, r3
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	200006a8 	.word	0x200006a8
 800d290:	08021170 	.word	0x08021170
 800d294:	0802117c 	.word	0x0802117c
 800d298:	08021184 	.word	0x08021184
 800d29c:	20000694 	.word	0x20000694
 800d2a0:	0800d229 	.word	0x0800d229

0800d2a4 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800d2a8:	4b04      	ldr	r3, [pc, #16]	; (800d2bc <_Z25getCurrentMallocAllocatorv+0x18>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d101      	bne.n	800d2b4 <_Z25getCurrentMallocAllocatorv+0x10>
 800d2b0:	f000 f806 	bl	800d2c0 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800d2b4:	4b01      	ldr	r3, [pc, #4]	; (800d2bc <_Z25getCurrentMallocAllocatorv+0x18>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	20000678 	.word	0x20000678

0800d2c0 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800d2c4:	f000 f810 	bl	800d2e8 <_Z22defaultMallocAllocatorv>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	4a02      	ldr	r2, [pc, #8]	; (800d2d4 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800d2cc:	6013      	str	r3, [r2, #0]
}
 800d2ce:	bf00      	nop
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	20000678 	.word	0x20000678

0800d2d8 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	4801      	ldr	r0, [pc, #4]	; (800d2e4 <__tcf_2+0xc>)
 800d2de:	f000 f859 	bl	800d394 <_ZN19TestMemoryAllocatorD1Ev>
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	200006ac 	.word	0x200006ac

0800d2e8 <_Z22defaultMallocAllocatorv>:
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800d2ec:	4b13      	ldr	r3, [pc, #76]	; (800d33c <_Z22defaultMallocAllocatorv+0x54>)
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	f3bf 8f5b 	dmb	ish
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	f003 0301 	and.w	r3, r3, #1
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	bf0c      	ite	eq
 800d2fe:	2301      	moveq	r3, #1
 800d300:	2300      	movne	r3, #0
 800d302:	b2db      	uxtb	r3, r3
 800d304:	2b00      	cmp	r3, #0
 800d306:	d016      	beq.n	800d336 <_Z22defaultMallocAllocatorv+0x4e>
 800d308:	480c      	ldr	r0, [pc, #48]	; (800d33c <_Z22defaultMallocAllocatorv+0x54>)
 800d30a:	f00f fb5d 	bl	801c9c8 <__cxa_guard_acquire>
 800d30e:	4603      	mov	r3, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	bf14      	ite	ne
 800d314:	2301      	movne	r3, #1
 800d316:	2300      	moveq	r3, #0
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d00b      	beq.n	800d336 <_Z22defaultMallocAllocatorv+0x4e>
 800d31e:	4b08      	ldr	r3, [pc, #32]	; (800d340 <_Z22defaultMallocAllocatorv+0x58>)
 800d320:	4a08      	ldr	r2, [pc, #32]	; (800d344 <_Z22defaultMallocAllocatorv+0x5c>)
 800d322:	4909      	ldr	r1, [pc, #36]	; (800d348 <_Z22defaultMallocAllocatorv+0x60>)
 800d324:	4809      	ldr	r0, [pc, #36]	; (800d34c <_Z22defaultMallocAllocatorv+0x64>)
 800d326:	f000 f815 	bl	800d354 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800d32a:	4804      	ldr	r0, [pc, #16]	; (800d33c <_Z22defaultMallocAllocatorv+0x54>)
 800d32c:	f00f fb58 	bl	801c9e0 <__cxa_guard_release>
 800d330:	4807      	ldr	r0, [pc, #28]	; (800d350 <_Z22defaultMallocAllocatorv+0x68>)
 800d332:	f00f fb7c 	bl	801ca2e <atexit>
    return &allocator;
 800d336:	4b05      	ldr	r3, [pc, #20]	; (800d34c <_Z22defaultMallocAllocatorv+0x64>)
}
 800d338:	4618      	mov	r0, r3
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	200006c0 	.word	0x200006c0
 800d340:	080211a0 	.word	0x080211a0
 800d344:	080211a8 	.word	0x080211a8
 800d348:	080211b0 	.word	0x080211b0
 800d34c:	200006ac 	.word	0x200006ac
 800d350:	0800d2d9 	.word	0x0800d2d9

0800d354 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800d354:	b480      	push	{r7}
 800d356:	b085      	sub	sp, #20
 800d358:	af00      	add	r7, sp, #0
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	607a      	str	r2, [r7, #4]
 800d360:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800d362:	4a0b      	ldr	r2, [pc, #44]	; (800d390 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	601a      	str	r2, [r3, #0]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	68ba      	ldr	r2, [r7, #8]
 800d36c:	605a      	str	r2, [r3, #4]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	609a      	str	r2, [r3, #8]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	683a      	ldr	r2, [r7, #0]
 800d378:	60da      	str	r2, [r3, #12]
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2200      	movs	r2, #0
 800d37e:	741a      	strb	r2, [r3, #16]
{
}
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	4618      	mov	r0, r3
 800d384:	3714      	adds	r7, #20
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop
 800d390:	080241a8 	.word	0x080241a8

0800d394 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	4a06      	ldr	r2, [pc, #24]	; (800d3b8 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	741a      	strb	r2, [r3, #16]
}
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	370c      	adds	r7, #12
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop
 800d3b8:	080241a8 	.word	0x080241a8

0800d3bc <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
}
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7ff ffe5 	bl	800d394 <_ZN19TestMemoryAllocatorD1Ev>
 800d3ca:	2114      	movs	r1, #20
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7fa f88d 	bl	80074ec <_ZdlPvj>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	7c1b      	ldrb	r3, [r3, #16]
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	370c      	adds	r7, #12
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr

0800d3f4 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800d3f4:	b590      	push	{r4, r7, lr}
 800d3f6:	b083      	sub	sp, #12
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	3310      	adds	r3, #16
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	4798      	blx	r3
 800d40a:	4604      	mov	r4, r0
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	3310      	adds	r3, #16
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	6838      	ldr	r0, [r7, #0]
 800d416:	4798      	blx	r3
 800d418:	4603      	mov	r3, r0
 800d41a:	4619      	mov	r1, r3
 800d41c:	4620      	mov	r0, r4
 800d41e:	f7fc fa51 	bl	80098c4 <_ZN12SimpleString6StrCmpEPKcS1_>
 800d422:	4603      	mov	r3, r0
 800d424:	2b00      	cmp	r3, #0
 800d426:	bf0c      	ite	eq
 800d428:	2301      	moveq	r3, #1
 800d42a:	2300      	movne	r3, #0
 800d42c:	b2db      	uxtb	r3, r3
}
 800d42e:	4618      	mov	r0, r3
 800d430:	370c      	adds	r7, #12
 800d432:	46bd      	mov	sp, r7
 800d434:	bd90      	pop	{r4, r7, pc}
	...

0800d438 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800d438:	b590      	push	{r4, r7, lr}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	3308      	adds	r3, #8
 800d448:	681c      	ldr	r4, [r3, #0]
 800d44a:	2301      	movs	r3, #1
 800d44c:	4a04      	ldr	r2, [pc, #16]	; (800d460 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	47a0      	blx	r4
 800d454:	4603      	mov	r3, r0
}
 800d456:	4618      	mov	r0, r3
 800d458:	370c      	adds	r7, #12
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd90      	pop	{r4, r7, pc}
 800d45e:	bf00      	nop
 800d460:	080211cc 	.word	0x080211cc

0800d464 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800d464:	b590      	push	{r4, r7, lr}
 800d466:	b085      	sub	sp, #20
 800d468:	af02      	add	r7, sp, #8
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	330c      	adds	r3, #12
 800d474:	681c      	ldr	r4, [r3, #0]
 800d476:	2301      	movs	r3, #1
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	4b04      	ldr	r3, [pc, #16]	; (800d48c <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800d47c:	2200      	movs	r2, #0
 800d47e:	6839      	ldr	r1, [r7, #0]
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	47a0      	blx	r4
}
 800d484:	bf00      	nop
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd90      	pop	{r4, r7, pc}
 800d48c:	080211cc 	.word	0x080211cc

0800d490 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	607a      	str	r2, [r7, #4]
 800d49c:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800d49e:	68b8      	ldr	r0, [r7, #8]
 800d4a0:	f7ff fe2a 	bl	800d0f8 <_ZL13checkedMallocj>
 800d4a4:	4603      	mov	r3, r0
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
	...

0800d4b0 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	60b9      	str	r1, [r7, #8]
 800d4ba:	607a      	str	r2, [r7, #4]
 800d4bc:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800d4be:	4b04      	ldr	r3, [pc, #16]	; (800d4d0 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	68b8      	ldr	r0, [r7, #8]
 800d4c4:	4798      	blx	r3
}
 800d4c6:	bf00      	nop
 800d4c8:	3710      	adds	r7, #16
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	200000cc 	.word	0x200000cc

0800d4d4 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
    return name_;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	685b      	ldr	r3, [r3, #4]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr

0800d4ec <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b083      	sub	sp, #12
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	689b      	ldr	r3, [r3, #8]
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
    return free_name_;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	68db      	ldr	r3, [r3, #12]
}
 800d510:	4618      	mov	r0, r3
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
    return this;
 800d524:	687b      	ldr	r3, [r7, #4]
}
 800d526:	4618      	mov	r0, r3
 800d528:	370c      	adds	r7, #12
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr
	...

0800d534 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	4a05      	ldr	r2, [pc, #20]	; (800d554 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	601a      	str	r2, [r3, #0]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4618      	mov	r0, r3
 800d546:	f7ff ff25 	bl	800d394 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4618      	mov	r0, r3
 800d54e:	3708      	adds	r7, #8
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	08024174 	.word	0x08024174

0800d558 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
}
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f7ff ffe7 	bl	800d534 <_ZN20NullUnknownAllocatorD1Ev>
 800d566:	2114      	movs	r1, #20
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f7f9 ffbf 	bl	80074ec <_ZdlPvj>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	4618      	mov	r0, r3
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800d578:	b480      	push	{r7}
 800d57a:	b085      	sub	sp, #20
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	607a      	str	r2, [r7, #4]
 800d584:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3714      	adds	r7, #20
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800d594:	b480      	push	{r7}
 800d596:	b085      	sub	sp, #20
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	607a      	str	r2, [r7, #4]
 800d5a0:	603b      	str	r3, [r7, #0]
}
 800d5a2:	bf00      	nop
 800d5a4:	3714      	adds	r7, #20
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr
	...

0800d5b0 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	4b06      	ldr	r3, [pc, #24]	; (800d5d4 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800d5bc:	4a05      	ldr	r2, [pc, #20]	; (800d5d4 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800d5be:	4906      	ldr	r1, [pc, #24]	; (800d5d8 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800d5c0:	f7ff fec8 	bl	800d354 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800d5c4:	4a05      	ldr	r2, [pc, #20]	; (800d5dc <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	601a      	str	r2, [r3, #0]
{
}
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	08021200 	.word	0x08021200
 800d5d8:	08021208 	.word	0x08021208
 800d5dc:	08024174 	.word	0x08024174

0800d5e0 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	4801      	ldr	r0, [pc, #4]	; (800d5ec <__tcf_3+0xc>)
 800d5e6:	f7ff ffa5 	bl	800d534 <_ZN20NullUnknownAllocatorD1Ev>
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	200006c4 	.word	0x200006c4

0800d5f0 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800d5f4:	4b12      	ldr	r3, [pc, #72]	; (800d640 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	f3bf 8f5b 	dmb	ish
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	f003 0301 	and.w	r3, r3, #1
 800d602:	2b00      	cmp	r3, #0
 800d604:	bf0c      	ite	eq
 800d606:	2301      	moveq	r3, #1
 800d608:	2300      	movne	r3, #0
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d013      	beq.n	800d638 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800d610:	480b      	ldr	r0, [pc, #44]	; (800d640 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800d612:	f00f f9d9 	bl	801c9c8 <__cxa_guard_acquire>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	bf14      	ite	ne
 800d61c:	2301      	movne	r3, #1
 800d61e:	2300      	moveq	r3, #0
 800d620:	b2db      	uxtb	r3, r3
 800d622:	2b00      	cmp	r3, #0
 800d624:	d008      	beq.n	800d638 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800d626:	4807      	ldr	r0, [pc, #28]	; (800d644 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800d628:	f7ff ffc2 	bl	800d5b0 <_ZN20NullUnknownAllocatorC1Ev>
 800d62c:	4804      	ldr	r0, [pc, #16]	; (800d640 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800d62e:	f00f f9d7 	bl	801c9e0 <__cxa_guard_release>
 800d632:	4805      	ldr	r0, [pc, #20]	; (800d648 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800d634:	f00f f9fb 	bl	801ca2e <atexit>
    return &allocator;
 800d638:	4b02      	ldr	r3, [pc, #8]	; (800d644 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	200006d8 	.word	0x200006d8
 800d644:	200006c4 	.word	0x200006c4
 800d648:	0800d5e1 	.word	0x0800d5e1

0800d64c <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
        return testCount_;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	689b      	ldr	r3, [r3, #8]
    }
 800d658:	4618      	mov	r0, r3
 800d65a:	370c      	adds	r7, #12
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	699b      	ldr	r3, [r3, #24]
    }
 800d670:	4618      	mov	r0, r3
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800d680:	4b05      	ldr	r3, [pc, #20]	; (800d698 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	2b02      	cmp	r3, #2
 800d686:	d103      	bne.n	800d690 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800d688:	f004 fa4a 	bl	8011b20 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800d68c:	4603      	mov	r3, r0
 800d68e:	e001      	b.n	800d694 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800d690:	4b01      	ldr	r3, [pc, #4]	; (800d698 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800d692:	781b      	ldrb	r3, [r3, #0]
}
 800d694:	4618      	mov	r0, r3
 800d696:	bd80      	pop	{r7, pc}
 800d698:	20000084 	.word	0x20000084

0800d69c <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800d6a4:	4a0a      	ldr	r2, [pc, #40]	; (800d6d0 <_ZN10TestOutputC1Ev+0x34>)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	601a      	str	r2, [r3, #0]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	605a      	str	r2, [r3, #4]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	721a      	strb	r2, [r3, #8]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	725a      	strb	r2, [r3, #9]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	4a05      	ldr	r2, [pc, #20]	; (800d6d4 <_ZN10TestOutputC1Ev+0x38>)
 800d6c0:	60da      	str	r2, [r3, #12]
{
}
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	080242ac 	.word	0x080242ac
 800d6d4:	08021608 	.word	0x08021608

0800d6d8 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	4a04      	ldr	r2, [pc, #16]	; (800d6f4 <_ZN10TestOutputD1Ev+0x1c>)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	601a      	str	r2, [r3, #0]
{
}
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	370c      	adds	r7, #12
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr
 800d6f4:	080242ac 	.word	0x080242ac

0800d6f8 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	460b      	mov	r3, r1
 800d702:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	78fa      	ldrb	r2, [r7, #3]
 800d708:	721a      	strb	r2, [r3, #8]
}
 800d70a:	bf00      	nop
 800d70c:	370c      	adds	r7, #12
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr

0800d716 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800d716:	b480      	push	{r7}
 800d718:	b083      	sub	sp, #12
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	6078      	str	r0, [r7, #4]
    color_ = true;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2201      	movs	r2, #1
 800d722:	725a      	strb	r2, [r3, #9]
}
 800d724:	bf00      	nop
 800d726:	370c      	adds	r7, #12
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr

0800d730 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	3328      	adds	r3, #40	; 0x28
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	6839      	ldr	r1, [r7, #0]
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	4798      	blx	r3
}
 800d748:	bf00      	nop
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800d750:	b590      	push	{r4, r7, lr}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	332c      	adds	r3, #44	; 0x2c
 800d760:	681c      	ldr	r4, [r3, #0]
 800d762:	f107 0308 	add.w	r3, r7, #8
 800d766:	6839      	ldr	r1, [r7, #0]
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fd f8ff 	bl	800a96c <_Z10StringFroml>
 800d76e:	f107 0308 	add.w	r3, r7, #8
 800d772:	4618      	mov	r0, r3
 800d774:	f7fc fdf4 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800d778:	4603      	mov	r3, r0
 800d77a:	4619      	mov	r1, r3
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	47a0      	blx	r4
 800d780:	f107 0308 	add.w	r3, r7, #8
 800d784:	4618      	mov	r0, r3
 800d786:	f7fc fe18 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800d78a:	bf00      	nop
 800d78c:	3714      	adds	r7, #20
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd90      	pop	{r4, r7, pc}

0800d792 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800d792:	b590      	push	{r4, r7, lr}
 800d794:	b085      	sub	sp, #20
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
 800d79a:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	332c      	adds	r3, #44	; 0x2c
 800d7a2:	681c      	ldr	r4, [r3, #0]
 800d7a4:	f107 0308 	add.w	r3, r7, #8
 800d7a8:	6839      	ldr	r1, [r7, #0]
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fd fb34 	bl	800ae18 <_Z10StringFromj>
 800d7b0:	f107 0308 	add.w	r3, r7, #8
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7fc fdd3 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	4619      	mov	r1, r3
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	47a0      	blx	r4
 800d7c2:	f107 0308 	add.w	r3, r7, #8
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fc fdf7 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800d7cc:	bf00      	nop
 800d7ce:	3714      	adds	r7, #20
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd90      	pop	{r4, r7, pc}

0800d7d4 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800d7d4:	b590      	push	{r4, r7, lr}
 800d7d6:	b087      	sub	sp, #28
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	332c      	adds	r3, #44	; 0x2c
 800d7e6:	681c      	ldr	r4, [r3, #0]
 800d7e8:	f107 0310 	add.w	r3, r7, #16
 800d7ec:	2106      	movs	r1, #6
 800d7ee:	ed97 0b00 	vldr	d0, [r7]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7fd faa6 	bl	800ad44 <_Z10StringFromdi>
 800d7f8:	f107 0310 	add.w	r3, r7, #16
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7fc fdaf 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800d802:	4603      	mov	r3, r0
 800d804:	4619      	mov	r1, r3
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	47a0      	blx	r4
 800d80a:	f107 0310 	add.w	r3, r7, #16
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fc fdd3 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800d814:	bf00      	nop
 800d816:	371c      	adds	r7, #28
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd90      	pop	{r4, r7, pc}

0800d81c <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
    p.print(s);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	332c      	adds	r3, #44	; 0x2c
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	6839      	ldr	r1, [r7, #0]
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	4798      	blx	r3
    return p;
 800d834:	687b      	ldr	r3, [r7, #4]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3708      	adds	r7, #8
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
	...

0800d840 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800d840:	b590      	push	{r4, r7, lr}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	7a1b      	ldrb	r3, [r3, #8]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d01a      	beq.n	800d888 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	332c      	adds	r3, #44	; 0x2c
 800d858:	681c      	ldr	r4, [r3, #0]
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	3314      	adds	r3, #20
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f107 0208 	add.w	r2, r7, #8
 800d866:	6839      	ldr	r1, [r7, #0]
 800d868:	4610      	mov	r0, r2
 800d86a:	4798      	blx	r3
 800d86c:	f107 0308 	add.w	r3, r7, #8
 800d870:	4618      	mov	r0, r3
 800d872:	f7fc fd75 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800d876:	4603      	mov	r3, r0
 800d878:	4619      	mov	r1, r3
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	47a0      	blx	r4
 800d87e:	f107 0308 	add.w	r3, r7, #8
 800d882:	4618      	mov	r0, r3
 800d884:	f7fc fd99 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	3318      	adds	r3, #24
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	6838      	ldr	r0, [r7, #0]
 800d892:	4798      	blx	r3
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d007      	beq.n	800d8aa <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	3344      	adds	r3, #68	; 0x44
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4907      	ldr	r1, [pc, #28]	; (800d8c0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800d8a8:	e006      	b.n	800d8b8 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	3344      	adds	r3, #68	; 0x44
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4904      	ldr	r1, [pc, #16]	; (800d8c4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	4798      	blx	r3
}
 800d8b8:	bf00      	nop
 800d8ba:	3714      	adds	r7, #20
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd90      	pop	{r4, r7, pc}
 800d8c0:	08021608 	.word	0x08021608
 800d8c4:	0802160c 	.word	0x0802160c

0800d8c8 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800d8c8:	b590      	push	{r4, r7, lr}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	7a1b      	ldrb	r3, [r3, #8]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d019      	beq.n	800d90e <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	332c      	adds	r3, #44	; 0x2c
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4910      	ldr	r1, [pc, #64]	; (800d924 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	3334      	adds	r3, #52	; 0x34
 800d8ee:	681c      	ldr	r4, [r3, #0]
 800d8f0:	6838      	ldr	r0, [r7, #0]
 800d8f2:	f002 f845 	bl	800f980 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	47a0      	blx	r4
        print(" ms\n");
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	332c      	adds	r3, #44	; 0x2c
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4908      	ldr	r1, [pc, #32]	; (800d928 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800d90c:	e005      	b.n	800d91a <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	3358      	adds	r3, #88	; 0x58
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	4798      	blx	r3
}
 800d91a:	bf00      	nop
 800d91c:	370c      	adds	r7, #12
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd90      	pop	{r4, r7, pc}
 800d922:	bf00      	nop
 800d924:	08021610 	.word	0x08021610
 800d928:	08021614 	.word	0x08021614

0800d92c <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	332c      	adds	r3, #44	; 0x2c
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	687a      	ldr	r2, [r7, #4]
 800d93e:	68d2      	ldr	r2, [r2, #12]
 800d940:	4611      	mov	r1, r2
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	1c5a      	adds	r2, r3, #1
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	605a      	str	r2, [r3, #4]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	685a      	ldr	r2, [r3, #4]
 800d954:	4b0d      	ldr	r3, [pc, #52]	; (800d98c <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800d956:	fb83 1302 	smull	r1, r3, r3, r2
 800d95a:	1119      	asrs	r1, r3, #4
 800d95c:	17d3      	asrs	r3, r2, #31
 800d95e:	1acb      	subs	r3, r1, r3
 800d960:	2132      	movs	r1, #50	; 0x32
 800d962:	fb01 f303 	mul.w	r3, r1, r3
 800d966:	1ad3      	subs	r3, r2, r3
 800d968:	2b00      	cmp	r3, #0
 800d96a:	bf0c      	ite	eq
 800d96c:	2301      	moveq	r3, #1
 800d96e:	2300      	movne	r3, #0
 800d970:	b2db      	uxtb	r3, r3
 800d972:	2b00      	cmp	r3, #0
 800d974:	d006      	beq.n	800d984 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	332c      	adds	r3, #44	; 0x2c
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4904      	ldr	r1, [pc, #16]	; (800d990 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	4798      	blx	r3
}
 800d984:	bf00      	nop
 800d986:	3708      	adds	r7, #8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	51eb851f 	.word	0x51eb851f
 800d990:	0802161c 	.word	0x0802161c

0800d994 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	683a      	ldr	r2, [r7, #0]
 800d9a2:	60da      	str	r2, [r3, #12]
}
 800d9a4:	bf00      	nop
 800d9a6:	370c      	adds	r7, #12
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
}
 800d9b8:	bf00      	nop
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
}
 800d9ce:	bf00      	nop
 800d9d0:	370c      	adds	r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800d9da:	b480      	push	{r7}
 800d9dc:	b083      	sub	sp, #12
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	6039      	str	r1, [r7, #0]
}
 800d9e4:	bf00      	nop
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800d9f0:	b590      	push	{r4, r7, lr}
 800d9f2:	b085      	sub	sp, #20
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
    print("\n");
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	332c      	adds	r3, #44	; 0x2c
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	496f      	ldr	r1, [pc, #444]	; (800dbc0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800da08:	6838      	ldr	r0, [r7, #0]
 800da0a:	f7f8 f83d 	bl	8005a88 <_ZNK10TestResult9isFailureEv>
 800da0e:	4603      	mov	r3, r0
 800da10:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800da12:	6838      	ldr	r0, [r7, #0]
 800da14:	f7f8 f82c 	bl	8005a70 <_ZNK10TestResult15getFailureCountEv>
 800da18:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800da1a:	7bfb      	ldrb	r3, [r7, #15]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d02b      	beq.n	800da78 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	7a5b      	ldrb	r3, [r3, #9]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d006      	beq.n	800da36 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	332c      	adds	r3, #44	; 0x2c
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4964      	ldr	r1, [pc, #400]	; (800dbc4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	4798      	blx	r3
        }
        print("Errors (");
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	332c      	adds	r3, #44	; 0x2c
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4962      	ldr	r1, [pc, #392]	; (800dbc8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	4798      	blx	r3
        if (failureCount > 0) {
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d00e      	beq.n	800da68 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	3334      	adds	r3, #52	; 0x34
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	68b9      	ldr	r1, [r7, #8]
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	4798      	blx	r3
            print(" failures, ");
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	332c      	adds	r3, #44	; 0x2c
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	495a      	ldr	r1, [pc, #360]	; (800dbcc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	4798      	blx	r3
 800da66:	e019      	b.n	800da9c <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	332c      	adds	r3, #44	; 0x2c
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4957      	ldr	r1, [pc, #348]	; (800dbd0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	4798      	blx	r3
 800da76:	e011      	b.n	800da9c <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	7a5b      	ldrb	r3, [r3, #9]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d006      	beq.n	800da8e <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	332c      	adds	r3, #44	; 0x2c
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4952      	ldr	r1, [pc, #328]	; (800dbd4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	4798      	blx	r3
        }
        print("OK (");
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	332c      	adds	r3, #44	; 0x2c
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	4950      	ldr	r1, [pc, #320]	; (800dbd8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	4798      	blx	r3
    }
    print(result.getTestCount());
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	3334      	adds	r3, #52	; 0x34
 800daa2:	681c      	ldr	r4, [r3, #0]
 800daa4:	6838      	ldr	r0, [r7, #0]
 800daa6:	f7ff fdd1 	bl	800d64c <_ZNK10TestResult12getTestCountEv>
 800daaa:	4603      	mov	r3, r0
 800daac:	4619      	mov	r1, r3
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	47a0      	blx	r4
    print(" tests, ");
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	332c      	adds	r3, #44	; 0x2c
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4948      	ldr	r1, [pc, #288]	; (800dbdc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	4798      	blx	r3
    print(result.getRunCount());
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	3334      	adds	r3, #52	; 0x34
 800dac6:	681c      	ldr	r4, [r3, #0]
 800dac8:	6838      	ldr	r0, [r7, #0]
 800daca:	f7f7 ffb9 	bl	8005a40 <_ZNK10TestResult11getRunCountEv>
 800dace:	4603      	mov	r3, r0
 800dad0:	4619      	mov	r1, r3
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	47a0      	blx	r4
    print(" ran, ");
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	332c      	adds	r3, #44	; 0x2c
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4940      	ldr	r1, [pc, #256]	; (800dbe0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	4798      	blx	r3
    print(result.getCheckCount());
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	3334      	adds	r3, #52	; 0x34
 800daea:	681c      	ldr	r4, [r3, #0]
 800daec:	6838      	ldr	r0, [r7, #0]
 800daee:	f7f8 fc13 	bl	8006318 <_ZNK10TestResult13getCheckCountEv>
 800daf2:	4603      	mov	r3, r0
 800daf4:	4619      	mov	r1, r3
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	47a0      	blx	r4
    print(" checks, ");
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	332c      	adds	r3, #44	; 0x2c
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	4938      	ldr	r1, [pc, #224]	; (800dbe4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	4798      	blx	r3
    print(result.getIgnoredCount());
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	3334      	adds	r3, #52	; 0x34
 800db0e:	681c      	ldr	r4, [r3, #0]
 800db10:	6838      	ldr	r0, [r7, #0]
 800db12:	f7f7 ffa1 	bl	8005a58 <_ZNK10TestResult15getIgnoredCountEv>
 800db16:	4603      	mov	r3, r0
 800db18:	4619      	mov	r1, r3
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	47a0      	blx	r4
    print(" ignored, ");
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	332c      	adds	r3, #44	; 0x2c
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4930      	ldr	r1, [pc, #192]	; (800dbe8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	3334      	adds	r3, #52	; 0x34
 800db32:	681c      	ldr	r4, [r3, #0]
 800db34:	6838      	ldr	r0, [r7, #0]
 800db36:	f7ff fd95 	bl	800d664 <_ZNK10TestResult19getFilteredOutCountEv>
 800db3a:	4603      	mov	r3, r0
 800db3c:	4619      	mov	r1, r3
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	47a0      	blx	r4
    print(" filtered out, ");
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	332c      	adds	r3, #44	; 0x2c
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4928      	ldr	r1, [pc, #160]	; (800dbec <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	3334      	adds	r3, #52	; 0x34
 800db56:	681c      	ldr	r4, [r3, #0]
 800db58:	6838      	ldr	r0, [r7, #0]
 800db5a:	f001 ff05 	bl	800f968 <_ZNK10TestResult21getTotalExecutionTimeEv>
 800db5e:	4603      	mov	r3, r0
 800db60:	4619      	mov	r1, r3
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	47a0      	blx	r4
    print(" ms)");
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	332c      	adds	r3, #44	; 0x2c
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4920      	ldr	r1, [pc, #128]	; (800dbf0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	4798      	blx	r3
    if (color_) {
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	7a5b      	ldrb	r3, [r3, #9]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d006      	beq.n	800db8a <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	332c      	adds	r3, #44	; 0x2c
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	491b      	ldr	r1, [pc, #108]	; (800dbf4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800db8a:	7bfb      	ldrb	r3, [r7, #15]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d009      	beq.n	800dba4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d106      	bne.n	800dba4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	332c      	adds	r3, #44	; 0x2c
 800db9c:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800db9e:	4916      	ldr	r1, [pc, #88]	; (800dbf8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	4798      	blx	r3
    }
    print("\n\n");
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	332c      	adds	r3, #44	; 0x2c
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4913      	ldr	r1, [pc, #76]	; (800dbfc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	4798      	blx	r3

    dotCount_ = 0;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	605a      	str	r2, [r3, #4]
}
 800dbb8:	bf00      	nop
 800dbba:	3714      	adds	r7, #20
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd90      	pop	{r4, r7, pc}
 800dbc0:	0802161c 	.word	0x0802161c
 800dbc4:	08021620 	.word	0x08021620
 800dbc8:	08021628 	.word	0x08021628
 800dbcc:	08021634 	.word	0x08021634
 800dbd0:	08021640 	.word	0x08021640
 800dbd4:	08021650 	.word	0x08021650
 800dbd8:	08021658 	.word	0x08021658
 800dbdc:	08021660 	.word	0x08021660
 800dbe0:	0802166c 	.word	0x0802166c
 800dbe4:	08021674 	.word	0x08021674
 800dbe8:	08021680 	.word	0x08021680
 800dbec:	0802168c 	.word	0x0802168c
 800dbf0:	0802169c 	.word	0x0802169c
 800dbf4:	080216a4 	.word	0x080216a4
 800dbf8:	080216a8 	.word	0x080216a8
 800dbfc:	0802174c 	.word	0x0802174c

0800dc00 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d922      	bls.n	800dc58 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	332c      	adds	r3, #44	; 0x2c
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4911      	ldr	r1, [pc, #68]	; (800dc60 <_ZN10TestOutput12printTestRunEjj+0x60>)
 800dc1c:	68f8      	ldr	r0, [r7, #12]
 800dc1e:	4798      	blx	r3
        print(number);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	3334      	adds	r3, #52	; 0x34
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	68b9      	ldr	r1, [r7, #8]
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	4798      	blx	r3
        print(" of ");
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	332c      	adds	r3, #44	; 0x2c
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	490b      	ldr	r1, [pc, #44]	; (800dc64 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	4798      	blx	r3
        print(total);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	3334      	adds	r3, #52	; 0x34
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	6879      	ldr	r1, [r7, #4]
 800dc46:	68f8      	ldr	r0, [r7, #12]
 800dc48:	4798      	blx	r3
        print("\n");
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	332c      	adds	r3, #44	; 0x2c
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4905      	ldr	r1, [pc, #20]	; (800dc68 <_ZN10TestOutput12printTestRunEjj+0x68>)
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	4798      	blx	r3
    }
}
 800dc58:	bf00      	nop
 800dc5a:	3710      	adds	r7, #16
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	08021750 	.word	0x08021750
 800dc64:	0802175c 	.word	0x0802175c
 800dc68:	0802161c 	.word	0x0802161c

0800dc6c <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800dc76:	6838      	ldr	r0, [r7, #0]
 800dc78:	f7fd ffa1 	bl	800bbbe <_ZNK11TestFailure17isOutsideTestFileEv>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d105      	bne.n	800dc8e <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800dc82:	6838      	ldr	r0, [r7, #0]
 800dc84:	f7fd ffad 	bl	800bbe2 <_ZNK11TestFailure18isInHelperFunctionEv>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d001      	beq.n	800dc92 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e000      	b.n	800dc94 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800dc92:	2300      	movs	r3, #0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d004      	beq.n	800dca2 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800dc98:	6839      	ldr	r1, [r7, #0]
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 f81d 	bl	800dcda <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800dca0:	e003      	b.n	800dcaa <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800dca2:	6839      	ldr	r1, [r7, #0]
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 f86b 	bl	800dd80 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	3318      	adds	r3, #24
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f107 0208 	add.w	r2, r7, #8
 800dcb6:	6839      	ldr	r1, [r7, #0]
 800dcb8:	4610      	mov	r0, r2
 800dcba:	4798      	blx	r3
 800dcbc:	f107 0308 	add.w	r3, r7, #8
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 f8b2 	bl	800de2c <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800dcc8:	f107 0308 	add.w	r3, r7, #8
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7fc fb74 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800dcd2:	bf00      	nop
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b088      	sub	sp, #32
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
 800dce2:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	331c      	adds	r3, #28
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f107 0208 	add.w	r2, r7, #8
 800dcf0:	6839      	ldr	r1, [r7, #0]
 800dcf2:	4610      	mov	r0, r2
 800dcf4:	4798      	blx	r3
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	3320      	adds	r3, #32
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	6838      	ldr	r0, [r7, #0]
 800dd00:	4798      	blx	r3
 800dd02:	4602      	mov	r2, r0
 800dd04:	f107 0308 	add.w	r3, r7, #8
 800dd08:	4619      	mov	r1, r3
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 f8be 	bl	800de8c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800dd10:	f107 0308 	add.w	r3, r7, #8
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7fc fb50 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	330c      	adds	r3, #12
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f107 0210 	add.w	r2, r7, #16
 800dd26:	6839      	ldr	r1, [r7, #0]
 800dd28:	4610      	mov	r0, r2
 800dd2a:	4798      	blx	r3
 800dd2c:	f107 0310 	add.w	r3, r7, #16
 800dd30:	4619      	mov	r1, r3
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 f85c 	bl	800ddf0 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800dd38:	f107 0310 	add.w	r3, r7, #16
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7fc fb3c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	3308      	adds	r3, #8
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f107 0218 	add.w	r2, r7, #24
 800dd4e:	6839      	ldr	r1, [r7, #0]
 800dd50:	4610      	mov	r0, r2
 800dd52:	4798      	blx	r3
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	3314      	adds	r3, #20
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	6838      	ldr	r0, [r7, #0]
 800dd5e:	4798      	blx	r3
 800dd60:	4602      	mov	r2, r0
 800dd62:	f107 0318 	add.w	r3, r7, #24
 800dd66:	4619      	mov	r1, r3
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 f88f 	bl	800de8c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800dd6e:	f107 0318 	add.w	r3, r7, #24
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7fc fb21 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800dd78:	bf00      	nop
 800dd7a:	3720      	adds	r7, #32
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b086      	sub	sp, #24
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	3308      	adds	r3, #8
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f107 0208 	add.w	r2, r7, #8
 800dd96:	6839      	ldr	r1, [r7, #0]
 800dd98:	4610      	mov	r0, r2
 800dd9a:	4798      	blx	r3
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	3314      	adds	r3, #20
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	6838      	ldr	r0, [r7, #0]
 800dda6:	4798      	blx	r3
 800dda8:	4602      	mov	r2, r0
 800ddaa:	f107 0308 	add.w	r3, r7, #8
 800ddae:	4619      	mov	r1, r3
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f000 f86b 	bl	800de8c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800ddb6:	f107 0308 	add.w	r3, r7, #8
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fc fafd 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	330c      	adds	r3, #12
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f107 0210 	add.w	r2, r7, #16
 800ddcc:	6839      	ldr	r1, [r7, #0]
 800ddce:	4610      	mov	r0, r2
 800ddd0:	4798      	blx	r3
 800ddd2:	f107 0310 	add.w	r3, r7, #16
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 f809 	bl	800ddf0 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800ddde:	f107 0310 	add.w	r3, r7, #16
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7fc fae9 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800dde8:	bf00      	nop
 800ddea:	3718      	adds	r7, #24
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800ddf0:	b590      	push	{r4, r7, lr}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	332c      	adds	r3, #44	; 0x2c
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4909      	ldr	r1, [pc, #36]	; (800de28 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	4798      	blx	r3
    print(testName.asCharString());
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	332c      	adds	r3, #44	; 0x2c
 800de0e:	681c      	ldr	r4, [r3, #0]
 800de10:	6838      	ldr	r0, [r7, #0]
 800de12:	f7fc faa5 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800de16:	4603      	mov	r3, r0
 800de18:	4619      	mov	r1, r3
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	47a0      	blx	r4
}
 800de1e:	bf00      	nop
 800de20:	370c      	adds	r7, #12
 800de22:	46bd      	mov	sp, r7
 800de24:	bd90      	pop	{r4, r7, pc}
 800de26:	bf00      	nop
 800de28:	08021764 	.word	0x08021764

0800de2c <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800de2c:	b590      	push	{r4, r7, lr}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
    print("\n");
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	332c      	adds	r3, #44	; 0x2c
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4910      	ldr	r1, [pc, #64]	; (800de80 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	4798      	blx	r3
    print("\t");
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	332c      	adds	r3, #44	; 0x2c
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	490d      	ldr	r1, [pc, #52]	; (800de84 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	4798      	blx	r3
    print(reason.asCharString());
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	332c      	adds	r3, #44	; 0x2c
 800de58:	681c      	ldr	r4, [r3, #0]
 800de5a:	6838      	ldr	r0, [r7, #0]
 800de5c:	f7fc fa80 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800de60:	4603      	mov	r3, r0
 800de62:	4619      	mov	r1, r3
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	47a0      	blx	r4
    print("\n\n");
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	332c      	adds	r3, #44	; 0x2c
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4905      	ldr	r1, [pc, #20]	; (800de88 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	4798      	blx	r3
}
 800de76:	bf00      	nop
 800de78:	370c      	adds	r7, #12
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd90      	pop	{r4, r7, pc}
 800de7e:	bf00      	nop
 800de80:	0802161c 	.word	0x0802161c
 800de84:	08021774 	.word	0x08021774
 800de88:	0802174c 	.word	0x0802174c

0800de8c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800de8c:	b590      	push	{r4, r7, lr}
 800de8e:	b089      	sub	sp, #36	; 0x24
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800de98:	f7ff fbf0 	bl	800d67c <_ZN10TestOutput21getWorkingEnvironmentEv>
 800de9c:	4603      	mov	r3, r0
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	bf0c      	ite	eq
 800dea2:	2301      	moveq	r3, #1
 800dea4:	2300      	movne	r3, #0
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d015      	beq.n	800ded8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	3354      	adds	r3, #84	; 0x54
 800deb2:	681c      	ldr	r4, [r3, #0]
 800deb4:	f107 0310 	add.w	r3, r7, #16
 800deb8:	68b9      	ldr	r1, [r7, #8]
 800deba:	4618      	mov	r0, r3
 800debc:	f7fb ff19 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 800dec0:	f107 0310 	add.w	r3, r7, #16
 800dec4:	687a      	ldr	r2, [r7, #4]
 800dec6:	4619      	mov	r1, r3
 800dec8:	68f8      	ldr	r0, [r7, #12]
 800deca:	47a0      	blx	r4
 800decc:	f107 0310 	add.w	r3, r7, #16
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fc fa72 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800ded6:	e014      	b.n	800df02 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	3350      	adds	r3, #80	; 0x50
 800dede:	681c      	ldr	r4, [r3, #0]
 800dee0:	f107 0318 	add.w	r3, r7, #24
 800dee4:	68b9      	ldr	r1, [r7, #8]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fb ff03 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 800deec:	f107 0318 	add.w	r3, r7, #24
 800def0:	687a      	ldr	r2, [r7, #4]
 800def2:	4619      	mov	r1, r3
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	47a0      	blx	r4
 800def8:	f107 0318 	add.w	r3, r7, #24
 800defc:	4618      	mov	r0, r3
 800defe:	f7fc fa5c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800df02:	bf00      	nop
 800df04:	3724      	adds	r7, #36	; 0x24
 800df06:	46bd      	mov	sp, r7
 800df08:	bd90      	pop	{r4, r7, pc}
	...

0800df0c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800df0c:	b590      	push	{r4, r7, lr}
 800df0e:	b085      	sub	sp, #20
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
    print("\n");
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	332c      	adds	r3, #44	; 0x2c
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4916      	ldr	r1, [pc, #88]	; (800df7c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800df22:	68f8      	ldr	r0, [r7, #12]
 800df24:	4798      	blx	r3
    print(file.asCharString());
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	332c      	adds	r3, #44	; 0x2c
 800df2c:	681c      	ldr	r4, [r3, #0]
 800df2e:	68b8      	ldr	r0, [r7, #8]
 800df30:	f7fc fa16 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800df34:	4603      	mov	r3, r0
 800df36:	4619      	mov	r1, r3
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	47a0      	blx	r4
    print(":");
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	332c      	adds	r3, #44	; 0x2c
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	490e      	ldr	r1, [pc, #56]	; (800df80 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800df46:	68f8      	ldr	r0, [r7, #12]
 800df48:	4798      	blx	r3
    print(lineNumber);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	3334      	adds	r3, #52	; 0x34
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	6879      	ldr	r1, [r7, #4]
 800df54:	68f8      	ldr	r0, [r7, #12]
 800df56:	4798      	blx	r3
    print(":");
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	332c      	adds	r3, #44	; 0x2c
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4907      	ldr	r1, [pc, #28]	; (800df80 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800df62:	68f8      	ldr	r0, [r7, #12]
 800df64:	4798      	blx	r3
    print(" error:");
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	332c      	adds	r3, #44	; 0x2c
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	4905      	ldr	r1, [pc, #20]	; (800df84 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800df70:	68f8      	ldr	r0, [r7, #12]
 800df72:	4798      	blx	r3
}
 800df74:	bf00      	nop
 800df76:	3714      	adds	r7, #20
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd90      	pop	{r4, r7, pc}
 800df7c:	0802161c 	.word	0x0802161c
 800df80:	08021778 	.word	0x08021778
 800df84:	0802177c 	.word	0x0802177c

0800df88 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800df88:	b590      	push	{r4, r7, lr}
 800df8a:	b085      	sub	sp, #20
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
    print("\n");
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	332c      	adds	r3, #44	; 0x2c
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4916      	ldr	r1, [pc, #88]	; (800dff8 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800df9e:	68f8      	ldr	r0, [r7, #12]
 800dfa0:	4798      	blx	r3
    print(file.asCharString());
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	332c      	adds	r3, #44	; 0x2c
 800dfa8:	681c      	ldr	r4, [r3, #0]
 800dfaa:	68b8      	ldr	r0, [r7, #8]
 800dfac:	f7fc f9d8 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	47a0      	blx	r4
    print("(");
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	332c      	adds	r3, #44	; 0x2c
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	490e      	ldr	r1, [pc, #56]	; (800dffc <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	4798      	blx	r3
    print(lineNumber);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	3334      	adds	r3, #52	; 0x34
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	6879      	ldr	r1, [r7, #4]
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	4798      	blx	r3
    print("):");
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	332c      	adds	r3, #44	; 0x2c
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4908      	ldr	r1, [pc, #32]	; (800e000 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800dfde:	68f8      	ldr	r0, [r7, #12]
 800dfe0:	4798      	blx	r3
    print(" error:");
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	332c      	adds	r3, #44	; 0x2c
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	4906      	ldr	r1, [pc, #24]	; (800e004 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	4798      	blx	r3
}
 800dff0:	bf00      	nop
 800dff2:	3714      	adds	r7, #20
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd90      	pop	{r4, r7, pc}
 800dff8:	0802161c 	.word	0x0802161c
 800dffc:	08021784 	.word	0x08021784
 800e000:	08021788 	.word	0x08021788
 800e004:	0802177c 	.word	0x0802177c

0800e008 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	7a1b      	ldrb	r3, [r3, #8]
 800e016:	2b02      	cmp	r3, #2
 800e018:	d106      	bne.n	800e028 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	3328      	adds	r3, #40	; 0x28
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	6839      	ldr	r1, [r7, #0]
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	4798      	blx	r3
}
 800e028:	bf00      	nop
 800e02a:	3708      	adds	r7, #8
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
    while (*s) {
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d009      	beq.n	800e056 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800e042:	4b0a      	ldr	r3, [pc, #40]	; (800e06c <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	683a      	ldr	r2, [r7, #0]
 800e048:	7812      	ldrb	r2, [r2, #0]
 800e04a:	4610      	mov	r0, r2
 800e04c:	4798      	blx	r3
        s++;
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	3301      	adds	r3, #1
 800e052:	603b      	str	r3, [r7, #0]
    while (*s) {
 800e054:	e7f1      	b.n	800e03a <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	334c      	adds	r3, #76	; 0x4c
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	4798      	blx	r3
}
 800e062:	bf00      	nop
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	200000bc 	.word	0x200000bc

0800e070 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800e078:	4b03      	ldr	r3, [pc, #12]	; (800e088 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4798      	blx	r3
}
 800e07e:	bf00      	nop
 800e080:	3708      	adds	r7, #8
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	200000c0 	.word	0x200000c0

0800e08c <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	4618      	mov	r0, r3
 800e098:	f7ff fb00 	bl	800d69c <_ZN10TestOutputC1Ev>
 800e09c:	4a06      	ldr	r2, [pc, #24]	; (800e0b8 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	601a      	str	r2, [r3, #0]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	611a      	str	r2, [r3, #16]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	615a      	str	r2, [r3, #20]
{
}
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	080241dc 	.word	0x080241dc

0800e0bc <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	4a0e      	ldr	r2, [pc, #56]	; (800e100 <_ZN19CompositeTestOutputD1Ev+0x44>)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	691b      	ldr	r3, [r3, #16]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d004      	beq.n	800e0dc <_ZN19CompositeTestOutputD1Ev+0x20>
 800e0d2:	681a      	ldr	r2, [r3, #0]
 800e0d4:	3204      	adds	r2, #4
 800e0d6:	6812      	ldr	r2, [r2, #0]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	4790      	blx	r2
  delete outputTwo_;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	695b      	ldr	r3, [r3, #20]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d004      	beq.n	800e0ee <_ZN19CompositeTestOutputD1Ev+0x32>
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	3204      	adds	r2, #4
 800e0e8:	6812      	ldr	r2, [r2, #0]
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7ff faf1 	bl	800d6d8 <_ZN10TestOutputD1Ev>
}
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	080241dc 	.word	0x080241dc

0800e104 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
}
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7ff ffd5 	bl	800e0bc <_ZN19CompositeTestOutputD1Ev>
 800e112:	2118      	movs	r1, #24
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f7f9 f9e9 	bl	80074ec <_ZdlPvj>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4618      	mov	r0, r3
 800e11e:	3708      	adds	r7, #8
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	691b      	ldr	r3, [r3, #16]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d004      	beq.n	800e140 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	3204      	adds	r2, #4
 800e13a:	6812      	ldr	r2, [r2, #0]
 800e13c:	4618      	mov	r0, r3
 800e13e:	4790      	blx	r2
  outputOne_ = output;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	683a      	ldr	r2, [r7, #0]
 800e144:	611a      	str	r2, [r3, #16]
}
 800e146:	bf00      	nop
 800e148:	3708      	adds	r7, #8
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}

0800e14e <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800e14e:	b580      	push	{r7, lr}
 800e150:	b082      	sub	sp, #8
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
 800e156:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	695b      	ldr	r3, [r3, #20]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d004      	beq.n	800e16a <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	3204      	adds	r2, #4
 800e164:	6812      	ldr	r2, [r2, #0]
 800e166:	4618      	mov	r0, r3
 800e168:	4790      	blx	r2
  outputTwo_ = output;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	683a      	ldr	r2, [r7, #0]
 800e16e:	615a      	str	r2, [r3, #20]
}
 800e170:	bf00      	nop
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	691b      	ldr	r3, [r3, #16]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d008      	beq.n	800e19a <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	691a      	ldr	r2, [r3, #16]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	691b      	ldr	r3, [r3, #16]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	3308      	adds	r3, #8
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4610      	mov	r0, r2
 800e198:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	695b      	ldr	r3, [r3, #20]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d008      	beq.n	800e1b4 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	695a      	ldr	r2, [r3, #20]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	695b      	ldr	r3, [r3, #20]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	3308      	adds	r3, #8
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4610      	mov	r0, r2
 800e1b2:	4798      	blx	r3
}
 800e1b4:	bf00      	nop
 800e1b6:	3708      	adds	r7, #8
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	691b      	ldr	r3, [r3, #16]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d009      	beq.n	800e1e2 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	691a      	ldr	r2, [r3, #16]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	691b      	ldr	r3, [r3, #16]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	330c      	adds	r3, #12
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	6839      	ldr	r1, [r7, #0]
 800e1de:	4610      	mov	r0, r2
 800e1e0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	695b      	ldr	r3, [r3, #20]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d009      	beq.n	800e1fe <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	695a      	ldr	r2, [r3, #20]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	695b      	ldr	r3, [r3, #20]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	330c      	adds	r3, #12
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	6839      	ldr	r1, [r7, #0]
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	4798      	blx	r3
}
 800e1fe:	bf00      	nop
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}

0800e206 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800e206:	b580      	push	{r7, lr}
 800e208:	b082      	sub	sp, #8
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
 800e20e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	691b      	ldr	r3, [r3, #16]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d009      	beq.n	800e22c <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	691a      	ldr	r2, [r3, #16]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	691b      	ldr	r3, [r3, #16]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	3310      	adds	r3, #16
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	6839      	ldr	r1, [r7, #0]
 800e228:	4610      	mov	r0, r2
 800e22a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	695b      	ldr	r3, [r3, #20]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d009      	beq.n	800e248 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	695a      	ldr	r2, [r3, #20]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	695b      	ldr	r3, [r3, #20]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	3310      	adds	r3, #16
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	6839      	ldr	r1, [r7, #0]
 800e244:	4610      	mov	r0, r2
 800e246:	4798      	blx	r3
}
 800e248:	bf00      	nop
 800e24a:	3708      	adds	r7, #8
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	691b      	ldr	r3, [r3, #16]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d009      	beq.n	800e276 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	691a      	ldr	r2, [r3, #16]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	691b      	ldr	r3, [r3, #16]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	3314      	adds	r3, #20
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	6839      	ldr	r1, [r7, #0]
 800e272:	4610      	mov	r0, r2
 800e274:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	695b      	ldr	r3, [r3, #20]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d009      	beq.n	800e292 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	695a      	ldr	r2, [r3, #20]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	695b      	ldr	r3, [r3, #20]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	3314      	adds	r3, #20
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	6839      	ldr	r1, [r7, #0]
 800e28e:	4610      	mov	r0, r2
 800e290:	4798      	blx	r3
}
 800e292:	bf00      	nop
 800e294:	3708      	adds	r7, #8
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b082      	sub	sp, #8
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
 800e2a2:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	691b      	ldr	r3, [r3, #16]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d009      	beq.n	800e2c0 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	691a      	ldr	r2, [r3, #16]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	691b      	ldr	r3, [r3, #16]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	3318      	adds	r3, #24
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	4610      	mov	r0, r2
 800e2be:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	695b      	ldr	r3, [r3, #20]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d009      	beq.n	800e2dc <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	695a      	ldr	r2, [r3, #20]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	695b      	ldr	r3, [r3, #20]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	3318      	adds	r3, #24
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	6839      	ldr	r1, [r7, #0]
 800e2d8:	4610      	mov	r0, r2
 800e2da:	4798      	blx	r3
}
 800e2dc:	bf00      	nop
 800e2de:	3708      	adds	r7, #8
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	691b      	ldr	r3, [r3, #16]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d009      	beq.n	800e30a <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	691a      	ldr	r2, [r3, #16]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	691b      	ldr	r3, [r3, #16]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	331c      	adds	r3, #28
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	6839      	ldr	r1, [r7, #0]
 800e306:	4610      	mov	r0, r2
 800e308:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	695b      	ldr	r3, [r3, #20]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d009      	beq.n	800e326 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	695a      	ldr	r2, [r3, #20]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	695b      	ldr	r3, [r3, #20]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	331c      	adds	r3, #28
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	6839      	ldr	r1, [r7, #0]
 800e322:	4610      	mov	r0, r2
 800e324:	4798      	blx	r3
}
 800e326:	bf00      	nop
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b082      	sub	sp, #8
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
 800e336:	460b      	mov	r3, r1
 800e338:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	691b      	ldr	r3, [r3, #16]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d009      	beq.n	800e356 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	691a      	ldr	r2, [r3, #16]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	691b      	ldr	r3, [r3, #16]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	3320      	adds	r3, #32
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	78f9      	ldrb	r1, [r7, #3]
 800e352:	4610      	mov	r0, r2
 800e354:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	695b      	ldr	r3, [r3, #20]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d009      	beq.n	800e372 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	695a      	ldr	r2, [r3, #20]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	695b      	ldr	r3, [r3, #20]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	3320      	adds	r3, #32
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	78f9      	ldrb	r1, [r7, #3]
 800e36e:	4610      	mov	r0, r2
 800e370:	4798      	blx	r3
}
 800e372:	bf00      	nop
 800e374:	3708      	adds	r7, #8
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b082      	sub	sp, #8
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	691b      	ldr	r3, [r3, #16]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d008      	beq.n	800e39c <_ZN19CompositeTestOutput5colorEv+0x22>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	691a      	ldr	r2, [r3, #16]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	691b      	ldr	r3, [r3, #16]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	3324      	adds	r3, #36	; 0x24
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4610      	mov	r0, r2
 800e39a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	695b      	ldr	r3, [r3, #20]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d008      	beq.n	800e3b6 <_ZN19CompositeTestOutput5colorEv+0x3c>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	695a      	ldr	r2, [r3, #20]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	695b      	ldr	r3, [r3, #20]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	3324      	adds	r3, #36	; 0x24
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	4610      	mov	r0, r2
 800e3b4:	4798      	blx	r3
}
 800e3b6:	bf00      	nop
 800e3b8:	3708      	adds	r7, #8
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}

0800e3be <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b082      	sub	sp, #8
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
 800e3c6:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	691b      	ldr	r3, [r3, #16]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d009      	beq.n	800e3e4 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	691a      	ldr	r2, [r3, #16]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	691b      	ldr	r3, [r3, #16]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	3328      	adds	r3, #40	; 0x28
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	6839      	ldr	r1, [r7, #0]
 800e3e0:	4610      	mov	r0, r2
 800e3e2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	695b      	ldr	r3, [r3, #20]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d009      	beq.n	800e400 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	695a      	ldr	r2, [r3, #20]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	695b      	ldr	r3, [r3, #20]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	3328      	adds	r3, #40	; 0x28
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	6839      	ldr	r1, [r7, #0]
 800e3fc:	4610      	mov	r0, r2
 800e3fe:	4798      	blx	r3
}
 800e400:	bf00      	nop
 800e402:	3708      	adds	r7, #8
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	691b      	ldr	r3, [r3, #16]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d009      	beq.n	800e42e <_ZN19CompositeTestOutput5printEPKc+0x26>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	691a      	ldr	r2, [r3, #16]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	691b      	ldr	r3, [r3, #16]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	332c      	adds	r3, #44	; 0x2c
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	6839      	ldr	r1, [r7, #0]
 800e42a:	4610      	mov	r0, r2
 800e42c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	695b      	ldr	r3, [r3, #20]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d009      	beq.n	800e44a <_ZN19CompositeTestOutput5printEPKc+0x42>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	695a      	ldr	r2, [r3, #20]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	695b      	ldr	r3, [r3, #20]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	332c      	adds	r3, #44	; 0x2c
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	6839      	ldr	r1, [r7, #0]
 800e446:	4610      	mov	r0, r2
 800e448:	4798      	blx	r3
}
 800e44a:	bf00      	nop
 800e44c:	3708      	adds	r7, #8
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}

0800e452 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800e452:	b580      	push	{r7, lr}
 800e454:	b082      	sub	sp, #8
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
 800e45a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	691b      	ldr	r3, [r3, #16]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d009      	beq.n	800e478 <_ZN19CompositeTestOutput5printEl+0x26>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	691a      	ldr	r2, [r3, #16]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	691b      	ldr	r3, [r3, #16]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	3330      	adds	r3, #48	; 0x30
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	6839      	ldr	r1, [r7, #0]
 800e474:	4610      	mov	r0, r2
 800e476:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	695b      	ldr	r3, [r3, #20]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d009      	beq.n	800e494 <_ZN19CompositeTestOutput5printEl+0x42>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	695a      	ldr	r2, [r3, #20]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	695b      	ldr	r3, [r3, #20]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	3330      	adds	r3, #48	; 0x30
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	6839      	ldr	r1, [r7, #0]
 800e490:	4610      	mov	r0, r2
 800e492:	4798      	blx	r3
}
 800e494:	bf00      	nop
 800e496:	3708      	adds	r7, #8
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d009      	beq.n	800e4c2 <_ZN19CompositeTestOutput5printEj+0x26>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	691a      	ldr	r2, [r3, #16]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	691b      	ldr	r3, [r3, #16]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	3334      	adds	r3, #52	; 0x34
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	6839      	ldr	r1, [r7, #0]
 800e4be:	4610      	mov	r0, r2
 800e4c0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	695b      	ldr	r3, [r3, #20]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d009      	beq.n	800e4de <_ZN19CompositeTestOutput5printEj+0x42>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	695a      	ldr	r2, [r3, #20]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	695b      	ldr	r3, [r3, #20]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	3334      	adds	r3, #52	; 0x34
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	6839      	ldr	r1, [r7, #0]
 800e4da:	4610      	mov	r0, r2
 800e4dc:	4798      	blx	r3
}
 800e4de:	bf00      	nop
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}

0800e4e6 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800e4e6:	b580      	push	{r7, lr}
 800e4e8:	b084      	sub	sp, #16
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	60f8      	str	r0, [r7, #12]
 800e4ee:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	691b      	ldr	r3, [r3, #16]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d00a      	beq.n	800e510 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	691a      	ldr	r2, [r3, #16]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	691b      	ldr	r3, [r3, #16]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	3338      	adds	r3, #56	; 0x38
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	ed97 0b00 	vldr	d0, [r7]
 800e50c:	4610      	mov	r0, r2
 800e50e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	695b      	ldr	r3, [r3, #20]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00a      	beq.n	800e52e <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	695a      	ldr	r2, [r3, #20]
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	695b      	ldr	r3, [r3, #20]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	3338      	adds	r3, #56	; 0x38
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	ed97 0b00 	vldr	d0, [r7]
 800e52a:	4610      	mov	r0, r2
 800e52c:	4798      	blx	r3
}
 800e52e:	bf00      	nop
 800e530:	3710      	adds	r7, #16
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b082      	sub	sp, #8
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
 800e53e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d009      	beq.n	800e55c <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	691a      	ldr	r2, [r3, #16]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	691b      	ldr	r3, [r3, #16]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	333c      	adds	r3, #60	; 0x3c
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	6839      	ldr	r1, [r7, #0]
 800e558:	4610      	mov	r0, r2
 800e55a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	695b      	ldr	r3, [r3, #20]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d009      	beq.n	800e578 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	695a      	ldr	r2, [r3, #20]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	695b      	ldr	r3, [r3, #20]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	333c      	adds	r3, #60	; 0x3c
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	6839      	ldr	r1, [r7, #0]
 800e574:	4610      	mov	r0, r2
 800e576:	4798      	blx	r3
}
 800e578:	bf00      	nop
 800e57a:	3708      	adds	r7, #8
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}

0800e580 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	691b      	ldr	r3, [r3, #16]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d009      	beq.n	800e5a6 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	691a      	ldr	r2, [r3, #16]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	691b      	ldr	r3, [r3, #16]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	3344      	adds	r3, #68	; 0x44
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	6839      	ldr	r1, [r7, #0]
 800e5a2:	4610      	mov	r0, r2
 800e5a4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	695b      	ldr	r3, [r3, #20]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d009      	beq.n	800e5c2 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	695a      	ldr	r2, [r3, #20]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	695b      	ldr	r3, [r3, #20]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	3344      	adds	r3, #68	; 0x44
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	6839      	ldr	r1, [r7, #0]
 800e5be:	4610      	mov	r0, r2
 800e5c0:	4798      	blx	r3
}
 800e5c2:	bf00      	nop
 800e5c4:	3708      	adds	r7, #8
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b082      	sub	sp, #8
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	691b      	ldr	r3, [r3, #16]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d008      	beq.n	800e5ec <_ZN19CompositeTestOutput5flushEv+0x22>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	691a      	ldr	r2, [r3, #16]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	691b      	ldr	r3, [r3, #16]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	334c      	adds	r3, #76	; 0x4c
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	695b      	ldr	r3, [r3, #20]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d008      	beq.n	800e606 <_ZN19CompositeTestOutput5flushEv+0x3c>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	695a      	ldr	r2, [r3, #20]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	695b      	ldr	r3, [r3, #20]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	334c      	adds	r3, #76	; 0x4c
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4610      	mov	r0, r2
 800e604:	4798      	blx	r3
}
 800e606:	bf00      	nop
 800e608:	3708      	adds	r7, #8
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}

0800e60e <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800e60e:	b480      	push	{r7}
 800e610:	b085      	sub	sp, #20
 800e612:	af00      	add	r7, sp, #0
 800e614:	60f8      	str	r0, [r7, #12]
 800e616:	60b9      	str	r1, [r7, #8]
 800e618:	607a      	str	r2, [r7, #4]
    }
 800e61a:	bf00      	nop
 800e61c:	3714      	adds	r7, #20
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr

0800e626 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800e626:	b480      	push	{r7}
 800e628:	b085      	sub	sp, #20
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	60f8      	str	r0, [r7, #12]
 800e62e:	60b9      	str	r1, [r7, #8]
 800e630:	607a      	str	r2, [r7, #4]
    }
 800e632:	bf00      	nop
 800e634:	3714      	adds	r7, #20
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr
	...

0800e640 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800e64a:	4a0b      	ldr	r2, [pc, #44]	; (800e678 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	601a      	str	r2, [r3, #0]
 800e650:	f000 f9ce 	bl	800e9f0 <_ZN14NullTestPlugin8instanceEv>
 800e654:	4602      	mov	r2, r0
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	605a      	str	r2, [r3, #4]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	3308      	adds	r3, #8
 800e65e:	6839      	ldr	r1, [r7, #0]
 800e660:	4618      	mov	r0, r3
 800e662:	f7fb fb46 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2201      	movs	r2, #1
 800e66a:	741a      	strb	r2, [r3, #16]
{
}
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	4618      	mov	r0, r3
 800e670:	3708      	adds	r7, #8
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	08024398 	.word	0x08024398

0800e67c <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800e686:	4a0a      	ldr	r2, [pc, #40]	; (800e6b0 <_ZN10TestPluginC1EPS_+0x34>)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	601a      	str	r2, [r3, #0]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	683a      	ldr	r2, [r7, #0]
 800e690:	605a      	str	r2, [r3, #4]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	3308      	adds	r3, #8
 800e696:	4907      	ldr	r1, [pc, #28]	; (800e6b4 <_ZN10TestPluginC1EPS_+0x38>)
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fb fad6 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	741a      	strb	r2, [r3, #16]
{
}
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3708      	adds	r7, #8
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	08024398 	.word	0x08024398
 800e6b4:	0802178c 	.word	0x0802178c

0800e6b8 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	4a06      	ldr	r2, [pc, #24]	; (800e6dc <_ZN10TestPluginD1Ev+0x24>)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	601a      	str	r2, [r3, #0]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	3308      	adds	r3, #8
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7fb fe75 	bl	800a3ba <_ZN12SimpleStringD1Ev>
{
}
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3708      	adds	r7, #8
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	08024398 	.word	0x08024398

0800e6e0 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
}
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f7ff ffe5 	bl	800e6b8 <_ZN10TestPluginD1Ev>
 800e6ee:	2114      	movs	r1, #20
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7f8 fefb 	bl	80074ec <_ZdlPvj>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	683a      	ldr	r2, [r7, #0]
 800e70e:	605a      	str	r2, [r3, #4]
    return this;
 800e710:	687b      	ldr	r3, [r7, #4]
}
 800e712:	4618      	mov	r0, r3
 800e714:	370c      	adds	r7, #12
 800e716:	46bd      	mov	sp, r7
 800e718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71c:	4770      	bx	lr

0800e71e <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800e71e:	b580      	push	{r7, lr}
 800e720:	b084      	sub	sp, #16
 800e722:	af00      	add	r7, sp, #0
 800e724:	60f8      	str	r0, [r7, #12]
 800e726:	60b9      	str	r1, [r7, #8]
 800e728:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	7c1b      	ldrb	r3, [r3, #16]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d007      	beq.n	800e742 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	3308      	adds	r3, #8
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	68b9      	ldr	r1, [r7, #8]
 800e73e:	68f8      	ldr	r0, [r7, #12]
 800e740:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	6858      	ldr	r0, [r3, #4]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	3314      	adds	r3, #20
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	687a      	ldr	r2, [r7, #4]
 800e752:	68b9      	ldr	r1, [r7, #8]
 800e754:	4798      	blx	r3
}
 800e756:	bf00      	nop
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800e75e:	b580      	push	{r7, lr}
 800e760:	b084      	sub	sp, #16
 800e762:	af00      	add	r7, sp, #0
 800e764:	60f8      	str	r0, [r7, #12]
 800e766:	60b9      	str	r1, [r7, #8]
 800e768:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	6858      	ldr	r0, [r3, #4]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	3318      	adds	r3, #24
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	68b9      	ldr	r1, [r7, #8]
 800e77c:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	7c1b      	ldrb	r3, [r3, #16]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d007      	beq.n	800e796 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	330c      	adds	r3, #12
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	68b9      	ldr	r1, [r7, #8]
 800e792:	68f8      	ldr	r0, [r7, #12]
 800e794:	4798      	blx	r3
}
 800e796:	bf00      	nop
 800e798:	3710      	adds	r7, #16
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800e79e:	b590      	push	{r4, r7, lr}
 800e7a0:	b085      	sub	sp, #20
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	60f8      	str	r0, [r7, #12]
 800e7a6:	60b9      	str	r1, [r7, #8]
 800e7a8:	607a      	str	r2, [r7, #4]
 800e7aa:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	331c      	adds	r3, #28
 800e7b2:	681c      	ldr	r4, [r3, #0]
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	68b9      	ldr	r1, [r7, #8]
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	47a0      	blx	r4
 800e7be:	4603      	mov	r3, r0
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3714      	adds	r7, #20
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd90      	pop	{r4, r7, pc}

0800e7c8 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800e7c8:	b590      	push	{r4, r7, lr}
 800e7ca:	b085      	sub	sp, #20
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]
 800e7d4:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	3310      	adds	r3, #16
 800e7dc:	681c      	ldr	r4, [r3, #0]
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	687a      	ldr	r2, [r7, #4]
 800e7e2:	68b9      	ldr	r1, [r7, #8]
 800e7e4:	68f8      	ldr	r0, [r7, #12]
 800e7e6:	47a0      	blx	r4
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d001      	beq.n	800e7f2 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	e011      	b.n	800e816 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00c      	beq.n	800e814 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6858      	ldr	r0, [r3, #4]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	331c      	adds	r3, #28
 800e806:	681c      	ldr	r4, [r3, #0]
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	68b9      	ldr	r1, [r7, #8]
 800e80e:	47a0      	blx	r4
 800e810:	4603      	mov	r3, r0
 800e812:	e000      	b.n	800e816 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800e814:	2300      	movs	r3, #0
}
 800e816:	4618      	mov	r0, r3
 800e818:	3714      	adds	r7, #20
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd90      	pop	{r4, r7, pc}

0800e81e <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800e81e:	b480      	push	{r7}
 800e820:	b083      	sub	sp, #12
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
    return name_;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	3308      	adds	r3, #8
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	370c      	adds	r7, #12
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr

0800e836 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b082      	sub	sp, #8
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
 800e83e:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	3308      	adds	r3, #8
 800e844:	4619      	mov	r1, r3
 800e846:	6838      	ldr	r0, [r7, #0]
 800e848:	f7fb fdc3 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d001      	beq.n	800e856 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	e00d      	b.n	800e872 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d007      	beq.n	800e86e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	6839      	ldr	r1, [r7, #0]
 800e864:	4618      	mov	r0, r3
 800e866:	f7ff ffe6 	bl	800e836 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800e86a:	4603      	mov	r3, r0
 800e86c:	e001      	b.n	800e872 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	685b      	ldr	r3, [r3, #4]
}
 800e872:	4618      	mov	r0, r3
 800e874:	3708      	adds	r7, #8
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800e87a:	b480      	push	{r7}
 800e87c:	b083      	sub	sp, #12
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
    return next_;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	685b      	ldr	r3, [r3, #4]
}
 800e886:	4618      	mov	r0, r3
 800e888:	370c      	adds	r7, #12
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr

0800e892 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800e892:	b580      	push	{r7, lr}
 800e894:	b084      	sub	sp, #16
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
 800e89a:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800e89c:	2300      	movs	r3, #0
 800e89e:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d00e      	beq.n	800e8c6 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7ff ffb6 	bl	800e81e <_ZN10TestPlugin7getNameEv>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	6839      	ldr	r1, [r7, #0]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7fb fd8b 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d001      	beq.n	800e8c6 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	e000      	b.n	800e8c8 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d007      	beq.n	800e8dc <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	685a      	ldr	r2, [r3, #4]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3710      	adds	r7, #16
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}

0800e8e6 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 800e8e6:	b480      	push	{r7}
 800e8e8:	b083      	sub	sp, #12
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	741a      	strb	r2, [r3, #16]
}
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2201      	movs	r2, #1
 800e90c:	741a      	strb	r2, [r3, #16]
}
 800e90e:	bf00      	nop
 800e910:	370c      	adds	r7, #12
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr

0800e91a <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 800e91a:	b480      	push	{r7}
 800e91c:	b083      	sub	sp, #12
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
    return enabled_;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	7c1b      	ldrb	r3, [r3, #16]
}
 800e926:	4618      	mov	r0, r3
 800e928:	370c      	adds	r7, #12
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr
	...

0800e934 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6839      	ldr	r1, [r7, #0]
 800e942:	4618      	mov	r0, r3
 800e944:	f7ff fe7c 	bl	800e640 <_ZN10TestPluginC1ERK12SimpleString>
 800e948:	4a05      	ldr	r2, [pc, #20]	; (800e960 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 800e94e:	4b05      	ldr	r3, [pc, #20]	; (800e964 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 800e950:	2200      	movs	r2, #0
 800e952:	601a      	str	r2, [r3, #0]
}
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	4618      	mov	r0, r3
 800e958:	3708      	adds	r7, #8
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	08024354 	.word	0x08024354
 800e964:	200006dc 	.word	0x200006dc

0800e968 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 800e968:	b480      	push	{r7}
 800e96a:	b087      	sub	sp, #28
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800e974:	4b0e      	ldr	r3, [pc, #56]	; (800e9b0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	3b01      	subs	r3, #1
 800e97a:	617b      	str	r3, [r7, #20]
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	db0d      	blt.n	800e99e <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 800e982:	4a0c      	ldr	r2, [pc, #48]	; (800e9b4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e98a:	490a      	ldr	r1, [pc, #40]	; (800e9b4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	00db      	lsls	r3, r3, #3
 800e990:	440b      	add	r3, r1
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	3b01      	subs	r3, #1
 800e99a:	617b      	str	r3, [r7, #20]
 800e99c:	e7ee      	b.n	800e97c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 800e99e:	4b04      	ldr	r3, [pc, #16]	; (800e9b0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	601a      	str	r2, [r3, #0]
}
 800e9a4:	bf00      	nop
 800e9a6:	371c      	adds	r7, #28
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr
 800e9b0:	200006dc 	.word	0x200006dc
 800e9b4:	200006e0 	.word	0x200006e0

0800e9b8 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2100      	movs	r1, #0
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7ff fe59 	bl	800e67c <_ZN10TestPluginC1EPS_>
 800e9ca:	4a04      	ldr	r2, [pc, #16]	; (800e9dc <_ZN14NullTestPluginC1Ev+0x24>)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	601a      	str	r2, [r3, #0]
{
}
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3708      	adds	r7, #8
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	08024310 	.word	0x08024310

0800e9e0 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	4801      	ldr	r0, [pc, #4]	; (800e9ec <__tcf_0+0xc>)
 800e9e6:	f000 f849 	bl	800ea7c <_ZN14NullTestPluginD1Ev>
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	200007e0 	.word	0x200007e0

0800e9f0 <_ZN14NullTestPlugin8instanceEv>:
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 800e9f4:	4b12      	ldr	r3, [pc, #72]	; (800ea40 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800e9f6:	781b      	ldrb	r3, [r3, #0]
 800e9f8:	f3bf 8f5b 	dmb	ish
 800e9fc:	b2db      	uxtb	r3, r3
 800e9fe:	f003 0301 	and.w	r3, r3, #1
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	bf0c      	ite	eq
 800ea06:	2301      	moveq	r3, #1
 800ea08:	2300      	movne	r3, #0
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d013      	beq.n	800ea38 <_ZN14NullTestPlugin8instanceEv+0x48>
 800ea10:	480b      	ldr	r0, [pc, #44]	; (800ea40 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800ea12:	f00d ffd9 	bl	801c9c8 <__cxa_guard_acquire>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	bf14      	ite	ne
 800ea1c:	2301      	movne	r3, #1
 800ea1e:	2300      	moveq	r3, #0
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d008      	beq.n	800ea38 <_ZN14NullTestPlugin8instanceEv+0x48>
 800ea26:	4807      	ldr	r0, [pc, #28]	; (800ea44 <_ZN14NullTestPlugin8instanceEv+0x54>)
 800ea28:	f7ff ffc6 	bl	800e9b8 <_ZN14NullTestPluginC1Ev>
 800ea2c:	4804      	ldr	r0, [pc, #16]	; (800ea40 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800ea2e:	f00d ffd7 	bl	801c9e0 <__cxa_guard_release>
 800ea32:	4805      	ldr	r0, [pc, #20]	; (800ea48 <_ZN14NullTestPlugin8instanceEv+0x58>)
 800ea34:	f00d fffb 	bl	801ca2e <atexit>
    return &_instance;
 800ea38:	4b02      	ldr	r3, [pc, #8]	; (800ea44 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	200007f4 	.word	0x200007f4
 800ea44:	200007e0 	.word	0x200007e0
 800ea48:	0800e9e1 	.word	0x0800e9e1

0800ea4c <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b085      	sub	sp, #20
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	60f8      	str	r0, [r7, #12]
 800ea54:	60b9      	str	r1, [r7, #8]
 800ea56:	607a      	str	r2, [r7, #4]
}
 800ea58:	bf00      	nop
 800ea5a:	3714      	adds	r7, #20
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr

0800ea64 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b085      	sub	sp, #20
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
}
 800ea70:	bf00      	nop
 800ea72:	3714      	adds	r7, #20
 800ea74:	46bd      	mov	sp, r7
 800ea76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7a:	4770      	bx	lr

0800ea7c <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	4a05      	ldr	r2, [pc, #20]	; (800ea9c <_ZN14NullTestPluginD1Ev+0x20>)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	601a      	str	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7ff fe13 	bl	800e6b8 <_ZN10TestPluginD1Ev>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	4618      	mov	r0, r3
 800ea96:	3708      	adds	r7, #8
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	08024310 	.word	0x08024310

0800eaa0 <_ZN14NullTestPluginD0Ev>:
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f7ff ffe7 	bl	800ea7c <_ZN14NullTestPluginD1Ev>
 800eaae:	2114      	movs	r1, #20
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f7f8 fd1b 	bl	80074ec <_ZdlPvj>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	4618      	mov	r0, r3
 800eaba:	3708      	adds	r7, #8
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 800eac8:	4a0f      	ldr	r2, [pc, #60]	; (800eb08 <_ZN12TestRegistryC1Ev+0x48>)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	601a      	str	r2, [r3, #0]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	605a      	str	r2, [r3, #4]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2200      	movs	r2, #0
 800ead8:	609a      	str	r2, [r3, #8]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2200      	movs	r2, #0
 800eade:	60da      	str	r2, [r3, #12]
 800eae0:	f7ff ff86 	bl	800e9f0 <_ZN14NullTestPlugin8instanceEv>
 800eae4:	4602      	mov	r2, r0
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	611a      	str	r2, [r3, #16]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2200      	movs	r2, #0
 800eaee:	751a      	strb	r2, [r3, #20]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	619a      	str	r2, [r3, #24]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	771a      	strb	r2, [r3, #28]
{
}
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	4618      	mov	r0, r3
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	080243dc 	.word	0x080243dc

0800eb0c <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	4a04      	ldr	r2, [pc, #16]	; (800eb28 <_ZN12TestRegistryD1Ev+0x1c>)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	601a      	str	r2, [r3, #0]
{
}
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr
 800eb28:	080243dc 	.word	0x080243dc

0800eb2c <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
}
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7ff ffe9 	bl	800eb0c <_ZN12TestRegistryD1Ev>
 800eb3a:	2120      	movs	r1, #32
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f7f8 fcd5 	bl	80074ec <_ZdlPvj>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4618      	mov	r0, r3
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	3308      	adds	r3, #8
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	687a      	ldr	r2, [r7, #4]
 800eb60:	6852      	ldr	r2, [r2, #4]
 800eb62:	4611      	mov	r1, r2
 800eb64:	6838      	ldr	r0, [r7, #0]
 800eb66:	4798      	blx	r3
 800eb68:	4602      	mov	r2, r0
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	605a      	str	r2, [r3, #4]
}
 800eb6e:	bf00      	nop
 800eb70:	3708      	adds	r7, #8
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 800eb76:	b580      	push	{r7, lr}
 800eb78:	b084      	sub	sp, #16
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6078      	str	r0, [r7, #4]
 800eb7e:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 800eb80:	2301      	movs	r3, #1
 800eb82:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	3308      	adds	r3, #8
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	6838      	ldr	r0, [r7, #0]
 800eb8e:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	60bb      	str	r3, [r7, #8]
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d05c      	beq.n	800ec56 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	7d1b      	ldrb	r3, [r3, #20]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d005      	beq.n	800ebb0 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	3380      	adds	r3, #128	; 0x80
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	68b8      	ldr	r0, [r7, #8]
 800ebae:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	7f1b      	ldrb	r3, [r3, #28]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d005      	beq.n	800ebc4 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	3384      	adds	r3, #132	; 0x84
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	68b8      	ldr	r0, [r7, #8]
 800ebc2:	4798      	blx	r3

        if (groupStart) {
 800ebc4:	7bfb      	ldrb	r3, [r7, #15]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d008      	beq.n	800ebdc <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	3310      	adds	r3, #16
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	68b9      	ldr	r1, [r7, #8]
 800ebd4:	6838      	ldr	r0, [r7, #0]
 800ebd6:	4798      	blx	r3
            groupStart = false;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	3320      	adds	r3, #32
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	6838      	ldr	r0, [r7, #0]
 800ebe6:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 800ebe8:	683a      	ldr	r2, [r7, #0]
 800ebea:	68b9      	ldr	r1, [r7, #8]
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f000 fb79 	bl	800f2e4 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d016      	beq.n	800ec26 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	3318      	adds	r3, #24
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	68b9      	ldr	r1, [r7, #8]
 800ec02:	6838      	ldr	r0, [r7, #0]
 800ec04:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	3390      	adds	r3, #144	; 0x90
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	6911      	ldr	r1, [r2, #16]
 800ec12:	683a      	ldr	r2, [r7, #0]
 800ec14:	68b8      	ldr	r0, [r7, #8]
 800ec16:	4798      	blx	r3
            result.currentTestEnded(test);
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	331c      	adds	r3, #28
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	68b9      	ldr	r1, [r7, #8]
 800ec22:	6838      	ldr	r0, [r7, #0]
 800ec24:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 800ec26:	68b9      	ldr	r1, [r7, #8]
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f000 fa5b 	bl	800f0e4 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d008      	beq.n	800ec46 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 800ec34:	2301      	movs	r3, #1
 800ec36:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	3314      	adds	r3, #20
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	68b9      	ldr	r1, [r7, #8]
 800ec42:	6838      	ldr	r0, [r7, #0]
 800ec44:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	330c      	adds	r3, #12
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	68b8      	ldr	r0, [r7, #8]
 800ec50:	4798      	blx	r3
 800ec52:	60b8      	str	r0, [r7, #8]
 800ec54:	e79f      	b.n	800eb96 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	330c      	adds	r3, #12
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	6838      	ldr	r0, [r7, #0]
 800ec60:	4798      	blx	r3
    currentRepetition_++;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	699b      	ldr	r3, [r3, #24]
 800ec66:	1c5a      	adds	r2, r3, #1
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	619a      	str	r2, [r3, #24]
}
 800ec6c:	bf00      	nop
 800ec6e:	3710      	adds	r7, #16
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 800ec74:	b590      	push	{r4, r7, lr}
 800ec76:	b08f      	sub	sp, #60	; 0x3c
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 800ec7e:	f107 0314 	add.w	r3, r7, #20
 800ec82:	4953      	ldr	r1, [pc, #332]	; (800edd0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7fa ffe0 	bl	8009c4a <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ec90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d04d      	beq.n	800ed32 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 800ec96:	f107 030c 	add.w	r3, r7, #12
 800ec9a:	494d      	ldr	r1, [pc, #308]	; (800edd0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7fa ffd4 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
        gname += "#";
 800eca2:	f107 030c 	add.w	r3, r7, #12
 800eca6:	494b      	ldr	r1, [pc, #300]	; (800edd4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7fb fc15 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 800ecae:	f107 031c 	add.w	r3, r7, #28
 800ecb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f001 f9d2 	bl	801005e <_ZNK10UtestShell8getGroupEv>
 800ecba:	f107 021c 	add.w	r2, r7, #28
 800ecbe:	f107 030c 	add.w	r3, r7, #12
 800ecc2:	4611      	mov	r1, r2
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7fb fbf5 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800ecca:	f107 031c 	add.w	r3, r7, #28
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fb fb73 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        gname += "#";
 800ecd4:	f107 030c 	add.w	r3, r7, #12
 800ecd8:	493e      	ldr	r1, [pc, #248]	; (800edd4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7fb fbfc 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 800ece0:	f107 020c 	add.w	r2, r7, #12
 800ece4:	f107 0314 	add.w	r3, r7, #20
 800ece8:	4611      	mov	r1, r2
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fb f82b 	bl	8009d46 <_ZNK12SimpleString8containsERKS_>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	f083 0301 	eor.w	r3, r3, #1
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d00d      	beq.n	800ed18 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 800ecfc:	f107 020c 	add.w	r2, r7, #12
 800ed00:	f107 0314 	add.w	r3, r7, #20
 800ed04:	4611      	mov	r1, r2
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7fb fbd4 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 800ed0c:	f107 0314 	add.w	r3, r7, #20
 800ed10:	4931      	ldr	r1, [pc, #196]	; (800edd8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fb fbe0 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 800ed18:	f107 030c 	add.w	r3, r7, #12
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7fb fb4c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800ed22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	330c      	adds	r3, #12
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed2c:	4798      	blx	r3
 800ed2e:	6378      	str	r0, [r7, #52]	; 0x34
 800ed30:	e7ae      	b.n	800ec90 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 800ed32:	f107 0314 	add.w	r3, r7, #20
 800ed36:	4a26      	ldr	r2, [pc, #152]	; (800edd0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800ed38:	4926      	ldr	r1, [pc, #152]	; (800edd4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7fb f99a 	bl	800a074 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 800ed40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed44:	4924      	ldr	r1, [pc, #144]	; (800edd8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7fa ff7f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800ed4c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ed50:	f107 0314 	add.w	r3, r7, #20
 800ed54:	4611      	mov	r1, r2
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fb f874 	bl	8009e44 <_ZNK12SimpleString8endsWithERKS_>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	461c      	mov	r4, r3
 800ed60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7fb fb28 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800ed6a:	2c00      	cmp	r4, #0
 800ed6c:	d01a      	beq.n	800eda4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 800ed6e:	f107 0314 	add.w	r3, r7, #20
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7fb fb00 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800ed80:	f107 0114 	add.w	r1, r7, #20
 800ed84:	2200      	movs	r2, #0
 800ed86:	f7fb fc21 	bl	800a5cc <_ZNK12SimpleString9subStringEjj>
 800ed8a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ed8e:	f107 0314 	add.w	r3, r7, #20
 800ed92:	4611      	mov	r1, r2
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7fa ffc4 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800ed9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fb fb0b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	3338      	adds	r3, #56	; 0x38
 800edaa:	681c      	ldr	r4, [r3, #0]
 800edac:	f107 0314 	add.w	r3, r7, #20
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7fb fad5 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800edb6:	4603      	mov	r3, r0
 800edb8:	4619      	mov	r1, r3
 800edba:	6838      	ldr	r0, [r7, #0]
 800edbc:	47a0      	blx	r4
    SimpleString groupList;
 800edbe:	f107 0314 	add.w	r3, r7, #20
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7fb faf9 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800edc8:	bf00      	nop
 800edca:	373c      	adds	r7, #60	; 0x3c
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd90      	pop	{r4, r7, pc}
 800edd0:	080217dc 	.word	0x080217dc
 800edd4:	080217e0 	.word	0x080217e0
 800edd8:	080217e4 	.word	0x080217e4

0800eddc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 800eddc:	b590      	push	{r4, r7, lr}
 800edde:	b091      	sub	sp, #68	; 0x44
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 800ede6:	f107 0314 	add.w	r3, r7, #20
 800edea:	4964      	ldr	r1, [pc, #400]	; (800ef7c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800edec:	4618      	mov	r0, r3
 800edee:	f7fa ff2c 	bl	8009c4a <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d06e      	beq.n	800eedc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 800edfe:	683a      	ldr	r2, [r7, #0]
 800ee00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 fa6e 	bl	800f2e4 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d05e      	beq.n	800eecc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 800ee0e:	f107 030c 	add.w	r3, r7, #12
 800ee12:	495a      	ldr	r1, [pc, #360]	; (800ef7c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fa ff18 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 800ee1a:	f107 030c 	add.w	r3, r7, #12
 800ee1e:	4958      	ldr	r1, [pc, #352]	; (800ef80 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7fb fb59 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 800ee26:	f107 031c 	add.w	r3, r7, #28
 800ee2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f001 f916 	bl	801005e <_ZNK10UtestShell8getGroupEv>
 800ee32:	f107 021c 	add.w	r2, r7, #28
 800ee36:	f107 030c 	add.w	r3, r7, #12
 800ee3a:	4611      	mov	r1, r2
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7fb fb39 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800ee42:	f107 031c 	add.w	r3, r7, #28
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fb fab7 	bl	800a3ba <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 800ee4c:	f107 030c 	add.w	r3, r7, #12
 800ee50:	494c      	ldr	r1, [pc, #304]	; (800ef84 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fb fb40 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 800ee58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f001 f8ee 	bl	8010040 <_ZNK10UtestShell7getNameEv>
 800ee64:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ee68:	f107 030c 	add.w	r3, r7, #12
 800ee6c:	4611      	mov	r1, r2
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fb fb20 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800ee74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7fb fa9e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 800ee7e:	f107 030c 	add.w	r3, r7, #12
 800ee82:	493f      	ldr	r1, [pc, #252]	; (800ef80 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7fb fb27 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 800ee8a:	f107 020c 	add.w	r2, r7, #12
 800ee8e:	f107 0314 	add.w	r3, r7, #20
 800ee92:	4611      	mov	r1, r2
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fa ff56 	bl	8009d46 <_ZNK12SimpleString8containsERKS_>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	f083 0301 	eor.w	r3, r3, #1
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d00d      	beq.n	800eec2 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 800eea6:	f107 020c 	add.w	r2, r7, #12
 800eeaa:	f107 0314 	add.w	r3, r7, #20
 800eeae:	4611      	mov	r1, r2
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7fb faff 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 800eeb6:	f107 0314 	add.w	r3, r7, #20
 800eeba:	4933      	ldr	r1, [pc, #204]	; (800ef88 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fb fb0b 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 800eec2:	f107 030c 	add.w	r3, r7, #12
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7fb fa77 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800eecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	330c      	adds	r3, #12
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eed6:	4798      	blx	r3
 800eed8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800eeda:	e78d      	b.n	800edf8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 800eedc:	f107 0314 	add.w	r3, r7, #20
 800eee0:	4a26      	ldr	r2, [pc, #152]	; (800ef7c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800eee2:	4927      	ldr	r1, [pc, #156]	; (800ef80 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7fb f8c5 	bl	800a074 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 800eeea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eeee:	4926      	ldr	r1, [pc, #152]	; (800ef88 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7fa feaa 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 800eef6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800eefa:	f107 0314 	add.w	r3, r7, #20
 800eefe:	4611      	mov	r1, r2
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7fa ff9f 	bl	8009e44 <_ZNK12SimpleString8endsWithERKS_>
 800ef06:	4603      	mov	r3, r0
 800ef08:	461c      	mov	r4, r3
 800ef0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7fb fa53 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800ef14:	2c00      	cmp	r4, #0
 800ef16:	d01a      	beq.n	800ef4e <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 800ef18:	f107 0314 	add.w	r3, r7, #20
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7fb fa2b 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 800ef22:	4603      	mov	r3, r0
 800ef24:	3b01      	subs	r3, #1
 800ef26:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800ef2a:	f107 0114 	add.w	r1, r7, #20
 800ef2e:	2200      	movs	r2, #0
 800ef30:	f7fb fb4c 	bl	800a5cc <_ZNK12SimpleString9subStringEjj>
 800ef34:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ef38:	f107 0314 	add.w	r3, r7, #20
 800ef3c:	4611      	mov	r1, r2
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fa feef 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 800ef44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7fb fa36 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	3338      	adds	r3, #56	; 0x38
 800ef54:	681c      	ldr	r4, [r3, #0]
 800ef56:	f107 0314 	add.w	r3, r7, #20
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fb fa00 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800ef60:	4603      	mov	r3, r0
 800ef62:	4619      	mov	r1, r3
 800ef64:	6838      	ldr	r0, [r7, #0]
 800ef66:	47a0      	blx	r4
    SimpleString groupAndNameList;
 800ef68:	f107 0314 	add.w	r3, r7, #20
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7fb fa24 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800ef72:	bf00      	nop
 800ef74:	3744      	adds	r7, #68	; 0x44
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd90      	pop	{r4, r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	080217dc 	.word	0x080217dc
 800ef80:	080217e0 	.word	0x080217e0
 800ef84:	080217e8 	.word	0x080217e8
 800ef88:	080217e4 	.word	0x080217e4

0800ef8c <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 800ef8c:	b590      	push	{r4, r7, lr}
 800ef8e:	b091      	sub	sp, #68	; 0x44
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 800ef96:	f107 0314 	add.w	r3, r7, #20
 800ef9a:	494f      	ldr	r1, [pc, #316]	; (800f0d8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fa fe54 	bl	8009c4a <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d07d      	beq.n	800f0aa <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 800efae:	f107 030c 	add.w	r3, r7, #12
 800efb2:	4949      	ldr	r1, [pc, #292]	; (800f0d8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7fa fe48 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 800efba:	f107 031c 	add.w	r3, r7, #28
 800efbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800efc0:	4618      	mov	r0, r3
 800efc2:	f001 f84c 	bl	801005e <_ZNK10UtestShell8getGroupEv>
 800efc6:	f107 021c 	add.w	r2, r7, #28
 800efca:	f107 030c 	add.w	r3, r7, #12
 800efce:	4611      	mov	r1, r2
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7fb fa6f 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800efd6:	f107 031c 	add.w	r3, r7, #28
 800efda:	4618      	mov	r0, r3
 800efdc:	f7fb f9ed 	bl	800a3ba <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800efe0:	f107 030c 	add.w	r3, r7, #12
 800efe4:	493d      	ldr	r1, [pc, #244]	; (800f0dc <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fb fa76 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 800efec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eff0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eff2:	4618      	mov	r0, r3
 800eff4:	f001 f824 	bl	8010040 <_ZNK10UtestShell7getNameEv>
 800eff8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800effc:	f107 030c 	add.w	r3, r7, #12
 800f000:	4611      	mov	r1, r2
 800f002:	4618      	mov	r0, r3
 800f004:	f7fb fa56 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800f008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fb f9d4 	bl	800a3ba <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800f012:	f107 030c 	add.w	r3, r7, #12
 800f016:	4931      	ldr	r1, [pc, #196]	; (800f0dc <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800f018:	4618      	mov	r0, r3
 800f01a:	f7fb fa5d 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 800f01e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f022:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f024:	4618      	mov	r0, r3
 800f026:	f001 f8dc 	bl	80101e2 <_ZNK10UtestShell7getFileEv>
 800f02a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f02e:	f107 030c 	add.w	r3, r7, #12
 800f032:	4611      	mov	r1, r2
 800f034:	4618      	mov	r0, r3
 800f036:	f7fb fa3d 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800f03a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f03e:	4618      	mov	r0, r3
 800f040:	f7fb f9bb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800f044:	f107 030c 	add.w	r3, r7, #12
 800f048:	4924      	ldr	r1, [pc, #144]	; (800f0dc <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fb fa44 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 800f050:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f052:	f001 f8d5 	bl	8010200 <_ZNK10UtestShell13getLineNumberEv>
 800f056:	4603      	mov	r3, r0
 800f058:	461a      	mov	r2, r3
 800f05a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f05e:	4920      	ldr	r1, [pc, #128]	; (800f0e0 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 800f060:	4618      	mov	r0, r3
 800f062:	f7fb feb1 	bl	800adc8 <_Z16StringFromFormatPKcz>
 800f066:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f06a:	f107 030c 	add.w	r3, r7, #12
 800f06e:	4611      	mov	r1, r2
 800f070:	4618      	mov	r0, r3
 800f072:	f7fb fa1f 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 800f076:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7fb f99d 	bl	800a3ba <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 800f080:	f107 020c 	add.w	r2, r7, #12
 800f084:	f107 0314 	add.w	r3, r7, #20
 800f088:	4611      	mov	r1, r2
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fb fa12 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 800f090:	f107 030c 	add.w	r3, r7, #12
 800f094:	4618      	mov	r0, r3
 800f096:	f7fb f990 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	330c      	adds	r3, #12
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f0a4:	4798      	blx	r3
 800f0a6:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f0a8:	e77e      	b.n	800efa8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	3338      	adds	r3, #56	; 0x38
 800f0b0:	681c      	ldr	r4, [r3, #0]
 800f0b2:	f107 0314 	add.w	r3, r7, #20
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fb f952 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	4619      	mov	r1, r3
 800f0c0:	6838      	ldr	r0, [r7, #0]
 800f0c2:	47a0      	blx	r4
    SimpleString testLocations;
 800f0c4:	f107 0314 	add.w	r3, r7, #20
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7fb f976 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 800f0ce:	bf00      	nop
 800f0d0:	3744      	adds	r7, #68	; 0x44
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd90      	pop	{r4, r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	080217dc 	.word	0x080217dc
 800f0dc:	080217e8 	.word	0x080217e8
 800f0e0:	080217ec 	.word	0x080217ec

0800f0e4 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 800f0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0e6:	b087      	sub	sp, #28
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 800f0ee:	2400      	movs	r4, #0
 800f0f0:	2500      	movs	r5, #0
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d028      	beq.n	800f14a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	330c      	adds	r3, #12
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	6838      	ldr	r0, [r7, #0]
 800f102:	4798      	blx	r3
 800f104:	4603      	mov	r3, r0
 800f106:	2b00      	cmp	r3, #0
 800f108:	d01f      	beq.n	800f14a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800f10a:	f107 0308 	add.w	r3, r7, #8
 800f10e:	6839      	ldr	r1, [r7, #0]
 800f110:	4618      	mov	r0, r3
 800f112:	f000 ffa4 	bl	801005e <_ZNK10UtestShell8getGroupEv>
 800f116:	2401      	movs	r4, #1
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	330c      	adds	r3, #12
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	6838      	ldr	r0, [r7, #0]
 800f122:	4798      	blx	r3
 800f124:	4602      	mov	r2, r0
 800f126:	f107 0310 	add.w	r3, r7, #16
 800f12a:	4611      	mov	r1, r2
 800f12c:	4618      	mov	r0, r3
 800f12e:	f000 ff96 	bl	801005e <_ZNK10UtestShell8getGroupEv>
 800f132:	2501      	movs	r5, #1
 800f134:	f107 0210 	add.w	r2, r7, #16
 800f138:	f107 0308 	add.w	r3, r7, #8
 800f13c:	4611      	mov	r1, r2
 800f13e:	4618      	mov	r0, r3
 800f140:	f7fb f98c 	bl	800a45c <_ZneRK12SimpleStringS1_>
 800f144:	4603      	mov	r3, r0
 800f146:	2b00      	cmp	r3, #0
 800f148:	d001      	beq.n	800f14e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 800f14a:	2601      	movs	r6, #1
 800f14c:	e000      	b.n	800f150 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 800f14e:	2600      	movs	r6, #0
 800f150:	2d00      	cmp	r5, #0
 800f152:	d004      	beq.n	800f15e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 800f154:	f107 0310 	add.w	r3, r7, #16
 800f158:	4618      	mov	r0, r3
 800f15a:	f7fb f92e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800f15e:	2c00      	cmp	r4, #0
 800f160:	d004      	beq.n	800f16c <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 800f162:	f107 0308 	add.w	r3, r7, #8
 800f166:	4618      	mov	r0, r3
 800f168:	f7fb f927 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800f16c:	4633      	mov	r3, r6
}
 800f16e:	4618      	mov	r0, r3
 800f170:	371c      	adds	r7, #28
 800f172:	46bd      	mov	sp, r7
 800f174:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f176 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 800f176:	b580      	push	{r7, lr}
 800f178:	b082      	sub	sp, #8
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d00a      	beq.n	800f19c <_ZN12TestRegistry10countTestsEv+0x26>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	685a      	ldr	r2, [r3, #4]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	3310      	adds	r3, #16
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4610      	mov	r0, r2
 800f196:	4798      	blx	r3
 800f198:	4603      	mov	r3, r0
 800f19a:	e000      	b.n	800f19e <_ZN12TestRegistry10countTestsEv+0x28>
 800f19c:	2300      	movs	r3, #0
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
	...

0800f1a8 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	4801      	ldr	r0, [pc, #4]	; (800f1b4 <__tcf_0+0xc>)
 800f1ae:	f7ff fcad 	bl	800eb0c <_ZN12TestRegistryD1Ev>
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	200007fc 	.word	0x200007fc

0800f1b8 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 800f1bc:	4b15      	ldr	r3, [pc, #84]	; (800f214 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	f3bf 8f5b 	dmb	ish
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	f003 0301 	and.w	r3, r3, #1
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	bf0c      	ite	eq
 800f1ce:	2301      	moveq	r3, #1
 800f1d0:	2300      	movne	r3, #0
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d013      	beq.n	800f200 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800f1d8:	480e      	ldr	r0, [pc, #56]	; (800f214 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800f1da:	f00d fbf5 	bl	801c9c8 <__cxa_guard_acquire>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	bf14      	ite	ne
 800f1e4:	2301      	movne	r3, #1
 800f1e6:	2300      	moveq	r3, #0
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d008      	beq.n	800f200 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800f1ee:	480a      	ldr	r0, [pc, #40]	; (800f218 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 800f1f0:	f7ff fc66 	bl	800eac0 <_ZN12TestRegistryC1Ev>
 800f1f4:	4807      	ldr	r0, [pc, #28]	; (800f214 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800f1f6:	f00d fbf3 	bl	801c9e0 <__cxa_guard_release>
 800f1fa:	4808      	ldr	r0, [pc, #32]	; (800f21c <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 800f1fc:	f00d fc17 	bl	801ca2e <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 800f200:	4b07      	ldr	r3, [pc, #28]	; (800f220 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 800f208:	4b05      	ldr	r3, [pc, #20]	; (800f220 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	e000      	b.n	800f210 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 800f20e:	4b02      	ldr	r3, [pc, #8]	; (800f218 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 800f210:	4618      	mov	r0, r3
 800f212:	bd80      	pop	{r7, pc}
 800f214:	2000081c 	.word	0x2000081c
 800f218:	200007fc 	.word	0x200007fc
 800f21c:	0800f1a9 	.word	0x0800f1a9
 800f220:	200007f8 	.word	0x200007f8

0800f224 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 800f224:	b480      	push	{r7}
 800f226:	b083      	sub	sp, #12
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 800f22e:	4a04      	ldr	r2, [pc, #16]	; (800f240 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	6013      	str	r3, [r2, #0]
}
 800f234:	bf00      	nop
 800f236:	370c      	adds	r7, #12
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr
 800f240:	200007f8 	.word	0x200007f8

0800f244 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00a      	beq.n	800f26a <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	685a      	ldr	r2, [r3, #4]
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	330c      	adds	r3, #12
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	4610      	mov	r0, r2
 800f264:	4798      	blx	r3
 800f266:	4603      	mov	r3, r0
 800f268:	e000      	b.n	800f26c <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 800f26a:	2300      	movs	r3, #0
 800f26c:	687a      	ldr	r2, [r7, #4]
 800f26e:	6053      	str	r3, [r2, #4]

}
 800f270:	bf00      	nop
 800f272:	3708      	adds	r7, #8
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	683a      	ldr	r2, [r7, #0]
 800f286:	609a      	str	r2, [r3, #8]
}
 800f288:	bf00      	nop
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 800f294:	b480      	push	{r7}
 800f296:	b083      	sub	sp, #12
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	683a      	ldr	r2, [r7, #0]
 800f2a2:	60da      	str	r2, [r3, #12]
}
 800f2a4:	bf00      	nop
 800f2a6:	370c      	adds	r7, #12
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr

0800f2b0 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b083      	sub	sp, #12
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	771a      	strb	r2, [r3, #28]
}
 800f2be:	bf00      	nop
 800f2c0:	370c      	adds	r7, #12
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr

0800f2ca <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 800f2ca:	b480      	push	{r7}
 800f2cc:	b083      	sub	sp, #12
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	751a      	strb	r2, [r3, #20]
}
 800f2d8:	bf00      	nop
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	60f8      	str	r0, [r7, #12]
 800f2ec:	60b9      	str	r1, [r7, #8]
 800f2ee:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	68d9      	ldr	r1, [r3, #12]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	689b      	ldr	r3, [r3, #8]
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	68b8      	ldr	r0, [r7, #8]
 800f2fc:	f000 ffbb 	bl	8010276 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 800f300:	4603      	mov	r3, r0
 800f302:	2b00      	cmp	r3, #0
 800f304:	d001      	beq.n	800f30a <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 800f306:	2301      	movs	r3, #1
 800f308:	e006      	b.n	800f318 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	332c      	adds	r3, #44	; 0x2c
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	4798      	blx	r3
        return false;
 800f316:	2300      	movs	r3, #0
    }
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b082      	sub	sp, #8
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 800f328:	f7ff fb62 	bl	800e9f0 <_ZN14NullTestPlugin8instanceEv>
 800f32c:	4602      	mov	r2, r0
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	611a      	str	r2, [r3, #16]
}
 800f332:	bf00      	nop
 800f334:	3708      	adds	r7, #8
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b082      	sub	sp, #8
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
 800f342:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	3324      	adds	r3, #36	; 0x24
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	687a      	ldr	r2, [r7, #4]
 800f34e:	6912      	ldr	r2, [r2, #16]
 800f350:	4611      	mov	r1, r2
 800f352:	6838      	ldr	r0, [r7, #0]
 800f354:	4798      	blx	r3
 800f356:	4602      	mov	r2, r0
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	611a      	str	r2, [r3, #16]
}
 800f35c:	bf00      	nop
 800f35e:	3708      	adds	r7, #8
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	691b      	ldr	r3, [r3, #16]
}
 800f370:	4618      	mov	r0, r3
 800f372:	370c      	adds	r7, #12
 800f374:	46bd      	mov	sp, r7
 800f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37a:	4770      	bx	lr

0800f37c <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b082      	sub	sp, #8
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	691b      	ldr	r3, [r3, #16]
 800f38a:	6839      	ldr	r1, [r7, #0]
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7ff fa52 	bl	800e836 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800f392:	4603      	mov	r3, r0
}
 800f394:	4618      	mov	r0, r3
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b082      	sub	sp, #8
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	691a      	ldr	r2, [r3, #16]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	691b      	ldr	r3, [r3, #16]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	3328      	adds	r3, #40	; 0x28
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	6839      	ldr	r1, [r7, #0]
 800f3b6:	4610      	mov	r0, r2
 800f3b8:	4798      	blx	r3
 800f3ba:	4602      	mov	r2, r0
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	691b      	ldr	r3, [r3, #16]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	bf0c      	ite	eq
 800f3c4:	2301      	moveq	r3, #1
 800f3c6:	2300      	movne	r3, #0
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d00b      	beq.n	800f3e6 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	691a      	ldr	r2, [r3, #16]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	691b      	ldr	r3, [r3, #16]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	332c      	adds	r3, #44	; 0x2c
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	4610      	mov	r0, r2
 800f3de:	4798      	blx	r3
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	691b      	ldr	r3, [r3, #16]
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7ff fa17 	bl	800e81e <_ZN10TestPlugin7getNameEv>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	6839      	ldr	r1, [r7, #0]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7fa ffec 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d00b      	beq.n	800f418 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	691a      	ldr	r2, [r3, #16]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	332c      	adds	r3, #44	; 0x2c
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	4610      	mov	r0, r2
 800f410:	4798      	blx	r3
 800f412:	4602      	mov	r2, r0
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	691a      	ldr	r2, [r3, #16]
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	691b      	ldr	r3, [r3, #16]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	3328      	adds	r3, #40	; 0x28
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	6839      	ldr	r1, [r7, #0]
 800f428:	4610      	mov	r0, r2
 800f42a:	4798      	blx	r3
}
 800f42c:	bf00      	nop
 800f42e:	3708      	adds	r7, #8
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b084      	sub	sp, #16
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
    int count = 0;
 800f43c:	2300      	movs	r3, #0
 800f43e:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	691b      	ldr	r3, [r3, #16]
 800f444:	60bb      	str	r3, [r7, #8]
 800f446:	f7ff fad3 	bl	800e9f0 <_ZN14NullTestPlugin8instanceEv>
 800f44a:	4602      	mov	r2, r0
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	4293      	cmp	r3, r2
 800f450:	bf14      	ite	ne
 800f452:	2301      	movne	r3, #1
 800f454:	2300      	moveq	r3, #0
 800f456:	b2db      	uxtb	r3, r3
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d00a      	beq.n	800f472 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	3301      	adds	r3, #1
 800f460:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	332c      	adds	r3, #44	; 0x2c
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	68b8      	ldr	r0, [r7, #8]
 800f46c:	4798      	blx	r3
 800f46e:	60b8      	str	r0, [r7, #8]
 800f470:	e7e9      	b.n	800f446 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 800f472:	68fb      	ldr	r3, [r7, #12]
}
 800f474:	4618      	mov	r0, r3
 800f476:	3710      	adds	r7, #16
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
    return tests_;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	685b      	ldr	r3, [r3, #4]
}
 800f488:	4618      	mov	r0, r3
 800f48a:	370c      	adds	r7, #12
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b084      	sub	sp, #16
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	334c      	adds	r3, #76	; 0x4c
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	4798      	blx	r3
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	f107 0308 	add.w	r3, r7, #8
 800f4b0:	4611      	mov	r1, r2
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f002 f8f8 	bl	80116a8 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 800f4b8:	f107 0308 	add.w	r3, r7, #8
 800f4bc:	6839      	ldr	r1, [r7, #0]
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f002 f980 	bl	80117c4 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 800f4c4:	f107 0308 	add.w	r3, r7, #8
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f002 fa13 	bl	80118f4 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800f4d4:	f107 0308 	add.w	r3, r7, #8
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f002 f939 	bl	8011750 <_ZN22UtestShellPointerArrayD1Ev>
}
 800f4de:	bf00      	nop
 800f4e0:	3710      	adds	r7, #16
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}

0800f4e6 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 800f4e6:	b580      	push	{r7, lr}
 800f4e8:	b084      	sub	sp, #16
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	334c      	adds	r3, #76	; 0x4c
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	4798      	blx	r3
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	f107 0308 	add.w	r3, r7, #8
 800f500:	4611      	mov	r1, r2
 800f502:	4618      	mov	r0, r3
 800f504:	f002 f8d0 	bl	80116a8 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 800f508:	f107 0308 	add.w	r3, r7, #8
 800f50c:	4618      	mov	r0, r3
 800f50e:	f002 f995 	bl	801183c <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 800f512:	f107 0308 	add.w	r3, r7, #8
 800f516:	4618      	mov	r0, r3
 800f518:	f002 f9ec 	bl	80118f4 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800f51c:	4602      	mov	r2, r0
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800f522:	f107 0308 	add.w	r3, r7, #8
 800f526:	4618      	mov	r0, r3
 800f528:	f002 f912 	bl	8011750 <_ZN22UtestShellPointerArrayD1Ev>
}
 800f52c:	bf00      	nop
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	685b      	ldr	r3, [r3, #4]
 800f542:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d00b      	beq.n	800f562 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	330c      	adds	r3, #12
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	4798      	blx	r3
 800f556:	4602      	mov	r2, r0
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d001      	beq.n	800f562 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800f55e:	2301      	movs	r3, #1
 800f560:	e000      	b.n	800f564 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 800f562:	2300      	movs	r3, #0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d007      	beq.n	800f578 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	330c      	adds	r3, #12
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	68f8      	ldr	r0, [r7, #12]
 800f572:	4798      	blx	r3
 800f574:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 800f576:	e7e5      	b.n	800f544 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 800f578:	68fb      	ldr	r3, [r7, #12]
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3710      	adds	r7, #16
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 800f582:	b590      	push	{r4, r7, lr}
 800f584:	b087      	sub	sp, #28
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
 800f58a:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	617b      	str	r3, [r7, #20]
    while (current) {
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d01e      	beq.n	800f5d6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 800f598:	f107 030c 	add.w	r3, r7, #12
 800f59c:	6979      	ldr	r1, [r7, #20]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f000 fd4e 	bl	8010040 <_ZNK10UtestShell7getNameEv>
 800f5a4:	f107 030c 	add.w	r3, r7, #12
 800f5a8:	6839      	ldr	r1, [r7, #0]
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7fa ff11 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	461c      	mov	r4, r3
 800f5b4:	f107 030c 	add.w	r3, r7, #12
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7fa fefe 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800f5be:	2c00      	cmp	r4, #0
 800f5c0:	d001      	beq.n	800f5c6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	e008      	b.n	800f5d8 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	330c      	adds	r3, #12
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	6978      	ldr	r0, [r7, #20]
 800f5d0:	4798      	blx	r3
 800f5d2:	6178      	str	r0, [r7, #20]
    while (current) {
 800f5d4:	e7dd      	b.n	800f592 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 800f5d6:	2300      	movs	r3, #0
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	371c      	adds	r7, #28
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd90      	pop	{r4, r7, pc}

0800f5e0 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 800f5e0:	b590      	push	{r4, r7, lr}
 800f5e2:	b087      	sub	sp, #28
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	617b      	str	r3, [r7, #20]
    while (current) {
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d01e      	beq.n	800f634 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 800f5f6:	f107 030c 	add.w	r3, r7, #12
 800f5fa:	6979      	ldr	r1, [r7, #20]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f000 fd2e 	bl	801005e <_ZNK10UtestShell8getGroupEv>
 800f602:	f107 030c 	add.w	r3, r7, #12
 800f606:	6839      	ldr	r1, [r7, #0]
 800f608:	4618      	mov	r0, r3
 800f60a:	f7fa fee2 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 800f60e:	4603      	mov	r3, r0
 800f610:	461c      	mov	r4, r3
 800f612:	f107 030c 	add.w	r3, r7, #12
 800f616:	4618      	mov	r0, r3
 800f618:	f7fa fecf 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 800f61c:	2c00      	cmp	r4, #0
 800f61e:	d001      	beq.n	800f624 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	e008      	b.n	800f636 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	330c      	adds	r3, #12
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	6978      	ldr	r0, [r7, #20]
 800f62e:	4798      	blx	r3
 800f630:	6178      	str	r0, [r7, #20]
    while (current) {
 800f632:	e7dd      	b.n	800f5f0 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	371c      	adds	r7, #28
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd90      	pop	{r4, r7, pc}
	...

0800f640 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 800f64a:	4a18      	ldr	r2, [pc, #96]	; (800f6ac <_ZN10TestResultC1ER10TestOutput+0x6c>)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	601a      	str	r2, [r3, #0]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	683a      	ldr	r2, [r7, #0]
 800f654:	605a      	str	r2, [r3, #4]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2200      	movs	r2, #0
 800f65a:	609a      	str	r2, [r3, #8]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2200      	movs	r2, #0
 800f660:	60da      	str	r2, [r3, #12]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2200      	movs	r2, #0
 800f666:	611a      	str	r2, [r3, #16]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2200      	movs	r2, #0
 800f66c:	615a      	str	r2, [r3, #20]
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2200      	movs	r2, #0
 800f672:	619a      	str	r2, [r3, #24]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2200      	movs	r2, #0
 800f678:	61da      	str	r2, [r3, #28]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2200      	movs	r2, #0
 800f67e:	621a      	str	r2, [r3, #32]
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2200      	movs	r2, #0
 800f684:	625a      	str	r2, [r3, #36]	; 0x24
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2200      	movs	r2, #0
 800f68a:	629a      	str	r2, [r3, #40]	; 0x28
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2200      	movs	r2, #0
 800f690:	62da      	str	r2, [r3, #44]	; 0x2c
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2200      	movs	r2, #0
 800f696:	631a      	str	r2, [r3, #48]	; 0x30
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2200      	movs	r2, #0
 800f69c:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr
 800f6ac:	08024448 	.word	0x08024448

0800f6b0 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
 800f6b8:	4a04      	ldr	r2, [pc, #16]	; (800f6cc <_ZN10TestResultD1Ev+0x1c>)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	601a      	str	r2, [r3, #0]
{
}
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr
 800f6cc:	08024448 	.word	0x08024448

0800f6d0 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
}
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f7ff ffe9 	bl	800f6b0 <_ZN10TestResultD1Ev>
 800f6de:	2138      	movs	r1, #56	; 0x38
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f7f7 ff03 	bl	80074ec <_ZdlPvj>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	685a      	ldr	r2, [r3, #4]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	3318      	adds	r3, #24
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	6839      	ldr	r1, [r7, #0]
 800f70a:	4610      	mov	r0, r2
 800f70c:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800f70e:	4b05      	ldr	r3, [pc, #20]	; (800f724 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	4798      	blx	r3
 800f714:	4603      	mov	r3, r0
 800f716:	461a      	mov	r2, r3
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800f71c:	bf00      	nop
 800f71e:	3708      	adds	r7, #8
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	200000a4 	.word	0x200000a4

0800f728 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 800f732:	4b0c      	ldr	r3, [pc, #48]	; (800f764 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	4798      	blx	r3
 800f738:	4603      	mov	r3, r0
 800f73a:	461a      	mov	r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f740:	1ad2      	subs	r2, r2, r3
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	685a      	ldr	r2, [r3, #4]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	331c      	adds	r3, #28
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	6879      	ldr	r1, [r7, #4]
 800f756:	4610      	mov	r0, r2
 800f758:	4798      	blx	r3
}
 800f75a:	bf00      	nop
 800f75c:	3708      	adds	r7, #8
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	200000a4 	.word	0x200000a4

0800f768 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	685a      	ldr	r2, [r3, #4]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	3310      	adds	r3, #16
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	6839      	ldr	r1, [r7, #0]
 800f782:	4610      	mov	r0, r2
 800f784:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800f786:	4b05      	ldr	r3, [pc, #20]	; (800f79c <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	4798      	blx	r3
 800f78c:	4603      	mov	r3, r0
 800f78e:	461a      	mov	r2, r3
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f794:	bf00      	nop
 800f796:	3708      	adds	r7, #8
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	200000a4 	.word	0x200000a4

0800f7a0 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
    output_.print(text);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	685a      	ldr	r2, [r3, #4]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	332c      	adds	r3, #44	; 0x2c
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	6839      	ldr	r1, [r7, #0]
 800f7ba:	4610      	mov	r0, r2
 800f7bc:	4798      	blx	r3
}
 800f7be:	bf00      	nop
 800f7c0:	3708      	adds	r7, #8
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b082      	sub	sp, #8
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
 800f7ce:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	685a      	ldr	r2, [r3, #4]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	3348      	adds	r3, #72	; 0x48
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	6839      	ldr	r1, [r7, #0]
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	4798      	blx	r3
}
 800f7e4:	bf00      	nop
 800f7e6:	3708      	adds	r7, #8
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b082      	sub	sp, #8
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 800f7f6:	4b0c      	ldr	r3, [pc, #48]	; (800f828 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4798      	blx	r3
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	461a      	mov	r2, r3
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f804:	1ad2      	subs	r2, r2, r3
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	685a      	ldr	r2, [r3, #4]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	685b      	ldr	r3, [r3, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	3314      	adds	r3, #20
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	6879      	ldr	r1, [r7, #4]
 800f81a:	4610      	mov	r0, r2
 800f81c:	4798      	blx	r3

}
 800f81e:	bf00      	nop
 800f820:	3708      	adds	r7, #8
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	200000a4 	.word	0x200000a4

0800f82c <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	685a      	ldr	r2, [r3, #4]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	333c      	adds	r3, #60	; 0x3c
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	6839      	ldr	r1, [r7, #0]
 800f846:	4610      	mov	r0, r2
 800f848:	4798      	blx	r3
    failureCount_++;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	695b      	ldr	r3, [r3, #20]
 800f84e:	1c5a      	adds	r2, r3, #1
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	615a      	str	r2, [r3, #20]
}
 800f854:	bf00      	nop
 800f856:	3708      	adds	r7, #8
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 800f85c:	b480      	push	{r7}
 800f85e:	b083      	sub	sp, #12
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
    testCount_++;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	1c5a      	adds	r2, r3, #1
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	609a      	str	r2, [r3, #8]
}
 800f86e:	bf00      	nop
 800f870:	370c      	adds	r7, #12
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr

0800f87a <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 800f87a:	b480      	push	{r7}
 800f87c:	b083      	sub	sp, #12
 800f87e:	af00      	add	r7, sp, #0
 800f880:	6078      	str	r0, [r7, #4]
    runCount_++;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	1c5a      	adds	r2, r3, #1
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	60da      	str	r2, [r3, #12]
}
 800f88c:	bf00      	nop
 800f88e:	370c      	adds	r7, #12
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr

0800f898 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 800f898:	b480      	push	{r7}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
    checkCount_++;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	691b      	ldr	r3, [r3, #16]
 800f8a4:	1c5a      	adds	r2, r3, #1
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	611a      	str	r2, [r3, #16]
}
 800f8aa:	bf00      	nop
 800f8ac:	370c      	adds	r7, #12
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr

0800f8b6 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 800f8b6:	b480      	push	{r7}
 800f8b8:	b083      	sub	sp, #12
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	699b      	ldr	r3, [r3, #24]
 800f8c2:	1c5a      	adds	r2, r3, #1
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	619a      	str	r2, [r3, #24]
}
 800f8c8:	bf00      	nop
 800f8ca:	370c      	adds	r7, #12
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	69db      	ldr	r3, [r3, #28]
 800f8e0:	1c5a      	adds	r2, r3, #1
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	61da      	str	r2, [r3, #28]
}
 800f8e6:	bf00      	nop
 800f8e8:	370c      	adds	r7, #12
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr
	...

0800f8f4 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800f8fc:	4b09      	ldr	r3, [pc, #36]	; (800f924 <_ZN10TestResult12testsStartedEv+0x30>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	4798      	blx	r3
 800f902:	4603      	mov	r3, r0
 800f904:	461a      	mov	r2, r3
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	685a      	ldr	r2, [r3, #4]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	685b      	ldr	r3, [r3, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	3308      	adds	r3, #8
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	4610      	mov	r0, r2
 800f91a:	4798      	blx	r3
}
 800f91c:	bf00      	nop
 800f91e:	3708      	adds	r7, #8
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}
 800f924:	200000a4 	.word	0x200000a4

0800f928 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 800f930:	4b0c      	ldr	r3, [pc, #48]	; (800f964 <_ZN10TestResult10testsEndedEv+0x3c>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	4798      	blx	r3
 800f936:	4603      	mov	r3, r0
 800f938:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	1ad2      	subs	r2, r2, r3
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	685a      	ldr	r2, [r3, #4]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	330c      	adds	r3, #12
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	6879      	ldr	r1, [r7, #4]
 800f956:	4610      	mov	r0, r2
 800f958:	4798      	blx	r3
}
 800f95a:	bf00      	nop
 800f95c:	3710      	adds	r7, #16
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop
 800f964:	200000a4 	.word	0x200000a4

0800f968 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 800f968:	b480      	push	{r7}
 800f96a:	b083      	sub	sp, #12
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6a1b      	ldr	r3, [r3, #32]
}
 800f974:	4618      	mov	r0, r3
 800f976:	370c      	adds	r7, #12
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr

0800f980 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 800f980:	b480      	push	{r7}
 800f982:	b083      	sub	sp, #12
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	370c      	adds	r7, #12
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr

0800f998 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 800f998:	b480      	push	{r7}
 800f99a:	b083      	sub	sp, #12
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	370c      	adds	r7, #12
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr

0800f9b0 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 800f9b0:	b590      	push	{r4, r7, lr}
 800f9b2:	b087      	sub	sp, #28
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	ed87 0b04 	vstr	d0, [r7, #16]
 800f9ba:	ed87 1b02 	vstr	d1, [r7, #8]
 800f9be:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 800f9c2:	4b2c      	ldr	r3, [pc, #176]	; (800fa74 <_Z13doubles_equalddd+0xc4>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	ed97 0b04 	vldr	d0, [r7, #16]
 800f9ca:	4798      	blx	r3
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d10f      	bne.n	800f9f2 <_Z13doubles_equalddd+0x42>
 800f9d2:	4b28      	ldr	r3, [pc, #160]	; (800fa74 <_Z13doubles_equalddd+0xc4>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	ed97 0b02 	vldr	d0, [r7, #8]
 800f9da:	4798      	blx	r3
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d107      	bne.n	800f9f2 <_Z13doubles_equalddd+0x42>
 800f9e2:	4b24      	ldr	r3, [pc, #144]	; (800fa74 <_Z13doubles_equalddd+0xc4>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	ed97 0b00 	vldr	d0, [r7]
 800f9ea:	4798      	blx	r3
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d001      	beq.n	800f9f6 <_Z13doubles_equalddd+0x46>
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	e000      	b.n	800f9f8 <_Z13doubles_equalddd+0x48>
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d001      	beq.n	800fa00 <_Z13doubles_equalddd+0x50>
        return false;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	e035      	b.n	800fa6c <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 800fa00:	4b1d      	ldr	r3, [pc, #116]	; (800fa78 <_Z13doubles_equalddd+0xc8>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	ed97 0b04 	vldr	d0, [r7, #16]
 800fa08:	4798      	blx	r3
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d009      	beq.n	800fa24 <_Z13doubles_equalddd+0x74>
 800fa10:	4b19      	ldr	r3, [pc, #100]	; (800fa78 <_Z13doubles_equalddd+0xc8>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	ed97 0b02 	vldr	d0, [r7, #8]
 800fa18:	4798      	blx	r3
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d001      	beq.n	800fa24 <_Z13doubles_equalddd+0x74>
 800fa20:	2301      	movs	r3, #1
 800fa22:	e000      	b.n	800fa26 <_Z13doubles_equalddd+0x76>
 800fa24:	2300      	movs	r3, #0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d001      	beq.n	800fa2e <_Z13doubles_equalddd+0x7e>
    {
        return true;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	e01e      	b.n	800fa6c <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 800fa2e:	4b13      	ldr	r3, [pc, #76]	; (800fa7c <_Z13doubles_equalddd+0xcc>)
 800fa30:	681c      	ldr	r4, [r3, #0]
 800fa32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fa36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fa3a:	f7f0 fc65 	bl	8000308 <__aeabi_dsub>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	460b      	mov	r3, r1
 800fa42:	ec43 2b17 	vmov	d7, r2, r3
 800fa46:	eeb0 0a47 	vmov.f32	s0, s14
 800fa4a:	eef0 0a67 	vmov.f32	s1, s15
 800fa4e:	47a0      	blx	r4
 800fa50:	ec53 2b10 	vmov	r2, r3, d0
 800fa54:	2101      	movs	r1, #1
 800fa56:	460c      	mov	r4, r1
 800fa58:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fa5c:	f7f0 fe80 	bl	8000760 <__aeabi_dcmpge>
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d101      	bne.n	800fa6a <_Z13doubles_equalddd+0xba>
 800fa66:	2300      	movs	r3, #0
 800fa68:	461c      	mov	r4, r3
 800fa6a:	b2e3      	uxtb	r3, r4
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	371c      	adds	r7, #28
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd90      	pop	{r4, r7, pc}
 800fa74:	200000e4 	.word	0x200000e4
 800fa78:	200000e8 	.word	0x200000e8
 800fa7c:	200000d8 	.word	0x200000d8

0800fa80 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	332c      	adds	r3, #44	; 0x2c
    }
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
    {
 800faa0:	4a0a      	ldr	r2, [pc, #40]	; (800facc <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	601a      	str	r2, [r3, #0]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	332c      	adds	r3, #44	; 0x2c
 800faaa:	4618      	mov	r0, r3
 800faac:	f7ff fe00 	bl	800f6b0 <_ZN10TestResultD1Ev>
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	331c      	adds	r3, #28
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7f6 f815 	bl	8005ae4 <_ZN17ConsoleTestOutputD1Ev>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4618      	mov	r0, r3
 800fabe:	f000 f943 	bl	800fd48 <_ZN10UtestShellD1Ev>
    }
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	4618      	mov	r0, r3
 800fac6:	3708      	adds	r7, #8
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	08024490 	.word	0x08024490

0800fad0 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
    }
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f7ff ffdd 	bl	800fa98 <_ZN22OutsideTestRunnerUTestD1Ev>
 800fade:	2164      	movs	r1, #100	; 0x64
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f7f7 fd03 	bl	80074ec <_ZdlPvj>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4618      	mov	r0, r3
 800faea:	3708      	adds	r7, #8
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b084      	sub	sp, #16
 800faf4:	af02      	add	r7, sp, #8
 800faf6:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	2300      	movs	r3, #0
 800fafc:	9300      	str	r3, [sp, #0]
 800fafe:	4b0d      	ldr	r3, [pc, #52]	; (800fb34 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 800fb00:	4a0d      	ldr	r2, [pc, #52]	; (800fb38 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 800fb02:	490e      	ldr	r1, [pc, #56]	; (800fb3c <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 800fb04:	f000 f8f8 	bl	800fcf8 <_ZN10UtestShellC1EPKcS1_S1_j>
 800fb08:	4a0d      	ldr	r2, [pc, #52]	; (800fb40 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	601a      	str	r2, [r3, #0]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	331c      	adds	r3, #28
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7f5 ffd4 	bl	8005ac0 <_ZN17ConsoleTestOutputC1Ev>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	331c      	adds	r3, #28
 800fb22:	4619      	mov	r1, r3
 800fb24:	4610      	mov	r0, r2
 800fb26:	f7ff fd8b 	bl	800f640 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	080217f0 	.word	0x080217f0
 800fb38:	08021800 	.word	0x08021800
 800fb3c:	08021840 	.word	0x08021840
 800fb40:	08024490 	.word	0x08024490

0800fb44 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 800fb44:	b580      	push	{r7, lr}
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	4801      	ldr	r0, [pc, #4]	; (800fb50 <__tcf_0+0xc>)
 800fb4a:	f7ff ffa5 	bl	800fa98 <_ZN22OutsideTestRunnerUTestD1Ev>
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	20000820 	.word	0x20000820

0800fb54 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 800fb58:	4b12      	ldr	r3, [pc, #72]	; (800fba4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	f3bf 8f5b 	dmb	ish
 800fb60:	b2db      	uxtb	r3, r3
 800fb62:	f003 0301 	and.w	r3, r3, #1
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	bf0c      	ite	eq
 800fb6a:	2301      	moveq	r3, #1
 800fb6c:	2300      	movne	r3, #0
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d013      	beq.n	800fb9c <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800fb74:	480b      	ldr	r0, [pc, #44]	; (800fba4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800fb76:	f00c ff27 	bl	801c9c8 <__cxa_guard_acquire>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	bf14      	ite	ne
 800fb80:	2301      	movne	r3, #1
 800fb82:	2300      	moveq	r3, #0
 800fb84:	b2db      	uxtb	r3, r3
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d008      	beq.n	800fb9c <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800fb8a:	4807      	ldr	r0, [pc, #28]	; (800fba8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 800fb8c:	f7ff ffb0 	bl	800faf0 <_ZN22OutsideTestRunnerUTestC1Ev>
 800fb90:	4804      	ldr	r0, [pc, #16]	; (800fba4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800fb92:	f00c ff25 	bl	801c9e0 <__cxa_guard_release>
 800fb96:	4805      	ldr	r0, [pc, #20]	; (800fbac <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 800fb98:	f00c ff49 	bl	801ca2e <atexit>
    return instance_;
 800fb9c:	4b02      	ldr	r3, [pc, #8]	; (800fba8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	20000884 	.word	0x20000884
 800fba8:	20000820 	.word	0x20000820
 800fbac:	0800fb45 	.word	0x0800fb45

0800fbb0 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	330c      	adds	r3, #12
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	4798      	blx	r3
    }
 800fbc4:	bf00      	nop
 800fbc6:	3708      	adds	r7, #8
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	3314      	adds	r3, #20
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	4798      	blx	r3
    }
 800fbe0:	bf00      	nop
 800fbe2:	3708      	adds	r7, #8
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}

0800fbe8 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	3310      	adds	r3, #16
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	4798      	blx	r3
    }
 800fbfc:	bf00      	nop
 800fbfe:	3708      	adds	r7, #8
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 800fc04:	b480      	push	{r7}
 800fc06:	b085      	sub	sp, #20
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	60f8      	str	r0, [r7, #12]
 800fc0c:	60b9      	str	r1, [r7, #8]
 800fc0e:	607a      	str	r2, [r7, #4]
 800fc10:	603b      	str	r3, [r7, #0]
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	68ba      	ldr	r2, [r7, #8]
 800fc16:	601a      	str	r2, [r3, #0]
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	687a      	ldr	r2, [r7, #4]
 800fc1c:	605a      	str	r2, [r3, #4]
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	683a      	ldr	r2, [r7, #0]
 800fc22:	609a      	str	r2, [r3, #8]
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	4618      	mov	r0, r3
 800fc28:	3714      	adds	r7, #20
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr

0800fc32 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 800fc32:	b580      	push	{r7, lr}
 800fc34:	b086      	sub	sp, #24
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	689b      	ldr	r3, [r3, #8]
 800fc4e:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	3394      	adds	r3, #148	; 0x94
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	68ba      	ldr	r2, [r7, #8]
 800fc5a:	68f9      	ldr	r1, [r7, #12]
 800fc5c:	6938      	ldr	r0, [r7, #16]
 800fc5e:	4798      	blx	r3
    }
 800fc60:	bf00      	nop
 800fc62:	3718      	adds	r7, #24
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b086      	sub	sp, #24
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	689b      	ldr	r3, [r3, #8]
 800fc84:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 800fc86:	4b05      	ldr	r3, [pc, #20]	; (800fc9c <helperDoRunOneTestSeperateProcess+0x34>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	68ba      	ldr	r2, [r7, #8]
 800fc8c:	68f9      	ldr	r1, [r7, #12]
 800fc8e:	6938      	ldr	r0, [r7, #16]
 800fc90:	4798      	blx	r3
    }
 800fc92:	bf00      	nop
 800fc94:	3718      	adds	r7, #24
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}
 800fc9a:	bf00      	nop
 800fc9c:	20000098 	.word	0x20000098

0800fca0 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 800fca0:	b480      	push	{r7}
 800fca2:	b083      	sub	sp, #12
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800fca8:	4a0f      	ldr	r2, [pc, #60]	; (800fce8 <_ZN10UtestShellC1Ev+0x48>)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	601a      	str	r2, [r3, #0]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	4a0e      	ldr	r2, [pc, #56]	; (800fcec <_ZN10UtestShellC1Ev+0x4c>)
 800fcb2:	605a      	str	r2, [r3, #4]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	4a0e      	ldr	r2, [pc, #56]	; (800fcf0 <_ZN10UtestShellC1Ev+0x50>)
 800fcb8:	609a      	str	r2, [r3, #8]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	4a0d      	ldr	r2, [pc, #52]	; (800fcf4 <_ZN10UtestShellC1Ev+0x54>)
 800fcbe:	60da      	str	r2, [r3, #12]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	611a      	str	r2, [r3, #16]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	615a      	str	r2, [r3, #20]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	761a      	strb	r2, [r3, #24]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	765a      	strb	r2, [r3, #25]
{
}
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	4618      	mov	r0, r3
 800fcdc:	370c      	adds	r7, #12
 800fcde:	46bd      	mov	sp, r7
 800fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce4:	4770      	bx	lr
 800fce6:	bf00      	nop
 800fce8:	08024550 	.word	0x08024550
 800fcec:	0802188c 	.word	0x0802188c
 800fcf0:	080218a0 	.word	0x080218a0
 800fcf4:	080218b0 	.word	0x080218b0

0800fcf8 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 800fcf8:	b480      	push	{r7}
 800fcfa:	b085      	sub	sp, #20
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
 800fd04:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800fd06:	4a0f      	ldr	r2, [pc, #60]	; (800fd44 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	601a      	str	r2, [r3, #0]
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	68ba      	ldr	r2, [r7, #8]
 800fd10:	605a      	str	r2, [r3, #4]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	687a      	ldr	r2, [r7, #4]
 800fd16:	609a      	str	r2, [r3, #8]
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	683a      	ldr	r2, [r7, #0]
 800fd1c:	60da      	str	r2, [r3, #12]
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	69ba      	ldr	r2, [r7, #24]
 800fd22:	611a      	str	r2, [r3, #16]
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2200      	movs	r2, #0
 800fd28:	615a      	str	r2, [r3, #20]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	761a      	strb	r2, [r3, #24]
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2200      	movs	r2, #0
 800fd34:	765a      	strb	r2, [r3, #25]
{
}
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3714      	adds	r7, #20
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr
 800fd44:	08024550 	.word	0x08024550

0800fd48 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 800fd48:	b480      	push	{r7}
 800fd4a:	b083      	sub	sp, #12
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	4a04      	ldr	r2, [pc, #16]	; (800fd64 <_ZN10UtestShellD1Ev+0x1c>)
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	601a      	str	r2, [r3, #0]
{
}
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	4618      	mov	r0, r3
 800fd5a:	370c      	adds	r7, #12
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr
 800fd64:	08024550 	.word	0x08024550

0800fd68 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
}
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f7ff ffe9 	bl	800fd48 <_ZN10UtestShellD1Ev>
 800fd76:	211c      	movs	r1, #28
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f7f7 fbb7 	bl	80074ec <_ZdlPvj>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	4618      	mov	r0, r3
 800fd82:	3708      	adds	r7, #8
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b082      	sub	sp, #8
 800fd8c:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	3310      	adds	r3, #16
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	4798      	blx	r3
}
 800fd9e:	bf00      	nop
 800fda0:	3708      	adds	r7, #8
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
	...

0800fda8 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 800fdac:	4b02      	ldr	r3, [pc, #8]	; (800fdb8 <_ZN10UtestShell5crashEv+0x10>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4798      	blx	r3
}
 800fdb2:	bf00      	nop
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	20000094 	.word	0x20000094

0800fdbc <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b088      	sub	sp, #32
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	765a      	strb	r2, [r3, #25]
    result.countRun();
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	3324      	adds	r3, #36	; 0x24
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 800fdda:	f107 0014 	add.w	r0, r7, #20
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	68ba      	ldr	r2, [r7, #8]
 800fde2:	68f9      	ldr	r1, [r7, #12]
 800fde4:	f7ff ff0e 	bl	800fc04 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	337c      	adds	r3, #124	; 0x7c
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	68f8      	ldr	r0, [r7, #12]
 800fdf2:	4798      	blx	r3
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d007      	beq.n	800fe0a <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 800fdfa:	4b09      	ldr	r3, [pc, #36]	; (800fe20 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	f107 0214 	add.w	r2, r7, #20
 800fe02:	4611      	mov	r1, r2
 800fe04:	4807      	ldr	r0, [pc, #28]	; (800fe24 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 800fe06:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 800fe08:	e006      	b.n	800fe18 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 800fe0a:	4b05      	ldr	r3, [pc, #20]	; (800fe20 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f107 0214 	add.w	r2, r7, #20
 800fe12:	4611      	mov	r1, r2
 800fe14:	4804      	ldr	r0, [pc, #16]	; (800fe28 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 800fe16:	4798      	blx	r3
}
 800fe18:	bf00      	nop
 800fe1a:	3720      	adds	r7, #32
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	200000a0 	.word	0x200000a0
 800fe24:	0800fc69 	.word	0x0800fc69
 800fe28:	0800fc33 	.word	0x0800fc33

0800fe2c <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 800fe2c:	b590      	push	{r4, r7, lr}
 800fe2e:	b083      	sub	sp, #12
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
    return new Utest();
 800fe34:	22d3      	movs	r2, #211	; 0xd3
 800fe36:	4906      	ldr	r1, [pc, #24]	; (800fe50 <_ZN10UtestShell10createTestEv+0x24>)
 800fe38:	2004      	movs	r0, #4
 800fe3a:	f7f7 fb43 	bl	80074c4 <_ZnwjPKci>
 800fe3e:	4604      	mov	r4, r0
 800fe40:	4620      	mov	r0, r4
 800fe42:	f001 fb0f 	bl	8011464 <_ZN5UtestC1Ev>
 800fe46:	4623      	mov	r3, r4
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	370c      	adds	r7, #12
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd90      	pop	{r4, r7, pc}
 800fe50:	080218c0 	.word	0x080218c0

0800fe54 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b082      	sub	sp, #8
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	6039      	str	r1, [r7, #0]
    delete test;
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d004      	beq.n	800fe6e <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 800fe64:	681a      	ldr	r2, [r3, #0]
 800fe66:	3204      	adds	r2, #4
 800fe68:	6812      	ldr	r2, [r2, #0]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	4790      	blx	r2
}
 800fe6e:	bf00      	nop
 800fe70:	3708      	adds	r7, #8
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
	...

0800fe78 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b088      	sub	sp, #32
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	60f8      	str	r0, [r7, #12]
 800fe80:	60b9      	str	r1, [r7, #8]
 800fe82:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	333c      	adds	r3, #60	; 0x3c
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	4940      	ldr	r1, [pc, #256]	; (800ff90 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	3314      	adds	r3, #20
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	687a      	ldr	r2, [r7, #4]
 800fe9c:	68f9      	ldr	r1, [r7, #12]
 800fe9e:	68b8      	ldr	r0, [r7, #8]
 800fea0:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	333c      	adds	r3, #60	; 0x3c
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	493a      	ldr	r1, [pc, #232]	; (800ff94 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 800feb0:	f001 faae 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 800feb4:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 800feb6:	68f8      	ldr	r0, [r7, #12]
 800feb8:	f001 fa90 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 800febc:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 800febe:	6879      	ldr	r1, [r7, #4]
 800fec0:	68f8      	ldr	r0, [r7, #12]
 800fec2:	f001 fa6b 	bl	801139c <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 800fec6:	68f9      	ldr	r1, [r7, #12]
 800fec8:	68f8      	ldr	r0, [r7, #12]
 800feca:	f001 fa77 	bl	80113bc <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	333c      	adds	r3, #60	; 0x3c
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	4930      	ldr	r1, [pc, #192]	; (800ff98 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	4798      	blx	r3
    Utest* testToRun = createTest();
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	3388      	adds	r3, #136	; 0x88
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	68f8      	ldr	r0, [r7, #12]
 800fee6:	4798      	blx	r3
 800fee8:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	333c      	adds	r3, #60	; 0x3c
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	492a      	ldr	r1, [pc, #168]	; (800ff9c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	333c      	adds	r3, #60	; 0x3c
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	4927      	ldr	r1, [pc, #156]	; (800ffa0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	4798      	blx	r3
    testToRun->run();
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	3308      	adds	r3, #8
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	6978      	ldr	r0, [r7, #20]
 800ff10:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	333c      	adds	r3, #60	; 0x3c
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	4922      	ldr	r1, [pc, #136]	; (800ffa4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 800ff20:	69f9      	ldr	r1, [r7, #28]
 800ff22:	68f8      	ldr	r0, [r7, #12]
 800ff24:	f001 fa4a 	bl	80113bc <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 800ff28:	69b9      	ldr	r1, [r7, #24]
 800ff2a:	68f8      	ldr	r0, [r7, #12]
 800ff2c:	f001 fa36 	bl	801139c <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	333c      	adds	r3, #60	; 0x3c
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	491b      	ldr	r1, [pc, #108]	; (800ffa8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	4798      	blx	r3
    destroyTest(testToRun);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	338c      	adds	r3, #140	; 0x8c
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	6979      	ldr	r1, [r7, #20]
 800ff48:	68f8      	ldr	r0, [r7, #12]
 800ff4a:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	333c      	adds	r3, #60	; 0x3c
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4915      	ldr	r1, [pc, #84]	; (800ffac <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	333c      	adds	r3, #60	; 0x3c
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	4913      	ldr	r1, [pc, #76]	; (800ffb0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	3318      	adds	r3, #24
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	68f9      	ldr	r1, [r7, #12]
 800ff74:	68b8      	ldr	r0, [r7, #8]
 800ff76:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	333c      	adds	r3, #60	; 0x3c
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	490c      	ldr	r1, [pc, #48]	; (800ffb4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	4798      	blx	r3
}
 800ff86:	bf00      	nop
 800ff88:	3720      	adds	r7, #32
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	080218d4 	.word	0x080218d4
 800ff94:	080218f8 	.word	0x080218f8
 800ff98:	08021918 	.word	0x08021918
 800ff9c:	08021934 	.word	0x08021934
 800ffa0:	08021950 	.word	0x08021950
 800ffa4:	0802196c 	.word	0x0802196c
 800ffa8:	08021984 	.word	0x08021984
 800ffac:	080219a0 	.word	0x080219a0
 800ffb0:	080219bc 	.word	0x080219bc
 800ffb4:	080219e0 	.word	0x080219e0

0800ffb8 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 800ffb8:	b480      	push	{r7}
 800ffba:	b083      	sub	sp, #12
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
    return next_;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	695b      	ldr	r3, [r3, #20]
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	370c      	adds	r7, #12
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr

0800ffd0 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b083      	sub	sp, #12
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
    next_ = test;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	683a      	ldr	r2, [r7, #0]
 800ffde:	615a      	str	r2, [r3, #20]
    return this;
 800ffe0:	687b      	ldr	r3, [r7, #4]
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	370c      	adds	r7, #12
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr

0800ffee <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 800ffee:	b580      	push	{r7, lr}
 800fff0:	b082      	sub	sp, #8
 800fff2:	af00      	add	r7, sp, #0
 800fff4:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	695b      	ldr	r3, [r3, #20]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d00b      	beq.n	8010016 <_ZN10UtestShell10countTestsEv+0x28>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	695a      	ldr	r2, [r3, #20]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	695b      	ldr	r3, [r3, #20]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	3310      	adds	r3, #16
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4610      	mov	r0, r2
 801000e:	4798      	blx	r3
 8010010:	4603      	mov	r3, r0
 8010012:	3301      	adds	r3, #1
 8010014:	e000      	b.n	8010018 <_ZN10UtestShell10countTestsEv+0x2a>
 8010016:	2301      	movs	r3, #1
}
 8010018:	4618      	mov	r0, r3
 801001a:	3708      	adds	r7, #8
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b082      	sub	sp, #8
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
    return "TEST";
 801002a:	4904      	ldr	r1, [pc, #16]	; (801003c <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f7f9 fe0c 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
}
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
 801003a:	bf00      	nop
 801003c:	08021a04 	.word	0x08021a04

08010040 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	689b      	ldr	r3, [r3, #8]
 801004e:	4619      	mov	r1, r3
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f7f9 fdfa 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
}
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	3708      	adds	r7, #8
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}

0801005e <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 801005e:	b580      	push	{r7, lr}
 8010060:	b082      	sub	sp, #8
 8010062:	af00      	add	r7, sp, #0
 8010064:	6078      	str	r0, [r7, #4]
 8010066:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	4619      	mov	r1, r3
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f7f9 fdeb 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
}
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}

0801007c <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	33a0      	adds	r3, #160	; 0xa0
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	687a      	ldr	r2, [r7, #4]
 8010090:	6839      	ldr	r1, [r7, #0]
 8010092:	4610      	mov	r0, r2
 8010094:	4798      	blx	r3
    formattedName += "(";
 8010096:	490e      	ldr	r1, [pc, #56]	; (80100d0 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f7fa fa1d 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	4619      	mov	r1, r3
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f7fa fa17 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 80100aa:	490a      	ldr	r1, [pc, #40]	; (80100d4 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f7fa fa13 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	689b      	ldr	r3, [r3, #8]
 80100b6:	4619      	mov	r1, r3
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f7fa fa0d 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 80100be:	4906      	ldr	r1, [pc, #24]	; (80100d8 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f7fa fa09 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 80100c6:	bf00      	nop
}
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	3708      	adds	r7, #8
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	08021a0c 	.word	0x08021a0c
 80100d4:	08021a10 	.word	0x08021a10
 80100d8:	08021a14 	.word	0x08021a14

080100dc <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 80100dc:	b480      	push	{r7}
 80100de:	b083      	sub	sp, #12
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	7e5b      	ldrb	r3, [r3, #25]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f001 f96d 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 8010102:	4603      	mov	r3, r0
 8010104:	681a      	ldr	r2, [r3, #0]
 8010106:	3228      	adds	r2, #40	; 0x28
 8010108:	6812      	ldr	r2, [r2, #0]
 801010a:	4618      	mov	r0, r3
 801010c:	4790      	blx	r2
}
 801010e:	bf00      	nop
 8010110:	3708      	adds	r7, #8
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}

08010116 <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 8010116:	b480      	push	{r7}
 8010118:	b083      	sub	sp, #12
 801011a:	af00      	add	r7, sp, #0
 801011c:	6078      	str	r0, [r7, #4]
    return true;
 801011e:	2301      	movs	r3, #1
}
 8010120:	4618      	mov	r0, r3
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr

0801012c <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	7e1b      	ldrb	r3, [r3, #24]
}
 8010138:	4618      	mov	r0, r3
 801013a:	370c      	adds	r7, #12
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr

08010144 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8010144:	b480      	push	{r7}
 8010146:	b083      	sub	sp, #12
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2201      	movs	r2, #1
 8010150:	761a      	strb	r2, [r3, #24]
}
 8010152:	bf00      	nop
 8010154:	370c      	adds	r7, #12
 8010156:	46bd      	mov	sp, r7
 8010158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015c:	4770      	bx	lr

0801015e <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 801015e:	b480      	push	{r7}
 8010160:	b083      	sub	sp, #12
 8010162:	af00      	add	r7, sp, #0
 8010164:	6078      	str	r0, [r7, #4]

}
 8010166:	bf00      	nop
 8010168:	370c      	adds	r7, #12
 801016a:	46bd      	mov	sp, r7
 801016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010170:	4770      	bx	lr

08010172 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 8010172:	b480      	push	{r7}
 8010174:	b083      	sub	sp, #12
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
 801017a:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	683a      	ldr	r2, [r7, #0]
 8010180:	60da      	str	r2, [r3, #12]
}
 8010182:	bf00      	nop
 8010184:	370c      	adds	r7, #12
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr

0801018e <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 801018e:	b480      	push	{r7}
 8010190:	b083      	sub	sp, #12
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
 8010196:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	683a      	ldr	r2, [r7, #0]
 801019c:	611a      	str	r2, [r3, #16]
}
 801019e:	bf00      	nop
 80101a0:	370c      	adds	r7, #12
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr

080101aa <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 80101aa:	b480      	push	{r7}
 80101ac:	b083      	sub	sp, #12
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
 80101b2:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	683a      	ldr	r2, [r7, #0]
 80101b8:	605a      	str	r2, [r3, #4]
}
 80101ba:	bf00      	nop
 80101bc:	370c      	adds	r7, #12
 80101be:	46bd      	mov	sp, r7
 80101c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c4:	4770      	bx	lr

080101c6 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 80101c6:	b480      	push	{r7}
 80101c8:	b083      	sub	sp, #12
 80101ca:	af00      	add	r7, sp, #0
 80101cc:	6078      	str	r0, [r7, #4]
 80101ce:	6039      	str	r1, [r7, #0]
    name_ = testName;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	683a      	ldr	r2, [r7, #0]
 80101d4:	609a      	str	r2, [r3, #8]
}
 80101d6:	bf00      	nop
 80101d8:	370c      	adds	r7, #12
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr

080101e2 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 80101e2:	b580      	push	{r7, lr}
 80101e4:	b082      	sub	sp, #8
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
 80101ea:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	68db      	ldr	r3, [r3, #12]
 80101f0:	4619      	mov	r1, r3
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f7f9 fd29 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
}
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	3708      	adds	r7, #8
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8010200:	b480      	push	{r7}
 8010202:	b083      	sub	sp, #12
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	691b      	ldr	r3, [r3, #16]
}
 801020c:	4618      	mov	r0, r3
 801020e:	370c      	adds	r7, #12
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr

08010218 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8010218:	b590      	push	{r4, r7, lr}
 801021a:	b087      	sub	sp, #28
 801021c:	af00      	add	r7, sp, #0
 801021e:	60f8      	str	r0, [r7, #12]
 8010220:	60b9      	str	r1, [r7, #8]
 8010222:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d101      	bne.n	801022e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 801022a:	2301      	movs	r3, #1
 801022c:	e01f      	b.n	801026e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d01b      	beq.n	801026c <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8010234:	f107 0310 	add.w	r3, r7, #16
 8010238:	68b9      	ldr	r1, [r7, #8]
 801023a:	4618      	mov	r0, r3
 801023c:	f7f9 fd05 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010240:	f107 0310 	add.w	r3, r7, #16
 8010244:	4619      	mov	r1, r3
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f00c fb91 	bl	801c96e <_ZNK10TestFilter5matchERK12SimpleString>
 801024c:	4603      	mov	r3, r0
 801024e:	461c      	mov	r4, r3
 8010250:	f107 0310 	add.w	r3, r7, #16
 8010254:	4618      	mov	r0, r3
 8010256:	f7fa f8b0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801025a:	2c00      	cmp	r4, #0
 801025c:	d001      	beq.n	8010262 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 801025e:	2301      	movs	r3, #1
 8010260:	e005      	b.n	801026e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f00c fb5d 	bl	801c922 <_ZNK10TestFilter7getNextEv>
 8010268:	6078      	str	r0, [r7, #4]
 801026a:	e7e0      	b.n	801022e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 801026c:	2300      	movs	r3, #0
}
 801026e:	4618      	mov	r0, r3
 8010270:	371c      	adds	r7, #28
 8010272:	46bd      	mov	sp, r7
 8010274:	bd90      	pop	{r4, r7, pc}

08010276 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 8010276:	b580      	push	{r7, lr}
 8010278:	b084      	sub	sp, #16
 801027a:	af00      	add	r7, sp, #0
 801027c:	60f8      	str	r0, [r7, #12]
 801027e:	60b9      	str	r1, [r7, #8]
 8010280:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	68ba      	ldr	r2, [r7, #8]
 8010288:	4619      	mov	r1, r3
 801028a:	68f8      	ldr	r0, [r7, #12]
 801028c:	f7ff ffc4 	bl	8010218 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8010290:	4603      	mov	r3, r0
 8010292:	2b00      	cmp	r3, #0
 8010294:	d00b      	beq.n	80102ae <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	689b      	ldr	r3, [r3, #8]
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	4619      	mov	r1, r3
 801029e:	68f8      	ldr	r0, [r7, #12]
 80102a0:	f7ff ffba 	bl	8010218 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d001      	beq.n	80102ae <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 80102aa:	2301      	movs	r3, #1
 80102ac:	e000      	b.n	80102b0 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 80102ae:	2300      	movs	r3, #0
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3710      	adds	r7, #16
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 80102b8:	b590      	push	{r4, r7, lr}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	339c      	adds	r3, #156	; 0x9c
 80102c8:	681c      	ldr	r4, [r3, #0]
 80102ca:	f001 f8b1 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80102ce:	4603      	mov	r3, r0
 80102d0:	461a      	mov	r2, r3
 80102d2:	6839      	ldr	r1, [r7, #0]
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 80102d8:	bf00      	nop
 80102da:	370c      	adds	r7, #12
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd90      	pop	{r4, r7, pc}

080102e0 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b084      	sub	sp, #16
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	60f8      	str	r0, [r7, #12]
 80102e8:	60b9      	str	r1, [r7, #8]
 80102ea:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2201      	movs	r2, #1
 80102f0:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 80102f2:	68f8      	ldr	r0, [r7, #12]
 80102f4:	f001 f872 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 80102f8:	4603      	mov	r3, r0
 80102fa:	681a      	ldr	r2, [r3, #0]
 80102fc:	3234      	adds	r2, #52	; 0x34
 80102fe:	6812      	ldr	r2, [r2, #0]
 8010300:	68b9      	ldr	r1, [r7, #8]
 8010302:	4618      	mov	r0, r3
 8010304:	4790      	blx	r2
    terminator.exitCurrentTest();
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8010310:	bf00      	nop
 8010312:	3710      	adds	r7, #16
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}

08010318 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b082      	sub	sp, #8
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	6838      	ldr	r0, [r7, #0]
 801032a:	4798      	blx	r3
} // LCOV_EXCL_LINE
 801032c:	bf00      	nop
 801032e:	3708      	adds	r7, #8
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010334:	b590      	push	{r4, r7, lr}
 8010336:	b09d      	sub	sp, #116	; 0x74
 8010338:	af04      	add	r7, sp, #16
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	607a      	str	r2, [r7, #4]
 801033e:	603b      	str	r3, [r7, #0]
 8010340:	460b      	mov	r3, r1
 8010342:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	f001 f849 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 801034a:	4603      	mov	r3, r0
 801034c:	681a      	ldr	r2, [r3, #0]
 801034e:	3228      	adds	r2, #40	; 0x28
 8010350:	6812      	ldr	r2, [r2, #0]
 8010352:	4618      	mov	r0, r3
 8010354:	4790      	blx	r2
    if (!condition)
 8010356:	7afb      	ldrb	r3, [r7, #11]
 8010358:	f083 0301 	eor.w	r3, r3, #1
 801035c:	b2db      	uxtb	r3, r3
 801035e:	2b00      	cmp	r3, #0
 8010360:	d03f      	beq.n	80103e2 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	339c      	adds	r3, #156	; 0x9c
 8010368:	681c      	ldr	r4, [r3, #0]
 801036a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801036e:	6879      	ldr	r1, [r7, #4]
 8010370:	4618      	mov	r0, r3
 8010372:	f7f9 fc6a 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010376:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801037a:	6839      	ldr	r1, [r7, #0]
 801037c:	4618      	mov	r0, r3
 801037e:	f7f9 fc64 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010382:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010386:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010388:	4618      	mov	r0, r3
 801038a:	f7f9 fc5e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801038e:	f107 0014 	add.w	r0, r7, #20
 8010392:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010396:	9302      	str	r3, [sp, #8]
 8010398:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801039c:	9301      	str	r3, [sp, #4]
 801039e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80103a2:	9300      	str	r3, [sp, #0]
 80103a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80103a8:	68f9      	ldr	r1, [r7, #12]
 80103aa:	f7fb ff6b 	bl	800c284 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80103ae:	f107 0314 	add.w	r3, r7, #20
 80103b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80103b4:	4619      	mov	r1, r3
 80103b6:	68f8      	ldr	r0, [r7, #12]
 80103b8:	47a0      	blx	r4
 80103ba:	f107 0314 	add.w	r3, r7, #20
 80103be:	4618      	mov	r0, r3
 80103c0:	f7fc fdce 	bl	800cf60 <_ZN12CheckFailureD1Ev>
 80103c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7f9 fff6 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80103ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7f9 fff1 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80103d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80103dc:	4618      	mov	r0, r3
 80103de:	f7f9 ffec 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 80103e2:	bf00      	nop
 80103e4:	3764      	adds	r7, #100	; 0x64
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd90      	pop	{r4, r7, pc}

080103ea <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80103ea:	b590      	push	{r4, r7, lr}
 80103ec:	b097      	sub	sp, #92	; 0x5c
 80103ee:	af02      	add	r7, sp, #8
 80103f0:	60f8      	str	r0, [r7, #12]
 80103f2:	60b9      	str	r1, [r7, #8]
 80103f4:	607a      	str	r2, [r7, #4]
 80103f6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80103f8:	68f8      	ldr	r0, [r7, #12]
 80103fa:	f000 ffef 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 80103fe:	4603      	mov	r3, r0
 8010400:	681a      	ldr	r2, [r3, #0]
 8010402:	3228      	adds	r2, #40	; 0x28
 8010404:	6812      	ldr	r2, [r2, #0]
 8010406:	4618      	mov	r0, r3
 8010408:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	339c      	adds	r3, #156	; 0x9c
 8010410:	681c      	ldr	r4, [r3, #0]
 8010412:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010416:	68b9      	ldr	r1, [r7, #8]
 8010418:	4618      	mov	r0, r3
 801041a:	f7f9 fc16 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801041e:	f107 0014 	add.w	r0, r7, #20
 8010422:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010426:	9300      	str	r3, [sp, #0]
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	68f9      	ldr	r1, [r7, #12]
 801042e:	f7fb ff71 	bl	800c314 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8010432:	f107 0314 	add.w	r3, r7, #20
 8010436:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010438:	4619      	mov	r1, r3
 801043a:	68f8      	ldr	r0, [r7, #12]
 801043c:	47a0      	blx	r4
 801043e:	f107 0314 	add.w	r3, r7, #20
 8010442:	4618      	mov	r0, r3
 8010444:	f7f7 fc16 	bl	8007c74 <_ZN11FailFailureD1Ev>
 8010448:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801044c:	4618      	mov	r0, r3
 801044e:	f7f9 ffb4 	bl	800a3ba <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 8010452:	bf00      	nop
 8010454:	3754      	adds	r7, #84	; 0x54
 8010456:	46bd      	mov	sp, r7
 8010458:	bd90      	pop	{r4, r7, pc}

0801045a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801045a:	b590      	push	{r4, r7, lr}
 801045c:	b0a7      	sub	sp, #156	; 0x9c
 801045e:	af04      	add	r7, sp, #16
 8010460:	60f8      	str	r0, [r7, #12]
 8010462:	60b9      	str	r1, [r7, #8]
 8010464:	607a      	str	r2, [r7, #4]
 8010466:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010468:	68f8      	ldr	r0, [r7, #12]
 801046a:	f000 ffb7 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 801046e:	4603      	mov	r3, r0
 8010470:	681a      	ldr	r2, [r3, #0]
 8010472:	3228      	adds	r2, #40	; 0x28
 8010474:	6812      	ldr	r2, [r2, #0]
 8010476:	4618      	mov	r0, r3
 8010478:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d102      	bne.n	8010486 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d068      	beq.n	8010558 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d002      	beq.n	8010492 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d12a      	bne.n	80104e8 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	339c      	adds	r3, #156	; 0x9c
 8010498:	681c      	ldr	r4, [r3, #0]
 801049a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801049e:	6839      	ldr	r1, [r7, #0]
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7f9 fbd2 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80104a6:	f107 0010 	add.w	r0, r7, #16
 80104aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80104ae:	9302      	str	r3, [sp, #8]
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	9301      	str	r3, [sp, #4]
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	9300      	str	r3, [sp, #0]
 80104b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80104bc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80104c0:	68f9      	ldr	r1, [r7, #12]
 80104c2:	f7fc f9ad 	bl	800c820 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80104c6:	f107 0310 	add.w	r3, r7, #16
 80104ca:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80104ce:	4619      	mov	r1, r3
 80104d0:	68f8      	ldr	r0, [r7, #12]
 80104d2:	47a0      	blx	r4
 80104d4:	f107 0310 	add.w	r3, r7, #16
 80104d8:	4618      	mov	r0, r3
 80104da:	f7fc fcb9 	bl	800ce50 <_ZN18StringEqualFailureD1Ev>
 80104de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7f9 ff69 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 80104e8:	6879      	ldr	r1, [r7, #4]
 80104ea:	68b8      	ldr	r0, [r7, #8]
 80104ec:	f7f9 f9ea 	bl	80098c4 <_ZN12SimpleString6StrCmpEPKcS1_>
 80104f0:	4603      	mov	r3, r0
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	bf14      	ite	ne
 80104f6:	2301      	movne	r3, #1
 80104f8:	2300      	moveq	r3, #0
 80104fa:	b2db      	uxtb	r3, r3
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d02c      	beq.n	801055a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	339c      	adds	r3, #156	; 0x9c
 8010506:	681c      	ldr	r4, [r3, #0]
 8010508:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801050c:	6839      	ldr	r1, [r7, #0]
 801050e:	4618      	mov	r0, r3
 8010510:	f7f9 fb9b 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010514:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010518:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801051c:	9302      	str	r3, [sp, #8]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	9301      	str	r3, [sp, #4]
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	9300      	str	r3, [sp, #0]
 8010526:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801052a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801052e:	68f9      	ldr	r1, [r7, #12]
 8010530:	f7fc f976 	bl	800c820 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010534:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010538:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801053c:	4619      	mov	r1, r3
 801053e:	68f8      	ldr	r0, [r7, #12]
 8010540:	47a0      	blx	r4
 8010542:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010546:	4618      	mov	r0, r3
 8010548:	f7fc fc82 	bl	800ce50 <_ZN18StringEqualFailureD1Ev>
 801054c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010550:	4618      	mov	r0, r3
 8010552:	f7f9 ff32 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010556:	e000      	b.n	801055a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010558:	bf00      	nop
}
 801055a:	378c      	adds	r7, #140	; 0x8c
 801055c:	46bd      	mov	sp, r7
 801055e:	bd90      	pop	{r4, r7, pc}

08010560 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010560:	b590      	push	{r4, r7, lr}
 8010562:	b0a7      	sub	sp, #156	; 0x9c
 8010564:	af04      	add	r7, sp, #16
 8010566:	60f8      	str	r0, [r7, #12]
 8010568:	60b9      	str	r1, [r7, #8]
 801056a:	607a      	str	r2, [r7, #4]
 801056c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801056e:	68f8      	ldr	r0, [r7, #12]
 8010570:	f000 ff34 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 8010574:	4603      	mov	r3, r0
 8010576:	681a      	ldr	r2, [r3, #0]
 8010578:	3228      	adds	r2, #40	; 0x28
 801057a:	6812      	ldr	r2, [r2, #0]
 801057c:	4618      	mov	r0, r3
 801057e:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d102      	bne.n	801058c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d06b      	beq.n	8010664 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d002      	beq.n	8010598 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d12b      	bne.n	80105f0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	339c      	adds	r3, #156	; 0x9c
 801059e:	681c      	ldr	r4, [r3, #0]
 80105a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80105a4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7f9 fb4e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80105ae:	f107 0010 	add.w	r0, r7, #16
 80105b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80105b6:	9302      	str	r3, [sp, #8]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	9301      	str	r3, [sp, #4]
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	9300      	str	r3, [sp, #0]
 80105c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80105c4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80105c8:	68f9      	ldr	r1, [r7, #12]
 80105ca:	f7fc f929 	bl	800c820 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80105ce:	f107 0310 	add.w	r3, r7, #16
 80105d2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80105d6:	4619      	mov	r1, r3
 80105d8:	68f8      	ldr	r0, [r7, #12]
 80105da:	47a0      	blx	r4
 80105dc:	f107 0310 	add.w	r3, r7, #16
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7fc fc35 	bl	800ce50 <_ZN18StringEqualFailureD1Ev>
 80105e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7f9 fee5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 80105f0:	683a      	ldr	r2, [r7, #0]
 80105f2:	6879      	ldr	r1, [r7, #4]
 80105f4:	68b8      	ldr	r0, [r7, #8]
 80105f6:	f7f9 f9a4 	bl	8009942 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 80105fa:	4603      	mov	r3, r0
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	bf14      	ite	ne
 8010600:	2301      	movne	r3, #1
 8010602:	2300      	moveq	r3, #0
 8010604:	b2db      	uxtb	r3, r3
 8010606:	2b00      	cmp	r3, #0
 8010608:	d02d      	beq.n	8010666 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	339c      	adds	r3, #156	; 0x9c
 8010610:	681c      	ldr	r4, [r3, #0]
 8010612:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010616:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801061a:	4618      	mov	r0, r3
 801061c:	f7f9 fb15 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010620:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010624:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010628:	9302      	str	r3, [sp, #8]
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	9301      	str	r3, [sp, #4]
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	9300      	str	r3, [sp, #0]
 8010632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010636:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801063a:	68f9      	ldr	r1, [r7, #12]
 801063c:	f7fc f8f0 	bl	800c820 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010640:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010644:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010648:	4619      	mov	r1, r3
 801064a:	68f8      	ldr	r0, [r7, #12]
 801064c:	47a0      	blx	r4
 801064e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010652:	4618      	mov	r0, r3
 8010654:	f7fc fbfc 	bl	800ce50 <_ZN18StringEqualFailureD1Ev>
 8010658:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801065c:	4618      	mov	r0, r3
 801065e:	f7f9 feac 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010662:	e000      	b.n	8010666 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010664:	bf00      	nop
}
 8010666:	378c      	adds	r7, #140	; 0x8c
 8010668:	46bd      	mov	sp, r7
 801066a:	bd90      	pop	{r4, r7, pc}

0801066c <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 801066c:	b590      	push	{r4, r7, lr}
 801066e:	b0ab      	sub	sp, #172	; 0xac
 8010670:	af04      	add	r7, sp, #16
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	60b9      	str	r1, [r7, #8]
 8010676:	607a      	str	r2, [r7, #4]
 8010678:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801067a:	68f8      	ldr	r0, [r7, #12]
 801067c:	f000 feae 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 8010680:	4603      	mov	r3, r0
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	3228      	adds	r2, #40	; 0x28
 8010686:	6812      	ldr	r2, [r2, #0]
 8010688:	4618      	mov	r0, r3
 801068a:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d102      	bne.n	8010698 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d07c      	beq.n	8010792 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d002      	beq.n	80106a4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d128      	bne.n	80106f6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	3398      	adds	r3, #152	; 0x98
 80106aa:	681c      	ldr	r4, [r3, #0]
 80106ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80106b0:	6839      	ldr	r1, [r7, #0]
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7f9 fac9 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80106b8:	f107 0010 	add.w	r0, r7, #16
 80106bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80106c0:	9302      	str	r3, [sp, #8]
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	9301      	str	r3, [sp, #4]
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	9300      	str	r3, [sp, #0]
 80106ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80106ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80106d2:	68f9      	ldr	r1, [r7, #12]
 80106d4:	f7fc f948 	bl	800c968 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80106d8:	f107 0310 	add.w	r3, r7, #16
 80106dc:	4619      	mov	r1, r3
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	47a0      	blx	r4
 80106e2:	f107 0310 	add.w	r3, r7, #16
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7fc fb90 	bl	800ce0c <_ZN24StringEqualNoCaseFailureD1Ev>
 80106ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7f9 fe62 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 80106f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80106fa:	68b9      	ldr	r1, [r7, #8]
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7f9 faa4 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010702:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010706:	6879      	ldr	r1, [r7, #4]
 8010708:	4618      	mov	r0, r3
 801070a:	f7f9 fa9e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801070e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8010712:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010716:	4611      	mov	r1, r2
 8010718:	4618      	mov	r0, r3
 801071a:	f7f9 fe75 	bl	800a408 <_ZNK12SimpleString12equalsNoCaseERKS_>
 801071e:	4603      	mov	r3, r0
 8010720:	f083 0301 	eor.w	r3, r3, #1
 8010724:	b2dc      	uxtb	r4, r3
 8010726:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801072a:	4618      	mov	r0, r3
 801072c:	f7f9 fe45 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010730:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010734:	4618      	mov	r0, r3
 8010736:	f7f9 fe40 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801073a:	2c00      	cmp	r4, #0
 801073c:	d02a      	beq.n	8010794 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	3398      	adds	r3, #152	; 0x98
 8010744:	681c      	ldr	r4, [r3, #0]
 8010746:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801074a:	6839      	ldr	r1, [r7, #0]
 801074c:	4618      	mov	r0, r3
 801074e:	f7f9 fa7c 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010752:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8010756:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801075a:	9302      	str	r3, [sp, #8]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	9301      	str	r3, [sp, #4]
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	9300      	str	r3, [sp, #0]
 8010764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010768:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801076c:	68f9      	ldr	r1, [r7, #12]
 801076e:	f7fc f8fb 	bl	800c968 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010772:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010776:	4619      	mov	r1, r3
 8010778:	68f8      	ldr	r0, [r7, #12]
 801077a:	47a0      	blx	r4
 801077c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010780:	4618      	mov	r0, r3
 8010782:	f7fc fb43 	bl	800ce0c <_ZN24StringEqualNoCaseFailureD1Ev>
 8010786:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801078a:	4618      	mov	r0, r3
 801078c:	f7f9 fe15 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010790:	e000      	b.n	8010794 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010792:	bf00      	nop
}
 8010794:	379c      	adds	r7, #156	; 0x9c
 8010796:	46bd      	mov	sp, r7
 8010798:	bd90      	pop	{r4, r7, pc}

0801079a <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 801079a:	b590      	push	{r4, r7, lr}
 801079c:	b0b3      	sub	sp, #204	; 0xcc
 801079e:	af04      	add	r7, sp, #16
 80107a0:	60f8      	str	r0, [r7, #12]
 80107a2:	60b9      	str	r1, [r7, #8]
 80107a4:	607a      	str	r2, [r7, #4]
 80107a6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80107a8:	68f8      	ldr	r0, [r7, #12]
 80107aa:	f000 fe17 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 80107ae:	4603      	mov	r3, r0
 80107b0:	681a      	ldr	r2, [r3, #0]
 80107b2:	3228      	adds	r2, #40	; 0x28
 80107b4:	6812      	ldr	r2, [r2, #0]
 80107b6:	4618      	mov	r0, r3
 80107b8:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d103      	bne.n	80107c8 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	f000 80ad 	beq.w	8010922 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d002      	beq.n	80107d4 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d140      	bne.n	8010856 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	3398      	adds	r3, #152	; 0x98
 80107da:	681c      	ldr	r4, [r3, #0]
 80107dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80107e0:	68b9      	ldr	r1, [r7, #8]
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7f9 fa31 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80107e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80107ec:	6879      	ldr	r1, [r7, #4]
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7f9 fa2b 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80107f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80107f8:	6839      	ldr	r1, [r7, #0]
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7f9 fa25 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010800:	f107 0010 	add.w	r0, r7, #16
 8010804:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010808:	9302      	str	r3, [sp, #8]
 801080a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801080e:	9301      	str	r3, [sp, #4]
 8010810:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010814:	9300      	str	r3, [sp, #0]
 8010816:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801081a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801081e:	68f9      	ldr	r1, [r7, #12]
 8010820:	f7fb fce6 	bl	800c1f0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010824:	f107 0310 	add.w	r3, r7, #16
 8010828:	4619      	mov	r1, r3
 801082a:	68f8      	ldr	r0, [r7, #12]
 801082c:	47a0      	blx	r4
 801082e:	f107 0310 	add.w	r3, r7, #16
 8010832:	4618      	mov	r0, r3
 8010834:	f7fc fbb6 	bl	800cfa4 <_ZN15ContainsFailureD1Ev>
 8010838:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801083c:	4618      	mov	r0, r3
 801083e:	f7f9 fdbc 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010842:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010846:	4618      	mov	r0, r3
 8010848:	f7f9 fdb7 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801084c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010850:	4618      	mov	r0, r3
 8010852:	f7f9 fdb2 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 8010856:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801085a:	6879      	ldr	r1, [r7, #4]
 801085c:	4618      	mov	r0, r3
 801085e:	f7f9 f9f4 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010862:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010866:	68b9      	ldr	r1, [r7, #8]
 8010868:	4618      	mov	r0, r3
 801086a:	f7f9 f9ee 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801086e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8010872:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010876:	4611      	mov	r1, r2
 8010878:	4618      	mov	r0, r3
 801087a:	f7f9 fa64 	bl	8009d46 <_ZNK12SimpleString8containsERKS_>
 801087e:	4603      	mov	r3, r0
 8010880:	f083 0301 	eor.w	r3, r3, #1
 8010884:	b2dc      	uxtb	r4, r3
 8010886:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801088a:	4618      	mov	r0, r3
 801088c:	f7f9 fd95 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010890:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010894:	4618      	mov	r0, r3
 8010896:	f7f9 fd90 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801089a:	2c00      	cmp	r4, #0
 801089c:	d042      	beq.n	8010924 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	3398      	adds	r3, #152	; 0x98
 80108a4:	681c      	ldr	r4, [r3, #0]
 80108a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80108aa:	68b9      	ldr	r1, [r7, #8]
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7f9 f9cc 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80108b2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80108b6:	6879      	ldr	r1, [r7, #4]
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7f9 f9c6 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80108be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80108c2:	6839      	ldr	r1, [r7, #0]
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7f9 f9c0 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80108ca:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80108ce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80108d2:	9302      	str	r3, [sp, #8]
 80108d4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80108d8:	9301      	str	r3, [sp, #4]
 80108da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80108de:	9300      	str	r3, [sp, #0]
 80108e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80108e4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80108e8:	68f9      	ldr	r1, [r7, #12]
 80108ea:	f7fb fc81 	bl	800c1f0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80108ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80108f2:	4619      	mov	r1, r3
 80108f4:	68f8      	ldr	r0, [r7, #12]
 80108f6:	47a0      	blx	r4
 80108f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7fc fb51 	bl	800cfa4 <_ZN15ContainsFailureD1Ev>
 8010902:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010906:	4618      	mov	r0, r3
 8010908:	f7f9 fd57 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801090c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010910:	4618      	mov	r0, r3
 8010912:	f7f9 fd52 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010916:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801091a:	4618      	mov	r0, r3
 801091c:	f7f9 fd4d 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010920:	e000      	b.n	8010924 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010922:	bf00      	nop
}
 8010924:	37bc      	adds	r7, #188	; 0xbc
 8010926:	46bd      	mov	sp, r7
 8010928:	bd90      	pop	{r4, r7, pc}

0801092a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 801092a:	b590      	push	{r4, r7, lr}
 801092c:	b0b3      	sub	sp, #204	; 0xcc
 801092e:	af04      	add	r7, sp, #16
 8010930:	60f8      	str	r0, [r7, #12]
 8010932:	60b9      	str	r1, [r7, #8]
 8010934:	607a      	str	r2, [r7, #4]
 8010936:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010938:	68f8      	ldr	r0, [r7, #12]
 801093a:	f000 fd4f 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 801093e:	4603      	mov	r3, r0
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	3228      	adds	r2, #40	; 0x28
 8010944:	6812      	ldr	r2, [r2, #0]
 8010946:	4618      	mov	r0, r3
 8010948:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d103      	bne.n	8010958 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	2b00      	cmp	r3, #0
 8010954:	f000 80ad 	beq.w	8010ab2 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d002      	beq.n	8010964 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d140      	bne.n	80109e6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	3398      	adds	r3, #152	; 0x98
 801096a:	681c      	ldr	r4, [r3, #0]
 801096c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010970:	68b9      	ldr	r1, [r7, #8]
 8010972:	4618      	mov	r0, r3
 8010974:	f7f9 f969 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010978:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801097c:	6879      	ldr	r1, [r7, #4]
 801097e:	4618      	mov	r0, r3
 8010980:	f7f9 f963 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010984:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010988:	6839      	ldr	r1, [r7, #0]
 801098a:	4618      	mov	r0, r3
 801098c:	f7f9 f95d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010990:	f107 0010 	add.w	r0, r7, #16
 8010994:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010998:	9302      	str	r3, [sp, #8]
 801099a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801099e:	9301      	str	r3, [sp, #4]
 80109a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80109a4:	9300      	str	r3, [sp, #0]
 80109a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80109aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80109ae:	68f9      	ldr	r1, [r7, #12]
 80109b0:	f7fb fc1e 	bl	800c1f0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80109b4:	f107 0310 	add.w	r3, r7, #16
 80109b8:	4619      	mov	r1, r3
 80109ba:	68f8      	ldr	r0, [r7, #12]
 80109bc:	47a0      	blx	r4
 80109be:	f107 0310 	add.w	r3, r7, #16
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fc faee 	bl	800cfa4 <_ZN15ContainsFailureD1Ev>
 80109c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7f9 fcf4 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80109d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7f9 fcef 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80109dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7f9 fcea 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 80109e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80109ea:	6879      	ldr	r1, [r7, #4]
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7f9 f92c 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80109f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80109f6:	68b9      	ldr	r1, [r7, #8]
 80109f8:	4618      	mov	r0, r3
 80109fa:	f7f9 f926 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80109fe:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8010a02:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010a06:	4611      	mov	r1, r2
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7f9 f9b7 	bl	8009d7c <_ZNK12SimpleString14containsNoCaseERKS_>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	f083 0301 	eor.w	r3, r3, #1
 8010a14:	b2dc      	uxtb	r4, r3
 8010a16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7f9 fccd 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010a20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7f9 fcc8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010a2a:	2c00      	cmp	r4, #0
 8010a2c:	d042      	beq.n	8010ab4 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	3398      	adds	r3, #152	; 0x98
 8010a34:	681c      	ldr	r4, [r3, #0]
 8010a36:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010a3a:	68b9      	ldr	r1, [r7, #8]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7f9 f904 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010a42:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010a46:	6879      	ldr	r1, [r7, #4]
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7f9 f8fe 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010a4e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010a52:	6839      	ldr	r1, [r7, #0]
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7f9 f8f8 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010a5a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8010a5e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010a62:	9302      	str	r3, [sp, #8]
 8010a64:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010a68:	9301      	str	r3, [sp, #4]
 8010a6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010a6e:	9300      	str	r3, [sp, #0]
 8010a70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010a74:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010a78:	68f9      	ldr	r1, [r7, #12]
 8010a7a:	f7fb fbb9 	bl	800c1f0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010a7e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010a82:	4619      	mov	r1, r3
 8010a84:	68f8      	ldr	r0, [r7, #12]
 8010a86:	47a0      	blx	r4
 8010a88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7fc fa89 	bl	800cfa4 <_ZN15ContainsFailureD1Ev>
 8010a92:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7f9 fc8f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010a9c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7f9 fc8a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010aa6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7f9 fc85 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010ab0:	e000      	b.n	8010ab4 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010ab2:	bf00      	nop
}
 8010ab4:	37bc      	adds	r7, #188	; 0xbc
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd90      	pop	{r4, r7, pc}

08010aba <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010aba:	b590      	push	{r4, r7, lr}
 8010abc:	b099      	sub	sp, #100	; 0x64
 8010abe:	af04      	add	r7, sp, #16
 8010ac0:	60f8      	str	r0, [r7, #12]
 8010ac2:	60b9      	str	r1, [r7, #8]
 8010ac4:	607a      	str	r2, [r7, #4]
 8010ac6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010ac8:	68f8      	ldr	r0, [r7, #12]
 8010aca:	f000 fc87 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	681a      	ldr	r2, [r3, #0]
 8010ad2:	3228      	adds	r2, #40	; 0x28
 8010ad4:	6812      	ldr	r2, [r2, #0]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	4790      	blx	r2
    if (expected != actual)
 8010ada:	68ba      	ldr	r2, [r7, #8]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	429a      	cmp	r2, r3
 8010ae0:	d027      	beq.n	8010b32 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	339c      	adds	r3, #156	; 0x9c
 8010ae8:	681c      	ldr	r4, [r3, #0]
 8010aea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010aee:	6839      	ldr	r1, [r7, #0]
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7f9 f8aa 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010af6:	f107 0014 	add.w	r0, r7, #20
 8010afa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010afe:	9302      	str	r3, [sp, #8]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	9301      	str	r3, [sp, #4]
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	9300      	str	r3, [sp, #0]
 8010b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010b0c:	68f9      	ldr	r1, [r7, #12]
 8010b0e:	f7fb fc1f 	bl	800c350 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8010b12:	f107 0314 	add.w	r3, r7, #20
 8010b16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b18:	4619      	mov	r1, r3
 8010b1a:	68f8      	ldr	r0, [r7, #12]
 8010b1c:	47a0      	blx	r4
 8010b1e:	f107 0314 	add.w	r3, r7, #20
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7fc f9fa 	bl	800cf1c <_ZN17LongsEqualFailureD1Ev>
 8010b28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f7f9 fc44 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8010b32:	bf00      	nop
 8010b34:	3754      	adds	r7, #84	; 0x54
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd90      	pop	{r4, r7, pc}

08010b3a <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010b3a:	b590      	push	{r4, r7, lr}
 8010b3c:	b099      	sub	sp, #100	; 0x64
 8010b3e:	af04      	add	r7, sp, #16
 8010b40:	60f8      	str	r0, [r7, #12]
 8010b42:	60b9      	str	r1, [r7, #8]
 8010b44:	607a      	str	r2, [r7, #4]
 8010b46:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010b48:	68f8      	ldr	r0, [r7, #12]
 8010b4a:	f000 fc47 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	681a      	ldr	r2, [r3, #0]
 8010b52:	3228      	adds	r2, #40	; 0x28
 8010b54:	6812      	ldr	r2, [r2, #0]
 8010b56:	4618      	mov	r0, r3
 8010b58:	4790      	blx	r2
    if (expected != actual)
 8010b5a:	68ba      	ldr	r2, [r7, #8]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d027      	beq.n	8010bb2 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	339c      	adds	r3, #156	; 0x9c
 8010b68:	681c      	ldr	r4, [r3, #0]
 8010b6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b6e:	6839      	ldr	r1, [r7, #0]
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7f9 f86a 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010b76:	f107 0014 	add.w	r0, r7, #20
 8010b7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b7e:	9302      	str	r3, [sp, #8]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	9301      	str	r3, [sp, #4]
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	9300      	str	r3, [sp, #0]
 8010b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010b8c:	68f9      	ldr	r1, [r7, #12]
 8010b8e:	f7fb fcab 	bl	800c4e8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 8010b92:	f107 0314 	add.w	r3, r7, #20
 8010b96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b98:	4619      	mov	r1, r3
 8010b9a:	68f8      	ldr	r0, [r7, #12]
 8010b9c:	47a0      	blx	r4
 8010b9e:	f107 0314 	add.w	r3, r7, #20
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7fc f998 	bl	800ced8 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8010ba8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7f9 fc04 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8010bb2:	bf00      	nop
 8010bb4:	3754      	adds	r7, #84	; 0x54
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd90      	pop	{r4, r7, pc}
	...

08010bbc <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010bbc:	b082      	sub	sp, #8
 8010bbe:	b590      	push	{r4, r7, lr}
 8010bc0:	b099      	sub	sp, #100	; 0x64
 8010bc2:	af02      	add	r7, sp, #8
 8010bc4:	60f8      	str	r0, [r7, #12]
 8010bc6:	1d38      	adds	r0, r7, #4
 8010bc8:	e880 0006 	stmia.w	r0, {r1, r2}
 8010bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8010bce:	68f8      	ldr	r0, [r7, #12]
 8010bd0:	f000 fc04 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	681a      	ldr	r2, [r3, #0]
 8010bd8:	3228      	adds	r2, #40	; 0x28
 8010bda:	6812      	ldr	r2, [r2, #0]
 8010bdc:	4618      	mov	r0, r3
 8010bde:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	339c      	adds	r3, #156	; 0x9c
 8010be6:	681c      	ldr	r4, [r3, #0]
 8010be8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010bec:	4919      	ldr	r1, [pc, #100]	; (8010c54 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7f9 f82b 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010bf4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010bf8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7f9 f825 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010c00:	f107 0014 	add.w	r0, r7, #20
 8010c04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010c08:	9301      	str	r3, [sp, #4]
 8010c0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010c0e:	9300      	str	r3, [sp, #0]
 8010c10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010c12:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010c14:	68f9      	ldr	r1, [r7, #12]
 8010c16:	f7fc f84d 	bl	800ccb4 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8010c1a:	f107 0314 	add.w	r3, r7, #20
 8010c1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010c22:	4619      	mov	r1, r3
 8010c24:	68f8      	ldr	r0, [r7, #12]
 8010c26:	47a0      	blx	r4
 8010c28:	f107 0314 	add.w	r3, r7, #20
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7fc f887 	bl	800cd40 <_ZN25FeatureUnsupportedFailureD1Ev>
 8010c32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7f9 fbbf 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010c3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7f9 fbba 	bl	800a3ba <_ZN12SimpleStringD1Ev>
#endif
}
 8010c46:	bf00      	nop
 8010c48:	375c      	adds	r7, #92	; 0x5c
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8010c50:	b002      	add	sp, #8
 8010c52:	4770      	bx	lr
 8010c54:	08021a18 	.word	0x08021a18

08010c58 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010c58:	b082      	sub	sp, #8
 8010c5a:	b590      	push	{r4, r7, lr}
 8010c5c:	b099      	sub	sp, #100	; 0x64
 8010c5e:	af02      	add	r7, sp, #8
 8010c60:	60f8      	str	r0, [r7, #12]
 8010c62:	1d38      	adds	r0, r7, #4
 8010c64:	e880 0006 	stmia.w	r0, {r1, r2}
 8010c68:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8010c6a:	68f8      	ldr	r0, [r7, #12]
 8010c6c:	f000 fbb6 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 8010c70:	4603      	mov	r3, r0
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	3228      	adds	r2, #40	; 0x28
 8010c76:	6812      	ldr	r2, [r2, #0]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	339c      	adds	r3, #156	; 0x9c
 8010c82:	681c      	ldr	r4, [r3, #0]
 8010c84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010c88:	4919      	ldr	r1, [pc, #100]	; (8010cf0 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7f8 ffdd 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010c90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010c94:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7f8 ffd7 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010c9c:	f107 0014 	add.w	r0, r7, #20
 8010ca0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010ca4:	9301      	str	r3, [sp, #4]
 8010ca6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010caa:	9300      	str	r3, [sp, #0]
 8010cac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010cae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010cb0:	68f9      	ldr	r1, [r7, #12]
 8010cb2:	f7fb ffff 	bl	800ccb4 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8010cb6:	f107 0314 	add.w	r3, r7, #20
 8010cba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	68f8      	ldr	r0, [r7, #12]
 8010cc2:	47a0      	blx	r4
 8010cc4:	f107 0314 	add.w	r3, r7, #20
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7fc f839 	bl	800cd40 <_ZN25FeatureUnsupportedFailureD1Ev>
 8010cce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7f9 fb71 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010cd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7f9 fb6c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
#endif
}
 8010ce2:	bf00      	nop
 8010ce4:	375c      	adds	r7, #92	; 0x5c
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8010cec:	b002      	add	sp, #8
 8010cee:	4770      	bx	lr
 8010cf0:	08021a18 	.word	0x08021a18

08010cf4 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010cf4:	b590      	push	{r4, r7, lr}
 8010cf6:	b099      	sub	sp, #100	; 0x64
 8010cf8:	af04      	add	r7, sp, #16
 8010cfa:	60f8      	str	r0, [r7, #12]
 8010cfc:	607b      	str	r3, [r7, #4]
 8010cfe:	460b      	mov	r3, r1
 8010d00:	72fb      	strb	r3, [r7, #11]
 8010d02:	4613      	mov	r3, r2
 8010d04:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 8010d06:	68f8      	ldr	r0, [r7, #12]
 8010d08:	f000 fb68 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	681a      	ldr	r2, [r3, #0]
 8010d10:	3228      	adds	r2, #40	; 0x28
 8010d12:	6812      	ldr	r2, [r2, #0]
 8010d14:	4618      	mov	r0, r3
 8010d16:	4790      	blx	r2
    if (expected != actual)
 8010d18:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8010d1c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d029      	beq.n	8010d78 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	339c      	adds	r3, #156	; 0x9c
 8010d2a:	681c      	ldr	r4, [r3, #0]
 8010d2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d30:	6879      	ldr	r1, [r7, #4]
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7f8 ff89 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010d38:	f107 0014 	add.w	r0, r7, #20
 8010d3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d40:	9302      	str	r3, [sp, #8]
 8010d42:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8010d46:	9301      	str	r3, [sp, #4]
 8010d48:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010d4c:	9300      	str	r3, [sp, #0]
 8010d4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010d50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010d52:	68f9      	ldr	r1, [r7, #12]
 8010d54:	f7fb fc94 	bl	800c680 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8010d58:	f107 0314 	add.w	r3, r7, #20
 8010d5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d5e:	4619      	mov	r1, r3
 8010d60:	68f8      	ldr	r0, [r7, #12]
 8010d62:	47a0      	blx	r4
 8010d64:	f107 0314 	add.w	r3, r7, #20
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7fc f893 	bl	800ce94 <_ZN23SignedBytesEqualFailureD1Ev>
 8010d6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7f9 fb21 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8010d78:	bf00      	nop
 8010d7a:	3754      	adds	r7, #84	; 0x54
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd90      	pop	{r4, r7, pc}

08010d80 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010d80:	b590      	push	{r4, r7, lr}
 8010d82:	b09d      	sub	sp, #116	; 0x74
 8010d84:	af04      	add	r7, sp, #16
 8010d86:	60f8      	str	r0, [r7, #12]
 8010d88:	60b9      	str	r1, [r7, #8]
 8010d8a:	607a      	str	r2, [r7, #4]
 8010d8c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010d8e:	68f8      	ldr	r0, [r7, #12]
 8010d90:	f000 fb24 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 8010d94:	4603      	mov	r3, r0
 8010d96:	681a      	ldr	r2, [r3, #0]
 8010d98:	3228      	adds	r2, #40	; 0x28
 8010d9a:	6812      	ldr	r2, [r2, #0]
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	4790      	blx	r2
    if (expected != actual)
 8010da0:	68ba      	ldr	r2, [r7, #8]
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d03f      	beq.n	8010e28 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	339c      	adds	r3, #156	; 0x9c
 8010dae:	681c      	ldr	r4, [r3, #0]
 8010db0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010db4:	68b9      	ldr	r1, [r7, #8]
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7f9 fdea 	bl	800a990 <_Z10StringFromPKv>
 8010dbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010dc0:	6879      	ldr	r1, [r7, #4]
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7f9 fde4 	bl	800a990 <_Z10StringFromPKv>
 8010dc8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010dcc:	6839      	ldr	r1, [r7, #0]
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7f8 ff3b 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010dd4:	f107 0014 	add.w	r0, r7, #20
 8010dd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010ddc:	9302      	str	r3, [sp, #8]
 8010dde:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010de2:	9301      	str	r3, [sp, #4]
 8010de4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010de8:	9300      	str	r3, [sp, #0]
 8010dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010dec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010dee:	68f9      	ldr	r1, [r7, #12]
 8010df0:	f7fb f814 	bl	800be1c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010df4:	f107 0314 	add.w	r3, r7, #20
 8010df8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	68f8      	ldr	r0, [r7, #12]
 8010dfe:	47a0      	blx	r4
 8010e00:	f107 0314 	add.w	r3, r7, #20
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7fc f955 	bl	800d0b4 <_ZN13EqualsFailureD1Ev>
 8010e0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7f9 fad3 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010e14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7f9 face 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010e1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7f9 fac9 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8010e28:	bf00      	nop
 8010e2a:	3764      	adds	r7, #100	; 0x64
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd90      	pop	{r4, r7, pc}

08010e30 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010e30:	b590      	push	{r4, r7, lr}
 8010e32:	b09d      	sub	sp, #116	; 0x74
 8010e34:	af04      	add	r7, sp, #16
 8010e36:	60f8      	str	r0, [r7, #12]
 8010e38:	60b9      	str	r1, [r7, #8]
 8010e3a:	607a      	str	r2, [r7, #4]
 8010e3c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010e3e:	68f8      	ldr	r0, [r7, #12]
 8010e40:	f000 facc 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 8010e44:	4603      	mov	r3, r0
 8010e46:	681a      	ldr	r2, [r3, #0]
 8010e48:	3228      	adds	r2, #40	; 0x28
 8010e4a:	6812      	ldr	r2, [r2, #0]
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	4790      	blx	r2
    if (expected != actual)
 8010e50:	68ba      	ldr	r2, [r7, #8]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d03f      	beq.n	8010ed8 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	339c      	adds	r3, #156	; 0x9c
 8010e5e:	681c      	ldr	r4, [r3, #0]
 8010e60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e64:	68b9      	ldr	r1, [r7, #8]
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7f9 fdbc 	bl	800a9e4 <_Z10StringFromPFvvE>
 8010e6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010e70:	6879      	ldr	r1, [r7, #4]
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7f9 fdb6 	bl	800a9e4 <_Z10StringFromPFvvE>
 8010e78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010e7c:	6839      	ldr	r1, [r7, #0]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7f8 fee3 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010e84:	f107 0014 	add.w	r0, r7, #20
 8010e88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010e8c:	9302      	str	r3, [sp, #8]
 8010e8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010e92:	9301      	str	r3, [sp, #4]
 8010e94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e98:	9300      	str	r3, [sp, #0]
 8010e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e9c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010e9e:	68f9      	ldr	r1, [r7, #12]
 8010ea0:	f7fa ffbc 	bl	800be1c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010ea4:	f107 0314 	add.w	r3, r7, #20
 8010ea8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010eaa:	4619      	mov	r1, r3
 8010eac:	68f8      	ldr	r0, [r7, #12]
 8010eae:	47a0      	blx	r4
 8010eb0:	f107 0314 	add.w	r3, r7, #20
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7fc f8fd 	bl	800d0b4 <_ZN13EqualsFailureD1Ev>
 8010eba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7f9 fa7b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010ec4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f7f9 fa76 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8010ece:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7f9 fa71 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8010ed8:	bf00      	nop
 8010eda:	3764      	adds	r7, #100	; 0x64
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd90      	pop	{r4, r7, pc}

08010ee0 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010ee0:	b590      	push	{r4, r7, lr}
 8010ee2:	b09d      	sub	sp, #116	; 0x74
 8010ee4:	af02      	add	r7, sp, #8
 8010ee6:	6278      	str	r0, [r7, #36]	; 0x24
 8010ee8:	ed87 0b06 	vstr	d0, [r7, #24]
 8010eec:	ed87 1b04 	vstr	d1, [r7, #16]
 8010ef0:	ed87 2b02 	vstr	d2, [r7, #8]
 8010ef4:	6239      	str	r1, [r7, #32]
 8010ef6:	607a      	str	r2, [r7, #4]
 8010ef8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010efa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010efc:	f000 fa6e 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 8010f00:	4603      	mov	r3, r0
 8010f02:	681a      	ldr	r2, [r3, #0]
 8010f04:	3228      	adds	r2, #40	; 0x28
 8010f06:	6812      	ldr	r2, [r2, #0]
 8010f08:	4618      	mov	r0, r3
 8010f0a:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8010f0c:	ed97 2b02 	vldr	d2, [r7, #8]
 8010f10:	ed97 1b04 	vldr	d1, [r7, #16]
 8010f14:	ed97 0b06 	vldr	d0, [r7, #24]
 8010f18:	f7fe fd4a 	bl	800f9b0 <_Z13doubles_equalddd>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	f083 0301 	eor.w	r3, r3, #1
 8010f22:	b2db      	uxtb	r3, r3
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d029      	beq.n	8010f7c <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8010f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	339c      	adds	r3, #156	; 0x9c
 8010f2e:	681c      	ldr	r4, [r3, #0]
 8010f30:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010f34:	6a39      	ldr	r1, [r7, #32]
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7f8 fe87 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010f3c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8010f40:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010f44:	9300      	str	r3, [sp, #0]
 8010f46:	ed97 2b02 	vldr	d2, [r7, #8]
 8010f4a:	ed97 1b04 	vldr	d1, [r7, #16]
 8010f4e:	ed97 0b06 	vldr	d0, [r7, #24]
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	687a      	ldr	r2, [r7, #4]
 8010f56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f58:	f7fa ffa2 	bl	800bea0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 8010f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010f60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010f62:	4619      	mov	r1, r3
 8010f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f66:	47a0      	blx	r4
 8010f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7fc f87f 	bl	800d070 <_ZN19DoublesEqualFailureD1Ev>
 8010f72:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7f9 fa1f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8010f7c:	bf00      	nop
 8010f7e:	376c      	adds	r7, #108	; 0x6c
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd90      	pop	{r4, r7, pc}

08010f84 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010f84:	b590      	push	{r4, r7, lr}
 8010f86:	b0a7      	sub	sp, #156	; 0x9c
 8010f88:	af04      	add	r7, sp, #16
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	60b9      	str	r1, [r7, #8]
 8010f8e:	607a      	str	r2, [r7, #4]
 8010f90:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010f92:	68f8      	ldr	r0, [r7, #12]
 8010f94:	f000 fa22 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	681a      	ldr	r2, [r3, #0]
 8010f9c:	3228      	adds	r2, #40	; 0x28
 8010f9e:	6812      	ldr	r2, [r2, #0]
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	4790      	blx	r2
	if (length == 0) return;
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d075      	beq.n	8011096 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d102      	bne.n	8010fb6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d071      	beq.n	801109a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d002      	beq.n	8010fc2 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d12d      	bne.n	801101e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	339c      	adds	r3, #156	; 0x9c
 8010fc8:	681c      	ldr	r4, [r3, #0]
 8010fca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010fce:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7f8 fe39 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8010fd8:	f107 0010 	add.w	r0, r7, #16
 8010fdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010fe0:	9303      	str	r3, [sp, #12]
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	9302      	str	r3, [sp, #8]
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	9301      	str	r3, [sp, #4]
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	9300      	str	r3, [sp, #0]
 8010fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010ff2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010ff6:	68f9      	ldr	r1, [r7, #12]
 8010ff8:	f7fb fd70 	bl	800cadc <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8010ffc:	f107 0310 	add.w	r3, r7, #16
 8011000:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011004:	4619      	mov	r1, r3
 8011006:	68f8      	ldr	r0, [r7, #12]
 8011008:	47a0      	blx	r4
 801100a:	f107 0310 	add.w	r3, r7, #16
 801100e:	4618      	mov	r0, r3
 8011010:	f7fb feda 	bl	800cdc8 <_ZN18BinaryEqualFailureD1Ev>
 8011014:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011018:	4618      	mov	r0, r3
 801101a:	f7f9 f9ce 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 801101e:	683a      	ldr	r2, [r7, #0]
 8011020:	6879      	ldr	r1, [r7, #4]
 8011022:	68b8      	ldr	r0, [r7, #8]
 8011024:	f7f8 fd30 	bl	8009a88 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8011028:	4603      	mov	r3, r0
 801102a:	2b00      	cmp	r3, #0
 801102c:	bf14      	ite	ne
 801102e:	2301      	movne	r3, #1
 8011030:	2300      	moveq	r3, #0
 8011032:	b2db      	uxtb	r3, r3
 8011034:	2b00      	cmp	r3, #0
 8011036:	d031      	beq.n	801109c <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	339c      	adds	r3, #156	; 0x9c
 801103e:	681c      	ldr	r4, [r3, #0]
 8011040:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011044:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011048:	4618      	mov	r0, r3
 801104a:	f7f8 fdfe 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801104e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8011052:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011056:	9303      	str	r3, [sp, #12]
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	9302      	str	r3, [sp, #8]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	9301      	str	r3, [sp, #4]
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	9300      	str	r3, [sp, #0]
 8011064:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011068:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801106c:	68f9      	ldr	r1, [r7, #12]
 801106e:	f7fb fd35 	bl	800cadc <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8011072:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011076:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801107a:	4619      	mov	r1, r3
 801107c:	68f8      	ldr	r0, [r7, #12]
 801107e:	47a0      	blx	r4
 8011080:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011084:	4618      	mov	r0, r3
 8011086:	f7fb fe9f 	bl	800cdc8 <_ZN18BinaryEqualFailureD1Ev>
 801108a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801108e:	4618      	mov	r0, r3
 8011090:	f7f9 f993 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8011094:	e002      	b.n	801109c <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 8011096:	bf00      	nop
 8011098:	e000      	b.n	801109c <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801109a:	bf00      	nop
}
 801109c:	378c      	adds	r7, #140	; 0x8c
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd90      	pop	{r4, r7, pc}

080110a2 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80110a2:	b590      	push	{r4, r7, lr}
 80110a4:	b09b      	sub	sp, #108	; 0x6c
 80110a6:	af06      	add	r7, sp, #24
 80110a8:	60f8      	str	r0, [r7, #12]
 80110aa:	60b9      	str	r1, [r7, #8]
 80110ac:	607a      	str	r2, [r7, #4]
 80110ae:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80110b0:	68f8      	ldr	r0, [r7, #12]
 80110b2:	f000 f993 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 80110b6:	4603      	mov	r3, r0
 80110b8:	681a      	ldr	r2, [r3, #0]
 80110ba:	3228      	adds	r2, #40	; 0x28
 80110bc:	6812      	ldr	r2, [r2, #0]
 80110be:	4618      	mov	r0, r3
 80110c0:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 80110c2:	68ba      	ldr	r2, [r7, #8]
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	405a      	eors	r2, r3
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	4013      	ands	r3, r2
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d02b      	beq.n	8011128 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	339c      	adds	r3, #156	; 0x9c
 80110d6:	681c      	ldr	r4, [r3, #0]
 80110d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80110dc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80110de:	4618      	mov	r0, r3
 80110e0:	f7f8 fdb3 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80110e4:	f107 0014 	add.w	r0, r7, #20
 80110e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80110ec:	9304      	str	r3, [sp, #16]
 80110ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80110f0:	9303      	str	r3, [sp, #12]
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	9302      	str	r3, [sp, #8]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	9301      	str	r3, [sp, #4]
 80110fa:	68bb      	ldr	r3, [r7, #8]
 80110fc:	9300      	str	r3, [sp, #0]
 80110fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011100:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011102:	68f9      	ldr	r1, [r7, #12]
 8011104:	f7fb fd7a 	bl	800cbfc <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 8011108:	f107 0314 	add.w	r3, r7, #20
 801110c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801110e:	4619      	mov	r1, r3
 8011110:	68f8      	ldr	r0, [r7, #12]
 8011112:	47a0      	blx	r4
 8011114:	f107 0314 	add.w	r3, r7, #20
 8011118:	4618      	mov	r0, r3
 801111a:	f7fb fe33 	bl	800cd84 <_ZN16BitsEqualFailureD1Ev>
 801111e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011122:	4618      	mov	r0, r3
 8011124:	f7f9 f949 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8011128:	bf00      	nop
 801112a:	3754      	adds	r7, #84	; 0x54
 801112c:	46bd      	mov	sp, r7
 801112e:	bd90      	pop	{r4, r7, pc}

08011130 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8011130:	b590      	push	{r4, r7, lr}
 8011132:	b09d      	sub	sp, #116	; 0x74
 8011134:	af04      	add	r7, sp, #16
 8011136:	60f8      	str	r0, [r7, #12]
 8011138:	607a      	str	r2, [r7, #4]
 801113a:	603b      	str	r3, [r7, #0]
 801113c:	460b      	mov	r3, r1
 801113e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8011140:	68f8      	ldr	r0, [r7, #12]
 8011142:	f000 f94b 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 8011146:	4603      	mov	r3, r0
 8011148:	681a      	ldr	r2, [r3, #0]
 801114a:	3228      	adds	r2, #40	; 0x28
 801114c:	6812      	ldr	r2, [r2, #0]
 801114e:	4618      	mov	r0, r3
 8011150:	4790      	blx	r2
    if (failed)
 8011152:	7afb      	ldrb	r3, [r7, #11]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d03f      	beq.n	80111d8 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	339c      	adds	r3, #156	; 0x9c
 801115e:	681c      	ldr	r4, [r3, #0]
 8011160:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011164:	6879      	ldr	r1, [r7, #4]
 8011166:	4618      	mov	r0, r3
 8011168:	f7f8 fd6f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801116c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011170:	6839      	ldr	r1, [r7, #0]
 8011172:	4618      	mov	r0, r3
 8011174:	f7f8 fd69 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8011178:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801117c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801117e:	4618      	mov	r0, r3
 8011180:	f7f8 fd63 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8011184:	f107 0014 	add.w	r0, r7, #20
 8011188:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801118c:	9302      	str	r3, [sp, #8]
 801118e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011192:	9301      	str	r3, [sp, #4]
 8011194:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011198:	9300      	str	r3, [sp, #0]
 801119a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801119c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801119e:	68f9      	ldr	r1, [r7, #12]
 80111a0:	f7fa ff30 	bl	800c004 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80111a4:	f107 0314 	add.w	r3, r7, #20
 80111a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80111aa:	4619      	mov	r1, r3
 80111ac:	68f8      	ldr	r0, [r7, #12]
 80111ae:	47a0      	blx	r4
 80111b0:	f107 0314 	add.w	r3, r7, #20
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fb ff39 	bl	800d02c <_ZN17CheckEqualFailureD1Ev>
 80111ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80111be:	4618      	mov	r0, r3
 80111c0:	f7f9 f8fb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80111c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7f9 f8f6 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80111ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7f9 f8f1 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 80111d8:	bf00      	nop
 80111da:	3764      	adds	r7, #100	; 0x64
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd90      	pop	{r4, r7, pc}

080111e0 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 80111e0:	b590      	push	{r4, r7, lr}
 80111e2:	b09d      	sub	sp, #116	; 0x74
 80111e4:	af04      	add	r7, sp, #16
 80111e6:	60f8      	str	r0, [r7, #12]
 80111e8:	607a      	str	r2, [r7, #4]
 80111ea:	603b      	str	r3, [r7, #0]
 80111ec:	460b      	mov	r3, r1
 80111ee:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80111f0:	68f8      	ldr	r0, [r7, #12]
 80111f2:	f000 f8f3 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 80111f6:	4603      	mov	r3, r0
 80111f8:	681a      	ldr	r2, [r3, #0]
 80111fa:	3228      	adds	r2, #40	; 0x28
 80111fc:	6812      	ldr	r2, [r2, #0]
 80111fe:	4618      	mov	r0, r3
 8011200:	4790      	blx	r2
    if (!comparison)
 8011202:	7afb      	ldrb	r3, [r7, #11]
 8011204:	f083 0301 	eor.w	r3, r3, #1
 8011208:	b2db      	uxtb	r3, r3
 801120a:	2b00      	cmp	r3, #0
 801120c:	d03f      	beq.n	801128e <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	339c      	adds	r3, #156	; 0x9c
 8011214:	681c      	ldr	r4, [r3, #0]
 8011216:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801121a:	6879      	ldr	r1, [r7, #4]
 801121c:	4618      	mov	r0, r3
 801121e:	f7f8 fd14 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8011222:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011226:	6839      	ldr	r1, [r7, #0]
 8011228:	4618      	mov	r0, r3
 801122a:	f7f8 fd0e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801122e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011232:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011234:	4618      	mov	r0, r3
 8011236:	f7f8 fd08 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801123a:	f107 0014 	add.w	r0, r7, #20
 801123e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011242:	9302      	str	r3, [sp, #8]
 8011244:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011248:	9301      	str	r3, [sp, #4]
 801124a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801124e:	9300      	str	r3, [sp, #0]
 8011250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011252:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011254:	68f9      	ldr	r1, [r7, #12]
 8011256:	f7fa ff83 	bl	800c160 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801125a:	f107 0314 	add.w	r3, r7, #20
 801125e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011260:	4619      	mov	r1, r3
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	47a0      	blx	r4
 8011266:	f107 0314 	add.w	r3, r7, #20
 801126a:	4618      	mov	r0, r3
 801126c:	f7fb febc 	bl	800cfe8 <_ZN17ComparisonFailureD1Ev>
 8011270:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011274:	4618      	mov	r0, r3
 8011276:	f7f9 f8a0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801127a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801127e:	4618      	mov	r0, r3
 8011280:	f7f9 f89b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8011284:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011288:	4618      	mov	r0, r3
 801128a:	f7f9 f896 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 801128e:	bf00      	nop
 8011290:	3764      	adds	r7, #100	; 0x64
 8011292:	46bd      	mov	sp, r7
 8011294:	bd90      	pop	{r4, r7, pc}
	...

08011298 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 8011298:	b5b0      	push	{r4, r5, r7, lr}
 801129a:	b088      	sub	sp, #32
 801129c:	af00      	add	r7, sp, #0
 801129e:	60f8      	str	r0, [r7, #12]
 80112a0:	60b9      	str	r1, [r7, #8]
 80112a2:	607a      	str	r2, [r7, #4]
 80112a4:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 80112a6:	f107 0310 	add.w	r3, r7, #16
 80112aa:	4924      	ldr	r1, [pc, #144]	; (801133c <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7f8 fccc 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 80112b2:	f107 0310 	add.w	r3, r7, #16
 80112b6:	6879      	ldr	r1, [r7, #4]
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7f9 f90d 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 80112be:	f107 0310 	add.w	r3, r7, #16
 80112c2:	491f      	ldr	r1, [pc, #124]	; (8011340 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7f9 f907 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 80112ca:	f107 0318 	add.w	r3, r7, #24
 80112ce:	6839      	ldr	r1, [r7, #0]
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7f9 fda1 	bl	800ae18 <_Z10StringFromj>
 80112d6:	f107 0218 	add.w	r2, r7, #24
 80112da:	f107 0310 	add.w	r3, r7, #16
 80112de:	4611      	mov	r1, r2
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7f9 f8e7 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 80112e6:	f107 0318 	add.w	r3, r7, #24
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7f9 f865 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 80112f0:	f107 0310 	add.w	r3, r7, #16
 80112f4:	4913      	ldr	r1, [pc, #76]	; (8011344 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7f9 f8ee 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 80112fc:	f107 0310 	add.w	r3, r7, #16
 8011300:	68b9      	ldr	r1, [r7, #8]
 8011302:	4618      	mov	r0, r3
 8011304:	f7f9 f8e8 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8011308:	68f8      	ldr	r0, [r7, #12]
 801130a:	f000 f867 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 801130e:	4604      	mov	r4, r0
 8011310:	6823      	ldr	r3, [r4, #0]
 8011312:	3338      	adds	r3, #56	; 0x38
 8011314:	681d      	ldr	r5, [r3, #0]
 8011316:	f107 0310 	add.w	r3, r7, #16
 801131a:	4618      	mov	r0, r3
 801131c:	f7f9 f820 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8011320:	4603      	mov	r3, r0
 8011322:	4619      	mov	r1, r3
 8011324:	4620      	mov	r0, r4
 8011326:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8011328:	f107 0310 	add.w	r3, r7, #16
 801132c:	4618      	mov	r0, r3
 801132e:	f7f9 f844 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8011332:	bf00      	nop
 8011334:	3720      	adds	r7, #32
 8011336:	46bd      	mov	sp, r7
 8011338:	bdb0      	pop	{r4, r5, r7, pc}
 801133a:	bf00      	nop
 801133c:	08021a30 	.word	0x08021a30
 8011340:	08021a34 	.word	0x08021a34
 8011344:	08021a38 	.word	0x08021a38

08011348 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8011348:	b590      	push	{r4, r7, lr}
 801134a:	b085      	sub	sp, #20
 801134c:	af00      	add	r7, sp, #0
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	60b9      	str	r1, [r7, #8]
 8011352:	607a      	str	r2, [r7, #4]
 8011354:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	3370      	adds	r3, #112	; 0x70
 801135c:	681c      	ldr	r4, [r3, #0]
 801135e:	68b8      	ldr	r0, [r7, #8]
 8011360:	f7f8 fffe 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8011364:	4601      	mov	r1, r0
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	68f8      	ldr	r0, [r7, #12]
 801136c:	47a0      	blx	r4
}
 801136e:	bf00      	nop
 8011370:	3714      	adds	r7, #20
 8011372:	46bd      	mov	sp, r7
 8011374:	bd90      	pop	{r4, r7, pc}

08011376 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 8011376:	b580      	push	{r7, lr}
 8011378:	b082      	sub	sp, #8
 801137a:	af00      	add	r7, sp, #0
 801137c:	6078      	str	r0, [r7, #4]
 801137e:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8011380:	6878      	ldr	r0, [r7, #4]
 8011382:	f000 f82b 	bl	80113dc <_ZN10UtestShell13getTestResultEv>
 8011386:	4603      	mov	r3, r0
 8011388:	681a      	ldr	r2, [r3, #0]
 801138a:	323c      	adds	r2, #60	; 0x3c
 801138c:	6812      	ldr	r2, [r2, #0]
 801138e:	6839      	ldr	r1, [r7, #0]
 8011390:	4618      	mov	r0, r3
 8011392:	4790      	blx	r2
}
 8011394:	bf00      	nop
 8011396:	3708      	adds	r7, #8
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}

0801139c <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 801139c:	b480      	push	{r7}
 801139e:	b083      	sub	sp, #12
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 80113a6:	4a04      	ldr	r2, [pc, #16]	; (80113b8 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	6013      	str	r3, [r2, #0]
}
 80113ac:	bf00      	nop
 80113ae:	370c      	adds	r7, #12
 80113b0:	46bd      	mov	sp, r7
 80113b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b6:	4770      	bx	lr
 80113b8:	20000888 	.word	0x20000888

080113bc <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 80113bc:	b480      	push	{r7}
 80113be:	b083      	sub	sp, #12
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 80113c6:	4a04      	ldr	r2, [pc, #16]	; (80113d8 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	6013      	str	r3, [r2, #0]
}
 80113cc:	bf00      	nop
 80113ce:	370c      	adds	r7, #12
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr
 80113d8:	2000088c 	.word	0x2000088c

080113dc <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 80113e4:	4b09      	ldr	r3, [pc, #36]	; (801140c <_ZN10UtestShell13getTestResultEv+0x30>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d109      	bne.n	8011400 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 80113ec:	f7fe fbb2 	bl	800fb54 <_ZN22OutsideTestRunnerUTest8instanceEv>
 80113f0:	4603      	mov	r3, r0
 80113f2:	681a      	ldr	r2, [r3, #0]
 80113f4:	32a4      	adds	r2, #164	; 0xa4
 80113f6:	6812      	ldr	r2, [r2, #0]
 80113f8:	4618      	mov	r0, r3
 80113fa:	4790      	blx	r2
 80113fc:	4603      	mov	r3, r0
 80113fe:	e001      	b.n	8011404 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8011400:	4b02      	ldr	r3, [pc, #8]	; (801140c <_ZN10UtestShell13getTestResultEv+0x30>)
 8011402:	681b      	ldr	r3, [r3, #0]
}
 8011404:	4618      	mov	r0, r3
 8011406:	3708      	adds	r7, #8
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}
 801140c:	20000888 	.word	0x20000888

08011410 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8011410:	b580      	push	{r7, lr}
 8011412:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8011414:	4b05      	ldr	r3, [pc, #20]	; (801142c <_ZN10UtestShell10getCurrentEv+0x1c>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d103      	bne.n	8011424 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 801141c:	f7fe fb9a 	bl	800fb54 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8011420:	4603      	mov	r3, r0
 8011422:	e001      	b.n	8011428 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8011424:	4b01      	ldr	r3, [pc, #4]	; (801142c <_ZN10UtestShell10getCurrentEv+0x1c>)
 8011426:	681b      	ldr	r3, [r3, #0]
}
 8011428:	4618      	mov	r0, r3
 801142a:	bd80      	pop	{r7, pc}
 801142c:	2000088c 	.word	0x2000088c

08011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8011430:	b480      	push	{r7}
 8011432:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8011434:	4b03      	ldr	r3, [pc, #12]	; (8011444 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 8011436:	681b      	ldr	r3, [r3, #0]
}
 8011438:	4618      	mov	r0, r3
 801143a:	46bd      	mov	sp, r7
 801143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011440:	4770      	bx	lr
 8011442:	bf00      	nop
 8011444:	20000090 	.word	0x20000090

08011448 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8011448:	b480      	push	{r7}
 801144a:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 801144c:	4b03      	ldr	r3, [pc, #12]	; (801145c <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 801144e:	4a04      	ldr	r2, [pc, #16]	; (8011460 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8011450:	601a      	str	r2, [r3, #0]
}
 8011452:	bf00      	nop
 8011454:	46bd      	mov	sp, r7
 8011456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145a:	4770      	bx	lr
 801145c:	20000090 	.word	0x20000090
 8011460:	2000008c 	.word	0x2000008c

08011464 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8011464:	b480      	push	{r7}
 8011466:	b083      	sub	sp, #12
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	4a04      	ldr	r2, [pc, #16]	; (8011480 <_ZN5UtestC1Ev+0x1c>)
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	601a      	str	r2, [r3, #0]
{
}
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	4618      	mov	r0, r3
 8011476:	370c      	adds	r7, #12
 8011478:	46bd      	mov	sp, r7
 801147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147e:	4770      	bx	lr
 8011480:	0802464c 	.word	0x0802464c

08011484 <_ZN5UtestD1Ev>:

Utest::~Utest()
 8011484:	b480      	push	{r7}
 8011486:	b083      	sub	sp, #12
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	4a04      	ldr	r2, [pc, #16]	; (80114a0 <_ZN5UtestD1Ev+0x1c>)
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	601a      	str	r2, [r3, #0]
{
}
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	4618      	mov	r0, r3
 8011496:	370c      	adds	r7, #12
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr
 80114a0:	0802464c 	.word	0x0802464c

080114a4 <_ZN5UtestD0Ev>:
Utest::~Utest()
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
}
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f7ff ffe9 	bl	8011484 <_ZN5UtestD1Ev>
 80114b2:	2104      	movs	r1, #4
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f7f6 f819 	bl	80074ec <_ZdlPvj>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	4618      	mov	r0, r3
 80114be:	3708      	adds	r7, #8
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b082      	sub	sp, #8
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 80114cc:	4b0d      	ldr	r3, [pc, #52]	; (8011504 <_ZN5Utest3runEv+0x40>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	6879      	ldr	r1, [r7, #4]
 80114d2:	480d      	ldr	r0, [pc, #52]	; (8011508 <_ZN5Utest3runEv+0x44>)
 80114d4:	4798      	blx	r3
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	bf14      	ite	ne
 80114dc:	2301      	movne	r3, #1
 80114de:	2300      	moveq	r3, #0
 80114e0:	b2db      	uxtb	r3, r3
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d004      	beq.n	80114f0 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 80114e6:	4b07      	ldr	r3, [pc, #28]	; (8011504 <_ZN5Utest3runEv+0x40>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	6879      	ldr	r1, [r7, #4]
 80114ec:	4807      	ldr	r0, [pc, #28]	; (801150c <_ZN5Utest3runEv+0x48>)
 80114ee:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 80114f0:	4b04      	ldr	r3, [pc, #16]	; (8011504 <_ZN5Utest3runEv+0x40>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	6879      	ldr	r1, [r7, #4]
 80114f6:	4806      	ldr	r0, [pc, #24]	; (8011510 <_ZN5Utest3runEv+0x4c>)
 80114f8:	4798      	blx	r3
}
 80114fa:	bf00      	nop
 80114fc:	3708      	adds	r7, #8
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}
 8011502:	bf00      	nop
 8011504:	200000a0 	.word	0x200000a0
 8011508:	0800fbb1 	.word	0x0800fbb1
 801150c:	0800fbcd 	.word	0x0800fbcd
 8011510:	0800fbe9 	.word	0x0800fbe9

08011514 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8011514:	b480      	push	{r7}
 8011516:	b083      	sub	sp, #12
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
}
 801151c:	bf00      	nop
 801151e:	370c      	adds	r7, #12
 8011520:	46bd      	mov	sp, r7
 8011522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011526:	4770      	bx	lr

08011528 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8011528:	b480      	push	{r7}
 801152a:	b083      	sub	sp, #12
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
}
 8011530:	bf00      	nop
 8011532:	370c      	adds	r7, #12
 8011534:	46bd      	mov	sp, r7
 8011536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153a:	4770      	bx	lr

0801153c <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 801153c:	b480      	push	{r7}
 801153e:	b083      	sub	sp, #12
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
}
 8011544:	bf00      	nop
 8011546:	370c      	adds	r7, #12
 8011548:	46bd      	mov	sp, r7
 801154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154e:	4770      	bx	lr

08011550 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8011550:	b480      	push	{r7}
 8011552:	b083      	sub	sp, #12
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
 8011558:	4a04      	ldr	r2, [pc, #16]	; (801156c <_ZN14TestTerminatorD1Ev+0x1c>)
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	601a      	str	r2, [r3, #0]
{
}
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	4618      	mov	r0, r3
 8011562:	370c      	adds	r7, #12
 8011564:	46bd      	mov	sp, r7
 8011566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156a:	4770      	bx	lr
 801156c:	08024638 	.word	0x08024638

08011570 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8011578:	2300      	movs	r3, #0
 801157a:	60fb      	str	r3, [r7, #12]
 801157c:	f107 030c 	add.w	r3, r7, #12
 8011580:	4618      	mov	r0, r3
 8011582:	f7f6 f975 	bl	8007870 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8011586:	f107 030c 	add.w	r3, r7, #12
 801158a:	4618      	mov	r0, r3
 801158c:	f000 f82c 	bl	80115e8 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8011590:	f107 030c 	add.w	r3, r7, #12
 8011594:	4618      	mov	r0, r3
 8011596:	f000 f835 	bl	8011604 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 801159a:	bf00      	nop
 801159c:	3710      	adds	r7, #16
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
	...

080115a4 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
 80115ac:	4a05      	ldr	r2, [pc, #20]	; (80115c4 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	601a      	str	r2, [r3, #0]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7ff ffcb 	bl	8011550 <_ZN14TestTerminatorD1Ev>
{
}
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	4618      	mov	r0, r3
 80115be:	3708      	adds	r7, #8
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}
 80115c4:	08024624 	.word	0x08024624

080115c8 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b082      	sub	sp, #8
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
}
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f7ff ffe7 	bl	80115a4 <_ZN20NormalTestTerminatorD1Ev>
 80115d6:	2104      	movs	r1, #4
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f7f5 ff87 	bl	80074ec <_ZdlPvj>
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	4618      	mov	r0, r3
 80115e2:	3708      	adds	r7, #8
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}

080115e8 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 80115f0:	4b03      	ldr	r3, [pc, #12]	; (8011600 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	4798      	blx	r3
} // LCOV_EXCL_LINE
 80115f6:	bf00      	nop
 80115f8:	3708      	adds	r7, #8
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	2000009c 	.word	0x2000009c

08011604 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8011604:	b580      	push	{r7, lr}
 8011606:	b082      	sub	sp, #8
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
 801160c:	4a05      	ldr	r2, [pc, #20]	; (8011624 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	601a      	str	r2, [r3, #0]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	4618      	mov	r0, r3
 8011616:	f7ff ff9b 	bl	8011550 <_ZN14TestTerminatorD1Ev>
{
}
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	4618      	mov	r0, r3
 801161e:	3708      	adds	r7, #8
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}
 8011624:	08024610 	.word	0x08024610

08011628 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8011628:	b580      	push	{r7, lr}
 801162a:	b082      	sub	sp, #8
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
}
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f7ff ffe7 	bl	8011604 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8011636:	2104      	movs	r1, #4
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f7f5 ff57 	bl	80074ec <_ZdlPvj>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	4618      	mov	r0, r3
 8011642:	3708      	adds	r7, #8
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8011650:	f7fe fbaa 	bl	800fda8 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	4618      	mov	r0, r3
 8011658:	f7ff ff8a 	bl	8011570 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 801165c:	bf00      	nop
 801165e:	3708      	adds	r7, #8
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}

08011664 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8011664:	b580      	push	{r7, lr}
 8011666:	b082      	sub	sp, #8
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	4a05      	ldr	r2, [pc, #20]	; (8011684 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	601a      	str	r2, [r3, #0]
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	4618      	mov	r0, r3
 8011676:	f7ff ff95 	bl	80115a4 <_ZN20NormalTestTerminatorD1Ev>
{
}
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	4618      	mov	r0, r3
 801167e:	3708      	adds	r7, #8
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}
 8011684:	080245fc 	.word	0x080245fc

08011688 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 8011688:	b580      	push	{r7, lr}
 801168a:	b082      	sub	sp, #8
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
}
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f7ff ffe7 	bl	8011664 <_ZN22CrashingTestTerminatorD1Ev>
 8011696:	2104      	movs	r1, #4
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f7f5 ff27 	bl	80074ec <_ZdlPvj>
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4618      	mov	r0, r3
 80116a2:	3708      	adds	r7, #8
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}

080116a8 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b084      	sub	sp, #16
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2200      	movs	r2, #0
 80116b6:	601a      	str	r2, [r3, #0]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	2200      	movs	r2, #0
 80116bc:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d007      	beq.n	80116d4 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	3310      	adds	r3, #16
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	6838      	ldr	r0, [r7, #0]
 80116ce:	4798      	blx	r3
 80116d0:	4603      	mov	r3, r0
 80116d2:	e000      	b.n	80116d6 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 80116d4:	2300      	movs	r3, #0
 80116d6:	687a      	ldr	r2, [r7, #4]
 80116d8:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d02d      	beq.n	801173e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80116ea:	4293      	cmp	r3, r2
 80116ec:	d201      	bcs.n	80116f2 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 80116ee:	009b      	lsls	r3, r3, #2
 80116f0:	e001      	b.n	80116f6 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 80116f2:	f04f 33ff 	mov.w	r3, #4294967295
 80116f6:	f240 3237 	movw	r2, #823	; 0x337
 80116fa:	4914      	ldr	r1, [pc, #80]	; (801174c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7f5 ff05 	bl	800750c <_ZnajPKci>
 8011702:	4602      	mov	r2, r0
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801170c:	2300      	movs	r3, #0
 801170e:	60bb      	str	r3, [r7, #8]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	68ba      	ldr	r2, [r7, #8]
 8011716:	429a      	cmp	r2, r3
 8011718:	d212      	bcs.n	8011740 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681a      	ldr	r2, [r3, #0]
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	009b      	lsls	r3, r3, #2
 8011722:	4413      	add	r3, r2
 8011724:	68fa      	ldr	r2, [r7, #12]
 8011726:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	330c      	adds	r3, #12
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	68f8      	ldr	r0, [r7, #12]
 8011732:	4798      	blx	r3
 8011734:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	3301      	adds	r3, #1
 801173a:	60bb      	str	r3, [r7, #8]
 801173c:	e7e8      	b.n	8011710 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 801173e:	bf00      	nop
    }
}
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	4618      	mov	r0, r3
 8011744:	3710      	adds	r7, #16
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
 801174a:	bf00      	nop
 801174c:	080218c0 	.word	0x080218c0

08011750 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 8011750:	b580      	push	{r7, lr}
 8011752:	b082      	sub	sp, #8
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d004      	beq.n	801176a <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	4618      	mov	r0, r3
 8011766:	f7f5 fee5 	bl	8007534 <_ZdaPv>
}
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	4618      	mov	r0, r3
 801176e:	3708      	adds	r7, #8
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}

08011774 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8011774:	b480      	push	{r7}
 8011776:	b087      	sub	sp, #28
 8011778:	af00      	add	r7, sp, #0
 801177a:	60f8      	str	r0, [r7, #12]
 801177c:	60b9      	str	r1, [r7, #8]
 801177e:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	681a      	ldr	r2, [r3, #0]
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	009b      	lsls	r3, r3, #2
 8011788:	4413      	add	r3, r2
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	681a      	ldr	r2, [r3, #0]
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	009b      	lsls	r3, r3, #2
 8011796:	4413      	add	r3, r2
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	681a      	ldr	r2, [r3, #0]
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	009b      	lsls	r3, r3, #2
 80117a4:	4413      	add	r3, r2
 80117a6:	697a      	ldr	r2, [r7, #20]
 80117a8:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	681a      	ldr	r2, [r3, #0]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	009b      	lsls	r3, r3, #2
 80117b2:	4413      	add	r3, r2
 80117b4:	693a      	ldr	r2, [r7, #16]
 80117b6:	601a      	str	r2, [r3, #0]
}
 80117b8:	bf00      	nop
 80117ba:	371c      	adds	r7, #28
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr

080117c4 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d028      	beq.n	8011828 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 80117d6:	4b17      	ldr	r3, [pc, #92]	; (8011834 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	6838      	ldr	r0, [r7, #0]
 80117dc:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	685b      	ldr	r3, [r3, #4]
 80117e2:	3b01      	subs	r3, #1
 80117e4:	60fb      	str	r3, [r7, #12]
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d019      	beq.n	8011820 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d01b      	beq.n	801182c <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 80117f4:	4b10      	ldr	r3, [pc, #64]	; (8011838 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	4798      	blx	r3
 80117fa:	4603      	mov	r3, r0
 80117fc:	461a      	mov	r2, r3
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	3301      	adds	r3, #1
 8011802:	fbb2 f1f3 	udiv	r1, r2, r3
 8011806:	fb03 f301 	mul.w	r3, r3, r1
 801180a:	1ad3      	subs	r3, r2, r3
 801180c:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 801180e:	68ba      	ldr	r2, [r7, #8]
 8011810:	68f9      	ldr	r1, [r7, #12]
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f7ff ffae 	bl	8011774 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	3b01      	subs	r3, #1
 801181c:	60fb      	str	r3, [r7, #12]
 801181e:	e7e2      	b.n	80117e6 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f000 f834 	bl	801188e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8011826:	e002      	b.n	801182e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8011828:	bf00      	nop
 801182a:	e000      	b.n	801182e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 801182c:	bf00      	nop
}
 801182e:	3710      	adds	r7, #16
 8011830:	46bd      	mov	sp, r7
 8011832:	bd80      	pop	{r7, pc}
 8011834:	200000dc 	.word	0x200000dc
 8011838:	200000e0 	.word	0x200000e0

0801183c <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b086      	sub	sp, #24
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d01c      	beq.n	8011886 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	085b      	lsrs	r3, r3, #1
 8011852:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 8011854:	2300      	movs	r3, #0
 8011856:	617b      	str	r3, [r7, #20]
 8011858:	697a      	ldr	r2, [r7, #20]
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	429a      	cmp	r2, r3
 801185e:	d20e      	bcs.n	801187e <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	685a      	ldr	r2, [r3, #4]
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	1ad3      	subs	r3, r2, r3
 8011868:	3b01      	subs	r3, #1
 801186a:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 801186c:	68fa      	ldr	r2, [r7, #12]
 801186e:	6979      	ldr	r1, [r7, #20]
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f7ff ff7f 	bl	8011774 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	3301      	adds	r3, #1
 801187a:	617b      	str	r3, [r7, #20]
 801187c:	e7ec      	b.n	8011858 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f000 f805 	bl	801188e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8011884:	e000      	b.n	8011888 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 8011886:	bf00      	nop
}
 8011888:	3718      	adds	r7, #24
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}

0801188e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 801188e:	b580      	push	{r7, lr}
 8011890:	b084      	sub	sp, #16
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8011896:	2300      	movs	r3, #0
 8011898:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801189a:	2300      	movs	r3, #0
 801189c:	60bb      	str	r3, [r7, #8]
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	68ba      	ldr	r2, [r7, #8]
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d221      	bcs.n	80118ec <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681a      	ldr	r2, [r3, #0]
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6859      	ldr	r1, [r3, #4]
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	1acb      	subs	r3, r1, r3
 80118b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80118b8:	3b01      	subs	r3, #1
 80118ba:	009b      	lsls	r3, r3, #2
 80118bc:	4413      	add	r3, r2
 80118be:	6818      	ldr	r0, [r3, #0]
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681a      	ldr	r2, [r3, #0]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6859      	ldr	r1, [r3, #4]
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	1acb      	subs	r3, r1, r3
 80118cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80118d0:	3b01      	subs	r3, #1
 80118d2:	009b      	lsls	r3, r3, #2
 80118d4:	4413      	add	r3, r2
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	3308      	adds	r3, #8
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	68f9      	ldr	r1, [r7, #12]
 80118e0:	4798      	blx	r3
 80118e2:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	3301      	adds	r3, #1
 80118e8:	60bb      	str	r3, [r7, #8]
 80118ea:	e7d8      	b.n	801189e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 80118ec:	bf00      	nop
 80118ee:	3710      	adds	r7, #16
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
    return get(0);
 80118fc:	2100      	movs	r1, #0
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f000 f805 	bl	801190e <_ZNK22UtestShellPointerArray3getEj>
 8011904:	4603      	mov	r3, r0
}
 8011906:	4618      	mov	r0, r3
 8011908:	3708      	adds	r7, #8
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}

0801190e <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 801190e:	b480      	push	{r7}
 8011910:	b083      	sub	sp, #12
 8011912:	af00      	add	r7, sp, #0
 8011914:	6078      	str	r0, [r7, #4]
 8011916:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	683a      	ldr	r2, [r7, #0]
 801191e:	429a      	cmp	r2, r3
 8011920:	d301      	bcc.n	8011926 <_ZNK22UtestShellPointerArray3getEj+0x18>
 8011922:	2300      	movs	r3, #0
 8011924:	e005      	b.n	8011932 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	009b      	lsls	r3, r3, #2
 801192e:	4413      	add	r3, r2
 8011930:	681b      	ldr	r3, [r3, #0]
}
 8011932:	4618      	mov	r0, r3
 8011934:	370c      	adds	r7, #12
 8011936:	46bd      	mov	sp, r7
 8011938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193c:	4770      	bx	lr
	...

08011940 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8011940:	b580      	push	{r7, lr}
 8011942:	b084      	sub	sp, #16
 8011944:	af00      	add	r7, sp, #0
 8011946:	60f8      	str	r0, [r7, #12]
 8011948:	60b9      	str	r1, [r7, #8]
 801194a:	607a      	str	r2, [r7, #4]
 801194c:	603b      	str	r3, [r7, #0]
 801194e:	4a10      	ldr	r2, [pc, #64]	; (8011990 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8011954:	6879      	ldr	r1, [r7, #4]
 8011956:	68b8      	ldr	r0, [r7, #8]
 8011958:	f7fe fc27 	bl	80101aa <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 801195c:	6839      	ldr	r1, [r7, #0]
 801195e:	68b8      	ldr	r0, [r7, #8]
 8011960:	f7fe fc31 	bl	80101c6 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8011964:	69b9      	ldr	r1, [r7, #24]
 8011966:	68b8      	ldr	r0, [r7, #8]
 8011968:	f7fe fc03 	bl	8010172 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 801196c:	69f9      	ldr	r1, [r7, #28]
 801196e:	68b8      	ldr	r0, [r7, #8]
 8011970:	f7fe fc0d 	bl	801018e <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8011974:	f7fd fc20 	bl	800f1b8 <_ZN12TestRegistry18getCurrentRegistryEv>
 8011978:	4603      	mov	r3, r0
 801197a:	681a      	ldr	r2, [r3, #0]
 801197c:	3208      	adds	r2, #8
 801197e:	6812      	ldr	r2, [r2, #0]
 8011980:	68b9      	ldr	r1, [r7, #8]
 8011982:	4618      	mov	r0, r3
 8011984:	4790      	blx	r2
}
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	4618      	mov	r0, r3
 801198a:	3710      	adds	r7, #16
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}
 8011990:	08024540 	.word	0x08024540

08011994 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8011994:	b480      	push	{r7}
 8011996:	b083      	sub	sp, #12
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	4a04      	ldr	r2, [pc, #16]	; (80119b0 <_ZN13TestInstallerD1Ev+0x1c>)
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	601a      	str	r2, [r3, #0]
{
}
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	4618      	mov	r0, r3
 80119a6:	370c      	adds	r7, #12
 80119a8:	46bd      	mov	sp, r7
 80119aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ae:	4770      	bx	lr
 80119b0:	08024540 	.word	0x08024540

080119b4 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
}
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f7ff ffe9 	bl	8011994 <_ZN13TestInstallerD1Ev>
 80119c2:	2104      	movs	r1, #4
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f7f5 fd91 	bl	80074ec <_ZdlPvj>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	4618      	mov	r0, r3
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d10a      	bne.n	80119fa <_Z41__static_initialization_and_destruction_0ii+0x26>
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119ea:	4293      	cmp	r3, r2
 80119ec:	d105      	bne.n	80119fa <_Z41__static_initialization_and_destruction_0ii+0x26>
 80119ee:	4805      	ldr	r0, [pc, #20]	; (8011a04 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80119f0:	f7ff fe38 	bl	8011664 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 80119f4:	4804      	ldr	r0, [pc, #16]	; (8011a08 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80119f6:	f7ff fdd5 	bl	80115a4 <_ZN20NormalTestTerminatorD1Ev>
}
 80119fa:	bf00      	nop
 80119fc:	3708      	adds	r7, #8
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}
 8011a02:	bf00      	nop
 8011a04:	2000008c 	.word	0x2000008c
 8011a08:	20000088 	.word	0x20000088

08011a0c <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	af00      	add	r7, sp, #0
 8011a10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011a14:	2001      	movs	r0, #1
 8011a16:	f7ff ffdd 	bl	80119d4 <_Z41__static_initialization_and_destruction_0ii>
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	af00      	add	r7, sp, #0
 8011a20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011a24:	2000      	movs	r0, #0
 8011a26:	f7ff ffd5 	bl	80119d4 <_Z41__static_initialization_and_destruction_0ii>
 8011a2a:	bd80      	pop	{r7, pc}

08011a2c <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8011a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a2e:	b083      	sub	sp, #12
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	ed87 0b00 	vstr	d0, [r7]
 8011a36:	683c      	ldr	r4, [r7, #0]
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8011a3e:	2301      	movs	r3, #1
 8011a40:	461e      	mov	r6, r3
 8011a42:	f04f 32ff 	mov.w	r2, #4294967295
 8011a46:	4b10      	ldr	r3, [pc, #64]	; (8011a88 <_ZSt5isinfd+0x5c>)
 8011a48:	4620      	mov	r0, r4
 8011a4a:	4629      	mov	r1, r5
 8011a4c:	f7ee fe9c 	bl	8000788 <__aeabi_dcmpun>
 8011a50:	4603      	mov	r3, r0
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d10b      	bne.n	8011a6e <_ZSt5isinfd+0x42>
 8011a56:	f04f 32ff 	mov.w	r2, #4294967295
 8011a5a:	4b0b      	ldr	r3, [pc, #44]	; (8011a88 <_ZSt5isinfd+0x5c>)
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	4629      	mov	r1, r5
 8011a60:	f7ee fe74 	bl	800074c <__aeabi_dcmple>
 8011a64:	4603      	mov	r3, r0
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d101      	bne.n	8011a6e <_ZSt5isinfd+0x42>
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	461e      	mov	r6, r3
 8011a6e:	b2f3      	uxtb	r3, r6
 8011a70:	f083 0301 	eor.w	r3, r3, #1
 8011a74:	b2db      	uxtb	r3, r3
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	bf14      	ite	ne
 8011a7a:	2301      	movne	r3, #1
 8011a7c:	2300      	moveq	r3, #0
 8011a7e:	b2db      	uxtb	r3, r3
 8011a80:	4618      	mov	r0, r3
 8011a82:	370c      	adds	r7, #12
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a88:	7fefffff 	.word	0x7fefffff

08011a8c <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8011a8c:	b590      	push	{r4, r7, lr}
 8011a8e:	b083      	sub	sp, #12
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	ed87 0b00 	vstr	d0, [r7]
 8011a96:	2301      	movs	r3, #1
 8011a98:	461c      	mov	r4, r3
 8011a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011aa2:	f7ee fe71 	bl	8000788 <__aeabi_dcmpun>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d101      	bne.n	8011ab0 <_ZSt5isnand+0x24>
 8011aac:	2300      	movs	r3, #0
 8011aae:	461c      	mov	r4, r3
 8011ab0:	b2e3      	uxtb	r3, r4
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	bf14      	ite	ne
 8011ab6:	2301      	movne	r3, #1
 8011ab8:	2300      	moveq	r3, #0
 8011aba:	b2db      	uxtb	r3, r3
 8011abc:	4618      	mov	r0, r3
 8011abe:	370c      	adds	r7, #12
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd90      	pop	{r4, r7, pc}

08011ac4 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8011ac4:	b590      	push	{r4, r7, lr}
 8011ac6:	b095      	sub	sp, #84	; 0x54
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	60f8      	str	r0, [r7, #12]
 8011acc:	60b9      	str	r1, [r7, #8]
 8011ace:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	3334      	adds	r3, #52	; 0x34
 8011ad6:	681c      	ldr	r4, [r3, #0]
 8011ad8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011adc:	490f      	ldr	r1, [pc, #60]	; (8011b1c <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7f8 f8b3 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8011ae4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011ae8:	f107 0314 	add.w	r3, r7, #20
 8011aec:	68f9      	ldr	r1, [r7, #12]
 8011aee:	4618      	mov	r0, r3
 8011af0:	f7f9 ff0a 	bl	800b908 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8011af4:	f107 0314 	add.w	r3, r7, #20
 8011af8:	4619      	mov	r1, r3
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	47a0      	blx	r4
 8011afe:	f107 0314 	add.w	r3, r7, #20
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7f9 ffc0 	bl	800ba88 <_ZN11TestFailureD1Ev>
 8011b08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7f8 fc54 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8011b12:	bf00      	nop
 8011b14:	3754      	adds	r7, #84	; 0x54
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd90      	pop	{r4, r7, pc}
 8011b1a:	bf00      	nop
 8011b1c:	08021a48 	.word	0x08021a48

08011b20 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8011b20:	b480      	push	{r7}
 8011b22:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8011b24:	2301      	movs	r3, #1
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2e:	4770      	bx	lr

08011b30 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b082      	sub	sp, #8
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8011b3a:	4b13      	ldr	r3, [pc, #76]	; (8011b88 <PlatformSpecificSetJmpImplementation+0x58>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	225c      	movs	r2, #92	; 0x5c
 8011b40:	fb02 f303 	mul.w	r3, r2, r3
 8011b44:	4a11      	ldr	r2, [pc, #68]	; (8011b8c <PlatformSpecificSetJmpImplementation+0x5c>)
 8011b46:	4413      	add	r3, r2
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7ee fb69 	bl	8000220 <setjmp>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	bf0c      	ite	eq
 8011b54:	2301      	moveq	r3, #1
 8011b56:	2300      	movne	r3, #0
 8011b58:	b2db      	uxtb	r3, r3
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d00e      	beq.n	8011b7c <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 8011b5e:	4b0a      	ldr	r3, [pc, #40]	; (8011b88 <PlatformSpecificSetJmpImplementation+0x58>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	3301      	adds	r3, #1
 8011b64:	4a08      	ldr	r2, [pc, #32]	; (8011b88 <PlatformSpecificSetJmpImplementation+0x58>)
 8011b66:	6013      	str	r3, [r2, #0]
        function(data);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	6838      	ldr	r0, [r7, #0]
 8011b6c:	4798      	blx	r3
        jmp_buf_index--;
 8011b6e:	4b06      	ldr	r3, [pc, #24]	; (8011b88 <PlatformSpecificSetJmpImplementation+0x58>)
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	3b01      	subs	r3, #1
 8011b74:	4a04      	ldr	r2, [pc, #16]	; (8011b88 <PlatformSpecificSetJmpImplementation+0x58>)
 8011b76:	6013      	str	r3, [r2, #0]
        return 1;
 8011b78:	2301      	movs	r3, #1
 8011b7a:	e000      	b.n	8011b7e <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 8011b7c:	2300      	movs	r3, #0
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3708      	adds	r7, #8
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop
 8011b88:	20000c28 	.word	0x20000c28
 8011b8c:	20000890 	.word	0x20000890

08011b90 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8011b94:	4b07      	ldr	r3, [pc, #28]	; (8011bb4 <PlatformSpecificLongJmpImplementation+0x24>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	3b01      	subs	r3, #1
 8011b9a:	4a06      	ldr	r2, [pc, #24]	; (8011bb4 <PlatformSpecificLongJmpImplementation+0x24>)
 8011b9c:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 8011b9e:	4b05      	ldr	r3, [pc, #20]	; (8011bb4 <PlatformSpecificLongJmpImplementation+0x24>)
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	225c      	movs	r2, #92	; 0x5c
 8011ba4:	fb02 f303 	mul.w	r3, r2, r3
 8011ba8:	4a03      	ldr	r2, [pc, #12]	; (8011bb8 <PlatformSpecificLongJmpImplementation+0x28>)
 8011baa:	4413      	add	r3, r2
 8011bac:	2101      	movs	r1, #1
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7ee fb3c 	bl	800022c <longjmp>
 8011bb4:	20000c28 	.word	0x20000c28
 8011bb8:	20000890 	.word	0x20000890

08011bbc <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8011bc0:	2300      	movs	r3, #0
#endif
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr

08011bcc <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	f00c fd0e 	bl	801e5f4 <time>
 8011bd8:	4602      	mov	r2, r0
 8011bda:	460b      	mov	r3, r1
 8011bdc:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8011be0:	463b      	mov	r3, r7
 8011be2:	4618      	mov	r0, r3
 8011be4:	f00b fb74 	bl	801d2d0 <localtime>
 8011be8:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	4a04      	ldr	r2, [pc, #16]	; (8011c00 <TimeStringImplementation+0x34>)
 8011bee:	2150      	movs	r1, #80	; 0x50
 8011bf0:	4804      	ldr	r0, [pc, #16]	; (8011c04 <TimeStringImplementation+0x38>)
 8011bf2:	f00c fc55 	bl	801e4a0 <strftime>
    return dateTime;
 8011bf6:	4b03      	ldr	r3, [pc, #12]	; (8011c04 <TimeStringImplementation+0x38>)
}
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3710      	adds	r7, #16
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	08021a84 	.word	0x08021a84
 8011c04:	20000c2c 	.word	0x20000c2c

08011c08 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8011c12:	6839      	ldr	r1, [r7, #0]
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f00b f991 	bl	801cf3c <fopen>
 8011c1a:	4603      	mov	r3, r0
#endif
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3708      	adds	r7, #8
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8011c2e:	6839      	ldr	r1, [r7, #0]
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f00b f9f1 	bl	801d018 <fputs>
}
 8011c36:	bf00      	nop
 8011c38:	3708      	adds	r7, #8
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b082      	sub	sp, #8
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f00a ff72 	bl	801cb30 <fclose>
}
 8011c4c:	bf00      	nop
 8011c4e:	3708      	adds	r7, #8
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	af00      	add	r7, sp, #0
  fflush(stdout);
 8011c58:	4b03      	ldr	r3, [pc, #12]	; (8011c68 <PlatformSpecificFlushImplementation+0x14>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	689b      	ldr	r3, [r3, #8]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f00b f830 	bl	801ccc4 <fflush>
}
 8011c64:	bf00      	nop
 8011c66:	bd80      	pop	{r7, pc}
 8011c68:	20000104 	.word	0x20000104

08011c6c <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b082      	sub	sp, #8
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 8011c76:	ed97 0b00 	vldr	d0, [r7]
 8011c7a:	f7ff ff07 	bl	8011a8c <_ZSt5isnand>
 8011c7e:	4603      	mov	r3, r0
}
 8011c80:	4618      	mov	r0, r3
 8011c82:	3708      	adds	r7, #8
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 8011c92:	ed97 0b00 	vldr	d0, [r7]
 8011c96:	f7ff fec9 	bl	8011a2c <_ZSt5isinfd>
 8011c9a:	4603      	mov	r3, r0
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3708      	adds	r7, #8
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8011ca8:	2300      	movs	r3, #0
#endif

}
 8011caa:	4618      	mov	r0, r3
 8011cac:	46bd      	mov	sp, r7
 8011cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb2:	4770      	bx	lr

08011cb4 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8011cb4:	b480      	push	{r7}
 8011cb6:	b083      	sub	sp, #12
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
}
 8011cbc:	bf00      	nop
 8011cbe:	370c      	adds	r7, #12
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc6:	4770      	bx	lr

08011cc8 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b083      	sub	sp, #12
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
}
 8011cd0:	bf00      	nop
 8011cd2:	370c      	adds	r7, #12
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cda:	4770      	bx	lr

08011cdc <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8011cdc:	b480      	push	{r7}
 8011cde:	b083      	sub	sp, #12
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
}
 8011ce4:	bf00      	nop
 8011ce6:	370c      	adds	r7, #12
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr

08011cf0 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b084      	sub	sp, #16
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	60f8      	str	r0, [r7, #12]
 8011cf8:	60b9      	str	r1, [r7, #8]
 8011cfa:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8011cfc:	4a25      	ldr	r2, [pc, #148]	; (8011d94 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	601a      	str	r2, [r3, #0]
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	68ba      	ldr	r2, [r7, #8]
 8011d06:	605a      	str	r2, [r3, #4]
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	687a      	ldr	r2, [r7, #4]
 8011d0c:	609a      	str	r2, [r3, #8]
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2200      	movs	r2, #0
 8011d12:	731a      	strb	r2, [r3, #12]
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	2200      	movs	r2, #0
 8011d18:	735a      	strb	r2, [r3, #13]
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	739a      	strb	r2, [r3, #14]
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2200      	movs	r2, #0
 8011d24:	73da      	strb	r2, [r3, #15]
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	2200      	movs	r2, #0
 8011d2a:	741a      	strb	r2, [r3, #16]
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	2200      	movs	r2, #0
 8011d30:	745a      	strb	r2, [r3, #17]
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	2200      	movs	r2, #0
 8011d36:	749a      	strb	r2, [r3, #18]
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	74da      	strb	r2, [r3, #19]
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2200      	movs	r2, #0
 8011d42:	751a      	strb	r2, [r3, #20]
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	2200      	movs	r2, #0
 8011d48:	755a      	strb	r2, [r3, #21]
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	759a      	strb	r2, [r3, #22]
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	2200      	movs	r2, #0
 8011d54:	75da      	strb	r2, [r3, #23]
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	761a      	strb	r2, [r3, #24]
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	2201      	movs	r2, #1
 8011d60:	61da      	str	r2, [r3, #28]
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	2200      	movs	r2, #0
 8011d66:	621a      	str	r2, [r3, #32]
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	625a      	str	r2, [r3, #36]	; 0x24
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	2200      	movs	r2, #0
 8011d72:	629a      	str	r2, [r3, #40]	; 0x28
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2200      	movs	r2, #0
 8011d78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	3330      	adds	r3, #48	; 0x30
 8011d80:	4905      	ldr	r1, [pc, #20]	; (8011d98 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7f7 ff61 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
{
}
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3710      	adds	r7, #16
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
 8011d92:	bf00      	nop
 8011d94:	0802466c 	.word	0x0802466c
 8011d98:	08021a98 	.word	0x08021a98

08011d9c <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b082      	sub	sp, #8
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7f8 fb07 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	4618      	mov	r0, r3
 8011db0:	3708      	adds	r7, #8
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
	...

08011db8 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8011db8:	b590      	push	{r4, r7, lr}
 8011dba:	b085      	sub	sp, #20
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	4a20      	ldr	r2, [pc, #128]	; (8011e44 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d015      	beq.n	8011dfa <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dd2:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f00a fda2 	bl	801c922 <_ZNK10TestFilter7getNextEv>
 8011dde:	4602      	mov	r2, r0
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8011de4:	68fc      	ldr	r4, [r7, #12]
 8011de6:	2c00      	cmp	r4, #0
 8011de8:	d0ed      	beq.n	8011dc6 <_ZN20CommandLineArgumentsD1Ev+0xe>
 8011dea:	4620      	mov	r0, r4
 8011dec:	f7ff ffd6 	bl	8011d9c <_ZN10TestFilterD1Ev>
 8011df0:	2110      	movs	r1, #16
 8011df2:	4620      	mov	r0, r4
 8011df4:	f7f5 fb7a 	bl	80074ec <_ZdlPvj>
    while(groupFilters_) {
 8011df8:	e7e5      	b.n	8011dc6 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d015      	beq.n	8011e2e <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e06:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f00a fd88 	bl	801c922 <_ZNK10TestFilter7getNextEv>
 8011e12:	4602      	mov	r2, r0
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8011e18:	68bc      	ldr	r4, [r7, #8]
 8011e1a:	2c00      	cmp	r4, #0
 8011e1c:	d0ed      	beq.n	8011dfa <_ZN20CommandLineArgumentsD1Ev+0x42>
 8011e1e:	4620      	mov	r0, r4
 8011e20:	f7ff ffbc 	bl	8011d9c <_ZN10TestFilterD1Ev>
 8011e24:	2110      	movs	r1, #16
 8011e26:	4620      	mov	r0, r4
 8011e28:	f7f5 fb60 	bl	80074ec <_ZdlPvj>
    while(nameFilters_) {
 8011e2c:	e7e5      	b.n	8011dfa <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	3330      	adds	r3, #48	; 0x30
 8011e32:	4618      	mov	r0, r3
 8011e34:	f7f8 fac1 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    }
}
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3714      	adds	r7, #20
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd90      	pop	{r4, r7, pc}
 8011e42:	bf00      	nop
 8011e44:	0802466c 	.word	0x0802466c

08011e48 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
}
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f7ff ffb1 	bl	8011db8 <_ZN20CommandLineArgumentsD1Ev>
 8011e56:	2138      	movs	r1, #56	; 0x38
 8011e58:	6878      	ldr	r0, [r7, #4]
 8011e5a:	f7f5 fb47 	bl	80074ec <_ZdlPvj>
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	4618      	mov	r0, r3
 8011e62:	3708      	adds	r7, #8
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd80      	pop	{r7, pc}

08011e68 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 8011e68:	b5b0      	push	{r4, r5, r7, lr}
 8011e6a:	b0be      	sub	sp, #248	; 0xf8
 8011e6c:	af02      	add	r7, sp, #8
 8011e6e:	6078      	str	r0, [r7, #4]
 8011e70:	6039      	str	r1, [r7, #0]
 8011e72:	2400      	movs	r4, #0
    bool correctParameters = true;
 8011e74:	2301      	movs	r3, #1
 8011e76:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	613b      	str	r3, [r7, #16]
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	685a      	ldr	r2, [r3, #4]
 8011e82:	693b      	ldr	r3, [r7, #16]
 8011e84:	429a      	cmp	r2, r3
 8011e86:	f340 83a4 	ble.w	80125d2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	689a      	ldr	r2, [r3, #8]
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	009b      	lsls	r3, r3, #2
 8011e92:	4413      	add	r3, r2
 8011e94:	681a      	ldr	r2, [r3, #0]
 8011e96:	f107 0308 	add.w	r3, r7, #8
 8011e9a:	4611      	mov	r1, r2
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f7f7 fed4 	bl	8009c4a <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8011ea2:	f107 0314 	add.w	r3, r7, #20
 8011ea6:	49c8      	ldr	r1, [pc, #800]	; (80121c8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f7f7 fece 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8011eae:	f107 0214 	add.w	r2, r7, #20
 8011eb2:	f107 0308 	add.w	r3, r7, #8
 8011eb6:	4611      	mov	r1, r2
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7f8 fa8a 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	461d      	mov	r5, r3
 8011ec2:	f107 0314 	add.w	r3, r7, #20
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f7f8 fa77 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8011ecc:	2d00      	cmp	r5, #0
 8011ece:	d006      	beq.n	8011ede <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2201      	movs	r2, #1
 8011ed4:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8011edc:	e366      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8011ede:	f107 031c 	add.w	r3, r7, #28
 8011ee2:	49ba      	ldr	r1, [pc, #744]	; (80121cc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7f7 feb0 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8011eea:	f107 021c 	add.w	r2, r7, #28
 8011eee:	f107 0308 	add.w	r3, r7, #8
 8011ef2:	4611      	mov	r1, r2
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7f8 fa6c 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 8011efa:	4603      	mov	r3, r0
 8011efc:	461d      	mov	r5, r3
 8011efe:	f107 031c 	add.w	r3, r7, #28
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7f8 fa59 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8011f08:	2d00      	cmp	r5, #0
 8011f0a:	d003      	beq.n	8011f14 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2201      	movs	r2, #1
 8011f10:	735a      	strb	r2, [r3, #13]
 8011f12:	e34b      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8011f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011f18:	49ad      	ldr	r1, [pc, #692]	; (80121d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7f7 fe95 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8011f20:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011f24:	f107 0308 	add.w	r3, r7, #8
 8011f28:	4611      	mov	r1, r2
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7f8 fa51 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 8011f30:	4603      	mov	r3, r0
 8011f32:	461d      	mov	r5, r3
 8011f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7f8 fa3e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8011f3e:	2d00      	cmp	r5, #0
 8011f40:	d003      	beq.n	8011f4a <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2201      	movs	r2, #1
 8011f46:	739a      	strb	r2, [r3, #14]
 8011f48:	e330      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 8011f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011f4e:	49a1      	ldr	r1, [pc, #644]	; (80121d4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7f7 fe7a 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8011f56:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011f5a:	f107 0308 	add.w	r3, r7, #8
 8011f5e:	4611      	mov	r1, r2
 8011f60:	4618      	mov	r0, r3
 8011f62:	f7f8 fa36 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 8011f66:	4603      	mov	r3, r0
 8011f68:	461d      	mov	r5, r3
 8011f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7f8 fa23 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8011f74:	2d00      	cmp	r5, #0
 8011f76:	d003      	beq.n	8011f80 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2201      	movs	r2, #1
 8011f7c:	73da      	strb	r2, [r3, #15]
 8011f7e:	e315      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 8011f80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011f84:	4994      	ldr	r1, [pc, #592]	; (80121d8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7f7 fe5f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8011f8c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011f90:	f107 0308 	add.w	r3, r7, #8
 8011f94:	4611      	mov	r1, r2
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7f8 fa1b 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	461d      	mov	r5, r3
 8011fa0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7f8 fa08 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8011faa:	2d00      	cmp	r5, #0
 8011fac:	d003      	beq.n	8011fb6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2201      	movs	r2, #1
 8011fb2:	741a      	strb	r2, [r3, #16]
 8011fb4:	e2fa      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8011fb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011fba:	4988      	ldr	r1, [pc, #544]	; (80121dc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f7f7 fe44 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8011fc2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8011fc6:	f107 0308 	add.w	r3, r7, #8
 8011fca:	4611      	mov	r1, r2
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7f8 fa00 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	461d      	mov	r5, r3
 8011fd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f7f8 f9ed 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8011fe0:	2d00      	cmp	r5, #0
 8011fe2:	d003      	beq.n	8011fec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2201      	movs	r2, #1
 8011fe8:	755a      	strb	r2, [r3, #21]
 8011fea:	e2df      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8011fec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011ff0:	497b      	ldr	r1, [pc, #492]	; (80121e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7f7 fe29 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8011ff8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011ffc:	f107 0308 	add.w	r3, r7, #8
 8012000:	4611      	mov	r1, r2
 8012002:	4618      	mov	r0, r3
 8012004:	f7f8 f9e5 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 8012008:	4603      	mov	r3, r0
 801200a:	461d      	mov	r5, r3
 801200c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012010:	4618      	mov	r0, r3
 8012012:	f7f8 f9d2 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012016:	2d00      	cmp	r5, #0
 8012018:	d003      	beq.n	8012022 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2201      	movs	r2, #1
 801201e:	745a      	strb	r2, [r3, #17]
 8012020:	e2c4      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8012022:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012026:	496f      	ldr	r1, [pc, #444]	; (80121e4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8012028:	4618      	mov	r0, r3
 801202a:	f7f7 fe0e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801202e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012032:	f107 0308 	add.w	r3, r7, #8
 8012036:	4611      	mov	r1, r2
 8012038:	4618      	mov	r0, r3
 801203a:	f7f8 f9ca 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801203e:	4603      	mov	r3, r0
 8012040:	461d      	mov	r5, r3
 8012042:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012046:	4618      	mov	r0, r3
 8012048:	f7f8 f9b7 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801204c:	2d00      	cmp	r5, #0
 801204e:	d003      	beq.n	8012058 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2201      	movs	r2, #1
 8012054:	749a      	strb	r2, [r3, #18]
 8012056:	e2a9      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 8012058:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801205c:	4962      	ldr	r1, [pc, #392]	; (80121e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 801205e:	4618      	mov	r0, r3
 8012060:	f7f7 fdf3 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012064:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8012068:	f107 0308 	add.w	r3, r7, #8
 801206c:	4611      	mov	r1, r2
 801206e:	4618      	mov	r0, r3
 8012070:	f7f8 f9af 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 8012074:	4603      	mov	r3, r0
 8012076:	461d      	mov	r5, r3
 8012078:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801207c:	4618      	mov	r0, r3
 801207e:	f7f8 f99c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012082:	2d00      	cmp	r5, #0
 8012084:	d003      	beq.n	801208e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2201      	movs	r2, #1
 801208a:	74da      	strb	r2, [r3, #19]
 801208c:	e28e      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 801208e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012092:	4956      	ldr	r1, [pc, #344]	; (80121ec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 8012094:	4618      	mov	r0, r3
 8012096:	f7f7 fdd8 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801209a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801209e:	f107 0308 	add.w	r3, r7, #8
 80120a2:	4611      	mov	r1, r2
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7f8 f994 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 80120aa:	4603      	mov	r3, r0
 80120ac:	461d      	mov	r5, r3
 80120ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7f8 f981 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80120b8:	2d00      	cmp	r5, #0
 80120ba:	d003      	beq.n	80120c4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2201      	movs	r2, #1
 80120c0:	751a      	strb	r2, [r3, #20]
 80120c2:	e273      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 80120c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80120c8:	4949      	ldr	r1, [pc, #292]	; (80121f0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7f7 fdbd 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80120d0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80120d4:	f107 0308 	add.w	r3, r7, #8
 80120d8:	4611      	mov	r1, r2
 80120da:	4618      	mov	r0, r3
 80120dc:	f7f8 f979 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 80120e0:	4603      	mov	r3, r0
 80120e2:	461d      	mov	r5, r3
 80120e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80120e8:	4618      	mov	r0, r3
 80120ea:	f7f8 f966 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80120ee:	2d00      	cmp	r5, #0
 80120f0:	d003      	beq.n	80120fa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2201      	movs	r2, #1
 80120f6:	759a      	strb	r2, [r3, #22]
 80120f8:	e258      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 80120fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80120fe:	493d      	ldr	r1, [pc, #244]	; (80121f4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8012100:	4618      	mov	r0, r3
 8012102:	f7f7 fda2 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012106:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801210a:	f107 0308 	add.w	r3, r7, #8
 801210e:	4611      	mov	r1, r2
 8012110:	4618      	mov	r0, r3
 8012112:	f7f7 fe5e 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 8012116:	4603      	mov	r3, r0
 8012118:	461d      	mov	r5, r3
 801211a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801211e:	4618      	mov	r0, r3
 8012120:	f7f8 f94b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012124:	2d00      	cmp	r5, #0
 8012126:	d009      	beq.n	801213c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	6859      	ldr	r1, [r3, #4]
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	689a      	ldr	r2, [r3, #8]
 8012130:	f107 0310 	add.w	r3, r7, #16
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	f000 fb33 	bl	80127a0 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 801213a:	e237      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 801213c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8012140:	492d      	ldr	r1, [pc, #180]	; (80121f8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8012142:	4618      	mov	r0, r3
 8012144:	f7f7 fd81 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012148:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801214c:	f107 0308 	add.w	r3, r7, #8
 8012150:	4611      	mov	r1, r2
 8012152:	4618      	mov	r0, r3
 8012154:	f7f7 fe3d 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 8012158:	4603      	mov	r3, r0
 801215a:	461d      	mov	r5, r3
 801215c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8012160:	4618      	mov	r0, r3
 8012162:	f7f8 f92a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012166:	2d00      	cmp	r5, #0
 8012168:	d009      	beq.n	801217e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	6859      	ldr	r1, [r3, #4]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	689a      	ldr	r2, [r3, #8]
 8012172:	f107 0310 	add.w	r3, r7, #16
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f000 fc40 	bl	80129fc <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 801217c:	e216      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 801217e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012182:	491e      	ldr	r1, [pc, #120]	; (80121fc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 8012184:	4618      	mov	r0, r3
 8012186:	f7f7 fd60 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801218a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801218e:	f107 0308 	add.w	r3, r7, #8
 8012192:	4611      	mov	r1, r2
 8012194:	4618      	mov	r0, r3
 8012196:	f7f7 fe1c 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 801219a:	4603      	mov	r3, r0
 801219c:	461d      	mov	r5, r3
 801219e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7f8 f909 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80121a8:	2d00      	cmp	r5, #0
 80121aa:	d029      	beq.n	8012200 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6859      	ldr	r1, [r3, #4]
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	689a      	ldr	r2, [r3, #8]
 80121b4:	f107 0310 	add.w	r3, r7, #16
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f000 fc61 	bl	8012a80 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 80121be:	4603      	mov	r3, r0
 80121c0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80121c4:	e1f2      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 80121c6:	bf00      	nop
 80121c8:	08021a9c 	.word	0x08021a9c
 80121cc:	08021aa0 	.word	0x08021aa0
 80121d0:	08021aa4 	.word	0x08021aa4
 80121d4:	08021aa8 	.word	0x08021aa8
 80121d8:	08021aac 	.word	0x08021aac
 80121dc:	08021ab0 	.word	0x08021ab0
 80121e0:	08021ab4 	.word	0x08021ab4
 80121e4:	08021ab8 	.word	0x08021ab8
 80121e8:	08021abc 	.word	0x08021abc
 80121ec:	08021ac0 	.word	0x08021ac0
 80121f0:	08021ac4 	.word	0x08021ac4
 80121f4:	08021ac8 	.word	0x08021ac8
 80121f8:	08021acc 	.word	0x08021acc
 80121fc:	08021ad0 	.word	0x08021ad0
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8012200:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012204:	49b9      	ldr	r1, [pc, #740]	; (80124ec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8012206:	4618      	mov	r0, r3
 8012208:	f7f7 fd1f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801220c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8012210:	f107 0308 	add.w	r3, r7, #8
 8012214:	4611      	mov	r1, r2
 8012216:	4618      	mov	r0, r3
 8012218:	f7f7 fddb 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 801221c:	4603      	mov	r3, r0
 801221e:	461d      	mov	r5, r3
 8012220:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012224:	4618      	mov	r0, r3
 8012226:	f7f8 f8c8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801222a:	2d00      	cmp	r5, #0
 801222c:	d009      	beq.n	8012242 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6859      	ldr	r1, [r3, #4]
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	689a      	ldr	r2, [r3, #8]
 8012236:	f107 0310 	add.w	r3, r7, #16
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f000 fccc 	bl	8012bd8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8012240:	e1b4      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8012242:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012246:	49aa      	ldr	r1, [pc, #680]	; (80124f0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8012248:	4618      	mov	r0, r3
 801224a:	f7f7 fcfe 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801224e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8012252:	f107 0308 	add.w	r3, r7, #8
 8012256:	4611      	mov	r1, r2
 8012258:	4618      	mov	r0, r3
 801225a:	f7f7 fdba 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 801225e:	4603      	mov	r3, r0
 8012260:	461d      	mov	r5, r3
 8012262:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012266:	4618      	mov	r0, r3
 8012268:	f7f8 f8a7 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801226c:	2d00      	cmp	r5, #0
 801226e:	d009      	beq.n	8012284 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6859      	ldr	r1, [r3, #4]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	689a      	ldr	r2, [r3, #8]
 8012278:	f107 0310 	add.w	r3, r7, #16
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f000 fcf1 	bl	8012c64 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 8012282:	e193      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8012284:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8012288:	499a      	ldr	r1, [pc, #616]	; (80124f4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 801228a:	4618      	mov	r0, r3
 801228c:	f7f7 fcdd 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012290:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8012294:	f107 0308 	add.w	r3, r7, #8
 8012298:	4611      	mov	r1, r2
 801229a:	4618      	mov	r0, r3
 801229c:	f7f7 fd99 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 80122a0:	4603      	mov	r3, r0
 80122a2:	461d      	mov	r5, r3
 80122a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7f8 f886 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80122ae:	2d00      	cmp	r5, #0
 80122b0:	d009      	beq.n	80122c6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6859      	ldr	r1, [r3, #4]
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	689a      	ldr	r2, [r3, #8]
 80122ba:	f107 0310 	add.w	r3, r7, #16
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f000 fd16 	bl	8012cf0 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 80122c4:	e172      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 80122c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80122ca:	498b      	ldr	r1, [pc, #556]	; (80124f8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 80122cc:	4618      	mov	r0, r3
 80122ce:	f7f7 fcbc 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80122d2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80122d6:	f107 0308 	add.w	r3, r7, #8
 80122da:	4611      	mov	r1, r2
 80122dc:	4618      	mov	r0, r3
 80122de:	f7f7 fd78 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 80122e2:	4603      	mov	r3, r0
 80122e4:	461d      	mov	r5, r3
 80122e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7f8 f865 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80122f0:	2d00      	cmp	r5, #0
 80122f2:	d009      	beq.n	8012308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6859      	ldr	r1, [r3, #4]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	689a      	ldr	r2, [r3, #8]
 80122fc:	f107 0310 	add.w	r3, r7, #16
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f000 fd3d 	bl	8012d80 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8012306:	e151      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8012308:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801230c:	497b      	ldr	r1, [pc, #492]	; (80124fc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 801230e:	4618      	mov	r0, r3
 8012310:	f7f7 fc9b 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012314:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8012318:	f107 0308 	add.w	r3, r7, #8
 801231c:	4611      	mov	r1, r2
 801231e:	4618      	mov	r0, r3
 8012320:	f7f7 fd57 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 8012324:	4603      	mov	r3, r0
 8012326:	461d      	mov	r5, r3
 8012328:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801232c:	4618      	mov	r0, r3
 801232e:	f7f8 f844 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012332:	2d00      	cmp	r5, #0
 8012334:	d009      	beq.n	801234a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	6859      	ldr	r1, [r3, #4]
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	689a      	ldr	r2, [r3, #8]
 801233e:	f107 0310 	add.w	r3, r7, #16
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f000 fd5e 	bl	8012e04 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8012348:	e130      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 801234a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801234e:	496c      	ldr	r1, [pc, #432]	; (8012500 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8012350:	4618      	mov	r0, r3
 8012352:	f7f7 fc7a 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012356:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801235a:	f107 0308 	add.w	r3, r7, #8
 801235e:	4611      	mov	r1, r2
 8012360:	4618      	mov	r0, r3
 8012362:	f7f7 fd36 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 8012366:	4603      	mov	r3, r0
 8012368:	461d      	mov	r5, r3
 801236a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801236e:	4618      	mov	r0, r3
 8012370:	f7f8 f823 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012374:	2d00      	cmp	r5, #0
 8012376:	d009      	beq.n	801238c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6859      	ldr	r1, [r3, #4]
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	689a      	ldr	r2, [r3, #8]
 8012380:	f107 0310 	add.w	r3, r7, #16
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f000 fd83 	bl	8012e90 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 801238a:	e10f      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 801238c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012390:	495c      	ldr	r1, [pc, #368]	; (8012504 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8012392:	4618      	mov	r0, r3
 8012394:	f7f7 fc59 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012398:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801239c:	f107 0308 	add.w	r3, r7, #8
 80123a0:	4611      	mov	r1, r2
 80123a2:	4618      	mov	r0, r3
 80123a4:	f7f7 fd15 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 80123a8:	4603      	mov	r3, r0
 80123aa:	461d      	mov	r5, r3
 80123ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7f8 f802 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80123b6:	2d00      	cmp	r5, #0
 80123b8:	d009      	beq.n	80123ce <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6859      	ldr	r1, [r3, #4]
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	689a      	ldr	r2, [r3, #8]
 80123c2:	f107 0310 	add.w	r3, r7, #16
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f000 fda8 	bl	8012f1c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 80123cc:	e0ee      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 80123ce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80123d2:	494d      	ldr	r1, [pc, #308]	; (8012508 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7f7 fc38 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80123da:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80123de:	f107 0308 	add.w	r3, r7, #8
 80123e2:	4611      	mov	r1, r2
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7f7 fcf4 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 80123ea:	4603      	mov	r3, r0
 80123ec:	461d      	mov	r5, r3
 80123ee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7f7 ffe1 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80123f8:	2d00      	cmp	r5, #0
 80123fa:	d00c      	beq.n	8012416 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	6859      	ldr	r1, [r3, #4]
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	689a      	ldr	r2, [r3, #8]
 8012404:	f107 0310 	add.w	r3, r7, #16
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f000 fa29 	bl	8012860 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 801240e:	4603      	mov	r3, r0
 8012410:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012414:	e0ca      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8012416:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801241a:	493c      	ldr	r1, [pc, #240]	; (801250c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 801241c:	4618      	mov	r0, r3
 801241e:	f7f7 fc14 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012422:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8012426:	f107 0308 	add.w	r3, r7, #8
 801242a:	4611      	mov	r1, r2
 801242c:	4618      	mov	r0, r3
 801242e:	f7f7 fcd0 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 8012432:	4603      	mov	r3, r0
 8012434:	461d      	mov	r5, r3
 8012436:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801243a:	4618      	mov	r0, r3
 801243c:	f7f7 ffbd 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012440:	2d00      	cmp	r5, #0
 8012442:	d00b      	beq.n	801245c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	6859      	ldr	r1, [r3, #4]
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	689a      	ldr	r2, [r3, #8]
 801244c:	f107 0310 	add.w	r3, r7, #16
 8012450:	482e      	ldr	r0, [pc, #184]	; (801250c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8012452:	9000      	str	r0, [sp, #0]
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f000 fda9 	bl	8012fac <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 801245a:	e0a7      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 801245c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012460:	492b      	ldr	r1, [pc, #172]	; (8012510 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8012462:	4618      	mov	r0, r3
 8012464:	f7f7 fbf1 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012468:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 801246c:	f107 0308 	add.w	r3, r7, #8
 8012470:	4611      	mov	r1, r2
 8012472:	4618      	mov	r0, r3
 8012474:	f7f7 fcad 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 8012478:	4603      	mov	r3, r0
 801247a:	461d      	mov	r5, r3
 801247c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012480:	4618      	mov	r0, r3
 8012482:	f7f7 ff9a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012486:	2d00      	cmp	r5, #0
 8012488:	d00b      	beq.n	80124a2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6859      	ldr	r1, [r3, #4]
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	689a      	ldr	r2, [r3, #8]
 8012492:	f107 0310 	add.w	r3, r7, #16
 8012496:	481e      	ldr	r0, [pc, #120]	; (8012510 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8012498:	9000      	str	r0, [sp, #0]
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f000 fd86 	bl	8012fac <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 80124a0:	e084      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 80124a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80124a6:	491b      	ldr	r1, [pc, #108]	; (8012514 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 80124a8:	4618      	mov	r0, r3
 80124aa:	f7f7 fbce 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80124ae:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80124b2:	f107 0308 	add.w	r3, r7, #8
 80124b6:	4611      	mov	r1, r2
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7f7 fc8a 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 80124be:	4603      	mov	r3, r0
 80124c0:	461d      	mov	r5, r3
 80124c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80124c6:	4618      	mov	r0, r3
 80124c8:	f7f7 ff77 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80124cc:	2d00      	cmp	r5, #0
 80124ce:	d023      	beq.n	8012518 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6859      	ldr	r1, [r3, #4]
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	689a      	ldr	r2, [r3, #8]
 80124d8:	f107 0310 	add.w	r3, r7, #16
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f000 fe3b 	bl	8013158 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 80124e2:	4603      	mov	r3, r0
 80124e4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80124e8:	e060      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 80124ea:	bf00      	nop
 80124ec:	08021ad4 	.word	0x08021ad4
 80124f0:	08021ad8 	.word	0x08021ad8
 80124f4:	08021adc 	.word	0x08021adc
 80124f8:	08021ae4 	.word	0x08021ae4
 80124fc:	08021ae8 	.word	0x08021ae8
 8012500:	08021aec 	.word	0x08021aec
 8012504:	08021af0 	.word	0x08021af0
 8012508:	08021af8 	.word	0x08021af8
 801250c:	08021afc 	.word	0x08021afc
 8012510:	08021b04 	.word	0x08021b04
 8012514:	08021b14 	.word	0x08021b14
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8012518:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801251c:	4930      	ldr	r1, [pc, #192]	; (80125e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 801251e:	4618      	mov	r0, r3
 8012520:	f7f7 fb93 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012524:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8012528:	f107 0308 	add.w	r3, r7, #8
 801252c:	4611      	mov	r1, r2
 801252e:	4618      	mov	r0, r3
 8012530:	f7f7 fc4f 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 8012534:	4603      	mov	r3, r0
 8012536:	461d      	mov	r5, r3
 8012538:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801253c:	4618      	mov	r0, r3
 801253e:	f7f7 ff3c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012542:	2d00      	cmp	r5, #0
 8012544:	d00e      	beq.n	8012564 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	331c      	adds	r3, #28
 801254c:	681d      	ldr	r5, [r3, #0]
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	6859      	ldr	r1, [r3, #4]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	689a      	ldr	r2, [r3, #8]
 8012556:	693b      	ldr	r3, [r7, #16]
 8012558:	6838      	ldr	r0, [r7, #0]
 801255a:	47a8      	blx	r5
 801255c:	4603      	mov	r3, r0
 801255e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012562:	e023      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8012564:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012568:	491e      	ldr	r1, [pc, #120]	; (80125e4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 801256a:	4618      	mov	r0, r3
 801256c:	f7f7 fb6d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012570:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8012574:	f107 0308 	add.w	r3, r7, #8
 8012578:	4611      	mov	r1, r2
 801257a:	4618      	mov	r0, r3
 801257c:	f7f7 fc29 	bl	8009dd2 <_ZNK12SimpleString10startsWithERKS_>
 8012580:	4603      	mov	r3, r0
 8012582:	461d      	mov	r5, r3
 8012584:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012588:	4618      	mov	r0, r3
 801258a:	f7f7 ff16 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801258e:	2d00      	cmp	r5, #0
 8012590:	d009      	beq.n	80125a6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	6859      	ldr	r1, [r3, #4]
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	689a      	ldr	r2, [r3, #8]
 801259a:	f107 0310 	add.w	r3, r7, #16
 801259e:	6878      	ldr	r0, [r7, #4]
 80125a0:	f000 fd98 	bl	80130d4 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 80125a4:	e002      	b.n	80125ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 80125a6:	2300      	movs	r3, #0
 80125a8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 80125ac:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d102      	bne.n	80125ba <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 80125b4:	2400      	movs	r4, #0
 80125b6:	2500      	movs	r5, #0
 80125b8:	e000      	b.n	80125bc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 80125ba:	2501      	movs	r5, #1
 80125bc:	f107 0308 	add.w	r3, r7, #8
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7f7 fefa 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80125c6:	2d01      	cmp	r5, #1
 80125c8:	d104      	bne.n	80125d4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 80125ca:	693b      	ldr	r3, [r7, #16]
 80125cc:	3301      	adds	r3, #1
 80125ce:	613b      	str	r3, [r7, #16]
 80125d0:	e455      	b.n	8011e7e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 80125d2:	2401      	movs	r4, #1
 80125d4:	4623      	mov	r3, r4
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	37f0      	adds	r7, #240	; 0xf0
 80125da:	46bd      	mov	sp, r7
 80125dc:	bdb0      	pop	{r4, r5, r7, pc}
 80125de:	bf00      	nop
 80125e0:	08021aac 	.word	0x08021aac
 80125e4:	08021b18 	.word	0x08021b18

080125e8 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 80125e8:	b480      	push	{r7}
 80125ea:	b083      	sub	sp, #12
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 80125f0:	4b03      	ldr	r3, [pc, #12]	; (8012600 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	370c      	adds	r7, #12
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr
 80125fe:	bf00      	nop
 8012600:	08021b1c 	.word	0x08021b1c

08012604 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8012604:	b480      	push	{r7}
 8012606:	b083      	sub	sp, #12
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 801260c:	4b03      	ldr	r3, [pc, #12]	; (801261c <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 801260e:	4618      	mov	r0, r3
 8012610:	370c      	adds	r7, #12
 8012612:	46bd      	mov	sp, r7
 8012614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012618:	4770      	bx	lr
 801261a:	bf00      	nop
 801261c:	08021c4c 	.word	0x08021c4c

08012620 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8012620:	b480      	push	{r7}
 8012622:	b083      	sub	sp, #12
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	7b1b      	ldrb	r3, [r3, #12]
}
 801262c:	4618      	mov	r0, r3
 801262e:	370c      	adds	r7, #12
 8012630:	46bd      	mov	sp, r7
 8012632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012636:	4770      	bx	lr

08012638 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8012638:	b480      	push	{r7}
 801263a:	b083      	sub	sp, #12
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
    return verbose_;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	7b5b      	ldrb	r3, [r3, #13]
}
 8012644:	4618      	mov	r0, r3
 8012646:	370c      	adds	r7, #12
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr

08012650 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8012650:	b480      	push	{r7}
 8012652:	b083      	sub	sp, #12
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	7b9b      	ldrb	r3, [r3, #14]
}
 801265c:	4618      	mov	r0, r3
 801265e:	370c      	adds	r7, #12
 8012660:	46bd      	mov	sp, r7
 8012662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012666:	4770      	bx	lr

08012668 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8012668:	b480      	push	{r7}
 801266a:	b083      	sub	sp, #12
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
    return color_;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	7bdb      	ldrb	r3, [r3, #15]
}
 8012674:	4618      	mov	r0, r3
 8012676:	370c      	adds	r7, #12
 8012678:	46bd      	mov	sp, r7
 801267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267e:	4770      	bx	lr

08012680 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 8012680:	b480      	push	{r7}
 8012682:	b083      	sub	sp, #12
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	7c5b      	ldrb	r3, [r3, #17]
}
 801268c:	4618      	mov	r0, r3
 801268e:	370c      	adds	r7, #12
 8012690:	46bd      	mov	sp, r7
 8012692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012696:	4770      	bx	lr

08012698 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8012698:	b480      	push	{r7}
 801269a:	b083      	sub	sp, #12
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	7c9b      	ldrb	r3, [r3, #18]
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	370c      	adds	r7, #12
 80126a8:	46bd      	mov	sp, r7
 80126aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ae:	4770      	bx	lr

080126b0 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 80126b0:	b480      	push	{r7}
 80126b2:	b083      	sub	sp, #12
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	7cdb      	ldrb	r3, [r3, #19]
}
 80126bc:	4618      	mov	r0, r3
 80126be:	370c      	adds	r7, #12
 80126c0:	46bd      	mov	sp, r7
 80126c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c6:	4770      	bx	lr

080126c8 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 80126c8:	b480      	push	{r7}
 80126ca:	b083      	sub	sp, #12
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	7d1b      	ldrb	r3, [r3, #20]
}
 80126d4:	4618      	mov	r0, r3
 80126d6:	370c      	adds	r7, #12
 80126d8:	46bd      	mov	sp, r7
 80126da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126de:	4770      	bx	lr

080126e0 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 80126e0:	b480      	push	{r7}
 80126e2:	b083      	sub	sp, #12
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	7c1b      	ldrb	r3, [r3, #16]
}
 80126ec:	4618      	mov	r0, r3
 80126ee:	370c      	adds	r7, #12
 80126f0:	46bd      	mov	sp, r7
 80126f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f6:	4770      	bx	lr

080126f8 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 80126f8:	b480      	push	{r7}
 80126fa:	b083      	sub	sp, #12
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
    return repeat_;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	69db      	ldr	r3, [r3, #28]
}
 8012704:	4618      	mov	r0, r3
 8012706:	370c      	adds	r7, #12
 8012708:	46bd      	mov	sp, r7
 801270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270e:	4770      	bx	lr

08012710 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8012710:	b480      	push	{r7}
 8012712:	b083      	sub	sp, #12
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
    return reversing_;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	7d5b      	ldrb	r3, [r3, #21]
}
 801271c:	4618      	mov	r0, r3
 801271e:	370c      	adds	r7, #12
 8012720:	46bd      	mov	sp, r7
 8012722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012726:	4770      	bx	lr

08012728 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8012728:	b480      	push	{r7}
 801272a:	b083      	sub	sp, #12
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	7d9b      	ldrb	r3, [r3, #22]
}
 8012734:	4618      	mov	r0, r3
 8012736:	370c      	adds	r7, #12
 8012738:	46bd      	mov	sp, r7
 801273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273e:	4770      	bx	lr

08012740 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8012740:	b480      	push	{r7}
 8012742:	b083      	sub	sp, #12
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	7ddb      	ldrb	r3, [r3, #23]
}
 801274c:	4618      	mov	r0, r3
 801274e:	370c      	adds	r7, #12
 8012750:	46bd      	mov	sp, r7
 8012752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012756:	4770      	bx	lr

08012758 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8012758:	b480      	push	{r7}
 801275a:	b083      	sub	sp, #12
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	6a1b      	ldr	r3, [r3, #32]
}
 8012764:	4618      	mov	r0, r3
 8012766:	370c      	adds	r7, #12
 8012768:	46bd      	mov	sp, r7
 801276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276e:	4770      	bx	lr

08012770 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8012770:	b480      	push	{r7}
 8012772:	b083      	sub	sp, #12
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 801277c:	4618      	mov	r0, r3
 801277e:	370c      	adds	r7, #12
 8012780:	46bd      	mov	sp, r7
 8012782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012786:	4770      	bx	lr

08012788 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8012788:	b480      	push	{r7}
 801278a:	b083      	sub	sp, #12
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8012794:	4618      	mov	r0, r3
 8012796:	370c      	adds	r7, #12
 8012798:	46bd      	mov	sp, r7
 801279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279e:	4770      	bx	lr

080127a0 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b086      	sub	sp, #24
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	60f8      	str	r0, [r7, #12]
 80127a8:	60b9      	str	r1, [r7, #8]
 80127aa:	607a      	str	r2, [r7, #4]
 80127ac:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	2200      	movs	r2, #0
 80127b2:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	009b      	lsls	r3, r3, #2
 80127ba:	687a      	ldr	r2, [r7, #4]
 80127bc:	4413      	add	r3, r2
 80127be:	681a      	ldr	r2, [r3, #0]
 80127c0:	f107 0310 	add.w	r3, r7, #16
 80127c4:	4611      	mov	r1, r2
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7f7 fa3f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 80127cc:	f107 0310 	add.w	r3, r7, #16
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7f7 fdd1 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 80127d6:	4603      	mov	r3, r0
 80127d8:	2b02      	cmp	r3, #2
 80127da:	bf8c      	ite	hi
 80127dc:	2301      	movhi	r3, #1
 80127de:	2300      	movls	r3, #0
 80127e0:	b2db      	uxtb	r3, r3
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d00e      	beq.n	8012804 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	009b      	lsls	r3, r3, #2
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	4413      	add	r3, r2
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	3302      	adds	r3, #2
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7f7 f824 	bl	8009842 <_ZN12SimpleString4AtoIEPKc>
 80127fa:	4603      	mov	r3, r0
 80127fc:	461a      	mov	r2, r3
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	61da      	str	r2, [r3, #28]
 8012802:	e01c      	b.n	801283e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	3301      	adds	r3, #1
 801280a:	68ba      	ldr	r2, [r7, #8]
 801280c:	429a      	cmp	r2, r3
 801280e:	dd16      	ble.n	801283e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	3301      	adds	r3, #1
 8012816:	009b      	lsls	r3, r3, #2
 8012818:	687a      	ldr	r2, [r7, #4]
 801281a:	4413      	add	r3, r2
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	4618      	mov	r0, r3
 8012820:	f7f7 f80f 	bl	8009842 <_ZN12SimpleString4AtoIEPKc>
 8012824:	4603      	mov	r3, r0
 8012826:	461a      	mov	r2, r3
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	69db      	ldr	r3, [r3, #28]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d004      	beq.n	801283e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	1c5a      	adds	r2, r3, #1
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	69db      	ldr	r3, [r3, #28]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d102      	bne.n	801284c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	2202      	movs	r2, #2
 801284a:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 801284c:	f107 0310 	add.w	r3, r7, #16
 8012850:	4618      	mov	r0, r3
 8012852:	f7f7 fdb2 	bl	800a3ba <_ZN12SimpleStringD1Ev>

}
 8012856:	bf00      	nop
 8012858:	3718      	adds	r7, #24
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}
	...

08012860 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8012860:	b590      	push	{r4, r7, lr}
 8012862:	b089      	sub	sp, #36	; 0x24
 8012864:	af00      	add	r7, sp, #0
 8012866:	60f8      	str	r0, [r7, #12]
 8012868:	60b9      	str	r1, [r7, #8]
 801286a:	607a      	str	r2, [r7, #4]
 801286c:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	2201      	movs	r2, #1
 8012872:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8012874:	4b34      	ldr	r3, [pc, #208]	; (8012948 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	4798      	blx	r3
 801287a:	4603      	mov	r3, r0
 801287c:	461a      	mov	r2, r3
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	6a1b      	ldr	r3, [r3, #32]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d104      	bne.n	8012894 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	6a1b      	ldr	r3, [r3, #32]
 801288e:	1c5a      	adds	r2, r3, #1
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	009b      	lsls	r3, r3, #2
 801289a:	687a      	ldr	r2, [r7, #4]
 801289c:	4413      	add	r3, r2
 801289e:	681a      	ldr	r2, [r3, #0]
 80128a0:	f107 0314 	add.w	r3, r7, #20
 80128a4:	4611      	mov	r1, r2
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7f7 f9cf 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 80128ac:	f107 0314 	add.w	r3, r7, #20
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7f7 fd61 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 80128b6:	4603      	mov	r3, r0
 80128b8:	2b02      	cmp	r3, #2
 80128ba:	bf8c      	ite	hi
 80128bc:	2301      	movhi	r3, #1
 80128be:	2300      	movls	r3, #0
 80128c0:	b2db      	uxtb	r3, r3
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d010      	beq.n	80128e8 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	2201      	movs	r2, #1
 80128ca:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	009b      	lsls	r3, r3, #2
 80128d2:	687a      	ldr	r2, [r7, #4]
 80128d4:	4413      	add	r3, r2
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	3302      	adds	r3, #2
 80128da:	4618      	mov	r0, r3
 80128dc:	f7f6 ff78 	bl	80097d0 <_ZN12SimpleString4AtoUEPKc>
 80128e0:	4602      	mov	r2, r0
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	621a      	str	r2, [r3, #32]
 80128e6:	e01e      	b.n	8012926 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	3301      	adds	r3, #1
 80128ee:	68ba      	ldr	r2, [r7, #8]
 80128f0:	429a      	cmp	r2, r3
 80128f2:	dd18      	ble.n	8012926 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	3301      	adds	r3, #1
 80128fa:	009b      	lsls	r3, r3, #2
 80128fc:	687a      	ldr	r2, [r7, #4]
 80128fe:	4413      	add	r3, r2
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	4618      	mov	r0, r3
 8012904:	f7f6 ff64 	bl	80097d0 <_ZN12SimpleString4AtoUEPKc>
 8012908:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 801290a:	69fb      	ldr	r3, [r7, #28]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d00a      	beq.n	8012926 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	2201      	movs	r2, #1
 8012914:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	69fa      	ldr	r2, [r7, #28]
 801291a:	621a      	str	r2, [r3, #32]
            i++;
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	1c5a      	adds	r2, r3, #1
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	6a1b      	ldr	r3, [r3, #32]
 801292a:	2b00      	cmp	r3, #0
 801292c:	bf14      	ite	ne
 801292e:	2301      	movne	r3, #1
 8012930:	2300      	moveq	r3, #0
 8012932:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8012934:	f107 0314 	add.w	r3, r7, #20
 8012938:	4618      	mov	r0, r3
 801293a:	f7f7 fd3e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 801293e:	4623      	mov	r3, r4
}
 8012940:	4618      	mov	r0, r3
 8012942:	3724      	adds	r7, #36	; 0x24
 8012944:	46bd      	mov	sp, r7
 8012946:	bd90      	pop	{r4, r7, pc}
 8012948:	200000a4 	.word	0x200000a4

0801294c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b088      	sub	sp, #32
 8012950:	af00      	add	r7, sp, #0
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	60b9      	str	r1, [r7, #8]
 8012956:	607a      	str	r2, [r7, #4]
 8012958:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 801295a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801295c:	f7f7 fd0c 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 8012960:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8012962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	009b      	lsls	r3, r3, #2
 8012968:	683a      	ldr	r2, [r7, #0]
 801296a:	4413      	add	r3, r2
 801296c:	681a      	ldr	r2, [r3, #0]
 801296e:	f107 0314 	add.w	r3, r7, #20
 8012972:	4611      	mov	r1, r2
 8012974:	4618      	mov	r0, r3
 8012976:	f7f7 f968 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 801297a:	f107 0314 	add.w	r3, r7, #20
 801297e:	4618      	mov	r0, r3
 8012980:	f7f7 fcfa 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 8012984:	4602      	mov	r2, r0
 8012986:	69fb      	ldr	r3, [r7, #28]
 8012988:	4293      	cmp	r3, r2
 801298a:	bf34      	ite	cc
 801298c:	2301      	movcc	r3, #1
 801298e:	2300      	movcs	r3, #0
 8012990:	b2db      	uxtb	r3, r3
 8012992:	2b00      	cmp	r3, #0
 8012994:	d00c      	beq.n	80129b0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8012996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	009b      	lsls	r3, r3, #2
 801299c:	683a      	ldr	r2, [r7, #0]
 801299e:	4413      	add	r3, r2
 80129a0:	681a      	ldr	r2, [r3, #0]
 80129a2:	69fb      	ldr	r3, [r7, #28]
 80129a4:	4413      	add	r3, r2
 80129a6:	4619      	mov	r1, r3
 80129a8:	68f8      	ldr	r0, [r7, #12]
 80129aa:	f7f7 f94e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80129ae:	e019      	b.n	80129e4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 80129b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	3301      	adds	r3, #1
 80129b6:	687a      	ldr	r2, [r7, #4]
 80129b8:	429a      	cmp	r2, r3
 80129ba:	dd0f      	ble.n	80129dc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 80129bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	1c5a      	adds	r2, r3, #1
 80129c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c4:	601a      	str	r2, [r3, #0]
 80129c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	009b      	lsls	r3, r3, #2
 80129cc:	683a      	ldr	r2, [r7, #0]
 80129ce:	4413      	add	r3, r2
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	4619      	mov	r1, r3
 80129d4:	68f8      	ldr	r0, [r7, #12]
 80129d6:	f7f7 f938 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80129da:	e003      	b.n	80129e4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 80129dc:	4906      	ldr	r1, [pc, #24]	; (80129f8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 80129de:	68f8      	ldr	r0, [r7, #12]
 80129e0:	f7f7 f933 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 80129e4:	f107 0314 	add.w	r3, r7, #20
 80129e8:	4618      	mov	r0, r3
 80129ea:	f7f7 fce6 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 80129ee:	68f8      	ldr	r0, [r7, #12]
 80129f0:	3720      	adds	r7, #32
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}
 80129f6:	bf00      	nop
 80129f8:	08021a98 	.word	0x08021a98

080129fc <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 80129fc:	b5b0      	push	{r4, r5, r7, lr}
 80129fe:	b08c      	sub	sp, #48	; 0x30
 8012a00:	af02      	add	r7, sp, #8
 8012a02:	60f8      	str	r0, [r7, #12]
 8012a04:	60b9      	str	r1, [r7, #8]
 8012a06:	607a      	str	r2, [r7, #4]
 8012a08:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8012a0a:	f107 031c 	add.w	r3, r7, #28
 8012a0e:	491a      	ldr	r1, [pc, #104]	; (8012a78 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7f7 f91a 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012a16:	f107 0014 	add.w	r0, r7, #20
 8012a1a:	f107 031c 	add.w	r3, r7, #28
 8012a1e:	9301      	str	r3, [sp, #4]
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	9300      	str	r3, [sp, #0]
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	68ba      	ldr	r2, [r7, #8]
 8012a28:	68f9      	ldr	r1, [r7, #12]
 8012a2a:	f7ff ff8f 	bl	801294c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012a2e:	f107 0514 	add.w	r5, r7, #20
 8012a32:	f44f 7289 	mov.w	r2, #274	; 0x112
 8012a36:	4911      	ldr	r1, [pc, #68]	; (8012a7c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8012a38:	2010      	movs	r0, #16
 8012a3a:	f7f4 fd43 	bl	80074c4 <_ZnwjPKci>
 8012a3e:	4604      	mov	r4, r0
 8012a40:	4629      	mov	r1, r5
 8012a42:	4620      	mov	r0, r4
 8012a44:	f009 ff3e 	bl	801c8c4 <_ZN10TestFilterC1ERK12SimpleString>
 8012a48:	627c      	str	r4, [r7, #36]	; 0x24
 8012a4a:	f107 0314 	add.w	r3, r7, #20
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7f7 fcb3 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012a54:	f107 031c 	add.w	r3, r7, #28
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7f7 fcae 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a62:	4619      	mov	r1, r3
 8012a64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a66:	f009 ff4d 	bl	801c904 <_ZN10TestFilter3addEPS_>
 8012a6a:	4602      	mov	r2, r0
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012a70:	bf00      	nop
 8012a72:	3728      	adds	r7, #40	; 0x28
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bdb0      	pop	{r4, r5, r7, pc}
 8012a78:	08021acc 	.word	0x08021acc
 8012a7c:	08022460 	.word	0x08022460

08012a80 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 8012a80:	b5b0      	push	{r4, r5, r7, lr}
 8012a82:	b092      	sub	sp, #72	; 0x48
 8012a84:	af02      	add	r7, sp, #8
 8012a86:	60f8      	str	r0, [r7, #12]
 8012a88:	60b9      	str	r1, [r7, #8]
 8012a8a:	607a      	str	r2, [r7, #4]
 8012a8c:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8012a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012a92:	494e      	ldr	r1, [pc, #312]	; (8012bcc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8012a94:	4618      	mov	r0, r3
 8012a96:	f7f7 f8d8 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012a9a:	f107 0020 	add.w	r0, r7, #32
 8012a9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012aa2:	9301      	str	r3, [sp, #4]
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	9300      	str	r3, [sp, #0]
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	68ba      	ldr	r2, [r7, #8]
 8012aac:	68f9      	ldr	r1, [r7, #12]
 8012aae:	f7ff ff4d 	bl	801294c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7f7 fc7f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8012abc:	f107 0310 	add.w	r3, r7, #16
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7f8 fb8f 	bl	800b1e4 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8012ac6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012aca:	4941      	ldr	r1, [pc, #260]	; (8012bd0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8012acc:	4618      	mov	r0, r3
 8012ace:	f7f7 f8bc 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012ad2:	f107 0210 	add.w	r2, r7, #16
 8012ad6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012ada:	f107 0320 	add.w	r3, r7, #32
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7f7 fa1f 	bl	8009f22 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8012ae4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f7f7 fc66 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8012aee:	f107 0310 	add.w	r3, r7, #16
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7f8 fc1b 	bl	800b32e <_ZNK22SimpleStringCollection4sizeEv>
 8012af8:	4603      	mov	r3, r0
 8012afa:	2b02      	cmp	r3, #2
 8012afc:	bf14      	ite	ne
 8012afe:	2301      	movne	r3, #1
 8012b00:	2300      	moveq	r3, #0
 8012b02:	b2db      	uxtb	r3, r3
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d001      	beq.n	8012b0c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8012b08:	2400      	movs	r4, #0
 8012b0a:	e04f      	b.n	8012bac <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8012b0c:	f107 0310 	add.w	r3, r7, #16
 8012b10:	2100      	movs	r1, #0
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7f8 fc18 	bl	800b348 <_ZN22SimpleStringCollectionixEj>
 8012b18:	4604      	mov	r4, r0
 8012b1a:	f107 0310 	add.w	r3, r7, #16
 8012b1e:	2100      	movs	r1, #0
 8012b20:	4618      	mov	r0, r3
 8012b22:	f7f8 fc11 	bl	800b348 <_ZN22SimpleStringCollectionixEj>
 8012b26:	4603      	mov	r3, r0
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7f7 fc25 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	3b01      	subs	r3, #1
 8012b32:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8012b36:	2200      	movs	r2, #0
 8012b38:	4621      	mov	r1, r4
 8012b3a:	f7f7 fd47 	bl	800a5cc <_ZNK12SimpleString9subStringEjj>
 8012b3e:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8012b42:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8012b46:	4923      	ldr	r1, [pc, #140]	; (8012bd4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8012b48:	2010      	movs	r0, #16
 8012b4a:	f7f4 fcbb 	bl	80074c4 <_ZnwjPKci>
 8012b4e:	4604      	mov	r4, r0
 8012b50:	4629      	mov	r1, r5
 8012b52:	4620      	mov	r0, r4
 8012b54:	f009 feb6 	bl	801c8c4 <_ZN10TestFilterC1ERK12SimpleString>
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b5c:	4619      	mov	r1, r3
 8012b5e:	4620      	mov	r0, r4
 8012b60:	f009 fed0 	bl	801c904 <_ZN10TestFilter3addEPS_>
 8012b64:	4602      	mov	r2, r0
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	625a      	str	r2, [r3, #36]	; 0x24
 8012b6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f7f7 fc23 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8012b74:	f107 0310 	add.w	r3, r7, #16
 8012b78:	2101      	movs	r1, #1
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7f8 fbe4 	bl	800b348 <_ZN22SimpleStringCollectionixEj>
 8012b80:	4605      	mov	r5, r0
 8012b82:	f240 121f 	movw	r2, #287	; 0x11f
 8012b86:	4913      	ldr	r1, [pc, #76]	; (8012bd4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8012b88:	2010      	movs	r0, #16
 8012b8a:	f7f4 fc9b 	bl	80074c4 <_ZnwjPKci>
 8012b8e:	4604      	mov	r4, r0
 8012b90:	4629      	mov	r1, r5
 8012b92:	4620      	mov	r0, r4
 8012b94:	f009 fe96 	bl	801c8c4 <_ZN10TestFilterC1ERK12SimpleString>
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b9c:	4619      	mov	r1, r3
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	f009 feb0 	bl	801c904 <_ZN10TestFilter3addEPS_>
 8012ba4:	4602      	mov	r2, r0
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8012baa:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8012bac:	f107 0310 	add.w	r3, r7, #16
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7f8 fb8b 	bl	800b2cc <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8012bb6:	f107 0320 	add.w	r3, r7, #32
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7f7 fbfd 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012bc0:	4623      	mov	r3, r4
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3740      	adds	r7, #64	; 0x40
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	08021ad0 	.word	0x08021ad0
 8012bd0:	08022480 	.word	0x08022480
 8012bd4:	08022460 	.word	0x08022460

08012bd8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8012bd8:	b5b0      	push	{r4, r5, r7, lr}
 8012bda:	b08c      	sub	sp, #48	; 0x30
 8012bdc:	af02      	add	r7, sp, #8
 8012bde:	60f8      	str	r0, [r7, #12]
 8012be0:	60b9      	str	r1, [r7, #8]
 8012be2:	607a      	str	r2, [r7, #4]
 8012be4:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8012be6:	f107 031c 	add.w	r3, r7, #28
 8012bea:	491c      	ldr	r1, [pc, #112]	; (8012c5c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7f7 f82c 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012bf2:	f107 0014 	add.w	r0, r7, #20
 8012bf6:	f107 031c 	add.w	r3, r7, #28
 8012bfa:	9301      	str	r3, [sp, #4]
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	9300      	str	r3, [sp, #0]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	68ba      	ldr	r2, [r7, #8]
 8012c04:	68f9      	ldr	r1, [r7, #12]
 8012c06:	f7ff fea1 	bl	801294c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012c0a:	f107 0514 	add.w	r5, r7, #20
 8012c0e:	f240 1225 	movw	r2, #293	; 0x125
 8012c12:	4913      	ldr	r1, [pc, #76]	; (8012c60 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8012c14:	2010      	movs	r0, #16
 8012c16:	f7f4 fc55 	bl	80074c4 <_ZnwjPKci>
 8012c1a:	4604      	mov	r4, r0
 8012c1c:	4629      	mov	r1, r5
 8012c1e:	4620      	mov	r0, r4
 8012c20:	f009 fe50 	bl	801c8c4 <_ZN10TestFilterC1ERK12SimpleString>
 8012c24:	627c      	str	r4, [r7, #36]	; 0x24
 8012c26:	f107 0314 	add.w	r3, r7, #20
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7f7 fbc5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012c30:	f107 031c 	add.w	r3, r7, #28
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7f7 fbc0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8012c3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c3c:	f009 fe7d 	bl	801c93a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c44:	4619      	mov	r1, r3
 8012c46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c48:	f009 fe5c 	bl	801c904 <_ZN10TestFilter3addEPS_>
 8012c4c:	4602      	mov	r2, r0
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012c52:	bf00      	nop
 8012c54:	3728      	adds	r7, #40	; 0x28
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bdb0      	pop	{r4, r5, r7, pc}
 8012c5a:	bf00      	nop
 8012c5c:	08021ad4 	.word	0x08021ad4
 8012c60:	08022460 	.word	0x08022460

08012c64 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8012c64:	b5b0      	push	{r4, r5, r7, lr}
 8012c66:	b08c      	sub	sp, #48	; 0x30
 8012c68:	af02      	add	r7, sp, #8
 8012c6a:	60f8      	str	r0, [r7, #12]
 8012c6c:	60b9      	str	r1, [r7, #8]
 8012c6e:	607a      	str	r2, [r7, #4]
 8012c70:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 8012c72:	f107 031c 	add.w	r3, r7, #28
 8012c76:	491c      	ldr	r1, [pc, #112]	; (8012ce8 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7f6 ffe6 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012c7e:	f107 0014 	add.w	r0, r7, #20
 8012c82:	f107 031c 	add.w	r3, r7, #28
 8012c86:	9301      	str	r3, [sp, #4]
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	9300      	str	r3, [sp, #0]
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	68ba      	ldr	r2, [r7, #8]
 8012c90:	68f9      	ldr	r1, [r7, #12]
 8012c92:	f7ff fe5b 	bl	801294c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012c96:	f107 0514 	add.w	r5, r7, #20
 8012c9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012c9e:	4913      	ldr	r1, [pc, #76]	; (8012cec <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8012ca0:	2010      	movs	r0, #16
 8012ca2:	f7f4 fc0f 	bl	80074c4 <_ZnwjPKci>
 8012ca6:	4604      	mov	r4, r0
 8012ca8:	4629      	mov	r1, r5
 8012caa:	4620      	mov	r0, r4
 8012cac:	f009 fe0a 	bl	801c8c4 <_ZN10TestFilterC1ERK12SimpleString>
 8012cb0:	627c      	str	r4, [r7, #36]	; 0x24
 8012cb2:	f107 0314 	add.w	r3, r7, #20
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7f7 fb7f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012cbc:	f107 031c 	add.w	r3, r7, #28
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7f7 fb7a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8012cc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cc8:	f009 fe44 	bl	801c954 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd0:	4619      	mov	r1, r3
 8012cd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cd4:	f009 fe16 	bl	801c904 <_ZN10TestFilter3addEPS_>
 8012cd8:	4602      	mov	r2, r0
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012cde:	bf00      	nop
 8012ce0:	3728      	adds	r7, #40	; 0x28
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ce6:	bf00      	nop
 8012ce8:	08021ad8 	.word	0x08021ad8
 8012cec:	08022460 	.word	0x08022460

08012cf0 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8012cf0:	b5b0      	push	{r4, r5, r7, lr}
 8012cf2:	b08c      	sub	sp, #48	; 0x30
 8012cf4:	af02      	add	r7, sp, #8
 8012cf6:	60f8      	str	r0, [r7, #12]
 8012cf8:	60b9      	str	r1, [r7, #8]
 8012cfa:	607a      	str	r2, [r7, #4]
 8012cfc:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8012cfe:	f107 031c 	add.w	r3, r7, #28
 8012d02:	491d      	ldr	r1, [pc, #116]	; (8012d78 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7f6 ffa0 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012d0a:	f107 0014 	add.w	r0, r7, #20
 8012d0e:	f107 031c 	add.w	r3, r7, #28
 8012d12:	9301      	str	r3, [sp, #4]
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	9300      	str	r3, [sp, #0]
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	68ba      	ldr	r2, [r7, #8]
 8012d1c:	68f9      	ldr	r1, [r7, #12]
 8012d1e:	f7ff fe15 	bl	801294c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012d22:	f107 0514 	add.w	r5, r7, #20
 8012d26:	f240 1233 	movw	r2, #307	; 0x133
 8012d2a:	4914      	ldr	r1, [pc, #80]	; (8012d7c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8012d2c:	2010      	movs	r0, #16
 8012d2e:	f7f4 fbc9 	bl	80074c4 <_ZnwjPKci>
 8012d32:	4604      	mov	r4, r0
 8012d34:	4629      	mov	r1, r5
 8012d36:	4620      	mov	r0, r4
 8012d38:	f009 fdc4 	bl	801c8c4 <_ZN10TestFilterC1ERK12SimpleString>
 8012d3c:	627c      	str	r4, [r7, #36]	; 0x24
 8012d3e:	f107 0314 	add.w	r3, r7, #20
 8012d42:	4618      	mov	r0, r3
 8012d44:	f7f7 fb39 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012d48:	f107 031c 	add.w	r3, r7, #28
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7f7 fb34 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8012d52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d54:	f009 fdf1 	bl	801c93a <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8012d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d5a:	f009 fdfb 	bl	801c954 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d62:	4619      	mov	r1, r3
 8012d64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d66:	f009 fdcd 	bl	801c904 <_ZN10TestFilter3addEPS_>
 8012d6a:	4602      	mov	r2, r0
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012d70:	bf00      	nop
 8012d72:	3728      	adds	r7, #40	; 0x28
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bdb0      	pop	{r4, r5, r7, pc}
 8012d78:	08021adc 	.word	0x08021adc
 8012d7c:	08022460 	.word	0x08022460

08012d80 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 8012d80:	b5b0      	push	{r4, r5, r7, lr}
 8012d82:	b08c      	sub	sp, #48	; 0x30
 8012d84:	af02      	add	r7, sp, #8
 8012d86:	60f8      	str	r0, [r7, #12]
 8012d88:	60b9      	str	r1, [r7, #8]
 8012d8a:	607a      	str	r2, [r7, #4]
 8012d8c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 8012d8e:	f107 031c 	add.w	r3, r7, #28
 8012d92:	491a      	ldr	r1, [pc, #104]	; (8012dfc <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7f6 ff58 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012d9a:	f107 0014 	add.w	r0, r7, #20
 8012d9e:	f107 031c 	add.w	r3, r7, #28
 8012da2:	9301      	str	r3, [sp, #4]
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	9300      	str	r3, [sp, #0]
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	68ba      	ldr	r2, [r7, #8]
 8012dac:	68f9      	ldr	r1, [r7, #12]
 8012dae:	f7ff fdcd 	bl	801294c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012db2:	f107 0514 	add.w	r5, r7, #20
 8012db6:	f240 123b 	movw	r2, #315	; 0x13b
 8012dba:	4911      	ldr	r1, [pc, #68]	; (8012e00 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8012dbc:	2010      	movs	r0, #16
 8012dbe:	f7f4 fb81 	bl	80074c4 <_ZnwjPKci>
 8012dc2:	4604      	mov	r4, r0
 8012dc4:	4629      	mov	r1, r5
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	f009 fd7c 	bl	801c8c4 <_ZN10TestFilterC1ERK12SimpleString>
 8012dcc:	627c      	str	r4, [r7, #36]	; 0x24
 8012dce:	f107 0314 	add.w	r3, r7, #20
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7f7 faf1 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012dd8:	f107 031c 	add.w	r3, r7, #28
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7f7 faec 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012de6:	4619      	mov	r1, r3
 8012de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012dea:	f009 fd8b 	bl	801c904 <_ZN10TestFilter3addEPS_>
 8012dee:	4602      	mov	r2, r0
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012df4:	bf00      	nop
 8012df6:	3728      	adds	r7, #40	; 0x28
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8012dfc:	08021ae4 	.word	0x08021ae4
 8012e00:	08022460 	.word	0x08022460

08012e04 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8012e04:	b5b0      	push	{r4, r5, r7, lr}
 8012e06:	b08c      	sub	sp, #48	; 0x30
 8012e08:	af02      	add	r7, sp, #8
 8012e0a:	60f8      	str	r0, [r7, #12]
 8012e0c:	60b9      	str	r1, [r7, #8]
 8012e0e:	607a      	str	r2, [r7, #4]
 8012e10:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8012e12:	f107 031c 	add.w	r3, r7, #28
 8012e16:	491c      	ldr	r1, [pc, #112]	; (8012e88 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7f6 ff16 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012e1e:	f107 0014 	add.w	r0, r7, #20
 8012e22:	f107 031c 	add.w	r3, r7, #28
 8012e26:	9301      	str	r3, [sp, #4]
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	9300      	str	r3, [sp, #0]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	68ba      	ldr	r2, [r7, #8]
 8012e30:	68f9      	ldr	r1, [r7, #12]
 8012e32:	f7ff fd8b 	bl	801294c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012e36:	f107 0514 	add.w	r5, r7, #20
 8012e3a:	f240 1241 	movw	r2, #321	; 0x141
 8012e3e:	4913      	ldr	r1, [pc, #76]	; (8012e8c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8012e40:	2010      	movs	r0, #16
 8012e42:	f7f4 fb3f 	bl	80074c4 <_ZnwjPKci>
 8012e46:	4604      	mov	r4, r0
 8012e48:	4629      	mov	r1, r5
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	f009 fd3a 	bl	801c8c4 <_ZN10TestFilterC1ERK12SimpleString>
 8012e50:	627c      	str	r4, [r7, #36]	; 0x24
 8012e52:	f107 0314 	add.w	r3, r7, #20
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7f7 faaf 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012e5c:	f107 031c 	add.w	r3, r7, #28
 8012e60:	4618      	mov	r0, r3
 8012e62:	f7f7 faaa 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 8012e66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e68:	f009 fd67 	bl	801c93a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e70:	4619      	mov	r1, r3
 8012e72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e74:	f009 fd46 	bl	801c904 <_ZN10TestFilter3addEPS_>
 8012e78:	4602      	mov	r2, r0
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012e7e:	bf00      	nop
 8012e80:	3728      	adds	r7, #40	; 0x28
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bdb0      	pop	{r4, r5, r7, pc}
 8012e86:	bf00      	nop
 8012e88:	08021ae8 	.word	0x08021ae8
 8012e8c:	08022460 	.word	0x08022460

08012e90 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 8012e90:	b5b0      	push	{r4, r5, r7, lr}
 8012e92:	b08c      	sub	sp, #48	; 0x30
 8012e94:	af02      	add	r7, sp, #8
 8012e96:	60f8      	str	r0, [r7, #12]
 8012e98:	60b9      	str	r1, [r7, #8]
 8012e9a:	607a      	str	r2, [r7, #4]
 8012e9c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 8012e9e:	f107 031c 	add.w	r3, r7, #28
 8012ea2:	491c      	ldr	r1, [pc, #112]	; (8012f14 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7f6 fed0 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012eaa:	f107 0014 	add.w	r0, r7, #20
 8012eae:	f107 031c 	add.w	r3, r7, #28
 8012eb2:	9301      	str	r3, [sp, #4]
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	9300      	str	r3, [sp, #0]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	68ba      	ldr	r2, [r7, #8]
 8012ebc:	68f9      	ldr	r1, [r7, #12]
 8012ebe:	f7ff fd45 	bl	801294c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012ec2:	f107 0514 	add.w	r5, r7, #20
 8012ec6:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8012eca:	4913      	ldr	r1, [pc, #76]	; (8012f18 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8012ecc:	2010      	movs	r0, #16
 8012ece:	f7f4 faf9 	bl	80074c4 <_ZnwjPKci>
 8012ed2:	4604      	mov	r4, r0
 8012ed4:	4629      	mov	r1, r5
 8012ed6:	4620      	mov	r0, r4
 8012ed8:	f009 fcf4 	bl	801c8c4 <_ZN10TestFilterC1ERK12SimpleString>
 8012edc:	627c      	str	r4, [r7, #36]	; 0x24
 8012ede:	f107 0314 	add.w	r3, r7, #20
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7f7 fa69 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012ee8:	f107 031c 	add.w	r3, r7, #28
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7f7 fa64 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8012ef2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ef4:	f009 fd2e 	bl	801c954 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012efc:	4619      	mov	r1, r3
 8012efe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f00:	f009 fd00 	bl	801c904 <_ZN10TestFilter3addEPS_>
 8012f04:	4602      	mov	r2, r0
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012f0a:	bf00      	nop
 8012f0c:	3728      	adds	r7, #40	; 0x28
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bdb0      	pop	{r4, r5, r7, pc}
 8012f12:	bf00      	nop
 8012f14:	08021aec 	.word	0x08021aec
 8012f18:	08022460 	.word	0x08022460

08012f1c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8012f1c:	b5b0      	push	{r4, r5, r7, lr}
 8012f1e:	b08c      	sub	sp, #48	; 0x30
 8012f20:	af02      	add	r7, sp, #8
 8012f22:	60f8      	str	r0, [r7, #12]
 8012f24:	60b9      	str	r1, [r7, #8]
 8012f26:	607a      	str	r2, [r7, #4]
 8012f28:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 8012f2a:	f107 031c 	add.w	r3, r7, #28
 8012f2e:	491d      	ldr	r1, [pc, #116]	; (8012fa4 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8012f30:	4618      	mov	r0, r3
 8012f32:	f7f6 fe8a 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012f36:	f107 0014 	add.w	r0, r7, #20
 8012f3a:	f107 031c 	add.w	r3, r7, #28
 8012f3e:	9301      	str	r3, [sp, #4]
 8012f40:	683b      	ldr	r3, [r7, #0]
 8012f42:	9300      	str	r3, [sp, #0]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	68ba      	ldr	r2, [r7, #8]
 8012f48:	68f9      	ldr	r1, [r7, #12]
 8012f4a:	f7ff fcff 	bl	801294c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012f4e:	f107 0514 	add.w	r5, r7, #20
 8012f52:	f240 124f 	movw	r2, #335	; 0x14f
 8012f56:	4914      	ldr	r1, [pc, #80]	; (8012fa8 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8012f58:	2010      	movs	r0, #16
 8012f5a:	f7f4 fab3 	bl	80074c4 <_ZnwjPKci>
 8012f5e:	4604      	mov	r4, r0
 8012f60:	4629      	mov	r1, r5
 8012f62:	4620      	mov	r0, r4
 8012f64:	f009 fcae 	bl	801c8c4 <_ZN10TestFilterC1ERK12SimpleString>
 8012f68:	627c      	str	r4, [r7, #36]	; 0x24
 8012f6a:	f107 0314 	add.w	r3, r7, #20
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7f7 fa23 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8012f74:	f107 031c 	add.w	r3, r7, #28
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7f7 fa1e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8012f7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f80:	f009 fce8 	bl	801c954 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 8012f84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f86:	f009 fcd8 	bl	801c93a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f8e:	4619      	mov	r1, r3
 8012f90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f92:	f009 fcb7 	bl	801c904 <_ZN10TestFilter3addEPS_>
 8012f96:	4602      	mov	r2, r0
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012f9c:	bf00      	nop
 8012f9e:	3728      	adds	r7, #40	; 0x28
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8012fa4:	08021af0 	.word	0x08021af0
 8012fa8:	08022460 	.word	0x08022460

08012fac <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 8012fac:	b5b0      	push	{r4, r5, r7, lr}
 8012fae:	b092      	sub	sp, #72	; 0x48
 8012fb0:	af02      	add	r7, sp, #8
 8012fb2:	60f8      	str	r0, [r7, #12]
 8012fb4:	60b9      	str	r1, [r7, #8]
 8012fb6:	607a      	str	r2, [r7, #4]
 8012fb8:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8012fba:	f107 0320 	add.w	r3, r7, #32
 8012fbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7f6 fe42 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8012fc6:	f107 0018 	add.w	r0, r7, #24
 8012fca:	f107 0320 	add.w	r3, r7, #32
 8012fce:	9301      	str	r3, [sp, #4]
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	9300      	str	r3, [sp, #0]
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	68ba      	ldr	r2, [r7, #8]
 8012fd8:	68f9      	ldr	r1, [r7, #12]
 8012fda:	f7ff fcb7 	bl	801294c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012fde:	f107 0320 	add.w	r3, r7, #32
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7f7 f9e9 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8012fe8:	f107 0010 	add.w	r0, r7, #16
 8012fec:	f107 0118 	add.w	r1, r7, #24
 8012ff0:	2329      	movs	r3, #41	; 0x29
 8012ff2:	222c      	movs	r2, #44	; 0x2c
 8012ff4:	f7f7 fb92 	bl	800a71c <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8012ff8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012ffc:	f107 0110 	add.w	r1, r7, #16
 8013000:	2202      	movs	r2, #2
 8013002:	4618      	mov	r0, r3
 8013004:	f7f7 fb2c 	bl	800a660 <_ZNK12SimpleString9subStringEj>
 8013008:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801300c:	f107 0310 	add.w	r3, r7, #16
 8013010:	4611      	mov	r1, r2
 8013012:	4618      	mov	r0, r3
 8013014:	f7f6 fe85 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 8013018:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801301c:	4618      	mov	r0, r3
 801301e:	f7f7 f9cc 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8013022:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8013026:	492a      	ldr	r1, [pc, #168]	; (80130d0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8013028:	2010      	movs	r0, #16
 801302a:	f7f4 fa4b 	bl	80074c4 <_ZnwjPKci>
 801302e:	4604      	mov	r4, r0
 8013030:	f107 0310 	add.w	r3, r7, #16
 8013034:	4619      	mov	r1, r3
 8013036:	4620      	mov	r0, r4
 8013038:	f009 fc44 	bl	801c8c4 <_ZN10TestFilterC1ERK12SimpleString>
 801303c:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 801303e:	f107 0318 	add.w	r3, r7, #24
 8013042:	2100      	movs	r1, #0
 8013044:	4618      	mov	r0, r3
 8013046:	f7f7 fb1c 	bl	800a682 <_ZNK12SimpleString2atEj>
 801304a:	4603      	mov	r3, r0
 801304c:	461a      	mov	r2, r3
 801304e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8013052:	f107 0118 	add.w	r1, r7, #24
 8013056:	232c      	movs	r3, #44	; 0x2c
 8013058:	f7f7 fb60 	bl	800a71c <_ZNK12SimpleString17subStringFromTillEcc>
 801305c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8013060:	f240 125b 	movw	r2, #347	; 0x15b
 8013064:	491a      	ldr	r1, [pc, #104]	; (80130d0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8013066:	2010      	movs	r0, #16
 8013068:	f7f4 fa2c 	bl	80074c4 <_ZnwjPKci>
 801306c:	4604      	mov	r4, r0
 801306e:	4629      	mov	r1, r5
 8013070:	4620      	mov	r0, r4
 8013072:	f009 fc27 	bl	801c8c4 <_ZN10TestFilterC1ERK12SimpleString>
 8013076:	63bc      	str	r4, [r7, #56]	; 0x38
 8013078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801307c:	4618      	mov	r0, r3
 801307e:	f7f7 f99c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 8013082:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013084:	f009 fc59 	bl	801c93a <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 8013088:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801308a:	f009 fc56 	bl	801c93a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013092:	4619      	mov	r1, r3
 8013094:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013096:	f009 fc35 	bl	801c904 <_ZN10TestFilter3addEPS_>
 801309a:	4602      	mov	r2, r0
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130a4:	4619      	mov	r1, r3
 80130a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80130a8:	f009 fc2c 	bl	801c904 <_ZN10TestFilter3addEPS_>
 80130ac:	4602      	mov	r2, r0
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80130b2:	f107 0310 	add.w	r3, r7, #16
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7f7 f97f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80130bc:	f107 0318 	add.w	r3, r7, #24
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7f7 f97a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 80130c6:	bf00      	nop
 80130c8:	3740      	adds	r7, #64	; 0x40
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bdb0      	pop	{r4, r5, r7, pc}
 80130ce:	bf00      	nop
 80130d0:	08022460 	.word	0x08022460

080130d4 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 80130d4:	b590      	push	{r4, r7, lr}
 80130d6:	b08b      	sub	sp, #44	; 0x2c
 80130d8:	af02      	add	r7, sp, #8
 80130da:	60f8      	str	r0, [r7, #12]
 80130dc:	60b9      	str	r1, [r7, #8]
 80130de:	607a      	str	r2, [r7, #4]
 80130e0:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 80130e2:	f107 0318 	add.w	r3, r7, #24
 80130e6:	491b      	ldr	r1, [pc, #108]	; (8013154 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 80130e8:	4618      	mov	r0, r3
 80130ea:	f7f6 fdae 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80130ee:	f107 0010 	add.w	r0, r7, #16
 80130f2:	f107 0318 	add.w	r3, r7, #24
 80130f6:	9301      	str	r3, [sp, #4]
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	9300      	str	r3, [sp, #0]
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	68ba      	ldr	r2, [r7, #8]
 8013100:	68f9      	ldr	r1, [r7, #12]
 8013102:	f7ff fc23 	bl	801294c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013106:	f107 0318 	add.w	r3, r7, #24
 801310a:	4618      	mov	r0, r3
 801310c:	f7f7 f955 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8013110:	f107 0310 	add.w	r3, r7, #16
 8013114:	4618      	mov	r0, r3
 8013116:	f7f7 f92f 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 801311a:	4603      	mov	r3, r0
 801311c:	2b00      	cmp	r3, #0
 801311e:	bf0c      	ite	eq
 8013120:	2301      	moveq	r3, #1
 8013122:	2300      	movne	r3, #0
 8013124:	b2db      	uxtb	r3, r3
 8013126:	2b00      	cmp	r3, #0
 8013128:	d001      	beq.n	801312e <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 801312a:	2400      	movs	r4, #0
 801312c:	e008      	b.n	8013140 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	3330      	adds	r3, #48	; 0x30
 8013132:	f107 0210 	add.w	r2, r7, #16
 8013136:	4611      	mov	r1, r2
 8013138:	4618      	mov	r0, r3
 801313a:	f7f6 fdf2 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 801313e:	2401      	movs	r4, #1
 8013140:	f107 0310 	add.w	r3, r7, #16
 8013144:	4618      	mov	r0, r3
 8013146:	f7f7 f938 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801314a:	2c01      	cmp	r4, #1
}
 801314c:	3724      	adds	r7, #36	; 0x24
 801314e:	46bd      	mov	sp, r7
 8013150:	bd90      	pop	{r4, r7, pc}
 8013152:	bf00      	nop
 8013154:	08021b18 	.word	0x08021b18

08013158 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8013158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801315a:	b093      	sub	sp, #76	; 0x4c
 801315c:	af02      	add	r7, sp, #8
 801315e:	60f8      	str	r0, [r7, #12]
 8013160:	60b9      	str	r1, [r7, #8]
 8013162:	607a      	str	r2, [r7, #4]
 8013164:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8013166:	f107 0318 	add.w	r3, r7, #24
 801316a:	4953      	ldr	r1, [pc, #332]	; (80132b8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 801316c:	4618      	mov	r0, r3
 801316e:	f7f6 fd6c 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8013172:	f107 0010 	add.w	r0, r7, #16
 8013176:	f107 0318 	add.w	r3, r7, #24
 801317a:	9301      	str	r3, [sp, #4]
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	9300      	str	r3, [sp, #0]
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	68ba      	ldr	r2, [r7, #8]
 8013184:	68f9      	ldr	r1, [r7, #12]
 8013186:	f7ff fbe1 	bl	801294c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801318a:	f107 0318 	add.w	r3, r7, #24
 801318e:	4618      	mov	r0, r3
 8013190:	f7f7 f913 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8013194:	f107 0310 	add.w	r3, r7, #16
 8013198:	4618      	mov	r0, r3
 801319a:	f7f7 f8ed 	bl	800a378 <_ZNK12SimpleString4sizeEv>
 801319e:	4603      	mov	r3, r0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	bf0c      	ite	eq
 80131a4:	2301      	moveq	r3, #1
 80131a6:	2300      	movne	r3, #0
 80131a8:	b2db      	uxtb	r3, r3
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d001      	beq.n	80131b2 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 80131ae:	2400      	movs	r4, #0
 80131b0:	e078      	b.n	80132a4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 80131b2:	2500      	movs	r5, #0
 80131b4:	f107 0320 	add.w	r3, r7, #32
 80131b8:	4940      	ldr	r1, [pc, #256]	; (80132bc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7f6 fd45 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80131c0:	2601      	movs	r6, #1
 80131c2:	f107 0220 	add.w	r2, r7, #32
 80131c6:	f107 0310 	add.w	r3, r7, #16
 80131ca:	4611      	mov	r1, r2
 80131cc:	4618      	mov	r0, r3
 80131ce:	f7f7 f900 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 80131d2:	4603      	mov	r3, r0
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d111      	bne.n	80131fc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 80131d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80131dc:	4938      	ldr	r1, [pc, #224]	; (80132c0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 80131de:	4618      	mov	r0, r3
 80131e0:	f7f6 fd33 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80131e4:	2501      	movs	r5, #1
 80131e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80131ea:	f107 0310 	add.w	r3, r7, #16
 80131ee:	4611      	mov	r1, r2
 80131f0:	4618      	mov	r0, r3
 80131f2:	f7f7 f8ee 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 80131f6:	4603      	mov	r3, r0
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d001      	beq.n	8013200 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 80131fc:	2401      	movs	r4, #1
 80131fe:	e000      	b.n	8013202 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8013200:	2400      	movs	r4, #0
 8013202:	2d00      	cmp	r5, #0
 8013204:	d004      	beq.n	8013210 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8013206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801320a:	4618      	mov	r0, r3
 801320c:	f7f7 f8d5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8013210:	2e00      	cmp	r6, #0
 8013212:	d004      	beq.n	801321e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8013214:	f107 0320 	add.w	r3, r7, #32
 8013218:	4618      	mov	r0, r3
 801321a:	f7f7 f8ce 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801321e:	2c00      	cmp	r4, #0
 8013220:	d005      	beq.n	801322e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	2200      	movs	r2, #0
 8013226:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 801322a:	2401      	movs	r4, #1
 801322c:	e03a      	b.n	80132a4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 801322e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013232:	4924      	ldr	r1, [pc, #144]	; (80132c4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8013234:	4618      	mov	r0, r3
 8013236:	f7f6 fd08 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801323a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801323e:	f107 0310 	add.w	r3, r7, #16
 8013242:	4611      	mov	r1, r2
 8013244:	4618      	mov	r0, r3
 8013246:	f7f7 f8c4 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801324a:	4603      	mov	r3, r0
 801324c:	461c      	mov	r4, r3
 801324e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013252:	4618      	mov	r0, r3
 8013254:	f7f7 f8b1 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8013258:	2c00      	cmp	r4, #0
 801325a:	d005      	beq.n	8013268 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	2201      	movs	r2, #1
 8013260:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8013264:	2401      	movs	r4, #1
 8013266:	e01d      	b.n	80132a4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8013268:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801326c:	4916      	ldr	r1, [pc, #88]	; (80132c8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 801326e:	4618      	mov	r0, r3
 8013270:	f7f6 fceb 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8013274:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8013278:	f107 0310 	add.w	r3, r7, #16
 801327c:	4611      	mov	r1, r2
 801327e:	4618      	mov	r0, r3
 8013280:	f7f7 f8a7 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 8013284:	4603      	mov	r3, r0
 8013286:	461c      	mov	r4, r3
 8013288:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801328c:	4618      	mov	r0, r3
 801328e:	f7f7 f894 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8013292:	2c00      	cmp	r4, #0
 8013294:	d005      	beq.n	80132a2 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	2202      	movs	r2, #2
 801329a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 801329e:	2401      	movs	r4, #1
 80132a0:	e000      	b.n	80132a4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 80132a2:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80132a4:	f107 0310 	add.w	r3, r7, #16
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7f7 f886 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80132ae:	4623      	mov	r3, r4
}
 80132b0:	4618      	mov	r0, r3
 80132b2:	3744      	adds	r7, #68	; 0x44
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132b8:	08021b14 	.word	0x08021b14
 80132bc:	08022484 	.word	0x08022484
 80132c0:	0802248c 	.word	0x0802248c
 80132c4:	08022494 	.word	0x08022494
 80132c8:	0802249c 	.word	0x0802249c

080132cc <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 80132cc:	b480      	push	{r7}
 80132ce:	b083      	sub	sp, #12
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80132da:	2b01      	cmp	r3, #1
 80132dc:	bf0c      	ite	eq
 80132de:	2301      	moveq	r3, #1
 80132e0:	2300      	movne	r3, #0
 80132e2:	b2db      	uxtb	r3, r3
}
 80132e4:	4618      	mov	r0, r3
 80132e6:	370c      	adds	r7, #12
 80132e8:	46bd      	mov	sp, r7
 80132ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ee:	4770      	bx	lr

080132f0 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 80132f0:	b480      	push	{r7}
 80132f2:	b083      	sub	sp, #12
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80132fe:	2b02      	cmp	r3, #2
 8013300:	bf0c      	ite	eq
 8013302:	2301      	moveq	r3, #1
 8013304:	2300      	movne	r3, #0
 8013306:	b2db      	uxtb	r3, r3
}
 8013308:	4618      	mov	r0, r3
 801330a:	370c      	adds	r7, #12
 801330c:	46bd      	mov	sp, r7
 801330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013312:	4770      	bx	lr

08013314 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8013314:	b480      	push	{r7}
 8013316:	b083      	sub	sp, #12
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
    return packageName_;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	3330      	adds	r3, #48	; 0x30
}
 8013320:	4618      	mov	r0, r3
 8013322:	370c      	adds	r7, #12
 8013324:	46bd      	mov	sp, r7
 8013326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332a:	4770      	bx	lr

0801332c <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 801332c:	b480      	push	{r7}
 801332e:	b083      	sub	sp, #12
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2200      	movs	r2, #0
 8013338:	601a      	str	r2, [r3, #0]
    {}
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	4618      	mov	r0, r3
 801333e:	370c      	adds	r7, #12
 8013340:	46bd      	mov	sp, r7
 8013342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013346:	4770      	bx	lr

08013348 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8013348:	b480      	push	{r7}
 801334a:	b083      	sub	sp, #12
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013356:	2200      	movs	r2, #0
 8013358:	601a      	str	r2, [r3, #0]
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013360:	3304      	adds	r3, #4
 8013362:	f640 72ff 	movw	r2, #4095	; 0xfff
 8013366:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2200      	movs	r2, #0
 801336c:	701a      	strb	r2, [r3, #0]
}
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	4618      	mov	r0, r3
 8013372:	370c      	adds	r7, #12
 8013374:	46bd      	mov	sp, r7
 8013376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337a:	4770      	bx	lr

0801337c <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 801337c:	b480      	push	{r7}
 801337e:	b083      	sub	sp, #12
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801338a:	2200      	movs	r2, #0
 801338c:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	2200      	movs	r2, #0
 8013392:	701a      	strb	r2, [r3, #0]
}
 8013394:	bf00      	nop
 8013396:	370c      	adds	r7, #12
 8013398:	46bd      	mov	sp, r7
 801339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339e:	4770      	bx	lr

080133a0 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 80133a0:	b40e      	push	{r1, r2, r3}
 80133a2:	b590      	push	{r4, r7, lr}
 80133a4:	b086      	sub	sp, #24
 80133a6:	af00      	add	r7, sp, #0
 80133a8:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80133b0:	3304      	adds	r3, #4
 80133b2:	681a      	ldr	r2, [r3, #0]
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	1ad3      	subs	r3, r2, r3
 80133be:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d032      	beq.n	801342c <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 80133c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80133ca:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 80133cc:	4b1b      	ldr	r3, [pc, #108]	; (801343c <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 80133ce:	681c      	ldr	r4, [r3, #0]
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	18d0      	adds	r0, r2, r3
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	1c59      	adds	r1, r3, #1
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133e4:	47a0      	blx	r4
 80133e6:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	dd09      	ble.n	8013402 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80133f4:	681a      	ldr	r2, [r3, #0]
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	441a      	add	r2, r3
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013400:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013408:	681a      	ldr	r2, [r3, #0]
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013410:	3304      	adds	r3, #4
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	429a      	cmp	r2, r3
 8013416:	d90a      	bls.n	801342e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801341e:	3304      	adds	r3, #4
 8013420:	681a      	ldr	r2, [r3, #0]
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013428:	601a      	str	r2, [r3, #0]
 801342a:	e000      	b.n	801342e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 801342c:	bf00      	nop
    va_end(arguments);
}
 801342e:	3718      	adds	r7, #24
 8013430:	46bd      	mov	sp, r7
 8013432:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8013436:	b003      	add	sp, #12
 8013438:	4770      	bx	lr
 801343a:	bf00      	nop
 801343c:	200000ac 	.word	0x200000ac

08013440 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b08c      	sub	sp, #48	; 0x30
 8013444:	af00      	add	r7, sp, #0
 8013446:	60f8      	str	r0, [r7, #12]
 8013448:	60b9      	str	r1, [r7, #8]
 801344a:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8013450:	2310      	movs	r3, #16
 8013452:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8013454:	2300      	movs	r3, #0
 8013456:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8013458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	429a      	cmp	r2, r3
 801345e:	d273      	bcs.n	8013548 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8013460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013462:	493b      	ldr	r1, [pc, #236]	; (8013550 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8013464:	68f8      	ldr	r0, [r7, #12]
 8013466:	f7ff ff9b 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 801346a:	687a      	ldr	r2, [r7, #4]
 801346c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801346e:	1ad3      	subs	r3, r2, r3
 8013470:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8013472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013474:	2b10      	cmp	r3, #16
 8013476:	d901      	bls.n	801347c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8013478:	2310      	movs	r3, #16
 801347a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 801347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801347e:	f1c3 0310 	rsb	r3, r3, #16
 8013482:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8013484:	2300      	movs	r3, #0
 8013486:	62bb      	str	r3, [r7, #40]	; 0x28
 8013488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801348c:	429a      	cmp	r2, r3
 801348e:	d215      	bcs.n	80134bc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8013490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013494:	4413      	add	r3, r2
 8013496:	69fa      	ldr	r2, [r7, #28]
 8013498:	4413      	add	r3, r2
 801349a:	781b      	ldrb	r3, [r3, #0]
 801349c:	461a      	mov	r2, r3
 801349e:	492d      	ldr	r1, [pc, #180]	; (8013554 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 80134a0:	68f8      	ldr	r0, [r7, #12]
 80134a2:	f7ff ff7d 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 80134a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a8:	2b07      	cmp	r3, #7
 80134aa:	d103      	bne.n	80134b4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 80134ac:	492a      	ldr	r1, [pc, #168]	; (8013558 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 80134ae:	68f8      	ldr	r0, [r7, #12]
 80134b0:	f7ff ff76 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80134b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b6:	3301      	adds	r3, #1
 80134b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80134ba:	e7e5      	b.n	8013488 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 80134bc:	2300      	movs	r3, #0
 80134be:	62bb      	str	r3, [r7, #40]	; 0x28
 80134c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d207      	bcs.n	80134d8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 80134c8:	4924      	ldr	r1, [pc, #144]	; (801355c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 80134ca:	68f8      	ldr	r0, [r7, #12]
 80134cc:	f7ff ff68 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 80134d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d2:	3301      	adds	r3, #1
 80134d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80134d6:	e7f3      	b.n	80134c0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	2b08      	cmp	r3, #8
 80134dc:	d903      	bls.n	80134e6 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 80134de:	491e      	ldr	r1, [pc, #120]	; (8013558 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 80134e0:	68f8      	ldr	r0, [r7, #12]
 80134e2:	f7ff ff5d 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 80134e6:	491e      	ldr	r1, [pc, #120]	; (8013560 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 80134e8:	68f8      	ldr	r0, [r7, #12]
 80134ea:	f7ff ff59 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80134ee:	2300      	movs	r3, #0
 80134f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80134f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d21d      	bcs.n	8013536 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 80134fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134fe:	4413      	add	r3, r2
 8013500:	69fa      	ldr	r2, [r7, #28]
 8013502:	4413      	add	r3, r2
 8013504:	781b      	ldrb	r3, [r3, #0]
 8013506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 801350a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801350e:	2b1f      	cmp	r3, #31
 8013510:	d903      	bls.n	801351a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8013512:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013516:	2b7e      	cmp	r3, #126	; 0x7e
 8013518:	d902      	bls.n	8013520 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 801351a:	232e      	movs	r3, #46	; 0x2e
 801351c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8013520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013524:	461a      	mov	r2, r3
 8013526:	490f      	ldr	r1, [pc, #60]	; (8013564 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8013528:	68f8      	ldr	r0, [r7, #12]
 801352a:	f7ff ff39 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013530:	3301      	adds	r3, #1
 8013532:	62bb      	str	r3, [r7, #40]	; 0x28
 8013534:	e7dd      	b.n	80134f2 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8013536:	490c      	ldr	r1, [pc, #48]	; (8013568 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8013538:	68f8      	ldr	r0, [r7, #12]
 801353a:	f7ff ff31 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 801353e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013542:	4413      	add	r3, r2
 8013544:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 8013546:	e787      	b.n	8013458 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8013548:	bf00      	nop
 801354a:	3730      	adds	r7, #48	; 0x30
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}
 8013550:	080224b4 	.word	0x080224b4
 8013554:	080224c0 	.word	0x080224c0
 8013558:	080224c8 	.word	0x080224c8
 801355c:	080224cc 	.word	0x080224cc
 8013560:	080224d0 	.word	0x080224d0
 8013564:	080224d4 	.word	0x080224d4
 8013568:	080224d8 	.word	0x080224d8

0801356c <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 801356c:	b480      	push	{r7}
 801356e:	b083      	sub	sp, #12
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
    return buffer_;
 8013574:	687b      	ldr	r3, [r7, #4]
}
 8013576:	4618      	mov	r0, r3
 8013578:	370c      	adds	r7, #12
 801357a:	46bd      	mov	sp, r7
 801357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013580:	4770      	bx	lr

08013582 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8013582:	b480      	push	{r7}
 8013584:	b083      	sub	sp, #12
 8013586:	af00      	add	r7, sp, #0
 8013588:	6078      	str	r0, [r7, #4]
 801358a:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013592:	3304      	adds	r3, #4
 8013594:	683a      	ldr	r2, [r7, #0]
 8013596:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801359e:	3304      	adds	r3, #4
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80135a6:	d306      	bcc.n	80135b6 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80135ae:	3304      	adds	r3, #4
 80135b0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80135b4:	601a      	str	r2, [r3, #0]
}
 80135b6:	bf00      	nop
 80135b8:	370c      	adds	r7, #12
 80135ba:	46bd      	mov	sp, r7
 80135bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c0:	4770      	bx	lr

080135c2 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 80135c2:	b480      	push	{r7}
 80135c4:	b083      	sub	sp, #12
 80135c6:	af00      	add	r7, sp, #0
 80135c8:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80135d0:	3304      	adds	r3, #4
 80135d2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80135d6:	601a      	str	r2, [r3, #0]
}
 80135d8:	bf00      	nop
 80135da:	370c      	adds	r7, #12
 80135dc:	46bd      	mov	sp, r7
 80135de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e2:	4770      	bx	lr

080135e4 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 80135e4:	b480      	push	{r7}
 80135e6:	b083      	sub	sp, #12
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80135f2:	681a      	ldr	r2, [r3, #0]
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80135fa:	3304      	adds	r3, #4
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	429a      	cmp	r2, r3
 8013600:	bf2c      	ite	cs
 8013602:	2301      	movcs	r3, #1
 8013604:	2300      	movcc	r3, #0
 8013606:	b2db      	uxtb	r3, r3
}
 8013608:	4618      	mov	r0, r3
 801360a:	370c      	adds	r7, #12
 801360c:	46bd      	mov	sp, r7
 801360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013612:	4770      	bx	lr

08013614 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8013614:	b580      	push	{r7, lr}
 8013616:	b082      	sub	sp, #8
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	2200      	movs	r2, #0
 8013620:	601a      	str	r2, [r3, #0]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	2200      	movs	r2, #0
 8013626:	711a      	strb	r2, [r3, #4]
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	3308      	adds	r3, #8
 801362c:	4618      	mov	r0, r3
 801362e:	f7ff fe8b 	bl	8013348 <_ZN18SimpleStringBufferC1Ev>
{
}
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	4618      	mov	r0, r3
 8013636:	3708      	adds	r7, #8
 8013638:	46bd      	mov	sp, r7
 801363a:	bd80      	pop	{r7, pc}

0801363c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 801363c:	b5b0      	push	{r4, r5, r7, lr}
 801363e:	b086      	sub	sp, #24
 8013640:	af02      	add	r7, sp, #8
 8013642:	60f8      	str	r0, [r7, #12]
 8013644:	60b9      	str	r1, [r7, #8]
 8013646:	607a      	str	r2, [r7, #4]
 8013648:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	f103 0408 	add.w	r4, r3, #8
 8013650:	687d      	ldr	r5, [r7, #4]
 8013652:	6a3b      	ldr	r3, [r7, #32]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	3314      	adds	r3, #20
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	6a38      	ldr	r0, [r7, #32]
 801365c:	4798      	blx	r3
 801365e:	4603      	mov	r3, r0
 8013660:	9301      	str	r3, [sp, #4]
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	9300      	str	r3, [sp, #0]
 8013666:	462b      	mov	r3, r5
 8013668:	68ba      	ldr	r2, [r7, #8]
 801366a:	4904      	ldr	r1, [pc, #16]	; (801367c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 801366c:	4620      	mov	r0, r4
 801366e:	f7ff fe97 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013672:	bf00      	nop
 8013674:	3710      	adds	r7, #16
 8013676:	46bd      	mov	sp, r7
 8013678:	bdb0      	pop	{r4, r5, r7, pc}
 801367a:	bf00      	nop
 801367c:	080224dc 	.word	0x080224dc

08013680 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8013680:	b5b0      	push	{r4, r5, r7, lr}
 8013682:	b086      	sub	sp, #24
 8013684:	af02      	add	r7, sp, #8
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	607a      	str	r2, [r7, #4]
 801368c:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	f103 0408 	add.w	r4, r3, #8
 8013694:	687d      	ldr	r5, [r7, #4]
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	3318      	adds	r3, #24
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	6838      	ldr	r0, [r7, #0]
 80136a0:	4798      	blx	r3
 80136a2:	4603      	mov	r3, r0
 80136a4:	9300      	str	r3, [sp, #0]
 80136a6:	462b      	mov	r3, r5
 80136a8:	68ba      	ldr	r2, [r7, #8]
 80136aa:	4904      	ldr	r1, [pc, #16]	; (80136bc <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 80136ac:	4620      	mov	r0, r4
 80136ae:	f7ff fe77 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80136b2:	bf00      	nop
 80136b4:	3710      	adds	r7, #16
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bdb0      	pop	{r4, r5, r7, pc}
 80136ba:	bf00      	nop
 80136bc:	08022514 	.word	0x08022514

080136c0 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b082      	sub	sp, #8
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	3308      	adds	r3, #8
 80136cc:	4903      	ldr	r1, [pc, #12]	; (80136dc <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 80136ce:	4618      	mov	r0, r3
 80136d0:	f7ff fe66 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80136d4:	bf00      	nop
 80136d6:	3708      	adds	r7, #8
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}
 80136dc:	08022544 	.word	0x08022544

080136e0 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b084      	sub	sp, #16
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	2200      	movs	r2, #0
 80136ec:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	2200      	movs	r2, #0
 80136f2:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 80136f4:	2367      	movs	r3, #103	; 0x67
 80136f6:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	f203 1311 	addw	r3, r3, #273	; 0x111
 80136fe:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	f103 0208 	add.w	r2, r3, #8
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801370c:	4619      	mov	r1, r3
 801370e:	4610      	mov	r0, r2
 8013710:	f7ff ff37 	bl	8013582 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8013714:	bf00      	nop
 8013716:	3710      	adds	r7, #16
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}

0801371c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 801371c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801371e:	b089      	sub	sp, #36	; 0x24
 8013720:	af04      	add	r7, sp, #16
 8013722:	60f8      	str	r0, [r7, #12]
 8013724:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d102      	bne.n	8013734 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 801372e:	68f8      	ldr	r0, [r7, #12]
 8013730:	f000 f882 	bl	8013838 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	1c5a      	adds	r2, r3, #1
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	f103 0508 	add.w	r5, r3, #8
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8013756:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	695a      	ldr	r2, [r3, #20]
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	695b      	ldr	r3, [r3, #20]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	3314      	adds	r3, #20
 8013764:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8013766:	4610      	mov	r0, r2
 8013768:	4798      	blx	r3
 801376a:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8013770:	9303      	str	r3, [sp, #12]
 8013772:	9202      	str	r2, [sp, #8]
 8013774:	683a      	ldr	r2, [r7, #0]
 8013776:	9201      	str	r2, [sp, #4]
 8013778:	9400      	str	r4, [sp, #0]
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	4632      	mov	r2, r6
 801377e:	4915      	ldr	r1, [pc, #84]	; (80137d4 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8013780:	4628      	mov	r0, r5
 8013782:	f7ff fe0d 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	f103 0008 	add.w	r0, r3, #8
 801378c:	68bb      	ldr	r3, [r7, #8]
 801378e:	6899      	ldr	r1, [r3, #8]
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	461a      	mov	r2, r3
 8013796:	f7ff fe53 	bl	8013440 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	695a      	ldr	r2, [r3, #20]
 801379e:	68bb      	ldr	r3, [r7, #8]
 80137a0:	695b      	ldr	r3, [r3, #20]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	3314      	adds	r3, #20
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	4610      	mov	r0, r2
 80137aa:	4798      	blx	r3
 80137ac:	4603      	mov	r3, r0
 80137ae:	490a      	ldr	r1, [pc, #40]	; (80137d8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7f6 f887 	bl	80098c4 <_ZN12SimpleString6StrCmpEPKcS1_>
 80137b6:	4603      	mov	r3, r0
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	bf0c      	ite	eq
 80137bc:	2301      	moveq	r3, #1
 80137be:	2300      	movne	r3, #0
 80137c0:	b2db      	uxtb	r3, r3
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d002      	beq.n	80137cc <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	2201      	movs	r2, #1
 80137ca:	711a      	strb	r2, [r3, #4]
}
 80137cc:	bf00      	nop
 80137ce:	3714      	adds	r7, #20
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137d4:	08022564 	.word	0x08022564
 80137d8:	080225c4 	.word	0x080225c4

080137dc <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b084      	sub	sp, #16
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d103      	bne.n	80137f4 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 80137ec:	6878      	ldr	r0, [r7, #4]
 80137ee:	f7ff ff67 	bl	80136c0 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 80137f2:	e01e      	b.n	8013832 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	3308      	adds	r3, #8
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7ff fef3 	bl	80135e4 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 80137fe:	4603      	mov	r3, r0
 8013800:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	3308      	adds	r3, #8
 8013806:	4618      	mov	r0, r3
 8013808:	f7ff fedb 	bl	80135c2 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 801380c:	7bfb      	ldrb	r3, [r7, #15]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d002      	beq.n	8013818 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	f000 f820 	bl	8013858 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	4619      	mov	r1, r3
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f000 f82a 	bl	8013878 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	791b      	ldrb	r3, [r3, #4]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d002      	beq.n	8013832 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 801382c:	6878      	ldr	r0, [r7, #4]
 801382e:	f000 f839 	bl	80138a4 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8013832:	3710      	adds	r7, #16
 8013834:	46bd      	mov	sp, r7
 8013836:	bd80      	pop	{r7, pc}

08013838 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b082      	sub	sp, #8
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	3308      	adds	r3, #8
 8013844:	4903      	ldr	r1, [pc, #12]	; (8013854 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8013846:	4618      	mov	r0, r3
 8013848:	f7ff fdaa 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801384c:	bf00      	nop
 801384e:	3708      	adds	r7, #8
 8013850:	46bd      	mov	sp, r7
 8013852:	bd80      	pop	{r7, pc}
 8013854:	080225cc 	.word	0x080225cc

08013858 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	3308      	adds	r3, #8
 8013864:	4903      	ldr	r1, [pc, #12]	; (8013874 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8013866:	4618      	mov	r0, r3
 8013868:	f7ff fd9a 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801386c:	bf00      	nop
 801386e:	3708      	adds	r7, #8
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}
 8013874:	080225e4 	.word	0x080225e4

08013878 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f103 0008 	add.w	r0, r3, #8
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	4a04      	ldr	r2, [pc, #16]	; (801389c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 801388c:	4904      	ldr	r1, [pc, #16]	; (80138a0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 801388e:	f7ff fd87 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013892:	bf00      	nop
 8013894:	3708      	adds	r7, #8
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}
 801389a:	bf00      	nop
 801389c:	0802262c 	.word	0x0802262c
 80138a0:	08022644 	.word	0x08022644

080138a4 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b082      	sub	sp, #8
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	3308      	adds	r3, #8
 80138b0:	4903      	ldr	r1, [pc, #12]	; (80138c0 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 80138b2:	4618      	mov	r0, r3
 80138b4:	f7ff fd74 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80138b8:	bf00      	nop
 80138ba:	3708      	adds	r7, #8
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}
 80138c0:	0802264c 	.word	0x0802264c

080138c4 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b08a      	sub	sp, #40	; 0x28
 80138c8:	af06      	add	r7, sp, #24
 80138ca:	60f8      	str	r0, [r7, #12]
 80138cc:	60b9      	str	r1, [r7, #8]
 80138ce:	607a      	str	r2, [r7, #4]
 80138d0:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 80138d2:	f7f9 fe8d 	bl	800d5f0 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 80138d6:	4602      	mov	r2, r0
 80138d8:	69bb      	ldr	r3, [r7, #24]
 80138da:	9305      	str	r3, [sp, #20]
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	9304      	str	r3, [sp, #16]
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	9303      	str	r3, [sp, #12]
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	9302      	str	r3, [sp, #8]
 80138e8:	9201      	str	r2, [sp, #4]
 80138ea:	2300      	movs	r3, #0
 80138ec:	9300      	str	r3, [sp, #0]
 80138ee:	2300      	movs	r3, #0
 80138f0:	4a04      	ldr	r2, [pc, #16]	; (8013904 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 80138f2:	4905      	ldr	r1, [pc, #20]	; (8013908 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 80138f4:	68f8      	ldr	r0, [r7, #12]
 80138f6:	f000 f855 	bl	80139a4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80138fa:	bf00      	nop
 80138fc:	3710      	adds	r7, #16
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop
 8013904:	080224a8 	.word	0x080224a8
 8013908:	08022760 	.word	0x08022760

0801390c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 801390c:	b590      	push	{r4, r7, lr}
 801390e:	b08b      	sub	sp, #44	; 0x2c
 8013910:	af06      	add	r7, sp, #24
 8013912:	60f8      	str	r0, [r7, #12]
 8013914:	60b9      	str	r1, [r7, #8]
 8013916:	607a      	str	r2, [r7, #4]
 8013918:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	68d8      	ldr	r0, [r3, #12]
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	691c      	ldr	r4, [r3, #16]
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	68ba      	ldr	r2, [r7, #8]
 8013928:	6952      	ldr	r2, [r2, #20]
 801392a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801392c:	9105      	str	r1, [sp, #20]
 801392e:	6a39      	ldr	r1, [r7, #32]
 8013930:	9104      	str	r1, [sp, #16]
 8013932:	6839      	ldr	r1, [r7, #0]
 8013934:	9103      	str	r1, [sp, #12]
 8013936:	6879      	ldr	r1, [r7, #4]
 8013938:	9102      	str	r1, [sp, #8]
 801393a:	9201      	str	r2, [sp, #4]
 801393c:	9300      	str	r3, [sp, #0]
 801393e:	4623      	mov	r3, r4
 8013940:	4602      	mov	r2, r0
 8013942:	4904      	ldr	r1, [pc, #16]	; (8013954 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8013944:	68f8      	ldr	r0, [r7, #12]
 8013946:	f000 f82d 	bl	80139a4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801394a:	bf00      	nop
 801394c:	3714      	adds	r7, #20
 801394e:	46bd      	mov	sp, r7
 8013950:	bd90      	pop	{r4, r7, pc}
 8013952:	bf00      	nop
 8013954:	08022784 	.word	0x08022784

08013958 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8013958:	b590      	push	{r4, r7, lr}
 801395a:	b08b      	sub	sp, #44	; 0x2c
 801395c:	af06      	add	r7, sp, #24
 801395e:	60f8      	str	r0, [r7, #12]
 8013960:	60b9      	str	r1, [r7, #8]
 8013962:	607a      	str	r2, [r7, #4]
 8013964:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	68d8      	ldr	r0, [r3, #12]
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	691c      	ldr	r4, [r3, #16]
 801396e:	68bb      	ldr	r3, [r7, #8]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	68ba      	ldr	r2, [r7, #8]
 8013974:	6952      	ldr	r2, [r2, #20]
 8013976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013978:	9105      	str	r1, [sp, #20]
 801397a:	6a39      	ldr	r1, [r7, #32]
 801397c:	9104      	str	r1, [sp, #16]
 801397e:	6839      	ldr	r1, [r7, #0]
 8013980:	9103      	str	r1, [sp, #12]
 8013982:	6879      	ldr	r1, [r7, #4]
 8013984:	9102      	str	r1, [sp, #8]
 8013986:	9201      	str	r2, [sp, #4]
 8013988:	9300      	str	r3, [sp, #0]
 801398a:	4623      	mov	r3, r4
 801398c:	4602      	mov	r2, r0
 801398e:	4904      	ldr	r1, [pc, #16]	; (80139a0 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8013990:	68f8      	ldr	r0, [r7, #12]
 8013992:	f000 f807 	bl	80139a4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8013996:	bf00      	nop
 8013998:	3714      	adds	r7, #20
 801399a:	46bd      	mov	sp, r7
 801399c:	bd90      	pop	{r4, r7, pc}
 801399e:	bf00      	nop
 80139a0:	080227ac 	.word	0x080227ac

080139a4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80139a4:	b590      	push	{r4, r7, lr}
 80139a6:	b087      	sub	sp, #28
 80139a8:	af02      	add	r7, sp, #8
 80139aa:	60f8      	str	r0, [r7, #12]
 80139ac:	60b9      	str	r1, [r7, #8]
 80139ae:	607a      	str	r2, [r7, #4]
 80139b0:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	3308      	adds	r3, #8
 80139b6:	68ba      	ldr	r2, [r7, #8]
 80139b8:	4910      	ldr	r1, [pc, #64]	; (80139fc <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7ff fcf0 	bl	80133a0 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 80139c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c2:	9300      	str	r3, [sp, #0]
 80139c4:	6a3b      	ldr	r3, [r7, #32]
 80139c6:	683a      	ldr	r2, [r7, #0]
 80139c8:	6879      	ldr	r1, [r7, #4]
 80139ca:	68f8      	ldr	r0, [r7, #12]
 80139cc:	f7ff fe36 	bl	801363c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 80139d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80139d6:	68f8      	ldr	r0, [r7, #12]
 80139d8:	f7ff fe52 	bl	8013680 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 80139dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	3308      	adds	r3, #8
 80139e2:	681c      	ldr	r4, [r3, #0]
 80139e4:	68f8      	ldr	r0, [r7, #12]
 80139e6:	f000 f80b 	bl	8013a00 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 80139ea:	4603      	mov	r3, r0
 80139ec:	4619      	mov	r1, r3
 80139ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80139f0:	47a0      	blx	r4
}
 80139f2:	bf00      	nop
 80139f4:	3714      	adds	r7, #20
 80139f6:	46bd      	mov	sp, r7
 80139f8:	bd90      	pop	{r4, r7, pc}
 80139fa:	bf00      	nop
 80139fc:	080227d8 	.word	0x080227d8

08013a00 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b082      	sub	sp, #8
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	3308      	adds	r3, #8
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7ff fdad 	bl	801356c <_ZN18SimpleStringBuffer8toStringEv>
 8013a12:	4603      	mov	r3, r0
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	3708      	adds	r7, #8
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}

08013a1c <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b082      	sub	sp, #8
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	3308      	adds	r3, #8
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f7ff fca7 	bl	801337c <_ZN18SimpleStringBuffer5clearEv>
}
 8013a2e:	bf00      	nop
 8013a30:	3708      	adds	r7, #8
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd80      	pop	{r7, pc}

08013a36 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8013a36:	b480      	push	{r7}
 8013a38:	b085      	sub	sp, #20
 8013a3a:	af00      	add	r7, sp, #0
 8013a3c:	60f8      	str	r0, [r7, #12]
 8013a3e:	60b9      	str	r1, [r7, #8]
 8013a40:	607a      	str	r2, [r7, #4]
 8013a42:	603b      	str	r3, [r7, #0]
    number_ = number;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	687a      	ldr	r2, [r7, #4]
 8013a48:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	68ba      	ldr	r2, [r7, #8]
 8013a4e:	609a      	str	r2, [r3, #8]
    size_ = size;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	683a      	ldr	r2, [r7, #0]
 8013a54:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	69ba      	ldr	r2, [r7, #24]
 8013a5a:	615a      	str	r2, [r3, #20]
    period_ = period;
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	7f3a      	ldrb	r2, [r7, #28]
 8013a60:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	f897 2020 	ldrb.w	r2, [r7, #32]
 8013a68:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a6e:	60da      	str	r2, [r3, #12]
    line_ = line;
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a74:	611a      	str	r2, [r3, #16]
}
 8013a76:	bf00      	nop
 8013a78:	3714      	adds	r7, #20
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr

08013a82 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8013a82:	b480      	push	{r7}
 8013a84:	b085      	sub	sp, #20
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	60f8      	str	r0, [r7, #12]
 8013a8a:	60b9      	str	r1, [r7, #8]
 8013a8c:	4613      	mov	r3, r2
 8013a8e:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8013a90:	79fb      	ldrb	r3, [r7, #7]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d00b      	beq.n	8013aae <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8013a96:	68bb      	ldr	r3, [r7, #8]
 8013a98:	7e1b      	ldrb	r3, [r3, #24]
 8013a9a:	79fa      	ldrb	r2, [r7, #7]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d006      	beq.n	8013aae <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8013aa0:	68bb      	ldr	r3, [r7, #8]
 8013aa2:	7e1b      	ldrb	r3, [r3, #24]
 8013aa4:	2b01      	cmp	r3, #1
 8013aa6:	d004      	beq.n	8013ab2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8013aa8:	79fb      	ldrb	r3, [r7, #7]
 8013aaa:	2b02      	cmp	r3, #2
 8013aac:	d101      	bne.n	8013ab2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8013aae:	2301      	movs	r3, #1
 8013ab0:	e000      	b.n	8013ab4 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8013ab2:	2300      	movs	r3, #0
}
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	3714      	adds	r7, #20
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013abe:	4770      	bx	lr

08013ac0 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8013ac0:	b480      	push	{r7}
 8013ac2:	b083      	sub	sp, #12
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
 8013ac8:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	681a      	ldr	r2, [r3, #0]
 8013ace:	683b      	ldr	r3, [r7, #0]
 8013ad0:	61da      	str	r2, [r3, #28]
    head_ = node;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	683a      	ldr	r2, [r7, #0]
 8013ad6:	601a      	str	r2, [r3, #0]
}
 8013ad8:	bf00      	nop
 8013ada:	370c      	adds	r7, #12
 8013adc:	46bd      	mov	sp, r7
 8013ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae2:	4770      	bx	lr

08013ae4 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8013ae4:	b480      	push	{r7}
 8013ae6:	b085      	sub	sp, #20
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8013af4:	2300      	movs	r3, #0
 8013af6:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d019      	beq.n	8013b32 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	689b      	ldr	r3, [r3, #8]
 8013b02:	683a      	ldr	r2, [r7, #0]
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d10e      	bne.n	8013b26 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d005      	beq.n	8013b1a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	69da      	ldr	r2, [r3, #28]
 8013b12:	68bb      	ldr	r3, [r7, #8]
 8013b14:	61da      	str	r2, [r3, #28]
                return cur;
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	e00c      	b.n	8013b34 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	69da      	ldr	r2, [r3, #28]
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	601a      	str	r2, [r3, #0]
                return cur;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	e006      	b.n	8013b34 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	69db      	ldr	r3, [r3, #28]
 8013b2e:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8013b30:	e7e2      	b.n	8013af8 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8013b32:	2300      	movs	r3, #0
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3714      	adds	r7, #20
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3e:	4770      	bx	lr

08013b40 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8013b40:	b480      	push	{r7}
 8013b42:	b085      	sub	sp, #20
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
 8013b48:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d00a      	beq.n	8013b6c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	689b      	ldr	r3, [r3, #8]
 8013b5a:	683a      	ldr	r2, [r7, #0]
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	d101      	bne.n	8013b64 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	e004      	b.n	8013b6e <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	69db      	ldr	r3, [r3, #28]
 8013b68:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8013b6a:	e7f1      	b.n	8013b50 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8013b6c:	2300      	movs	r3, #0
}
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3714      	adds	r7, #20
 8013b72:	46bd      	mov	sp, r7
 8013b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b78:	4770      	bx	lr

08013b7a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8013b7a:	b580      	push	{r7, lr}
 8013b7c:	b086      	sub	sp, #24
 8013b7e:	af00      	add	r7, sp, #0
 8013b80:	60f8      	str	r0, [r7, #12]
 8013b82:	60b9      	str	r1, [r7, #8]
 8013b84:	4613      	mov	r3, r2
 8013b86:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	617b      	str	r3, [r7, #20]
 8013b8c:	697b      	ldr	r3, [r7, #20]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d00e      	beq.n	8013bb0 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 8013b92:	79fb      	ldrb	r3, [r7, #7]
 8013b94:	461a      	mov	r2, r3
 8013b96:	6979      	ldr	r1, [r7, #20]
 8013b98:	68f8      	ldr	r0, [r7, #12]
 8013b9a:	f7ff ff72 	bl	8013a82 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d001      	beq.n	8013ba8 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	e004      	b.n	8013bb2 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8013ba8:	697b      	ldr	r3, [r7, #20]
 8013baa:	69db      	ldr	r3, [r3, #28]
 8013bac:	617b      	str	r3, [r7, #20]
 8013bae:	e7ed      	b.n	8013b8c <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8013bb0:	2300      	movs	r3, #0
}
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	3718      	adds	r7, #24
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	bd80      	pop	{r7, pc}

08013bba <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8013bba:	b580      	push	{r7, lr}
 8013bbc:	b082      	sub	sp, #8
 8013bbe:	af00      	add	r7, sp, #0
 8013bc0:	6078      	str	r0, [r7, #4]
 8013bc2:	460b      	mov	r3, r1
 8013bc4:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	78fa      	ldrb	r2, [r7, #3]
 8013bcc:	4619      	mov	r1, r3
 8013bce:	6878      	ldr	r0, [r7, #4]
 8013bd0:	f7ff ffd3 	bl	8013b7a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8013bd4:	4603      	mov	r3, r0
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3708      	adds	r7, #8
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}

08013bde <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8013bde:	b580      	push	{r7, lr}
 8013be0:	b084      	sub	sp, #16
 8013be2:	af00      	add	r7, sp, #0
 8013be4:	60f8      	str	r0, [r7, #12]
 8013be6:	60b9      	str	r1, [r7, #8]
 8013be8:	4613      	mov	r3, r2
 8013bea:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	69db      	ldr	r3, [r3, #28]
 8013bf0:	79fa      	ldrb	r2, [r7, #7]
 8013bf2:	4619      	mov	r1, r3
 8013bf4:	68f8      	ldr	r0, [r7, #12]
 8013bf6:	f7ff ffc0 	bl	8013b7a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8013bfa:	4603      	mov	r3, r0
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	3710      	adds	r7, #16
 8013c00:	46bd      	mov	sp, r7
 8013c02:	bd80      	pop	{r7, pc}

08013c04 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b084      	sub	sp, #16
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	460b      	mov	r3, r1
 8013c0e:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8013c10:	2300      	movs	r3, #0
 8013c12:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	60bb      	str	r3, [r7, #8]
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d00f      	beq.n	8013c40 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8013c20:	78fb      	ldrb	r3, [r7, #3]
 8013c22:	461a      	mov	r2, r3
 8013c24:	68b9      	ldr	r1, [r7, #8]
 8013c26:	6878      	ldr	r0, [r7, #4]
 8013c28:	f7ff ff2b 	bl	8013a82 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d002      	beq.n	8013c38 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	3301      	adds	r3, #1
 8013c36:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	69db      	ldr	r3, [r3, #28]
 8013c3c:	60bb      	str	r3, [r7, #8]
 8013c3e:	e7ec      	b.n	8013c1a <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8013c40:	68fb      	ldr	r3, [r7, #12]
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	3710      	adds	r7, #16
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd80      	pop	{r7, pc}
	...

08013c4c <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8013c4c:	b480      	push	{r7}
 8013c4e:	b083      	sub	sp, #12
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
 8013c54:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8013c56:	6839      	ldr	r1, [r7, #0]
 8013c58:	4b09      	ldr	r3, [pc, #36]	; (8013c80 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 8013c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8013c5e:	1aca      	subs	r2, r1, r3
 8013c60:	0852      	lsrs	r2, r2, #1
 8013c62:	4413      	add	r3, r2
 8013c64:	099a      	lsrs	r2, r3, #6
 8013c66:	4613      	mov	r3, r2
 8013c68:	00db      	lsls	r3, r3, #3
 8013c6a:	4413      	add	r3, r2
 8013c6c:	00db      	lsls	r3, r3, #3
 8013c6e:	4413      	add	r3, r2
 8013c70:	1aca      	subs	r2, r1, r3
 8013c72:	4613      	mov	r3, r2
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	370c      	adds	r7, #12
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7e:	4770      	bx	lr
 8013c80:	c0e07039 	.word	0xc0e07039

08013c84 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b082      	sub	sp, #8
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
 8013c8c:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	689b      	ldr	r3, [r3, #8]
 8013c92:	4619      	mov	r1, r3
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f7ff ffd9 	bl	8013c4c <_ZN23MemoryLeakDetectorTable4hashEPc>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	009b      	lsls	r3, r3, #2
 8013c9e:	687a      	ldr	r2, [r7, #4]
 8013ca0:	4413      	add	r3, r2
 8013ca2:	6839      	ldr	r1, [r7, #0]
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f7ff ff0b 	bl	8013ac0 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8013caa:	bf00      	nop
 8013cac:	3708      	adds	r7, #8
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bd80      	pop	{r7, pc}

08013cb2 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8013cb2:	b580      	push	{r7, lr}
 8013cb4:	b082      	sub	sp, #8
 8013cb6:	af00      	add	r7, sp, #0
 8013cb8:	6078      	str	r0, [r7, #4]
 8013cba:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8013cbc:	6839      	ldr	r1, [r7, #0]
 8013cbe:	6878      	ldr	r0, [r7, #4]
 8013cc0:	f7ff ffc4 	bl	8013c4c <_ZN23MemoryLeakDetectorTable4hashEPc>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	009b      	lsls	r3, r3, #2
 8013cc8:	687a      	ldr	r2, [r7, #4]
 8013cca:	4413      	add	r3, r2
 8013ccc:	6839      	ldr	r1, [r7, #0]
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f7ff ff08 	bl	8013ae4 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8013cd4:	4603      	mov	r3, r0
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3708      	adds	r7, #8
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}

08013cde <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8013cde:	b580      	push	{r7, lr}
 8013ce0:	b082      	sub	sp, #8
 8013ce2:	af00      	add	r7, sp, #0
 8013ce4:	6078      	str	r0, [r7, #4]
 8013ce6:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8013ce8:	6839      	ldr	r1, [r7, #0]
 8013cea:	6878      	ldr	r0, [r7, #4]
 8013cec:	f7ff ffae 	bl	8013c4c <_ZN23MemoryLeakDetectorTable4hashEPc>
 8013cf0:	4603      	mov	r3, r0
 8013cf2:	009b      	lsls	r3, r3, #2
 8013cf4:	687a      	ldr	r2, [r7, #4]
 8013cf6:	4413      	add	r3, r2
 8013cf8:	6839      	ldr	r1, [r7, #0]
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7ff ff20 	bl	8013b40 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8013d00:	4603      	mov	r3, r0
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	3708      	adds	r7, #8
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}

08013d0a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8013d0a:	b580      	push	{r7, lr}
 8013d0c:	b084      	sub	sp, #16
 8013d0e:	af00      	add	r7, sp, #0
 8013d10:	6078      	str	r0, [r7, #4]
 8013d12:	460b      	mov	r3, r1
 8013d14:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8013d16:	2300      	movs	r3, #0
 8013d18:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	60bb      	str	r3, [r7, #8]
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	2b48      	cmp	r3, #72	; 0x48
 8013d22:	dc10      	bgt.n	8013d46 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	009b      	lsls	r3, r3, #2
 8013d28:	687a      	ldr	r2, [r7, #4]
 8013d2a:	4413      	add	r3, r2
 8013d2c:	78fa      	ldrb	r2, [r7, #3]
 8013d2e:	4611      	mov	r1, r2
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7ff ff67 	bl	8013c04 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8013d36:	4602      	mov	r2, r0
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	4413      	add	r3, r2
 8013d3c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	3301      	adds	r3, #1
 8013d42:	60bb      	str	r3, [r7, #8]
 8013d44:	e7eb      	b.n	8013d1e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8013d46:	68fb      	ldr	r3, [r7, #12]
}
 8013d48:	4618      	mov	r0, r3
 8013d4a:	3710      	adds	r7, #16
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	bd80      	pop	{r7, pc}

08013d50 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b084      	sub	sp, #16
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	460b      	mov	r3, r1
 8013d5a:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	60fb      	str	r3, [r7, #12]
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	2b48      	cmp	r3, #72	; 0x48
 8013d64:	dc12      	bgt.n	8013d8c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	009b      	lsls	r3, r3, #2
 8013d6a:	687a      	ldr	r2, [r7, #4]
 8013d6c:	4413      	add	r3, r2
 8013d6e:	78fa      	ldrb	r2, [r7, #3]
 8013d70:	4611      	mov	r1, r2
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7ff ff21 	bl	8013bba <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8013d78:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d001      	beq.n	8013d84 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8013d80:	68bb      	ldr	r3, [r7, #8]
 8013d82:	e004      	b.n	8013d8e <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	3301      	adds	r3, #1
 8013d88:	60fb      	str	r3, [r7, #12]
 8013d8a:	e7e9      	b.n	8013d60 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8013d8c:	2300      	movs	r3, #0
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3710      	adds	r7, #16
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd80      	pop	{r7, pc}

08013d96 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8013d96:	b580      	push	{r7, lr}
 8013d98:	b086      	sub	sp, #24
 8013d9a:	af00      	add	r7, sp, #0
 8013d9c:	60f8      	str	r0, [r7, #12]
 8013d9e:	60b9      	str	r1, [r7, #8]
 8013da0:	4613      	mov	r3, r2
 8013da2:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	689b      	ldr	r3, [r3, #8]
 8013da8:	4619      	mov	r1, r3
 8013daa:	68f8      	ldr	r0, [r7, #12]
 8013dac:	f7ff ff4e 	bl	8013c4c <_ZN23MemoryLeakDetectorTable4hashEPc>
 8013db0:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8013db2:	697b      	ldr	r3, [r7, #20]
 8013db4:	009b      	lsls	r3, r3, #2
 8013db6:	68fa      	ldr	r2, [r7, #12]
 8013db8:	4413      	add	r3, r2
 8013dba:	79fa      	ldrb	r2, [r7, #7]
 8013dbc:	68b9      	ldr	r1, [r7, #8]
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7ff ff0d 	bl	8013bde <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8013dc4:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d001      	beq.n	8013dd0 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	e019      	b.n	8013e04 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8013dd0:	697b      	ldr	r3, [r7, #20]
 8013dd2:	3301      	adds	r3, #1
 8013dd4:	617b      	str	r3, [r7, #20]
 8013dd6:	697b      	ldr	r3, [r7, #20]
 8013dd8:	2b48      	cmp	r3, #72	; 0x48
 8013dda:	d812      	bhi.n	8013e02 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8013ddc:	697b      	ldr	r3, [r7, #20]
 8013dde:	009b      	lsls	r3, r3, #2
 8013de0:	68fa      	ldr	r2, [r7, #12]
 8013de2:	4413      	add	r3, r2
 8013de4:	79fa      	ldrb	r2, [r7, #7]
 8013de6:	4611      	mov	r1, r2
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7ff fee6 	bl	8013bba <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8013dee:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8013df0:	693b      	ldr	r3, [r7, #16]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d001      	beq.n	8013dfa <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	e004      	b.n	8013e04 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	3301      	adds	r3, #1
 8013dfe:	617b      	str	r3, [r7, #20]
 8013e00:	e7e9      	b.n	8013dd6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8013e02:	2300      	movs	r3, #0
}
 8013e04:	4618      	mov	r0, r3
 8013e06:	3718      	adds	r7, #24
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}

08013e0c <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8013e0c:	b5b0      	push	{r4, r5, r7, lr}
 8013e0e:	b082      	sub	sp, #8
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2448      	movs	r4, #72	; 0x48
 8013e18:	461d      	mov	r5, r3
 8013e1a:	2c00      	cmp	r4, #0
 8013e1c:	db05      	blt.n	8013e2a <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8013e1e:	4628      	mov	r0, r5
 8013e20:	f7ff fa84 	bl	801332c <_ZN22MemoryLeakDetectorListC1Ev>
 8013e24:	3504      	adds	r5, #4
 8013e26:	3c01      	subs	r4, #1
 8013e28:	e7f7      	b.n	8013e1a <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3708      	adds	r7, #8
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bdb0      	pop	{r4, r5, r7, pc}

08013e34 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8013e34:	b590      	push	{r4, r7, lr}
 8013e36:	b083      	sub	sp, #12
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
 8013e3c:	6039      	str	r1, [r7, #0]
 8013e3e:	4a1d      	ldr	r2, [pc, #116]	; (8013eb4 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	601a      	str	r2, [r3, #0]
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	330c      	adds	r3, #12
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f7ff fbe3 	bl	8013614 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013e54:	331c      	adds	r3, #28
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7ff ffd8 	bl	8013e0c <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013e62:	2201      	movs	r2, #1
 8013e64:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013e6c:	3304      	adds	r3, #4
 8013e6e:	2201      	movs	r2, #1
 8013e70:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2201      	movs	r2, #1
 8013e76:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013e7e:	3308      	adds	r3, #8
 8013e80:	2200      	movs	r2, #0
 8013e82:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	683a      	ldr	r2, [r7, #0]
 8013e88:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 8013e8a:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8013e8e:	490a      	ldr	r1, [pc, #40]	; (8013eb8 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8013e90:	2004      	movs	r0, #4
 8013e92:	f7f3 fb17 	bl	80074c4 <_ZnwjPKci>
 8013e96:	4604      	mov	r4, r0
 8013e98:	4620      	mov	r0, r4
 8013e9a:	f7f5 fbe7 	bl	800966c <_ZN11SimpleMutexC1Ev>
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013ea4:	330c      	adds	r3, #12
 8013ea6:	601c      	str	r4, [r3, #0]
}
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	4618      	mov	r0, r3
 8013eac:	370c      	adds	r7, #12
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd90      	pop	{r4, r7, pc}
 8013eb2:	bf00      	nop
 8013eb4:	08024680 	.word	0x08024680
 8013eb8:	080227dc 	.word	0x080227dc

08013ebc <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8013ebc:	b590      	push	{r4, r7, lr}
 8013ebe:	b083      	sub	sp, #12
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
 8013ec4:	4a0e      	ldr	r2, [pc, #56]	; (8013f00 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013ed0:	330c      	adds	r3, #12
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d00d      	beq.n	8013ef4 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013ede:	330c      	adds	r3, #12
 8013ee0:	681c      	ldr	r4, [r3, #0]
 8013ee2:	2c00      	cmp	r4, #0
 8013ee4:	d006      	beq.n	8013ef4 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	f7f5 fbd2 	bl	8009690 <_ZN11SimpleMutexD1Ev>
 8013eec:	2104      	movs	r1, #4
 8013eee:	4620      	mov	r0, r4
 8013ef0:	f7f3 fafc 	bl	80074ec <_ZdlPvj>
    }
}
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	370c      	adds	r7, #12
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd90      	pop	{r4, r7, pc}
 8013efe:	bf00      	nop
 8013f00:	08024680 	.word	0x08024680

08013f04 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b082      	sub	sp, #8
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
}
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f7ff ffd5 	bl	8013ebc <_ZN18MemoryLeakDetectorD1Ev>
 8013f12:	f241 1150 	movw	r1, #4432	; 0x1150
 8013f16:	6878      	ldr	r0, [r7, #4]
 8013f18:	f7f3 fae8 	bl	80074ec <_ZdlPvj>
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	4618      	mov	r0, r3
 8013f20:	3708      	adds	r7, #8
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}

08013f26 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8013f26:	b580      	push	{r7, lr}
 8013f28:	b082      	sub	sp, #8
 8013f2a:	af00      	add	r7, sp, #0
 8013f2c:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	330c      	adds	r3, #12
 8013f32:	4618      	mov	r0, r3
 8013f34:	f7ff fd72 	bl	8013a1c <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2203      	movs	r2, #3
 8013f3c:	721a      	strb	r2, [r3, #8]
}
 8013f3e:	bf00      	nop
 8013f40:	3708      	adds	r7, #8
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}

08013f46 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8013f46:	b480      	push	{r7}
 8013f48:	b083      	sub	sp, #12
 8013f4a:	af00      	add	r7, sp, #0
 8013f4c:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	2202      	movs	r2, #2
 8013f52:	721a      	strb	r2, [r3, #8]
}
 8013f54:	bf00      	nop
 8013f56:	370c      	adds	r7, #12
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5e:	4770      	bx	lr

08013f60 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8013f60:	b480      	push	{r7}
 8013f62:	b083      	sub	sp, #12
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2202      	movs	r2, #2
 8013f6c:	721a      	strb	r2, [r3, #8]
}
 8013f6e:	bf00      	nop
 8013f70:	370c      	adds	r7, #12
 8013f72:	46bd      	mov	sp, r7
 8013f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f78:	4770      	bx	lr

08013f7a <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 8013f7a:	b480      	push	{r7}
 8013f7c:	b083      	sub	sp, #12
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]
    return mutex_;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013f88:	330c      	adds	r3, #12
 8013f8a:	681b      	ldr	r3, [r3, #0]
}
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	370c      	adds	r7, #12
 8013f90:	46bd      	mov	sp, r7
 8013f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f96:	4770      	bx	lr

08013f98 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8013f98:	b480      	push	{r7}
 8013f9a:	b083      	sub	sp, #12
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	f023 0303 	bic.w	r3, r3, #3
 8013fa6:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8013fa8:	4618      	mov	r0, r3
 8013faa:	370c      	adds	r7, #12
 8013fac:	46bd      	mov	sp, r7
 8013fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb2:	4770      	bx	lr

08013fb4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b082      	sub	sp, #8
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
 8013fbc:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 8013fbe:	683b      	ldr	r3, [r7, #0]
 8013fc0:	3303      	adds	r3, #3
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f7ff ffe8 	bl	8013f98 <_ZL31calculateVoidPointerAlignedSizej>
 8013fc8:	4603      	mov	r3, r0
}
 8013fca:	4618      	mov	r0, r3
 8013fcc:	3708      	adds	r7, #8
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	bd80      	pop	{r7, pc}

08013fd2 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8013fd2:	b580      	push	{r7, lr}
 8013fd4:	b084      	sub	sp, #16
 8013fd6:	af00      	add	r7, sp, #0
 8013fd8:	60f8      	str	r0, [r7, #12]
 8013fda:	60b9      	str	r1, [r7, #8]
 8013fdc:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8013fde:	6879      	ldr	r1, [r7, #4]
 8013fe0:	68f8      	ldr	r0, [r7, #12]
 8013fe2:	f7ff ffe7 	bl	8013fb4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8013fe6:	4602      	mov	r2, r0
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	4413      	add	r3, r2
}
 8013fec:	4618      	mov	r0, r3
 8013fee:	3710      	adds	r7, #16
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}

08013ff4 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b08a      	sub	sp, #40	; 0x28
 8013ff8:	af06      	add	r7, sp, #24
 8013ffa:	60f8      	str	r0, [r7, #12]
 8013ffc:	60b9      	str	r1, [r7, #8]
 8013ffe:	607a      	str	r2, [r7, #4]
 8014000:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014008:	3304      	adds	r3, #4
 801400a:	681a      	ldr	r2, [r3, #0]
 801400c:	1c51      	adds	r1, r2, #1
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014014:	3304      	adds	r3, #4
 8014016:	6019      	str	r1, [r3, #0]
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	7a19      	ldrb	r1, [r3, #8]
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014022:	3308      	adds	r3, #8
 8014024:	781b      	ldrb	r3, [r3, #0]
 8014026:	6a38      	ldr	r0, [r7, #32]
 8014028:	9004      	str	r0, [sp, #16]
 801402a:	69f8      	ldr	r0, [r7, #28]
 801402c:	9003      	str	r0, [sp, #12]
 801402e:	9302      	str	r3, [sp, #8]
 8014030:	9101      	str	r1, [sp, #4]
 8014032:	69bb      	ldr	r3, [r7, #24]
 8014034:	9300      	str	r3, [sp, #0]
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	6879      	ldr	r1, [r7, #4]
 801403a:	68b8      	ldr	r0, [r7, #8]
 801403c:	f7ff fcfb 	bl	8013a36 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8014040:	68bb      	ldr	r3, [r7, #8]
 8014042:	689a      	ldr	r2, [r3, #8]
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	4413      	add	r3, r2
 801404a:	4619      	mov	r1, r3
 801404c:	68f8      	ldr	r0, [r7, #12]
 801404e:	f000 f861 	bl	8014114 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014058:	331c      	adds	r3, #28
 801405a:	68b9      	ldr	r1, [r7, #8]
 801405c:	4618      	mov	r0, r3
 801405e:	f7ff fe11 	bl	8013c84 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8014062:	bf00      	nop
 8014064:	3710      	adds	r7, #16
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}

0801406a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801406a:	b580      	push	{r7, lr}
 801406c:	b08a      	sub	sp, #40	; 0x28
 801406e:	af04      	add	r7, sp, #16
 8014070:	60f8      	str	r0, [r7, #12]
 8014072:	60b9      	str	r1, [r7, #8]
 8014074:	607a      	str	r2, [r7, #4]
 8014076:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8014078:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801407c:	9302      	str	r3, [sp, #8]
 801407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014080:	9301      	str	r3, [sp, #4]
 8014082:	6a3b      	ldr	r3, [r7, #32]
 8014084:	9300      	str	r3, [sp, #0]
 8014086:	683b      	ldr	r3, [r7, #0]
 8014088:	687a      	ldr	r2, [r7, #4]
 801408a:	68b9      	ldr	r1, [r7, #8]
 801408c:	68f8      	ldr	r0, [r7, #12]
 801408e:	f000 f96f 	bl	8014370 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8014092:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8014094:	697b      	ldr	r3, [r7, #20]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d101      	bne.n	801409e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 801409a:	2300      	movs	r3, #0
 801409c:	e017      	b.n	80140ce <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 801409e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80140a2:	9300      	str	r3, [sp, #0]
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	683a      	ldr	r2, [r7, #0]
 80140a8:	68b9      	ldr	r1, [r7, #8]
 80140aa:	68f8      	ldr	r0, [r7, #12]
 80140ac:	f000 f98a 	bl	80143c4 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80140b0:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 80140b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b4:	9302      	str	r3, [sp, #8]
 80140b6:	6a3b      	ldr	r3, [r7, #32]
 80140b8:	9301      	str	r3, [sp, #4]
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	9300      	str	r3, [sp, #0]
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	697a      	ldr	r2, [r7, #20]
 80140c2:	6939      	ldr	r1, [r7, #16]
 80140c4:	68f8      	ldr	r0, [r7, #12]
 80140c6:	f7ff ff95 	bl	8013ff4 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 80140ca:	693b      	ldr	r3, [r7, #16]
 80140cc:	689b      	ldr	r3, [r3, #8]
}
 80140ce:	4618      	mov	r0, r3
 80140d0:	3718      	adds	r7, #24
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}
	...

080140d8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b084      	sub	sp, #16
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
 80140e0:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80140e8:	331c      	adds	r3, #28
 80140ea:	6839      	ldr	r1, [r7, #0]
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7ff fdf6 	bl	8013cde <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 80140f2:	60f8      	str	r0, [r7, #12]
  if (node)
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d006      	beq.n	8014108 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 80140fa:	4b05      	ldr	r3, [pc, #20]	; (8014110 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	68fa      	ldr	r2, [r7, #12]
 8014100:	6812      	ldr	r2, [r2, #0]
 8014102:	21cd      	movs	r1, #205	; 0xcd
 8014104:	6838      	ldr	r0, [r7, #0]
 8014106:	4798      	blx	r3
#endif
}
 8014108:	bf00      	nop
 801410a:	3710      	adds	r7, #16
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}
 8014110:	200000d4 	.word	0x200000d4

08014114 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8014114:	b480      	push	{r7}
 8014116:	b085      	sub	sp, #20
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
 801411c:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801411e:	2300      	movs	r3, #0
 8014120:	60fb      	str	r3, [r7, #12]
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	2b02      	cmp	r3, #2
 8014126:	d812      	bhi.n	801414e <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8014128:	68f9      	ldr	r1, [r7, #12]
 801412a:	4b0c      	ldr	r3, [pc, #48]	; (801415c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 801412c:	fba3 2301 	umull	r2, r3, r3, r1
 8014130:	085a      	lsrs	r2, r3, #1
 8014132:	4613      	mov	r3, r2
 8014134:	005b      	lsls	r3, r3, #1
 8014136:	4413      	add	r3, r2
 8014138:	1aca      	subs	r2, r1, r3
 801413a:	6839      	ldr	r1, [r7, #0]
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	440b      	add	r3, r1
 8014140:	4907      	ldr	r1, [pc, #28]	; (8014160 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8014142:	5c8a      	ldrb	r2, [r1, r2]
 8014144:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	3301      	adds	r3, #1
 801414a:	60fb      	str	r3, [r7, #12]
 801414c:	e7e9      	b.n	8014122 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 801414e:	bf00      	nop
 8014150:	3714      	adds	r7, #20
 8014152:	46bd      	mov	sp, r7
 8014154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014158:	4770      	bx	lr
 801415a:	bf00      	nop
 801415c:	aaaaaaab 	.word	0xaaaaaaab
 8014160:	08024674 	.word	0x08024674

08014164 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8014164:	b480      	push	{r7}
 8014166:	b085      	sub	sp, #20
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
 801416c:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801416e:	2300      	movs	r3, #0
 8014170:	60fb      	str	r3, [r7, #12]
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	2b02      	cmp	r3, #2
 8014176:	d816      	bhi.n	80141a6 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8014178:	683a      	ldr	r2, [r7, #0]
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	4413      	add	r3, r2
 801417e:	7818      	ldrb	r0, [r3, #0]
 8014180:	68f9      	ldr	r1, [r7, #12]
 8014182:	4b0c      	ldr	r3, [pc, #48]	; (80141b4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8014184:	fba3 2301 	umull	r2, r3, r3, r1
 8014188:	085a      	lsrs	r2, r3, #1
 801418a:	4613      	mov	r3, r2
 801418c:	005b      	lsls	r3, r3, #1
 801418e:	4413      	add	r3, r2
 8014190:	1aca      	subs	r2, r1, r3
 8014192:	4b09      	ldr	r3, [pc, #36]	; (80141b8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8014194:	5c9b      	ldrb	r3, [r3, r2]
 8014196:	4298      	cmp	r0, r3
 8014198:	d001      	beq.n	801419e <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 801419a:	2300      	movs	r3, #0
 801419c:	e004      	b.n	80141a8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	3301      	adds	r3, #1
 80141a2:	60fb      	str	r3, [r7, #12]
 80141a4:	e7e5      	b.n	8014172 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 80141a6:	2301      	movs	r3, #1
}
 80141a8:	4618      	mov	r0, r3
 80141aa:	3714      	adds	r7, #20
 80141ac:	46bd      	mov	sp, r7
 80141ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b2:	4770      	bx	lr
 80141b4:	aaaaaaab 	.word	0xaaaaaaab
 80141b8:	08024674 	.word	0x08024674

080141bc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b084      	sub	sp, #16
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	60f8      	str	r0, [r7, #12]
 80141c4:	60b9      	str	r1, [r7, #8]
 80141c6:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 80141c8:	68ba      	ldr	r2, [r7, #8]
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	429a      	cmp	r2, r3
 80141ce:	d101      	bne.n	80141d4 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 80141d0:	2301      	movs	r3, #1
 80141d2:	e013      	b.n	80141fc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80141da:	781b      	ldrb	r3, [r3, #0]
 80141dc:	f083 0301 	eor.w	r3, r3, #1
 80141e0:	b2db      	uxtb	r3, r3
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d001      	beq.n	80141ea <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 80141e6:	2301      	movs	r3, #1
 80141e8:	e008      	b.n	80141fc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	331c      	adds	r3, #28
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	68b9      	ldr	r1, [r7, #8]
 80141f4:	6878      	ldr	r0, [r7, #4]
 80141f6:	4798      	blx	r3
 80141f8:	4603      	mov	r3, r0
 80141fa:	bf00      	nop
}
 80141fc:	4618      	mov	r0, r3
 80141fe:	3710      	adds	r7, #16
 8014200:	46bd      	mov	sp, r7
 8014202:	bd80      	pop	{r7, pc}

08014204 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8014204:	b590      	push	{r4, r7, lr}
 8014206:	b087      	sub	sp, #28
 8014208:	af02      	add	r7, sp, #8
 801420a:	60f8      	str	r0, [r7, #12]
 801420c:	60b9      	str	r1, [r7, #8]
 801420e:	607a      	str	r2, [r7, #4]
 8014210:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8014212:	68bb      	ldr	r3, [r7, #8]
 8014214:	695a      	ldr	r2, [r3, #20]
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	695b      	ldr	r3, [r3, #20]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	3328      	adds	r3, #40	; 0x28
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	4610      	mov	r0, r2
 8014222:	4798      	blx	r3
 8014224:	4604      	mov	r4, r0
 8014226:	6a3b      	ldr	r3, [r7, #32]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	3328      	adds	r3, #40	; 0x28
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	6a38      	ldr	r0, [r7, #32]
 8014230:	4798      	blx	r3
 8014232:	4603      	mov	r3, r0
 8014234:	461a      	mov	r2, r3
 8014236:	4621      	mov	r1, r4
 8014238:	68f8      	ldr	r0, [r7, #12]
 801423a:	f7ff ffbf 	bl	80141bc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 801423e:	4603      	mov	r3, r0
 8014240:	f083 0301 	eor.w	r3, r3, #1
 8014244:	b2db      	uxtb	r3, r3
 8014246:	2b00      	cmp	r3, #0
 8014248:	d014      	beq.n	8014274 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	f103 040c 	add.w	r4, r3, #12
 8014250:	6a3b      	ldr	r3, [r7, #32]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	3328      	adds	r3, #40	; 0x28
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	6a38      	ldr	r0, [r7, #32]
 801425a:	4798      	blx	r3
 801425c:	4602      	mov	r2, r0
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	685b      	ldr	r3, [r3, #4]
 8014262:	9301      	str	r3, [sp, #4]
 8014264:	9200      	str	r2, [sp, #0]
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	687a      	ldr	r2, [r7, #4]
 801426a:	68b9      	ldr	r1, [r7, #8]
 801426c:	4620      	mov	r0, r4
 801426e:	f7ff fb4d 	bl	801390c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8014272:	e02e      	b.n	80142d2 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8014274:	68bb      	ldr	r3, [r7, #8]
 8014276:	689a      	ldr	r2, [r3, #8]
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	4413      	add	r3, r2
 801427e:	4619      	mov	r1, r3
 8014280:	68f8      	ldr	r0, [r7, #12]
 8014282:	f7ff ff6f 	bl	8014164 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8014286:	4603      	mov	r3, r0
 8014288:	f083 0301 	eor.w	r3, r3, #1
 801428c:	b2db      	uxtb	r3, r3
 801428e:	2b00      	cmp	r3, #0
 8014290:	d014      	beq.n	80142bc <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	f103 040c 	add.w	r4, r3, #12
 8014298:	6a3b      	ldr	r3, [r7, #32]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	3328      	adds	r3, #40	; 0x28
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	6a38      	ldr	r0, [r7, #32]
 80142a2:	4798      	blx	r3
 80142a4:	4602      	mov	r2, r0
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	685b      	ldr	r3, [r3, #4]
 80142aa:	9301      	str	r3, [sp, #4]
 80142ac:	9200      	str	r2, [sp, #0]
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	687a      	ldr	r2, [r7, #4]
 80142b2:	68b9      	ldr	r1, [r7, #8]
 80142b4:	4620      	mov	r0, r4
 80142b6:	f7ff fb4f 	bl	8013958 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 80142ba:	e00a      	b.n	80142d2 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 80142bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d006      	beq.n	80142d2 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 80142c4:	6a3b      	ldr	r3, [r7, #32]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	3324      	adds	r3, #36	; 0x24
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	68b9      	ldr	r1, [r7, #8]
 80142ce:	6a38      	ldr	r0, [r7, #32]
 80142d0:	4798      	blx	r3
}
 80142d2:	bf00      	nop
 80142d4:	3714      	adds	r7, #20
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd90      	pop	{r4, r7, pc}
	...

080142dc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b086      	sub	sp, #24
 80142e0:	af02      	add	r7, sp, #8
 80142e2:	60f8      	str	r0, [r7, #12]
 80142e4:	60b9      	str	r1, [r7, #8]
 80142e6:	607a      	str	r2, [r7, #4]
 80142e8:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 80142ea:	4b08      	ldr	r3, [pc, #32]	; (801430c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 80142ec:	681a      	ldr	r2, [r3, #0]
 80142ee:	78fb      	ldrb	r3, [r7, #3]
 80142f0:	9301      	str	r3, [sp, #4]
 80142f2:	2300      	movs	r3, #0
 80142f4:	9300      	str	r3, [sp, #0]
 80142f6:	4613      	mov	r3, r2
 80142f8:	687a      	ldr	r2, [r7, #4]
 80142fa:	68b9      	ldr	r1, [r7, #8]
 80142fc:	68f8      	ldr	r0, [r7, #12]
 80142fe:	f000 f87f 	bl	8014400 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8014302:	4603      	mov	r3, r0
}
 8014304:	4618      	mov	r0, r3
 8014306:	3710      	adds	r7, #16
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}
 801430c:	200000fc 	.word	0x200000fc

08014310 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8014310:	b590      	push	{r4, r7, lr}
 8014312:	b085      	sub	sp, #20
 8014314:	af00      	add	r7, sp, #0
 8014316:	60f8      	str	r0, [r7, #12]
 8014318:	60b9      	str	r1, [r7, #8]
 801431a:	607a      	str	r2, [r7, #4]
 801431c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 801431e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014322:	2b00      	cmp	r3, #0
 8014324:	d00e      	beq.n	8014344 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	3308      	adds	r3, #8
 801432c:	681c      	ldr	r4, [r3, #0]
 801432e:	6879      	ldr	r1, [r7, #4]
 8014330:	68f8      	ldr	r0, [r7, #12]
 8014332:	f7ff fe3f 	bl	8013fb4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8014336:	4601      	mov	r1, r0
 8014338:	6a3b      	ldr	r3, [r7, #32]
 801433a:	683a      	ldr	r2, [r7, #0]
 801433c:	68b8      	ldr	r0, [r7, #8]
 801433e:	47a0      	blx	r4
 8014340:	4603      	mov	r3, r0
 8014342:	e010      	b.n	8014366 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8014344:	68bb      	ldr	r3, [r7, #8]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	3308      	adds	r3, #8
 801434a:	681c      	ldr	r4, [r3, #0]
 801434c:	6879      	ldr	r1, [r7, #4]
 801434e:	68f8      	ldr	r0, [r7, #12]
 8014350:	f7ff fe30 	bl	8013fb4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8014354:	4603      	mov	r3, r0
 8014356:	f103 0120 	add.w	r1, r3, #32
 801435a:	6a3b      	ldr	r3, [r7, #32]
 801435c:	683a      	ldr	r2, [r7, #0]
 801435e:	68b8      	ldr	r0, [r7, #8]
 8014360:	47a0      	blx	r4
 8014362:	4603      	mov	r3, r0
 8014364:	bf00      	nop
}
 8014366:	4618      	mov	r0, r3
 8014368:	3714      	adds	r7, #20
 801436a:	46bd      	mov	sp, r7
 801436c:	bd90      	pop	{r4, r7, pc}
	...

08014370 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8014370:	b590      	push	{r4, r7, lr}
 8014372:	b085      	sub	sp, #20
 8014374:	af00      	add	r7, sp, #0
 8014376:	60f8      	str	r0, [r7, #12]
 8014378:	60b9      	str	r1, [r7, #8]
 801437a:	607a      	str	r2, [r7, #4]
 801437c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 801437e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014382:	2b00      	cmp	r3, #0
 8014384:	d00b      	beq.n	801439e <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8014386:	4b0e      	ldr	r3, [pc, #56]	; (80143c0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8014388:	681c      	ldr	r4, [r3, #0]
 801438a:	6839      	ldr	r1, [r7, #0]
 801438c:	68f8      	ldr	r0, [r7, #12]
 801438e:	f7ff fe11 	bl	8013fb4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8014392:	4603      	mov	r3, r0
 8014394:	4619      	mov	r1, r3
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	47a0      	blx	r4
 801439a:	4603      	mov	r3, r0
 801439c:	e00c      	b.n	80143b8 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 801439e:	4b08      	ldr	r3, [pc, #32]	; (80143c0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80143a0:	681c      	ldr	r4, [r3, #0]
 80143a2:	6839      	ldr	r1, [r7, #0]
 80143a4:	68f8      	ldr	r0, [r7, #12]
 80143a6:	f7ff fe05 	bl	8013fb4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80143aa:	4603      	mov	r3, r0
 80143ac:	3320      	adds	r3, #32
 80143ae:	4619      	mov	r1, r3
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	47a0      	blx	r4
 80143b4:	4603      	mov	r3, r0
 80143b6:	bf00      	nop
}
 80143b8:	4618      	mov	r0, r3
 80143ba:	3714      	adds	r7, #20
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd90      	pop	{r4, r7, pc}
 80143c0:	200000c8 	.word	0x200000c8

080143c4 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b084      	sub	sp, #16
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	60f8      	str	r0, [r7, #12]
 80143cc:	60b9      	str	r1, [r7, #8]
 80143ce:	607a      	str	r2, [r7, #4]
 80143d0:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 80143d2:	7e3b      	ldrb	r3, [r7, #24]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d008      	beq.n	80143ea <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 80143d8:	68bb      	ldr	r3, [r7, #8]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	3320      	adds	r3, #32
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	2120      	movs	r1, #32
 80143e2:	68b8      	ldr	r0, [r7, #8]
 80143e4:	4798      	blx	r3
 80143e6:	4603      	mov	r3, r0
 80143e8:	e006      	b.n	80143f8 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 80143ea:	687a      	ldr	r2, [r7, #4]
 80143ec:	6839      	ldr	r1, [r7, #0]
 80143ee:	68f8      	ldr	r0, [r7, #12]
 80143f0:	f7ff fdef 	bl	8013fd2 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 80143f4:	4603      	mov	r3, r0
 80143f6:	bf00      	nop
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	3710      	adds	r7, #16
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd80      	pop	{r7, pc}

08014400 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b08a      	sub	sp, #40	; 0x28
 8014404:	af04      	add	r7, sp, #16
 8014406:	60f8      	str	r0, [r7, #12]
 8014408:	60b9      	str	r1, [r7, #8]
 801440a:	607a      	str	r2, [r7, #4]
 801440c:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 801440e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014412:	9301      	str	r3, [sp, #4]
 8014414:	6a3b      	ldr	r3, [r7, #32]
 8014416:	9300      	str	r3, [sp, #0]
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	687a      	ldr	r2, [r7, #4]
 801441c:	68b9      	ldr	r1, [r7, #8]
 801441e:	68f8      	ldr	r0, [r7, #12]
 8014420:	f7ff ff76 	bl	8014310 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8014424:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8014426:	697b      	ldr	r3, [r7, #20]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d101      	bne.n	8014430 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 801442c:	2300      	movs	r3, #0
 801442e:	e017      	b.n	8014460 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8014430:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014434:	9300      	str	r3, [sp, #0]
 8014436:	697b      	ldr	r3, [r7, #20]
 8014438:	687a      	ldr	r2, [r7, #4]
 801443a:	68b9      	ldr	r1, [r7, #8]
 801443c:	68f8      	ldr	r0, [r7, #12]
 801443e:	f7ff ffc1 	bl	80143c4 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8014442:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8014444:	6a3b      	ldr	r3, [r7, #32]
 8014446:	9302      	str	r3, [sp, #8]
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	9301      	str	r3, [sp, #4]
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	9300      	str	r3, [sp, #0]
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	697a      	ldr	r2, [r7, #20]
 8014454:	6939      	ldr	r1, [r7, #16]
 8014456:	68f8      	ldr	r0, [r7, #12]
 8014458:	f7ff fdcc 	bl	8013ff4 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 801445c:	693b      	ldr	r3, [r7, #16]
 801445e:	689b      	ldr	r3, [r3, #8]
}
 8014460:	4618      	mov	r0, r3
 8014462:	3718      	adds	r7, #24
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}

08014468 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8014468:	b590      	push	{r4, r7, lr}
 801446a:	b089      	sub	sp, #36	; 0x24
 801446c:	af02      	add	r7, sp, #8
 801446e:	60f8      	str	r0, [r7, #12]
 8014470:	60b9      	str	r1, [r7, #8]
 8014472:	607a      	str	r2, [r7, #4]
 8014474:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d03a      	beq.n	80144f2 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014482:	331c      	adds	r3, #28
 8014484:	6879      	ldr	r1, [r7, #4]
 8014486:	4618      	mov	r0, r3
 8014488:	f7ff fc13 	bl	8013cb2 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 801448c:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d10b      	bne.n	80144ac <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	f103 000c 	add.w	r0, r3, #12
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	685b      	ldr	r3, [r3, #4]
 801449e:	9300      	str	r3, [sp, #0]
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144a4:	6839      	ldr	r1, [r7, #0]
 80144a6:	f7ff fa0d 	bl	80138c4 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 80144aa:	e023      	b.n	80144f4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 80144ac:	68b8      	ldr	r0, [r7, #8]
 80144ae:	f7f8 ff95 	bl	800d3dc <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 80144b2:	4603      	mov	r3, r0
 80144b4:	f083 0301 	eor.w	r3, r3, #1
 80144b8:	b2db      	uxtb	r3, r3
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d01a      	beq.n	80144f4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 80144be:	697b      	ldr	r3, [r7, #20]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80144c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80144c8:	9301      	str	r3, [sp, #4]
 80144ca:	68bb      	ldr	r3, [r7, #8]
 80144cc:	9300      	str	r3, [sp, #0]
 80144ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144d0:	683a      	ldr	r2, [r7, #0]
 80144d2:	6979      	ldr	r1, [r7, #20]
 80144d4:	68f8      	ldr	r0, [r7, #12]
 80144d6:	f7ff fe95 	bl	8014204 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	330c      	adds	r3, #12
 80144e0:	681c      	ldr	r4, [r3, #0]
 80144e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144e4:	9300      	str	r3, [sp, #0]
 80144e6:	683b      	ldr	r3, [r7, #0]
 80144e8:	693a      	ldr	r2, [r7, #16]
 80144ea:	6879      	ldr	r1, [r7, #4]
 80144ec:	68b8      	ldr	r0, [r7, #8]
 80144ee:	47a0      	blx	r4
 80144f0:	e000      	b.n	80144f4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 80144f2:	bf00      	nop
    }
}
 80144f4:	371c      	adds	r7, #28
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bd90      	pop	{r4, r7, pc}
	...

080144fc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b086      	sub	sp, #24
 8014500:	af02      	add	r7, sp, #8
 8014502:	60f8      	str	r0, [r7, #12]
 8014504:	60b9      	str	r1, [r7, #8]
 8014506:	607a      	str	r2, [r7, #4]
 8014508:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 801450a:	4b08      	ldr	r3, [pc, #32]	; (801452c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 801450c:	681a      	ldr	r2, [r3, #0]
 801450e:	78fb      	ldrb	r3, [r7, #3]
 8014510:	9301      	str	r3, [sp, #4]
 8014512:	2300      	movs	r3, #0
 8014514:	9300      	str	r3, [sp, #0]
 8014516:	4613      	mov	r3, r2
 8014518:	687a      	ldr	r2, [r7, #4]
 801451a:	68b9      	ldr	r1, [r7, #8]
 801451c:	68f8      	ldr	r0, [r7, #12]
 801451e:	f7ff ffa3 	bl	8014468 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8014522:	bf00      	nop
 8014524:	3710      	adds	r7, #16
 8014526:	46bd      	mov	sp, r7
 8014528:	bd80      	pop	{r7, pc}
 801452a:	bf00      	nop
 801452c:	200000fc 	.word	0x200000fc

08014530 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b08a      	sub	sp, #40	; 0x28
 8014534:	af04      	add	r7, sp, #16
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	607a      	str	r2, [r7, #4]
 801453c:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d023      	beq.n	801458c <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801454a:	331c      	adds	r3, #28
 801454c:	6879      	ldr	r1, [r7, #4]
 801454e:	4618      	mov	r0, r3
 8014550:	f7ff fbaf 	bl	8013cb2 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8014554:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d10c      	bne.n	8014576 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	f103 000c 	add.w	r0, r3, #12
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	685b      	ldr	r3, [r3, #4]
 8014566:	9300      	str	r3, [sp, #0]
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801456c:	6a39      	ldr	r1, [r7, #32]
 801456e:	f7ff f9a9 	bl	80138c4 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8014572:	2300      	movs	r3, #0
 8014574:	e019      	b.n	80145aa <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8014576:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801457a:	9301      	str	r3, [sp, #4]
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	9300      	str	r3, [sp, #0]
 8014580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014582:	6a3a      	ldr	r2, [r7, #32]
 8014584:	6979      	ldr	r1, [r7, #20]
 8014586:	68f8      	ldr	r0, [r7, #12]
 8014588:	f7ff fe3c 	bl	8014204 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 801458c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014590:	9302      	str	r3, [sp, #8]
 8014592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014594:	9301      	str	r3, [sp, #4]
 8014596:	6a3b      	ldr	r3, [r7, #32]
 8014598:	9300      	str	r3, [sp, #0]
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	687a      	ldr	r2, [r7, #4]
 801459e:	68b9      	ldr	r1, [r7, #8]
 80145a0:	68f8      	ldr	r0, [r7, #12]
 80145a2:	f7ff fd62 	bl	801406a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 80145a6:	4603      	mov	r3, r0
 80145a8:	bf00      	nop
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	3718      	adds	r7, #24
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}

080145b2 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 80145b2:	b580      	push	{r7, lr}
 80145b4:	b084      	sub	sp, #16
 80145b6:	af00      	add	r7, sp, #0
 80145b8:	6078      	str	r0, [r7, #4]
 80145ba:	460b      	mov	r3, r1
 80145bc:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145c4:	331c      	adds	r3, #28
 80145c6:	78fa      	ldrb	r2, [r7, #3]
 80145c8:	4611      	mov	r1, r2
 80145ca:	4618      	mov	r0, r3
 80145cc:	f7ff fbc0 	bl	8013d50 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 80145d0:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	330c      	adds	r3, #12
 80145d6:	4618      	mov	r0, r3
 80145d8:	f7ff f882 	bl	80136e0 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d010      	beq.n	8014604 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	330c      	adds	r3, #12
 80145e6:	68f9      	ldr	r1, [r7, #12]
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7ff f897 	bl	801371c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145f4:	331c      	adds	r3, #28
 80145f6:	78fa      	ldrb	r2, [r7, #3]
 80145f8:	68f9      	ldr	r1, [r7, #12]
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7ff fbcb 	bl	8013d96 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014600:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8014602:	e7eb      	b.n	80145dc <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	330c      	adds	r3, #12
 8014608:	4618      	mov	r0, r3
 801460a:	f7ff f8e7 	bl	80137dc <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 801460e:	bf00      	nop
 8014610:	3710      	adds	r7, #16
 8014612:	46bd      	mov	sp, r7
 8014614:	bd80      	pop	{r7, pc}

08014616 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8014616:	b580      	push	{r7, lr}
 8014618:	b082      	sub	sp, #8
 801461a:	af00      	add	r7, sp, #0
 801461c:	6078      	str	r0, [r7, #4]
 801461e:	460b      	mov	r3, r1
 8014620:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8014622:	78fb      	ldrb	r3, [r7, #3]
 8014624:	4619      	mov	r1, r3
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f7ff ffc3 	bl	80145b2 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	330c      	adds	r3, #12
 8014630:	4618      	mov	r0, r3
 8014632:	f7ff f9e5 	bl	8013a00 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8014636:	4603      	mov	r3, r0
}
 8014638:	4618      	mov	r0, r3
 801463a:	3708      	adds	r7, #8
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}

08014640 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b084      	sub	sp, #16
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801464e:	331c      	adds	r3, #28
 8014650:	2103      	movs	r1, #3
 8014652:	4618      	mov	r0, r3
 8014654:	f7ff fb7c 	bl	8013d50 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8014658:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d011      	beq.n	8014684 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	7e1b      	ldrb	r3, [r3, #24]
 8014664:	2b03      	cmp	r3, #3
 8014666:	d102      	bne.n	801466e <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	2202      	movs	r2, #2
 801466c:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014674:	331c      	adds	r3, #28
 8014676:	2203      	movs	r2, #3
 8014678:	68f9      	ldr	r1, [r7, #12]
 801467a:	4618      	mov	r0, r3
 801467c:	f7ff fb8b 	bl	8013d96 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014680:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8014682:	e7ea      	b.n	801465a <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8014684:	bf00      	nop
 8014686:	3710      	adds	r7, #16
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b082      	sub	sp, #8
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
 8014694:	460b      	mov	r3, r1
 8014696:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801469e:	331c      	adds	r3, #28
 80146a0:	78fa      	ldrb	r2, [r7, #3]
 80146a2:	4611      	mov	r1, r2
 80146a4:	4618      	mov	r0, r3
 80146a6:	f7ff fb30 	bl	8013d0a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 80146aa:	4603      	mov	r3, r0
}
 80146ac:	4618      	mov	r0, r3
 80146ae:	3708      	adds	r7, #8
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd80      	pop	{r7, pc}

080146b4 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b084      	sub	sp, #16
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	60f8      	str	r0, [r7, #12]
 80146bc:	60b9      	str	r1, [r7, #8]
 80146be:	607a      	str	r2, [r7, #4]
 80146c0:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	68b9      	ldr	r1, [r7, #8]
 80146c6:	4618      	mov	r0, r3
 80146c8:	f7f5 fb13 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	3308      	adds	r3, #8
 80146d0:	6879      	ldr	r1, [r7, #4]
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7f5 fb0d 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	683a      	ldr	r2, [r7, #0]
 80146dc:	611a      	str	r2, [r3, #16]
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	2200      	movs	r2, #0
 80146e2:	615a      	str	r2, [r3, #20]
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	4618      	mov	r0, r3
 80146e8:	3710      	adds	r7, #16
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}

080146ee <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 80146ee:	b480      	push	{r7}
 80146f0:	b083      	sub	sp, #12
 80146f2:	af00      	add	r7, sp, #0
 80146f4:	6078      	str	r0, [r7, #4]
 80146f6:	6039      	str	r1, [r7, #0]
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	4618      	mov	r0, r3
 80146fc:	370c      	adds	r7, #12
 80146fe:	46bd      	mov	sp, r7
 8014700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014704:	4770      	bx	lr

08014706 <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8014706:	b480      	push	{r7}
 8014708:	b083      	sub	sp, #12
 801470a:	af00      	add	r7, sp, #0
 801470c:	6078      	str	r0, [r7, #4]
 801470e:	6039      	str	r1, [r7, #0]
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	4618      	mov	r0, r3
 8014714:	370c      	adds	r7, #12
 8014716:	46bd      	mov	sp, r7
 8014718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471c:	4770      	bx	lr

0801471e <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801471e:	b480      	push	{r7}
 8014720:	b085      	sub	sp, #20
 8014722:	af00      	add	r7, sp, #0
 8014724:	60f8      	str	r0, [r7, #12]
 8014726:	60b9      	str	r1, [r7, #8]
 8014728:	4613      	mov	r3, r2
 801472a:	71fb      	strb	r3, [r7, #7]
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	4618      	mov	r0, r3
 8014730:	3714      	adds	r7, #20
 8014732:	46bd      	mov	sp, r7
 8014734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014738:	4770      	bx	lr

0801473a <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801473a:	b480      	push	{r7}
 801473c:	b085      	sub	sp, #20
 801473e:	af00      	add	r7, sp, #0
 8014740:	60f8      	str	r0, [r7, #12]
 8014742:	60b9      	str	r1, [r7, #8]
 8014744:	607a      	str	r2, [r7, #4]
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	4618      	mov	r0, r3
 801474a:	3714      	adds	r7, #20
 801474c:	46bd      	mov	sp, r7
 801474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014752:	4770      	bx	lr

08014754 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 8014754:	b480      	push	{r7}
 8014756:	b085      	sub	sp, #20
 8014758:	af00      	add	r7, sp, #0
 801475a:	60f8      	str	r0, [r7, #12]
 801475c:	60b9      	str	r1, [r7, #8]
 801475e:	607a      	str	r2, [r7, #4]
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	4618      	mov	r0, r3
 8014764:	3714      	adds	r7, #20
 8014766:	46bd      	mov	sp, r7
 8014768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476c:	4770      	bx	lr

0801476e <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801476e:	b480      	push	{r7}
 8014770:	b085      	sub	sp, #20
 8014772:	af00      	add	r7, sp, #0
 8014774:	60f8      	str	r0, [r7, #12]
 8014776:	60b9      	str	r1, [r7, #8]
 8014778:	607a      	str	r2, [r7, #4]
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	4618      	mov	r0, r3
 801477e:	3714      	adds	r7, #20
 8014780:	46bd      	mov	sp, r7
 8014782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014786:	4770      	bx	lr

08014788 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8014788:	b480      	push	{r7}
 801478a:	b085      	sub	sp, #20
 801478c:	af00      	add	r7, sp, #0
 801478e:	60f8      	str	r0, [r7, #12]
 8014790:	60b9      	str	r1, [r7, #8]
 8014792:	607a      	str	r2, [r7, #4]
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	4618      	mov	r0, r3
 8014798:	3714      	adds	r7, #20
 801479a:	46bd      	mov	sp, r7
 801479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a0:	4770      	bx	lr

080147a2 <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 80147a2:	b480      	push	{r7}
 80147a4:	b085      	sub	sp, #20
 80147a6:	af00      	add	r7, sp, #0
 80147a8:	60f8      	str	r0, [r7, #12]
 80147aa:	60b9      	str	r1, [r7, #8]
 80147ac:	4639      	mov	r1, r7
 80147ae:	e881 000c 	stmia.w	r1, {r2, r3}
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	4618      	mov	r0, r3
 80147b6:	3714      	adds	r7, #20
 80147b8:	46bd      	mov	sp, r7
 80147ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147be:	4770      	bx	lr

080147c0 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 80147c0:	b480      	push	{r7}
 80147c2:	b085      	sub	sp, #20
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	60f8      	str	r0, [r7, #12]
 80147c8:	60b9      	str	r1, [r7, #8]
 80147ca:	4639      	mov	r1, r7
 80147cc:	e881 000c 	stmia.w	r1, {r2, r3}
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	4618      	mov	r0, r3
 80147d4:	3714      	adds	r7, #20
 80147d6:	46bd      	mov	sp, r7
 80147d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147dc:	4770      	bx	lr

080147de <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 80147de:	b480      	push	{r7}
 80147e0:	b085      	sub	sp, #20
 80147e2:	af00      	add	r7, sp, #0
 80147e4:	60f8      	str	r0, [r7, #12]
 80147e6:	60b9      	str	r1, [r7, #8]
 80147e8:	ed87 0b00 	vstr	d0, [r7]
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	4618      	mov	r0, r3
 80147f0:	3714      	adds	r7, #20
 80147f2:	46bd      	mov	sp, r7
 80147f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f8:	4770      	bx	lr

080147fa <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 80147fa:	b480      	push	{r7}
 80147fc:	b085      	sub	sp, #20
 80147fe:	af00      	add	r7, sp, #0
 8014800:	60f8      	str	r0, [r7, #12]
 8014802:	60b9      	str	r1, [r7, #8]
 8014804:	607a      	str	r2, [r7, #4]
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	4618      	mov	r0, r3
 801480a:	3714      	adds	r7, #20
 801480c:	46bd      	mov	sp, r7
 801480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014812:	4770      	bx	lr

08014814 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8014814:	b480      	push	{r7}
 8014816:	b085      	sub	sp, #20
 8014818:	af00      	add	r7, sp, #0
 801481a:	60f8      	str	r0, [r7, #12]
 801481c:	60b9      	str	r1, [r7, #8]
 801481e:	607a      	str	r2, [r7, #4]
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	4618      	mov	r0, r3
 8014824:	3714      	adds	r7, #20
 8014826:	46bd      	mov	sp, r7
 8014828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482c:	4770      	bx	lr

0801482e <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801482e:	b480      	push	{r7}
 8014830:	b085      	sub	sp, #20
 8014832:	af00      	add	r7, sp, #0
 8014834:	60f8      	str	r0, [r7, #12]
 8014836:	60b9      	str	r1, [r7, #8]
 8014838:	607a      	str	r2, [r7, #4]
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	4618      	mov	r0, r3
 801483e:	3714      	adds	r7, #20
 8014840:	46bd      	mov	sp, r7
 8014842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014846:	4770      	bx	lr

08014848 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8014848:	b480      	push	{r7}
 801484a:	b085      	sub	sp, #20
 801484c:	af00      	add	r7, sp, #0
 801484e:	60f8      	str	r0, [r7, #12]
 8014850:	60b9      	str	r1, [r7, #8]
 8014852:	607a      	str	r2, [r7, #4]
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	4618      	mov	r0, r3
 8014858:	3714      	adds	r7, #20
 801485a:	46bd      	mov	sp, r7
 801485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014860:	4770      	bx	lr

08014862 <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 8014862:	b480      	push	{r7}
 8014864:	b085      	sub	sp, #20
 8014866:	af00      	add	r7, sp, #0
 8014868:	60f8      	str	r0, [r7, #12]
 801486a:	60b9      	str	r1, [r7, #8]
 801486c:	607a      	str	r2, [r7, #4]
 801486e:	603b      	str	r3, [r7, #0]
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	4618      	mov	r0, r3
 8014874:	3714      	adds	r7, #20
 8014876:	46bd      	mov	sp, r7
 8014878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487c:	4770      	bx	lr

0801487e <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801487e:	b480      	push	{r7}
 8014880:	b085      	sub	sp, #20
 8014882:	af00      	add	r7, sp, #0
 8014884:	60f8      	str	r0, [r7, #12]
 8014886:	60b9      	str	r1, [r7, #8]
 8014888:	607a      	str	r2, [r7, #4]
 801488a:	603b      	str	r3, [r7, #0]
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	4618      	mov	r0, r3
 8014890:	3714      	adds	r7, #20
 8014892:	46bd      	mov	sp, r7
 8014894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014898:	4770      	bx	lr

0801489a <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 801489a:	b480      	push	{r7}
 801489c:	b085      	sub	sp, #20
 801489e:	af00      	add	r7, sp, #0
 80148a0:	60f8      	str	r0, [r7, #12]
 80148a2:	60b9      	str	r1, [r7, #8]
 80148a4:	607a      	str	r2, [r7, #4]
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	4618      	mov	r0, r3
 80148aa:	3714      	adds	r7, #20
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr

080148b4 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 80148b4:	b480      	push	{r7}
 80148b6:	b085      	sub	sp, #20
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	60f8      	str	r0, [r7, #12]
 80148bc:	60b9      	str	r1, [r7, #8]
 80148be:	607a      	str	r2, [r7, #4]
 80148c0:	603b      	str	r3, [r7, #0]
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	4618      	mov	r0, r3
 80148c6:	3714      	adds	r7, #20
 80148c8:	46bd      	mov	sp, r7
 80148ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ce:	4770      	bx	lr

080148d0 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 80148d0:	b480      	push	{r7}
 80148d2:	b083      	sub	sp, #12
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	2300      	movs	r3, #0
 80148da:	4618      	mov	r0, r3
 80148dc:	370c      	adds	r7, #12
 80148de:	46bd      	mov	sp, r7
 80148e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e4:	4770      	bx	lr
	...

080148e8 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b084      	sub	sp, #16
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
 80148f0:	6039      	str	r1, [r7, #0]
 80148f2:	f107 0308 	add.w	r3, r7, #8
 80148f6:	4909      	ldr	r1, [pc, #36]	; (801491c <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7f5 f9a6 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80148fe:	f107 0308 	add.w	r3, r7, #8
 8014902:	4619      	mov	r1, r3
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f005 fec5 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
 801490a:	f107 0308 	add.w	r3, r7, #8
 801490e:	4618      	mov	r0, r3
 8014910:	f7f5 fd53 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	3710      	adds	r7, #16
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}
 801491c:	080227fc 	.word	0x080227fc

08014920 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8014920:	b480      	push	{r7}
 8014922:	b083      	sub	sp, #12
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
 8014928:	460b      	mov	r3, r1
 801492a:	70fb      	strb	r3, [r7, #3]
 801492c:	78fb      	ldrb	r3, [r7, #3]
 801492e:	4618      	mov	r0, r3
 8014930:	370c      	adds	r7, #12
 8014932:	46bd      	mov	sp, r7
 8014934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014938:	4770      	bx	lr

0801493a <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 801493a:	b480      	push	{r7}
 801493c:	b083      	sub	sp, #12
 801493e:	af00      	add	r7, sp, #0
 8014940:	6078      	str	r0, [r7, #4]
 8014942:	2300      	movs	r3, #0
 8014944:	4618      	mov	r0, r3
 8014946:	370c      	adds	r7, #12
 8014948:	46bd      	mov	sp, r7
 801494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494e:	4770      	bx	lr

08014950 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8014950:	b480      	push	{r7}
 8014952:	b083      	sub	sp, #12
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
 8014958:	2300      	movs	r3, #0
 801495a:	4618      	mov	r0, r3
 801495c:	370c      	adds	r7, #12
 801495e:	46bd      	mov	sp, r7
 8014960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014964:	4770      	bx	lr

08014966 <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8014966:	b480      	push	{r7}
 8014968:	b083      	sub	sp, #12
 801496a:	af00      	add	r7, sp, #0
 801496c:	6078      	str	r0, [r7, #4]
 801496e:	6039      	str	r1, [r7, #0]
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	4618      	mov	r0, r3
 8014974:	370c      	adds	r7, #12
 8014976:	46bd      	mov	sp, r7
 8014978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497c:	4770      	bx	lr

0801497e <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 801497e:	b480      	push	{r7}
 8014980:	b083      	sub	sp, #12
 8014982:	af00      	add	r7, sp, #0
 8014984:	6078      	str	r0, [r7, #4]
 8014986:	2300      	movs	r3, #0
 8014988:	4618      	mov	r0, r3
 801498a:	370c      	adds	r7, #12
 801498c:	46bd      	mov	sp, r7
 801498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014992:	4770      	bx	lr

08014994 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8014994:	b480      	push	{r7}
 8014996:	b083      	sub	sp, #12
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
 801499c:	6039      	str	r1, [r7, #0]
 801499e:	683b      	ldr	r3, [r7, #0]
 80149a0:	4618      	mov	r0, r3
 80149a2:	370c      	adds	r7, #12
 80149a4:	46bd      	mov	sp, r7
 80149a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149aa:	4770      	bx	lr

080149ac <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 80149ac:	b480      	push	{r7}
 80149ae:	b083      	sub	sp, #12
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
 80149b4:	2300      	movs	r3, #0
 80149b6:	4618      	mov	r0, r3
 80149b8:	370c      	adds	r7, #12
 80149ba:	46bd      	mov	sp, r7
 80149bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c0:	4770      	bx	lr

080149c2 <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 80149c2:	b480      	push	{r7}
 80149c4:	b083      	sub	sp, #12
 80149c6:	af00      	add	r7, sp, #0
 80149c8:	6078      	str	r0, [r7, #4]
 80149ca:	6039      	str	r1, [r7, #0]
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	4618      	mov	r0, r3
 80149d0:	370c      	adds	r7, #12
 80149d2:	46bd      	mov	sp, r7
 80149d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d8:	4770      	bx	lr

080149da <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 80149da:	b580      	push	{r7, lr}
 80149dc:	b082      	sub	sp, #8
 80149de:	af00      	add	r7, sp, #0
 80149e0:	6078      	str	r0, [r7, #4]
 80149e2:	6039      	str	r1, [r7, #0]
 80149e4:	2100      	movs	r1, #0
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	f7f3 f972 	bl	8007cd0 <_ZN18cpputest_ulonglongC1Ei>
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	3708      	adds	r7, #8
 80149f0:	46bd      	mov	sp, r7
 80149f2:	bd80      	pop	{r7, pc}

080149f4 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 80149f4:	b480      	push	{r7}
 80149f6:	b085      	sub	sp, #20
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	60f8      	str	r0, [r7, #12]
 80149fc:	60b9      	str	r1, [r7, #8]
 80149fe:	4639      	mov	r1, r7
 8014a00:	e881 000c 	stmia.w	r1, {r2, r3}
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	461a      	mov	r2, r3
 8014a08:	463b      	mov	r3, r7
 8014a0a:	cb03      	ldmia	r3!, {r0, r1}
 8014a0c:	6010      	str	r0, [r2, #0]
 8014a0e:	6051      	str	r1, [r2, #4]
 8014a10:	68f8      	ldr	r0, [r7, #12]
 8014a12:	3714      	adds	r7, #20
 8014a14:	46bd      	mov	sp, r7
 8014a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1a:	4770      	bx	lr

08014a1c <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b082      	sub	sp, #8
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	6039      	str	r1, [r7, #0]
 8014a26:	2100      	movs	r1, #0
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f7f3 f945 	bl	8007cb8 <_ZN17cpputest_longlongC1Ei>
 8014a2e:	6878      	ldr	r0, [r7, #4]
 8014a30:	3708      	adds	r7, #8
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}

08014a36 <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8014a36:	b480      	push	{r7}
 8014a38:	b085      	sub	sp, #20
 8014a3a:	af00      	add	r7, sp, #0
 8014a3c:	60f8      	str	r0, [r7, #12]
 8014a3e:	60b9      	str	r1, [r7, #8]
 8014a40:	4639      	mov	r1, r7
 8014a42:	e881 000c 	stmia.w	r1, {r2, r3}
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	461a      	mov	r2, r3
 8014a4a:	463b      	mov	r3, r7
 8014a4c:	cb03      	ldmia	r3!, {r0, r1}
 8014a4e:	6010      	str	r0, [r2, #0]
 8014a50:	6051      	str	r1, [r2, #4]
 8014a52:	68f8      	ldr	r0, [r7, #12]
 8014a54:	3714      	adds	r7, #20
 8014a56:	46bd      	mov	sp, r7
 8014a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5c:	4770      	bx	lr

08014a5e <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 8014a5e:	b480      	push	{r7}
 8014a60:	b083      	sub	sp, #12
 8014a62:	af00      	add	r7, sp, #0
 8014a64:	6078      	str	r0, [r7, #4]
 8014a66:	2300      	movs	r3, #0
 8014a68:	4618      	mov	r0, r3
 8014a6a:	370c      	adds	r7, #12
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a72:	4770      	bx	lr

08014a74 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8014a74:	b480      	push	{r7}
 8014a76:	b083      	sub	sp, #12
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
 8014a7c:	6039      	str	r1, [r7, #0]
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	4618      	mov	r0, r3
 8014a82:	370c      	adds	r7, #12
 8014a84:	46bd      	mov	sp, r7
 8014a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8a:	4770      	bx	lr

08014a8c <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8014a8c:	b480      	push	{r7}
 8014a8e:	b083      	sub	sp, #12
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	f04f 0200 	mov.w	r2, #0
 8014a98:	f04f 0300 	mov.w	r3, #0
 8014a9c:	ec43 2b17 	vmov	d7, r2, r3
 8014aa0:	eeb0 0a47 	vmov.f32	s0, s14
 8014aa4:	eef0 0a67 	vmov.f32	s1, s15
 8014aa8:	370c      	adds	r7, #12
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab0:	4770      	bx	lr

08014ab2 <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 8014ab2:	b480      	push	{r7}
 8014ab4:	b085      	sub	sp, #20
 8014ab6:	af00      	add	r7, sp, #0
 8014ab8:	60f8      	str	r0, [r7, #12]
 8014aba:	ed87 0b00 	vstr	d0, [r7]
 8014abe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ac2:	ec43 2b17 	vmov	d7, r2, r3
 8014ac6:	eeb0 0a47 	vmov.f32	s0, s14
 8014aca:	eef0 0a67 	vmov.f32	s1, s15
 8014ace:	3714      	adds	r7, #20
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad6:	4770      	bx	lr

08014ad8 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8014ad8:	b480      	push	{r7}
 8014ada:	b083      	sub	sp, #12
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
 8014ae0:	4b03      	ldr	r3, [pc, #12]	; (8014af0 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	370c      	adds	r7, #12
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aec:	4770      	bx	lr
 8014aee:	bf00      	nop
 8014af0:	080227fc 	.word	0x080227fc

08014af4 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8014af4:	b480      	push	{r7}
 8014af6:	b083      	sub	sp, #12
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	6039      	str	r1, [r7, #0]
 8014afe:	683b      	ldr	r3, [r7, #0]
 8014b00:	4618      	mov	r0, r3
 8014b02:	370c      	adds	r7, #12
 8014b04:	46bd      	mov	sp, r7
 8014b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0a:	4770      	bx	lr

08014b0c <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8014b0c:	b480      	push	{r7}
 8014b0e:	b083      	sub	sp, #12
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	2300      	movs	r3, #0
 8014b16:	4618      	mov	r0, r3
 8014b18:	370c      	adds	r7, #12
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b20:	4770      	bx	lr

08014b22 <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 8014b22:	b480      	push	{r7}
 8014b24:	b083      	sub	sp, #12
 8014b26:	af00      	add	r7, sp, #0
 8014b28:	6078      	str	r0, [r7, #4]
 8014b2a:	6039      	str	r1, [r7, #0]
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	4618      	mov	r0, r3
 8014b30:	370c      	adds	r7, #12
 8014b32:	46bd      	mov	sp, r7
 8014b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b38:	4770      	bx	lr

08014b3a <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8014b3a:	b480      	push	{r7}
 8014b3c:	b083      	sub	sp, #12
 8014b3e:	af00      	add	r7, sp, #0
 8014b40:	6078      	str	r0, [r7, #4]
 8014b42:	2300      	movs	r3, #0
 8014b44:	4618      	mov	r0, r3
 8014b46:	370c      	adds	r7, #12
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4e:	4770      	bx	lr

08014b50 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8014b50:	b480      	push	{r7}
 8014b52:	b083      	sub	sp, #12
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
 8014b58:	6039      	str	r1, [r7, #0]
 8014b5a:	683b      	ldr	r3, [r7, #0]
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	370c      	adds	r7, #12
 8014b60:	46bd      	mov	sp, r7
 8014b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b66:	4770      	bx	lr

08014b68 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8014b68:	b480      	push	{r7}
 8014b6a:	b083      	sub	sp, #12
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	2300      	movs	r3, #0
 8014b72:	4618      	mov	r0, r3
 8014b74:	370c      	adds	r7, #12
 8014b76:	46bd      	mov	sp, r7
 8014b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b7c:	4770      	bx	lr

08014b7e <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 8014b7e:	b480      	push	{r7}
 8014b80:	b083      	sub	sp, #12
 8014b82:	af00      	add	r7, sp, #0
 8014b84:	6078      	str	r0, [r7, #4]
 8014b86:	6039      	str	r1, [r7, #0]
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	370c      	adds	r7, #12
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b94:	4770      	bx	lr

08014b96 <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 8014b96:	b480      	push	{r7}
 8014b98:	b083      	sub	sp, #12
 8014b9a:	af00      	add	r7, sp, #0
 8014b9c:	6078      	str	r0, [r7, #4]
 8014b9e:	6039      	str	r1, [r7, #0]
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	370c      	adds	r7, #12
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bac:	4770      	bx	lr
	...

08014bb0 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8014bb0:	b480      	push	{r7}
 8014bb2:	b083      	sub	sp, #12
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
 8014bb8:	4a04      	ldr	r2, [pc, #16]	; (8014bcc <_ZN14MockActualCallC1Ev+0x1c>)
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	601a      	str	r2, [r3, #0]
{
}
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	370c      	adds	r7, #12
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bca:	4770      	bx	lr
 8014bcc:	08024a78 	.word	0x08024a78

08014bd0 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8014bd0:	b480      	push	{r7}
 8014bd2:	b083      	sub	sp, #12
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	4a04      	ldr	r2, [pc, #16]	; (8014bec <_ZN14MockActualCallD1Ev+0x1c>)
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	601a      	str	r2, [r3, #0]
{
}
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	4618      	mov	r0, r3
 8014be2:	370c      	adds	r7, #12
 8014be4:	46bd      	mov	sp, r7
 8014be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bea:	4770      	bx	lr
 8014bec:	08024a78 	.word	0x08024a78

08014bf0 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b082      	sub	sp, #8
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
 8014bf8:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	3304      	adds	r3, #4
 8014bfe:	6839      	ldr	r1, [r7, #0]
 8014c00:	4618      	mov	r0, r3
 8014c02:	f7f5 f88e 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
}
 8014c06:	bf00      	nop
 8014c08:	3708      	adds	r7, #8
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bd80      	pop	{r7, pc}

08014c0e <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8014c0e:	b580      	push	{r7, lr}
 8014c10:	b082      	sub	sp, #8
 8014c12:	af00      	add	r7, sp, #0
 8014c14:	6078      	str	r0, [r7, #4]
 8014c16:	6039      	str	r1, [r7, #0]
    return functionName_;
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	3304      	adds	r3, #4
 8014c1c:	4619      	mov	r1, r3
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	f7f5 f867 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
}
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	3708      	adds	r7, #8
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}

08014c2c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b084      	sub	sp, #16
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	60f8      	str	r0, [r7, #12]
 8014c34:	60b9      	str	r1, [r7, #8]
 8014c36:	607a      	str	r2, [r7, #4]
 8014c38:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f7ff ffb7 	bl	8014bb0 <_ZN14MockActualCallC1Ev>
 8014c42:	4a17      	ldr	r2, [pc, #92]	; (8014ca0 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	601a      	str	r2, [r3, #0]
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	3304      	adds	r3, #4
 8014c4c:	4915      	ldr	r1, [pc, #84]	; (8014ca4 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7f4 fffb 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	68ba      	ldr	r2, [r7, #8]
 8014c58:	60da      	str	r2, [r3, #12]
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	687a      	ldr	r2, [r7, #4]
 8014c5e:	611a      	str	r2, [r3, #16]
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	2202      	movs	r2, #2
 8014c64:	751a      	strb	r2, [r3, #20]
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	2200      	movs	r2, #0
 8014c6a:	755a      	strb	r2, [r3, #21]
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	2200      	movs	r2, #0
 8014c70:	619a      	str	r2, [r3, #24]
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	331c      	adds	r3, #28
 8014c76:	4618      	mov	r0, r3
 8014c78:	f004 f814 	bl	8018ca4 <_ZN21MockExpectedCallsListC1Ev>
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	683a      	ldr	r2, [r7, #0]
 8014c80:	625a      	str	r2, [r3, #36]	; 0x24
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	2200      	movs	r2, #0
 8014c86:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	331c      	adds	r3, #28
 8014c8c:	6839      	ldr	r1, [r7, #0]
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f004 f986 	bl	8018fa0 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	4618      	mov	r0, r3
 8014c98:	3710      	adds	r7, #16
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}
 8014c9e:	bf00      	nop
 8014ca0:	08024978 	.word	0x08024978
 8014ca4:	080227fc 	.word	0x080227fc

08014ca8 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b082      	sub	sp, #8
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
 8014cb0:	4a0c      	ldr	r2, [pc, #48]	; (8014ce4 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f001 fae4 	bl	8016284 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	331c      	adds	r3, #28
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f004 f803 	bl	8018ccc <_ZN21MockExpectedCallsListD1Ev>
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	3304      	adds	r3, #4
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7f5 fb75 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f7ff ff7c 	bl	8014bd0 <_ZN14MockActualCallD1Ev>
}
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	4618      	mov	r0, r3
 8014cdc:	3708      	adds	r7, #8
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}
 8014ce2:	bf00      	nop
 8014ce4:	08024978 	.word	0x08024978

08014ce8 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b082      	sub	sp, #8
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
}
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f7ff ffd9 	bl	8014ca8 <_ZN21MockCheckedActualCallD1Ev>
 8014cf6:	212c      	movs	r1, #44	; 0x2c
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f7f2 fbf7 	bl	80074ec <_ZdlPvj>
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	4618      	mov	r0, r3
 8014d02:	3708      	adds	r7, #8
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}

08014d08 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8014d08:	b480      	push	{r7}
 8014d0a:	b083      	sub	sp, #12
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
 8014d10:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	683a      	ldr	r2, [r7, #0]
 8014d16:	611a      	str	r2, [r3, #16]
}
 8014d18:	bf00      	nop
 8014d1a:	370c      	adds	r7, #12
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d22:	4770      	bx	lr

08014d24 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b082      	sub	sp, #8
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	691a      	ldr	r2, [r3, #16]
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	691b      	ldr	r3, [r3, #16]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	330c      	adds	r3, #12
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	4610      	mov	r0, r2
 8014d3c:	4798      	blx	r3
 8014d3e:	4603      	mov	r3, r0
}
 8014d40:	4618      	mov	r0, r3
 8014d42:	3708      	adds	r7, #8
 8014d44:	46bd      	mov	sp, r7
 8014d46:	bd80      	pop	{r7, pc}

08014d48 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b082      	sub	sp, #8
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
 8014d50:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	33c0      	adds	r3, #192	; 0xc0
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	6878      	ldr	r0, [r7, #4]
 8014d5c:	4798      	blx	r3
 8014d5e:	4603      	mov	r3, r0
 8014d60:	f083 0301 	eor.w	r3, r3, #1
 8014d64:	b2db      	uxtb	r3, r3
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d010      	beq.n	8014d8c <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	33ec      	adds	r3, #236	; 0xec
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	2101      	movs	r1, #1
 8014d74:	6878      	ldr	r0, [r7, #4]
 8014d76:	4798      	blx	r3
        reporter_->failTest(failure);
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	691a      	ldr	r2, [r3, #16]
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	691b      	ldr	r3, [r3, #16]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	3308      	adds	r3, #8
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	6839      	ldr	r1, [r7, #0]
 8014d88:	4610      	mov	r0, r2
 8014d8a:	4798      	blx	r3
    }
}
 8014d8c:	bf00      	nop
 8014d8e:	3708      	adds	r7, #8
 8014d90:	46bd      	mov	sp, r7
 8014d92:	bd80      	pop	{r7, pc}

08014d94 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 8014d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d98:	b0bc      	sub	sp, #240	; 0xf0
 8014d9a:	af00      	add	r7, sp, #0
 8014d9c:	6078      	str	r0, [r7, #4]
 8014d9e:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014da4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8014da8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	f000 80f5 	beq.w	8014f9c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8014db2:	683b      	ldr	r3, [r7, #0]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	339c      	adds	r3, #156	; 0x9c
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014dbe:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8014dc2:	6839      	ldr	r1, [r7, #0]
 8014dc4:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 8014dc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f006 fa6c 	bl	801b2a8 <_ZNK14MockNamedValue9getCopierEv>
 8014dd0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8014dd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d013      	beq.n	8014e04 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8014ddc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	3308      	adds	r3, #8
 8014de4:	681c      	ldr	r4, [r3, #0]
 8014de6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014dea:	691d      	ldr	r5, [r3, #16]
 8014dec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014df0:	4618      	mov	r0, r3
 8014df2:	f006 fa29 	bl	801b248 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 8014df6:	4603      	mov	r3, r0
 8014df8:	461a      	mov	r2, r3
 8014dfa:	4629      	mov	r1, r5
 8014dfc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8014e00:	47a0      	blx	r4
 8014e02:	e0c0      	b.n	8014f86 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8014e04:	2500      	movs	r5, #0
 8014e06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014e0a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8014e0e:	4611      	mov	r1, r2
 8014e10:	4618      	mov	r0, r3
 8014e12:	f005 ff0c 	bl	801ac2e <_ZNK14MockNamedValue7getTypeEv>
 8014e16:	2601      	movs	r6, #1
 8014e18:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014e1c:	4962      	ldr	r1, [pc, #392]	; (8014fa8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7f4 ff13 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8014e24:	f04f 0801 	mov.w	r8, #1
 8014e28:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014e2c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014e30:	4611      	mov	r1, r2
 8014e32:	4618      	mov	r0, r3
 8014e34:	f7f5 facd 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d015      	beq.n	8014e6a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8014e3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014e42:	f103 0408 	add.w	r4, r3, #8
 8014e46:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014e4a:	4958      	ldr	r1, [pc, #352]	; (8014fac <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7f4 fefc 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8014e52:	2501      	movs	r5, #1
 8014e54:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014e58:	4619      	mov	r1, r3
 8014e5a:	4620      	mov	r0, r4
 8014e5c:	f7f5 fab9 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 8014e60:	4603      	mov	r3, r0
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d001      	beq.n	8014e6a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8014e66:	2401      	movs	r4, #1
 8014e68:	e000      	b.n	8014e6c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 8014e6a:	2400      	movs	r4, #0
 8014e6c:	2d00      	cmp	r5, #0
 8014e6e:	d004      	beq.n	8014e7a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 8014e70:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7f5 faa0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8014e7a:	f1b8 0f00 	cmp.w	r8, #0
 8014e7e:	d004      	beq.n	8014e8a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 8014e80:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014e84:	4618      	mov	r0, r3
 8014e86:	f7f5 fa98 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8014e8a:	2e00      	cmp	r6, #0
 8014e8c:	d004      	beq.n	8014e98 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 8014e8e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7f5 fa91 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8014e98:	2c00      	cmp	r4, #0
 8014e9a:	d018      	beq.n	8014ece <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 8014e9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f006 f959 	bl	801b158 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8014ea6:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 8014eaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f006 f9e2 	bl	801b278 <_ZNK14MockNamedValue7getSizeEv>
 8014eb4:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8014eb8:	4b3d      	ldr	r3, [pc, #244]	; (8014fb0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014ec0:	6910      	ldr	r0, [r2, #16]
 8014ec2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014ec6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8014eca:	4798      	blx	r3
 8014ecc:	e05b      	b.n	8014f86 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 8014ece:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014ed2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8014ed6:	4611      	mov	r1, r2
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f005 fe99 	bl	801ac10 <_ZNK14MockNamedValue7getNameEv>
 8014ede:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014ee2:	4934      	ldr	r1, [pc, #208]	; (8014fb4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f7f4 feb0 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8014eea:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8014eee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014ef2:	4611      	mov	r1, r2
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f7f5 fab1 	bl	800a45c <_ZneRK12SimpleStringS1_>
 8014efa:	4603      	mov	r3, r0
 8014efc:	461c      	mov	r4, r3
 8014efe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014f02:	4618      	mov	r0, r3
 8014f04:	f7f5 fa59 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8014f08:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	f7f5 fa54 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8014f12:	2c00      	cmp	r4, #0
 8014f14:	d037      	beq.n	8014f86 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	339c      	adds	r3, #156	; 0x9c
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014f22:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8014f26:	6839      	ldr	r1, [r7, #0]
 8014f28:	4798      	blx	r3
 8014f2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8014f2e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8014f32:	4611      	mov	r1, r2
 8014f34:	4618      	mov	r0, r3
 8014f36:	f005 fe7a 	bl	801ac2e <_ZNK14MockNamedValue7getTypeEv>
 8014f3a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014f3e:	4618      	mov	r0, r3
 8014f40:	f005 fbd2 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	33cc      	adds	r3, #204	; 0xcc
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	4798      	blx	r3
 8014f50:	4601      	mov	r1, r0
 8014f52:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8014f56:	f107 030c 	add.w	r3, r7, #12
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f005 faee 	bl	801a53c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	33dc      	adds	r3, #220	; 0xdc
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	f107 020c 	add.w	r2, r7, #12
 8014f6c:	4611      	mov	r1, r2
 8014f6e:	6878      	ldr	r0, [r7, #4]
 8014f70:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8014f72:	f107 030c 	add.w	r3, r7, #12
 8014f76:	4618      	mov	r0, r3
 8014f78:	f001 ffe2 	bl	8016f40 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8014f7c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8014f80:	4618      	mov	r0, r3
 8014f82:	f7f5 fa1a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8014f86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f005 fbac 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8014f90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014f94:	695b      	ldr	r3, [r3, #20]
 8014f96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8014f9a:	e705      	b.n	8014da8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 8014f9c:	bf00      	nop
 8014f9e:	37f0      	adds	r7, #240	; 0xf0
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fa6:	bf00      	nop
 8014fa8:	08022800 	.word	0x08022800
 8014fac:	0802280c 	.word	0x0802280c
 8014fb0:	200000d0 	.word	0x200000d0
 8014fb4:	080227fc 	.word	0x080227fc

08014fb8 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b084      	sub	sp, #16
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	331c      	adds	r3, #28
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	f004 f9bb 	bl	8019340 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 8014fca:	4602      	mov	r2, r0
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	699b      	ldr	r3, [r3, #24]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d00f      	beq.n	8014ff8 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	33d4      	adds	r3, #212	; 0xd4
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	687a      	ldr	r2, [r7, #4]
 8014fe2:	6992      	ldr	r2, [r2, #24]
 8014fe4:	4611      	mov	r1, r2
 8014fe6:	6878      	ldr	r0, [r7, #4]
 8014fe8:	4798      	blx	r3
        callHasSucceeded();
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	33d0      	adds	r3, #208	; 0xd0
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 8014ff6:	e00f      	b.n	8015018 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	331c      	adds	r3, #28
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f004 f9cc 	bl	801939a <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8015002:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d006      	beq.n	8015018 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	33d4      	adds	r3, #212	; 0xd4
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	68f9      	ldr	r1, [r7, #12]
 8015014:	6878      	ldr	r0, [r7, #4]
 8015016:	4798      	blx	r3
}
 8015018:	bf00      	nop
 801501a:	3710      	adds	r7, #16
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}

08015020 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b082      	sub	sp, #8
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	33ec      	adds	r3, #236	; 0xec
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	2102      	movs	r1, #2
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	4798      	blx	r3
}
 8015036:	bf00      	nop
 8015038:	3708      	adds	r7, #8
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}

0801503e <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 801503e:	b580      	push	{r7, lr}
 8015040:	b082      	sub	sp, #8
 8015042:	af00      	add	r7, sp, #0
 8015044:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	699b      	ldr	r3, [r3, #24]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d00b      	beq.n	8015066 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	699a      	ldr	r2, [r3, #24]
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	699b      	ldr	r3, [r3, #24]
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	33ec      	adds	r3, #236	; 0xec
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	4610      	mov	r0, r2
 801505e:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	2200      	movs	r2, #0
 8015064:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	331c      	adds	r3, #28
 801506a:	4618      	mov	r0, r3
 801506c:	f004 f85c 	bl	8019128 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 8015070:	bf00      	nop
 8015072:	3708      	adds	r7, #8
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}

08015078 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 8015078:	b590      	push	{r4, r7, lr}
 801507a:	b091      	sub	sp, #68	; 0x44
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
 8015080:	6039      	str	r1, [r7, #0]
    setName(name);
 8015082:	6839      	ldr	r1, [r7, #0]
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	f7ff fdb3 	bl	8014bf0 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	33ec      	adds	r3, #236	; 0xec
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	2100      	movs	r1, #0
 8015094:	6878      	ldr	r0, [r7, #4]
 8015096:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	331c      	adds	r3, #28
 801509c:	6839      	ldr	r1, [r7, #0]
 801509e:	4618      	mov	r0, r3
 80150a0:	f003 ffec 	bl	801907c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	331c      	adds	r3, #28
 80150a8:	4618      	mov	r0, r3
 80150aa:	f003 fe7c 	bl	8018da6 <_ZNK21MockExpectedCallsList7isEmptyEv>
 80150ae:	4603      	mov	r3, r0
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d01d      	beq.n	80150f0 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	33cc      	adds	r3, #204	; 0xcc
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	6878      	ldr	r0, [r7, #4]
 80150be:	4798      	blx	r3
 80150c0:	4601      	mov	r1, r0
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150c6:	f107 000c 	add.w	r0, r7, #12
 80150ca:	683a      	ldr	r2, [r7, #0]
 80150cc:	f004 fe24 	bl	8019d18 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	33dc      	adds	r3, #220	; 0xdc
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	f107 020c 	add.w	r2, r7, #12
 80150dc:	4611      	mov	r1, r2
 80150de:	6878      	ldr	r0, [r7, #4]
 80150e0:	4798      	blx	r3
        return *this;
 80150e2:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 80150e4:	f107 030c 	add.w	r3, r7, #12
 80150e8:	4618      	mov	r0, r3
 80150ea:	f001 ff4b 	bl	8016f84 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 80150ee:	e006      	b.n	80150fe <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	33d8      	adds	r3, #216	; 0xd8
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	4798      	blx	r3

    return *this;
 80150fc:	687c      	ldr	r4, [r7, #4]
 80150fe:	4623      	mov	r3, r4
}
 8015100:	4618      	mov	r0, r3
 8015102:	3744      	adds	r7, #68	; 0x44
 8015104:	46bd      	mov	sp, r7
 8015106:	bd90      	pop	{r4, r7, pc}

08015108 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 8015108:	b480      	push	{r7}
 801510a:	b083      	sub	sp, #12
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	6039      	str	r1, [r7, #0]
    return *this;
 8015112:	687b      	ldr	r3, [r7, #4]
}
 8015114:	4618      	mov	r0, r3
 8015116:	370c      	adds	r7, #12
 8015118:	46bd      	mov	sp, r7
 801511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511e:	4770      	bx	lr

08015120 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 8015120:	b590      	push	{r4, r7, lr}
 8015122:	b097      	sub	sp, #92	; 0x5c
 8015124:	af02      	add	r7, sp, #8
 8015126:	6078      	str	r0, [r7, #4]
 8015128:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	33c0      	adds	r3, #192	; 0xc0
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	4798      	blx	r3
 8015136:	4603      	mov	r3, r0
 8015138:	2b00      	cmp	r3, #0
 801513a:	d164      	bne.n	8015206 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	33ec      	adds	r3, #236	; 0xec
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	2100      	movs	r1, #0
 8015146:	6878      	ldr	r0, [r7, #4]
 8015148:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	33e8      	adds	r3, #232	; 0xe8
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	6878      	ldr	r0, [r7, #4]
 8015154:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	331c      	adds	r3, #28
 801515a:	6839      	ldr	r1, [r7, #0]
 801515c:	4618      	mov	r0, r3
 801515e:	f004 f86b 	bl	8019238 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	331c      	adds	r3, #28
 8015166:	4618      	mov	r0, r3
 8015168:	f003 fe1d 	bl	8018da6 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801516c:	4603      	mov	r3, r0
 801516e:	2b00      	cmp	r3, #0
 8015170:	d02b      	beq.n	80151ca <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	33cc      	adds	r3, #204	; 0xcc
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	4798      	blx	r3
 801517e:	4604      	mov	r4, r0
 8015180:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015184:	6879      	ldr	r1, [r7, #4]
 8015186:	4618      	mov	r0, r3
 8015188:	f7ff fd41 	bl	8014c0e <_ZNK21MockCheckedActualCall7getNameEv>
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015190:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015194:	f107 000c 	add.w	r0, r7, #12
 8015198:	9300      	str	r3, [sp, #0]
 801519a:	683b      	ldr	r3, [r7, #0]
 801519c:	4621      	mov	r1, r4
 801519e:	f004 fe7f 	bl	8019ea0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 80151a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80151a6:	4618      	mov	r0, r3
 80151a8:	f7f5 f907 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	33dc      	adds	r3, #220	; 0xdc
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	f107 020c 	add.w	r2, r7, #12
 80151b8:	4611      	mov	r1, r2
 80151ba:	6878      	ldr	r0, [r7, #4]
 80151bc:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 80151be:	f107 030c 	add.w	r3, r7, #12
 80151c2:	4618      	mov	r0, r3
 80151c4:	f001 ff00 	bl	8016fc8 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 80151c8:	e01e      	b.n	8015208 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	f103 041c 	add.w	r4, r3, #28
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	335c      	adds	r3, #92	; 0x5c
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80151dc:	6839      	ldr	r1, [r7, #0]
 80151de:	4610      	mov	r0, r2
 80151e0:	4798      	blx	r3
 80151e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80151e6:	4619      	mov	r1, r3
 80151e8:	4620      	mov	r0, r4
 80151ea:	f004 f9b8 	bl	801955e <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 80151ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80151f2:	4618      	mov	r0, r3
 80151f4:	f7f5 f8e1 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	33d8      	adds	r3, #216	; 0xd8
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	6878      	ldr	r0, [r7, #4]
 8015202:	4798      	blx	r3
 8015204:	e000      	b.n	8015208 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8015206:	bf00      	nop
}
 8015208:	3754      	adds	r7, #84	; 0x54
 801520a:	46bd      	mov	sp, r7
 801520c:	bd90      	pop	{r4, r7, pc}

0801520e <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 801520e:	b590      	push	{r4, r7, lr}
 8015210:	b097      	sub	sp, #92	; 0x5c
 8015212:	af02      	add	r7, sp, #8
 8015214:	6078      	str	r0, [r7, #4]
 8015216:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	33c0      	adds	r3, #192	; 0xc0
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	4798      	blx	r3
 8015224:	4603      	mov	r3, r0
 8015226:	2b00      	cmp	r3, #0
 8015228:	d164      	bne.n	80152f4 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	33ec      	adds	r3, #236	; 0xec
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	2100      	movs	r1, #0
 8015234:	6878      	ldr	r0, [r7, #4]
 8015236:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	33e8      	adds	r3, #232	; 0xe8
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	6878      	ldr	r0, [r7, #4]
 8015242:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	331c      	adds	r3, #28
 8015248:	6839      	ldr	r1, [r7, #0]
 801524a:	4618      	mov	r0, r3
 801524c:	f004 f820 	bl	8019290 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	331c      	adds	r3, #28
 8015254:	4618      	mov	r0, r3
 8015256:	f003 fda6 	bl	8018da6 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801525a:	4603      	mov	r3, r0
 801525c:	2b00      	cmp	r3, #0
 801525e:	d02b      	beq.n	80152b8 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	33cc      	adds	r3, #204	; 0xcc
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	6878      	ldr	r0, [r7, #4]
 801526a:	4798      	blx	r3
 801526c:	4604      	mov	r4, r0
 801526e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015272:	6879      	ldr	r1, [r7, #4]
 8015274:	4618      	mov	r0, r3
 8015276:	f7ff fcca 	bl	8014c0e <_ZNK21MockCheckedActualCall7getNameEv>
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801527e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015282:	f107 000c 	add.w	r0, r7, #12
 8015286:	9300      	str	r3, [sp, #0]
 8015288:	683b      	ldr	r3, [r7, #0]
 801528a:	4621      	mov	r1, r4
 801528c:	f004 ff6a 	bl	801a164 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8015290:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015294:	4618      	mov	r0, r3
 8015296:	f7f5 f890 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	33dc      	adds	r3, #220	; 0xdc
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	f107 020c 	add.w	r2, r7, #12
 80152a6:	4611      	mov	r1, r2
 80152a8:	6878      	ldr	r0, [r7, #4]
 80152aa:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 80152ac:	f107 030c 	add.w	r3, r7, #12
 80152b0:	4618      	mov	r0, r3
 80152b2:	f001 feab 	bl	801700c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 80152b6:	e01e      	b.n	80152f6 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f103 041c 	add.w	r4, r3, #28
 80152be:	683b      	ldr	r3, [r7, #0]
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	335c      	adds	r3, #92	; 0x5c
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80152ca:	6839      	ldr	r1, [r7, #0]
 80152cc:	4610      	mov	r0, r2
 80152ce:	4798      	blx	r3
 80152d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80152d4:	4619      	mov	r1, r3
 80152d6:	4620      	mov	r0, r4
 80152d8:	f004 f95e 	bl	8019598 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 80152dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80152e0:	4618      	mov	r0, r3
 80152e2:	f7f5 f86a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	33d8      	adds	r3, #216	; 0xd8
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	6878      	ldr	r0, [r7, #4]
 80152f0:	4798      	blx	r3
 80152f2:	e000      	b.n	80152f6 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 80152f4:	bf00      	nop
}
 80152f6:	3754      	adds	r7, #84	; 0x54
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd90      	pop	{r4, r7, pc}

080152fc <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 80152fc:	b590      	push	{r4, r7, lr}
 80152fe:	b093      	sub	sp, #76	; 0x4c
 8015300:	af00      	add	r7, sp, #0
 8015302:	60f8      	str	r0, [r7, #12]
 8015304:	60b9      	str	r1, [r7, #8]
 8015306:	4613      	mov	r3, r2
 8015308:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 801530a:	f107 0310 	add.w	r3, r7, #16
 801530e:	68b9      	ldr	r1, [r7, #8]
 8015310:	4618      	mov	r0, r3
 8015312:	f005 f9bf 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015316:	79fa      	ldrb	r2, [r7, #7]
 8015318:	f107 0310 	add.w	r3, r7, #16
 801531c:	4611      	mov	r1, r2
 801531e:	4618      	mov	r0, r3
 8015320:	f005 fa0a 	bl	801a738 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	33e0      	adds	r3, #224	; 0xe0
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	f107 0210 	add.w	r2, r7, #16
 8015330:	4611      	mov	r1, r2
 8015332:	68f8      	ldr	r0, [r7, #12]
 8015334:	4798      	blx	r3
    return *this;
 8015336:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015338:	f107 0310 	add.w	r3, r7, #16
 801533c:	4618      	mov	r0, r3
 801533e:	f005 f9d3 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015342:	4623      	mov	r3, r4
}
 8015344:	4618      	mov	r0, r3
 8015346:	374c      	adds	r7, #76	; 0x4c
 8015348:	46bd      	mov	sp, r7
 801534a:	bd90      	pop	{r4, r7, pc}

0801534c <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801534c:	b590      	push	{r4, r7, lr}
 801534e:	b093      	sub	sp, #76	; 0x4c
 8015350:	af00      	add	r7, sp, #0
 8015352:	60f8      	str	r0, [r7, #12]
 8015354:	60b9      	str	r1, [r7, #8]
 8015356:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015358:	f107 0310 	add.w	r3, r7, #16
 801535c:	68b9      	ldr	r1, [r7, #8]
 801535e:	4618      	mov	r0, r3
 8015360:	f005 f998 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015364:	f107 0310 	add.w	r3, r7, #16
 8015368:	6879      	ldr	r1, [r7, #4]
 801536a:	4618      	mov	r0, r3
 801536c:	f005 fa08 	bl	801a780 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	33e0      	adds	r3, #224	; 0xe0
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	f107 0210 	add.w	r2, r7, #16
 801537c:	4611      	mov	r1, r2
 801537e:	68f8      	ldr	r0, [r7, #12]
 8015380:	4798      	blx	r3
    return *this;
 8015382:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015384:	f107 0310 	add.w	r3, r7, #16
 8015388:	4618      	mov	r0, r3
 801538a:	f005 f9ad 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
    return *this;
 801538e:	4623      	mov	r3, r4
}
 8015390:	4618      	mov	r0, r3
 8015392:	374c      	adds	r7, #76	; 0x4c
 8015394:	46bd      	mov	sp, r7
 8015396:	bd90      	pop	{r4, r7, pc}

08015398 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8015398:	b590      	push	{r4, r7, lr}
 801539a:	b093      	sub	sp, #76	; 0x4c
 801539c:	af00      	add	r7, sp, #0
 801539e:	60f8      	str	r0, [r7, #12]
 80153a0:	60b9      	str	r1, [r7, #8]
 80153a2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80153a4:	f107 0310 	add.w	r3, r7, #16
 80153a8:	68b9      	ldr	r1, [r7, #8]
 80153aa:	4618      	mov	r0, r3
 80153ac:	f005 f972 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80153b0:	f107 0310 	add.w	r3, r7, #16
 80153b4:	6879      	ldr	r1, [r7, #4]
 80153b6:	4618      	mov	r0, r3
 80153b8:	f005 fa04 	bl	801a7c4 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	33e0      	adds	r3, #224	; 0xe0
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	f107 0210 	add.w	r2, r7, #16
 80153c8:	4611      	mov	r1, r2
 80153ca:	68f8      	ldr	r0, [r7, #12]
 80153cc:	4798      	blx	r3
    return *this;
 80153ce:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80153d0:	f107 0310 	add.w	r3, r7, #16
 80153d4:	4618      	mov	r0, r3
 80153d6:	f005 f987 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
    return *this;
 80153da:	4623      	mov	r3, r4
}
 80153dc:	4618      	mov	r0, r3
 80153de:	374c      	adds	r7, #76	; 0x4c
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd90      	pop	{r4, r7, pc}

080153e4 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 80153e4:	b590      	push	{r4, r7, lr}
 80153e6:	b093      	sub	sp, #76	; 0x4c
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	60f8      	str	r0, [r7, #12]
 80153ec:	60b9      	str	r1, [r7, #8]
 80153ee:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80153f0:	f107 0310 	add.w	r3, r7, #16
 80153f4:	68b9      	ldr	r1, [r7, #8]
 80153f6:	4618      	mov	r0, r3
 80153f8:	f005 f94c 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80153fc:	f107 0310 	add.w	r3, r7, #16
 8015400:	6879      	ldr	r1, [r7, #4]
 8015402:	4618      	mov	r0, r3
 8015404:	f005 fa22 	bl	801a84c <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	33e0      	adds	r3, #224	; 0xe0
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	f107 0210 	add.w	r2, r7, #16
 8015414:	4611      	mov	r1, r2
 8015416:	68f8      	ldr	r0, [r7, #12]
 8015418:	4798      	blx	r3
    return *this;
 801541a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801541c:	f107 0310 	add.w	r3, r7, #16
 8015420:	4618      	mov	r0, r3
 8015422:	f005 f961 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015426:	4623      	mov	r3, r4
}
 8015428:	4618      	mov	r0, r3
 801542a:	374c      	adds	r7, #76	; 0x4c
 801542c:	46bd      	mov	sp, r7
 801542e:	bd90      	pop	{r4, r7, pc}

08015430 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8015430:	b590      	push	{r4, r7, lr}
 8015432:	b093      	sub	sp, #76	; 0x4c
 8015434:	af00      	add	r7, sp, #0
 8015436:	60f8      	str	r0, [r7, #12]
 8015438:	60b9      	str	r1, [r7, #8]
 801543a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801543c:	f107 0310 	add.w	r3, r7, #16
 8015440:	68b9      	ldr	r1, [r7, #8]
 8015442:	4618      	mov	r0, r3
 8015444:	f005 f926 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015448:	f107 0310 	add.w	r3, r7, #16
 801544c:	6879      	ldr	r1, [r7, #4]
 801544e:	4618      	mov	r0, r3
 8015450:	f005 f9da 	bl	801a808 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	33e0      	adds	r3, #224	; 0xe0
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	f107 0210 	add.w	r2, r7, #16
 8015460:	4611      	mov	r1, r2
 8015462:	68f8      	ldr	r0, [r7, #12]
 8015464:	4798      	blx	r3
    return *this;
 8015466:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015468:	f107 0310 	add.w	r3, r7, #16
 801546c:	4618      	mov	r0, r3
 801546e:	f005 f93b 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015472:	4623      	mov	r3, r4
}
 8015474:	4618      	mov	r0, r3
 8015476:	374c      	adds	r7, #76	; 0x4c
 8015478:	46bd      	mov	sp, r7
 801547a:	bd90      	pop	{r4, r7, pc}

0801547c <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801547c:	b5b0      	push	{r4, r5, r7, lr}
 801547e:	b086      	sub	sp, #24
 8015480:	af02      	add	r7, sp, #8
 8015482:	60f8      	str	r0, [r7, #12]
 8015484:	60b9      	str	r1, [r7, #8]
 8015486:	4639      	mov	r1, r7
 8015488:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801548c:	f7fb ffc0 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8015490:	4604      	mov	r4, r0
 8015492:	6823      	ldr	r3, [r4, #0]
 8015494:	3368      	adds	r3, #104	; 0x68
 8015496:	681d      	ldr	r5, [r3, #0]
 8015498:	f7fb ffca 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801549c:	4603      	mov	r3, r0
 801549e:	9300      	str	r3, [sp, #0]
 80154a0:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80154a4:	4a04      	ldr	r2, [pc, #16]	; (80154b8 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 80154a6:	4905      	ldr	r1, [pc, #20]	; (80154bc <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 80154a8:	4620      	mov	r0, r4
 80154aa:	47a8      	blx	r5
    return *this;
 80154ac:	68fb      	ldr	r3, [r7, #12]
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3710      	adds	r7, #16
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bdb0      	pop	{r4, r5, r7, pc}
 80154b6:	bf00      	nop
 80154b8:	08022814 	.word	0x08022814
 80154bc:	08022830 	.word	0x08022830

080154c0 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 80154c0:	b5b0      	push	{r4, r5, r7, lr}
 80154c2:	b086      	sub	sp, #24
 80154c4:	af02      	add	r7, sp, #8
 80154c6:	60f8      	str	r0, [r7, #12]
 80154c8:	60b9      	str	r1, [r7, #8]
 80154ca:	4639      	mov	r1, r7
 80154cc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80154d0:	f7fb ff9e 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 80154d4:	4604      	mov	r4, r0
 80154d6:	6823      	ldr	r3, [r4, #0]
 80154d8:	3368      	adds	r3, #104	; 0x68
 80154da:	681d      	ldr	r5, [r3, #0]
 80154dc:	f7fb ffa8 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80154e0:	4603      	mov	r3, r0
 80154e2:	9300      	str	r3, [sp, #0]
 80154e4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80154e8:	4a04      	ldr	r2, [pc, #16]	; (80154fc <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 80154ea:	4905      	ldr	r1, [pc, #20]	; (8015500 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 80154ec:	4620      	mov	r0, r4
 80154ee:	47a8      	blx	r5
    return *this;
 80154f0:	68fb      	ldr	r3, [r7, #12]
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3710      	adds	r7, #16
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bdb0      	pop	{r4, r5, r7, pc}
 80154fa:	bf00      	nop
 80154fc:	08022814 	.word	0x08022814
 8015500:	0802285c 	.word	0x0802285c

08015504 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8015504:	b590      	push	{r4, r7, lr}
 8015506:	b093      	sub	sp, #76	; 0x4c
 8015508:	af00      	add	r7, sp, #0
 801550a:	60f8      	str	r0, [r7, #12]
 801550c:	60b9      	str	r1, [r7, #8]
 801550e:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 8015512:	f107 0310 	add.w	r3, r7, #16
 8015516:	68b9      	ldr	r1, [r7, #8]
 8015518:	4618      	mov	r0, r3
 801551a:	f005 f8bb 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801551e:	f107 0310 	add.w	r3, r7, #16
 8015522:	ed97 0b00 	vldr	d0, [r7]
 8015526:	4618      	mov	r0, r3
 8015528:	f005 f9ee 	bl	801a908 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	33e0      	adds	r3, #224	; 0xe0
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	f107 0210 	add.w	r2, r7, #16
 8015538:	4611      	mov	r1, r2
 801553a:	68f8      	ldr	r0, [r7, #12]
 801553c:	4798      	blx	r3
    return *this;
 801553e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015540:	f107 0310 	add.w	r3, r7, #16
 8015544:	4618      	mov	r0, r3
 8015546:	f005 f8cf 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
    return *this;
 801554a:	4623      	mov	r3, r4
}
 801554c:	4618      	mov	r0, r3
 801554e:	374c      	adds	r7, #76	; 0x4c
 8015550:	46bd      	mov	sp, r7
 8015552:	bd90      	pop	{r4, r7, pc}

08015554 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 8015554:	b590      	push	{r4, r7, lr}
 8015556:	b093      	sub	sp, #76	; 0x4c
 8015558:	af00      	add	r7, sp, #0
 801555a:	60f8      	str	r0, [r7, #12]
 801555c:	60b9      	str	r1, [r7, #8]
 801555e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015560:	f107 0310 	add.w	r3, r7, #16
 8015564:	68b9      	ldr	r1, [r7, #8]
 8015566:	4618      	mov	r0, r3
 8015568:	f005 f894 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801556c:	f107 0310 	add.w	r3, r7, #16
 8015570:	6879      	ldr	r1, [r7, #4]
 8015572:	4618      	mov	r0, r3
 8015574:	f005 fa72 	bl	801aa5c <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	33e0      	adds	r3, #224	; 0xe0
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	f107 0210 	add.w	r2, r7, #16
 8015584:	4611      	mov	r1, r2
 8015586:	68f8      	ldr	r0, [r7, #12]
 8015588:	4798      	blx	r3
    return *this;
 801558a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801558c:	f107 0310 	add.w	r3, r7, #16
 8015590:	4618      	mov	r0, r3
 8015592:	f005 f8a9 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015596:	4623      	mov	r3, r4
}
 8015598:	4618      	mov	r0, r3
 801559a:	374c      	adds	r7, #76	; 0x4c
 801559c:	46bd      	mov	sp, r7
 801559e:	bd90      	pop	{r4, r7, pc}

080155a0 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 80155a0:	b590      	push	{r4, r7, lr}
 80155a2:	b093      	sub	sp, #76	; 0x4c
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	60f8      	str	r0, [r7, #12]
 80155a8:	60b9      	str	r1, [r7, #8]
 80155aa:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80155ac:	f107 0310 	add.w	r3, r7, #16
 80155b0:	68b9      	ldr	r1, [r7, #8]
 80155b2:	4618      	mov	r0, r3
 80155b4:	f005 f86e 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80155b8:	f107 0310 	add.w	r3, r7, #16
 80155bc:	6879      	ldr	r1, [r7, #4]
 80155be:	4618      	mov	r0, r3
 80155c0:	f005 f9e6 	bl	801a990 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	33e0      	adds	r3, #224	; 0xe0
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	f107 0210 	add.w	r2, r7, #16
 80155d0:	4611      	mov	r1, r2
 80155d2:	68f8      	ldr	r0, [r7, #12]
 80155d4:	4798      	blx	r3
    return *this;
 80155d6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80155d8:	f107 0310 	add.w	r3, r7, #16
 80155dc:	4618      	mov	r0, r3
 80155de:	f005 f883 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
    return *this;
 80155e2:	4623      	mov	r3, r4
}
 80155e4:	4618      	mov	r0, r3
 80155e6:	374c      	adds	r7, #76	; 0x4c
 80155e8:	46bd      	mov	sp, r7
 80155ea:	bd90      	pop	{r4, r7, pc}

080155ec <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 80155ec:	b590      	push	{r4, r7, lr}
 80155ee:	b093      	sub	sp, #76	; 0x4c
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	60f8      	str	r0, [r7, #12]
 80155f4:	60b9      	str	r1, [r7, #8]
 80155f6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80155f8:	f107 0310 	add.w	r3, r7, #16
 80155fc:	68b9      	ldr	r1, [r7, #8]
 80155fe:	4618      	mov	r0, r3
 8015600:	f005 f848 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015604:	f107 0310 	add.w	r3, r7, #16
 8015608:	6879      	ldr	r1, [r7, #4]
 801560a:	4618      	mov	r0, r3
 801560c:	f005 f9e2 	bl	801a9d4 <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	33e0      	adds	r3, #224	; 0xe0
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	f107 0210 	add.w	r2, r7, #16
 801561c:	4611      	mov	r1, r2
 801561e:	68f8      	ldr	r0, [r7, #12]
 8015620:	4798      	blx	r3
    return *this;
 8015622:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015624:	f107 0310 	add.w	r3, r7, #16
 8015628:	4618      	mov	r0, r3
 801562a:	f005 f85d 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
    return *this;
 801562e:	4623      	mov	r3, r4
}
 8015630:	4618      	mov	r0, r3
 8015632:	374c      	adds	r7, #76	; 0x4c
 8015634:	46bd      	mov	sp, r7
 8015636:	bd90      	pop	{r4, r7, pc}

08015638 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8015638:	b590      	push	{r4, r7, lr}
 801563a:	b093      	sub	sp, #76	; 0x4c
 801563c:	af00      	add	r7, sp, #0
 801563e:	60f8      	str	r0, [r7, #12]
 8015640:	60b9      	str	r1, [r7, #8]
 8015642:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015644:	f107 0310 	add.w	r3, r7, #16
 8015648:	68b9      	ldr	r1, [r7, #8]
 801564a:	4618      	mov	r0, r3
 801564c:	f005 f822 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015650:	f107 0310 	add.w	r3, r7, #16
 8015654:	6879      	ldr	r1, [r7, #4]
 8015656:	4618      	mov	r0, r3
 8015658:	f005 f9de 	bl	801aa18 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	33e0      	adds	r3, #224	; 0xe0
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	f107 0210 	add.w	r2, r7, #16
 8015668:	4611      	mov	r1, r2
 801566a:	68f8      	ldr	r0, [r7, #12]
 801566c:	4798      	blx	r3
    return *this;
 801566e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015670:	f107 0310 	add.w	r3, r7, #16
 8015674:	4618      	mov	r0, r3
 8015676:	f005 f837 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
    return *this;
 801567a:	4623      	mov	r3, r4
}
 801567c:	4618      	mov	r0, r3
 801567e:	374c      	adds	r7, #76	; 0x4c
 8015680:	46bd      	mov	sp, r7
 8015682:	bd90      	pop	{r4, r7, pc}

08015684 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8015684:	b590      	push	{r4, r7, lr}
 8015686:	b093      	sub	sp, #76	; 0x4c
 8015688:	af00      	add	r7, sp, #0
 801568a:	60f8      	str	r0, [r7, #12]
 801568c:	60b9      	str	r1, [r7, #8]
 801568e:	607a      	str	r2, [r7, #4]
 8015690:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8015692:	f107 0310 	add.w	r3, r7, #16
 8015696:	68b9      	ldr	r1, [r7, #8]
 8015698:	4618      	mov	r0, r3
 801569a:	f004 fffb 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 801569e:	f107 0310 	add.w	r3, r7, #16
 80156a2:	683a      	ldr	r2, [r7, #0]
 80156a4:	6879      	ldr	r1, [r7, #4]
 80156a6:	4618      	mov	r0, r3
 80156a8:	f005 f9fa 	bl	801aaa0 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	33e0      	adds	r3, #224	; 0xe0
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	f107 0210 	add.w	r2, r7, #16
 80156b8:	4611      	mov	r1, r2
 80156ba:	68f8      	ldr	r0, [r7, #12]
 80156bc:	4798      	blx	r3
    return *this;
 80156be:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80156c0:	f107 0310 	add.w	r3, r7, #16
 80156c4:	4618      	mov	r0, r3
 80156c6:	f005 f80f 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
    return *this;
 80156ca:	4623      	mov	r3, r4
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	374c      	adds	r7, #76	; 0x4c
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd90      	pop	{r4, r7, pc}

080156d4 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 80156d4:	b590      	push	{r4, r7, lr}
 80156d6:	b0a1      	sub	sp, #132	; 0x84
 80156d8:	af00      	add	r7, sp, #0
 80156da:	60f8      	str	r0, [r7, #12]
 80156dc:	60b9      	str	r1, [r7, #8]
 80156de:	607a      	str	r2, [r7, #4]
 80156e0:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 80156e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80156e6:	6879      	ldr	r1, [r7, #4]
 80156e8:	4618      	mov	r0, r3
 80156ea:	f004 ffd3 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 80156ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80156f2:	683a      	ldr	r2, [r7, #0]
 80156f4:	68b9      	ldr	r1, [r7, #8]
 80156f6:	4618      	mov	r0, r3
 80156f8:	f005 f9f8 	bl	801aaec <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 80156fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015700:	4618      	mov	r0, r3
 8015702:	f005 fdc5 	bl	801b290 <_ZNK14MockNamedValue13getComparatorEv>
 8015706:	4603      	mov	r3, r0
 8015708:	2b00      	cmp	r3, #0
 801570a:	bf0c      	ite	eq
 801570c:	2301      	moveq	r3, #1
 801570e:	2300      	movne	r3, #0
 8015710:	b2db      	uxtb	r3, r3
 8015712:	2b00      	cmp	r3, #0
 8015714:	d01c      	beq.n	8015750 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	33cc      	adds	r3, #204	; 0xcc
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	68f8      	ldr	r0, [r7, #12]
 8015720:	4798      	blx	r3
 8015722:	4601      	mov	r1, r0
 8015724:	f107 0314 	add.w	r3, r7, #20
 8015728:	68ba      	ldr	r2, [r7, #8]
 801572a:	4618      	mov	r0, r3
 801572c:	f004 fed6 	bl	801a4dc <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	33dc      	adds	r3, #220	; 0xdc
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	f107 0214 	add.w	r2, r7, #20
 801573c:	4611      	mov	r1, r2
 801573e:	68f8      	ldr	r0, [r7, #12]
 8015740:	4798      	blx	r3
        return *this;
 8015742:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8015744:	f107 0314 	add.w	r3, r7, #20
 8015748:	4618      	mov	r0, r3
 801574a:	f001 fc81 	bl	8017050 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801574e:	e009      	b.n	8015764 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	33e0      	adds	r3, #224	; 0xe0
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801575c:	4611      	mov	r1, r2
 801575e:	68f8      	ldr	r0, [r7, #12]
 8015760:	4798      	blx	r3
    return *this;
 8015762:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015764:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015768:	4618      	mov	r0, r3
 801576a:	f004 ffbd 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 801576e:	4623      	mov	r3, r4
}
 8015770:	4618      	mov	r0, r3
 8015772:	3784      	adds	r7, #132	; 0x84
 8015774:	46bd      	mov	sp, r7
 8015776:	bd90      	pop	{r4, r7, pc}

08015778 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 8015778:	b590      	push	{r4, r7, lr}
 801577a:	b095      	sub	sp, #84	; 0x54
 801577c:	af00      	add	r7, sp, #0
 801577e:	60f8      	str	r0, [r7, #12]
 8015780:	60b9      	str	r1, [r7, #8]
 8015782:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	33f0      	adds	r3, #240	; 0xf0
 801578a:	681c      	ldr	r4, [r3, #0]
 801578c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015790:	4917      	ldr	r1, [pc, #92]	; (80157f0 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 8015792:	4618      	mov	r0, r3
 8015794:	f7f4 fa59 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8015798:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	68b9      	ldr	r1, [r7, #8]
 80157a0:	68f8      	ldr	r0, [r7, #12]
 80157a2:	47a0      	blx	r4
 80157a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80157a8:	4618      	mov	r0, r3
 80157aa:	f7f4 fe06 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 80157ae:	f107 0310 	add.w	r3, r7, #16
 80157b2:	68b9      	ldr	r1, [r7, #8]
 80157b4:	4618      	mov	r0, r3
 80157b6:	f004 ff6d 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 80157ba:	f107 0310 	add.w	r3, r7, #16
 80157be:	6879      	ldr	r1, [r7, #4]
 80157c0:	4618      	mov	r0, r3
 80157c2:	f005 f8e5 	bl	801a990 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	33e4      	adds	r3, #228	; 0xe4
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	f107 0210 	add.w	r2, r7, #16
 80157d2:	4611      	mov	r1, r2
 80157d4:	68f8      	ldr	r0, [r7, #12]
 80157d6:	4798      	blx	r3

    return *this;
 80157d8:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 80157da:	f107 0310 	add.w	r3, r7, #16
 80157de:	4618      	mov	r0, r3
 80157e0:	f004 ff82 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
    return *this;
 80157e4:	4623      	mov	r3, r4
}
 80157e6:	4618      	mov	r0, r3
 80157e8:	3754      	adds	r7, #84	; 0x54
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd90      	pop	{r4, r7, pc}
 80157ee:	bf00      	nop
 80157f0:	0802280c 	.word	0x0802280c

080157f4 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 80157f4:	b590      	push	{r4, r7, lr}
 80157f6:	b093      	sub	sp, #76	; 0x4c
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	60f8      	str	r0, [r7, #12]
 80157fc:	60b9      	str	r1, [r7, #8]
 80157fe:	607a      	str	r2, [r7, #4]
 8015800:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	33f0      	adds	r3, #240	; 0xf0
 8015808:	681c      	ldr	r4, [r3, #0]
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	68ba      	ldr	r2, [r7, #8]
 801580e:	6879      	ldr	r1, [r7, #4]
 8015810:	68f8      	ldr	r0, [r7, #12]
 8015812:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 8015814:	f107 0310 	add.w	r3, r7, #16
 8015818:	6879      	ldr	r1, [r7, #4]
 801581a:	4618      	mov	r0, r3
 801581c:	f004 ff3a 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 8015820:	f107 0310 	add.w	r3, r7, #16
 8015824:	683a      	ldr	r2, [r7, #0]
 8015826:	68b9      	ldr	r1, [r7, #8]
 8015828:	4618      	mov	r0, r3
 801582a:	f005 f95f 	bl	801aaec <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	33e4      	adds	r3, #228	; 0xe4
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	f107 0210 	add.w	r2, r7, #16
 801583a:	4611      	mov	r1, r2
 801583c:	68f8      	ldr	r0, [r7, #12]
 801583e:	4798      	blx	r3

    return *this;
 8015840:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8015842:	f107 0310 	add.w	r3, r7, #16
 8015846:	4618      	mov	r0, r3
 8015848:	f004 ff4e 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
    return *this;
 801584c:	4623      	mov	r3, r4
}
 801584e:	4618      	mov	r0, r3
 8015850:	374c      	adds	r7, #76	; 0x4c
 8015852:	46bd      	mov	sp, r7
 8015854:	bd90      	pop	{r4, r7, pc}

08015856 <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 8015856:	b480      	push	{r7}
 8015858:	b083      	sub	sp, #12
 801585a:	af00      	add	r7, sp, #0
 801585c:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	7d1b      	ldrb	r3, [r3, #20]
 8015862:	2b02      	cmp	r3, #2
 8015864:	bf0c      	ite	eq
 8015866:	2301      	moveq	r3, #1
 8015868:	2300      	movne	r3, #0
 801586a:	b2db      	uxtb	r3, r3
}
 801586c:	4618      	mov	r0, r3
 801586e:	370c      	adds	r7, #12
 8015870:	46bd      	mov	sp, r7
 8015872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015876:	4770      	bx	lr

08015878 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 8015878:	b480      	push	{r7}
 801587a:	b083      	sub	sp, #12
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	7d1b      	ldrb	r3, [r3, #20]
 8015884:	2b01      	cmp	r3, #1
 8015886:	bf0c      	ite	eq
 8015888:	2301      	moveq	r3, #1
 801588a:	2300      	movne	r3, #0
 801588c:	b2db      	uxtb	r3, r3
}
 801588e:	4618      	mov	r0, r3
 8015890:	370c      	adds	r7, #12
 8015892:	46bd      	mov	sp, r7
 8015894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015898:	4770      	bx	lr
	...

0801589c <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 801589c:	b5b0      	push	{r4, r5, r7, lr}
 801589e:	b096      	sub	sp, #88	; 0x58
 80158a0:	af02      	add	r7, sp, #8
 80158a2:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	7d5b      	ldrb	r3, [r3, #21]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	f040 80bc 	bne.w	8015a26 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2201      	movs	r2, #1
 80158b2:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	7d1b      	ldrb	r3, [r3, #20]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d014      	beq.n	80158e6 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	7d1b      	ldrb	r3, [r3, #20]
 80158c0:	2b02      	cmp	r3, #2
 80158c2:	d10a      	bne.n	80158da <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	6998      	ldr	r0, [r3, #24]
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	699b      	ldr	r3, [r3, #24]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	33d8      	adds	r3, #216	; 0xd8
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	687a      	ldr	r2, [r7, #4]
 80158d4:	68d2      	ldr	r2, [r2, #12]
 80158d6:	4611      	mov	r1, r2
 80158d8:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	331c      	adds	r3, #28
 80158de:	4618      	mov	r0, r3
 80158e0:	f003 fe07 	bl	80194f2 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 80158e4:	e0a0      	b.n	8015a28 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	331c      	adds	r3, #28
 80158ea:	4618      	mov	r0, r3
 80158ec:	f003 fac3 	bl	8018e76 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 80158f0:	4603      	mov	r3, r0
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d00f      	beq.n	8015916 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 80158f6:	f7fb fd8b 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 80158fa:	4604      	mov	r4, r0
 80158fc:	6823      	ldr	r3, [r4, #0]
 80158fe:	3368      	adds	r3, #104	; 0x68
 8015900:	681d      	ldr	r5, [r3, #0]
 8015902:	f7fb fd95 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015906:	4603      	mov	r3, r0
 8015908:	9300      	str	r3, [sp, #0]
 801590a:	f240 1385 	movw	r3, #389	; 0x185
 801590e:	4a48      	ldr	r2, [pc, #288]	; (8015a30 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8015910:	4948      	ldr	r1, [pc, #288]	; (8015a34 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 8015912:	4620      	mov	r0, r4
 8015914:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	331c      	adds	r3, #28
 801591a:	4618      	mov	r0, r3
 801591c:	f003 fd5f 	bl	80193de <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8015920:	4602      	mov	r2, r0
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	699b      	ldr	r3, [r3, #24]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d01f      	beq.n	801596e <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	699a      	ldr	r2, [r3, #24]
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	699b      	ldr	r3, [r3, #24]
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	33e4      	adds	r3, #228	; 0xe4
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	4610      	mov	r0, r2
 801593e:	4798      	blx	r3
        callHasSucceeded();
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	33d0      	adds	r3, #208	; 0xd0
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	6998      	ldr	r0, [r3, #24]
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	699b      	ldr	r3, [r3, #24]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	33d8      	adds	r3, #216	; 0xd8
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	687a      	ldr	r2, [r7, #4]
 801595c:	68d2      	ldr	r2, [r2, #12]
 801595e:	4611      	mov	r1, r2
 8015960:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	331c      	adds	r3, #28
 8015966:	4618      	mov	r0, r3
 8015968:	f003 fdc3 	bl	80194f2 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 801596c:	e05c      	b.n	8015a28 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	331c      	adds	r3, #28
 8015972:	4618      	mov	r0, r3
 8015974:	f003 ffc4 	bl	8019900 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 8015978:	4603      	mov	r3, r0
 801597a:	2b00      	cmp	r3, #0
 801597c:	d029      	beq.n	80159d2 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	33cc      	adds	r3, #204	; 0xcc
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	6878      	ldr	r0, [r7, #4]
 8015988:	4798      	blx	r3
 801598a:	4604      	mov	r4, r0
 801598c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015990:	6879      	ldr	r1, [r7, #4]
 8015992:	4618      	mov	r0, r3
 8015994:	f7ff f93b 	bl	8014c0e <_ZNK21MockCheckedActualCall7getNameEv>
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801599c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80159a0:	f107 000c 	add.w	r0, r7, #12
 80159a4:	4621      	mov	r1, r4
 80159a6:	f004 fd21 	bl	801a3ec <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 80159aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80159ae:	4618      	mov	r0, r3
 80159b0:	f7f4 fd03 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	33dc      	adds	r3, #220	; 0xdc
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	f107 020c 	add.w	r2, r7, #12
 80159c0:	4611      	mov	r1, r2
 80159c2:	6878      	ldr	r0, [r7, #4]
 80159c4:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80159c6:	f107 030c 	add.w	r3, r7, #12
 80159ca:	4618      	mov	r0, r3
 80159cc:	f001 fb62 	bl	8017094 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 80159d0:	e02a      	b.n	8015a28 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	33cc      	adds	r3, #204	; 0xcc
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	6878      	ldr	r0, [r7, #4]
 80159dc:	4798      	blx	r3
 80159de:	4604      	mov	r4, r0
 80159e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80159e4:	6879      	ldr	r1, [r7, #4]
 80159e6:	4618      	mov	r0, r3
 80159e8:	f7ff f911 	bl	8014c0e <_ZNK21MockCheckedActualCall7getNameEv>
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80159f4:	f107 000c 	add.w	r0, r7, #12
 80159f8:	4621      	mov	r1, r4
 80159fa:	f004 fe05 	bl	801a608 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 80159fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7f4 fcd9 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	33dc      	adds	r3, #220	; 0xdc
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	f107 020c 	add.w	r2, r7, #12
 8015a14:	4611      	mov	r1, r2
 8015a16:	6878      	ldr	r0, [r7, #4]
 8015a18:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8015a1a:	f107 030c 	add.w	r3, r7, #12
 8015a1e:	4618      	mov	r0, r3
 8015a20:	f001 fb5a 	bl	80170d8 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8015a24:	e000      	b.n	8015a28 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 8015a26:	bf00      	nop
    }
}
 8015a28:	3750      	adds	r7, #80	; 0x50
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8015a2e:	bf00      	nop
 8015a30:	08022814 	.word	0x08022814
 8015a34:	0802287c 	.word	0x0802287c

08015a38 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8015a38:	b480      	push	{r7}
 8015a3a:	b083      	sub	sp, #12
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
 8015a40:	460b      	mov	r3, r1
 8015a42:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	78fa      	ldrb	r2, [r7, #3]
 8015a48:	751a      	strb	r2, [r3, #20]
}
 8015a4a:	bf00      	nop
 8015a4c:	370c      	adds	r7, #12
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a54:	4770      	bx	lr
	...

08015a58 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b084      	sub	sp, #16
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	6039      	str	r1, [r7, #0]
    checkExpectations();
 8015a62:	683b      	ldr	r3, [r7, #0]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	33c4      	adds	r3, #196	; 0xc4
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	6838      	ldr	r0, [r7, #0]
 8015a6c:	4798      	blx	r3
    if (matchingExpectation_)
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	699b      	ldr	r3, [r3, #24]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d00a      	beq.n	8015a8c <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 8015a76:	683b      	ldr	r3, [r7, #0]
 8015a78:	6999      	ldr	r1, [r3, #24]
 8015a7a:	683b      	ldr	r3, [r7, #0]
 8015a7c:	699b      	ldr	r3, [r3, #24]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	3394      	adds	r3, #148	; 0x94
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	687a      	ldr	r2, [r7, #4]
 8015a86:	4610      	mov	r0, r2
 8015a88:	4798      	blx	r3
 8015a8a:	e010      	b.n	8015aae <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 8015a8c:	f107 0308 	add.w	r3, r7, #8
 8015a90:	4909      	ldr	r1, [pc, #36]	; (8015ab8 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 8015a92:	4618      	mov	r0, r3
 8015a94:	f7f4 f8d9 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8015a98:	f107 0308 	add.w	r3, r7, #8
 8015a9c:	4619      	mov	r1, r3
 8015a9e:	6878      	ldr	r0, [r7, #4]
 8015aa0:	f004 fdf8 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
 8015aa4:	f107 0308 	add.w	r3, r7, #8
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7f4 fc86 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	3710      	adds	r7, #16
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}
 8015ab6:	bf00      	nop
 8015ab8:	080228f8 	.word	0x080228f8

08015abc <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b082      	sub	sp, #8
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
 8015ac4:	460b      	mov	r3, r1
 8015ac6:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	3350      	adds	r3, #80	; 0x50
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	4798      	blx	r3
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	f083 0301 	eor.w	r3, r3, #1
 8015ada:	b2db      	uxtb	r3, r3
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d001      	beq.n	8015ae4 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8015ae0:	78fb      	ldrb	r3, [r7, #3]
 8015ae2:	e007      	b.n	8015af4 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	335c      	adds	r3, #92	; 0x5c
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	6878      	ldr	r0, [r7, #4]
 8015aee:	4798      	blx	r3
 8015af0:	4603      	mov	r3, r0
 8015af2:	bf00      	nop
}
 8015af4:	4618      	mov	r0, r3
 8015af6:	3708      	adds	r7, #8
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}

08015afc <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8015afc:	b590      	push	{r4, r7, lr}
 8015afe:	b091      	sub	sp, #68	; 0x44
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	3354      	adds	r3, #84	; 0x54
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	f107 0208 	add.w	r2, r7, #8
 8015b10:	6879      	ldr	r1, [r7, #4]
 8015b12:	4610      	mov	r0, r2
 8015b14:	4798      	blx	r3
 8015b16:	f107 0308 	add.w	r3, r7, #8
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f005 f896 	bl	801ac4c <_ZNK14MockNamedValue12getBoolValueEv>
 8015b20:	4603      	mov	r3, r0
 8015b22:	461c      	mov	r4, r3
 8015b24:	bf00      	nop
 8015b26:	f107 0308 	add.w	r3, r7, #8
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f004 fddc 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 8015b30:	4623      	mov	r3, r4
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	3744      	adds	r7, #68	; 0x44
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd90      	pop	{r4, r7, pc}

08015b3a <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 8015b3a:	b580      	push	{r7, lr}
 8015b3c:	b082      	sub	sp, #8
 8015b3e:	af00      	add	r7, sp, #0
 8015b40:	6078      	str	r0, [r7, #4]
 8015b42:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	3350      	adds	r3, #80	; 0x50
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	4798      	blx	r3
 8015b50:	4603      	mov	r3, r0
 8015b52:	f083 0301 	eor.w	r3, r3, #1
 8015b56:	b2db      	uxtb	r3, r3
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d001      	beq.n	8015b60 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 8015b5c:	683b      	ldr	r3, [r7, #0]
 8015b5e:	e007      	b.n	8015b70 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	3364      	adds	r3, #100	; 0x64
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	6878      	ldr	r0, [r7, #4]
 8015b6a:	4798      	blx	r3
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	bf00      	nop
}
 8015b70:	4618      	mov	r0, r3
 8015b72:	3708      	adds	r7, #8
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}

08015b78 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 8015b78:	b590      	push	{r4, r7, lr}
 8015b7a:	b091      	sub	sp, #68	; 0x44
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	3354      	adds	r3, #84	; 0x54
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	f107 0208 	add.w	r2, r7, #8
 8015b8c:	6879      	ldr	r1, [r7, #4]
 8015b8e:	4610      	mov	r0, r2
 8015b90:	4798      	blx	r3
 8015b92:	f107 0308 	add.w	r3, r7, #8
 8015b96:	4618      	mov	r0, r3
 8015b98:	f005 f8d0 	bl	801ad3c <_ZNK14MockNamedValue11getIntValueEv>
 8015b9c:	4604      	mov	r4, r0
 8015b9e:	bf00      	nop
 8015ba0:	f107 0308 	add.w	r3, r7, #8
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f004 fd9f 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 8015baa:	4623      	mov	r3, r4
}
 8015bac:	4618      	mov	r0, r3
 8015bae:	3744      	adds	r7, #68	; 0x44
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	bd90      	pop	{r4, r7, pc}

08015bb4 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8015bb4:	b590      	push	{r4, r7, lr}
 8015bb6:	b091      	sub	sp, #68	; 0x44
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	3354      	adds	r3, #84	; 0x54
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	f107 0208 	add.w	r2, r7, #8
 8015bc8:	6879      	ldr	r1, [r7, #4]
 8015bca:	4610      	mov	r0, r2
 8015bcc:	4798      	blx	r3
 8015bce:	f107 0308 	add.w	r3, r7, #8
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f005 f93c 	bl	801ae50 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8015bd8:	4604      	mov	r4, r0
 8015bda:	bf00      	nop
 8015bdc:	f107 0308 	add.w	r3, r7, #8
 8015be0:	4618      	mov	r0, r3
 8015be2:	f004 fd81 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 8015be6:	4623      	mov	r3, r4
}
 8015be8:	4618      	mov	r0, r3
 8015bea:	3744      	adds	r7, #68	; 0x44
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd90      	pop	{r4, r7, pc}

08015bf0 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b082      	sub	sp, #8
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
 8015bf8:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	3350      	adds	r3, #80	; 0x50
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	6878      	ldr	r0, [r7, #4]
 8015c04:	4798      	blx	r3
 8015c06:	4603      	mov	r3, r0
 8015c08:	f083 0301 	eor.w	r3, r3, #1
 8015c0c:	b2db      	uxtb	r3, r3
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d001      	beq.n	8015c16 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 8015c12:	683b      	ldr	r3, [r7, #0]
 8015c14:	e007      	b.n	8015c26 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	3368      	adds	r3, #104	; 0x68
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	6878      	ldr	r0, [r7, #4]
 8015c20:	4798      	blx	r3
 8015c22:	4603      	mov	r3, r0
 8015c24:	bf00      	nop
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	3708      	adds	r7, #8
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	bd80      	pop	{r7, pc}

08015c2e <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 8015c2e:	b590      	push	{r4, r7, lr}
 8015c30:	b091      	sub	sp, #68	; 0x44
 8015c32:	af00      	add	r7, sp, #0
 8015c34:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	3354      	adds	r3, #84	; 0x54
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	f107 0208 	add.w	r2, r7, #8
 8015c42:	6879      	ldr	r1, [r7, #4]
 8015c44:	4610      	mov	r0, r2
 8015c46:	4798      	blx	r3
 8015c48:	f107 0308 	add.w	r3, r7, #8
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f005 f89d 	bl	801ad8c <_ZNK14MockNamedValue15getLongIntValueEv>
 8015c52:	4604      	mov	r4, r0
 8015c54:	bf00      	nop
 8015c56:	f107 0308 	add.w	r3, r7, #8
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	f004 fd44 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 8015c60:	4623      	mov	r3, r4
}
 8015c62:	4618      	mov	r0, r3
 8015c64:	3744      	adds	r7, #68	; 0x44
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd90      	pop	{r4, r7, pc}

08015c6a <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 8015c6a:	b580      	push	{r7, lr}
 8015c6c:	b082      	sub	sp, #8
 8015c6e:	af00      	add	r7, sp, #0
 8015c70:	6078      	str	r0, [r7, #4]
 8015c72:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	3350      	adds	r3, #80	; 0x50
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	6878      	ldr	r0, [r7, #4]
 8015c7e:	4798      	blx	r3
 8015c80:	4603      	mov	r3, r0
 8015c82:	f083 0301 	eor.w	r3, r3, #1
 8015c86:	b2db      	uxtb	r3, r3
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d001      	beq.n	8015c90 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 8015c8c:	683b      	ldr	r3, [r7, #0]
 8015c8e:	e007      	b.n	8015ca0 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	3370      	adds	r3, #112	; 0x70
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	6878      	ldr	r0, [r7, #4]
 8015c9a:	4798      	blx	r3
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	bf00      	nop
}
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	3708      	adds	r7, #8
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	bd80      	pop	{r7, pc}

08015ca8 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8015ca8:	b5b0      	push	{r4, r5, r7, lr}
 8015caa:	b084      	sub	sp, #16
 8015cac:	af02      	add	r7, sp, #8
 8015cae:	6078      	str	r0, [r7, #4]
 8015cb0:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8015cb2:	f7fb fbad 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8015cb6:	4604      	mov	r4, r0
 8015cb8:	6823      	ldr	r3, [r4, #0]
 8015cba:	3368      	adds	r3, #104	; 0x68
 8015cbc:	681d      	ldr	r5, [r3, #0]
 8015cbe:	f7fb fbb7 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	9300      	str	r3, [sp, #0]
 8015cc6:	f240 13fb 	movw	r3, #507	; 0x1fb
 8015cca:	4a06      	ldr	r2, [pc, #24]	; (8015ce4 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8015ccc:	4906      	ldr	r1, [pc, #24]	; (8015ce8 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 8015cce:	4620      	mov	r0, r4
 8015cd0:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8015cd2:	2100      	movs	r1, #0
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	f7f1 fffb 	bl	8007cd0 <_ZN18cpputest_ulonglongC1Ei>
}
 8015cda:	6878      	ldr	r0, [r7, #4]
 8015cdc:	3708      	adds	r7, #8
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8015ce2:	bf00      	nop
 8015ce4:	08022814 	.word	0x08022814
 8015ce8:	08022830 	.word	0x08022830

08015cec <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8015cec:	b5b0      	push	{r4, r5, r7, lr}
 8015cee:	b086      	sub	sp, #24
 8015cf0:	af02      	add	r7, sp, #8
 8015cf2:	60f8      	str	r0, [r7, #12]
 8015cf4:	60b9      	str	r1, [r7, #8]
 8015cf6:	4639      	mov	r1, r7
 8015cf8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8015cfc:	f7fb fb88 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8015d00:	4604      	mov	r4, r0
 8015d02:	6823      	ldr	r3, [r4, #0]
 8015d04:	3368      	adds	r3, #104	; 0x68
 8015d06:	681d      	ldr	r5, [r3, #0]
 8015d08:	f7fb fb92 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	9300      	str	r3, [sp, #0]
 8015d10:	f240 2301 	movw	r3, #513	; 0x201
 8015d14:	4a06      	ldr	r2, [pc, #24]	; (8015d30 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8015d16:	4907      	ldr	r1, [pc, #28]	; (8015d34 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8015d18:	4620      	mov	r0, r4
 8015d1a:	47a8      	blx	r5
    return default_value;
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	461a      	mov	r2, r3
 8015d20:	463b      	mov	r3, r7
 8015d22:	cb03      	ldmia	r3!, {r0, r1}
 8015d24:	6010      	str	r0, [r2, #0]
 8015d26:	6051      	str	r1, [r2, #4]
}
 8015d28:	68f8      	ldr	r0, [r7, #12]
 8015d2a:	3710      	adds	r7, #16
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8015d30:	08022814 	.word	0x08022814
 8015d34:	08022830 	.word	0x08022830

08015d38 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8015d38:	b5b0      	push	{r4, r5, r7, lr}
 8015d3a:	b084      	sub	sp, #16
 8015d3c:	af02      	add	r7, sp, #8
 8015d3e:	6078      	str	r0, [r7, #4]
 8015d40:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8015d42:	f7fb fb65 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8015d46:	4604      	mov	r4, r0
 8015d48:	6823      	ldr	r3, [r4, #0]
 8015d4a:	3368      	adds	r3, #104	; 0x68
 8015d4c:	681d      	ldr	r5, [r3, #0]
 8015d4e:	f7fb fb6f 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015d52:	4603      	mov	r3, r0
 8015d54:	9300      	str	r3, [sp, #0]
 8015d56:	f240 2307 	movw	r3, #519	; 0x207
 8015d5a:	4a06      	ldr	r2, [pc, #24]	; (8015d74 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 8015d5c:	4906      	ldr	r1, [pc, #24]	; (8015d78 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 8015d5e:	4620      	mov	r0, r4
 8015d60:	47a8      	blx	r5
    return cpputest_longlong(0);
 8015d62:	2100      	movs	r1, #0
 8015d64:	6878      	ldr	r0, [r7, #4]
 8015d66:	f7f1 ffa7 	bl	8007cb8 <_ZN17cpputest_longlongC1Ei>
}
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	3708      	adds	r7, #8
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bdb0      	pop	{r4, r5, r7, pc}
 8015d72:	bf00      	nop
 8015d74:	08022814 	.word	0x08022814
 8015d78:	0802285c 	.word	0x0802285c

08015d7c <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 8015d7c:	b5b0      	push	{r4, r5, r7, lr}
 8015d7e:	b086      	sub	sp, #24
 8015d80:	af02      	add	r7, sp, #8
 8015d82:	60f8      	str	r0, [r7, #12]
 8015d84:	60b9      	str	r1, [r7, #8]
 8015d86:	4639      	mov	r1, r7
 8015d88:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8015d8c:	f7fb fb40 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8015d90:	4604      	mov	r4, r0
 8015d92:	6823      	ldr	r3, [r4, #0]
 8015d94:	3368      	adds	r3, #104	; 0x68
 8015d96:	681d      	ldr	r5, [r3, #0]
 8015d98:	f7fb fb4a 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	9300      	str	r3, [sp, #0]
 8015da0:	f240 230d 	movw	r3, #525	; 0x20d
 8015da4:	4a06      	ldr	r2, [pc, #24]	; (8015dc0 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8015da6:	4907      	ldr	r1, [pc, #28]	; (8015dc4 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8015da8:	4620      	mov	r0, r4
 8015daa:	47a8      	blx	r5
    return default_value;
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	461a      	mov	r2, r3
 8015db0:	463b      	mov	r3, r7
 8015db2:	cb03      	ldmia	r3!, {r0, r1}
 8015db4:	6010      	str	r0, [r2, #0]
 8015db6:	6051      	str	r1, [r2, #4]
}
 8015db8:	68f8      	ldr	r0, [r7, #12]
 8015dba:	3710      	adds	r7, #16
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8015dc0:	08022814 	.word	0x08022814
 8015dc4:	0802285c 	.word	0x0802285c

08015dc8 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	ed2d 8b02 	vpush	{d8}
 8015dce:	b090      	sub	sp, #64	; 0x40
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	3354      	adds	r3, #84	; 0x54
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	f107 0208 	add.w	r2, r7, #8
 8015de0:	6879      	ldr	r1, [r7, #4]
 8015de2:	4610      	mov	r0, r2
 8015de4:	4798      	blx	r3
 8015de6:	f107 0308 	add.w	r3, r7, #8
 8015dea:	4618      	mov	r0, r3
 8015dec:	f005 f908 	bl	801b000 <_ZNK14MockNamedValue14getDoubleValueEv>
 8015df0:	eeb0 8a40 	vmov.f32	s16, s0
 8015df4:	eef0 8a60 	vmov.f32	s17, s1
 8015df8:	bf00      	nop
 8015dfa:	f107 0308 	add.w	r3, r7, #8
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f004 fc72 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 8015e04:	eeb0 7a48 	vmov.f32	s14, s16
 8015e08:	eef0 7a68 	vmov.f32	s15, s17
}
 8015e0c:	eeb0 0a47 	vmov.f32	s0, s14
 8015e10:	eef0 0a67 	vmov.f32	s1, s15
 8015e14:	3740      	adds	r7, #64	; 0x40
 8015e16:	46bd      	mov	sp, r7
 8015e18:	ecbd 8b02 	vpop	{d8}
 8015e1c:	bd80      	pop	{r7, pc}

08015e1e <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 8015e1e:	b580      	push	{r7, lr}
 8015e20:	b084      	sub	sp, #16
 8015e22:	af00      	add	r7, sp, #0
 8015e24:	60f8      	str	r0, [r7, #12]
 8015e26:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	3350      	adds	r3, #80	; 0x50
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	68f8      	ldr	r0, [r7, #12]
 8015e34:	4798      	blx	r3
 8015e36:	4603      	mov	r3, r0
 8015e38:	f083 0301 	eor.w	r3, r3, #1
 8015e3c:	b2db      	uxtb	r3, r3
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d002      	beq.n	8015e48 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 8015e42:	ed97 7b00 	vldr	d7, [r7]
 8015e46:	e00a      	b.n	8015e5e <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	3398      	adds	r3, #152	; 0x98
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	68f8      	ldr	r0, [r7, #12]
 8015e52:	4798      	blx	r3
 8015e54:	eeb0 7a40 	vmov.f32	s14, s0
 8015e58:	eef0 7a60 	vmov.f32	s15, s1
 8015e5c:	bf00      	nop
}
 8015e5e:	eeb0 0a47 	vmov.f32	s0, s14
 8015e62:	eef0 0a67 	vmov.f32	s1, s15
 8015e66:	3710      	adds	r7, #16
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	bd80      	pop	{r7, pc}

08015e6c <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 8015e6c:	b590      	push	{r4, r7, lr}
 8015e6e:	b091      	sub	sp, #68	; 0x44
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	3354      	adds	r3, #84	; 0x54
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	f107 0208 	add.w	r2, r7, #8
 8015e80:	6879      	ldr	r1, [r7, #4]
 8015e82:	4610      	mov	r0, r2
 8015e84:	4798      	blx	r3
 8015e86:	f107 0308 	add.w	r3, r7, #8
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f004 ff06 	bl	801ac9c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8015e90:	4604      	mov	r4, r0
 8015e92:	bf00      	nop
 8015e94:	f107 0308 	add.w	r3, r7, #8
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f004 fc25 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 8015e9e:	4623      	mov	r3, r4
}
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	3744      	adds	r7, #68	; 0x44
 8015ea4:	46bd      	mov	sp, r7
 8015ea6:	bd90      	pop	{r4, r7, pc}

08015ea8 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b082      	sub	sp, #8
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
 8015eb0:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	3350      	adds	r3, #80	; 0x50
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	4798      	blx	r3
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	f083 0301 	eor.w	r3, r3, #1
 8015ec4:	b2db      	uxtb	r3, r3
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d001      	beq.n	8015ece <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 8015eca:	683b      	ldr	r3, [r7, #0]
 8015ecc:	e007      	b.n	8015ede <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	3388      	adds	r3, #136	; 0x88
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	4798      	blx	r3
 8015eda:	4603      	mov	r3, r0
 8015edc:	bf00      	nop
}
 8015ede:	4618      	mov	r0, r3
 8015ee0:	3708      	adds	r7, #8
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}

08015ee6 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 8015ee6:	b580      	push	{r7, lr}
 8015ee8:	b082      	sub	sp, #8
 8015eea:	af00      	add	r7, sp, #0
 8015eec:	6078      	str	r0, [r7, #4]
 8015eee:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	3350      	adds	r3, #80	; 0x50
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	4798      	blx	r3
 8015efc:	4603      	mov	r3, r0
 8015efe:	f083 0301 	eor.w	r3, r3, #1
 8015f02:	b2db      	uxtb	r3, r3
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d001      	beq.n	8015f0c <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	e007      	b.n	8015f1c <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	33a0      	adds	r3, #160	; 0xa0
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	6878      	ldr	r0, [r7, #4]
 8015f16:	4798      	blx	r3
 8015f18:	4603      	mov	r3, r0
 8015f1a:	bf00      	nop
}
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	3708      	adds	r7, #8
 8015f20:	46bd      	mov	sp, r7
 8015f22:	bd80      	pop	{r7, pc}

08015f24 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8015f24:	b590      	push	{r4, r7, lr}
 8015f26:	b091      	sub	sp, #68	; 0x44
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	3354      	adds	r3, #84	; 0x54
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	f107 0208 	add.w	r2, r7, #8
 8015f38:	6879      	ldr	r1, [r7, #4]
 8015f3a:	4610      	mov	r0, r2
 8015f3c:	4798      	blx	r3
 8015f3e:	f107 0308 	add.w	r3, r7, #8
 8015f42:	4618      	mov	r0, r3
 8015f44:	f005 f8e0 	bl	801b108 <_ZNK14MockNamedValue15getPointerValueEv>
 8015f48:	4604      	mov	r4, r0
 8015f4a:	bf00      	nop
 8015f4c:	f107 0308 	add.w	r3, r7, #8
 8015f50:	4618      	mov	r0, r3
 8015f52:	f004 fbc9 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 8015f56:	4623      	mov	r3, r4
}
 8015f58:	4618      	mov	r0, r3
 8015f5a:	3744      	adds	r7, #68	; 0x44
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd90      	pop	{r4, r7, pc}

08015f60 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 8015f60:	b590      	push	{r4, r7, lr}
 8015f62:	b091      	sub	sp, #68	; 0x44
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	3354      	adds	r3, #84	; 0x54
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	f107 0208 	add.w	r2, r7, #8
 8015f74:	6879      	ldr	r1, [r7, #4]
 8015f76:	4610      	mov	r0, r2
 8015f78:	4798      	blx	r3
 8015f7a:	f107 0308 	add.w	r3, r7, #8
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f005 f8ea 	bl	801b158 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8015f84:	4604      	mov	r4, r0
 8015f86:	bf00      	nop
 8015f88:	f107 0308 	add.w	r3, r7, #8
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	f004 fbab 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 8015f92:	4623      	mov	r3, r4
}
 8015f94:	4618      	mov	r0, r3
 8015f96:	3744      	adds	r7, #68	; 0x44
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	bd90      	pop	{r4, r7, pc}

08015f9c <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b082      	sub	sp, #8
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
 8015fa4:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	3350      	adds	r3, #80	; 0x50
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	4798      	blx	r3
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	f083 0301 	eor.w	r3, r3, #1
 8015fb8:	b2db      	uxtb	r3, r3
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d001      	beq.n	8015fc2 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 8015fbe:	683b      	ldr	r3, [r7, #0]
 8015fc0:	e007      	b.n	8015fd2 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	33a8      	adds	r3, #168	; 0xa8
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	6878      	ldr	r0, [r7, #4]
 8015fcc:	4798      	blx	r3
 8015fce:	4603      	mov	r3, r0
 8015fd0:	bf00      	nop
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	3708      	adds	r7, #8
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}

08015fda <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 8015fda:	b590      	push	{r4, r7, lr}
 8015fdc:	b091      	sub	sp, #68	; 0x44
 8015fde:	af00      	add	r7, sp, #0
 8015fe0:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	3354      	adds	r3, #84	; 0x54
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	f107 0208 	add.w	r2, r7, #8
 8015fee:	6879      	ldr	r1, [r7, #4]
 8015ff0:	4610      	mov	r0, r2
 8015ff2:	4798      	blx	r3
 8015ff4:	f107 0308 	add.w	r3, r7, #8
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f005 f8d5 	bl	801b1a8 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8015ffe:	4604      	mov	r4, r0
 8016000:	bf00      	nop
 8016002:	f107 0308 	add.w	r3, r7, #8
 8016006:	4618      	mov	r0, r3
 8016008:	f004 fb6e 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 801600c:	4623      	mov	r3, r4
}
 801600e:	4618      	mov	r0, r3
 8016010:	3744      	adds	r7, #68	; 0x44
 8016012:	46bd      	mov	sp, r7
 8016014:	bd90      	pop	{r4, r7, pc}

08016016 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 8016016:	b580      	push	{r7, lr}
 8016018:	b082      	sub	sp, #8
 801601a:	af00      	add	r7, sp, #0
 801601c:	6078      	str	r0, [r7, #4]
 801601e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	3350      	adds	r3, #80	; 0x50
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	6878      	ldr	r0, [r7, #4]
 801602a:	4798      	blx	r3
 801602c:	4603      	mov	r3, r0
 801602e:	f083 0301 	eor.w	r3, r3, #1
 8016032:	b2db      	uxtb	r3, r3
 8016034:	2b00      	cmp	r3, #0
 8016036:	d001      	beq.n	801603c <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 8016038:	683b      	ldr	r3, [r7, #0]
 801603a:	e007      	b.n	801604c <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	33b0      	adds	r3, #176	; 0xb0
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	6878      	ldr	r0, [r7, #4]
 8016046:	4798      	blx	r3
 8016048:	4603      	mov	r3, r0
 801604a:	bf00      	nop
}
 801604c:	4618      	mov	r0, r3
 801604e:	3708      	adds	r7, #8
 8016050:	46bd      	mov	sp, r7
 8016052:	bd80      	pop	{r7, pc}

08016054 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b082      	sub	sp, #8
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
 801605c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	3350      	adds	r3, #80	; 0x50
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	6878      	ldr	r0, [r7, #4]
 8016068:	4798      	blx	r3
 801606a:	4603      	mov	r3, r0
 801606c:	f083 0301 	eor.w	r3, r3, #1
 8016070:	b2db      	uxtb	r3, r3
 8016072:	2b00      	cmp	r3, #0
 8016074:	d001      	beq.n	801607a <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 8016076:	683b      	ldr	r3, [r7, #0]
 8016078:	e007      	b.n	801608a <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	3394      	adds	r3, #148	; 0x94
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	6878      	ldr	r0, [r7, #4]
 8016084:	4798      	blx	r3
 8016086:	4603      	mov	r3, r0
 8016088:	bf00      	nop
}
 801608a:	4618      	mov	r0, r3
 801608c:	3708      	adds	r7, #8
 801608e:	46bd      	mov	sp, r7
 8016090:	bd80      	pop	{r7, pc}

08016092 <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 8016092:	b590      	push	{r4, r7, lr}
 8016094:	b091      	sub	sp, #68	; 0x44
 8016096:	af00      	add	r7, sp, #0
 8016098:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	3354      	adds	r3, #84	; 0x54
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	f107 0208 	add.w	r2, r7, #8
 80160a6:	6879      	ldr	r1, [r7, #4]
 80160a8:	4610      	mov	r0, r2
 80160aa:	4798      	blx	r3
 80160ac:	f107 0308 	add.w	r3, r7, #8
 80160b0:	4618      	mov	r0, r3
 80160b2:	f005 f801 	bl	801b0b8 <_ZNK14MockNamedValue14getStringValueEv>
 80160b6:	4604      	mov	r4, r0
 80160b8:	bf00      	nop
 80160ba:	f107 0308 	add.w	r3, r7, #8
 80160be:	4618      	mov	r0, r3
 80160c0:	f004 fb12 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 80160c4:	4623      	mov	r3, r4
}
 80160c6:	4618      	mov	r0, r3
 80160c8:	3744      	adds	r7, #68	; 0x44
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd90      	pop	{r4, r7, pc}

080160ce <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 80160ce:	b590      	push	{r4, r7, lr}
 80160d0:	b093      	sub	sp, #76	; 0x4c
 80160d2:	af00      	add	r7, sp, #0
 80160d4:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	3354      	adds	r3, #84	; 0x54
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	f107 0210 	add.w	r2, r7, #16
 80160e2:	6879      	ldr	r1, [r7, #4]
 80160e4:	4610      	mov	r0, r2
 80160e6:	4798      	blx	r3
 80160e8:	f107 0308 	add.w	r3, r7, #8
 80160ec:	f107 0210 	add.w	r2, r7, #16
 80160f0:	4611      	mov	r1, r2
 80160f2:	4618      	mov	r0, r3
 80160f4:	f004 fd8c 	bl	801ac10 <_ZNK14MockNamedValue7getNameEv>
 80160f8:	f107 0308 	add.w	r3, r7, #8
 80160fc:	4618      	mov	r0, r3
 80160fe:	f7f4 f94b 	bl	800a398 <_ZNK12SimpleString7isEmptyEv>
 8016102:	4603      	mov	r3, r0
 8016104:	f083 0301 	eor.w	r3, r3, #1
 8016108:	b2dc      	uxtb	r4, r3
 801610a:	f107 0308 	add.w	r3, r7, #8
 801610e:	4618      	mov	r0, r3
 8016110:	f7f4 f953 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8016114:	f107 0310 	add.w	r3, r7, #16
 8016118:	4618      	mov	r0, r3
 801611a:	f004 fae5 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 801611e:	4623      	mov	r3, r4
}
 8016120:	4618      	mov	r0, r3
 8016122:	374c      	adds	r7, #76	; 0x4c
 8016124:	46bd      	mov	sp, r7
 8016126:	bd90      	pop	{r4, r7, pc}

08016128 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 8016128:	b590      	push	{r4, r7, lr}
 801612a:	b095      	sub	sp, #84	; 0x54
 801612c:	af02      	add	r7, sp, #8
 801612e:	6078      	str	r0, [r7, #4]
 8016130:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	33c0      	adds	r3, #192	; 0xc0
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	6878      	ldr	r0, [r7, #4]
 801613c:	4798      	blx	r3
 801613e:	4603      	mov	r3, r0
 8016140:	2b00      	cmp	r3, #0
 8016142:	d001      	beq.n	8016148 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 8016144:	687c      	ldr	r4, [r7, #4]
 8016146:	e053      	b.n	80161f0 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	331c      	adds	r3, #28
 801614c:	6839      	ldr	r1, [r7, #0]
 801614e:	4618      	mov	r0, r3
 8016150:	f003 f8ca 	bl	80192e8 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	699b      	ldr	r3, [r3, #24]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d109      	bne.n	8016170 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	331c      	adds	r3, #28
 8016160:	4618      	mov	r0, r3
 8016162:	f002 fe20 	bl	8018da6 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8016166:	4603      	mov	r3, r0
 8016168:	2b00      	cmp	r3, #0
 801616a:	d001      	beq.n	8016170 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801616c:	2301      	movs	r3, #1
 801616e:	e000      	b.n	8016172 <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 8016170:	2300      	movs	r3, #0
 8016172:	2b00      	cmp	r3, #0
 8016174:	d02c      	beq.n	80161d0 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	33cc      	adds	r3, #204	; 0xcc
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	4798      	blx	r3
 8016182:	4604      	mov	r4, r0
 8016184:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016188:	6879      	ldr	r1, [r7, #4]
 801618a:	4618      	mov	r0, r3
 801618c:	f7fe fd3f 	bl	8014c0e <_ZNK21MockCheckedActualCall7getNameEv>
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016194:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016198:	f107 000c 	add.w	r0, r7, #12
 801619c:	9300      	str	r3, [sp, #0]
 801619e:	683b      	ldr	r3, [r7, #0]
 80161a0:	4621      	mov	r1, r4
 80161a2:	f004 f9fb 	bl	801a59c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 80161a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80161aa:	4618      	mov	r0, r3
 80161ac:	f7f4 f905 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	33dc      	adds	r3, #220	; 0xdc
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	f107 020c 	add.w	r2, r7, #12
 80161bc:	4611      	mov	r1, r2
 80161be:	6878      	ldr	r0, [r7, #4]
 80161c0:	4798      	blx	r3
        return *this;
 80161c2:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 80161c4:	f107 030c 	add.w	r3, r7, #12
 80161c8:	4618      	mov	r0, r3
 80161ca:	f000 ffa7 	bl	801711c <_ZN27MockUnexpectedObjectFailureD1Ev>
 80161ce:	e00f      	b.n	80161f0 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	331c      	adds	r3, #28
 80161d4:	4618      	mov	r0, r3
 80161d6:	f003 f9a7 	bl	8019528 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	699b      	ldr	r3, [r3, #24]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d105      	bne.n	80161ee <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	33d8      	adds	r3, #216	; 0xd8
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	4798      	blx	r3
    }

    return *this;
 80161ee:	687c      	ldr	r4, [r7, #4]
 80161f0:	4623      	mov	r3, r4
}
 80161f2:	4618      	mov	r0, r3
 80161f4:	374c      	adds	r7, #76	; 0x4c
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd90      	pop	{r4, r7, pc}
	...

080161fc <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 80161fc:	b590      	push	{r4, r7, lr}
 80161fe:	b087      	sub	sp, #28
 8016200:	af00      	add	r7, sp, #0
 8016202:	60f8      	str	r0, [r7, #12]
 8016204:	60b9      	str	r1, [r7, #8]
 8016206:	607a      	str	r2, [r7, #4]
 8016208:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 801620a:	f240 2282 	movw	r2, #642	; 0x282
 801620e:	4913      	ldr	r1, [pc, #76]	; (801625c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8016210:	2018      	movs	r0, #24
 8016212:	f7f1 f957 	bl	80074c4 <_ZnwjPKci>
 8016216:	4604      	mov	r4, r0
 8016218:	683b      	ldr	r3, [r7, #0]
 801621a:	687a      	ldr	r2, [r7, #4]
 801621c:	68b9      	ldr	r1, [r7, #8]
 801621e:	4620      	mov	r0, r4
 8016220:	f7fe fa48 	bl	80146b4 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8016224:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801622a:	2b00      	cmp	r3, #0
 801622c:	d103      	bne.n	8016236 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	693a      	ldr	r2, [r7, #16]
 8016232:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 8016234:	e00d      	b.n	8016252 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801623a:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 801623c:	697b      	ldr	r3, [r7, #20]
 801623e:	695b      	ldr	r3, [r3, #20]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d003      	beq.n	801624c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8016244:	697b      	ldr	r3, [r7, #20]
 8016246:	695b      	ldr	r3, [r3, #20]
 8016248:	617b      	str	r3, [r7, #20]
 801624a:	e7f7      	b.n	801623c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 801624c:	697b      	ldr	r3, [r7, #20]
 801624e:	693a      	ldr	r2, [r7, #16]
 8016250:	615a      	str	r2, [r3, #20]
}
 8016252:	bf00      	nop
 8016254:	371c      	adds	r7, #28
 8016256:	46bd      	mov	sp, r7
 8016258:	bd90      	pop	{r4, r7, pc}
 801625a:	bf00      	nop
 801625c:	08022814 	.word	0x08022814

08016260 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8016260:	b580      	push	{r7, lr}
 8016262:	b082      	sub	sp, #8
 8016264:	af00      	add	r7, sp, #0
 8016266:	6078      	str	r0, [r7, #4]
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	3308      	adds	r3, #8
 801626c:	4618      	mov	r0, r3
 801626e:	f7f4 f8a4 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	4618      	mov	r0, r3
 8016276:	f7f4 f8a0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	4618      	mov	r0, r3
 801627e:	3708      	adds	r7, #8
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}

08016284 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 8016284:	b590      	push	{r4, r7, lr}
 8016286:	b085      	sub	sp, #20
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016290:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 8016292:	2300      	movs	r3, #0
 8016294:	60bb      	str	r3, [r7, #8]

    while (current) {
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d012      	beq.n	80162c2 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	695b      	ldr	r3, [r3, #20]
 80162a4:	60fb      	str	r3, [r7, #12]
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	68fa      	ldr	r2, [r7, #12]
 80162aa:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 80162ac:	68bc      	ldr	r4, [r7, #8]
 80162ae:	2c00      	cmp	r4, #0
 80162b0:	d0f1      	beq.n	8016296 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 80162b2:	4620      	mov	r0, r4
 80162b4:	f7ff ffd4 	bl	8016260 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 80162b8:	2118      	movs	r1, #24
 80162ba:	4620      	mov	r0, r4
 80162bc:	f7f1 f916 	bl	80074ec <_ZdlPvj>
    while (current) {
 80162c0:	e7e9      	b.n	8016296 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 80162c2:	bf00      	nop
 80162c4:	3714      	adds	r7, #20
 80162c6:	46bd      	mov	sp, r7
 80162c8:	bd90      	pop	{r4, r7, pc}
	...

080162cc <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b082      	sub	sp, #8
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	4618      	mov	r0, r3
 80162d8:	f7fe fc6a 	bl	8014bb0 <_ZN14MockActualCallC1Ev>
 80162dc:	4a06      	ldr	r2, [pc, #24]	; (80162f8 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	601a      	str	r2, [r3, #0]
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	3304      	adds	r3, #4
 80162e6:	4905      	ldr	r1, [pc, #20]	; (80162fc <_ZN19MockActualCallTraceC1Ev+0x30>)
 80162e8:	4618      	mov	r0, r3
 80162ea:	f7f3 fcae 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
{
}
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	4618      	mov	r0, r3
 80162f2:	3708      	adds	r7, #8
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}
 80162f8:	080248b4 	.word	0x080248b4
 80162fc:	080227fc 	.word	0x080227fc

08016300 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8016300:	b580      	push	{r7, lr}
 8016302:	b082      	sub	sp, #8
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
 8016308:	4a08      	ldr	r2, [pc, #32]	; (801632c <_ZN19MockActualCallTraceD1Ev+0x2c>)
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	601a      	str	r2, [r3, #0]
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	3304      	adds	r3, #4
 8016312:	4618      	mov	r0, r3
 8016314:	f7f4 f851 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	4618      	mov	r0, r3
 801631c:	f7fe fc58 	bl	8014bd0 <_ZN14MockActualCallD1Ev>
{
}
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	4618      	mov	r0, r3
 8016324:	3708      	adds	r7, #8
 8016326:	46bd      	mov	sp, r7
 8016328:	bd80      	pop	{r7, pc}
 801632a:	bf00      	nop
 801632c:	080248b4 	.word	0x080248b4

08016330 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 8016330:	b580      	push	{r7, lr}
 8016332:	b082      	sub	sp, #8
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
}
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f7ff ffe1 	bl	8016300 <_ZN19MockActualCallTraceD1Ev>
 801633e:	210c      	movs	r1, #12
 8016340:	6878      	ldr	r0, [r7, #4]
 8016342:	f7f1 f8d3 	bl	80074ec <_ZdlPvj>
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	4618      	mov	r0, r3
 801634a:	3708      	adds	r7, #8
 801634c:	46bd      	mov	sp, r7
 801634e:	bd80      	pop	{r7, pc}

08016350 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8016350:	b580      	push	{r7, lr}
 8016352:	b082      	sub	sp, #8
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
 8016358:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	3304      	adds	r3, #4
 801635e:	4907      	ldr	r1, [pc, #28]	; (801637c <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8016360:	4618      	mov	r0, r3
 8016362:	f7f4 f8b9 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	3304      	adds	r3, #4
 801636a:	6839      	ldr	r1, [r7, #0]
 801636c:	4618      	mov	r0, r3
 801636e:	f7f4 f8a1 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    return *this;
 8016372:	687b      	ldr	r3, [r7, #4]
}
 8016374:	4618      	mov	r0, r3
 8016376:	3708      	adds	r7, #8
 8016378:	46bd      	mov	sp, r7
 801637a:	bd80      	pop	{r7, pc}
 801637c:	08022908 	.word	0x08022908

08016380 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 8016380:	b590      	push	{r4, r7, lr}
 8016382:	b085      	sub	sp, #20
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
 8016388:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	3304      	adds	r3, #4
 801638e:	490e      	ldr	r1, [pc, #56]	; (80163c8 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8016390:	4618      	mov	r0, r3
 8016392:	f7f4 f8a1 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	1d1c      	adds	r4, r3, #4
 801639a:	f107 0308 	add.w	r3, r7, #8
 801639e:	6839      	ldr	r1, [r7, #0]
 80163a0:	4618      	mov	r0, r3
 80163a2:	f7f4 fd39 	bl	800ae18 <_Z10StringFromj>
 80163a6:	f107 0308 	add.w	r3, r7, #8
 80163aa:	4619      	mov	r1, r3
 80163ac:	4620      	mov	r0, r4
 80163ae:	f7f4 f881 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 80163b2:	f107 0308 	add.w	r3, r7, #8
 80163b6:	4618      	mov	r0, r3
 80163b8:	f7f3 ffff 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 80163bc:	687b      	ldr	r3, [r7, #4]
}
 80163be:	4618      	mov	r0, r3
 80163c0:	3714      	adds	r7, #20
 80163c2:	46bd      	mov	sp, r7
 80163c4:	bd90      	pop	{r4, r7, pc}
 80163c6:	bf00      	nop
 80163c8:	08022918 	.word	0x08022918

080163cc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b082      	sub	sp, #8
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
 80163d4:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	3304      	adds	r3, #4
 80163da:	490a      	ldr	r1, [pc, #40]	; (8016404 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 80163dc:	4618      	mov	r0, r3
 80163de:	f7f4 f87b 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	3304      	adds	r3, #4
 80163e6:	6839      	ldr	r1, [r7, #0]
 80163e8:	4618      	mov	r0, r3
 80163ea:	f7f4 f863 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	3304      	adds	r3, #4
 80163f2:	4905      	ldr	r1, [pc, #20]	; (8016408 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 80163f4:	4618      	mov	r0, r3
 80163f6:	f7f4 f86f 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
}
 80163fa:	bf00      	nop
 80163fc:	3708      	adds	r7, #8
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}
 8016402:	bf00      	nop
 8016404:	08022928 	.word	0x08022928
 8016408:	0802292c 	.word	0x0802292c

0801640c <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 801640c:	b590      	push	{r4, r7, lr}
 801640e:	b087      	sub	sp, #28
 8016410:	af00      	add	r7, sp, #0
 8016412:	60f8      	str	r0, [r7, #12]
 8016414:	60b9      	str	r1, [r7, #8]
 8016416:	4613      	mov	r3, r2
 8016418:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 801641a:	68b9      	ldr	r1, [r7, #8]
 801641c:	68f8      	ldr	r0, [r7, #12]
 801641e:	f7ff ffd5 	bl	80163cc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	1d1c      	adds	r4, r3, #4
 8016426:	f107 0310 	add.w	r3, r7, #16
 801642a:	79fa      	ldrb	r2, [r7, #7]
 801642c:	4611      	mov	r1, r2
 801642e:	4618      	mov	r0, r3
 8016430:	f7f4 fa34 	bl	800a89c <_Z10StringFromb>
 8016434:	f107 0310 	add.w	r3, r7, #16
 8016438:	4619      	mov	r1, r3
 801643a:	4620      	mov	r0, r4
 801643c:	f7f4 f83a 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 8016440:	f107 0310 	add.w	r3, r7, #16
 8016444:	4618      	mov	r0, r3
 8016446:	f7f3 ffb8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 801644a:	68fb      	ldr	r3, [r7, #12]
}
 801644c:	4618      	mov	r0, r3
 801644e:	371c      	adds	r7, #28
 8016450:	46bd      	mov	sp, r7
 8016452:	bd90      	pop	{r4, r7, pc}

08016454 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8016454:	b590      	push	{r4, r7, lr}
 8016456:	b08f      	sub	sp, #60	; 0x3c
 8016458:	af00      	add	r7, sp, #0
 801645a:	60f8      	str	r0, [r7, #12]
 801645c:	60b9      	str	r1, [r7, #8]
 801645e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016460:	68b9      	ldr	r1, [r7, #8]
 8016462:	68f8      	ldr	r0, [r7, #12]
 8016464:	f7ff ffb2 	bl	80163cc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	1d1c      	adds	r4, r3, #4
 801646c:	f107 0320 	add.w	r3, r7, #32
 8016470:	6879      	ldr	r1, [r7, #4]
 8016472:	4618      	mov	r0, r3
 8016474:	f7f4 fcd0 	bl	800ae18 <_Z10StringFromj>
 8016478:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801647c:	491f      	ldr	r1, [pc, #124]	; (80164fc <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 801647e:	4618      	mov	r0, r3
 8016480:	f7f3 fbe3 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8016484:	f107 0318 	add.w	r3, r7, #24
 8016488:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801648c:	f107 0120 	add.w	r1, r7, #32
 8016490:	4618      	mov	r0, r3
 8016492:	f7f3 fff4 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 8016496:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801649a:	6879      	ldr	r1, [r7, #4]
 801649c:	4618      	mov	r0, r3
 801649e:	f7f4 fb5f 	bl	800ab60 <_Z30BracketsFormattedHexStringFromj>
 80164a2:	f107 0310 	add.w	r3, r7, #16
 80164a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80164aa:	f107 0118 	add.w	r1, r7, #24
 80164ae:	4618      	mov	r0, r3
 80164b0:	f7f3 ffe5 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 80164b4:	f107 0310 	add.w	r3, r7, #16
 80164b8:	4619      	mov	r1, r3
 80164ba:	4620      	mov	r0, r4
 80164bc:	f7f3 fffa 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 80164c0:	f107 0310 	add.w	r3, r7, #16
 80164c4:	4618      	mov	r0, r3
 80164c6:	f7f3 ff78 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80164ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7f3 ff73 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80164d4:	f107 0318 	add.w	r3, r7, #24
 80164d8:	4618      	mov	r0, r3
 80164da:	f7f3 ff6e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80164de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80164e2:	4618      	mov	r0, r3
 80164e4:	f7f3 ff69 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80164e8:	f107 0320 	add.w	r3, r7, #32
 80164ec:	4618      	mov	r0, r3
 80164ee:	f7f3 ff64 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 80164f2:	68fb      	ldr	r3, [r7, #12]
}
 80164f4:	4618      	mov	r0, r3
 80164f6:	373c      	adds	r7, #60	; 0x3c
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd90      	pop	{r4, r7, pc}
 80164fc:	08022928 	.word	0x08022928

08016500 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8016500:	b590      	push	{r4, r7, lr}
 8016502:	b08f      	sub	sp, #60	; 0x3c
 8016504:	af00      	add	r7, sp, #0
 8016506:	60f8      	str	r0, [r7, #12]
 8016508:	60b9      	str	r1, [r7, #8]
 801650a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801650c:	68b9      	ldr	r1, [r7, #8]
 801650e:	68f8      	ldr	r0, [r7, #12]
 8016510:	f7ff ff5c 	bl	80163cc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	1d1c      	adds	r4, r3, #4
 8016518:	f107 0320 	add.w	r3, r7, #32
 801651c:	6879      	ldr	r1, [r7, #4]
 801651e:	4618      	mov	r0, r3
 8016520:	f7f4 fa12 	bl	800a948 <_Z10StringFromi>
 8016524:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016528:	491f      	ldr	r1, [pc, #124]	; (80165a8 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 801652a:	4618      	mov	r0, r3
 801652c:	f7f3 fb8d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8016530:	f107 0318 	add.w	r3, r7, #24
 8016534:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016538:	f107 0120 	add.w	r1, r7, #32
 801653c:	4618      	mov	r0, r3
 801653e:	f7f3 ff9e 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 8016542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016546:	6879      	ldr	r1, [r7, #4]
 8016548:	4618      	mov	r0, r3
 801654a:	f7f4 faed 	bl	800ab28 <_Z30BracketsFormattedHexStringFromi>
 801654e:	f107 0310 	add.w	r3, r7, #16
 8016552:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016556:	f107 0118 	add.w	r1, r7, #24
 801655a:	4618      	mov	r0, r3
 801655c:	f7f3 ff8f 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 8016560:	f107 0310 	add.w	r3, r7, #16
 8016564:	4619      	mov	r1, r3
 8016566:	4620      	mov	r0, r4
 8016568:	f7f3 ffa4 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801656c:	f107 0310 	add.w	r3, r7, #16
 8016570:	4618      	mov	r0, r3
 8016572:	f7f3 ff22 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8016576:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801657a:	4618      	mov	r0, r3
 801657c:	f7f3 ff1d 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8016580:	f107 0318 	add.w	r3, r7, #24
 8016584:	4618      	mov	r0, r3
 8016586:	f7f3 ff18 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801658a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801658e:	4618      	mov	r0, r3
 8016590:	f7f3 ff13 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8016594:	f107 0320 	add.w	r3, r7, #32
 8016598:	4618      	mov	r0, r3
 801659a:	f7f3 ff0e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 801659e:	68fb      	ldr	r3, [r7, #12]
}
 80165a0:	4618      	mov	r0, r3
 80165a2:	373c      	adds	r7, #60	; 0x3c
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bd90      	pop	{r4, r7, pc}
 80165a8:	08022928 	.word	0x08022928

080165ac <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 80165ac:	b590      	push	{r4, r7, lr}
 80165ae:	b08f      	sub	sp, #60	; 0x3c
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	60f8      	str	r0, [r7, #12]
 80165b4:	60b9      	str	r1, [r7, #8]
 80165b6:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80165b8:	68b9      	ldr	r1, [r7, #8]
 80165ba:	68f8      	ldr	r0, [r7, #12]
 80165bc:	f7ff ff06 	bl	80163cc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	1d1c      	adds	r4, r3, #4
 80165c4:	f107 0320 	add.w	r3, r7, #32
 80165c8:	6879      	ldr	r1, [r7, #4]
 80165ca:	4618      	mov	r0, r3
 80165cc:	f7f4 fc36 	bl	800ae3c <_Z10StringFromm>
 80165d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80165d4:	491f      	ldr	r1, [pc, #124]	; (8016654 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 80165d6:	4618      	mov	r0, r3
 80165d8:	f7f3 fb37 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80165dc:	f107 0318 	add.w	r3, r7, #24
 80165e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80165e4:	f107 0120 	add.w	r1, r7, #32
 80165e8:	4618      	mov	r0, r3
 80165ea:	f7f3 ff48 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 80165ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80165f2:	6879      	ldr	r1, [r7, #4]
 80165f4:	4618      	mov	r0, r3
 80165f6:	f7f4 faeb 	bl	800abd0 <_Z30BracketsFormattedHexStringFromm>
 80165fa:	f107 0310 	add.w	r3, r7, #16
 80165fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016602:	f107 0118 	add.w	r1, r7, #24
 8016606:	4618      	mov	r0, r3
 8016608:	f7f3 ff39 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 801660c:	f107 0310 	add.w	r3, r7, #16
 8016610:	4619      	mov	r1, r3
 8016612:	4620      	mov	r0, r4
 8016614:	f7f3 ff4e 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 8016618:	f107 0310 	add.w	r3, r7, #16
 801661c:	4618      	mov	r0, r3
 801661e:	f7f3 fecc 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8016622:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016626:	4618      	mov	r0, r3
 8016628:	f7f3 fec7 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801662c:	f107 0318 	add.w	r3, r7, #24
 8016630:	4618      	mov	r0, r3
 8016632:	f7f3 fec2 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8016636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801663a:	4618      	mov	r0, r3
 801663c:	f7f3 febd 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8016640:	f107 0320 	add.w	r3, r7, #32
 8016644:	4618      	mov	r0, r3
 8016646:	f7f3 feb8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 801664a:	68fb      	ldr	r3, [r7, #12]
}
 801664c:	4618      	mov	r0, r3
 801664e:	373c      	adds	r7, #60	; 0x3c
 8016650:	46bd      	mov	sp, r7
 8016652:	bd90      	pop	{r4, r7, pc}
 8016654:	08022928 	.word	0x08022928

08016658 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 8016658:	b590      	push	{r4, r7, lr}
 801665a:	b08f      	sub	sp, #60	; 0x3c
 801665c:	af00      	add	r7, sp, #0
 801665e:	60f8      	str	r0, [r7, #12]
 8016660:	60b9      	str	r1, [r7, #8]
 8016662:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016664:	68b9      	ldr	r1, [r7, #8]
 8016666:	68f8      	ldr	r0, [r7, #12]
 8016668:	f7ff feb0 	bl	80163cc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	1d1c      	adds	r4, r3, #4
 8016670:	f107 0320 	add.w	r3, r7, #32
 8016674:	6879      	ldr	r1, [r7, #4]
 8016676:	4618      	mov	r0, r3
 8016678:	f7f4 f978 	bl	800a96c <_Z10StringFroml>
 801667c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016680:	491f      	ldr	r1, [pc, #124]	; (8016700 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 8016682:	4618      	mov	r0, r3
 8016684:	f7f3 fae1 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8016688:	f107 0318 	add.w	r3, r7, #24
 801668c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016690:	f107 0120 	add.w	r1, r7, #32
 8016694:	4618      	mov	r0, r3
 8016696:	f7f3 fef2 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 801669a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801669e:	6879      	ldr	r1, [r7, #4]
 80166a0:	4618      	mov	r0, r3
 80166a2:	f7f4 fa79 	bl	800ab98 <_Z30BracketsFormattedHexStringFroml>
 80166a6:	f107 0310 	add.w	r3, r7, #16
 80166aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80166ae:	f107 0118 	add.w	r1, r7, #24
 80166b2:	4618      	mov	r0, r3
 80166b4:	f7f3 fee3 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 80166b8:	f107 0310 	add.w	r3, r7, #16
 80166bc:	4619      	mov	r1, r3
 80166be:	4620      	mov	r0, r4
 80166c0:	f7f3 fef8 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 80166c4:	f107 0310 	add.w	r3, r7, #16
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7f3 fe76 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80166ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80166d2:	4618      	mov	r0, r3
 80166d4:	f7f3 fe71 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80166d8:	f107 0318 	add.w	r3, r7, #24
 80166dc:	4618      	mov	r0, r3
 80166de:	f7f3 fe6c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80166e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80166e6:	4618      	mov	r0, r3
 80166e8:	f7f3 fe67 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80166ec:	f107 0320 	add.w	r3, r7, #32
 80166f0:	4618      	mov	r0, r3
 80166f2:	f7f3 fe62 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 80166f6:	68fb      	ldr	r3, [r7, #12]
}
 80166f8:	4618      	mov	r0, r3
 80166fa:	373c      	adds	r7, #60	; 0x3c
 80166fc:	46bd      	mov	sp, r7
 80166fe:	bd90      	pop	{r4, r7, pc}
 8016700:	08022928 	.word	0x08022928

08016704 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8016704:	b5b0      	push	{r4, r5, r7, lr}
 8016706:	b086      	sub	sp, #24
 8016708:	af02      	add	r7, sp, #8
 801670a:	60f8      	str	r0, [r7, #12]
 801670c:	60b9      	str	r1, [r7, #8]
 801670e:	4639      	mov	r1, r7
 8016710:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8016714:	f7fa fe7c 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8016718:	4604      	mov	r4, r0
 801671a:	6823      	ldr	r3, [r4, #0]
 801671c:	3368      	adds	r3, #104	; 0x68
 801671e:	681d      	ldr	r5, [r3, #0]
 8016720:	f7fa fe86 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016724:	4603      	mov	r3, r0
 8016726:	9300      	str	r3, [sp, #0]
 8016728:	f240 23ee 	movw	r3, #750	; 0x2ee
 801672c:	4a04      	ldr	r2, [pc, #16]	; (8016740 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801672e:	4905      	ldr	r1, [pc, #20]	; (8016744 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8016730:	4620      	mov	r0, r4
 8016732:	47a8      	blx	r5
    return *this;
 8016734:	68fb      	ldr	r3, [r7, #12]
}
 8016736:	4618      	mov	r0, r3
 8016738:	3710      	adds	r7, #16
 801673a:	46bd      	mov	sp, r7
 801673c:	bdb0      	pop	{r4, r5, r7, pc}
 801673e:	bf00      	nop
 8016740:	08022814 	.word	0x08022814
 8016744:	08022830 	.word	0x08022830

08016748 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8016748:	b5b0      	push	{r4, r5, r7, lr}
 801674a:	b086      	sub	sp, #24
 801674c:	af02      	add	r7, sp, #8
 801674e:	60f8      	str	r0, [r7, #12]
 8016750:	60b9      	str	r1, [r7, #8]
 8016752:	4639      	mov	r1, r7
 8016754:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8016758:	f7fa fe5a 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801675c:	4604      	mov	r4, r0
 801675e:	6823      	ldr	r3, [r4, #0]
 8016760:	3368      	adds	r3, #104	; 0x68
 8016762:	681d      	ldr	r5, [r3, #0]
 8016764:	f7fa fe64 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016768:	4603      	mov	r3, r0
 801676a:	9300      	str	r3, [sp, #0]
 801676c:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8016770:	4a04      	ldr	r2, [pc, #16]	; (8016784 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8016772:	4905      	ldr	r1, [pc, #20]	; (8016788 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8016774:	4620      	mov	r0, r4
 8016776:	47a8      	blx	r5
    return *this;
 8016778:	68fb      	ldr	r3, [r7, #12]
}
 801677a:	4618      	mov	r0, r3
 801677c:	3710      	adds	r7, #16
 801677e:	46bd      	mov	sp, r7
 8016780:	bdb0      	pop	{r4, r5, r7, pc}
 8016782:	bf00      	nop
 8016784:	08022814 	.word	0x08022814
 8016788:	0802285c 	.word	0x0802285c

0801678c <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 801678c:	b590      	push	{r4, r7, lr}
 801678e:	b087      	sub	sp, #28
 8016790:	af00      	add	r7, sp, #0
 8016792:	60f8      	str	r0, [r7, #12]
 8016794:	60b9      	str	r1, [r7, #8]
 8016796:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 801679a:	68b9      	ldr	r1, [r7, #8]
 801679c:	68f8      	ldr	r0, [r7, #12]
 801679e:	f7ff fe15 	bl	80163cc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	1d1c      	adds	r4, r3, #4
 80167a6:	f107 0310 	add.w	r3, r7, #16
 80167aa:	2106      	movs	r1, #6
 80167ac:	ed97 0b00 	vldr	d0, [r7]
 80167b0:	4618      	mov	r0, r3
 80167b2:	f7f4 fac7 	bl	800ad44 <_Z10StringFromdi>
 80167b6:	f107 0310 	add.w	r3, r7, #16
 80167ba:	4619      	mov	r1, r3
 80167bc:	4620      	mov	r0, r4
 80167be:	f7f3 fe79 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 80167c2:	f107 0310 	add.w	r3, r7, #16
 80167c6:	4618      	mov	r0, r3
 80167c8:	f7f3 fdf7 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 80167cc:	68fb      	ldr	r3, [r7, #12]
}
 80167ce:	4618      	mov	r0, r3
 80167d0:	371c      	adds	r7, #28
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd90      	pop	{r4, r7, pc}

080167d6 <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 80167d6:	b590      	push	{r4, r7, lr}
 80167d8:	b087      	sub	sp, #28
 80167da:	af00      	add	r7, sp, #0
 80167dc:	60f8      	str	r0, [r7, #12]
 80167de:	60b9      	str	r1, [r7, #8]
 80167e0:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80167e2:	68b9      	ldr	r1, [r7, #8]
 80167e4:	68f8      	ldr	r0, [r7, #12]
 80167e6:	f7ff fdf1 	bl	80163cc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	1d1c      	adds	r4, r3, #4
 80167ee:	f107 0310 	add.w	r3, r7, #16
 80167f2:	6879      	ldr	r1, [r7, #4]
 80167f4:	4618      	mov	r0, r3
 80167f6:	f7f4 f86d 	bl	800a8d4 <_Z10StringFromPKc>
 80167fa:	f107 0310 	add.w	r3, r7, #16
 80167fe:	4619      	mov	r1, r3
 8016800:	4620      	mov	r0, r4
 8016802:	f7f3 fe57 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 8016806:	f107 0310 	add.w	r3, r7, #16
 801680a:	4618      	mov	r0, r3
 801680c:	f7f3 fdd5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 8016810:	68fb      	ldr	r3, [r7, #12]
}
 8016812:	4618      	mov	r0, r3
 8016814:	371c      	adds	r7, #28
 8016816:	46bd      	mov	sp, r7
 8016818:	bd90      	pop	{r4, r7, pc}

0801681a <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 801681a:	b590      	push	{r4, r7, lr}
 801681c:	b087      	sub	sp, #28
 801681e:	af00      	add	r7, sp, #0
 8016820:	60f8      	str	r0, [r7, #12]
 8016822:	60b9      	str	r1, [r7, #8]
 8016824:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016826:	68b9      	ldr	r1, [r7, #8]
 8016828:	68f8      	ldr	r0, [r7, #12]
 801682a:	f7ff fdcf 	bl	80163cc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	1d1c      	adds	r4, r3, #4
 8016832:	f107 0310 	add.w	r3, r7, #16
 8016836:	6879      	ldr	r1, [r7, #4]
 8016838:	4618      	mov	r0, r3
 801683a:	f7f4 f8a9 	bl	800a990 <_Z10StringFromPKv>
 801683e:	f107 0310 	add.w	r3, r7, #16
 8016842:	4619      	mov	r1, r3
 8016844:	4620      	mov	r0, r4
 8016846:	f7f3 fe35 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801684a:	f107 0310 	add.w	r3, r7, #16
 801684e:	4618      	mov	r0, r3
 8016850:	f7f3 fdb3 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 8016854:	68fb      	ldr	r3, [r7, #12]
}
 8016856:	4618      	mov	r0, r3
 8016858:	371c      	adds	r7, #28
 801685a:	46bd      	mov	sp, r7
 801685c:	bd90      	pop	{r4, r7, pc}

0801685e <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801685e:	b590      	push	{r4, r7, lr}
 8016860:	b087      	sub	sp, #28
 8016862:	af00      	add	r7, sp, #0
 8016864:	60f8      	str	r0, [r7, #12]
 8016866:	60b9      	str	r1, [r7, #8]
 8016868:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801686a:	68b9      	ldr	r1, [r7, #8]
 801686c:	68f8      	ldr	r0, [r7, #12]
 801686e:	f7ff fdad 	bl	80163cc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	1d1c      	adds	r4, r3, #4
 8016876:	f107 0310 	add.w	r3, r7, #16
 801687a:	6879      	ldr	r1, [r7, #4]
 801687c:	4618      	mov	r0, r3
 801687e:	f7f4 f887 	bl	800a990 <_Z10StringFromPKv>
 8016882:	f107 0310 	add.w	r3, r7, #16
 8016886:	4619      	mov	r1, r3
 8016888:	4620      	mov	r0, r4
 801688a:	f7f3 fe13 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801688e:	f107 0310 	add.w	r3, r7, #16
 8016892:	4618      	mov	r0, r3
 8016894:	f7f3 fd91 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 8016898:	68fb      	ldr	r3, [r7, #12]
}
 801689a:	4618      	mov	r0, r3
 801689c:	371c      	adds	r7, #28
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd90      	pop	{r4, r7, pc}

080168a2 <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 80168a2:	b590      	push	{r4, r7, lr}
 80168a4:	b087      	sub	sp, #28
 80168a6:	af00      	add	r7, sp, #0
 80168a8:	60f8      	str	r0, [r7, #12]
 80168aa:	60b9      	str	r1, [r7, #8]
 80168ac:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80168ae:	68b9      	ldr	r1, [r7, #8]
 80168b0:	68f8      	ldr	r0, [r7, #12]
 80168b2:	f7ff fd8b 	bl	80163cc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	1d1c      	adds	r4, r3, #4
 80168ba:	f107 0310 	add.w	r3, r7, #16
 80168be:	6879      	ldr	r1, [r7, #4]
 80168c0:	4618      	mov	r0, r3
 80168c2:	f7f4 f88f 	bl	800a9e4 <_Z10StringFromPFvvE>
 80168c6:	f107 0310 	add.w	r3, r7, #16
 80168ca:	4619      	mov	r1, r3
 80168cc:	4620      	mov	r0, r4
 80168ce:	f7f3 fdf1 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 80168d2:	f107 0310 	add.w	r3, r7, #16
 80168d6:	4618      	mov	r0, r3
 80168d8:	f7f3 fd6f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 80168dc:	68fb      	ldr	r3, [r7, #12]
}
 80168de:	4618      	mov	r0, r3
 80168e0:	371c      	adds	r7, #28
 80168e2:	46bd      	mov	sp, r7
 80168e4:	bd90      	pop	{r4, r7, pc}

080168e6 <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 80168e6:	b590      	push	{r4, r7, lr}
 80168e8:	b087      	sub	sp, #28
 80168ea:	af00      	add	r7, sp, #0
 80168ec:	60f8      	str	r0, [r7, #12]
 80168ee:	60b9      	str	r1, [r7, #8]
 80168f0:	607a      	str	r2, [r7, #4]
 80168f2:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 80168f4:	68b9      	ldr	r1, [r7, #8]
 80168f6:	68f8      	ldr	r0, [r7, #12]
 80168f8:	f7ff fd68 	bl	80163cc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	1d1c      	adds	r4, r3, #4
 8016900:	f107 0310 	add.w	r3, r7, #16
 8016904:	683a      	ldr	r2, [r7, #0]
 8016906:	6879      	ldr	r1, [r7, #4]
 8016908:	4618      	mov	r0, r3
 801690a:	f7f4 fbaf 	bl	800b06c <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801690e:	f107 0310 	add.w	r3, r7, #16
 8016912:	4619      	mov	r1, r3
 8016914:	4620      	mov	r0, r4
 8016916:	f7f3 fdcd 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801691a:	f107 0310 	add.w	r3, r7, #16
 801691e:	4618      	mov	r0, r3
 8016920:	f7f3 fd4b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 8016924:	68fb      	ldr	r3, [r7, #12]
}
 8016926:	4618      	mov	r0, r3
 8016928:	371c      	adds	r7, #28
 801692a:	46bd      	mov	sp, r7
 801692c:	bd90      	pop	{r4, r7, pc}
	...

08016930 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 8016930:	b590      	push	{r4, r7, lr}
 8016932:	b087      	sub	sp, #28
 8016934:	af00      	add	r7, sp, #0
 8016936:	60f8      	str	r0, [r7, #12]
 8016938:	60b9      	str	r1, [r7, #8]
 801693a:	607a      	str	r2, [r7, #4]
 801693c:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	3304      	adds	r3, #4
 8016942:	4913      	ldr	r1, [pc, #76]	; (8016990 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 8016944:	4618      	mov	r0, r3
 8016946:	f7f3 fdc7 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	3304      	adds	r3, #4
 801694e:	68b9      	ldr	r1, [r7, #8]
 8016950:	4618      	mov	r0, r3
 8016952:	f7f3 fdaf 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8016956:	6879      	ldr	r1, [r7, #4]
 8016958:	68f8      	ldr	r0, [r7, #12]
 801695a:	f7ff fd37 	bl	80163cc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	1d1c      	adds	r4, r3, #4
 8016962:	f107 0310 	add.w	r3, r7, #16
 8016966:	6839      	ldr	r1, [r7, #0]
 8016968:	4618      	mov	r0, r3
 801696a:	f7f4 f811 	bl	800a990 <_Z10StringFromPKv>
 801696e:	f107 0310 	add.w	r3, r7, #16
 8016972:	4619      	mov	r1, r3
 8016974:	4620      	mov	r0, r4
 8016976:	f7f3 fd9d 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801697a:	f107 0310 	add.w	r3, r7, #16
 801697e:	4618      	mov	r0, r3
 8016980:	f7f3 fd1b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 8016984:	68fb      	ldr	r3, [r7, #12]
}
 8016986:	4618      	mov	r0, r3
 8016988:	371c      	adds	r7, #28
 801698a:	46bd      	mov	sp, r7
 801698c:	bd90      	pop	{r4, r7, pc}
 801698e:	bf00      	nop
 8016990:	08022928 	.word	0x08022928

08016994 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 8016994:	b590      	push	{r4, r7, lr}
 8016996:	b087      	sub	sp, #28
 8016998:	af00      	add	r7, sp, #0
 801699a:	60f8      	str	r0, [r7, #12]
 801699c:	60b9      	str	r1, [r7, #8]
 801699e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80169a0:	68b9      	ldr	r1, [r7, #8]
 80169a2:	68f8      	ldr	r0, [r7, #12]
 80169a4:	f7ff fd12 	bl	80163cc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	1d1c      	adds	r4, r3, #4
 80169ac:	f107 0310 	add.w	r3, r7, #16
 80169b0:	6879      	ldr	r1, [r7, #4]
 80169b2:	4618      	mov	r0, r3
 80169b4:	f7f3 ffec 	bl	800a990 <_Z10StringFromPKv>
 80169b8:	f107 0310 	add.w	r3, r7, #16
 80169bc:	4619      	mov	r1, r3
 80169be:	4620      	mov	r0, r4
 80169c0:	f7f3 fd78 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 80169c4:	f107 0310 	add.w	r3, r7, #16
 80169c8:	4618      	mov	r0, r3
 80169ca:	f7f3 fcf6 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 80169ce:	68fb      	ldr	r3, [r7, #12]
}
 80169d0:	4618      	mov	r0, r3
 80169d2:	371c      	adds	r7, #28
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bd90      	pop	{r4, r7, pc}

080169d8 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 80169d8:	b590      	push	{r4, r7, lr}
 80169da:	b087      	sub	sp, #28
 80169dc:	af00      	add	r7, sp, #0
 80169de:	60f8      	str	r0, [r7, #12]
 80169e0:	60b9      	str	r1, [r7, #8]
 80169e2:	607a      	str	r2, [r7, #4]
 80169e4:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	3304      	adds	r3, #4
 80169ea:	4913      	ldr	r1, [pc, #76]	; (8016a38 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 80169ec:	4618      	mov	r0, r3
 80169ee:	f7f3 fd73 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	3304      	adds	r3, #4
 80169f6:	68b9      	ldr	r1, [r7, #8]
 80169f8:	4618      	mov	r0, r3
 80169fa:	f7f3 fd5b 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 80169fe:	6879      	ldr	r1, [r7, #4]
 8016a00:	68f8      	ldr	r0, [r7, #12]
 8016a02:	f7ff fce3 	bl	80163cc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	1d1c      	adds	r4, r3, #4
 8016a0a:	f107 0310 	add.w	r3, r7, #16
 8016a0e:	6839      	ldr	r1, [r7, #0]
 8016a10:	4618      	mov	r0, r3
 8016a12:	f7f3 ffbd 	bl	800a990 <_Z10StringFromPKv>
 8016a16:	f107 0310 	add.w	r3, r7, #16
 8016a1a:	4619      	mov	r1, r3
 8016a1c:	4620      	mov	r0, r4
 8016a1e:	f7f3 fd49 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 8016a22:	f107 0310 	add.w	r3, r7, #16
 8016a26:	4618      	mov	r0, r3
 8016a28:	f7f3 fcc7 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 8016a2c:	68fb      	ldr	r3, [r7, #12]
}
 8016a2e:	4618      	mov	r0, r3
 8016a30:	371c      	adds	r7, #28
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd90      	pop	{r4, r7, pc}
 8016a36:	bf00      	nop
 8016a38:	08022928 	.word	0x08022928

08016a3c <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 8016a3c:	b480      	push	{r7}
 8016a3e:	b083      	sub	sp, #12
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	6078      	str	r0, [r7, #4]
    return false;
 8016a44:	2300      	movs	r3, #0
}
 8016a46:	4618      	mov	r0, r3
 8016a48:	370c      	adds	r7, #12
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a50:	4770      	bx	lr
	...

08016a54 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b084      	sub	sp, #16
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	6078      	str	r0, [r7, #4]
 8016a5c:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 8016a5e:	f107 0308 	add.w	r3, r7, #8
 8016a62:	4909      	ldr	r1, [pc, #36]	; (8016a88 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 8016a64:	4618      	mov	r0, r3
 8016a66:	f7f3 f8f0 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8016a6a:	f107 0308 	add.w	r3, r7, #8
 8016a6e:	4619      	mov	r1, r3
 8016a70:	6878      	ldr	r0, [r7, #4]
 8016a72:	f003 fe0f 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
 8016a76:	f107 0308 	add.w	r3, r7, #8
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f7f3 fc9d 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8016a80:	6878      	ldr	r0, [r7, #4]
 8016a82:	3710      	adds	r7, #16
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bd80      	pop	{r7, pc}
 8016a88:	080227fc 	.word	0x080227fc

08016a8c <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 8016a8c:	b480      	push	{r7}
 8016a8e:	b083      	sub	sp, #12
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
    return 0;
 8016a94:	2300      	movs	r3, #0
}
 8016a96:	4618      	mov	r0, r3
 8016a98:	370c      	adds	r7, #12
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa0:	4770      	bx	lr

08016aa2 <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 8016aa2:	b480      	push	{r7}
 8016aa4:	b083      	sub	sp, #12
 8016aa6:	af00      	add	r7, sp, #0
 8016aa8:	6078      	str	r0, [r7, #4]
    return 0;
 8016aaa:	2300      	movs	r3, #0
}
 8016aac:	4618      	mov	r0, r3
 8016aae:	370c      	adds	r7, #12
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab6:	4770      	bx	lr

08016ab8 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 8016ab8:	b480      	push	{r7}
 8016aba:	b083      	sub	sp, #12
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
 8016ac0:	6039      	str	r1, [r7, #0]
    return 0;
 8016ac2:	2300      	movs	r3, #0
}
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	370c      	adds	r7, #12
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ace:	4770      	bx	lr

08016ad0 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 8016ad0:	b480      	push	{r7}
 8016ad2:	b083      	sub	sp, #12
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]
 8016ad8:	6039      	str	r1, [r7, #0]
    return 0;
 8016ada:	2300      	movs	r3, #0
}
 8016adc:	4618      	mov	r0, r3
 8016ade:	370c      	adds	r7, #12
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae6:	4770      	bx	lr

08016ae8 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 8016ae8:	b5b0      	push	{r4, r5, r7, lr}
 8016aea:	b084      	sub	sp, #16
 8016aec:	af02      	add	r7, sp, #8
 8016aee:	6078      	str	r0, [r7, #4]
 8016af0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8016af2:	f7fa fc8d 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8016af6:	4604      	mov	r4, r0
 8016af8:	6823      	ldr	r3, [r4, #0]
 8016afa:	3368      	adds	r3, #104	; 0x68
 8016afc:	681d      	ldr	r5, [r3, #0]
 8016afe:	f7fa fc97 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016b02:	4603      	mov	r3, r0
 8016b04:	9300      	str	r3, [sp, #0]
 8016b06:	f240 3375 	movw	r3, #885	; 0x375
 8016b0a:	4a06      	ldr	r2, [pc, #24]	; (8016b24 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 8016b0c:	4906      	ldr	r1, [pc, #24]	; (8016b28 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 8016b0e:	4620      	mov	r0, r4
 8016b10:	47a8      	blx	r5
    return cpputest_longlong(0);
 8016b12:	2100      	movs	r1, #0
 8016b14:	6878      	ldr	r0, [r7, #4]
 8016b16:	f7f1 f8cf 	bl	8007cb8 <_ZN17cpputest_longlongC1Ei>
}
 8016b1a:	6878      	ldr	r0, [r7, #4]
 8016b1c:	3708      	adds	r7, #8
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	bdb0      	pop	{r4, r5, r7, pc}
 8016b22:	bf00      	nop
 8016b24:	08022814 	.word	0x08022814
 8016b28:	0802285c 	.word	0x0802285c

08016b2c <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 8016b2c:	b5b0      	push	{r4, r5, r7, lr}
 8016b2e:	b084      	sub	sp, #16
 8016b30:	af02      	add	r7, sp, #8
 8016b32:	6078      	str	r0, [r7, #4]
 8016b34:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8016b36:	f7fa fc6b 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8016b3a:	4604      	mov	r4, r0
 8016b3c:	6823      	ldr	r3, [r4, #0]
 8016b3e:	3368      	adds	r3, #104	; 0x68
 8016b40:	681d      	ldr	r5, [r3, #0]
 8016b42:	f7fa fc75 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016b46:	4603      	mov	r3, r0
 8016b48:	9300      	str	r3, [sp, #0]
 8016b4a:	f240 337b 	movw	r3, #891	; 0x37b
 8016b4e:	4a06      	ldr	r2, [pc, #24]	; (8016b68 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 8016b50:	4906      	ldr	r1, [pc, #24]	; (8016b6c <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 8016b52:	4620      	mov	r0, r4
 8016b54:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8016b56:	2100      	movs	r1, #0
 8016b58:	6878      	ldr	r0, [r7, #4]
 8016b5a:	f7f1 f8b9 	bl	8007cd0 <_ZN18cpputest_ulonglongC1Ei>
}
 8016b5e:	6878      	ldr	r0, [r7, #4]
 8016b60:	3708      	adds	r7, #8
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bdb0      	pop	{r4, r5, r7, pc}
 8016b66:	bf00      	nop
 8016b68:	08022814 	.word	0x08022814
 8016b6c:	08022830 	.word	0x08022830

08016b70 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 8016b70:	b5b0      	push	{r4, r5, r7, lr}
 8016b72:	b086      	sub	sp, #24
 8016b74:	af02      	add	r7, sp, #8
 8016b76:	60f8      	str	r0, [r7, #12]
 8016b78:	60b9      	str	r1, [r7, #8]
 8016b7a:	4639      	mov	r1, r7
 8016b7c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8016b80:	f7fa fc46 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8016b84:	4604      	mov	r4, r0
 8016b86:	6823      	ldr	r3, [r4, #0]
 8016b88:	3368      	adds	r3, #104	; 0x68
 8016b8a:	681d      	ldr	r5, [r3, #0]
 8016b8c:	f7fa fc50 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016b90:	4603      	mov	r3, r0
 8016b92:	9300      	str	r3, [sp, #0]
 8016b94:	f240 3381 	movw	r3, #897	; 0x381
 8016b98:	4a05      	ldr	r2, [pc, #20]	; (8016bb0 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 8016b9a:	4906      	ldr	r1, [pc, #24]	; (8016bb4 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8016b9c:	4620      	mov	r0, r4
 8016b9e:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8016ba0:	2100      	movs	r1, #0
 8016ba2:	68f8      	ldr	r0, [r7, #12]
 8016ba4:	f7f1 f894 	bl	8007cd0 <_ZN18cpputest_ulonglongC1Ei>
}
 8016ba8:	68f8      	ldr	r0, [r7, #12]
 8016baa:	3710      	adds	r7, #16
 8016bac:	46bd      	mov	sp, r7
 8016bae:	bdb0      	pop	{r4, r5, r7, pc}
 8016bb0:	08022814 	.word	0x08022814
 8016bb4:	08022830 	.word	0x08022830

08016bb8 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 8016bb8:	b5b0      	push	{r4, r5, r7, lr}
 8016bba:	b086      	sub	sp, #24
 8016bbc:	af02      	add	r7, sp, #8
 8016bbe:	60f8      	str	r0, [r7, #12]
 8016bc0:	60b9      	str	r1, [r7, #8]
 8016bc2:	4639      	mov	r1, r7
 8016bc4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8016bc8:	f7fa fc22 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8016bcc:	4604      	mov	r4, r0
 8016bce:	6823      	ldr	r3, [r4, #0]
 8016bd0:	3368      	adds	r3, #104	; 0x68
 8016bd2:	681d      	ldr	r5, [r3, #0]
 8016bd4:	f7fa fc2c 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	9300      	str	r3, [sp, #0]
 8016bdc:	f240 3387 	movw	r3, #903	; 0x387
 8016be0:	4a05      	ldr	r2, [pc, #20]	; (8016bf8 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 8016be2:	4906      	ldr	r1, [pc, #24]	; (8016bfc <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8016be4:	4620      	mov	r0, r4
 8016be6:	47a8      	blx	r5
    return cpputest_longlong(0);
 8016be8:	2100      	movs	r1, #0
 8016bea:	68f8      	ldr	r0, [r7, #12]
 8016bec:	f7f1 f864 	bl	8007cb8 <_ZN17cpputest_longlongC1Ei>
}
 8016bf0:	68f8      	ldr	r0, [r7, #12]
 8016bf2:	3710      	adds	r7, #16
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8016bf8:	08022814 	.word	0x08022814
 8016bfc:	0802285c 	.word	0x0802285c

08016c00 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 8016c00:	b480      	push	{r7}
 8016c02:	b083      	sub	sp, #12
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
    return false;
 8016c08:	2300      	movs	r3, #0
}
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	370c      	adds	r7, #12
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c14:	4770      	bx	lr

08016c16 <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 8016c16:	b480      	push	{r7}
 8016c18:	b083      	sub	sp, #12
 8016c1a:	af00      	add	r7, sp, #0
 8016c1c:	6078      	str	r0, [r7, #4]
 8016c1e:	460b      	mov	r3, r1
 8016c20:	70fb      	strb	r3, [r7, #3]
    return false;
 8016c22:	2300      	movs	r3, #0
}
 8016c24:	4618      	mov	r0, r3
 8016c26:	370c      	adds	r7, #12
 8016c28:	46bd      	mov	sp, r7
 8016c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2e:	4770      	bx	lr

08016c30 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 8016c30:	b480      	push	{r7}
 8016c32:	b083      	sub	sp, #12
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	6078      	str	r0, [r7, #4]
    return 0;
 8016c38:	2300      	movs	r3, #0
}
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	370c      	adds	r7, #12
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c44:	4770      	bx	lr

08016c46 <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 8016c46:	b480      	push	{r7}
 8016c48:	b083      	sub	sp, #12
 8016c4a:	af00      	add	r7, sp, #0
 8016c4c:	6078      	str	r0, [r7, #4]
    return 0.0;
 8016c4e:	f04f 0200 	mov.w	r2, #0
 8016c52:	f04f 0300 	mov.w	r3, #0
 8016c56:	ec43 2b17 	vmov	d7, r2, r3
}
 8016c5a:	eeb0 0a47 	vmov.f32	s0, s14
 8016c5e:	eef0 0a67 	vmov.f32	s1, s15
 8016c62:	370c      	adds	r7, #12
 8016c64:	46bd      	mov	sp, r7
 8016c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6a:	4770      	bx	lr

08016c6c <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b084      	sub	sp, #16
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	60f8      	str	r0, [r7, #12]
 8016c74:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	3398      	adds	r3, #152	; 0x98
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	68f8      	ldr	r0, [r7, #12]
 8016c82:	4798      	blx	r3
 8016c84:	eeb0 7a40 	vmov.f32	s14, s0
 8016c88:	eef0 7a60 	vmov.f32	s15, s1
}
 8016c8c:	eeb0 0a47 	vmov.f32	s0, s14
 8016c90:	eef0 0a67 	vmov.f32	s1, s15
 8016c94:	3710      	adds	r7, #16
 8016c96:	46bd      	mov	sp, r7
 8016c98:	bd80      	pop	{r7, pc}

08016c9a <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 8016c9a:	b480      	push	{r7}
 8016c9c:	b083      	sub	sp, #12
 8016c9e:	af00      	add	r7, sp, #0
 8016ca0:	6078      	str	r0, [r7, #4]
    return 0;
 8016ca2:	2300      	movs	r3, #0
}
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	370c      	adds	r7, #12
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cae:	4770      	bx	lr

08016cb0 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 8016cb0:	b480      	push	{r7}
 8016cb2:	b083      	sub	sp, #12
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8016cb8:	2300      	movs	r3, #0
}
 8016cba:	4618      	mov	r0, r3
 8016cbc:	370c      	adds	r7, #12
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc4:	4770      	bx	lr

08016cc6 <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 8016cc6:	b480      	push	{r7}
 8016cc8:	b083      	sub	sp, #12
 8016cca:	af00      	add	r7, sp, #0
 8016ccc:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8016cce:	2300      	movs	r3, #0
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	370c      	adds	r7, #12
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cda:	4770      	bx	lr

08016cdc <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 8016cdc:	b480      	push	{r7}
 8016cde:	b083      	sub	sp, #12
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8016ce4:	2300      	movs	r3, #0
}
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	370c      	adds	r7, #12
 8016cea:	46bd      	mov	sp, r7
 8016cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf0:	4770      	bx	lr

08016cf2 <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 8016cf2:	b580      	push	{r7, lr}
 8016cf4:	b082      	sub	sp, #8
 8016cf6:	af00      	add	r7, sp, #0
 8016cf8:	6078      	str	r0, [r7, #4]
 8016cfa:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	33a8      	adds	r3, #168	; 0xa8
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	6878      	ldr	r0, [r7, #4]
 8016d06:	4798      	blx	r3
 8016d08:	4603      	mov	r3, r0
}
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	3708      	adds	r7, #8
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	bd80      	pop	{r7, pc}

08016d12 <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 8016d12:	b580      	push	{r7, lr}
 8016d14:	b082      	sub	sp, #8
 8016d16:	af00      	add	r7, sp, #0
 8016d18:	6078      	str	r0, [r7, #4]
 8016d1a:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	33a0      	adds	r3, #160	; 0xa0
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	6878      	ldr	r0, [r7, #4]
 8016d26:	4798      	blx	r3
 8016d28:	4603      	mov	r3, r0
}
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	3708      	adds	r7, #8
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	bd80      	pop	{r7, pc}

08016d32 <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 8016d32:	b580      	push	{r7, lr}
 8016d34:	b082      	sub	sp, #8
 8016d36:	af00      	add	r7, sp, #0
 8016d38:	6078      	str	r0, [r7, #4]
 8016d3a:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	33b0      	adds	r3, #176	; 0xb0
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	6878      	ldr	r0, [r7, #4]
 8016d46:	4798      	blx	r3
 8016d48:	4603      	mov	r3, r0
}
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	3708      	adds	r7, #8
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	bd80      	pop	{r7, pc}
	...

08016d54 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 8016d54:	b480      	push	{r7}
 8016d56:	b083      	sub	sp, #12
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
    return "";
 8016d5c:	4b03      	ldr	r3, [pc, #12]	; (8016d6c <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 8016d5e:	4618      	mov	r0, r3
 8016d60:	370c      	adds	r7, #12
 8016d62:	46bd      	mov	sp, r7
 8016d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d68:	4770      	bx	lr
 8016d6a:	bf00      	nop
 8016d6c:	080227fc 	.word	0x080227fc

08016d70 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b082      	sub	sp, #8
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
 8016d78:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	3394      	adds	r3, #148	; 0x94
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	6878      	ldr	r0, [r7, #4]
 8016d84:	4798      	blx	r3
 8016d86:	4603      	mov	r3, r0
}
 8016d88:	4618      	mov	r0, r3
 8016d8a:	3708      	adds	r7, #8
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	bd80      	pop	{r7, pc}

08016d90 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 8016d90:	b480      	push	{r7}
 8016d92:	b083      	sub	sp, #12
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]
 8016d98:	6039      	str	r1, [r7, #0]
    return 0;
 8016d9a:	2300      	movs	r3, #0
}
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	370c      	adds	r7, #12
 8016da0:	46bd      	mov	sp, r7
 8016da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da6:	4770      	bx	lr

08016da8 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b082      	sub	sp, #8
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
 8016db0:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	3388      	adds	r3, #136	; 0x88
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	6878      	ldr	r0, [r7, #4]
 8016dbc:	4798      	blx	r3
 8016dbe:	4603      	mov	r3, r0
}
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	3708      	adds	r7, #8
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bd80      	pop	{r7, pc}

08016dc8 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 8016dc8:	b590      	push	{r4, r7, lr}
 8016dca:	b085      	sub	sp, #20
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
 8016dd0:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	3304      	adds	r3, #4
 8016dd6:	490e      	ldr	r1, [pc, #56]	; (8016e10 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 8016dd8:	4618      	mov	r0, r3
 8016dda:	f7f3 fb7d 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	1d1c      	adds	r4, r3, #4
 8016de2:	f107 0308 	add.w	r3, r7, #8
 8016de6:	6839      	ldr	r1, [r7, #0]
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7f3 fdd1 	bl	800a990 <_Z10StringFromPKv>
 8016dee:	f107 0308 	add.w	r3, r7, #8
 8016df2:	4619      	mov	r1, r3
 8016df4:	4620      	mov	r0, r4
 8016df6:	f7f3 fb5d 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 8016dfa:	f107 0308 	add.w	r3, r7, #8
 8016dfe:	4618      	mov	r0, r3
 8016e00:	f7f3 fadb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return *this;
 8016e04:	687b      	ldr	r3, [r7, #4]
}
 8016e06:	4618      	mov	r0, r3
 8016e08:	3714      	adds	r7, #20
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	bd90      	pop	{r4, r7, pc}
 8016e0e:	bf00      	nop
 8016e10:	08022930 	.word	0x08022930

08016e14 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 8016e14:	b598      	push	{r3, r4, r7, lr}
 8016e16:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 8016e18:	4b09      	ldr	r3, [pc, #36]	; (8016e40 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d10b      	bne.n	8016e38 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 8016e20:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8016e24:	4907      	ldr	r1, [pc, #28]	; (8016e44 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 8016e26:	200c      	movs	r0, #12
 8016e28:	f7f0 fb4c 	bl	80074c4 <_ZnwjPKci>
 8016e2c:	4604      	mov	r4, r0
 8016e2e:	4620      	mov	r0, r4
 8016e30:	f7ff fa4c 	bl	80162cc <_ZN19MockActualCallTraceC1Ev>
 8016e34:	4b02      	ldr	r3, [pc, #8]	; (8016e40 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8016e36:	601c      	str	r4, [r3, #0]
    return *instance_;
 8016e38:	4b01      	ldr	r3, [pc, #4]	; (8016e40 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8016e3a:	681b      	ldr	r3, [r3, #0]
}
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	bd98      	pop	{r3, r4, r7, pc}
 8016e40:	20000c7c 	.word	0x20000c7c
 8016e44:	08022814 	.word	0x08022814

08016e48 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	af00      	add	r7, sp, #0
    delete instance_;
 8016e4c:	4b06      	ldr	r3, [pc, #24]	; (8016e68 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d004      	beq.n	8016e5e <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 8016e54:	681a      	ldr	r2, [r3, #0]
 8016e56:	3204      	adds	r2, #4
 8016e58:	6812      	ldr	r2, [r2, #0]
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	4790      	blx	r2
    instance_ = NULLPTR;
 8016e5e:	4b02      	ldr	r3, [pc, #8]	; (8016e68 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8016e60:	2200      	movs	r2, #0
 8016e62:	601a      	str	r2, [r3, #0]
}
 8016e64:	bf00      	nop
 8016e66:	bd80      	pop	{r7, pc}
 8016e68:	20000c7c 	.word	0x20000c7c

08016e6c <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b082      	sub	sp, #8
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	4618      	mov	r0, r3
 8016e78:	f7fd fe9a 	bl	8014bb0 <_ZN14MockActualCallC1Ev>
 8016e7c:	4a03      	ldr	r2, [pc, #12]	; (8016e8c <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	601a      	str	r2, [r3, #0]
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	4618      	mov	r0, r3
 8016e86:	3708      	adds	r7, #8
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	bd80      	pop	{r7, pc}
 8016e8c:	080247f0 	.word	0x080247f0

08016e90 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 8016e90:	b580      	push	{r7, lr}
 8016e92:	af00      	add	r7, sp, #0
 8016e94:	4801      	ldr	r0, [pc, #4]	; (8016e9c <__tcf_0+0xc>)
 8016e96:	f000 f831 	bl	8016efc <_ZN21MockIgnoredActualCallD1Ev>
 8016e9a:	bd80      	pop	{r7, pc}
 8016e9c:	20000c80 	.word	0x20000c80

08016ea0 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 8016ea4:	4b12      	ldr	r3, [pc, #72]	; (8016ef0 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8016ea6:	781b      	ldrb	r3, [r3, #0]
 8016ea8:	f3bf 8f5b 	dmb	ish
 8016eac:	b2db      	uxtb	r3, r3
 8016eae:	f003 0301 	and.w	r3, r3, #1
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	bf0c      	ite	eq
 8016eb6:	2301      	moveq	r3, #1
 8016eb8:	2300      	movne	r3, #0
 8016eba:	b2db      	uxtb	r3, r3
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d013      	beq.n	8016ee8 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8016ec0:	480b      	ldr	r0, [pc, #44]	; (8016ef0 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8016ec2:	f005 fd81 	bl	801c9c8 <__cxa_guard_acquire>
 8016ec6:	4603      	mov	r3, r0
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	bf14      	ite	ne
 8016ecc:	2301      	movne	r3, #1
 8016ece:	2300      	moveq	r3, #0
 8016ed0:	b2db      	uxtb	r3, r3
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d008      	beq.n	8016ee8 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8016ed6:	4807      	ldr	r0, [pc, #28]	; (8016ef4 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 8016ed8:	f7ff ffc8 	bl	8016e6c <_ZN21MockIgnoredActualCallC1Ev>
 8016edc:	4804      	ldr	r0, [pc, #16]	; (8016ef0 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8016ede:	f005 fd7f 	bl	801c9e0 <__cxa_guard_release>
 8016ee2:	4805      	ldr	r0, [pc, #20]	; (8016ef8 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 8016ee4:	f005 fda3 	bl	801ca2e <atexit>
    return call;
 8016ee8:	4b02      	ldr	r3, [pc, #8]	; (8016ef4 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 8016eea:	4618      	mov	r0, r3
 8016eec:	bd80      	pop	{r7, pc}
 8016eee:	bf00      	nop
 8016ef0:	20000c84 	.word	0x20000c84
 8016ef4:	20000c80 	.word	0x20000c80
 8016ef8:	08016e91 	.word	0x08016e91

08016efc <_ZN21MockIgnoredActualCallD1Ev>:
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b082      	sub	sp, #8
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
 8016f04:	4a05      	ldr	r2, [pc, #20]	; (8016f1c <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	601a      	str	r2, [r3, #0]
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	f7fd fe5f 	bl	8014bd0 <_ZN14MockActualCallD1Ev>
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	4618      	mov	r0, r3
 8016f16:	3708      	adds	r7, #8
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	bd80      	pop	{r7, pc}
 8016f1c:	080247f0 	.word	0x080247f0

08016f20 <_ZN21MockIgnoredActualCallD0Ev>:
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b082      	sub	sp, #8
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
 8016f28:	6878      	ldr	r0, [r7, #4]
 8016f2a:	f7ff ffe7 	bl	8016efc <_ZN21MockIgnoredActualCallD1Ev>
 8016f2e:	2104      	movs	r1, #4
 8016f30:	6878      	ldr	r0, [r7, #4]
 8016f32:	f7f0 fadb 	bl	80074ec <_ZdlPvj>
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	4618      	mov	r0, r3
 8016f3a:	3708      	adds	r7, #8
 8016f3c:	46bd      	mov	sp, r7
 8016f3e:	bd80      	pop	{r7, pc}

08016f40 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b082      	sub	sp, #8
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
 8016f48:	4a05      	ldr	r2, [pc, #20]	; (8016f60 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	601a      	str	r2, [r3, #0]
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	4618      	mov	r0, r3
 8016f52:	f7f0 fefd 	bl	8007d50 <_ZN11MockFailureD1Ev>
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	4618      	mov	r0, r3
 8016f5a:	3708      	adds	r7, #8
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}
 8016f60:	080246e8 	.word	0x080246e8

08016f64 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b082      	sub	sp, #8
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	6078      	str	r0, [r7, #4]
 8016f6c:	6878      	ldr	r0, [r7, #4]
 8016f6e:	f7ff ffe7 	bl	8016f40 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 8016f72:	2134      	movs	r1, #52	; 0x34
 8016f74:	6878      	ldr	r0, [r7, #4]
 8016f76:	f7f0 fab9 	bl	80074ec <_ZdlPvj>
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	3708      	adds	r7, #8
 8016f80:	46bd      	mov	sp, r7
 8016f82:	bd80      	pop	{r7, pc}

08016f84 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b082      	sub	sp, #8
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
 8016f8c:	4a05      	ldr	r2, [pc, #20]	; (8016fa4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	601a      	str	r2, [r3, #0]
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	4618      	mov	r0, r3
 8016f96:	f7f0 fedb 	bl	8007d50 <_ZN11MockFailureD1Ev>
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	3708      	adds	r7, #8
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bd80      	pop	{r7, pc}
 8016fa4:	080247c4 	.word	0x080247c4

08016fa8 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b082      	sub	sp, #8
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	6078      	str	r0, [r7, #4]
 8016fb0:	6878      	ldr	r0, [r7, #4]
 8016fb2:	f7ff ffe7 	bl	8016f84 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8016fb6:	2134      	movs	r1, #52	; 0x34
 8016fb8:	6878      	ldr	r0, [r7, #4]
 8016fba:	f7f0 fa97 	bl	80074ec <_ZdlPvj>
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	3708      	adds	r7, #8
 8016fc4:	46bd      	mov	sp, r7
 8016fc6:	bd80      	pop	{r7, pc}

08016fc8 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b082      	sub	sp, #8
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
 8016fd0:	4a05      	ldr	r2, [pc, #20]	; (8016fe8 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	601a      	str	r2, [r3, #0]
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7f0 feb9 	bl	8007d50 <_ZN11MockFailureD1Ev>
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	4618      	mov	r0, r3
 8016fe2:	3708      	adds	r7, #8
 8016fe4:	46bd      	mov	sp, r7
 8016fe6:	bd80      	pop	{r7, pc}
 8016fe8:	08024798 	.word	0x08024798

08016fec <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b082      	sub	sp, #8
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
 8016ff4:	6878      	ldr	r0, [r7, #4]
 8016ff6:	f7ff ffe7 	bl	8016fc8 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8016ffa:	2134      	movs	r1, #52	; 0x34
 8016ffc:	6878      	ldr	r0, [r7, #4]
 8016ffe:	f7f0 fa75 	bl	80074ec <_ZdlPvj>
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	4618      	mov	r0, r3
 8017006:	3708      	adds	r7, #8
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}

0801700c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 801700c:	b580      	push	{r7, lr}
 801700e:	b082      	sub	sp, #8
 8017010:	af00      	add	r7, sp, #0
 8017012:	6078      	str	r0, [r7, #4]
 8017014:	4a05      	ldr	r2, [pc, #20]	; (801702c <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	601a      	str	r2, [r3, #0]
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	4618      	mov	r0, r3
 801701e:	f7f0 fe97 	bl	8007d50 <_ZN11MockFailureD1Ev>
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	4618      	mov	r0, r3
 8017026:	3708      	adds	r7, #8
 8017028:	46bd      	mov	sp, r7
 801702a:	bd80      	pop	{r7, pc}
 801702c:	0802476c 	.word	0x0802476c

08017030 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 8017030:	b580      	push	{r7, lr}
 8017032:	b082      	sub	sp, #8
 8017034:	af00      	add	r7, sp, #0
 8017036:	6078      	str	r0, [r7, #4]
 8017038:	6878      	ldr	r0, [r7, #4]
 801703a:	f7ff ffe7 	bl	801700c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801703e:	2134      	movs	r1, #52	; 0x34
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	f7f0 fa53 	bl	80074ec <_ZdlPvj>
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	4618      	mov	r0, r3
 801704a:	3708      	adds	r7, #8
 801704c:	46bd      	mov	sp, r7
 801704e:	bd80      	pop	{r7, pc}

08017050 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 8017050:	b580      	push	{r7, lr}
 8017052:	b082      	sub	sp, #8
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
 8017058:	4a05      	ldr	r2, [pc, #20]	; (8017070 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	601a      	str	r2, [r3, #0]
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	4618      	mov	r0, r3
 8017062:	f7f0 fe75 	bl	8007d50 <_ZN11MockFailureD1Ev>
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	4618      	mov	r0, r3
 801706a:	3708      	adds	r7, #8
 801706c:	46bd      	mov	sp, r7
 801706e:	bd80      	pop	{r7, pc}
 8017070:	08024714 	.word	0x08024714

08017074 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 8017074:	b580      	push	{r7, lr}
 8017076:	b082      	sub	sp, #8
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]
 801707c:	6878      	ldr	r0, [r7, #4]
 801707e:	f7ff ffe7 	bl	8017050 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8017082:	2134      	movs	r1, #52	; 0x34
 8017084:	6878      	ldr	r0, [r7, #4]
 8017086:	f7f0 fa31 	bl	80074ec <_ZdlPvj>
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	4618      	mov	r0, r3
 801708e:	3708      	adds	r7, #8
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}

08017094 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 8017094:	b580      	push	{r7, lr}
 8017096:	b082      	sub	sp, #8
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
 801709c:	4a05      	ldr	r2, [pc, #20]	; (80170b4 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	601a      	str	r2, [r3, #0]
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	4618      	mov	r0, r3
 80170a6:	f7f0 fe53 	bl	8007d50 <_ZN11MockFailureD1Ev>
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	4618      	mov	r0, r3
 80170ae:	3708      	adds	r7, #8
 80170b0:	46bd      	mov	sp, r7
 80170b2:	bd80      	pop	{r7, pc}
 80170b4:	08024740 	.word	0x08024740

080170b8 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b082      	sub	sp, #8
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
 80170c0:	6878      	ldr	r0, [r7, #4]
 80170c2:	f7ff ffe7 	bl	8017094 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 80170c6:	2134      	movs	r1, #52	; 0x34
 80170c8:	6878      	ldr	r0, [r7, #4]
 80170ca:	f7f0 fa0f 	bl	80074ec <_ZdlPvj>
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	4618      	mov	r0, r3
 80170d2:	3708      	adds	r7, #8
 80170d4:	46bd      	mov	sp, r7
 80170d6:	bd80      	pop	{r7, pc}

080170d8 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 80170d8:	b580      	push	{r7, lr}
 80170da:	b082      	sub	sp, #8
 80170dc:	af00      	add	r7, sp, #0
 80170de:	6078      	str	r0, [r7, #4]
 80170e0:	4a05      	ldr	r2, [pc, #20]	; (80170f8 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	601a      	str	r2, [r3, #0]
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	4618      	mov	r0, r3
 80170ea:	f7f0 fe31 	bl	8007d50 <_ZN11MockFailureD1Ev>
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	4618      	mov	r0, r3
 80170f2:	3708      	adds	r7, #8
 80170f4:	46bd      	mov	sp, r7
 80170f6:	bd80      	pop	{r7, pc}
 80170f8:	08024690 	.word	0x08024690

080170fc <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b082      	sub	sp, #8
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
 8017104:	6878      	ldr	r0, [r7, #4]
 8017106:	f7ff ffe7 	bl	80170d8 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801710a:	2134      	movs	r1, #52	; 0x34
 801710c:	6878      	ldr	r0, [r7, #4]
 801710e:	f7f0 f9ed 	bl	80074ec <_ZdlPvj>
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	4618      	mov	r0, r3
 8017116:	3708      	adds	r7, #8
 8017118:	46bd      	mov	sp, r7
 801711a:	bd80      	pop	{r7, pc}

0801711c <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 801711c:	b580      	push	{r7, lr}
 801711e:	b082      	sub	sp, #8
 8017120:	af00      	add	r7, sp, #0
 8017122:	6078      	str	r0, [r7, #4]
 8017124:	4a05      	ldr	r2, [pc, #20]	; (801713c <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	601a      	str	r2, [r3, #0]
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	4618      	mov	r0, r3
 801712e:	f7f0 fe0f 	bl	8007d50 <_ZN11MockFailureD1Ev>
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	4618      	mov	r0, r3
 8017136:	3708      	adds	r7, #8
 8017138:	46bd      	mov	sp, r7
 801713a:	bd80      	pop	{r7, pc}
 801713c:	080246bc 	.word	0x080246bc

08017140 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 8017140:	b580      	push	{r7, lr}
 8017142:	b082      	sub	sp, #8
 8017144:	af00      	add	r7, sp, #0
 8017146:	6078      	str	r0, [r7, #4]
 8017148:	6878      	ldr	r0, [r7, #4]
 801714a:	f7ff ffe7 	bl	801711c <_ZN27MockUnexpectedObjectFailureD1Ev>
 801714e:	2134      	movs	r1, #52	; 0x34
 8017150:	6878      	ldr	r0, [r7, #4]
 8017152:	f7f0 f9cb 	bl	80074ec <_ZdlPvj>
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	4618      	mov	r0, r3
 801715a:	3708      	adds	r7, #8
 801715c:	46bd      	mov	sp, r7
 801715e:	bd80      	pop	{r7, pc}

08017160 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 8017160:	b580      	push	{r7, lr}
 8017162:	b082      	sub	sp, #8
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
 8017168:	6039      	str	r1, [r7, #0]
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	3310      	adds	r3, #16
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	683a      	ldr	r2, [r7, #0]
 8017174:	6839      	ldr	r1, [r7, #0]
 8017176:	6878      	ldr	r0, [r7, #4]
 8017178:	4798      	blx	r3
 801717a:	4603      	mov	r3, r0
 801717c:	4618      	mov	r0, r3
 801717e:	3708      	adds	r7, #8
 8017180:	46bd      	mov	sp, r7
 8017182:	bd80      	pop	{r7, pc}

08017184 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 8017184:	b480      	push	{r7}
 8017186:	b083      	sub	sp, #12
 8017188:	af00      	add	r7, sp, #0
 801718a:	6078      	str	r0, [r7, #4]
 801718c:	6039      	str	r1, [r7, #0]
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	4618      	mov	r0, r3
 8017192:	370c      	adds	r7, #12
 8017194:	46bd      	mov	sp, r7
 8017196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719a:	4770      	bx	lr

0801719c <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 801719c:	b480      	push	{r7}
 801719e:	b083      	sub	sp, #12
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
 80171a4:	6039      	str	r1, [r7, #0]
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	4618      	mov	r0, r3
 80171aa:	370c      	adds	r7, #12
 80171ac:	46bd      	mov	sp, r7
 80171ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b2:	4770      	bx	lr

080171b4 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 80171b4:	b480      	push	{r7}
 80171b6:	b085      	sub	sp, #20
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	60f8      	str	r0, [r7, #12]
 80171bc:	60b9      	str	r1, [r7, #8]
 80171be:	607a      	str	r2, [r7, #4]
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	4618      	mov	r0, r3
 80171c4:	3714      	adds	r7, #20
 80171c6:	46bd      	mov	sp, r7
 80171c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171cc:	4770      	bx	lr

080171ce <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 80171ce:	b480      	push	{r7}
 80171d0:	b085      	sub	sp, #20
 80171d2:	af00      	add	r7, sp, #0
 80171d4:	60f8      	str	r0, [r7, #12]
 80171d6:	60b9      	str	r1, [r7, #8]
 80171d8:	4613      	mov	r3, r2
 80171da:	71fb      	strb	r3, [r7, #7]
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	4618      	mov	r0, r3
 80171e0:	3714      	adds	r7, #20
 80171e2:	46bd      	mov	sp, r7
 80171e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e8:	4770      	bx	lr

080171ea <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 80171ea:	b480      	push	{r7}
 80171ec:	b085      	sub	sp, #20
 80171ee:	af00      	add	r7, sp, #0
 80171f0:	60f8      	str	r0, [r7, #12]
 80171f2:	60b9      	str	r1, [r7, #8]
 80171f4:	607a      	str	r2, [r7, #4]
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	4618      	mov	r0, r3
 80171fa:	3714      	adds	r7, #20
 80171fc:	46bd      	mov	sp, r7
 80171fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017202:	4770      	bx	lr

08017204 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 8017204:	b480      	push	{r7}
 8017206:	b085      	sub	sp, #20
 8017208:	af00      	add	r7, sp, #0
 801720a:	60f8      	str	r0, [r7, #12]
 801720c:	60b9      	str	r1, [r7, #8]
 801720e:	607a      	str	r2, [r7, #4]
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	4618      	mov	r0, r3
 8017214:	3714      	adds	r7, #20
 8017216:	46bd      	mov	sp, r7
 8017218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721c:	4770      	bx	lr

0801721e <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801721e:	b480      	push	{r7}
 8017220:	b085      	sub	sp, #20
 8017222:	af00      	add	r7, sp, #0
 8017224:	60f8      	str	r0, [r7, #12]
 8017226:	60b9      	str	r1, [r7, #8]
 8017228:	607a      	str	r2, [r7, #4]
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	4618      	mov	r0, r3
 801722e:	3714      	adds	r7, #20
 8017230:	46bd      	mov	sp, r7
 8017232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017236:	4770      	bx	lr

08017238 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8017238:	b480      	push	{r7}
 801723a:	b085      	sub	sp, #20
 801723c:	af00      	add	r7, sp, #0
 801723e:	60f8      	str	r0, [r7, #12]
 8017240:	60b9      	str	r1, [r7, #8]
 8017242:	607a      	str	r2, [r7, #4]
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	4618      	mov	r0, r3
 8017248:	3714      	adds	r7, #20
 801724a:	46bd      	mov	sp, r7
 801724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017250:	4770      	bx	lr

08017252 <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8017252:	b480      	push	{r7}
 8017254:	b085      	sub	sp, #20
 8017256:	af00      	add	r7, sp, #0
 8017258:	60f8      	str	r0, [r7, #12]
 801725a:	60b9      	str	r1, [r7, #8]
 801725c:	4639      	mov	r1, r7
 801725e:	e881 000c 	stmia.w	r1, {r2, r3}
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	4618      	mov	r0, r3
 8017266:	3714      	adds	r7, #20
 8017268:	46bd      	mov	sp, r7
 801726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726e:	4770      	bx	lr

08017270 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8017270:	b480      	push	{r7}
 8017272:	b085      	sub	sp, #20
 8017274:	af00      	add	r7, sp, #0
 8017276:	60f8      	str	r0, [r7, #12]
 8017278:	60b9      	str	r1, [r7, #8]
 801727a:	4639      	mov	r1, r7
 801727c:	e881 000c 	stmia.w	r1, {r2, r3}
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	4618      	mov	r0, r3
 8017284:	3714      	adds	r7, #20
 8017286:	46bd      	mov	sp, r7
 8017288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801728c:	4770      	bx	lr

0801728e <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801728e:	b480      	push	{r7}
 8017290:	b085      	sub	sp, #20
 8017292:	af00      	add	r7, sp, #0
 8017294:	60f8      	str	r0, [r7, #12]
 8017296:	60b9      	str	r1, [r7, #8]
 8017298:	ed87 0b00 	vstr	d0, [r7]
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	4618      	mov	r0, r3
 80172a0:	3714      	adds	r7, #20
 80172a2:	46bd      	mov	sp, r7
 80172a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a8:	4770      	bx	lr

080172aa <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 80172aa:	b480      	push	{r7}
 80172ac:	b087      	sub	sp, #28
 80172ae:	af00      	add	r7, sp, #0
 80172b0:	6178      	str	r0, [r7, #20]
 80172b2:	6139      	str	r1, [r7, #16]
 80172b4:	ed87 0b02 	vstr	d0, [r7, #8]
 80172b8:	ed87 1b00 	vstr	d1, [r7]
 80172bc:	697b      	ldr	r3, [r7, #20]
 80172be:	4618      	mov	r0, r3
 80172c0:	371c      	adds	r7, #28
 80172c2:	46bd      	mov	sp, r7
 80172c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c8:	4770      	bx	lr

080172ca <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 80172ca:	b480      	push	{r7}
 80172cc:	b085      	sub	sp, #20
 80172ce:	af00      	add	r7, sp, #0
 80172d0:	60f8      	str	r0, [r7, #12]
 80172d2:	60b9      	str	r1, [r7, #8]
 80172d4:	607a      	str	r2, [r7, #4]
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	4618      	mov	r0, r3
 80172da:	3714      	adds	r7, #20
 80172dc:	46bd      	mov	sp, r7
 80172de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e2:	4770      	bx	lr

080172e4 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 80172e4:	b480      	push	{r7}
 80172e6:	b085      	sub	sp, #20
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	60f8      	str	r0, [r7, #12]
 80172ec:	60b9      	str	r1, [r7, #8]
 80172ee:	607a      	str	r2, [r7, #4]
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	4618      	mov	r0, r3
 80172f4:	3714      	adds	r7, #20
 80172f6:	46bd      	mov	sp, r7
 80172f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fc:	4770      	bx	lr

080172fe <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 80172fe:	b480      	push	{r7}
 8017300:	b085      	sub	sp, #20
 8017302:	af00      	add	r7, sp, #0
 8017304:	60f8      	str	r0, [r7, #12]
 8017306:	60b9      	str	r1, [r7, #8]
 8017308:	607a      	str	r2, [r7, #4]
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	4618      	mov	r0, r3
 801730e:	3714      	adds	r7, #20
 8017310:	46bd      	mov	sp, r7
 8017312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017316:	4770      	bx	lr

08017318 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 8017318:	b480      	push	{r7}
 801731a:	b085      	sub	sp, #20
 801731c:	af00      	add	r7, sp, #0
 801731e:	60f8      	str	r0, [r7, #12]
 8017320:	60b9      	str	r1, [r7, #8]
 8017322:	607a      	str	r2, [r7, #4]
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	4618      	mov	r0, r3
 8017328:	3714      	adds	r7, #20
 801732a:	46bd      	mov	sp, r7
 801732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017330:	4770      	bx	lr

08017332 <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 8017332:	b480      	push	{r7}
 8017334:	b085      	sub	sp, #20
 8017336:	af00      	add	r7, sp, #0
 8017338:	60f8      	str	r0, [r7, #12]
 801733a:	60b9      	str	r1, [r7, #8]
 801733c:	607a      	str	r2, [r7, #4]
 801733e:	603b      	str	r3, [r7, #0]
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	4618      	mov	r0, r3
 8017344:	3714      	adds	r7, #20
 8017346:	46bd      	mov	sp, r7
 8017348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734c:	4770      	bx	lr

0801734e <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801734e:	b480      	push	{r7}
 8017350:	b085      	sub	sp, #20
 8017352:	af00      	add	r7, sp, #0
 8017354:	60f8      	str	r0, [r7, #12]
 8017356:	60b9      	str	r1, [r7, #8]
 8017358:	607a      	str	r2, [r7, #4]
 801735a:	603b      	str	r3, [r7, #0]
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	4618      	mov	r0, r3
 8017360:	3714      	adds	r7, #20
 8017362:	46bd      	mov	sp, r7
 8017364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017368:	4770      	bx	lr

0801736a <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 801736a:	b480      	push	{r7}
 801736c:	b085      	sub	sp, #20
 801736e:	af00      	add	r7, sp, #0
 8017370:	60f8      	str	r0, [r7, #12]
 8017372:	60b9      	str	r1, [r7, #8]
 8017374:	607a      	str	r2, [r7, #4]
 8017376:	603b      	str	r3, [r7, #0]
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	4618      	mov	r0, r3
 801737c:	3714      	adds	r7, #20
 801737e:	46bd      	mov	sp, r7
 8017380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017384:	4770      	bx	lr

08017386 <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8017386:	b480      	push	{r7}
 8017388:	b085      	sub	sp, #20
 801738a:	af00      	add	r7, sp, #0
 801738c:	60f8      	str	r0, [r7, #12]
 801738e:	60b9      	str	r1, [r7, #8]
 8017390:	607a      	str	r2, [r7, #4]
 8017392:	603b      	str	r3, [r7, #0]
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	4618      	mov	r0, r3
 8017398:	3714      	adds	r7, #20
 801739a:	46bd      	mov	sp, r7
 801739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a0:	4770      	bx	lr

080173a2 <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 80173a2:	b480      	push	{r7}
 80173a4:	b083      	sub	sp, #12
 80173a6:	af00      	add	r7, sp, #0
 80173a8:	6078      	str	r0, [r7, #4]
 80173aa:	6039      	str	r1, [r7, #0]
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	4618      	mov	r0, r3
 80173b0:	370c      	adds	r7, #12
 80173b2:	46bd      	mov	sp, r7
 80173b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b8:	4770      	bx	lr

080173ba <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 80173ba:	b480      	push	{r7}
 80173bc:	b083      	sub	sp, #12
 80173be:	af00      	add	r7, sp, #0
 80173c0:	6078      	str	r0, [r7, #4]
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	4618      	mov	r0, r3
 80173c6:	370c      	adds	r7, #12
 80173c8:	46bd      	mov	sp, r7
 80173ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ce:	4770      	bx	lr

080173d0 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 80173d0:	b480      	push	{r7}
 80173d2:	b083      	sub	sp, #12
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
 80173d8:	460b      	mov	r3, r1
 80173da:	70fb      	strb	r3, [r7, #3]
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	4618      	mov	r0, r3
 80173e0:	370c      	adds	r7, #12
 80173e2:	46bd      	mov	sp, r7
 80173e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e8:	4770      	bx	lr

080173ea <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 80173ea:	b480      	push	{r7}
 80173ec:	b083      	sub	sp, #12
 80173ee:	af00      	add	r7, sp, #0
 80173f0:	6078      	str	r0, [r7, #4]
 80173f2:	6039      	str	r1, [r7, #0]
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	4618      	mov	r0, r3
 80173f8:	370c      	adds	r7, #12
 80173fa:	46bd      	mov	sp, r7
 80173fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017400:	4770      	bx	lr

08017402 <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 8017402:	b480      	push	{r7}
 8017404:	b083      	sub	sp, #12
 8017406:	af00      	add	r7, sp, #0
 8017408:	6078      	str	r0, [r7, #4]
 801740a:	6039      	str	r1, [r7, #0]
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	4618      	mov	r0, r3
 8017410:	370c      	adds	r7, #12
 8017412:	46bd      	mov	sp, r7
 8017414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017418:	4770      	bx	lr

0801741a <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801741a:	b480      	push	{r7}
 801741c:	b083      	sub	sp, #12
 801741e:	af00      	add	r7, sp, #0
 8017420:	6078      	str	r0, [r7, #4]
 8017422:	6039      	str	r1, [r7, #0]
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	4618      	mov	r0, r3
 8017428:	370c      	adds	r7, #12
 801742a:	46bd      	mov	sp, r7
 801742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017430:	4770      	bx	lr

08017432 <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 8017432:	b480      	push	{r7}
 8017434:	b083      	sub	sp, #12
 8017436:	af00      	add	r7, sp, #0
 8017438:	6078      	str	r0, [r7, #4]
 801743a:	6039      	str	r1, [r7, #0]
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	4618      	mov	r0, r3
 8017440:	370c      	adds	r7, #12
 8017442:	46bd      	mov	sp, r7
 8017444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017448:	4770      	bx	lr

0801744a <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 801744a:	b480      	push	{r7}
 801744c:	b085      	sub	sp, #20
 801744e:	af00      	add	r7, sp, #0
 8017450:	60f8      	str	r0, [r7, #12]
 8017452:	1d3b      	adds	r3, r7, #4
 8017454:	e883 0006 	stmia.w	r3, {r1, r2}
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	4618      	mov	r0, r3
 801745c:	3714      	adds	r7, #20
 801745e:	46bd      	mov	sp, r7
 8017460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017464:	4770      	bx	lr

08017466 <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 8017466:	b480      	push	{r7}
 8017468:	b085      	sub	sp, #20
 801746a:	af00      	add	r7, sp, #0
 801746c:	60f8      	str	r0, [r7, #12]
 801746e:	1d3b      	adds	r3, r7, #4
 8017470:	e883 0006 	stmia.w	r3, {r1, r2}
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	4618      	mov	r0, r3
 8017478:	3714      	adds	r7, #20
 801747a:	46bd      	mov	sp, r7
 801747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017480:	4770      	bx	lr

08017482 <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 8017482:	b480      	push	{r7}
 8017484:	b085      	sub	sp, #20
 8017486:	af00      	add	r7, sp, #0
 8017488:	60f8      	str	r0, [r7, #12]
 801748a:	ed87 0b00 	vstr	d0, [r7]
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	4618      	mov	r0, r3
 8017492:	3714      	adds	r7, #20
 8017494:	46bd      	mov	sp, r7
 8017496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801749a:	4770      	bx	lr

0801749c <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 801749c:	b480      	push	{r7}
 801749e:	b083      	sub	sp, #12
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
 80174a4:	6039      	str	r1, [r7, #0]
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	4618      	mov	r0, r3
 80174aa:	370c      	adds	r7, #12
 80174ac:	46bd      	mov	sp, r7
 80174ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b2:	4770      	bx	lr

080174b4 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 80174b4:	b480      	push	{r7}
 80174b6:	b083      	sub	sp, #12
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
 80174bc:	6039      	str	r1, [r7, #0]
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	4618      	mov	r0, r3
 80174c2:	370c      	adds	r7, #12
 80174c4:	46bd      	mov	sp, r7
 80174c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ca:	4770      	bx	lr

080174cc <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 80174cc:	b480      	push	{r7}
 80174ce:	b083      	sub	sp, #12
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
 80174d4:	6039      	str	r1, [r7, #0]
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	4618      	mov	r0, r3
 80174da:	370c      	adds	r7, #12
 80174dc:	46bd      	mov	sp, r7
 80174de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e2:	4770      	bx	lr

080174e4 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 80174e4:	b480      	push	{r7}
 80174e6:	b083      	sub	sp, #12
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
 80174ec:	6039      	str	r1, [r7, #0]
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	4618      	mov	r0, r3
 80174f2:	370c      	adds	r7, #12
 80174f4:	46bd      	mov	sp, r7
 80174f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174fa:	4770      	bx	lr

080174fc <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 80174fc:	b480      	push	{r7}
 80174fe:	b083      	sub	sp, #12
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
 8017504:	6039      	str	r1, [r7, #0]
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	4618      	mov	r0, r3
 801750a:	370c      	adds	r7, #12
 801750c:	46bd      	mov	sp, r7
 801750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017512:	4770      	bx	lr

08017514 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 8017514:	b480      	push	{r7}
 8017516:	b083      	sub	sp, #12
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
 801751c:	4a04      	ldr	r2, [pc, #16]	; (8017530 <_ZN16MockExpectedCallC1Ev+0x1c>)
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	601a      	str	r2, [r3, #0]
{
}
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	4618      	mov	r0, r3
 8017526:	370c      	adds	r7, #12
 8017528:	46bd      	mov	sp, r7
 801752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801752e:	4770      	bx	lr
 8017530:	08024d94 	.word	0x08024d94

08017534 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 8017534:	b480      	push	{r7}
 8017536:	b083      	sub	sp, #12
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
 801753c:	4a04      	ldr	r2, [pc, #16]	; (8017550 <_ZN16MockExpectedCallD1Ev+0x1c>)
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	601a      	str	r2, [r3, #0]
{
}
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	4618      	mov	r0, r3
 8017546:	370c      	adds	r7, #12
 8017548:	46bd      	mov	sp, r7
 801754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801754e:	4770      	bx	lr
 8017550:	08024d94 	.word	0x08024d94

08017554 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b082      	sub	sp, #8
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
 801755c:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 801755e:	683b      	ldr	r3, [r7, #0]
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	3358      	adds	r3, #88	; 0x58
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	687a      	ldr	r2, [r7, #4]
 8017568:	6839      	ldr	r1, [r7, #0]
 801756a:	4610      	mov	r0, r2
 801756c:	4798      	blx	r3
}
 801756e:	6878      	ldr	r0, [r7, #4]
 8017570:	3708      	adds	r7, #8
 8017572:	46bd      	mov	sp, r7
 8017574:	bd80      	pop	{r7, pc}

08017576 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 8017576:	b580      	push	{r7, lr}
 8017578:	b082      	sub	sp, #8
 801757a:	af00      	add	r7, sp, #0
 801757c:	6078      	str	r0, [r7, #4]
 801757e:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	3304      	adds	r3, #4
 8017584:	6839      	ldr	r1, [r7, #0]
 8017586:	4618      	mov	r0, r3
 8017588:	f7f2 fbcb 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
}
 801758c:	bf00      	nop
 801758e:	3708      	adds	r7, #8
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}

08017594 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 8017594:	b580      	push	{r7, lr}
 8017596:	b082      	sub	sp, #8
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
 801759c:	6039      	str	r1, [r7, #0]
    return functionName_;
 801759e:	683b      	ldr	r3, [r7, #0]
 80175a0:	3304      	adds	r3, #4
 80175a2:	4619      	mov	r1, r3
 80175a4:	6878      	ldr	r0, [r7, #4]
 80175a6:	f7f2 fba4 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
}
 80175aa:	6878      	ldr	r0, [r7, #4]
 80175ac:	3708      	adds	r7, #8
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd80      	pop	{r7, pc}
	...

080175b4 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 80175b4:	b590      	push	{r4, r7, lr}
 80175b6:	b085      	sub	sp, #20
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	6078      	str	r0, [r7, #4]
 80175bc:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	4618      	mov	r0, r3
 80175c2:	f7ff ffa7 	bl	8017514 <_ZN16MockExpectedCallC1Ev>
 80175c6:	4a2c      	ldr	r2, [pc, #176]	; (8017678 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	601a      	str	r2, [r3, #0]
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	3304      	adds	r3, #4
 80175d0:	492a      	ldr	r1, [pc, #168]	; (801767c <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 80175d2:	4618      	mov	r0, r3
 80175d4:	f7f2 fb39 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	2200      	movs	r2, #0
 80175dc:	731a      	strb	r2, [r3, #12]
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	2200      	movs	r2, #0
 80175e2:	735a      	strb	r2, [r3, #13]
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	2200      	movs	r2, #0
 80175e8:	611a      	str	r2, [r3, #16]
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	2200      	movs	r2, #0
 80175ee:	615a      	str	r2, [r3, #20]
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	2200      	movs	r2, #0
 80175f4:	761a      	strb	r2, [r3, #24]
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80175fc:	f107 0308 	add.w	r3, r7, #8
 8017600:	491e      	ldr	r1, [pc, #120]	; (801767c <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8017602:	4618      	mov	r0, r3
 8017604:	f7f2 fb21 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8017608:	f107 0308 	add.w	r3, r7, #8
 801760c:	4619      	mov	r1, r3
 801760e:	4620      	mov	r0, r4
 8017610:	f003 f840 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
 8017614:	f107 0308 	add.w	r3, r7, #8
 8017618:	4618      	mov	r0, r3
 801761a:	f7f2 fece 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	2200      	movs	r2, #0
 8017622:	661a      	str	r2, [r3, #96]	; 0x60
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	2200      	movs	r2, #0
 8017628:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	2201      	movs	r2, #1
 8017630:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	2200      	movs	r2, #0
 8017638:	669a      	str	r2, [r3, #104]	; 0x68
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	683a      	ldr	r2, [r7, #0]
 801763e:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 8017640:	2246      	movs	r2, #70	; 0x46
 8017642:	490f      	ldr	r1, [pc, #60]	; (8017680 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8017644:	2004      	movs	r0, #4
 8017646:	f7ef ff3d 	bl	80074c4 <_ZnwjPKci>
 801764a:	4604      	mov	r4, r0
 801764c:	4620      	mov	r0, r4
 801764e:	f004 ff34 	bl	801c4ba <_ZN18MockNamedValueListC1Ev>
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 8017656:	2247      	movs	r2, #71	; 0x47
 8017658:	4909      	ldr	r1, [pc, #36]	; (8017680 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801765a:	2004      	movs	r0, #4
 801765c:	f7ef ff32 	bl	80074c4 <_ZnwjPKci>
 8017660:	4604      	mov	r4, r0
 8017662:	4620      	mov	r0, r4
 8017664:	f004 ff29 	bl	801c4ba <_ZN18MockNamedValueListC1Ev>
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	621c      	str	r4, [r3, #32]
}
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	4618      	mov	r0, r3
 8017670:	3714      	adds	r7, #20
 8017672:	46bd      	mov	sp, r7
 8017674:	bd90      	pop	{r4, r7, pc}
 8017676:	bf00      	nop
 8017678:	08024bd8 	.word	0x08024bd8
 801767c:	0802293c 	.word	0x0802293c
 8017680:	08022940 	.word	0x08022940

08017684 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8017684:	b580      	push	{r7, lr}
 8017686:	b082      	sub	sp, #8
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
 801768c:	4a17      	ldr	r2, [pc, #92]	; (80176ec <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	69db      	ldr	r3, [r3, #28]
 8017696:	4618      	mov	r0, r3
 8017698:	f004 ff1d 	bl	801c4d6 <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	69db      	ldr	r3, [r3, #28]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d003      	beq.n	80176ac <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 80176a4:	2104      	movs	r1, #4
 80176a6:	4618      	mov	r0, r3
 80176a8:	f7ef ff20 	bl	80074ec <_ZdlPvj>
    outputParameters_->clear();
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	6a1b      	ldr	r3, [r3, #32]
 80176b0:	4618      	mov	r0, r3
 80176b2:	f004 ff10 	bl	801c4d6 <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	6a1b      	ldr	r3, [r3, #32]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d003      	beq.n	80176c6 <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 80176be:	2104      	movs	r1, #4
 80176c0:	4618      	mov	r0, r3
 80176c2:	f7ef ff13 	bl	80074ec <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	3328      	adds	r3, #40	; 0x28
 80176ca:	4618      	mov	r0, r3
 80176cc:	f003 f80c 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	3304      	adds	r3, #4
 80176d4:	4618      	mov	r0, r3
 80176d6:	f7f2 fe70 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	4618      	mov	r0, r3
 80176de:	f7ff ff29 	bl	8017534 <_ZN16MockExpectedCallD1Ev>
}
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	4618      	mov	r0, r3
 80176e6:	3708      	adds	r7, #8
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}
 80176ec:	08024bd8 	.word	0x08024bd8

080176f0 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b082      	sub	sp, #8
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
}
 80176f8:	6878      	ldr	r0, [r7, #4]
 80176fa:	f7ff ffc3 	bl	8017684 <_ZN23MockCheckedExpectedCallD1Ev>
 80176fe:	2170      	movs	r1, #112	; 0x70
 8017700:	6878      	ldr	r0, [r7, #4]
 8017702:	f7ef fef3 	bl	80074ec <_ZdlPvj>
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	4618      	mov	r0, r3
 801770a:	3708      	adds	r7, #8
 801770c:	46bd      	mov	sp, r7
 801770e:	bd80      	pop	{r7, pc}

08017710 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b082      	sub	sp, #8
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
 8017718:	6039      	str	r1, [r7, #0]
    setName(name);
 801771a:	6839      	ldr	r1, [r7, #0]
 801771c:	6878      	ldr	r0, [r7, #4]
 801771e:	f7ff ff2a 	bl	8017576 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 8017722:	687b      	ldr	r3, [r7, #4]
}
 8017724:	4618      	mov	r0, r3
 8017726:	3708      	adds	r7, #8
 8017728:	46bd      	mov	sp, r7
 801772a:	bd80      	pop	{r7, pc}

0801772c <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801772c:	b590      	push	{r4, r7, lr}
 801772e:	b087      	sub	sp, #28
 8017730:	af00      	add	r7, sp, #0
 8017732:	60f8      	str	r0, [r7, #12]
 8017734:	60b9      	str	r1, [r7, #8]
 8017736:	4613      	mov	r3, r2
 8017738:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801773a:	225a      	movs	r2, #90	; 0x5a
 801773c:	490e      	ldr	r1, [pc, #56]	; (8017778 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801773e:	2038      	movs	r0, #56	; 0x38
 8017740:	f7ef fec0 	bl	80074c4 <_ZnwjPKci>
 8017744:	4604      	mov	r4, r0
 8017746:	68b9      	ldr	r1, [r7, #8]
 8017748:	4620      	mov	r0, r4
 801774a:	f001 f851 	bl	80187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801774e:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	69db      	ldr	r3, [r3, #28]
 8017754:	6979      	ldr	r1, [r7, #20]
 8017756:	4618      	mov	r0, r3
 8017758:	f004 fee0 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801775c:	697b      	ldr	r3, [r7, #20]
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	3308      	adds	r3, #8
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	79fa      	ldrb	r2, [r7, #7]
 8017766:	4611      	mov	r1, r2
 8017768:	6978      	ldr	r0, [r7, #20]
 801776a:	4798      	blx	r3
    return *this;
 801776c:	68fb      	ldr	r3, [r7, #12]
}
 801776e:	4618      	mov	r0, r3
 8017770:	371c      	adds	r7, #28
 8017772:	46bd      	mov	sp, r7
 8017774:	bd90      	pop	{r4, r7, pc}
 8017776:	bf00      	nop
 8017778:	08022940 	.word	0x08022940

0801777c <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801777c:	b590      	push	{r4, r7, lr}
 801777e:	b087      	sub	sp, #28
 8017780:	af00      	add	r7, sp, #0
 8017782:	60f8      	str	r0, [r7, #12]
 8017784:	60b9      	str	r1, [r7, #8]
 8017786:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017788:	2262      	movs	r2, #98	; 0x62
 801778a:	490e      	ldr	r1, [pc, #56]	; (80177c4 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801778c:	2038      	movs	r0, #56	; 0x38
 801778e:	f7ef fe99 	bl	80074c4 <_ZnwjPKci>
 8017792:	4604      	mov	r4, r0
 8017794:	68b9      	ldr	r1, [r7, #8]
 8017796:	4620      	mov	r0, r4
 8017798:	f001 f82a 	bl	80187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801779c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	69db      	ldr	r3, [r3, #28]
 80177a2:	6979      	ldr	r1, [r7, #20]
 80177a4:	4618      	mov	r0, r3
 80177a6:	f004 feb9 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80177aa:	697b      	ldr	r3, [r7, #20]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	3310      	adds	r3, #16
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	6879      	ldr	r1, [r7, #4]
 80177b4:	6978      	ldr	r0, [r7, #20]
 80177b6:	4798      	blx	r3
    return *this;
 80177b8:	68fb      	ldr	r3, [r7, #12]
}
 80177ba:	4618      	mov	r0, r3
 80177bc:	371c      	adds	r7, #28
 80177be:	46bd      	mov	sp, r7
 80177c0:	bd90      	pop	{r4, r7, pc}
 80177c2:	bf00      	nop
 80177c4:	08022940 	.word	0x08022940

080177c8 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 80177c8:	b590      	push	{r4, r7, lr}
 80177ca:	b087      	sub	sp, #28
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	60f8      	str	r0, [r7, #12]
 80177d0:	60b9      	str	r1, [r7, #8]
 80177d2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80177d4:	226a      	movs	r2, #106	; 0x6a
 80177d6:	490e      	ldr	r1, [pc, #56]	; (8017810 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 80177d8:	2038      	movs	r0, #56	; 0x38
 80177da:	f7ef fe73 	bl	80074c4 <_ZnwjPKci>
 80177de:	4604      	mov	r4, r0
 80177e0:	68b9      	ldr	r1, [r7, #8]
 80177e2:	4620      	mov	r0, r4
 80177e4:	f001 f804 	bl	80187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80177e8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	69db      	ldr	r3, [r3, #28]
 80177ee:	6979      	ldr	r1, [r7, #20]
 80177f0:	4618      	mov	r0, r3
 80177f2:	f004 fe93 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80177f6:	697b      	ldr	r3, [r7, #20]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	330c      	adds	r3, #12
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	6879      	ldr	r1, [r7, #4]
 8017800:	6978      	ldr	r0, [r7, #20]
 8017802:	4798      	blx	r3
    return *this;
 8017804:	68fb      	ldr	r3, [r7, #12]
}
 8017806:	4618      	mov	r0, r3
 8017808:	371c      	adds	r7, #28
 801780a:	46bd      	mov	sp, r7
 801780c:	bd90      	pop	{r4, r7, pc}
 801780e:	bf00      	nop
 8017810:	08022940 	.word	0x08022940

08017814 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8017814:	b590      	push	{r4, r7, lr}
 8017816:	b087      	sub	sp, #28
 8017818:	af00      	add	r7, sp, #0
 801781a:	60f8      	str	r0, [r7, #12]
 801781c:	60b9      	str	r1, [r7, #8]
 801781e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017820:	2272      	movs	r2, #114	; 0x72
 8017822:	490e      	ldr	r1, [pc, #56]	; (801785c <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 8017824:	2038      	movs	r0, #56	; 0x38
 8017826:	f7ef fe4d 	bl	80074c4 <_ZnwjPKci>
 801782a:	4604      	mov	r4, r0
 801782c:	68b9      	ldr	r1, [r7, #8]
 801782e:	4620      	mov	r0, r4
 8017830:	f000 ffde 	bl	80187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017834:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	69db      	ldr	r3, [r3, #28]
 801783a:	6979      	ldr	r1, [r7, #20]
 801783c:	4618      	mov	r0, r3
 801783e:	f004 fe6d 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017842:	697b      	ldr	r3, [r7, #20]
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	3314      	adds	r3, #20
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	6879      	ldr	r1, [r7, #4]
 801784c:	6978      	ldr	r0, [r7, #20]
 801784e:	4798      	blx	r3
    return *this;
 8017850:	68fb      	ldr	r3, [r7, #12]
}
 8017852:	4618      	mov	r0, r3
 8017854:	371c      	adds	r7, #28
 8017856:	46bd      	mov	sp, r7
 8017858:	bd90      	pop	{r4, r7, pc}
 801785a:	bf00      	nop
 801785c:	08022940 	.word	0x08022940

08017860 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8017860:	b590      	push	{r4, r7, lr}
 8017862:	b087      	sub	sp, #28
 8017864:	af00      	add	r7, sp, #0
 8017866:	60f8      	str	r0, [r7, #12]
 8017868:	60b9      	str	r1, [r7, #8]
 801786a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801786c:	227a      	movs	r2, #122	; 0x7a
 801786e:	490e      	ldr	r1, [pc, #56]	; (80178a8 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 8017870:	2038      	movs	r0, #56	; 0x38
 8017872:	f7ef fe27 	bl	80074c4 <_ZnwjPKci>
 8017876:	4604      	mov	r4, r0
 8017878:	68b9      	ldr	r1, [r7, #8]
 801787a:	4620      	mov	r0, r4
 801787c:	f000 ffb8 	bl	80187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017880:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	69db      	ldr	r3, [r3, #28]
 8017886:	6979      	ldr	r1, [r7, #20]
 8017888:	4618      	mov	r0, r3
 801788a:	f004 fe47 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801788e:	697b      	ldr	r3, [r7, #20]
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	3318      	adds	r3, #24
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	6879      	ldr	r1, [r7, #4]
 8017898:	6978      	ldr	r0, [r7, #20]
 801789a:	4798      	blx	r3
    return *this;
 801789c:	68fb      	ldr	r3, [r7, #12]
}
 801789e:	4618      	mov	r0, r3
 80178a0:	371c      	adds	r7, #28
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd90      	pop	{r4, r7, pc}
 80178a6:	bf00      	nop
 80178a8:	08022940 	.word	0x08022940

080178ac <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 80178ac:	b5b0      	push	{r4, r5, r7, lr}
 80178ae:	b086      	sub	sp, #24
 80178b0:	af02      	add	r7, sp, #8
 80178b2:	60f8      	str	r0, [r7, #12]
 80178b4:	60b9      	str	r1, [r7, #8]
 80178b6:	4639      	mov	r1, r7
 80178b8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80178bc:	f7f9 fda8 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 80178c0:	4604      	mov	r4, r0
 80178c2:	6823      	ldr	r3, [r4, #0]
 80178c4:	3368      	adds	r3, #104	; 0x68
 80178c6:	681d      	ldr	r5, [r3, #0]
 80178c8:	f7f9 fdb2 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80178cc:	4603      	mov	r3, r0
 80178ce:	9300      	str	r3, [sp, #0]
 80178d0:	2396      	movs	r3, #150	; 0x96
 80178d2:	4a04      	ldr	r2, [pc, #16]	; (80178e4 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 80178d4:	4904      	ldr	r1, [pc, #16]	; (80178e8 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 80178d6:	4620      	mov	r0, r4
 80178d8:	47a8      	blx	r5
    return *this;
 80178da:	68fb      	ldr	r3, [r7, #12]
}
 80178dc:	4618      	mov	r0, r3
 80178de:	3710      	adds	r7, #16
 80178e0:	46bd      	mov	sp, r7
 80178e2:	bdb0      	pop	{r4, r5, r7, pc}
 80178e4:	08022940 	.word	0x08022940
 80178e8:	0802295c 	.word	0x0802295c

080178ec <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 80178ec:	b5b0      	push	{r4, r5, r7, lr}
 80178ee:	b086      	sub	sp, #24
 80178f0:	af02      	add	r7, sp, #8
 80178f2:	60f8      	str	r0, [r7, #12]
 80178f4:	60b9      	str	r1, [r7, #8]
 80178f6:	4639      	mov	r1, r7
 80178f8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80178fc:	f7f9 fd88 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8017900:	4604      	mov	r4, r0
 8017902:	6823      	ldr	r3, [r4, #0]
 8017904:	3368      	adds	r3, #104	; 0x68
 8017906:	681d      	ldr	r5, [r3, #0]
 8017908:	f7f9 fd92 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801790c:	4603      	mov	r3, r0
 801790e:	9300      	str	r3, [sp, #0]
 8017910:	239c      	movs	r3, #156	; 0x9c
 8017912:	4a04      	ldr	r2, [pc, #16]	; (8017924 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 8017914:	4904      	ldr	r1, [pc, #16]	; (8017928 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8017916:	4620      	mov	r0, r4
 8017918:	47a8      	blx	r5
    return *this;
 801791a:	68fb      	ldr	r3, [r7, #12]
}
 801791c:	4618      	mov	r0, r3
 801791e:	3710      	adds	r7, #16
 8017920:	46bd      	mov	sp, r7
 8017922:	bdb0      	pop	{r4, r5, r7, pc}
 8017924:	08022940 	.word	0x08022940
 8017928:	0802297c 	.word	0x0802297c

0801792c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801792c:	b590      	push	{r4, r7, lr}
 801792e:	b087      	sub	sp, #28
 8017930:	af00      	add	r7, sp, #0
 8017932:	60f8      	str	r0, [r7, #12]
 8017934:	60b9      	str	r1, [r7, #8]
 8017936:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801793a:	22a4      	movs	r2, #164	; 0xa4
 801793c:	490e      	ldr	r1, [pc, #56]	; (8017978 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801793e:	2038      	movs	r0, #56	; 0x38
 8017940:	f7ef fdc0 	bl	80074c4 <_ZnwjPKci>
 8017944:	4604      	mov	r4, r0
 8017946:	68b9      	ldr	r1, [r7, #8]
 8017948:	4620      	mov	r0, r4
 801794a:	f000 ff51 	bl	80187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801794e:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	69db      	ldr	r3, [r3, #28]
 8017954:	6979      	ldr	r1, [r7, #20]
 8017956:	4618      	mov	r0, r3
 8017958:	f004 fde0 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801795c:	697b      	ldr	r3, [r7, #20]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	3324      	adds	r3, #36	; 0x24
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	ed97 0b00 	vldr	d0, [r7]
 8017968:	6978      	ldr	r0, [r7, #20]
 801796a:	4798      	blx	r3
    return *this;
 801796c:	68fb      	ldr	r3, [r7, #12]
}
 801796e:	4618      	mov	r0, r3
 8017970:	371c      	adds	r7, #28
 8017972:	46bd      	mov	sp, r7
 8017974:	bd90      	pop	{r4, r7, pc}
 8017976:	bf00      	nop
 8017978:	08022940 	.word	0x08022940

0801797c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801797c:	b590      	push	{r4, r7, lr}
 801797e:	b089      	sub	sp, #36	; 0x24
 8017980:	af00      	add	r7, sp, #0
 8017982:	6178      	str	r0, [r7, #20]
 8017984:	6139      	str	r1, [r7, #16]
 8017986:	ed87 0b02 	vstr	d0, [r7, #8]
 801798a:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801798e:	22ac      	movs	r2, #172	; 0xac
 8017990:	490f      	ldr	r1, [pc, #60]	; (80179d0 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 8017992:	2038      	movs	r0, #56	; 0x38
 8017994:	f7ef fd96 	bl	80074c4 <_ZnwjPKci>
 8017998:	4604      	mov	r4, r0
 801799a:	6939      	ldr	r1, [r7, #16]
 801799c:	4620      	mov	r0, r4
 801799e:	f000 ff27 	bl	80187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80179a2:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 80179a4:	697b      	ldr	r3, [r7, #20]
 80179a6:	69db      	ldr	r3, [r3, #28]
 80179a8:	69f9      	ldr	r1, [r7, #28]
 80179aa:	4618      	mov	r0, r3
 80179ac:	f004 fdb6 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 80179b0:	69fb      	ldr	r3, [r7, #28]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	3328      	adds	r3, #40	; 0x28
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	ed97 1b00 	vldr	d1, [r7]
 80179bc:	ed97 0b02 	vldr	d0, [r7, #8]
 80179c0:	69f8      	ldr	r0, [r7, #28]
 80179c2:	4798      	blx	r3
    return *this;
 80179c4:	697b      	ldr	r3, [r7, #20]
}
 80179c6:	4618      	mov	r0, r3
 80179c8:	3724      	adds	r7, #36	; 0x24
 80179ca:	46bd      	mov	sp, r7
 80179cc:	bd90      	pop	{r4, r7, pc}
 80179ce:	bf00      	nop
 80179d0:	08022940 	.word	0x08022940

080179d4 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 80179d4:	b590      	push	{r4, r7, lr}
 80179d6:	b087      	sub	sp, #28
 80179d8:	af00      	add	r7, sp, #0
 80179da:	60f8      	str	r0, [r7, #12]
 80179dc:	60b9      	str	r1, [r7, #8]
 80179de:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80179e0:	22b4      	movs	r2, #180	; 0xb4
 80179e2:	490e      	ldr	r1, [pc, #56]	; (8017a1c <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 80179e4:	2038      	movs	r0, #56	; 0x38
 80179e6:	f7ef fd6d 	bl	80074c4 <_ZnwjPKci>
 80179ea:	4604      	mov	r4, r0
 80179ec:	68b9      	ldr	r1, [r7, #8]
 80179ee:	4620      	mov	r0, r4
 80179f0:	f000 fefe 	bl	80187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80179f4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	69db      	ldr	r3, [r3, #28]
 80179fa:	6979      	ldr	r1, [r7, #20]
 80179fc:	4618      	mov	r0, r3
 80179fe:	f004 fd8d 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017a02:	697b      	ldr	r3, [r7, #20]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	3338      	adds	r3, #56	; 0x38
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	6879      	ldr	r1, [r7, #4]
 8017a0c:	6978      	ldr	r0, [r7, #20]
 8017a0e:	4798      	blx	r3
    return *this;
 8017a10:	68fb      	ldr	r3, [r7, #12]
}
 8017a12:	4618      	mov	r0, r3
 8017a14:	371c      	adds	r7, #28
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bd90      	pop	{r4, r7, pc}
 8017a1a:	bf00      	nop
 8017a1c:	08022940 	.word	0x08022940

08017a20 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 8017a20:	b590      	push	{r4, r7, lr}
 8017a22:	b087      	sub	sp, #28
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	60f8      	str	r0, [r7, #12]
 8017a28:	60b9      	str	r1, [r7, #8]
 8017a2a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017a2c:	22bc      	movs	r2, #188	; 0xbc
 8017a2e:	490e      	ldr	r1, [pc, #56]	; (8017a68 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 8017a30:	2038      	movs	r0, #56	; 0x38
 8017a32:	f7ef fd47 	bl	80074c4 <_ZnwjPKci>
 8017a36:	4604      	mov	r4, r0
 8017a38:	68b9      	ldr	r1, [r7, #8]
 8017a3a:	4620      	mov	r0, r4
 8017a3c:	f000 fed8 	bl	80187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017a40:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	69db      	ldr	r3, [r3, #28]
 8017a46:	6979      	ldr	r1, [r7, #20]
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f004 fd67 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017a4e:	697b      	ldr	r3, [r7, #20]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	332c      	adds	r3, #44	; 0x2c
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	6879      	ldr	r1, [r7, #4]
 8017a58:	6978      	ldr	r0, [r7, #20]
 8017a5a:	4798      	blx	r3
    return *this;
 8017a5c:	68fb      	ldr	r3, [r7, #12]
}
 8017a5e:	4618      	mov	r0, r3
 8017a60:	371c      	adds	r7, #28
 8017a62:	46bd      	mov	sp, r7
 8017a64:	bd90      	pop	{r4, r7, pc}
 8017a66:	bf00      	nop
 8017a68:	08022940 	.word	0x08022940

08017a6c <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8017a6c:	b590      	push	{r4, r7, lr}
 8017a6e:	b087      	sub	sp, #28
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	60f8      	str	r0, [r7, #12]
 8017a74:	60b9      	str	r1, [r7, #8]
 8017a76:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017a78:	22c4      	movs	r2, #196	; 0xc4
 8017a7a:	490e      	ldr	r1, [pc, #56]	; (8017ab4 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 8017a7c:	2038      	movs	r0, #56	; 0x38
 8017a7e:	f7ef fd21 	bl	80074c4 <_ZnwjPKci>
 8017a82:	4604      	mov	r4, r0
 8017a84:	68b9      	ldr	r1, [r7, #8]
 8017a86:	4620      	mov	r0, r4
 8017a88:	f000 feb2 	bl	80187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017a8c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	69db      	ldr	r3, [r3, #28]
 8017a92:	6979      	ldr	r1, [r7, #20]
 8017a94:	4618      	mov	r0, r3
 8017a96:	f004 fd41 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017a9a:	697b      	ldr	r3, [r7, #20]
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	3330      	adds	r3, #48	; 0x30
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	6879      	ldr	r1, [r7, #4]
 8017aa4:	6978      	ldr	r0, [r7, #20]
 8017aa6:	4798      	blx	r3
    return *this;
 8017aa8:	68fb      	ldr	r3, [r7, #12]
}
 8017aaa:	4618      	mov	r0, r3
 8017aac:	371c      	adds	r7, #28
 8017aae:	46bd      	mov	sp, r7
 8017ab0:	bd90      	pop	{r4, r7, pc}
 8017ab2:	bf00      	nop
 8017ab4:	08022940 	.word	0x08022940

08017ab8 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8017ab8:	b590      	push	{r4, r7, lr}
 8017aba:	b087      	sub	sp, #28
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	60f8      	str	r0, [r7, #12]
 8017ac0:	60b9      	str	r1, [r7, #8]
 8017ac2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017ac4:	22cc      	movs	r2, #204	; 0xcc
 8017ac6:	490e      	ldr	r1, [pc, #56]	; (8017b00 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 8017ac8:	2038      	movs	r0, #56	; 0x38
 8017aca:	f7ef fcfb 	bl	80074c4 <_ZnwjPKci>
 8017ace:	4604      	mov	r4, r0
 8017ad0:	68b9      	ldr	r1, [r7, #8]
 8017ad2:	4620      	mov	r0, r4
 8017ad4:	f000 fe8c 	bl	80187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017ad8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	69db      	ldr	r3, [r3, #28]
 8017ade:	6979      	ldr	r1, [r7, #20]
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f004 fd1b 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017ae6:	697b      	ldr	r3, [r7, #20]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	3334      	adds	r3, #52	; 0x34
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	6879      	ldr	r1, [r7, #4]
 8017af0:	6978      	ldr	r0, [r7, #20]
 8017af2:	4798      	blx	r3
    return *this;
 8017af4:	68fb      	ldr	r3, [r7, #12]
}
 8017af6:	4618      	mov	r0, r3
 8017af8:	371c      	adds	r7, #28
 8017afa:	46bd      	mov	sp, r7
 8017afc:	bd90      	pop	{r4, r7, pc}
 8017afe:	bf00      	nop
 8017b00:	08022940 	.word	0x08022940

08017b04 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8017b04:	b590      	push	{r4, r7, lr}
 8017b06:	b087      	sub	sp, #28
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	60f8      	str	r0, [r7, #12]
 8017b0c:	60b9      	str	r1, [r7, #8]
 8017b0e:	607a      	str	r2, [r7, #4]
 8017b10:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017b12:	22d4      	movs	r2, #212	; 0xd4
 8017b14:	490e      	ldr	r1, [pc, #56]	; (8017b50 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 8017b16:	2038      	movs	r0, #56	; 0x38
 8017b18:	f7ef fcd4 	bl	80074c4 <_ZnwjPKci>
 8017b1c:	4604      	mov	r4, r0
 8017b1e:	68b9      	ldr	r1, [r7, #8]
 8017b20:	4620      	mov	r0, r4
 8017b22:	f000 fe65 	bl	80187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017b26:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	69db      	ldr	r3, [r3, #28]
 8017b2c:	6979      	ldr	r1, [r7, #20]
 8017b2e:	4618      	mov	r0, r3
 8017b30:	f004 fcf4 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 8017b34:	697b      	ldr	r3, [r7, #20]
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	333c      	adds	r3, #60	; 0x3c
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	683a      	ldr	r2, [r7, #0]
 8017b3e:	6879      	ldr	r1, [r7, #4]
 8017b40:	6978      	ldr	r0, [r7, #20]
 8017b42:	4798      	blx	r3
    return *this;
 8017b44:	68fb      	ldr	r3, [r7, #12]
}
 8017b46:	4618      	mov	r0, r3
 8017b48:	371c      	adds	r7, #28
 8017b4a:	46bd      	mov	sp, r7
 8017b4c:	bd90      	pop	{r4, r7, pc}
 8017b4e:	bf00      	nop
 8017b50:	08022940 	.word	0x08022940

08017b54 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8017b54:	b590      	push	{r4, r7, lr}
 8017b56:	b087      	sub	sp, #28
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	60f8      	str	r0, [r7, #12]
 8017b5c:	60b9      	str	r1, [r7, #8]
 8017b5e:	607a      	str	r2, [r7, #4]
 8017b60:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017b62:	22dc      	movs	r2, #220	; 0xdc
 8017b64:	490e      	ldr	r1, [pc, #56]	; (8017ba0 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 8017b66:	2038      	movs	r0, #56	; 0x38
 8017b68:	f7ef fcac 	bl	80074c4 <_ZnwjPKci>
 8017b6c:	4604      	mov	r4, r0
 8017b6e:	6879      	ldr	r1, [r7, #4]
 8017b70:	4620      	mov	r0, r4
 8017b72:	f000 fe3d 	bl	80187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017b76:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	69db      	ldr	r3, [r3, #28]
 8017b7c:	6979      	ldr	r1, [r7, #20]
 8017b7e:	4618      	mov	r0, r3
 8017b80:	f004 fccc 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 8017b84:	697b      	ldr	r3, [r7, #20]
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	3340      	adds	r3, #64	; 0x40
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	683a      	ldr	r2, [r7, #0]
 8017b8e:	68b9      	ldr	r1, [r7, #8]
 8017b90:	6978      	ldr	r0, [r7, #20]
 8017b92:	4798      	blx	r3
    return *this;
 8017b94:	68fb      	ldr	r3, [r7, #12]
}
 8017b96:	4618      	mov	r0, r3
 8017b98:	371c      	adds	r7, #28
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	bd90      	pop	{r4, r7, pc}
 8017b9e:	bf00      	nop
 8017ba0:	08022940 	.word	0x08022940

08017ba4 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 8017ba4:	b590      	push	{r4, r7, lr}
 8017ba6:	b087      	sub	sp, #28
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	60f8      	str	r0, [r7, #12]
 8017bac:	60b9      	str	r1, [r7, #8]
 8017bae:	607a      	str	r2, [r7, #4]
 8017bb0:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017bb2:	22e4      	movs	r2, #228	; 0xe4
 8017bb4:	4911      	ldr	r1, [pc, #68]	; (8017bfc <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 8017bb6:	2038      	movs	r0, #56	; 0x38
 8017bb8:	f7ef fc84 	bl	80074c4 <_ZnwjPKci>
 8017bbc:	4604      	mov	r4, r0
 8017bbe:	68b9      	ldr	r1, [r7, #8]
 8017bc0:	4620      	mov	r0, r4
 8017bc2:	f000 fe15 	bl	80187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017bc6:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	6a1b      	ldr	r3, [r3, #32]
 8017bcc:	6979      	ldr	r1, [r7, #20]
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f004 fca4 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017bd4:	697b      	ldr	r3, [r7, #20]
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	3330      	adds	r3, #48	; 0x30
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	6879      	ldr	r1, [r7, #4]
 8017bde:	6978      	ldr	r0, [r7, #20]
 8017be0:	4798      	blx	r3
    newParameter->setSize(size);
 8017be2:	697b      	ldr	r3, [r7, #20]
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	3348      	adds	r3, #72	; 0x48
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	6839      	ldr	r1, [r7, #0]
 8017bec:	6978      	ldr	r0, [r7, #20]
 8017bee:	4798      	blx	r3
    return *this;
 8017bf0:	68fb      	ldr	r3, [r7, #12]
}
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	371c      	adds	r7, #28
 8017bf6:	46bd      	mov	sp, r7
 8017bf8:	bd90      	pop	{r4, r7, pc}
 8017bfa:	bf00      	nop
 8017bfc:	08022940 	.word	0x08022940

08017c00 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 8017c00:	b590      	push	{r4, r7, lr}
 8017c02:	b087      	sub	sp, #28
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	60f8      	str	r0, [r7, #12]
 8017c08:	60b9      	str	r1, [r7, #8]
 8017c0a:	607a      	str	r2, [r7, #4]
 8017c0c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017c0e:	22ed      	movs	r2, #237	; 0xed
 8017c10:	490e      	ldr	r1, [pc, #56]	; (8017c4c <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 8017c12:	2038      	movs	r0, #56	; 0x38
 8017c14:	f7ef fc56 	bl	80074c4 <_ZnwjPKci>
 8017c18:	4604      	mov	r4, r0
 8017c1a:	6879      	ldr	r1, [r7, #4]
 8017c1c:	4620      	mov	r0, r4
 8017c1e:	f000 fde7 	bl	80187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017c22:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	6a1b      	ldr	r3, [r3, #32]
 8017c28:	6979      	ldr	r1, [r7, #20]
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f004 fc76 	bl	801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 8017c30:	697b      	ldr	r3, [r7, #20]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	3340      	adds	r3, #64	; 0x40
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	683a      	ldr	r2, [r7, #0]
 8017c3a:	68b9      	ldr	r1, [r7, #8]
 8017c3c:	6978      	ldr	r0, [r7, #20]
 8017c3e:	4798      	blx	r3
    return *this;
 8017c40:	68fb      	ldr	r3, [r7, #12]
}
 8017c42:	4618      	mov	r0, r3
 8017c44:	371c      	adds	r7, #28
 8017c46:	46bd      	mov	sp, r7
 8017c48:	bd90      	pop	{r4, r7, pc}
 8017c4a:	bf00      	nop
 8017c4c:	08022940 	.word	0x08022940

08017c50 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 8017c50:	b590      	push	{r4, r7, lr}
 8017c52:	b083      	sub	sp, #12
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
 8017c58:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	3318      	adds	r3, #24
 8017c60:	681c      	ldr	r4, [r3, #0]
 8017c62:	2300      	movs	r3, #0
 8017c64:	2200      	movs	r2, #0
 8017c66:	6839      	ldr	r1, [r7, #0]
 8017c68:	6878      	ldr	r0, [r7, #4]
 8017c6a:	47a0      	blx	r4
 8017c6c:	4603      	mov	r3, r0
}
 8017c6e:	4618      	mov	r0, r3
 8017c70:	370c      	adds	r7, #12
 8017c72:	46bd      	mov	sp, r7
 8017c74:	bd90      	pop	{r4, r7, pc}
	...

08017c78 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b086      	sub	sp, #24
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	60f8      	str	r0, [r7, #12]
 8017c80:	60b9      	str	r1, [r7, #8]
 8017c82:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8017c84:	68bb      	ldr	r3, [r7, #8]
 8017c86:	69db      	ldr	r3, [r3, #28]
 8017c88:	6879      	ldr	r1, [r7, #4]
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	f004 fc7c 	bl	801c588 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8017c90:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 8017c92:	697b      	ldr	r3, [r7, #20]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d008      	beq.n	8017caa <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 8017c98:	697b      	ldr	r3, [r7, #20]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	3360      	adds	r3, #96	; 0x60
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	68fa      	ldr	r2, [r7, #12]
 8017ca2:	6979      	ldr	r1, [r7, #20]
 8017ca4:	4610      	mov	r0, r2
 8017ca6:	4798      	blx	r3
 8017ca8:	e004      	b.n	8017cb4 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	4903      	ldr	r1, [pc, #12]	; (8017cbc <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f7f2 fe10 	bl	800a8d4 <_Z10StringFromPKc>
}
 8017cb4:	68f8      	ldr	r0, [r7, #12]
 8017cb6:	3718      	adds	r7, #24
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	bd80      	pop	{r7, pc}
 8017cbc:	0802293c 	.word	0x0802293c

08017cc0 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b084      	sub	sp, #16
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	6078      	str	r0, [r7, #4]
 8017cc8:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	69db      	ldr	r3, [r3, #28]
 8017cce:	6839      	ldr	r1, [r7, #0]
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	f004 fc59 	bl	801c588 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8017cd6:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	bf14      	ite	ne
 8017cde:	2301      	movne	r3, #1
 8017ce0:	2300      	moveq	r3, #0
 8017ce2:	b2db      	uxtb	r3, r3
}
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	3710      	adds	r7, #16
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	bd80      	pop	{r7, pc}

08017cec <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b084      	sub	sp, #16
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
 8017cf4:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	6a1b      	ldr	r3, [r3, #32]
 8017cfa:	6839      	ldr	r1, [r7, #0]
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	f004 fc43 	bl	801c588 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8017d02:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	bf14      	ite	ne
 8017d0a:	2301      	movne	r3, #1
 8017d0c:	2300      	moveq	r3, #0
 8017d0e:	b2db      	uxtb	r3, r3
}
 8017d10:	4618      	mov	r0, r3
 8017d12:	3710      	adds	r7, #16
 8017d14:	46bd      	mov	sp, r7
 8017d16:	bd80      	pop	{r7, pc}

08017d18 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 8017d18:	b590      	push	{r4, r7, lr}
 8017d1a:	b089      	sub	sp, #36	; 0x24
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	60f8      	str	r0, [r7, #12]
 8017d20:	60b9      	str	r1, [r7, #8]
 8017d22:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8017d24:	68bb      	ldr	r3, [r7, #8]
 8017d26:	69db      	ldr	r3, [r3, #28]
 8017d28:	6879      	ldr	r1, [r7, #4]
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	f004 fc2c 	bl	801c588 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8017d30:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 8017d32:	2400      	movs	r4, #0
 8017d34:	69fb      	ldr	r3, [r7, #28]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d004      	beq.n	8017d44 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 8017d3a:	69f9      	ldr	r1, [r7, #28]
 8017d3c:	68f8      	ldr	r0, [r7, #12]
 8017d3e:	f7f0 f829 	bl	8007d94 <_ZN14MockNamedValueC1ERKS_>
 8017d42:	e00c      	b.n	8017d5e <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 8017d44:	f107 0314 	add.w	r3, r7, #20
 8017d48:	490a      	ldr	r1, [pc, #40]	; (8017d74 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	f7f1 ff7d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8017d50:	2401      	movs	r4, #1
 8017d52:	f107 0314 	add.w	r3, r7, #20
 8017d56:	4619      	mov	r1, r3
 8017d58:	68f8      	ldr	r0, [r7, #12]
 8017d5a:	f002 fc9b 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
 8017d5e:	2c00      	cmp	r4, #0
 8017d60:	d004      	beq.n	8017d6c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 8017d62:	f107 0314 	add.w	r3, r7, #20
 8017d66:	4618      	mov	r0, r3
 8017d68:	f7f2 fb27 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8017d6c:	68f8      	ldr	r0, [r7, #12]
 8017d6e:	3724      	adds	r7, #36	; 0x24
 8017d70:	46bd      	mov	sp, r7
 8017d72:	bd90      	pop	{r4, r7, pc}
 8017d74:	0802293c 	.word	0x0802293c

08017d78 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 8017d78:	b590      	push	{r4, r7, lr}
 8017d7a:	b089      	sub	sp, #36	; 0x24
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	60f8      	str	r0, [r7, #12]
 8017d80:	60b9      	str	r1, [r7, #8]
 8017d82:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 8017d84:	68bb      	ldr	r3, [r7, #8]
 8017d86:	6a1b      	ldr	r3, [r3, #32]
 8017d88:	6879      	ldr	r1, [r7, #4]
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f004 fbfc 	bl	801c588 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8017d90:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 8017d92:	2400      	movs	r4, #0
 8017d94:	69fb      	ldr	r3, [r7, #28]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d004      	beq.n	8017da4 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 8017d9a:	69f9      	ldr	r1, [r7, #28]
 8017d9c:	68f8      	ldr	r0, [r7, #12]
 8017d9e:	f7ef fff9 	bl	8007d94 <_ZN14MockNamedValueC1ERKS_>
 8017da2:	e00c      	b.n	8017dbe <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 8017da4:	f107 0314 	add.w	r3, r7, #20
 8017da8:	490a      	ldr	r1, [pc, #40]	; (8017dd4 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 8017daa:	4618      	mov	r0, r3
 8017dac:	f7f1 ff4d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8017db0:	2401      	movs	r4, #1
 8017db2:	f107 0314 	add.w	r3, r7, #20
 8017db6:	4619      	mov	r1, r3
 8017db8:	68f8      	ldr	r0, [r7, #12]
 8017dba:	f002 fc6b 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
 8017dbe:	2c00      	cmp	r4, #0
 8017dc0:	d004      	beq.n	8017dcc <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 8017dc2:	f107 0314 	add.w	r3, r7, #20
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	f7f2 faf7 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8017dcc:	68f8      	ldr	r0, [r7, #12]
 8017dce:	3724      	adds	r7, #36	; 0x24
 8017dd0:	46bd      	mov	sp, r7
 8017dd2:	bd90      	pop	{r4, r7, pc}
 8017dd4:	0802293c 	.word	0x0802293c

08017dd8 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b084      	sub	sp, #16
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	69db      	ldr	r3, [r3, #28]
 8017de4:	4618      	mov	r0, r3
 8017de6:	f004 fbfe 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8017dea:	60f8      	str	r0, [r7, #12]
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d014      	beq.n	8017e1c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 8017df2:	68f9      	ldr	r1, [r7, #12]
 8017df4:	6878      	ldr	r0, [r7, #4]
 8017df6:	f000 fced 	bl	80187d4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	f000 fd1f 	bl	8018840 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8017e02:	4603      	mov	r3, r0
 8017e04:	f083 0301 	eor.w	r3, r3, #1
 8017e08:	b2db      	uxtb	r3, r3
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d001      	beq.n	8017e12 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	e023      	b.n	8017e5a <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 8017e12:	68f8      	ldr	r0, [r7, #12]
 8017e14:	f004 faf0 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 8017e18:	60f8      	str	r0, [r7, #12]
 8017e1a:	e7e7      	b.n	8017dec <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	6a1b      	ldr	r3, [r3, #32]
 8017e20:	4618      	mov	r0, r3
 8017e22:	f004 fbe0 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8017e26:	60f8      	str	r0, [r7, #12]
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d014      	beq.n	8017e58 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 8017e2e:	68f9      	ldr	r1, [r7, #12]
 8017e30:	6878      	ldr	r0, [r7, #4]
 8017e32:	f000 fccf 	bl	80187d4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8017e36:	4603      	mov	r3, r0
 8017e38:	4618      	mov	r0, r3
 8017e3a:	f000 fd01 	bl	8018840 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8017e3e:	4603      	mov	r3, r0
 8017e40:	f083 0301 	eor.w	r3, r3, #1
 8017e44:	b2db      	uxtb	r3, r3
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d001      	beq.n	8017e4e <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	e005      	b.n	8017e5a <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 8017e4e:	68f8      	ldr	r0, [r7, #12]
 8017e50:	f004 fad2 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 8017e54:	60f8      	str	r0, [r7, #12]
 8017e56:	e7e7      	b.n	8017e28 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 8017e58:	2301      	movs	r3, #1
}
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	3710      	adds	r7, #16
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	bd80      	pop	{r7, pc}

08017e62 <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 8017e62:	b480      	push	{r7}
 8017e64:	b083      	sub	sp, #12
 8017e66:	af00      	add	r7, sp, #0
 8017e68:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	2201      	movs	r2, #1
 8017e6e:	731a      	strb	r2, [r3, #12]
    return *this;
 8017e70:	687b      	ldr	r3, [r7, #4]
}
 8017e72:	4618      	mov	r0, r3
 8017e74:	370c      	adds	r7, #12
 8017e76:	46bd      	mov	sp, r7
 8017e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7c:	4770      	bx	lr

08017e7e <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 8017e7e:	b480      	push	{r7}
 8017e80:	b083      	sub	sp, #12
 8017e82:	af00      	add	r7, sp, #0
 8017e84:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	bf0c      	ite	eq
 8017e92:	2301      	moveq	r3, #1
 8017e94:	2300      	movne	r3, #0
 8017e96:	b2db      	uxtb	r3, r3
}
 8017e98:	4618      	mov	r0, r3
 8017e9a:	370c      	adds	r7, #12
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea2:	4770      	bx	lr

08017ea4 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 8017ea4:	b480      	push	{r7}
 8017ea6:	b083      	sub	sp, #12
 8017ea8:	af00      	add	r7, sp, #0
 8017eaa:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017eb4:	429a      	cmp	r2, r3
 8017eb6:	bf34      	ite	cc
 8017eb8:	2301      	movcc	r3, #1
 8017eba:	2300      	movcs	r3, #0
 8017ebc:	b2db      	uxtb	r3, r3
}
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	370c      	adds	r7, #12
 8017ec2:	46bd      	mov	sp, r7
 8017ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec8:	4770      	bx	lr

08017eca <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 8017eca:	b580      	push	{r7, lr}
 8017ecc:	b082      	sub	sp, #8
 8017ece:	af00      	add	r7, sp, #0
 8017ed0:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	33cc      	adds	r3, #204	; 0xcc
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	6878      	ldr	r0, [r7, #4]
 8017edc:	4798      	blx	r3
 8017ede:	4603      	mov	r3, r0
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d00c      	beq.n	8017efe <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	7b1b      	ldrb	r3, [r3, #12]
 8017ee8:	f083 0301 	eor.w	r3, r3, #1
 8017eec:	b2db      	uxtb	r3, r3
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d103      	bne.n	8017efa <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	7b5b      	ldrb	r3, [r3, #13]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d001      	beq.n	8017efe <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 8017efa:	2301      	movs	r3, #1
 8017efc:	e000      	b.n	8017f00 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 8017efe:	2300      	movs	r3, #0
}
 8017f00:	4618      	mov	r0, r3
 8017f02:	3708      	adds	r7, #8
 8017f04:	46bd      	mov	sp, r7
 8017f06:	bd80      	pop	{r7, pc}

08017f08 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b082      	sub	sp, #8
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	33d0      	adds	r3, #208	; 0xd0
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	6878      	ldr	r0, [r7, #4]
 8017f1a:	4798      	blx	r3
 8017f1c:	4603      	mov	r3, r0
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d006      	beq.n	8017f30 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d001      	beq.n	8017f30 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 8017f2c:	2301      	movs	r3, #1
 8017f2e:	e000      	b.n	8017f32 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 8017f30:	2300      	movs	r3, #0
}
 8017f32:	4618      	mov	r0, r3
 8017f34:	3708      	adds	r7, #8
 8017f36:	46bd      	mov	sp, r7
 8017f38:	bd80      	pop	{r7, pc}

08017f3a <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 8017f3a:	b580      	push	{r7, lr}
 8017f3c:	b082      	sub	sp, #8
 8017f3e:	af00      	add	r7, sp, #0
 8017f40:	6078      	str	r0, [r7, #4]
 8017f42:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017f48:	1c5a      	adds	r2, r3, #1
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	691b      	ldr	r3, [r3, #16]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d00c      	beq.n	8017f70 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 8017f5a:	683a      	ldr	r2, [r7, #0]
 8017f5c:	429a      	cmp	r2, r3
 8017f5e:	d304      	bcc.n	8017f6a <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	695b      	ldr	r3, [r3, #20]
 8017f64:	683a      	ldr	r2, [r7, #0]
 8017f66:	429a      	cmp	r2, r3
 8017f68:	d902      	bls.n	8017f70 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	2201      	movs	r2, #1
 8017f6e:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	33ec      	adds	r3, #236	; 0xec
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	6878      	ldr	r0, [r7, #4]
 8017f7a:	4798      	blx	r3
}
 8017f7c:	bf00      	nop
 8017f7e:	3708      	adds	r7, #8
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}

08017f84 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 8017f84:	b480      	push	{r7}
 8017f86:	b083      	sub	sp, #12
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	2201      	movs	r2, #1
 8017f90:	735a      	strb	r2, [r3, #13]
}
 8017f92:	bf00      	nop
 8017f94:	370c      	adds	r7, #12
 8017f96:	46bd      	mov	sp, r7
 8017f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9c:	4770      	bx	lr

08017f9e <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 8017f9e:	b480      	push	{r7}
 8017fa0:	b083      	sub	sp, #12
 8017fa2:	af00      	add	r7, sp, #0
 8017fa4:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	2201      	movs	r2, #1
 8017faa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 8017fae:	bf00      	nop
 8017fb0:	370c      	adds	r7, #12
 8017fb2:	46bd      	mov	sp, r7
 8017fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb8:	4770      	bx	lr

08017fba <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 8017fba:	b580      	push	{r7, lr}
 8017fbc:	b084      	sub	sp, #16
 8017fbe:	af00      	add	r7, sp, #0
 8017fc0:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8017fc8:	f083 0301 	eor.w	r3, r3, #1
 8017fcc:	b2da      	uxtb	r2, r3
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	2200      	movs	r2, #0
 8017fd8:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	69db      	ldr	r3, [r3, #28]
 8017fde:	4618      	mov	r0, r3
 8017fe0:	f004 fb01 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8017fe4:	60f8      	str	r0, [r7, #12]
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d00d      	beq.n	8018008 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 8017fec:	68f9      	ldr	r1, [r7, #12]
 8017fee:	6878      	ldr	r0, [r7, #4]
 8017ff0:	f000 fbf0 	bl	80187d4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	2100      	movs	r1, #0
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	f000 fc11 	bl	8018820 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 8017ffe:	68f8      	ldr	r0, [r7, #12]
 8018000:	f004 f9fa 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 8018004:	60f8      	str	r0, [r7, #12]
 8018006:	e7ee      	b.n	8017fe6 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	6a1b      	ldr	r3, [r3, #32]
 801800c:	4618      	mov	r0, r3
 801800e:	f004 faea 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8018012:	60f8      	str	r0, [r7, #12]
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	2b00      	cmp	r3, #0
 8018018:	d00d      	beq.n	8018036 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801801a:	68f9      	ldr	r1, [r7, #12]
 801801c:	6878      	ldr	r0, [r7, #4]
 801801e:	f000 fbd9 	bl	80187d4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018022:	4603      	mov	r3, r0
 8018024:	2100      	movs	r1, #0
 8018026:	4618      	mov	r0, r3
 8018028:	f000 fbfa 	bl	8018820 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801802c:	68f8      	ldr	r0, [r7, #12]
 801802e:	f004 f9e3 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 8018032:	60f8      	str	r0, [r7, #12]
 8018034:	e7ee      	b.n	8018014 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 8018036:	bf00      	nop
 8018038:	3710      	adds	r7, #16
 801803a:	46bd      	mov	sp, r7
 801803c:	bd80      	pop	{r7, pc}

0801803e <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801803e:	b590      	push	{r4, r7, lr}
 8018040:	b087      	sub	sp, #28
 8018042:	af00      	add	r7, sp, #0
 8018044:	6078      	str	r0, [r7, #4]
 8018046:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	69db      	ldr	r3, [r3, #28]
 801804c:	4618      	mov	r0, r3
 801804e:	f004 faca 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8018052:	6178      	str	r0, [r7, #20]
 8018054:	697b      	ldr	r3, [r7, #20]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d022      	beq.n	80180a0 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801805a:	f107 030c 	add.w	r3, r7, #12
 801805e:	6979      	ldr	r1, [r7, #20]
 8018060:	4618      	mov	r0, r3
 8018062:	f004 fa04 	bl	801c46e <_ZNK22MockNamedValueListNode7getNameEv>
 8018066:	f107 030c 	add.w	r3, r7, #12
 801806a:	6839      	ldr	r1, [r7, #0]
 801806c:	4618      	mov	r0, r3
 801806e:	f7f2 f9b0 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 8018072:	4603      	mov	r3, r0
 8018074:	461c      	mov	r4, r3
 8018076:	f107 030c 	add.w	r3, r7, #12
 801807a:	4618      	mov	r0, r3
 801807c:	f7f2 f99d 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8018080:	2c00      	cmp	r4, #0
 8018082:	d008      	beq.n	8018096 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 8018084:	6979      	ldr	r1, [r7, #20]
 8018086:	6878      	ldr	r0, [r7, #4]
 8018088:	f000 fba4 	bl	80187d4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801808c:	4603      	mov	r3, r0
 801808e:	2101      	movs	r1, #1
 8018090:	4618      	mov	r0, r3
 8018092:	f000 fbc5 	bl	8018820 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 8018096:	6978      	ldr	r0, [r7, #20]
 8018098:	f004 f9ae 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 801809c:	6178      	str	r0, [r7, #20]
 801809e:	e7d9      	b.n	8018054 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 80180a0:	bf00      	nop
 80180a2:	371c      	adds	r7, #28
 80180a4:	46bd      	mov	sp, r7
 80180a6:	bd90      	pop	{r4, r7, pc}

080180a8 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 80180a8:	b590      	push	{r4, r7, lr}
 80180aa:	b087      	sub	sp, #28
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
 80180b0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	6a1b      	ldr	r3, [r3, #32]
 80180b6:	4618      	mov	r0, r3
 80180b8:	f004 fa95 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 80180bc:	6178      	str	r0, [r7, #20]
 80180be:	697b      	ldr	r3, [r7, #20]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d022      	beq.n	801810a <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 80180c4:	f107 030c 	add.w	r3, r7, #12
 80180c8:	6979      	ldr	r1, [r7, #20]
 80180ca:	4618      	mov	r0, r3
 80180cc:	f004 f9cf 	bl	801c46e <_ZNK22MockNamedValueListNode7getNameEv>
 80180d0:	f107 030c 	add.w	r3, r7, #12
 80180d4:	6839      	ldr	r1, [r7, #0]
 80180d6:	4618      	mov	r0, r3
 80180d8:	f7f2 f97b 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 80180dc:	4603      	mov	r3, r0
 80180de:	461c      	mov	r4, r3
 80180e0:	f107 030c 	add.w	r3, r7, #12
 80180e4:	4618      	mov	r0, r3
 80180e6:	f7f2 f968 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80180ea:	2c00      	cmp	r4, #0
 80180ec:	d008      	beq.n	8018100 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 80180ee:	6979      	ldr	r1, [r7, #20]
 80180f0:	6878      	ldr	r0, [r7, #4]
 80180f2:	f000 fb6f 	bl	80187d4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80180f6:	4603      	mov	r3, r0
 80180f8:	2101      	movs	r1, #1
 80180fa:	4618      	mov	r0, r3
 80180fc:	f000 fb90 	bl	8018820 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8018100:	6978      	ldr	r0, [r7, #20]
 8018102:	f004 f979 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 8018106:	6178      	str	r0, [r7, #20]
 8018108:	e7d9      	b.n	80180be <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801810a:	bf00      	nop
 801810c:	371c      	adds	r7, #28
 801810e:	46bd      	mov	sp, r7
 8018110:	bd90      	pop	{r4, r7, pc}
	...

08018114 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b086      	sub	sp, #24
 8018118:	af00      	add	r7, sp, #0
 801811a:	60f8      	str	r0, [r7, #12]
 801811c:	60b9      	str	r1, [r7, #8]
 801811e:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8018120:	68bb      	ldr	r3, [r7, #8]
 8018122:	69db      	ldr	r3, [r3, #28]
 8018124:	6879      	ldr	r1, [r7, #4]
 8018126:	4618      	mov	r0, r3
 8018128:	f004 fa2e 	bl	801c588 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801812c:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801812e:	697b      	ldr	r3, [r7, #20]
 8018130:	2b00      	cmp	r3, #0
 8018132:	d005      	beq.n	8018140 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	6979      	ldr	r1, [r7, #20]
 8018138:	4618      	mov	r0, r3
 801813a:	f7ff fa0b 	bl	8017554 <_Z10StringFromRK14MockNamedValue>
 801813e:	e003      	b.n	8018148 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 8018140:	4903      	ldr	r1, [pc, #12]	; (8018150 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 8018142:	68f8      	ldr	r0, [r7, #12]
 8018144:	f7f1 fd81 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
}
 8018148:	68f8      	ldr	r0, [r7, #12]
 801814a:	3718      	adds	r7, #24
 801814c:	46bd      	mov	sp, r7
 801814e:	bd80      	pop	{r7, pc}
 8018150:	080229a8 	.word	0x080229a8

08018154 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 8018154:	b590      	push	{r4, r7, lr}
 8018156:	b087      	sub	sp, #28
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
 801815c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	69dc      	ldr	r4, [r3, #28]
 8018162:	683b      	ldr	r3, [r7, #0]
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	335c      	adds	r3, #92	; 0x5c
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	f107 020c 	add.w	r2, r7, #12
 801816e:	6839      	ldr	r1, [r7, #0]
 8018170:	4610      	mov	r0, r2
 8018172:	4798      	blx	r3
 8018174:	f107 030c 	add.w	r3, r7, #12
 8018178:	4619      	mov	r1, r3
 801817a:	4620      	mov	r0, r4
 801817c:	f004 fa04 	bl	801c588 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018180:	6178      	str	r0, [r7, #20]
 8018182:	f107 030c 	add.w	r3, r7, #12
 8018186:	4618      	mov	r0, r3
 8018188:	f7f2 f917 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801818c:	697b      	ldr	r3, [r7, #20]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d00d      	beq.n	80181ae <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 8018192:	697b      	ldr	r3, [r7, #20]
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	3350      	adds	r3, #80	; 0x50
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	6839      	ldr	r1, [r7, #0]
 801819c:	6978      	ldr	r0, [r7, #20]
 801819e:	4798      	blx	r3
 80181a0:	4603      	mov	r3, r0
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	bf14      	ite	ne
 80181a6:	2301      	movne	r3, #1
 80181a8:	2300      	moveq	r3, #0
 80181aa:	b2db      	uxtb	r3, r3
 80181ac:	e006      	b.n	80181bc <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	7b1b      	ldrb	r3, [r3, #12]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	bf14      	ite	ne
 80181b6:	2301      	movne	r3, #1
 80181b8:	2300      	moveq	r3, #0
 80181ba:	b2db      	uxtb	r3, r3
}
 80181bc:	4618      	mov	r0, r3
 80181be:	371c      	adds	r7, #28
 80181c0:	46bd      	mov	sp, r7
 80181c2:	bd90      	pop	{r4, r7, pc}

080181c4 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 80181c4:	b590      	push	{r4, r7, lr}
 80181c6:	b087      	sub	sp, #28
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
 80181cc:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	6a1c      	ldr	r4, [r3, #32]
 80181d2:	683b      	ldr	r3, [r7, #0]
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	335c      	adds	r3, #92	; 0x5c
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	f107 020c 	add.w	r2, r7, #12
 80181de:	6839      	ldr	r1, [r7, #0]
 80181e0:	4610      	mov	r0, r2
 80181e2:	4798      	blx	r3
 80181e4:	f107 030c 	add.w	r3, r7, #12
 80181e8:	4619      	mov	r1, r3
 80181ea:	4620      	mov	r0, r4
 80181ec:	f004 f9cc 	bl	801c588 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80181f0:	6178      	str	r0, [r7, #20]
 80181f2:	f107 030c 	add.w	r3, r7, #12
 80181f6:	4618      	mov	r0, r3
 80181f8:	f7f2 f8df 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 80181fc:	697b      	ldr	r3, [r7, #20]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d00d      	beq.n	801821e <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 8018202:	697b      	ldr	r3, [r7, #20]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	3354      	adds	r3, #84	; 0x54
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	6839      	ldr	r1, [r7, #0]
 801820c:	6978      	ldr	r0, [r7, #20]
 801820e:	4798      	blx	r3
 8018210:	4603      	mov	r3, r0
 8018212:	2b00      	cmp	r3, #0
 8018214:	bf14      	ite	ne
 8018216:	2301      	movne	r3, #1
 8018218:	2300      	moveq	r3, #0
 801821a:	b2db      	uxtb	r3, r3
 801821c:	e006      	b.n	801822c <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	7b1b      	ldrb	r3, [r3, #12]
 8018222:	2b00      	cmp	r3, #0
 8018224:	bf14      	ite	ne
 8018226:	2301      	movne	r3, #1
 8018228:	2300      	moveq	r3, #0
 801822a:	b2db      	uxtb	r3, r3
}
 801822c:	4618      	mov	r0, r3
 801822e:	371c      	adds	r7, #28
 8018230:	46bd      	mov	sp, r7
 8018232:	bd90      	pop	{r4, r7, pc}

08018234 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 8018234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018236:	b0a1      	sub	sp, #132	; 0x84
 8018238:	af02      	add	r7, sp, #8
 801823a:	6078      	str	r0, [r7, #4]
 801823c:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801823e:	49bc      	ldr	r1, [pc, #752]	; (8018530 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8018240:	6878      	ldr	r0, [r7, #4]
 8018242:	f7f1 fd02 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 8018246:	683b      	ldr	r3, [r7, #0]
 8018248:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801824c:	2b00      	cmp	r3, #0
 801824e:	d012      	beq.n	8018276 <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 8018250:	683b      	ldr	r3, [r7, #0]
 8018252:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8018254:	f107 030c 	add.w	r3, r7, #12
 8018258:	49b6      	ldr	r1, [pc, #728]	; (8018534 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801825a:	4618      	mov	r0, r3
 801825c:	f7f2 fdb4 	bl	800adc8 <_Z16StringFromFormatPKcz>
 8018260:	f107 030c 	add.w	r3, r7, #12
 8018264:	4619      	mov	r1, r3
 8018266:	6878      	ldr	r0, [r7, #4]
 8018268:	f7f1 fd5b 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801826c:	f107 030c 	add.w	r3, r7, #12
 8018270:	4618      	mov	r0, r3
 8018272:	f7f2 f8a2 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    str += getName();
 8018276:	f107 0314 	add.w	r3, r7, #20
 801827a:	6839      	ldr	r1, [r7, #0]
 801827c:	4618      	mov	r0, r3
 801827e:	f7ff f989 	bl	8017594 <_ZNK23MockCheckedExpectedCall7getNameEv>
 8018282:	f107 0314 	add.w	r3, r7, #20
 8018286:	4619      	mov	r1, r3
 8018288:	6878      	ldr	r0, [r7, #4]
 801828a:	f7f2 f913 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801828e:	f107 0314 	add.w	r3, r7, #20
 8018292:	4618      	mov	r0, r3
 8018294:	f7f2 f891 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    str += " -> ";
 8018298:	49a7      	ldr	r1, [pc, #668]	; (8018538 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801829a:	6878      	ldr	r0, [r7, #4]
 801829c:	f7f2 f91c 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 80182a0:	683b      	ldr	r3, [r7, #0]
 80182a2:	691b      	ldr	r3, [r3, #16]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d02d      	beq.n	8018304 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 80182a8:	683b      	ldr	r3, [r7, #0]
 80182aa:	691a      	ldr	r2, [r3, #16]
 80182ac:	683b      	ldr	r3, [r7, #0]
 80182ae:	695b      	ldr	r3, [r3, #20]
 80182b0:	429a      	cmp	r2, r3
 80182b2:	d113      	bne.n	80182dc <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 80182b4:	683b      	ldr	r3, [r7, #0]
 80182b6:	691a      	ldr	r2, [r3, #16]
 80182b8:	f107 031c 	add.w	r3, r7, #28
 80182bc:	499f      	ldr	r1, [pc, #636]	; (801853c <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 80182be:	4618      	mov	r0, r3
 80182c0:	f7f2 fd82 	bl	800adc8 <_Z16StringFromFormatPKcz>
 80182c4:	f107 031c 	add.w	r3, r7, #28
 80182c8:	4619      	mov	r1, r3
 80182ca:	6878      	ldr	r0, [r7, #4]
 80182cc:	f7f2 f8f2 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 80182d0:	f107 031c 	add.w	r3, r7, #28
 80182d4:	4618      	mov	r0, r3
 80182d6:	f7f2 f870 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80182da:	e013      	b.n	8018304 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 80182dc:	683b      	ldr	r3, [r7, #0]
 80182de:	691a      	ldr	r2, [r3, #16]
 80182e0:	683b      	ldr	r3, [r7, #0]
 80182e2:	695b      	ldr	r3, [r3, #20]
 80182e4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80182e8:	4995      	ldr	r1, [pc, #596]	; (8018540 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 80182ea:	f7f2 fd6d 	bl	800adc8 <_Z16StringFromFormatPKcz>
 80182ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80182f2:	4619      	mov	r1, r3
 80182f4:	6878      	ldr	r0, [r7, #4]
 80182f6:	f7f2 f8dd 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 80182fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80182fe:	4618      	mov	r0, r3
 8018300:	f7f2 f85b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 8018304:	683b      	ldr	r3, [r7, #0]
 8018306:	69db      	ldr	r3, [r3, #28]
 8018308:	4618      	mov	r0, r3
 801830a:	f004 f96c 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 801830e:	4603      	mov	r3, r0
 8018310:	2b00      	cmp	r3, #0
 8018312:	d109      	bne.n	8018328 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8018314:	683b      	ldr	r3, [r7, #0]
 8018316:	6a1b      	ldr	r3, [r3, #32]
 8018318:	4618      	mov	r0, r3
 801831a:	f004 f964 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 801831e:	4603      	mov	r3, r0
 8018320:	2b00      	cmp	r3, #0
 8018322:	d101      	bne.n	8018328 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8018324:	2301      	movs	r3, #1
 8018326:	e000      	b.n	801832a <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 8018328:	2300      	movs	r3, #0
 801832a:	2b00      	cmp	r3, #0
 801832c:	d00b      	beq.n	8018346 <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801832e:	683b      	ldr	r3, [r7, #0]
 8018330:	7b1b      	ldrb	r3, [r3, #12]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d001      	beq.n	801833a <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 8018336:	4b83      	ldr	r3, [pc, #524]	; (8018544 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 8018338:	e000      	b.n	801833c <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801833a:	4b83      	ldr	r3, [pc, #524]	; (8018548 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801833c:	4619      	mov	r1, r3
 801833e:	6878      	ldr	r0, [r7, #4]
 8018340:	f7f2 f8ca 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
 8018344:	e0e3      	b.n	801850e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 8018346:	683b      	ldr	r3, [r7, #0]
 8018348:	69db      	ldr	r3, [r3, #28]
 801834a:	4618      	mov	r0, r3
 801834c:	f004 f94b 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8018350:	6778      	str	r0, [r7, #116]	; 0x74
 8018352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018354:	2b00      	cmp	r3, #0
 8018356:	d069      	beq.n	801842c <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 8018358:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801835c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801835e:	4618      	mov	r0, r3
 8018360:	f004 f898 	bl	801c494 <_ZNK22MockNamedValueListNode7getTypeEv>
 8018364:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018368:	4618      	mov	r0, r3
 801836a:	f7f1 fff9 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801836e:	4605      	mov	r5, r0
 8018370:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018374:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8018376:	4618      	mov	r0, r3
 8018378:	f004 f879 	bl	801c46e <_ZNK22MockNamedValueListNode7getNameEv>
 801837c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018380:	4618      	mov	r0, r3
 8018382:	f7f1 ffed 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8018386:	4606      	mov	r6, r0
 8018388:	683b      	ldr	r3, [r7, #0]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	33a4      	adds	r3, #164	; 0xa4
 801838e:	681c      	ldr	r4, [r3, #0]
 8018390:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018394:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8018396:	4618      	mov	r0, r3
 8018398:	f004 f869 	bl	801c46e <_ZNK22MockNamedValueListNode7getNameEv>
 801839c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80183a0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80183a4:	6839      	ldr	r1, [r7, #0]
 80183a6:	4618      	mov	r0, r3
 80183a8:	47a0      	blx	r4
 80183aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80183ae:	4618      	mov	r0, r3
 80183b0:	f7f1 ffd6 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 80183b4:	4603      	mov	r3, r0
 80183b6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80183ba:	9300      	str	r3, [sp, #0]
 80183bc:	4633      	mov	r3, r6
 80183be:	462a      	mov	r2, r5
 80183c0:	4962      	ldr	r1, [pc, #392]	; (801854c <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 80183c2:	f7f2 fd01 	bl	800adc8 <_Z16StringFromFormatPKcz>
 80183c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80183ca:	4619      	mov	r1, r3
 80183cc:	6878      	ldr	r0, [r7, #4]
 80183ce:	f7f2 f871 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 80183d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80183d6:	4618      	mov	r0, r3
 80183d8:	f7f1 ffef 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80183dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80183e0:	4618      	mov	r0, r3
 80183e2:	f7f1 ffea 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80183e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80183ea:	4618      	mov	r0, r3
 80183ec:	f7f1 ffe5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80183f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80183f4:	4618      	mov	r0, r3
 80183f6:	f7f1 ffe0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80183fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80183fe:	4618      	mov	r0, r3
 8018400:	f7f1 ffdb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8018404:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018406:	f003 fff7 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 801840a:	4603      	mov	r3, r0
 801840c:	2b00      	cmp	r3, #0
 801840e:	bf14      	ite	ne
 8018410:	2301      	movne	r3, #1
 8018412:	2300      	moveq	r3, #0
 8018414:	b2db      	uxtb	r3, r3
 8018416:	2b00      	cmp	r3, #0
 8018418:	d003      	beq.n	8018422 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801841a:	494d      	ldr	r1, [pc, #308]	; (8018550 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801841c:	6878      	ldr	r0, [r7, #4]
 801841e:	f7f2 f85b 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 8018422:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018424:	f003 ffe8 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 8018428:	6778      	str	r0, [r7, #116]	; 0x74
 801842a:	e792      	b.n	8018352 <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801842c:	683b      	ldr	r3, [r7, #0]
 801842e:	69db      	ldr	r3, [r3, #28]
 8018430:	4618      	mov	r0, r3
 8018432:	f004 f8d8 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8018436:	4603      	mov	r3, r0
 8018438:	2b00      	cmp	r3, #0
 801843a:	d009      	beq.n	8018450 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801843c:	683b      	ldr	r3, [r7, #0]
 801843e:	6a1b      	ldr	r3, [r3, #32]
 8018440:	4618      	mov	r0, r3
 8018442:	f004 f8d0 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8018446:	4603      	mov	r3, r0
 8018448:	2b00      	cmp	r3, #0
 801844a:	d001      	beq.n	8018450 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801844c:	2301      	movs	r3, #1
 801844e:	e000      	b.n	8018452 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 8018450:	2300      	movs	r3, #0
 8018452:	2b00      	cmp	r3, #0
 8018454:	d003      	beq.n	801845e <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 8018456:	493e      	ldr	r1, [pc, #248]	; (8018550 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8018458:	6878      	ldr	r0, [r7, #4]
 801845a:	f7f2 f83d 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801845e:	683b      	ldr	r3, [r7, #0]
 8018460:	6a1b      	ldr	r3, [r3, #32]
 8018462:	4618      	mov	r0, r3
 8018464:	f004 f8bf 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8018468:	6778      	str	r0, [r7, #116]	; 0x74
 801846a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801846c:	2b00      	cmp	r3, #0
 801846e:	d046      	beq.n	80184fe <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 8018470:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8018474:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8018476:	4618      	mov	r0, r3
 8018478:	f004 f80c 	bl	801c494 <_ZNK22MockNamedValueListNode7getTypeEv>
 801847c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8018480:	4618      	mov	r0, r3
 8018482:	f7f1 ff6d 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8018486:	4604      	mov	r4, r0
 8018488:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801848c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801848e:	4618      	mov	r0, r3
 8018490:	f003 ffed 	bl	801c46e <_ZNK22MockNamedValueListNode7getNameEv>
 8018494:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018498:	4618      	mov	r0, r3
 801849a:	f7f1 ff61 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801849e:	4603      	mov	r3, r0
 80184a0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80184a4:	4622      	mov	r2, r4
 80184a6:	492b      	ldr	r1, [pc, #172]	; (8018554 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 80184a8:	f7f2 fc8e 	bl	800adc8 <_Z16StringFromFormatPKcz>
 80184ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80184b0:	4619      	mov	r1, r3
 80184b2:	6878      	ldr	r0, [r7, #4]
 80184b4:	f7f1 fffe 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 80184b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80184bc:	4618      	mov	r0, r3
 80184be:	f7f1 ff7c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80184c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80184c6:	4618      	mov	r0, r3
 80184c8:	f7f1 ff77 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80184cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80184d0:	4618      	mov	r0, r3
 80184d2:	f7f1 ff72 	bl	800a3ba <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 80184d6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80184d8:	f003 ff8e 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 80184dc:	4603      	mov	r3, r0
 80184de:	2b00      	cmp	r3, #0
 80184e0:	bf14      	ite	ne
 80184e2:	2301      	movne	r3, #1
 80184e4:	2300      	moveq	r3, #0
 80184e6:	b2db      	uxtb	r3, r3
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d003      	beq.n	80184f4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 80184ec:	4918      	ldr	r1, [pc, #96]	; (8018550 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 80184ee:	6878      	ldr	r0, [r7, #4]
 80184f0:	f7f1 fff2 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 80184f4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80184f6:	f003 ff7f 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 80184fa:	6778      	str	r0, [r7, #116]	; 0x74
 80184fc:	e7b5      	b.n	801846a <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 80184fe:	683b      	ldr	r3, [r7, #0]
 8018500:	7b1b      	ldrb	r3, [r3, #12]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d003      	beq.n	801850e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 8018506:	4914      	ldr	r1, [pc, #80]	; (8018558 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 8018508:	6878      	ldr	r0, [r7, #4]
 801850a:	f7f1 ffe5 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801850e:	683b      	ldr	r3, [r7, #0]
 8018510:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8018512:	683b      	ldr	r3, [r7, #0]
 8018514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8018516:	2b01      	cmp	r3, #1
 8018518:	d101      	bne.n	801851e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801851a:	4c05      	ldr	r4, [pc, #20]	; (8018530 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801851c:	e000      	b.n	8018520 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801851e:	4c0f      	ldr	r4, [pc, #60]	; (801855c <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 8018520:	683b      	ldr	r3, [r7, #0]
 8018522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8018524:	683a      	ldr	r2, [r7, #0]
 8018526:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8018528:	2a01      	cmp	r2, #1
 801852a:	d119      	bne.n	8018560 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801852c:	4a00      	ldr	r2, [pc, #0]	; (8018530 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801852e:	e018      	b.n	8018562 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 8018530:	0802293c 	.word	0x0802293c
 8018534:	080229b0 	.word	0x080229b0
 8018538:	080229c8 	.word	0x080229c8
 801853c:	080229d0 	.word	0x080229d0
 8018540:	080229f0 	.word	0x080229f0
 8018544:	08022a14 	.word	0x08022a14
 8018548:	08022a2c 	.word	0x08022a2c
 801854c:	08022a3c 	.word	0x08022a3c
 8018550:	08022a48 	.word	0x08022a48
 8018554:	08022a4c 	.word	0x08022a4c
 8018558:	08022a5c 	.word	0x08022a5c
 801855c:	08022a7c 	.word	0x08022a7c
 8018560:	4a0c      	ldr	r2, [pc, #48]	; (8018594 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 8018562:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8018566:	9201      	str	r2, [sp, #4]
 8018568:	9300      	str	r3, [sp, #0]
 801856a:	4623      	mov	r3, r4
 801856c:	460a      	mov	r2, r1
 801856e:	490a      	ldr	r1, [pc, #40]	; (8018598 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 8018570:	f7f2 fc2a 	bl	800adc8 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8018574:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018578:	4619      	mov	r1, r3
 801857a:	6878      	ldr	r0, [r7, #4]
 801857c:	f7f1 ff9a 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 8018580:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018584:	4618      	mov	r0, r3
 8018586:	f7f1 ff18 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    return str;
 801858a:	bf00      	nop
}
 801858c:	6878      	ldr	r0, [r7, #4]
 801858e:	377c      	adds	r7, #124	; 0x7c
 8018590:	46bd      	mov	sp, r7
 8018592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018594:	08022a7c 	.word	0x08022a7c
 8018598:	08022a80 	.word	0x08022a80

0801859c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801859c:	b590      	push	{r4, r7, lr}
 801859e:	b095      	sub	sp, #84	; 0x54
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
 80185a4:	6039      	str	r1, [r7, #0]
    SimpleString str;
 80185a6:	496c      	ldr	r1, [pc, #432]	; (8018758 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 80185a8:	6878      	ldr	r0, [r7, #4]
 80185aa:	f7f1 fb4e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 80185ae:	683b      	ldr	r3, [r7, #0]
 80185b0:	69db      	ldr	r3, [r3, #28]
 80185b2:	4618      	mov	r0, r3
 80185b4:	f004 f817 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 80185b8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80185ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d05e      	beq.n	801867e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 80185c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80185c2:	6838      	ldr	r0, [r7, #0]
 80185c4:	f000 f906 	bl	80187d4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80185c8:	4603      	mov	r3, r0
 80185ca:	4618      	mov	r0, r3
 80185cc:	f000 f938 	bl	8018840 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 80185d0:	4603      	mov	r3, r0
 80185d2:	f083 0301 	eor.w	r3, r3, #1
 80185d6:	b2db      	uxtb	r3, r3
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d04b      	beq.n	8018674 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 80185dc:	f107 030c 	add.w	r3, r7, #12
 80185e0:	495d      	ldr	r1, [pc, #372]	; (8018758 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 80185e2:	4618      	mov	r0, r3
 80185e4:	f7f1 fb31 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80185e8:	f107 030c 	add.w	r3, r7, #12
 80185ec:	4619      	mov	r1, r3
 80185ee:	6878      	ldr	r0, [r7, #4]
 80185f0:	f7f1 ff34 	bl	800a45c <_ZneRK12SimpleStringS1_>
 80185f4:	4603      	mov	r3, r0
 80185f6:	461c      	mov	r4, r3
 80185f8:	f107 030c 	add.w	r3, r7, #12
 80185fc:	4618      	mov	r0, r3
 80185fe:	f7f1 fedc 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8018602:	2c00      	cmp	r4, #0
 8018604:	d003      	beq.n	801860e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 8018606:	4955      	ldr	r1, [pc, #340]	; (801875c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 8018608:	6878      	ldr	r0, [r7, #4]
 801860a:	f7f1 ff65 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801860e:	f107 031c 	add.w	r3, r7, #28
 8018612:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018614:	4618      	mov	r0, r3
 8018616:	f003 ff3d 	bl	801c494 <_ZNK22MockNamedValueListNode7getTypeEv>
 801861a:	f107 031c 	add.w	r3, r7, #28
 801861e:	4618      	mov	r0, r3
 8018620:	f7f1 fe9e 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8018624:	4604      	mov	r4, r0
 8018626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801862a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801862c:	4618      	mov	r0, r3
 801862e:	f003 ff1e 	bl	801c46e <_ZNK22MockNamedValueListNode7getNameEv>
 8018632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018636:	4618      	mov	r0, r3
 8018638:	f7f1 fe92 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801863c:	4603      	mov	r3, r0
 801863e:	f107 0014 	add.w	r0, r7, #20
 8018642:	4622      	mov	r2, r4
 8018644:	4946      	ldr	r1, [pc, #280]	; (8018760 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 8018646:	f7f2 fbbf 	bl	800adc8 <_Z16StringFromFormatPKcz>
 801864a:	f107 0314 	add.w	r3, r7, #20
 801864e:	4619      	mov	r1, r3
 8018650:	6878      	ldr	r0, [r7, #4]
 8018652:	f7f1 ff2f 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 8018656:	f107 0314 	add.w	r3, r7, #20
 801865a:	4618      	mov	r0, r3
 801865c:	f7f1 fead 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8018660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018664:	4618      	mov	r0, r3
 8018666:	f7f1 fea8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801866a:	f107 031c 	add.w	r3, r7, #28
 801866e:	4618      	mov	r0, r3
 8018670:	f7f1 fea3 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 8018674:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8018676:	f003 febf 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 801867a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801867c:	e79d      	b.n	80185ba <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801867e:	683b      	ldr	r3, [r7, #0]
 8018680:	6a1b      	ldr	r3, [r3, #32]
 8018682:	4618      	mov	r0, r3
 8018684:	f003 ffaf 	bl	801c5e6 <_ZN18MockNamedValueList5beginEv>
 8018688:	64f8      	str	r0, [r7, #76]	; 0x4c
 801868a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801868c:	2b00      	cmp	r3, #0
 801868e:	d05e      	beq.n	801874e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 8018690:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018692:	6838      	ldr	r0, [r7, #0]
 8018694:	f000 f89e 	bl	80187d4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018698:	4603      	mov	r3, r0
 801869a:	4618      	mov	r0, r3
 801869c:	f000 f8d0 	bl	8018840 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 80186a0:	4603      	mov	r3, r0
 80186a2:	f083 0301 	eor.w	r3, r3, #1
 80186a6:	b2db      	uxtb	r3, r3
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d04b      	beq.n	8018744 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 80186ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80186b0:	4929      	ldr	r1, [pc, #164]	; (8018758 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 80186b2:	4618      	mov	r0, r3
 80186b4:	f7f1 fac9 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80186b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80186bc:	4619      	mov	r1, r3
 80186be:	6878      	ldr	r0, [r7, #4]
 80186c0:	f7f1 fecc 	bl	800a45c <_ZneRK12SimpleStringS1_>
 80186c4:	4603      	mov	r3, r0
 80186c6:	461c      	mov	r4, r3
 80186c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80186cc:	4618      	mov	r0, r3
 80186ce:	f7f1 fe74 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80186d2:	2c00      	cmp	r4, #0
 80186d4:	d003      	beq.n	80186de <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 80186d6:	4921      	ldr	r1, [pc, #132]	; (801875c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 80186d8:	6878      	ldr	r0, [r7, #4]
 80186da:	f7f1 fefd 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 80186de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80186e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80186e4:	4618      	mov	r0, r3
 80186e6:	f003 fed5 	bl	801c494 <_ZNK22MockNamedValueListNode7getTypeEv>
 80186ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80186ee:	4618      	mov	r0, r3
 80186f0:	f7f1 fe36 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 80186f4:	4604      	mov	r4, r0
 80186f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80186fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80186fc:	4618      	mov	r0, r3
 80186fe:	f003 feb6 	bl	801c46e <_ZNK22MockNamedValueListNode7getNameEv>
 8018702:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018706:	4618      	mov	r0, r3
 8018708:	f7f1 fe2a 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801870c:	4603      	mov	r3, r0
 801870e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8018712:	4622      	mov	r2, r4
 8018714:	4912      	ldr	r1, [pc, #72]	; (8018760 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 8018716:	f7f2 fb57 	bl	800adc8 <_Z16StringFromFormatPKcz>
 801871a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801871e:	4619      	mov	r1, r3
 8018720:	6878      	ldr	r0, [r7, #4]
 8018722:	f7f1 fec7 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 8018726:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801872a:	4618      	mov	r0, r3
 801872c:	f7f1 fe45 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8018730:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018734:	4618      	mov	r0, r3
 8018736:	f7f1 fe40 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801873a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801873e:	4618      	mov	r0, r3
 8018740:	f7f1 fe3b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 8018744:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8018746:	f003 fe57 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 801874a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801874c:	e79d      	b.n	801868a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801874e:	bf00      	nop
}
 8018750:	6878      	ldr	r0, [r7, #4]
 8018752:	3754      	adds	r7, #84	; 0x54
 8018754:	46bd      	mov	sp, r7
 8018756:	bd90      	pop	{r4, r7, pc}
 8018758:	0802293c 	.word	0x0802293c
 801875c:	08022a48 	.word	0x08022a48
 8018760:	08022aa8 	.word	0x08022aa8

08018764 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 8018764:	b590      	push	{r4, r7, lr}
 8018766:	b085      	sub	sp, #20
 8018768:	af00      	add	r7, sp, #0
 801876a:	6078      	str	r0, [r7, #4]
 801876c:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801876e:	f107 0308 	add.w	r3, r7, #8
 8018772:	6879      	ldr	r1, [r7, #4]
 8018774:	4618      	mov	r0, r3
 8018776:	f7fe ff0d 	bl	8017594 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801877a:	f107 0308 	add.w	r3, r7, #8
 801877e:	4619      	mov	r1, r3
 8018780:	6838      	ldr	r0, [r7, #0]
 8018782:	f7f1 fe26 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 8018786:	4603      	mov	r3, r0
 8018788:	461c      	mov	r4, r3
 801878a:	f107 0308 	add.w	r3, r7, #8
 801878e:	4618      	mov	r0, r3
 8018790:	f7f1 fe13 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8018794:	4623      	mov	r3, r4
}
 8018796:	4618      	mov	r0, r3
 8018798:	3714      	adds	r7, #20
 801879a:	46bd      	mov	sp, r7
 801879c:	bd90      	pop	{r4, r7, pc}

0801879e <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801879e:	b480      	push	{r7}
 80187a0:	b083      	sub	sp, #12
 80187a2:	af00      	add	r7, sp, #0
 80187a4:	6078      	str	r0, [r7, #4]
 80187a6:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80187ae:	f083 0301 	eor.w	r3, r3, #1
 80187b2:	b2db      	uxtb	r3, r3
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d104      	bne.n	80187c2 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80187bc:	683a      	ldr	r2, [r7, #0]
 80187be:	429a      	cmp	r2, r3
 80187c0:	d101      	bne.n	80187c6 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 80187c2:	2301      	movs	r3, #1
 80187c4:	e000      	b.n	80187c8 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 80187c6:	2300      	movs	r3, #0
}
 80187c8:	4618      	mov	r0, r3
 80187ca:	370c      	adds	r7, #12
 80187cc:	46bd      	mov	sp, r7
 80187ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187d2:	4770      	bx	lr

080187d4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 80187d4:	b580      	push	{r7, lr}
 80187d6:	b082      	sub	sp, #8
 80187d8:	af00      	add	r7, sp, #0
 80187da:	6078      	str	r0, [r7, #4]
 80187dc:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 80187de:	6838      	ldr	r0, [r7, #0]
 80187e0:	f003 fe16 	bl	801c410 <_ZN22MockNamedValueListNode4itemEv>
 80187e4:	4603      	mov	r3, r0
}
 80187e6:	4618      	mov	r0, r3
 80187e8:	3708      	adds	r7, #8
 80187ea:	46bd      	mov	sp, r7
 80187ec:	bd80      	pop	{r7, pc}
	...

080187f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b082      	sub	sp, #8
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	6078      	str	r0, [r7, #4]
 80187f8:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	6839      	ldr	r1, [r7, #0]
 80187fe:	4618      	mov	r0, r3
 8018800:	f001 ff48 	bl	801a694 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018804:	4a05      	ldr	r2, [pc, #20]	; (801881c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	601a      	str	r2, [r3, #0]
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	2200      	movs	r2, #0
 801880e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	4618      	mov	r0, r3
 8018816:	3708      	adds	r7, #8
 8018818:	46bd      	mov	sp, r7
 801881a:	bd80      	pop	{r7, pc}
 801881c:	08024cdc 	.word	0x08024cdc

08018820 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 8018820:	b480      	push	{r7}
 8018822:	b083      	sub	sp, #12
 8018824:	af00      	add	r7, sp, #0
 8018826:	6078      	str	r0, [r7, #4]
 8018828:	460b      	mov	r3, r1
 801882a:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	78fa      	ldrb	r2, [r7, #3]
 8018830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8018834:	bf00      	nop
 8018836:	370c      	adds	r7, #12
 8018838:	46bd      	mov	sp, r7
 801883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883e:	4770      	bx	lr

08018840 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 8018840:	b480      	push	{r7}
 8018842:	b083      	sub	sp, #12
 8018844:	af00      	add	r7, sp, #0
 8018846:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801884e:	4618      	mov	r0, r3
 8018850:	370c      	adds	r7, #12
 8018852:	46bd      	mov	sp, r7
 8018854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018858:	4770      	bx	lr
	...

0801885c <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b082      	sub	sp, #8
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
 8018864:	460b      	mov	r3, r1
 8018866:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	3328      	adds	r3, #40	; 0x28
 801886c:	4907      	ldr	r1, [pc, #28]	; (801888c <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801886e:	4618      	mov	r0, r3
 8018870:	f002 f9b2 	bl	801abd8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	3328      	adds	r3, #40	; 0x28
 8018878:	78fa      	ldrb	r2, [r7, #3]
 801887a:	4611      	mov	r1, r2
 801887c:	4618      	mov	r0, r3
 801887e:	f001 ff5b 	bl	801a738 <_ZN14MockNamedValue8setValueEb>
    return *this;
 8018882:	687b      	ldr	r3, [r7, #4]
}
 8018884:	4618      	mov	r0, r3
 8018886:	3708      	adds	r7, #8
 8018888:	46bd      	mov	sp, r7
 801888a:	bd80      	pop	{r7, pc}
 801888c:	08022ab0 	.word	0x08022ab0

08018890 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 8018890:	b580      	push	{r7, lr}
 8018892:	b082      	sub	sp, #8
 8018894:	af00      	add	r7, sp, #0
 8018896:	6078      	str	r0, [r7, #4]
 8018898:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	3328      	adds	r3, #40	; 0x28
 801889e:	4907      	ldr	r1, [pc, #28]	; (80188bc <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 80188a0:	4618      	mov	r0, r3
 80188a2:	f002 f999 	bl	801abd8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	3328      	adds	r3, #40	; 0x28
 80188aa:	6839      	ldr	r1, [r7, #0]
 80188ac:	4618      	mov	r0, r3
 80188ae:	f001 ff67 	bl	801a780 <_ZN14MockNamedValue8setValueEj>
    return *this;
 80188b2:	687b      	ldr	r3, [r7, #4]
}
 80188b4:	4618      	mov	r0, r3
 80188b6:	3708      	adds	r7, #8
 80188b8:	46bd      	mov	sp, r7
 80188ba:	bd80      	pop	{r7, pc}
 80188bc:	08022ab0 	.word	0x08022ab0

080188c0 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b082      	sub	sp, #8
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
 80188c8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	3328      	adds	r3, #40	; 0x28
 80188ce:	4907      	ldr	r1, [pc, #28]	; (80188ec <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 80188d0:	4618      	mov	r0, r3
 80188d2:	f002 f981 	bl	801abd8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	3328      	adds	r3, #40	; 0x28
 80188da:	6839      	ldr	r1, [r7, #0]
 80188dc:	4618      	mov	r0, r3
 80188de:	f001 ff71 	bl	801a7c4 <_ZN14MockNamedValue8setValueEi>
    return *this;
 80188e2:	687b      	ldr	r3, [r7, #4]
}
 80188e4:	4618      	mov	r0, r3
 80188e6:	3708      	adds	r7, #8
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd80      	pop	{r7, pc}
 80188ec:	08022ab0 	.word	0x08022ab0

080188f0 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b082      	sub	sp, #8
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	6078      	str	r0, [r7, #4]
 80188f8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	3328      	adds	r3, #40	; 0x28
 80188fe:	4907      	ldr	r1, [pc, #28]	; (801891c <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 8018900:	4618      	mov	r0, r3
 8018902:	f002 f969 	bl	801abd8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	3328      	adds	r3, #40	; 0x28
 801890a:	6839      	ldr	r1, [r7, #0]
 801890c:	4618      	mov	r0, r3
 801890e:	f001 ff7b 	bl	801a808 <_ZN14MockNamedValue8setValueEl>
    return *this;
 8018912:	687b      	ldr	r3, [r7, #4]
}
 8018914:	4618      	mov	r0, r3
 8018916:	3708      	adds	r7, #8
 8018918:	46bd      	mov	sp, r7
 801891a:	bd80      	pop	{r7, pc}
 801891c:	08022ab0 	.word	0x08022ab0

08018920 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 8018920:	b580      	push	{r7, lr}
 8018922:	b082      	sub	sp, #8
 8018924:	af00      	add	r7, sp, #0
 8018926:	6078      	str	r0, [r7, #4]
 8018928:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	3328      	adds	r3, #40	; 0x28
 801892e:	4907      	ldr	r1, [pc, #28]	; (801894c <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 8018930:	4618      	mov	r0, r3
 8018932:	f002 f951 	bl	801abd8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	3328      	adds	r3, #40	; 0x28
 801893a:	6839      	ldr	r1, [r7, #0]
 801893c:	4618      	mov	r0, r3
 801893e:	f001 ff85 	bl	801a84c <_ZN14MockNamedValue8setValueEm>
    return *this;
 8018942:	687b      	ldr	r3, [r7, #4]
}
 8018944:	4618      	mov	r0, r3
 8018946:	3708      	adds	r7, #8
 8018948:	46bd      	mov	sp, r7
 801894a:	bd80      	pop	{r7, pc}
 801894c:	08022ab0 	.word	0x08022ab0

08018950 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 8018950:	b5b0      	push	{r4, r5, r7, lr}
 8018952:	b086      	sub	sp, #24
 8018954:	af02      	add	r7, sp, #8
 8018956:	60f8      	str	r0, [r7, #12]
 8018958:	1d3b      	adds	r3, r7, #4
 801895a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801895e:	f7f8 fd57 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8018962:	4604      	mov	r4, r0
 8018964:	6823      	ldr	r3, [r4, #0]
 8018966:	3368      	adds	r3, #104	; 0x68
 8018968:	681d      	ldr	r5, [r3, #0]
 801896a:	f7f8 fd61 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801896e:	4603      	mov	r3, r0
 8018970:	9300      	str	r3, [sp, #0]
 8018972:	f240 2319 	movw	r3, #537	; 0x219
 8018976:	4a04      	ldr	r2, [pc, #16]	; (8018988 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 8018978:	4904      	ldr	r1, [pc, #16]	; (801898c <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801897a:	4620      	mov	r0, r4
 801897c:	47a8      	blx	r5
    return *this;
 801897e:	68fb      	ldr	r3, [r7, #12]
}
 8018980:	4618      	mov	r0, r3
 8018982:	3710      	adds	r7, #16
 8018984:	46bd      	mov	sp, r7
 8018986:	bdb0      	pop	{r4, r5, r7, pc}
 8018988:	08022940 	.word	0x08022940
 801898c:	0802295c 	.word	0x0802295c

08018990 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 8018990:	b5b0      	push	{r4, r5, r7, lr}
 8018992:	b086      	sub	sp, #24
 8018994:	af02      	add	r7, sp, #8
 8018996:	60f8      	str	r0, [r7, #12]
 8018998:	1d3b      	adds	r3, r7, #4
 801899a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801899e:	f7f8 fd37 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 80189a2:	4604      	mov	r4, r0
 80189a4:	6823      	ldr	r3, [r4, #0]
 80189a6:	3368      	adds	r3, #104	; 0x68
 80189a8:	681d      	ldr	r5, [r3, #0]
 80189aa:	f7f8 fd41 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80189ae:	4603      	mov	r3, r0
 80189b0:	9300      	str	r3, [sp, #0]
 80189b2:	f240 231f 	movw	r3, #543	; 0x21f
 80189b6:	4a04      	ldr	r2, [pc, #16]	; (80189c8 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 80189b8:	4904      	ldr	r1, [pc, #16]	; (80189cc <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 80189ba:	4620      	mov	r0, r4
 80189bc:	47a8      	blx	r5
    return *this;
 80189be:	68fb      	ldr	r3, [r7, #12]
}
 80189c0:	4618      	mov	r0, r3
 80189c2:	3710      	adds	r7, #16
 80189c4:	46bd      	mov	sp, r7
 80189c6:	bdb0      	pop	{r4, r5, r7, pc}
 80189c8:	08022940 	.word	0x08022940
 80189cc:	0802297c 	.word	0x0802297c

080189d0 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	b082      	sub	sp, #8
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	6078      	str	r0, [r7, #4]
 80189d8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	3328      	adds	r3, #40	; 0x28
 80189de:	4907      	ldr	r1, [pc, #28]	; (80189fc <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 80189e0:	4618      	mov	r0, r3
 80189e2:	f002 f8f9 	bl	801abd8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	3328      	adds	r3, #40	; 0x28
 80189ea:	6839      	ldr	r1, [r7, #0]
 80189ec:	4618      	mov	r0, r3
 80189ee:	f002 f835 	bl	801aa5c <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 80189f2:	687b      	ldr	r3, [r7, #4]
}
 80189f4:	4618      	mov	r0, r3
 80189f6:	3708      	adds	r7, #8
 80189f8:	46bd      	mov	sp, r7
 80189fa:	bd80      	pop	{r7, pc}
 80189fc:	08022ab0 	.word	0x08022ab0

08018a00 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 8018a00:	b580      	push	{r7, lr}
 8018a02:	b084      	sub	sp, #16
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	60f8      	str	r0, [r7, #12]
 8018a08:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	3328      	adds	r3, #40	; 0x28
 8018a10:	4907      	ldr	r1, [pc, #28]	; (8018a30 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 8018a12:	4618      	mov	r0, r3
 8018a14:	f002 f8e0 	bl	801abd8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	3328      	adds	r3, #40	; 0x28
 8018a1c:	ed97 0b00 	vldr	d0, [r7]
 8018a20:	4618      	mov	r0, r3
 8018a22:	f001 ff71 	bl	801a908 <_ZN14MockNamedValue8setValueEd>
    return *this;
 8018a26:	68fb      	ldr	r3, [r7, #12]
}
 8018a28:	4618      	mov	r0, r3
 8018a2a:	3710      	adds	r7, #16
 8018a2c:	46bd      	mov	sp, r7
 8018a2e:	bd80      	pop	{r7, pc}
 8018a30:	08022ab0 	.word	0x08022ab0

08018a34 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 8018a34:	b580      	push	{r7, lr}
 8018a36:	b082      	sub	sp, #8
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	6078      	str	r0, [r7, #4]
 8018a3c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	3328      	adds	r3, #40	; 0x28
 8018a42:	4907      	ldr	r1, [pc, #28]	; (8018a60 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 8018a44:	4618      	mov	r0, r3
 8018a46:	f002 f8c7 	bl	801abd8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	3328      	adds	r3, #40	; 0x28
 8018a4e:	6839      	ldr	r1, [r7, #0]
 8018a50:	4618      	mov	r0, r3
 8018a52:	f001 ff9d 	bl	801a990 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 8018a56:	687b      	ldr	r3, [r7, #4]
}
 8018a58:	4618      	mov	r0, r3
 8018a5a:	3708      	adds	r7, #8
 8018a5c:	46bd      	mov	sp, r7
 8018a5e:	bd80      	pop	{r7, pc}
 8018a60:	08022ab0 	.word	0x08022ab0

08018a64 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b082      	sub	sp, #8
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
 8018a6c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	3328      	adds	r3, #40	; 0x28
 8018a72:	4907      	ldr	r1, [pc, #28]	; (8018a90 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 8018a74:	4618      	mov	r0, r3
 8018a76:	f002 f8af 	bl	801abd8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	3328      	adds	r3, #40	; 0x28
 8018a7e:	6839      	ldr	r1, [r7, #0]
 8018a80:	4618      	mov	r0, r3
 8018a82:	f001 ffa7 	bl	801a9d4 <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 8018a86:	687b      	ldr	r3, [r7, #4]
}
 8018a88:	4618      	mov	r0, r3
 8018a8a:	3708      	adds	r7, #8
 8018a8c:	46bd      	mov	sp, r7
 8018a8e:	bd80      	pop	{r7, pc}
 8018a90:	08022ab0 	.word	0x08022ab0

08018a94 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b082      	sub	sp, #8
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
 8018a9c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	3328      	adds	r3, #40	; 0x28
 8018aa2:	4907      	ldr	r1, [pc, #28]	; (8018ac0 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	f002 f897 	bl	801abd8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	3328      	adds	r3, #40	; 0x28
 8018aae:	6839      	ldr	r1, [r7, #0]
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	f001 ffb1 	bl	801aa18 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 8018ab6:	687b      	ldr	r3, [r7, #4]
}
 8018ab8:	4618      	mov	r0, r3
 8018aba:	3708      	adds	r7, #8
 8018abc:	46bd      	mov	sp, r7
 8018abe:	bd80      	pop	{r7, pc}
 8018ac0:	08022ab0 	.word	0x08022ab0

08018ac4 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 8018ac4:	b480      	push	{r7}
 8018ac6:	b083      	sub	sp, #12
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	6078      	str	r0, [r7, #4]
 8018acc:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	2201      	movs	r2, #1
 8018ad2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	2200      	movs	r2, #0
 8018ada:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	683a      	ldr	r2, [r7, #0]
 8018ae2:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 8018ae4:	687b      	ldr	r3, [r7, #4]
}
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	370c      	adds	r7, #12
 8018aea:	46bd      	mov	sp, r7
 8018aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018af0:	4770      	bx	lr

08018af2 <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 8018af2:	b580      	push	{r7, lr}
 8018af4:	b082      	sub	sp, #8
 8018af6:	af00      	add	r7, sp, #0
 8018af8:	6078      	str	r0, [r7, #4]
 8018afa:	6039      	str	r1, [r7, #0]
    return returnValue_;
 8018afc:	683b      	ldr	r3, [r7, #0]
 8018afe:	3328      	adds	r3, #40	; 0x28
 8018b00:	4619      	mov	r1, r3
 8018b02:	6878      	ldr	r0, [r7, #4]
 8018b04:	f7ef f946 	bl	8007d94 <_ZN14MockNamedValueC1ERKS_>
}
 8018b08:	6878      	ldr	r0, [r7, #4]
 8018b0a:	3708      	adds	r7, #8
 8018b0c:	46bd      	mov	sp, r7
 8018b0e:	bd80      	pop	{r7, pc}

08018b10 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 8018b10:	b480      	push	{r7}
 8018b12:	b085      	sub	sp, #20
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	60f8      	str	r0, [r7, #12]
 8018b18:	60b9      	str	r1, [r7, #8]
 8018b1a:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	68ba      	ldr	r2, [r7, #8]
 8018b20:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	687a      	ldr	r2, [r7, #4]
 8018b26:	615a      	str	r2, [r3, #20]
    return *this;
 8018b28:	68fb      	ldr	r3, [r7, #12]
}
 8018b2a:	4618      	mov	r0, r3
 8018b2c:	3714      	adds	r7, #20
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b34:	4770      	bx	lr

08018b36 <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 8018b36:	b480      	push	{r7}
 8018b38:	b083      	sub	sp, #12
 8018b3a:	af00      	add	r7, sp, #0
 8018b3c:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	7e1b      	ldrb	r3, [r3, #24]
}
 8018b42:	4618      	mov	r0, r3
 8018b44:	370c      	adds	r7, #12
 8018b46:	46bd      	mov	sp, r7
 8018b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4c:	4770      	bx	lr

08018b4e <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 8018b4e:	b480      	push	{r7}
 8018b50:	b083      	sub	sp, #12
 8018b52:	af00      	add	r7, sp, #0
 8018b54:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	370c      	adds	r7, #12
 8018b5e:	46bd      	mov	sp, r7
 8018b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b64:	4770      	bx	lr
	...

08018b68 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 8018b68:	b580      	push	{r7, lr}
 8018b6a:	b082      	sub	sp, #8
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	6078      	str	r0, [r7, #4]
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	4618      	mov	r0, r3
 8018b74:	f7fe fcce 	bl	8017514 <_ZN16MockExpectedCallC1Ev>
 8018b78:	4a03      	ldr	r2, [pc, #12]	; (8018b88 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	601a      	str	r2, [r3, #0]
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	4618      	mov	r0, r3
 8018b82:	3708      	adds	r7, #8
 8018b84:	46bd      	mov	sp, r7
 8018b86:	bd80      	pop	{r7, pc}
 8018b88:	08024b3c 	.word	0x08024b3c

08018b8c <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	af00      	add	r7, sp, #0
 8018b90:	4801      	ldr	r0, [pc, #4]	; (8018b98 <__tcf_0+0xc>)
 8018b92:	f000 f831 	bl	8018bf8 <_ZN23MockIgnoredExpectedCallD1Ev>
 8018b96:	bd80      	pop	{r7, pc}
 8018b98:	20000c88 	.word	0x20000c88

08018b9c <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 8018ba0:	4b12      	ldr	r3, [pc, #72]	; (8018bec <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8018ba2:	781b      	ldrb	r3, [r3, #0]
 8018ba4:	f3bf 8f5b 	dmb	ish
 8018ba8:	b2db      	uxtb	r3, r3
 8018baa:	f003 0301 	and.w	r3, r3, #1
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	bf0c      	ite	eq
 8018bb2:	2301      	moveq	r3, #1
 8018bb4:	2300      	movne	r3, #0
 8018bb6:	b2db      	uxtb	r3, r3
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d013      	beq.n	8018be4 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 8018bbc:	480b      	ldr	r0, [pc, #44]	; (8018bec <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8018bbe:	f003 ff03 	bl	801c9c8 <__cxa_guard_acquire>
 8018bc2:	4603      	mov	r3, r0
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	bf14      	ite	ne
 8018bc8:	2301      	movne	r3, #1
 8018bca:	2300      	moveq	r3, #0
 8018bcc:	b2db      	uxtb	r3, r3
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d008      	beq.n	8018be4 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 8018bd2:	4807      	ldr	r0, [pc, #28]	; (8018bf0 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 8018bd4:	f7ff ffc8 	bl	8018b68 <_ZN23MockIgnoredExpectedCallC1Ev>
 8018bd8:	4804      	ldr	r0, [pc, #16]	; (8018bec <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8018bda:	f003 ff01 	bl	801c9e0 <__cxa_guard_release>
 8018bde:	4805      	ldr	r0, [pc, #20]	; (8018bf4 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 8018be0:	f003 ff25 	bl	801ca2e <atexit>
    return call;
 8018be4:	4b02      	ldr	r3, [pc, #8]	; (8018bf0 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 8018be6:	4618      	mov	r0, r3
 8018be8:	bd80      	pop	{r7, pc}
 8018bea:	bf00      	nop
 8018bec:	20000c8c 	.word	0x20000c8c
 8018bf0:	20000c88 	.word	0x20000c88
 8018bf4:	08018b8d 	.word	0x08018b8d

08018bf8 <_ZN23MockIgnoredExpectedCallD1Ev>:
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b082      	sub	sp, #8
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
 8018c00:	4a05      	ldr	r2, [pc, #20]	; (8018c18 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	601a      	str	r2, [r3, #0]
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	4618      	mov	r0, r3
 8018c0a:	f7fe fc93 	bl	8017534 <_ZN16MockExpectedCallD1Ev>
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	4618      	mov	r0, r3
 8018c12:	3708      	adds	r7, #8
 8018c14:	46bd      	mov	sp, r7
 8018c16:	bd80      	pop	{r7, pc}
 8018c18:	08024b3c 	.word	0x08024b3c

08018c1c <_ZN23MockIgnoredExpectedCallD0Ev>:
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b082      	sub	sp, #8
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	6078      	str	r0, [r7, #4]
 8018c24:	6878      	ldr	r0, [r7, #4]
 8018c26:	f7ff ffe7 	bl	8018bf8 <_ZN23MockIgnoredExpectedCallD1Ev>
 8018c2a:	2104      	movs	r1, #4
 8018c2c:	6878      	ldr	r0, [r7, #4]
 8018c2e:	f7ee fc5d 	bl	80074ec <_ZdlPvj>
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	4618      	mov	r0, r3
 8018c36:	3708      	adds	r7, #8
 8018c38:	46bd      	mov	sp, r7
 8018c3a:	bd80      	pop	{r7, pc}

08018c3c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	b082      	sub	sp, #8
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
 8018c44:	4a05      	ldr	r2, [pc, #20]	; (8018c5c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	601a      	str	r2, [r3, #0]
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	f001 fd4b 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	4618      	mov	r0, r3
 8018c56:	3708      	adds	r7, #8
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	bd80      	pop	{r7, pc}
 8018c5c:	08024cdc 	.word	0x08024cdc

08018c60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b082      	sub	sp, #8
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
 8018c68:	6878      	ldr	r0, [r7, #4]
 8018c6a:	f7ff ffe7 	bl	8018c3c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 8018c6e:	2138      	movs	r1, #56	; 0x38
 8018c70:	6878      	ldr	r0, [r7, #4]
 8018c72:	f7ee fc3b 	bl	80074ec <_ZdlPvj>
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	4618      	mov	r0, r3
 8018c7a:	3708      	adds	r7, #8
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd80      	pop	{r7, pc}

08018c80 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 8018c80:	b480      	push	{r7}
 8018c82:	b083      	sub	sp, #12
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	6078      	str	r0, [r7, #4]
 8018c88:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	683a      	ldr	r2, [r7, #0]
 8018c8e:	601a      	str	r2, [r3, #0]
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	2200      	movs	r2, #0
 8018c94:	605a      	str	r2, [r3, #4]
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	4618      	mov	r0, r3
 8018c9a:	370c      	adds	r7, #12
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca2:	4770      	bx	lr

08018ca4 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 8018ca4:	b480      	push	{r7}
 8018ca6:	b083      	sub	sp, #12
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
 8018cac:	4a06      	ldr	r2, [pc, #24]	; (8018cc8 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	601a      	str	r2, [r3, #0]
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	2200      	movs	r2, #0
 8018cb6:	605a      	str	r2, [r3, #4]
{
}
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	4618      	mov	r0, r3
 8018cbc:	370c      	adds	r7, #12
 8018cbe:	46bd      	mov	sp, r7
 8018cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc4:	4770      	bx	lr
 8018cc6:	bf00      	nop
 8018cc8:	08024e30 	.word	0x08024e30

08018ccc <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 8018ccc:	b580      	push	{r7, lr}
 8018cce:	b084      	sub	sp, #16
 8018cd0:	af00      	add	r7, sp, #0
 8018cd2:	6078      	str	r0, [r7, #4]
 8018cd4:	4a0d      	ldr	r2, [pc, #52]	; (8018d0c <_ZN21MockExpectedCallsListD1Ev+0x40>)
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	685b      	ldr	r3, [r3, #4]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d00f      	beq.n	8018d02 <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	685b      	ldr	r3, [r3, #4]
 8018ce6:	685b      	ldr	r3, [r3, #4]
 8018ce8:	60fb      	str	r3, [r7, #12]
        delete head_;
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	685b      	ldr	r3, [r3, #4]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d003      	beq.n	8018cfa <_ZN21MockExpectedCallsListD1Ev+0x2e>
 8018cf2:	2108      	movs	r1, #8
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	f7ee fbf9 	bl	80074ec <_ZdlPvj>
        head_ = next;
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	68fa      	ldr	r2, [r7, #12]
 8018cfe:	605a      	str	r2, [r3, #4]
    while (head_) {
 8018d00:	e7eb      	b.n	8018cda <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	4618      	mov	r0, r3
 8018d06:	3710      	adds	r7, #16
 8018d08:	46bd      	mov	sp, r7
 8018d0a:	bd80      	pop	{r7, pc}
 8018d0c:	08024e30 	.word	0x08024e30

08018d10 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 8018d10:	b580      	push	{r7, lr}
 8018d12:	b082      	sub	sp, #8
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	6078      	str	r0, [r7, #4]
}
 8018d18:	6878      	ldr	r0, [r7, #4]
 8018d1a:	f7ff ffd7 	bl	8018ccc <_ZN21MockExpectedCallsListD1Ev>
 8018d1e:	2108      	movs	r1, #8
 8018d20:	6878      	ldr	r0, [r7, #4]
 8018d22:	f7ee fbe3 	bl	80074ec <_ZdlPvj>
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	4618      	mov	r0, r3
 8018d2a:	3708      	adds	r7, #8
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	bd80      	pop	{r7, pc}

08018d30 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 8018d30:	b580      	push	{r7, lr}
 8018d32:	b084      	sub	sp, #16
 8018d34:	af00      	add	r7, sp, #0
 8018d36:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	685b      	ldr	r3, [r3, #4]
 8018d3c:	60fb      	str	r3, [r7, #12]
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d011      	beq.n	8018d68 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	681a      	ldr	r2, [r3, #0]
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	33d4      	adds	r3, #212	; 0xd4
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	4610      	mov	r0, r2
 8018d54:	4798      	blx	r3
 8018d56:	4603      	mov	r3, r0
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d001      	beq.n	8018d60 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 8018d5c:	2301      	movs	r3, #1
 8018d5e:	e004      	b.n	8018d6a <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	685b      	ldr	r3, [r3, #4]
 8018d64:	60fb      	str	r3, [r7, #12]
 8018d66:	e7ea      	b.n	8018d3e <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 8018d68:	2300      	movs	r3, #0
}
 8018d6a:	4618      	mov	r0, r3
 8018d6c:	3710      	adds	r7, #16
 8018d6e:	46bd      	mov	sp, r7
 8018d70:	bd80      	pop	{r7, pc}

08018d72 <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 8018d72:	b480      	push	{r7}
 8018d74:	b085      	sub	sp, #20
 8018d76:	af00      	add	r7, sp, #0
 8018d78:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 8018d7a:	2300      	movs	r3, #0
 8018d7c:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	685b      	ldr	r3, [r3, #4]
 8018d82:	60bb      	str	r3, [r7, #8]
 8018d84:	68bb      	ldr	r3, [r7, #8]
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d006      	beq.n	8018d98 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 8018d8a:	68fb      	ldr	r3, [r7, #12]
 8018d8c:	3301      	adds	r3, #1
 8018d8e:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018d90:	68bb      	ldr	r3, [r7, #8]
 8018d92:	685b      	ldr	r3, [r3, #4]
 8018d94:	60bb      	str	r3, [r7, #8]
 8018d96:	e7f5      	b.n	8018d84 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 8018d98:	68fb      	ldr	r3, [r7, #12]
}
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	3714      	adds	r7, #20
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da4:	4770      	bx	lr

08018da6 <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 8018da6:	b480      	push	{r7}
 8018da8:	b083      	sub	sp, #12
 8018daa:	af00      	add	r7, sp, #0
 8018dac:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	685b      	ldr	r3, [r3, #4]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	bf0c      	ite	eq
 8018db6:	2301      	moveq	r3, #1
 8018db8:	2300      	movne	r3, #0
 8018dba:	b2db      	uxtb	r3, r3
}
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	370c      	adds	r7, #12
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc6:	4770      	bx	lr

08018dc8 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b084      	sub	sp, #16
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
 8018dd0:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 8018dd2:	2300      	movs	r3, #0
 8018dd4:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	685b      	ldr	r3, [r3, #4]
 8018dda:	60bb      	str	r3, [r7, #8]
 8018ddc:	68bb      	ldr	r3, [r7, #8]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d01d      	beq.n	8018e1e <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 8018de2:	68bb      	ldr	r3, [r7, #8]
 8018de4:	681a      	ldr	r2, [r3, #0]
 8018de6:	68bb      	ldr	r3, [r7, #8]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	33b8      	adds	r3, #184	; 0xb8
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	6839      	ldr	r1, [r7, #0]
 8018df2:	4610      	mov	r0, r2
 8018df4:	4798      	blx	r3
 8018df6:	4603      	mov	r3, r0
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d00c      	beq.n	8018e16 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 8018dfc:	68bb      	ldr	r3, [r7, #8]
 8018dfe:	681a      	ldr	r2, [r3, #0]
 8018e00:	68bb      	ldr	r3, [r7, #8]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	33f8      	adds	r3, #248	; 0xf8
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	4610      	mov	r0, r2
 8018e0c:	4798      	blx	r3
 8018e0e:	4602      	mov	r2, r0
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	4413      	add	r3, r2
 8018e14:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8018e16:	68bb      	ldr	r3, [r7, #8]
 8018e18:	685b      	ldr	r3, [r3, #4]
 8018e1a:	60bb      	str	r3, [r7, #8]
 8018e1c:	e7de      	b.n	8018ddc <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 8018e1e:	68fb      	ldr	r3, [r7, #12]
}
 8018e20:	4618      	mov	r0, r3
 8018e22:	3710      	adds	r7, #16
 8018e24:	46bd      	mov	sp, r7
 8018e26:	bd80      	pop	{r7, pc}

08018e28 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b084      	sub	sp, #16
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 8018e30:	2300      	movs	r3, #0
 8018e32:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	685b      	ldr	r3, [r3, #4]
 8018e38:	60bb      	str	r3, [r7, #8]
 8018e3a:	68bb      	ldr	r3, [r7, #8]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d015      	beq.n	8018e6c <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 8018e40:	68bb      	ldr	r3, [r7, #8]
 8018e42:	681a      	ldr	r2, [r3, #0]
 8018e44:	68bb      	ldr	r3, [r7, #8]
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	33c0      	adds	r3, #192	; 0xc0
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	4610      	mov	r0, r2
 8018e50:	4798      	blx	r3
 8018e52:	4603      	mov	r3, r0
 8018e54:	f083 0301 	eor.w	r3, r3, #1
 8018e58:	b2db      	uxtb	r3, r3
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d002      	beq.n	8018e64 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	3301      	adds	r3, #1
 8018e62:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018e64:	68bb      	ldr	r3, [r7, #8]
 8018e66:	685b      	ldr	r3, [r3, #4]
 8018e68:	60bb      	str	r3, [r7, #8]
 8018e6a:	e7e6      	b.n	8018e3a <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 8018e6c:	68fb      	ldr	r3, [r7, #12]
}
 8018e6e:	4618      	mov	r0, r3
 8018e70:	3710      	adds	r7, #16
 8018e72:	46bd      	mov	sp, r7
 8018e74:	bd80      	pop	{r7, pc}

08018e76 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 8018e76:	b580      	push	{r7, lr}
 8018e78:	b084      	sub	sp, #16
 8018e7a:	af00      	add	r7, sp, #0
 8018e7c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	685b      	ldr	r3, [r3, #4]
 8018e82:	60fb      	str	r3, [r7, #12]
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d011      	beq.n	8018eae <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	681a      	ldr	r2, [r3, #0]
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	33c8      	adds	r3, #200	; 0xc8
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	4610      	mov	r0, r2
 8018e9a:	4798      	blx	r3
 8018e9c:	4603      	mov	r3, r0
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d001      	beq.n	8018ea6 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 8018ea2:	2301      	movs	r3, #1
 8018ea4:	e004      	b.n	8018eb0 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	685b      	ldr	r3, [r3, #4]
 8018eaa:	60fb      	str	r3, [r7, #12]
 8018eac:	e7ea      	b.n	8018e84 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 8018eae:	2300      	movs	r3, #0
}
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	3710      	adds	r7, #16
 8018eb4:	46bd      	mov	sp, r7
 8018eb6:	bd80      	pop	{r7, pc}

08018eb8 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 8018eb8:	b580      	push	{r7, lr}
 8018eba:	b084      	sub	sp, #16
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	685b      	ldr	r3, [r3, #4]
 8018ec4:	60fb      	str	r3, [r7, #12]
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d014      	beq.n	8018ef6 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	681a      	ldr	r2, [r3, #0]
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	33c0      	adds	r3, #192	; 0xc0
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	4610      	mov	r0, r2
 8018edc:	4798      	blx	r3
 8018ede:	4603      	mov	r3, r0
 8018ee0:	f083 0301 	eor.w	r3, r3, #1
 8018ee4:	b2db      	uxtb	r3, r3
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d001      	beq.n	8018eee <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 8018eea:	2301      	movs	r3, #1
 8018eec:	e004      	b.n	8018ef8 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	685b      	ldr	r3, [r3, #4]
 8018ef2:	60fb      	str	r3, [r7, #12]
 8018ef4:	e7e7      	b.n	8018ec6 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 8018ef6:	2300      	movs	r3, #0
}
 8018ef8:	4618      	mov	r0, r3
 8018efa:	3710      	adds	r7, #16
 8018efc:	46bd      	mov	sp, r7
 8018efe:	bd80      	pop	{r7, pc}

08018f00 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 8018f00:	b580      	push	{r7, lr}
 8018f02:	b084      	sub	sp, #16
 8018f04:	af00      	add	r7, sp, #0
 8018f06:	6078      	str	r0, [r7, #4]
 8018f08:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	685b      	ldr	r3, [r3, #4]
 8018f0e:	60fb      	str	r3, [r7, #12]
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d012      	beq.n	8018f3c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	681a      	ldr	r2, [r3, #0]
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	33b8      	adds	r3, #184	; 0xb8
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	6839      	ldr	r1, [r7, #0]
 8018f26:	4610      	mov	r0, r2
 8018f28:	4798      	blx	r3
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d001      	beq.n	8018f34 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 8018f30:	2301      	movs	r3, #1
 8018f32:	e004      	b.n	8018f3e <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	685b      	ldr	r3, [r3, #4]
 8018f38:	60fb      	str	r3, [r7, #12]
 8018f3a:	e7e9      	b.n	8018f10 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 8018f3c:	2300      	movs	r3, #0
}
 8018f3e:	4618      	mov	r0, r3
 8018f40:	3710      	adds	r7, #16
 8018f42:	46bd      	mov	sp, r7
 8018f44:	bd80      	pop	{r7, pc}
	...

08018f48 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 8018f48:	b590      	push	{r4, r7, lr}
 8018f4a:	b085      	sub	sp, #20
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	6078      	str	r0, [r7, #4]
 8018f50:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 8018f52:	2273      	movs	r2, #115	; 0x73
 8018f54:	4911      	ldr	r1, [pc, #68]	; (8018f9c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 8018f56:	2008      	movs	r0, #8
 8018f58:	f7ee fab4 	bl	80074c4 <_ZnwjPKci>
 8018f5c:	4604      	mov	r4, r0
 8018f5e:	6839      	ldr	r1, [r7, #0]
 8018f60:	4620      	mov	r0, r4
 8018f62:	f7ff fe8d 	bl	8018c80 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 8018f66:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	685b      	ldr	r3, [r3, #4]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d103      	bne.n	8018f78 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	68ba      	ldr	r2, [r7, #8]
 8018f74:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 8018f76:	e00d      	b.n	8018f94 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	685b      	ldr	r3, [r3, #4]
 8018f7c:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	685b      	ldr	r3, [r3, #4]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d003      	beq.n	8018f8e <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	685b      	ldr	r3, [r3, #4]
 8018f8a:	60fb      	str	r3, [r7, #12]
 8018f8c:	e7f7      	b.n	8018f7e <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	68ba      	ldr	r2, [r7, #8]
 8018f92:	605a      	str	r2, [r3, #4]
}
 8018f94:	bf00      	nop
 8018f96:	3714      	adds	r7, #20
 8018f98:	46bd      	mov	sp, r7
 8018f9a:	bd90      	pop	{r4, r7, pc}
 8018f9c:	08022abc 	.word	0x08022abc

08018fa0 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b084      	sub	sp, #16
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	6078      	str	r0, [r7, #4]
 8018fa8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8018faa:	683b      	ldr	r3, [r7, #0]
 8018fac:	685b      	ldr	r3, [r3, #4]
 8018fae:	60fb      	str	r3, [r7, #12]
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d018      	beq.n	8018fe8 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	681a      	ldr	r2, [r3, #0]
 8018fba:	68fb      	ldr	r3, [r7, #12]
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	33c4      	adds	r3, #196	; 0xc4
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	4610      	mov	r0, r2
 8018fc6:	4798      	blx	r3
 8018fc8:	4603      	mov	r3, r0
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d008      	beq.n	8018fe0 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	3330      	adds	r3, #48	; 0x30
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	68fa      	ldr	r2, [r7, #12]
 8018fd8:	6812      	ldr	r2, [r2, #0]
 8018fda:	4611      	mov	r1, r2
 8018fdc:	6878      	ldr	r0, [r7, #4]
 8018fde:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	685b      	ldr	r3, [r3, #4]
 8018fe4:	60fb      	str	r3, [r7, #12]
 8018fe6:	e7e3      	b.n	8018fb0 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 8018fe8:	bf00      	nop
 8018fea:	3710      	adds	r7, #16
 8018fec:	46bd      	mov	sp, r7
 8018fee:	bd80      	pop	{r7, pc}

08018ff0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b086      	sub	sp, #24
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	60f8      	str	r0, [r7, #12]
 8018ff8:	60b9      	str	r1, [r7, #8]
 8018ffa:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	685b      	ldr	r3, [r3, #4]
 8019000:	617b      	str	r3, [r7, #20]
 8019002:	697b      	ldr	r3, [r7, #20]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d019      	beq.n	801903c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 8019008:	697b      	ldr	r3, [r7, #20]
 801900a:	681a      	ldr	r2, [r3, #0]
 801900c:	697b      	ldr	r3, [r7, #20]
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	33b8      	adds	r3, #184	; 0xb8
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	68b9      	ldr	r1, [r7, #8]
 8019018:	4610      	mov	r0, r2
 801901a:	4798      	blx	r3
 801901c:	4603      	mov	r3, r0
 801901e:	2b00      	cmp	r3, #0
 8019020:	d008      	beq.n	8019034 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	3330      	adds	r3, #48	; 0x30
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	697a      	ldr	r2, [r7, #20]
 801902c:	6812      	ldr	r2, [r2, #0]
 801902e:	4611      	mov	r1, r2
 8019030:	68f8      	ldr	r0, [r7, #12]
 8019032:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8019034:	697b      	ldr	r3, [r7, #20]
 8019036:	685b      	ldr	r3, [r3, #4]
 8019038:	617b      	str	r3, [r7, #20]
 801903a:	e7e2      	b.n	8019002 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801903c:	bf00      	nop
 801903e:	3718      	adds	r7, #24
 8019040:	46bd      	mov	sp, r7
 8019042:	bd80      	pop	{r7, pc}

08019044 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 8019044:	b580      	push	{r7, lr}
 8019046:	b084      	sub	sp, #16
 8019048:	af00      	add	r7, sp, #0
 801904a:	6078      	str	r0, [r7, #4]
 801904c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801904e:	683b      	ldr	r3, [r7, #0]
 8019050:	685b      	ldr	r3, [r3, #4]
 8019052:	60fb      	str	r3, [r7, #12]
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	2b00      	cmp	r3, #0
 8019058:	d00c      	beq.n	8019074 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	3330      	adds	r3, #48	; 0x30
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	68fa      	ldr	r2, [r7, #12]
 8019064:	6812      	ldr	r2, [r2, #0]
 8019066:	4611      	mov	r1, r2
 8019068:	6878      	ldr	r0, [r7, #4]
 801906a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801906c:	68fb      	ldr	r3, [r7, #12]
 801906e:	685b      	ldr	r3, [r3, #4]
 8019070:	60fb      	str	r3, [r7, #12]
 8019072:	e7ef      	b.n	8019054 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 8019074:	bf00      	nop
 8019076:	3710      	adds	r7, #16
 8019078:	46bd      	mov	sp, r7
 801907a:	bd80      	pop	{r7, pc}

0801907c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801907c:	b580      	push	{r7, lr}
 801907e:	b084      	sub	sp, #16
 8019080:	af00      	add	r7, sp, #0
 8019082:	6078      	str	r0, [r7, #4]
 8019084:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	685b      	ldr	r3, [r3, #4]
 801908a:	60fb      	str	r3, [r7, #12]
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d016      	beq.n	80190c0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	681a      	ldr	r2, [r3, #0]
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	33b8      	adds	r3, #184	; 0xb8
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	6839      	ldr	r1, [r7, #0]
 80190a2:	4610      	mov	r0, r2
 80190a4:	4798      	blx	r3
 80190a6:	4603      	mov	r3, r0
 80190a8:	f083 0301 	eor.w	r3, r3, #1
 80190ac:	b2db      	uxtb	r3, r3
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d002      	beq.n	80190b8 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	2200      	movs	r2, #0
 80190b6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	685b      	ldr	r3, [r3, #4]
 80190bc:	60fb      	str	r3, [r7, #12]
 80190be:	e7e5      	b.n	801908c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	3388      	adds	r3, #136	; 0x88
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	6878      	ldr	r0, [r7, #4]
 80190ca:	4798      	blx	r3
}
 80190cc:	bf00      	nop
 80190ce:	3710      	adds	r7, #16
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}

080190d4 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b084      	sub	sp, #16
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	685b      	ldr	r3, [r3, #4]
 80190e0:	60fb      	str	r3, [r7, #12]
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d015      	beq.n	8019114 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	681a      	ldr	r2, [r3, #0]
 80190ec:	68fb      	ldr	r3, [r7, #12]
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	33d4      	adds	r3, #212	; 0xd4
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	4610      	mov	r0, r2
 80190f8:	4798      	blx	r3
 80190fa:	4603      	mov	r3, r0
 80190fc:	f083 0301 	eor.w	r3, r3, #1
 8019100:	b2db      	uxtb	r3, r3
 8019102:	2b00      	cmp	r3, #0
 8019104:	d002      	beq.n	801910c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	2200      	movs	r2, #0
 801910a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	685b      	ldr	r3, [r3, #4]
 8019110:	60fb      	str	r3, [r7, #12]
 8019112:	e7e6      	b.n	80190e2 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	3388      	adds	r3, #136	; 0x88
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	6878      	ldr	r0, [r7, #4]
 801911e:	4798      	blx	r3
}
 8019120:	bf00      	nop
 8019122:	3710      	adds	r7, #16
 8019124:	46bd      	mov	sp, r7
 8019126:	bd80      	pop	{r7, pc}

08019128 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 8019128:	b580      	push	{r7, lr}
 801912a:	b084      	sub	sp, #16
 801912c:	af00      	add	r7, sp, #0
 801912e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	685b      	ldr	r3, [r3, #4]
 8019134:	60fb      	str	r3, [r7, #12]
 8019136:	68fb      	ldr	r3, [r7, #12]
 8019138:	2b00      	cmp	r3, #0
 801913a:	d01b      	beq.n	8019174 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	681a      	ldr	r2, [r3, #0]
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	33c8      	adds	r3, #200	; 0xc8
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	4610      	mov	r0, r2
 801914c:	4798      	blx	r3
 801914e:	4603      	mov	r3, r0
 8019150:	2b00      	cmp	r3, #0
 8019152:	d00b      	beq.n	801916c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	681a      	ldr	r2, [r3, #0]
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	33ec      	adds	r3, #236	; 0xec
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	4610      	mov	r0, r2
 8019164:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	2200      	movs	r2, #0
 801916a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	685b      	ldr	r3, [r3, #4]
 8019170:	60fb      	str	r3, [r7, #12]
 8019172:	e7e0      	b.n	8019136 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	3388      	adds	r3, #136	; 0x88
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	6878      	ldr	r0, [r7, #4]
 801917e:	4798      	blx	r3
}
 8019180:	bf00      	nop
 8019182:	3710      	adds	r7, #16
 8019184:	46bd      	mov	sp, r7
 8019186:	bd80      	pop	{r7, pc}

08019188 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 8019188:	b580      	push	{r7, lr}
 801918a:	b084      	sub	sp, #16
 801918c:	af00      	add	r7, sp, #0
 801918e:	6078      	str	r0, [r7, #4]
 8019190:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	685b      	ldr	r3, [r3, #4]
 8019196:	60fb      	str	r3, [r7, #12]
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d016      	beq.n	80191cc <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	681a      	ldr	r2, [r3, #0]
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	33a8      	adds	r3, #168	; 0xa8
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	6839      	ldr	r1, [r7, #0]
 80191ae:	4610      	mov	r0, r2
 80191b0:	4798      	blx	r3
 80191b2:	4603      	mov	r3, r0
 80191b4:	f083 0301 	eor.w	r3, r3, #1
 80191b8:	b2db      	uxtb	r3, r3
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d002      	beq.n	80191c4 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	2200      	movs	r2, #0
 80191c2:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	685b      	ldr	r3, [r3, #4]
 80191c8:	60fb      	str	r3, [r7, #12]
 80191ca:	e7e5      	b.n	8019198 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	3388      	adds	r3, #136	; 0x88
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	6878      	ldr	r0, [r7, #4]
 80191d6:	4798      	blx	r3
}
 80191d8:	bf00      	nop
 80191da:	3710      	adds	r7, #16
 80191dc:	46bd      	mov	sp, r7
 80191de:	bd80      	pop	{r7, pc}

080191e0 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 80191e0:	b580      	push	{r7, lr}
 80191e2:	b084      	sub	sp, #16
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	6078      	str	r0, [r7, #4]
 80191e8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	685b      	ldr	r3, [r3, #4]
 80191ee:	60fb      	str	r3, [r7, #12]
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d016      	beq.n	8019224 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	681a      	ldr	r2, [r3, #0]
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	33b0      	adds	r3, #176	; 0xb0
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	6839      	ldr	r1, [r7, #0]
 8019206:	4610      	mov	r0, r2
 8019208:	4798      	blx	r3
 801920a:	4603      	mov	r3, r0
 801920c:	f083 0301 	eor.w	r3, r3, #1
 8019210:	b2db      	uxtb	r3, r3
 8019212:	2b00      	cmp	r3, #0
 8019214:	d002      	beq.n	801921c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	2200      	movs	r2, #0
 801921a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	685b      	ldr	r3, [r3, #4]
 8019220:	60fb      	str	r3, [r7, #12]
 8019222:	e7e5      	b.n	80191f0 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	3388      	adds	r3, #136	; 0x88
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	6878      	ldr	r0, [r7, #4]
 801922e:	4798      	blx	r3
}
 8019230:	bf00      	nop
 8019232:	3710      	adds	r7, #16
 8019234:	46bd      	mov	sp, r7
 8019236:	bd80      	pop	{r7, pc}

08019238 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 8019238:	b580      	push	{r7, lr}
 801923a:	b084      	sub	sp, #16
 801923c:	af00      	add	r7, sp, #0
 801923e:	6078      	str	r0, [r7, #4]
 8019240:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	685b      	ldr	r3, [r3, #4]
 8019246:	60fb      	str	r3, [r7, #12]
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d016      	beq.n	801927c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	681a      	ldr	r2, [r3, #0]
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	33ac      	adds	r3, #172	; 0xac
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	6839      	ldr	r1, [r7, #0]
 801925e:	4610      	mov	r0, r2
 8019260:	4798      	blx	r3
 8019262:	4603      	mov	r3, r0
 8019264:	f083 0301 	eor.w	r3, r3, #1
 8019268:	b2db      	uxtb	r3, r3
 801926a:	2b00      	cmp	r3, #0
 801926c:	d002      	beq.n	8019274 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	2200      	movs	r2, #0
 8019272:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	685b      	ldr	r3, [r3, #4]
 8019278:	60fb      	str	r3, [r7, #12]
 801927a:	e7e5      	b.n	8019248 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	3388      	adds	r3, #136	; 0x88
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	6878      	ldr	r0, [r7, #4]
 8019286:	4798      	blx	r3
}
 8019288:	bf00      	nop
 801928a:	3710      	adds	r7, #16
 801928c:	46bd      	mov	sp, r7
 801928e:	bd80      	pop	{r7, pc}

08019290 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 8019290:	b580      	push	{r7, lr}
 8019292:	b084      	sub	sp, #16
 8019294:	af00      	add	r7, sp, #0
 8019296:	6078      	str	r0, [r7, #4]
 8019298:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	685b      	ldr	r3, [r3, #4]
 801929e:	60fb      	str	r3, [r7, #12]
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d016      	beq.n	80192d4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	681a      	ldr	r2, [r3, #0]
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	33b4      	adds	r3, #180	; 0xb4
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	6839      	ldr	r1, [r7, #0]
 80192b6:	4610      	mov	r0, r2
 80192b8:	4798      	blx	r3
 80192ba:	4603      	mov	r3, r0
 80192bc:	f083 0301 	eor.w	r3, r3, #1
 80192c0:	b2db      	uxtb	r3, r3
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d002      	beq.n	80192cc <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	2200      	movs	r2, #0
 80192ca:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	685b      	ldr	r3, [r3, #4]
 80192d0:	60fb      	str	r3, [r7, #12]
 80192d2:	e7e5      	b.n	80192a0 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	3388      	adds	r3, #136	; 0x88
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	6878      	ldr	r0, [r7, #4]
 80192de:	4798      	blx	r3
}
 80192e0:	bf00      	nop
 80192e2:	3710      	adds	r7, #16
 80192e4:	46bd      	mov	sp, r7
 80192e6:	bd80      	pop	{r7, pc}

080192e8 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b084      	sub	sp, #16
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	6078      	str	r0, [r7, #4]
 80192f0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	685b      	ldr	r3, [r3, #4]
 80192f6:	60fb      	str	r3, [r7, #12]
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d016      	beq.n	801932c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 80192fe:	68fb      	ldr	r3, [r7, #12]
 8019300:	681a      	ldr	r2, [r3, #0]
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	33bc      	adds	r3, #188	; 0xbc
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	6839      	ldr	r1, [r7, #0]
 801930e:	4610      	mov	r0, r2
 8019310:	4798      	blx	r3
 8019312:	4603      	mov	r3, r0
 8019314:	f083 0301 	eor.w	r3, r3, #1
 8019318:	b2db      	uxtb	r3, r3
 801931a:	2b00      	cmp	r3, #0
 801931c:	d002      	beq.n	8019324 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	2200      	movs	r2, #0
 8019322:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	685b      	ldr	r3, [r3, #4]
 8019328:	60fb      	str	r3, [r7, #12]
 801932a:	e7e5      	b.n	80192f8 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	3388      	adds	r3, #136	; 0x88
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	6878      	ldr	r0, [r7, #4]
 8019336:	4798      	blx	r3
}
 8019338:	bf00      	nop
 801933a:	3710      	adds	r7, #16
 801933c:	46bd      	mov	sp, r7
 801933e:	bd80      	pop	{r7, pc}

08019340 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 8019340:	b580      	push	{r7, lr}
 8019342:	b084      	sub	sp, #16
 8019344:	af00      	add	r7, sp, #0
 8019346:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	685b      	ldr	r3, [r3, #4]
 801934c:	60fb      	str	r3, [r7, #12]
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	2b00      	cmp	r3, #0
 8019352:	d01d      	beq.n	8019390 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	681a      	ldr	r2, [r3, #0]
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	33c8      	adds	r3, #200	; 0xc8
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	4610      	mov	r0, r2
 8019364:	4798      	blx	r3
 8019366:	4603      	mov	r3, r0
 8019368:	2b00      	cmp	r3, #0
 801936a:	d00d      	beq.n	8019388 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 8019372:	68fb      	ldr	r3, [r7, #12]
 8019374:	2200      	movs	r2, #0
 8019376:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	3388      	adds	r3, #136	; 0x88
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	6878      	ldr	r0, [r7, #4]
 8019382:	4798      	blx	r3
            return matchingCall;
 8019384:	68bb      	ldr	r3, [r7, #8]
 8019386:	e004      	b.n	8019392 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	685b      	ldr	r3, [r3, #4]
 801938c:	60fb      	str	r3, [r7, #12]
 801938e:	e7de      	b.n	801934e <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 8019390:	2300      	movs	r3, #0
}
 8019392:	4618      	mov	r0, r3
 8019394:	3710      	adds	r7, #16
 8019396:	46bd      	mov	sp, r7
 8019398:	bd80      	pop	{r7, pc}

0801939a <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801939a:	b580      	push	{r7, lr}
 801939c:	b084      	sub	sp, #16
 801939e:	af00      	add	r7, sp, #0
 80193a0:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	685b      	ldr	r3, [r3, #4]
 80193a6:	60fb      	str	r3, [r7, #12]
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d012      	beq.n	80193d4 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	681a      	ldr	r2, [r3, #0]
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	33cc      	adds	r3, #204	; 0xcc
 80193ba:	681b      	ldr	r3, [r3, #0]
 80193bc:	4610      	mov	r0, r2
 80193be:	4798      	blx	r3
 80193c0:	4603      	mov	r3, r0
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d002      	beq.n	80193cc <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	e004      	b.n	80193d6 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	685b      	ldr	r3, [r3, #4]
 80193d0:	60fb      	str	r3, [r7, #12]
 80193d2:	e7e9      	b.n	80193a8 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 80193d4:	2300      	movs	r3, #0
}
 80193d6:	4618      	mov	r0, r3
 80193d8:	3710      	adds	r7, #16
 80193da:	46bd      	mov	sp, r7
 80193dc:	bd80      	pop	{r7, pc}

080193de <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 80193de:	b580      	push	{r7, lr}
 80193e0:	b084      	sub	sp, #16
 80193e2:	af00      	add	r7, sp, #0
 80193e4:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	685b      	ldr	r3, [r3, #4]
 80193ea:	60fb      	str	r3, [r7, #12]
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d01d      	beq.n	801942e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	681a      	ldr	r2, [r3, #0]
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	33cc      	adds	r3, #204	; 0xcc
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	4610      	mov	r0, r2
 8019402:	4798      	blx	r3
 8019404:	4603      	mov	r3, r0
 8019406:	2b00      	cmp	r3, #0
 8019408:	d00d      	beq.n	8019426 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	2200      	movs	r2, #0
 8019414:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	3388      	adds	r3, #136	; 0x88
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	6878      	ldr	r0, [r7, #4]
 8019420:	4798      	blx	r3
            return matchingCall;
 8019422:	68bb      	ldr	r3, [r7, #8]
 8019424:	e004      	b.n	8019430 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	685b      	ldr	r3, [r3, #4]
 801942a:	60fb      	str	r3, [r7, #12]
 801942c:	e7de      	b.n	80193ec <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801942e:	2300      	movs	r3, #0
}
 8019430:	4618      	mov	r0, r3
 8019432:	3710      	adds	r7, #16
 8019434:	46bd      	mov	sp, r7
 8019436:	bd80      	pop	{r7, pc}

08019438 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 8019438:	b580      	push	{r7, lr}
 801943a:	b086      	sub	sp, #24
 801943c:	af00      	add	r7, sp, #0
 801943e:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	685b      	ldr	r3, [r3, #4]
 8019444:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 8019446:	2300      	movs	r3, #0
 8019448:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801944a:	2300      	movs	r3, #0
 801944c:	60fb      	str	r3, [r7, #12]

    while (current) {
 801944e:	697b      	ldr	r3, [r7, #20]
 8019450:	2b00      	cmp	r3, #0
 8019452:	d024      	beq.n	801949e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 8019454:	697b      	ldr	r3, [r7, #20]
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	2b00      	cmp	r3, #0
 801945a:	d11a      	bne.n	8019492 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801945c:	697b      	ldr	r3, [r7, #20]
 801945e:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 8019460:	693b      	ldr	r3, [r7, #16]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d106      	bne.n	8019474 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 8019466:	697b      	ldr	r3, [r7, #20]
 8019468:	685b      	ldr	r3, [r3, #4]
 801946a:	617b      	str	r3, [r7, #20]
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	697a      	ldr	r2, [r7, #20]
 8019470:	605a      	str	r2, [r3, #4]
 8019472:	e006      	b.n	8019482 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 8019474:	697b      	ldr	r3, [r7, #20]
 8019476:	685a      	ldr	r2, [r3, #4]
 8019478:	693b      	ldr	r3, [r7, #16]
 801947a:	605a      	str	r2, [r3, #4]
 801947c:	693b      	ldr	r3, [r7, #16]
 801947e:	685b      	ldr	r3, [r3, #4]
 8019480:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 8019482:	68fb      	ldr	r3, [r7, #12]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d0e2      	beq.n	801944e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 8019488:	2108      	movs	r1, #8
 801948a:	4618      	mov	r0, r3
 801948c:	f7ee f82e 	bl	80074ec <_ZdlPvj>
 8019490:	e7dd      	b.n	801944e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 8019492:	697b      	ldr	r3, [r7, #20]
 8019494:	613b      	str	r3, [r7, #16]
            current = current->next_;
 8019496:	697b      	ldr	r3, [r7, #20]
 8019498:	685b      	ldr	r3, [r3, #4]
 801949a:	617b      	str	r3, [r7, #20]
    while (current) {
 801949c:	e7d7      	b.n	801944e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801949e:	bf00      	nop
 80194a0:	3718      	adds	r7, #24
 80194a2:	46bd      	mov	sp, r7
 80194a4:	bd80      	pop	{r7, pc}

080194a6 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 80194a6:	b580      	push	{r7, lr}
 80194a8:	b084      	sub	sp, #16
 80194aa:	af00      	add	r7, sp, #0
 80194ac:	6078      	str	r0, [r7, #4]
    while (head_) {
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	685b      	ldr	r3, [r3, #4]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d019      	beq.n	80194ea <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	685b      	ldr	r3, [r3, #4]
 80194ba:	685b      	ldr	r3, [r3, #4]
 80194bc:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	685b      	ldr	r3, [r3, #4]
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d004      	beq.n	80194d2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 80194c8:	681a      	ldr	r2, [r3, #0]
 80194ca:	3204      	adds	r2, #4
 80194cc:	6812      	ldr	r2, [r2, #0]
 80194ce:	4618      	mov	r0, r3
 80194d0:	4790      	blx	r2
        delete head_;
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	685b      	ldr	r3, [r3, #4]
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d003      	beq.n	80194e2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 80194da:	2108      	movs	r1, #8
 80194dc:	4618      	mov	r0, r3
 80194de:	f7ee f805 	bl	80074ec <_ZdlPvj>
        head_ = next;
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	68fa      	ldr	r2, [r7, #12]
 80194e6:	605a      	str	r2, [r3, #4]
    while (head_) {
 80194e8:	e7e1      	b.n	80194ae <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 80194ea:	bf00      	nop
 80194ec:	3710      	adds	r7, #16
 80194ee:	46bd      	mov	sp, r7
 80194f0:	bd80      	pop	{r7, pc}

080194f2 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 80194f2:	b580      	push	{r7, lr}
 80194f4:	b084      	sub	sp, #16
 80194f6:	af00      	add	r7, sp, #0
 80194f8:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	685b      	ldr	r3, [r3, #4]
 80194fe:	60fb      	str	r3, [r7, #12]
 8019500:	68fb      	ldr	r3, [r7, #12]
 8019502:	2b00      	cmp	r3, #0
 8019504:	d00c      	beq.n	8019520 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	681a      	ldr	r2, [r3, #0]
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	33ec      	adds	r3, #236	; 0xec
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	4610      	mov	r0, r2
 8019516:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	685b      	ldr	r3, [r3, #4]
 801951c:	60fb      	str	r3, [r7, #12]
 801951e:	e7ef      	b.n	8019500 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 8019520:	bf00      	nop
 8019522:	3710      	adds	r7, #16
 8019524:	46bd      	mov	sp, r7
 8019526:	bd80      	pop	{r7, pc}

08019528 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 8019528:	b580      	push	{r7, lr}
 801952a:	b084      	sub	sp, #16
 801952c:	af00      	add	r7, sp, #0
 801952e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	685b      	ldr	r3, [r3, #4]
 8019534:	60fb      	str	r3, [r7, #12]
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	2b00      	cmp	r3, #0
 801953a:	d00c      	beq.n	8019556 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801953c:	68fb      	ldr	r3, [r7, #12]
 801953e:	681a      	ldr	r2, [r3, #0]
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	33e8      	adds	r3, #232	; 0xe8
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	4610      	mov	r0, r2
 801954c:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	685b      	ldr	r3, [r3, #4]
 8019552:	60fb      	str	r3, [r7, #12]
 8019554:	e7ef      	b.n	8019536 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 8019556:	bf00      	nop
 8019558:	3710      	adds	r7, #16
 801955a:	46bd      	mov	sp, r7
 801955c:	bd80      	pop	{r7, pc}

0801955e <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801955e:	b580      	push	{r7, lr}
 8019560:	b084      	sub	sp, #16
 8019562:	af00      	add	r7, sp, #0
 8019564:	6078      	str	r0, [r7, #4]
 8019566:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	685b      	ldr	r3, [r3, #4]
 801956c:	60fb      	str	r3, [r7, #12]
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	2b00      	cmp	r3, #0
 8019572:	d00d      	beq.n	8019590 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	681a      	ldr	r2, [r3, #0]
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	33dc      	adds	r3, #220	; 0xdc
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	6839      	ldr	r1, [r7, #0]
 8019584:	4610      	mov	r0, r2
 8019586:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	685b      	ldr	r3, [r3, #4]
 801958c:	60fb      	str	r3, [r7, #12]
 801958e:	e7ee      	b.n	801956e <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 8019590:	bf00      	nop
 8019592:	3710      	adds	r7, #16
 8019594:	46bd      	mov	sp, r7
 8019596:	bd80      	pop	{r7, pc}

08019598 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b084      	sub	sp, #16
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
 80195a0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	685b      	ldr	r3, [r3, #4]
 80195a6:	60fb      	str	r3, [r7, #12]
 80195a8:	68fb      	ldr	r3, [r7, #12]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d00d      	beq.n	80195ca <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	681a      	ldr	r2, [r3, #0]
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	33e0      	adds	r3, #224	; 0xe0
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	6839      	ldr	r1, [r7, #0]
 80195be:	4610      	mov	r0, r2
 80195c0:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	685b      	ldr	r3, [r3, #4]
 80195c6:	60fb      	str	r3, [r7, #12]
 80195c8:	e7ee      	b.n	80195a8 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 80195ca:	bf00      	nop
 80195cc:	3710      	adds	r7, #16
 80195ce:	46bd      	mov	sp, r7
 80195d0:	bd80      	pop	{r7, pc}
	...

080195d4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 80195d4:	b590      	push	{r4, r7, lr}
 80195d6:	b087      	sub	sp, #28
 80195d8:	af00      	add	r7, sp, #0
 80195da:	60f8      	str	r0, [r7, #12]
 80195dc:	60b9      	str	r1, [r7, #8]
 80195de:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 80195e0:	68b9      	ldr	r1, [r7, #8]
 80195e2:	68f8      	ldr	r0, [r7, #12]
 80195e4:	f7f0 fb85 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 80195e8:	f107 0310 	add.w	r3, r7, #16
 80195ec:	490f      	ldr	r1, [pc, #60]	; (801962c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 80195ee:	4618      	mov	r0, r3
 80195f0:	f7f0 fb2b 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80195f4:	f107 0310 	add.w	r3, r7, #16
 80195f8:	4619      	mov	r1, r3
 80195fa:	68f8      	ldr	r0, [r7, #12]
 80195fc:	f7f0 fee9 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 8019600:	4603      	mov	r3, r0
 8019602:	461c      	mov	r4, r3
 8019604:	f107 0310 	add.w	r3, r7, #16
 8019608:	4618      	mov	r0, r3
 801960a:	f7f0 fed6 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801960e:	2c00      	cmp	r4, #0
 8019610:	d007      	beq.n	8019622 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 8019612:	6879      	ldr	r1, [r7, #4]
 8019614:	68f8      	ldr	r0, [r7, #12]
 8019616:	f7f0 ff4d 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801961a:	4905      	ldr	r1, [pc, #20]	; (8019630 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801961c:	68f8      	ldr	r0, [r7, #12]
 801961e:	f7f0 ff5b 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 8019622:	bf00      	nop
}
 8019624:	68f8      	ldr	r0, [r7, #12]
 8019626:	371c      	adds	r7, #28
 8019628:	46bd      	mov	sp, r7
 801962a:	bd90      	pop	{r4, r7, pc}
 801962c:	08022ae0 	.word	0x08022ae0
 8019630:	08022ae4 	.word	0x08022ae4

08019634 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 8019634:	b590      	push	{r4, r7, lr}
 8019636:	b087      	sub	sp, #28
 8019638:	af00      	add	r7, sp, #0
 801963a:	60f8      	str	r0, [r7, #12]
 801963c:	60b9      	str	r1, [r7, #8]
 801963e:	607a      	str	r2, [r7, #4]
 8019640:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 8019642:	68b9      	ldr	r1, [r7, #8]
 8019644:	68f8      	ldr	r0, [r7, #12]
 8019646:	f7f0 fb54 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801964a:	f107 0310 	add.w	r3, r7, #16
 801964e:	4912      	ldr	r1, [pc, #72]	; (8019698 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 8019650:	4618      	mov	r0, r3
 8019652:	f7f0 fafa 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8019656:	f107 0310 	add.w	r3, r7, #16
 801965a:	4619      	mov	r1, r3
 801965c:	68f8      	ldr	r0, [r7, #12]
 801965e:	f7f0 fefd 	bl	800a45c <_ZneRK12SimpleStringS1_>
 8019662:	4603      	mov	r3, r0
 8019664:	461c      	mov	r4, r3
 8019666:	f107 0310 	add.w	r3, r7, #16
 801966a:	4618      	mov	r0, r3
 801966c:	f7f0 fea5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8019670:	2c00      	cmp	r4, #0
 8019672:	d003      	beq.n	801967c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 8019674:	4909      	ldr	r1, [pc, #36]	; (801969c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 8019676:	68f8      	ldr	r0, [r7, #12]
 8019678:	f7f0 ff2e 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801967c:	6879      	ldr	r1, [r7, #4]
 801967e:	68f8      	ldr	r0, [r7, #12]
 8019680:	f7f0 ff18 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 8019684:	6839      	ldr	r1, [r7, #0]
 8019686:	68f8      	ldr	r0, [r7, #12]
 8019688:	f7f0 ff14 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    return str;
 801968c:	bf00      	nop
}
 801968e:	68f8      	ldr	r0, [r7, #12]
 8019690:	371c      	adds	r7, #28
 8019692:	46bd      	mov	sp, r7
 8019694:	bd90      	pop	{r4, r7, pc}
 8019696:	bf00      	nop
 8019698:	08022ae0 	.word	0x08022ae0
 801969c:	08022aec 	.word	0x08022aec

080196a0 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 80196a0:	b580      	push	{r7, lr}
 80196a2:	b08c      	sub	sp, #48	; 0x30
 80196a4:	af00      	add	r7, sp, #0
 80196a6:	60f8      	str	r0, [r7, #12]
 80196a8:	60b9      	str	r1, [r7, #8]
 80196aa:	607a      	str	r2, [r7, #4]
    SimpleString str;
 80196ac:	f107 0314 	add.w	r3, r7, #20
 80196b0:	4929      	ldr	r1, [pc, #164]	; (8019758 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 80196b2:	4618      	mov	r0, r3
 80196b4:	f7f0 fac9 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80196b8:	68bb      	ldr	r3, [r7, #8]
 80196ba:	685b      	ldr	r3, [r3, #4]
 80196bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80196be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d038      	beq.n	8019736 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 80196c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196c6:	681a      	ldr	r2, [r3, #0]
 80196c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196ca:	681b      	ldr	r3, [r3, #0]
 80196cc:	681b      	ldr	r3, [r3, #0]
 80196ce:	33c0      	adds	r3, #192	; 0xc0
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	4610      	mov	r0, r2
 80196d4:	4798      	blx	r3
 80196d6:	4603      	mov	r3, r0
 80196d8:	f083 0301 	eor.w	r3, r3, #1
 80196dc:	b2db      	uxtb	r3, r3
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d025      	beq.n	801972e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 80196e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196e4:	6819      	ldr	r1, [r3, #0]
 80196e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	33f0      	adds	r3, #240	; 0xf0
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80196f4:	4610      	mov	r0, r2
 80196f6:	4798      	blx	r3
 80196f8:	f107 001c 	add.w	r0, r7, #28
 80196fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019700:	f107 0114 	add.w	r1, r7, #20
 8019704:	687a      	ldr	r2, [r7, #4]
 8019706:	f7ff ff95 	bl	8019634 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801970a:	f107 021c 	add.w	r2, r7, #28
 801970e:	f107 0314 	add.w	r3, r7, #20
 8019712:	4611      	mov	r1, r2
 8019714:	4618      	mov	r0, r3
 8019716:	f7f0 fb04 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801971a:	f107 031c 	add.w	r3, r7, #28
 801971e:	4618      	mov	r0, r3
 8019720:	f7f0 fe4b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8019724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019728:	4618      	mov	r0, r3
 801972a:	f7f0 fe46 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801972e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019730:	685b      	ldr	r3, [r3, #4]
 8019732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019734:	e7c3      	b.n	80196be <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	f107 0114 	add.w	r1, r7, #20
 801973c:	687a      	ldr	r2, [r7, #4]
 801973e:	4618      	mov	r0, r3
 8019740:	f7ff ff48 	bl	80195d4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 8019744:	f107 0314 	add.w	r3, r7, #20
 8019748:	4618      	mov	r0, r3
 801974a:	f7f0 fe36 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801974e:	bf00      	nop
}
 8019750:	68f8      	ldr	r0, [r7, #12]
 8019752:	3730      	adds	r7, #48	; 0x30
 8019754:	46bd      	mov	sp, r7
 8019756:	bd80      	pop	{r7, pc}
 8019758:	08022ae0 	.word	0x08022ae0

0801975c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801975c:	b580      	push	{r7, lr}
 801975e:	b08c      	sub	sp, #48	; 0x30
 8019760:	af00      	add	r7, sp, #0
 8019762:	60f8      	str	r0, [r7, #12]
 8019764:	60b9      	str	r1, [r7, #8]
 8019766:	607a      	str	r2, [r7, #4]
    SimpleString str;
 8019768:	f107 0314 	add.w	r3, r7, #20
 801976c:	4928      	ldr	r1, [pc, #160]	; (8019810 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801976e:	4618      	mov	r0, r3
 8019770:	f7f0 fa6b 	bl	8009c4a <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019774:	68bb      	ldr	r3, [r7, #8]
 8019776:	685b      	ldr	r3, [r3, #4]
 8019778:	62fb      	str	r3, [r7, #44]	; 0x2c
 801977a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801977c:	2b00      	cmp	r3, #0
 801977e:	d035      	beq.n	80197ec <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 8019780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019782:	681a      	ldr	r2, [r3, #0]
 8019784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	33c0      	adds	r3, #192	; 0xc0
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	4610      	mov	r0, r2
 8019790:	4798      	blx	r3
 8019792:	4603      	mov	r3, r0
 8019794:	2b00      	cmp	r3, #0
 8019796:	d025      	beq.n	80197e4 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 8019798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801979a:	6819      	ldr	r1, [r3, #0]
 801979c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	33f0      	adds	r3, #240	; 0xf0
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80197aa:	4610      	mov	r0, r2
 80197ac:	4798      	blx	r3
 80197ae:	f107 001c 	add.w	r0, r7, #28
 80197b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80197b6:	f107 0114 	add.w	r1, r7, #20
 80197ba:	687a      	ldr	r2, [r7, #4]
 80197bc:	f7ff ff3a 	bl	8019634 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 80197c0:	f107 021c 	add.w	r2, r7, #28
 80197c4:	f107 0314 	add.w	r3, r7, #20
 80197c8:	4611      	mov	r1, r2
 80197ca:	4618      	mov	r0, r3
 80197cc:	f7f0 faa9 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 80197d0:	f107 031c 	add.w	r3, r7, #28
 80197d4:	4618      	mov	r0, r3
 80197d6:	f7f0 fdf0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80197da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80197de:	4618      	mov	r0, r3
 80197e0:	f7f0 fdeb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80197e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197e6:	685b      	ldr	r3, [r3, #4]
 80197e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80197ea:	e7c6      	b.n	801977a <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	f107 0114 	add.w	r1, r7, #20
 80197f2:	687a      	ldr	r2, [r7, #4]
 80197f4:	4618      	mov	r0, r3
 80197f6:	f7ff feed 	bl	80195d4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 80197fa:	f107 0314 	add.w	r3, r7, #20
 80197fe:	4618      	mov	r0, r3
 8019800:	f7f0 fddb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 8019804:	bf00      	nop
}
 8019806:	68f8      	ldr	r0, [r7, #12]
 8019808:	3730      	adds	r7, #48	; 0x30
 801980a:	46bd      	mov	sp, r7
 801980c:	bd80      	pop	{r7, pc}
 801980e:	bf00      	nop
 8019810:	08022ae0 	.word	0x08022ae0

08019814 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 8019814:	b580      	push	{r7, lr}
 8019816:	b08e      	sub	sp, #56	; 0x38
 8019818:	af00      	add	r7, sp, #0
 801981a:	6078      	str	r0, [r7, #4]
 801981c:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801981e:	f107 030c 	add.w	r3, r7, #12
 8019822:	4936      	ldr	r1, [pc, #216]	; (80198fc <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 8019824:	4618      	mov	r0, r3
 8019826:	f7f0 fa10 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801982a:	683b      	ldr	r3, [r7, #0]
 801982c:	685b      	ldr	r3, [r3, #4]
 801982e:	637b      	str	r3, [r7, #52]	; 0x34
 8019830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019832:	2b00      	cmp	r3, #0
 8019834:	d044      	beq.n	80198c0 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 8019836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019838:	681a      	ldr	r2, [r3, #0]
 801983a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801983c:	681b      	ldr	r3, [r3, #0]
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	33cc      	adds	r3, #204	; 0xcc
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	4610      	mov	r0, r2
 8019846:	4798      	blx	r3
 8019848:	4603      	mov	r3, r0
 801984a:	f083 0301 	eor.w	r3, r3, #1
 801984e:	b2db      	uxtb	r3, r3
 8019850:	2b00      	cmp	r3, #0
 8019852:	d031      	beq.n	80198b8 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 8019854:	f107 031c 	add.w	r3, r7, #28
 8019858:	4928      	ldr	r1, [pc, #160]	; (80198fc <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801985a:	4618      	mov	r0, r3
 801985c:	f7f0 f9f5 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8019860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019862:	6819      	ldr	r1, [r3, #0]
 8019864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	33f4      	adds	r3, #244	; 0xf4
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8019872:	4610      	mov	r0, r2
 8019874:	4798      	blx	r3
 8019876:	f107 0014 	add.w	r0, r7, #20
 801987a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801987e:	f107 021c 	add.w	r2, r7, #28
 8019882:	f107 010c 	add.w	r1, r7, #12
 8019886:	f7ff fed5 	bl	8019634 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801988a:	f107 0214 	add.w	r2, r7, #20
 801988e:	f107 030c 	add.w	r3, r7, #12
 8019892:	4611      	mov	r1, r2
 8019894:	4618      	mov	r0, r3
 8019896:	f7f0 fa44 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801989a:	f107 0314 	add.w	r3, r7, #20
 801989e:	4618      	mov	r0, r3
 80198a0:	f7f0 fd8b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80198a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80198a8:	4618      	mov	r0, r3
 80198aa:	f7f0 fd86 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 80198ae:	f107 031c 	add.w	r3, r7, #28
 80198b2:	4618      	mov	r0, r3
 80198b4:	f7f0 fd81 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80198b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198ba:	685b      	ldr	r3, [r3, #4]
 80198bc:	637b      	str	r3, [r7, #52]	; 0x34
 80198be:	e7b7      	b.n	8019830 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 80198c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80198c4:	490d      	ldr	r1, [pc, #52]	; (80198fc <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 80198c6:	4618      	mov	r0, r3
 80198c8:	f7f0 f9bf 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80198d2:	f107 010c 	add.w	r1, r7, #12
 80198d6:	4618      	mov	r0, r3
 80198d8:	f7ff fe7c 	bl	80195d4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 80198dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80198e0:	4618      	mov	r0, r3
 80198e2:	f7f0 fd6a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    SimpleString str;
 80198e6:	f107 030c 	add.w	r3, r7, #12
 80198ea:	4618      	mov	r0, r3
 80198ec:	f7f0 fd65 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 80198f0:	bf00      	nop
}
 80198f2:	6878      	ldr	r0, [r7, #4]
 80198f4:	3738      	adds	r7, #56	; 0x38
 80198f6:	46bd      	mov	sp, r7
 80198f8:	bd80      	pop	{r7, pc}
 80198fa:	bf00      	nop
 80198fc:	08022ae0 	.word	0x08022ae0

08019900 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b084      	sub	sp, #16
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	685b      	ldr	r3, [r3, #4]
 801990c:	60fb      	str	r3, [r7, #12]
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	2b00      	cmp	r3, #0
 8019912:	d014      	beq.n	801993e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	681a      	ldr	r2, [r3, #0]
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	33d0      	adds	r3, #208	; 0xd0
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	4610      	mov	r0, r2
 8019924:	4798      	blx	r3
 8019926:	4603      	mov	r3, r0
 8019928:	f083 0301 	eor.w	r3, r3, #1
 801992c:	b2db      	uxtb	r3, r3
 801992e:	2b00      	cmp	r3, #0
 8019930:	d001      	beq.n	8019936 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 8019932:	2301      	movs	r3, #1
 8019934:	e004      	b.n	8019940 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	685b      	ldr	r3, [r3, #4]
 801993a:	60fb      	str	r3, [r7, #12]
 801993c:	e7e7      	b.n	801990e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801993e:	2300      	movs	r3, #0
}
 8019940:	4618      	mov	r0, r3
 8019942:	3710      	adds	r7, #16
 8019944:	46bd      	mov	sp, r7
 8019946:	bd80      	pop	{r7, pc}

08019948 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 8019948:	b480      	push	{r7}
 801994a:	b083      	sub	sp, #12
 801994c:	af00      	add	r7, sp, #0
 801994e:	6078      	str	r0, [r7, #4]
 8019950:	460b      	mov	r3, r1
 8019952:	70fb      	strb	r3, [r7, #3]
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	78fa      	ldrb	r2, [r7, #3]
 8019958:	711a      	strb	r2, [r3, #4]
 801995a:	bf00      	nop
 801995c:	370c      	adds	r7, #12
 801995e:	46bd      	mov	sp, r7
 8019960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019964:	4770      	bx	lr
	...

08019968 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 8019968:	b580      	push	{r7, lr}
 801996a:	b082      	sub	sp, #8
 801996c:	af00      	add	r7, sp, #0
 801996e:	6078      	str	r0, [r7, #4]
 8019970:	460b      	mov	r3, r1
 8019972:	70fb      	strb	r3, [r7, #3]
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	4618      	mov	r0, r3
 8019978:	f7ed ff6a 	bl	8007850 <_ZN14TestTerminatorC1Ev>
 801997c:	4a05      	ldr	r2, [pc, #20]	; (8019994 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	601a      	str	r2, [r3, #0]
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	78fa      	ldrb	r2, [r7, #3]
 8019986:	711a      	strb	r2, [r3, #4]
    {
    }
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	4618      	mov	r0, r3
 801998c:	3708      	adds	r7, #8
 801998e:	46bd      	mov	sp, r7
 8019990:	bd80      	pop	{r7, pc}
 8019992:	bf00      	nop
 8019994:	08024ec4 	.word	0x08024ec4

08019998 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 8019998:	b580      	push	{r7, lr}
 801999a:	b082      	sub	sp, #8
 801999c:	af00      	add	r7, sp, #0
 801999e:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	791b      	ldrb	r3, [r3, #4]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d001      	beq.n	80199ac <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 80199a8:	f7f6 f9fe 	bl	800fda8 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 80199ac:	f7f7 fd40 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80199b0:	4603      	mov	r3, r0
 80199b2:	681a      	ldr	r2, [r3, #0]
 80199b4:	6812      	ldr	r2, [r2, #0]
 80199b6:	4618      	mov	r0, r3
 80199b8:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 80199ba:	bf00      	nop
 80199bc:	3708      	adds	r7, #8
 80199be:	46bd      	mov	sp, r7
 80199c0:	bd80      	pop	{r7, pc}
	...

080199c4 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 80199c4:	b580      	push	{r7, lr}
 80199c6:	b082      	sub	sp, #8
 80199c8:	af00      	add	r7, sp, #0
 80199ca:	6078      	str	r0, [r7, #4]
    {
 80199cc:	4a05      	ldr	r2, [pc, #20]	; (80199e4 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	601a      	str	r2, [r3, #0]
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	4618      	mov	r0, r3
 80199d6:	f7f7 fdbb 	bl	8011550 <_ZN14TestTerminatorD1Ev>
    }
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	4618      	mov	r0, r3
 80199de:	3708      	adds	r7, #8
 80199e0:	46bd      	mov	sp, r7
 80199e2:	bd80      	pop	{r7, pc}
 80199e4:	08024ec4 	.word	0x08024ec4

080199e8 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 80199e8:	b580      	push	{r7, lr}
 80199ea:	b082      	sub	sp, #8
 80199ec:	af00      	add	r7, sp, #0
 80199ee:	6078      	str	r0, [r7, #4]
    }
 80199f0:	6878      	ldr	r0, [r7, #4]
 80199f2:	f7ff ffe7 	bl	80199c4 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 80199f6:	2108      	movs	r1, #8
 80199f8:	6878      	ldr	r0, [r7, #4]
 80199fa:	f7ed fd77 	bl	80074ec <_ZdlPvj>
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	4618      	mov	r0, r3
 8019a02:	3708      	adds	r7, #8
 8019a04:	46bd      	mov	sp, r7
 8019a06:	bd80      	pop	{r7, pc}

08019a08 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 8019a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a0a:	b085      	sub	sp, #20
 8019a0c:	af00      	add	r7, sp, #0
 8019a0e:	6078      	str	r0, [r7, #4]
 8019a10:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	330c      	adds	r3, #12
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	6878      	ldr	r0, [r7, #4]
 8019a1c:	4798      	blx	r3
 8019a1e:	4603      	mov	r3, r0
 8019a20:	681a      	ldr	r2, [r3, #0]
 8019a22:	321c      	adds	r2, #28
 8019a24:	6812      	ldr	r2, [r2, #0]
 8019a26:	4618      	mov	r0, r3
 8019a28:	4790      	blx	r2
 8019a2a:	4603      	mov	r3, r0
 8019a2c:	f083 0301 	eor.w	r3, r3, #1
 8019a30:	b2db      	uxtb	r3, r3
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d01d      	beq.n	8019a72 <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	330c      	adds	r3, #12
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	6878      	ldr	r0, [r7, #4]
 8019a40:	4798      	blx	r3
 8019a42:	4604      	mov	r4, r0
 8019a44:	6823      	ldr	r3, [r4, #0]
 8019a46:	339c      	adds	r3, #156	; 0x9c
 8019a48:	681d      	ldr	r5, [r3, #0]
 8019a4a:	683e      	ldr	r6, [r7, #0]
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	791a      	ldrb	r2, [r3, #4]
 8019a50:	f107 0308 	add.w	r3, r7, #8
 8019a54:	4611      	mov	r1, r2
 8019a56:	4618      	mov	r0, r3
 8019a58:	f7ff ff86 	bl	8019968 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 8019a5c:	f107 0308 	add.w	r3, r7, #8
 8019a60:	461a      	mov	r2, r3
 8019a62:	4631      	mov	r1, r6
 8019a64:	4620      	mov	r0, r4
 8019a66:	47a8      	blx	r5
 8019a68:	f107 0308 	add.w	r3, r7, #8
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	f7ff ffa9 	bl	80199c4 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 8019a72:	bf00      	nop
 8019a74:	3714      	adds	r7, #20
 8019a76:	46bd      	mov	sp, r7
 8019a78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019a7a <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 8019a7a:	b580      	push	{r7, lr}
 8019a7c:	b082      	sub	sp, #8
 8019a7e:	af00      	add	r7, sp, #0
 8019a80:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 8019a82:	f7f7 fcc5 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 8019a86:	4603      	mov	r3, r0
}
 8019a88:	4618      	mov	r0, r3
 8019a8a:	3708      	adds	r7, #8
 8019a8c:	46bd      	mov	sp, r7
 8019a8e:	bd80      	pop	{r7, pc}

08019a90 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 8019a90:	b590      	push	{r4, r7, lr}
 8019a92:	b085      	sub	sp, #20
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	6078      	str	r0, [r7, #4]
 8019a98:	6039      	str	r1, [r7, #0]
 8019a9a:	687c      	ldr	r4, [r7, #4]
 8019a9c:	f107 0308 	add.w	r3, r7, #8
 8019aa0:	490b      	ldr	r1, [pc, #44]	; (8019ad0 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 8019aa2:	4618      	mov	r0, r3
 8019aa4:	f7f0 f8d1 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8019aa8:	f107 0308 	add.w	r3, r7, #8
 8019aac:	461a      	mov	r2, r3
 8019aae:	6839      	ldr	r1, [r7, #0]
 8019ab0:	4620      	mov	r0, r4
 8019ab2:	f7f1 ff29 	bl	800b908 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8019ab6:	f107 0308 	add.w	r3, r7, #8
 8019aba:	4618      	mov	r0, r3
 8019abc:	f7f0 fc7d 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8019ac0:	4a04      	ldr	r2, [pc, #16]	; (8019ad4 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	601a      	str	r2, [r3, #0]
{
}
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	4618      	mov	r0, r3
 8019aca:	3714      	adds	r7, #20
 8019acc:	46bd      	mov	sp, r7
 8019ace:	bd90      	pop	{r4, r7, pc}
 8019ad0:	08022af0 	.word	0x08022af0
 8019ad4:	08023e50 	.word	0x08023e50

08019ad8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 8019ad8:	b5b0      	push	{r4, r5, r7, lr}
 8019ada:	b08a      	sub	sp, #40	; 0x28
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	6078      	str	r0, [r7, #4]
 8019ae0:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	332c      	adds	r3, #44	; 0x2c
 8019ae6:	492b      	ldr	r1, [pc, #172]	; (8019b94 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 8019ae8:	4618      	mov	r0, r3
 8019aea:	f7f0 fcf5 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8019af4:	683b      	ldr	r3, [r7, #0]
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	337c      	adds	r3, #124	; 0x7c
 8019afa:	681c      	ldr	r4, [r3, #0]
 8019afc:	f107 0310 	add.w	r3, r7, #16
 8019b00:	4925      	ldr	r1, [pc, #148]	; (8019b98 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 8019b02:	4618      	mov	r0, r3
 8019b04:	f7f0 f8a1 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8019b08:	f107 0308 	add.w	r3, r7, #8
 8019b0c:	f107 0210 	add.w	r2, r7, #16
 8019b10:	6839      	ldr	r1, [r7, #0]
 8019b12:	4618      	mov	r0, r3
 8019b14:	47a0      	blx	r4
 8019b16:	f107 0308 	add.w	r3, r7, #8
 8019b1a:	4619      	mov	r1, r3
 8019b1c:	4628      	mov	r0, r5
 8019b1e:	f7f0 fcc9 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 8019b22:	f107 0308 	add.w	r3, r7, #8
 8019b26:	4618      	mov	r0, r3
 8019b28:	f7f0 fc47 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8019b2c:	f107 0310 	add.w	r3, r7, #16
 8019b30:	4618      	mov	r0, r3
 8019b32:	f7f0 fc42 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	332c      	adds	r3, #44	; 0x2c
 8019b3a:	4918      	ldr	r1, [pc, #96]	; (8019b9c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	f7f0 fccb 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8019b48:	683b      	ldr	r3, [r7, #0]
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	3380      	adds	r3, #128	; 0x80
 8019b4e:	681c      	ldr	r4, [r3, #0]
 8019b50:	f107 0320 	add.w	r3, r7, #32
 8019b54:	4910      	ldr	r1, [pc, #64]	; (8019b98 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 8019b56:	4618      	mov	r0, r3
 8019b58:	f7f0 f877 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8019b5c:	f107 0318 	add.w	r3, r7, #24
 8019b60:	f107 0220 	add.w	r2, r7, #32
 8019b64:	6839      	ldr	r1, [r7, #0]
 8019b66:	4618      	mov	r0, r3
 8019b68:	47a0      	blx	r4
 8019b6a:	f107 0318 	add.w	r3, r7, #24
 8019b6e:	4619      	mov	r1, r3
 8019b70:	4628      	mov	r0, r5
 8019b72:	f7f0 fc9f 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 8019b76:	f107 0318 	add.w	r3, r7, #24
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	f7f0 fc1d 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8019b80:	f107 0320 	add.w	r3, r7, #32
 8019b84:	4618      	mov	r0, r3
 8019b86:	f7f0 fc18 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 8019b8a:	bf00      	nop
 8019b8c:	3728      	adds	r7, #40	; 0x28
 8019b8e:	46bd      	mov	sp, r7
 8019b90:	bdb0      	pop	{r4, r5, r7, pc}
 8019b92:	bf00      	nop
 8019b94:	08022b40 	.word	0x08022b40
 8019b98:	08022b6c 	.word	0x08022b6c
 8019b9c:	08022b70 	.word	0x08022b70

08019ba0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 8019ba0:	b590      	push	{r4, r7, lr}
 8019ba2:	b08f      	sub	sp, #60	; 0x3c
 8019ba4:	af00      	add	r7, sp, #0
 8019ba6:	60f8      	str	r0, [r7, #12]
 8019ba8:	60b9      	str	r1, [r7, #8]
 8019baa:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 8019bac:	f107 0310 	add.w	r3, r7, #16
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	f7ff f877 	bl	8018ca4 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 8019bb6:	f107 0310 	add.w	r3, r7, #16
 8019bba:	687a      	ldr	r2, [r7, #4]
 8019bbc:	68b9      	ldr	r1, [r7, #8]
 8019bbe:	4618      	mov	r0, r3
 8019bc0:	f7ff fa16 	bl	8018ff0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	332c      	adds	r3, #44	; 0x2c
 8019bc8:	4937      	ldr	r1, [pc, #220]	; (8019ca8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 8019bca:	4618      	mov	r0, r3
 8019bcc:	f7f0 fc84 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	332c      	adds	r3, #44	; 0x2c
 8019bd4:	68b9      	ldr	r1, [r7, #8]
 8019bd6:	4618      	mov	r0, r3
 8019bd8:	f7f0 fc6c 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	332c      	adds	r3, #44	; 0x2c
 8019be0:	4932      	ldr	r1, [pc, #200]	; (8019cac <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 8019be2:	4618      	mov	r0, r3
 8019be4:	f7f0 fc78 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019bee:	f107 0320 	add.w	r3, r7, #32
 8019bf2:	492f      	ldr	r1, [pc, #188]	; (8019cb0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 8019bf4:	4618      	mov	r0, r3
 8019bf6:	f7f0 f828 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8019bfa:	f107 0318 	add.w	r3, r7, #24
 8019bfe:	f107 0220 	add.w	r2, r7, #32
 8019c02:	f107 0110 	add.w	r1, r7, #16
 8019c06:	4618      	mov	r0, r3
 8019c08:	f7ff fd4a 	bl	80196a0 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 8019c0c:	f107 0318 	add.w	r3, r7, #24
 8019c10:	4619      	mov	r1, r3
 8019c12:	4620      	mov	r0, r4
 8019c14:	f7f0 fc4e 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 8019c18:	f107 0318 	add.w	r3, r7, #24
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f7f0 fbcc 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8019c22:	f107 0320 	add.w	r3, r7, #32
 8019c26:	4618      	mov	r0, r3
 8019c28:	f7f0 fbc7 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	332c      	adds	r3, #44	; 0x2c
 8019c30:	4920      	ldr	r1, [pc, #128]	; (8019cb4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 8019c32:	4618      	mov	r0, r3
 8019c34:	f7f0 fc50 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 8019c38:	68fb      	ldr	r3, [r7, #12]
 8019c3a:	332c      	adds	r3, #44	; 0x2c
 8019c3c:	68b9      	ldr	r1, [r7, #8]
 8019c3e:	4618      	mov	r0, r3
 8019c40:	f7f0 fc38 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	332c      	adds	r3, #44	; 0x2c
 8019c48:	4918      	ldr	r1, [pc, #96]	; (8019cac <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f7f0 fc44 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019c5a:	4915      	ldr	r1, [pc, #84]	; (8019cb0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 8019c5c:	4618      	mov	r0, r3
 8019c5e:	f7ef fff4 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8019c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019c66:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019c6a:	f107 0110 	add.w	r1, r7, #16
 8019c6e:	4618      	mov	r0, r3
 8019c70:	f7ff fd74 	bl	801975c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 8019c74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019c78:	4619      	mov	r1, r3
 8019c7a:	4620      	mov	r0, r4
 8019c7c:	f7f0 fc1a 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 8019c80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019c84:	4618      	mov	r0, r3
 8019c86:	f7f0 fb98 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8019c8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019c8e:	4618      	mov	r0, r3
 8019c90:	f7f0 fb93 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 8019c94:	f107 0310 	add.w	r3, r7, #16
 8019c98:	4618      	mov	r0, r3
 8019c9a:	f7ff f817 	bl	8018ccc <_ZN21MockExpectedCallsListD1Ev>
}
 8019c9e:	bf00      	nop
 8019ca0:	373c      	adds	r7, #60	; 0x3c
 8019ca2:	46bd      	mov	sp, r7
 8019ca4:	bd90      	pop	{r4, r7, pc}
 8019ca6:	bf00      	nop
 8019ca8:	08022b98 	.word	0x08022b98
 8019cac:	08022bd8 	.word	0x08022bd8
 8019cb0:	08022b6c 	.word	0x08022b6c
 8019cb4:	08022bdc 	.word	0x08022bdc

08019cb8 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 8019cb8:	b590      	push	{r4, r7, lr}
 8019cba:	b087      	sub	sp, #28
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	60f8      	str	r0, [r7, #12]
 8019cc0:	60b9      	str	r1, [r7, #8]
 8019cc2:	607a      	str	r2, [r7, #4]
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	68b9      	ldr	r1, [r7, #8]
 8019cc8:	4618      	mov	r0, r3
 8019cca:	f7ff fee1 	bl	8019a90 <_ZN11MockFailureC1EP10UtestShell>
 8019cce:	4a10      	ldr	r2, [pc, #64]	; (8019d10 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019cda:	f107 0310 	add.w	r3, r7, #16
 8019cde:	490d      	ldr	r1, [pc, #52]	; (8019d14 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 8019ce0:	4618      	mov	r0, r3
 8019ce2:	f7ef ffb2 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8019ce6:	f107 0310 	add.w	r3, r7, #16
 8019cea:	4619      	mov	r1, r3
 8019cec:	4620      	mov	r0, r4
 8019cee:	f7f0 f818 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 8019cf2:	f107 0310 	add.w	r3, r7, #16
 8019cf6:	4618      	mov	r0, r3
 8019cf8:	f7f0 fb5f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	6879      	ldr	r1, [r7, #4]
 8019d00:	4618      	mov	r0, r3
 8019d02:	f7ff fee9 	bl	8019ad8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	4618      	mov	r0, r3
 8019d0a:	371c      	adds	r7, #28
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	bd90      	pop	{r4, r7, pc}
 8019d10:	08023e24 	.word	0x08023e24
 8019d14:	08022c18 	.word	0x08022c18

08019d18 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 8019d18:	b590      	push	{r4, r7, lr}
 8019d1a:	b08d      	sub	sp, #52	; 0x34
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	60f8      	str	r0, [r7, #12]
 8019d20:	60b9      	str	r1, [r7, #8]
 8019d22:	607a      	str	r2, [r7, #4]
 8019d24:	603b      	str	r3, [r7, #0]
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	68b9      	ldr	r1, [r7, #8]
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	f7ff feb0 	bl	8019a90 <_ZN11MockFailureC1EP10UtestShell>
 8019d30:	4a2f      	ldr	r2, [pc, #188]	; (8019df0 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 8019d32:	68fb      	ldr	r3, [r7, #12]
 8019d34:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 8019d36:	683b      	ldr	r3, [r7, #0]
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	3310      	adds	r3, #16
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	6879      	ldr	r1, [r7, #4]
 8019d40:	6838      	ldr	r0, [r7, #0]
 8019d42:	4798      	blx	r3
 8019d44:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 8019d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d027      	beq.n	8019d9c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 8019d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d4e:	1c5a      	adds	r2, r3, #1
 8019d50:	f107 0314 	add.w	r3, r7, #20
 8019d54:	4611      	mov	r1, r2
 8019d56:	4618      	mov	r0, r3
 8019d58:	f7f1 fa00 	bl	800b15c <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019d62:	f107 0314 	add.w	r3, r7, #20
 8019d66:	4618      	mov	r0, r3
 8019d68:	f7f0 fafa 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 8019d6c:	4602      	mov	r2, r0
 8019d6e:	f107 031c 	add.w	r3, r7, #28
 8019d72:	4920      	ldr	r1, [pc, #128]	; (8019df4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 8019d74:	4618      	mov	r0, r3
 8019d76:	f7f1 f827 	bl	800adc8 <_Z16StringFromFormatPKcz>
 8019d7a:	f107 031c 	add.w	r3, r7, #28
 8019d7e:	4619      	mov	r1, r3
 8019d80:	4620      	mov	r0, r4
 8019d82:	f7ef ffce 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 8019d86:	f107 031c 	add.w	r3, r7, #28
 8019d8a:	4618      	mov	r0, r3
 8019d8c:	f7f0 fb15 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 8019d90:	f107 0314 	add.w	r3, r7, #20
 8019d94:	4618      	mov	r0, r3
 8019d96:	f7f0 fb10 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8019d9a:	e013      	b.n	8019dc4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019da6:	4914      	ldr	r1, [pc, #80]	; (8019df8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 8019da8:	4618      	mov	r0, r3
 8019daa:	f7ef ff4e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8019dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019db2:	4619      	mov	r1, r3
 8019db4:	4620      	mov	r0, r4
 8019db6:	f7ef ffb4 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 8019dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	f7f0 fafb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	332c      	adds	r3, #44	; 0x2c
 8019dc8:	6879      	ldr	r1, [r7, #4]
 8019dca:	4618      	mov	r0, r3
 8019dcc:	f7f0 fb72 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	332c      	adds	r3, #44	; 0x2c
 8019dd4:	4909      	ldr	r1, [pc, #36]	; (8019dfc <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	f7f0 fb7e 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 8019ddc:	68fb      	ldr	r3, [r7, #12]
 8019dde:	6839      	ldr	r1, [r7, #0]
 8019de0:	4618      	mov	r0, r3
 8019de2:	f7ff fe79 	bl	8019ad8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 8019de6:	68fb      	ldr	r3, [r7, #12]
 8019de8:	4618      	mov	r0, r3
 8019dea:	3734      	adds	r7, #52	; 0x34
 8019dec:	46bd      	mov	sp, r7
 8019dee:	bd90      	pop	{r4, r7, pc}
 8019df0:	080247c4 	.word	0x080247c4
 8019df4:	08022c48 	.word	0x08022c48
 8019df8:	08022c84 	.word	0x08022c84
 8019dfc:	08022bd8 	.word	0x08022bd8

08019e00 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 8019e00:	b590      	push	{r4, r7, lr}
 8019e02:	b089      	sub	sp, #36	; 0x24
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	60f8      	str	r0, [r7, #12]
 8019e08:	60b9      	str	r1, [r7, #8]
 8019e0a:	607a      	str	r2, [r7, #4]
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	68b9      	ldr	r1, [r7, #8]
 8019e10:	4618      	mov	r0, r3
 8019e12:	f7ff fe3d 	bl	8019a90 <_ZN11MockFailureC1EP10UtestShell>
 8019e16:	4a1f      	ldr	r2, [pc, #124]	; (8019e94 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 8019e1c:	f107 0310 	add.w	r3, r7, #16
 8019e20:	4618      	mov	r0, r3
 8019e22:	f7fe ff3f 	bl	8018ca4 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 8019e26:	f107 0310 	add.w	r3, r7, #16
 8019e2a:	6879      	ldr	r1, [r7, #4]
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	f7ff f909 	bl	8019044 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 8019e32:	f107 0310 	add.w	r3, r7, #16
 8019e36:	4618      	mov	r0, r3
 8019e38:	f7ff f94c 	bl	80190d4 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019e42:	f107 0318 	add.w	r3, r7, #24
 8019e46:	4914      	ldr	r1, [pc, #80]	; (8019e98 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f7ef fefe 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8019e4e:	f107 0318 	add.w	r3, r7, #24
 8019e52:	4619      	mov	r1, r3
 8019e54:	4620      	mov	r0, r4
 8019e56:	f7ef ff64 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 8019e5a:	f107 0318 	add.w	r3, r7, #24
 8019e5e:	4618      	mov	r0, r3
 8019e60:	f7f0 faab 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	332c      	adds	r3, #44	; 0x2c
 8019e68:	490c      	ldr	r1, [pc, #48]	; (8019e9c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 8019e6a:	4618      	mov	r0, r3
 8019e6c:	f7f0 fb34 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	f107 0210 	add.w	r2, r7, #16
 8019e76:	4611      	mov	r1, r2
 8019e78:	4618      	mov	r0, r3
 8019e7a:	f7ff fe2d 	bl	8019ad8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 8019e7e:	f107 0310 	add.w	r3, r7, #16
 8019e82:	4618      	mov	r0, r3
 8019e84:	f7fe ff22 	bl	8018ccc <_ZN21MockExpectedCallsListD1Ev>
}
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	4618      	mov	r0, r3
 8019e8c:	3724      	adds	r7, #36	; 0x24
 8019e8e:	46bd      	mov	sp, r7
 8019e90:	bd90      	pop	{r4, r7, pc}
 8019e92:	bf00      	nop
 8019e94:	08023df8 	.word	0x08023df8
 8019e98:	08022cb0 	.word	0x08022cb0
 8019e9c:	08022bd8 	.word	0x08022bd8

08019ea0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 8019ea0:	b590      	push	{r4, r7, lr}
 8019ea2:	b099      	sub	sp, #100	; 0x64
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	60f8      	str	r0, [r7, #12]
 8019ea8:	60b9      	str	r1, [r7, #8]
 8019eaa:	607a      	str	r2, [r7, #4]
 8019eac:	603b      	str	r3, [r7, #0]
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	68b9      	ldr	r1, [r7, #8]
 8019eb2:	4618      	mov	r0, r3
 8019eb4:	f7ff fdec 	bl	8019a90 <_ZN11MockFailureC1EP10UtestShell>
 8019eb8:	4a9e      	ldr	r2, [pc, #632]	; (801a134 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 8019ebe:	f107 0310 	add.w	r3, r7, #16
 8019ec2:	4618      	mov	r0, r3
 8019ec4:	f7fe feee 	bl	8018ca4 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 8019ec8:	f107 0310 	add.w	r3, r7, #16
 8019ecc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019ece:	6879      	ldr	r1, [r7, #4]
 8019ed0:	4618      	mov	r0, r3
 8019ed2:	f7ff f88d 	bl	8018ff0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 8019ed6:	683b      	ldr	r3, [r7, #0]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	335c      	adds	r3, #92	; 0x5c
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	f107 0218 	add.w	r2, r7, #24
 8019ee2:	6839      	ldr	r1, [r7, #0]
 8019ee4:	4610      	mov	r0, r2
 8019ee6:	4798      	blx	r3
 8019ee8:	f107 0218 	add.w	r2, r7, #24
 8019eec:	f107 0310 	add.w	r3, r7, #16
 8019ef0:	4611      	mov	r1, r2
 8019ef2:	4618      	mov	r0, r3
 8019ef4:	f7ff f948 	bl	8019188 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 8019ef8:	f107 0318 	add.w	r3, r7, #24
 8019efc:	4618      	mov	r0, r3
 8019efe:	f7f0 fa5c 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 8019f02:	f107 0310 	add.w	r3, r7, #16
 8019f06:	4618      	mov	r0, r3
 8019f08:	f7fe ff4d 	bl	8018da6 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8019f0c:	4603      	mov	r3, r0
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d037      	beq.n	8019f82 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019f18:	f107 0320 	add.w	r3, r7, #32
 8019f1c:	4986      	ldr	r1, [pc, #536]	; (801a138 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 8019f1e:	4618      	mov	r0, r3
 8019f20:	f7ef fe93 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8019f24:	f107 0320 	add.w	r3, r7, #32
 8019f28:	4619      	mov	r1, r3
 8019f2a:	4620      	mov	r0, r4
 8019f2c:	f7ef fef9 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 8019f30:	f107 0320 	add.w	r3, r7, #32
 8019f34:	4618      	mov	r0, r3
 8019f36:	f7f0 fa40 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	332c      	adds	r3, #44	; 0x2c
 8019f3e:	6879      	ldr	r1, [r7, #4]
 8019f40:	4618      	mov	r0, r3
 8019f42:	f7f0 fab7 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	332c      	adds	r3, #44	; 0x2c
 8019f4a:	497c      	ldr	r1, [pc, #496]	; (801a13c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 8019f4c:	4618      	mov	r0, r3
 8019f4e:	f7f0 fac3 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019f58:	683b      	ldr	r3, [r7, #0]
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	335c      	adds	r3, #92	; 0x5c
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019f64:	6839      	ldr	r1, [r7, #0]
 8019f66:	4610      	mov	r0, r2
 8019f68:	4798      	blx	r3
 8019f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019f6e:	4619      	mov	r1, r3
 8019f70:	4620      	mov	r0, r4
 8019f72:	f7f0 fa9f 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 8019f76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	f7f0 fa1d 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 8019f80:	e056      	b.n	801a030 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 8019f82:	68fb      	ldr	r3, [r7, #12]
 8019f84:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019f88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019f8c:	496c      	ldr	r1, [pc, #432]	; (801a140 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 8019f8e:	4618      	mov	r0, r3
 8019f90:	f7ef fe5b 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 8019f94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019f98:	4619      	mov	r1, r3
 8019f9a:	4620      	mov	r0, r4
 8019f9c:	f7ef fec1 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 8019fa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	f7f0 fa08 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019fb0:	683b      	ldr	r3, [r7, #0]
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	335c      	adds	r3, #92	; 0x5c
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8019fbc:	6839      	ldr	r1, [r7, #0]
 8019fbe:	4610      	mov	r0, r2
 8019fc0:	4798      	blx	r3
 8019fc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019fc6:	4619      	mov	r1, r3
 8019fc8:	4620      	mov	r0, r4
 8019fca:	f7f0 fa73 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 8019fce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019fd2:	4618      	mov	r0, r3
 8019fd4:	f7f0 f9f1 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 8019fd8:	68fb      	ldr	r3, [r7, #12]
 8019fda:	332c      	adds	r3, #44	; 0x2c
 8019fdc:	4959      	ldr	r1, [pc, #356]	; (801a144 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 8019fde:	4618      	mov	r0, r3
 8019fe0:	f7f0 fa7a 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	332c      	adds	r3, #44	; 0x2c
 8019fe8:	6879      	ldr	r1, [r7, #4]
 8019fea:	4618      	mov	r0, r3
 8019fec:	f7f0 fa62 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	332c      	adds	r3, #44	; 0x2c
 8019ff4:	4954      	ldr	r1, [pc, #336]	; (801a148 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 8019ff6:	4618      	mov	r0, r3
 8019ff8:	f7f0 fa6e 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a002:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a006:	6839      	ldr	r1, [r7, #0]
 801a008:	4618      	mov	r0, r3
 801a00a:	f7fd faa3 	bl	8017554 <_Z10StringFromRK14MockNamedValue>
 801a00e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a012:	4619      	mov	r1, r3
 801a014:	4620      	mov	r0, r4
 801a016:	f7f0 fa4d 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801a01a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a01e:	4618      	mov	r0, r3
 801a020:	f7f0 f9cb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	332c      	adds	r3, #44	; 0x2c
 801a028:	4948      	ldr	r1, [pc, #288]	; (801a14c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801a02a:	4618      	mov	r0, r3
 801a02c:	f7f0 fa54 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801a030:	68fb      	ldr	r3, [r7, #12]
 801a032:	332c      	adds	r3, #44	; 0x2c
 801a034:	4946      	ldr	r1, [pc, #280]	; (801a150 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801a036:	4618      	mov	r0, r3
 801a038:	f7f0 fa4e 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801a040:	6879      	ldr	r1, [r7, #4]
 801a042:	4618      	mov	r0, r3
 801a044:	f7ff fdac 	bl	8019ba0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	332c      	adds	r3, #44	; 0x2c
 801a04c:	4941      	ldr	r1, [pc, #260]	; (801a154 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801a04e:	4618      	mov	r0, r3
 801a050:	f7f0 fa42 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801a054:	68fb      	ldr	r3, [r7, #12]
 801a056:	332c      	adds	r3, #44	; 0x2c
 801a058:	6879      	ldr	r1, [r7, #4]
 801a05a:	4618      	mov	r0, r3
 801a05c:	f7f0 fa2a 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a060:	68fb      	ldr	r3, [r7, #12]
 801a062:	332c      	adds	r3, #44	; 0x2c
 801a064:	493a      	ldr	r1, [pc, #232]	; (801a150 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801a066:	4618      	mov	r0, r3
 801a068:	f7f0 fa36 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	332c      	adds	r3, #44	; 0x2c
 801a070:	4939      	ldr	r1, [pc, #228]	; (801a158 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801a072:	4618      	mov	r0, r3
 801a074:	f7f0 fa30 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801a078:	68fb      	ldr	r3, [r7, #12]
 801a07a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a07e:	683b      	ldr	r3, [r7, #0]
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	3360      	adds	r3, #96	; 0x60
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a08a:	6839      	ldr	r1, [r7, #0]
 801a08c:	4610      	mov	r0, r2
 801a08e:	4798      	blx	r3
 801a090:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a094:	4619      	mov	r1, r3
 801a096:	4620      	mov	r0, r4
 801a098:	f7f0 fa0c 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801a09c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a0a0:	4618      	mov	r0, r3
 801a0a2:	f7f0 f98a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	332c      	adds	r3, #44	; 0x2c
 801a0aa:	492c      	ldr	r1, [pc, #176]	; (801a15c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801a0ac:	4618      	mov	r0, r3
 801a0ae:	f7f0 fa13 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801a0b2:	68fb      	ldr	r3, [r7, #12]
 801a0b4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a0b8:	683b      	ldr	r3, [r7, #0]
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	335c      	adds	r3, #92	; 0x5c
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801a0c4:	6839      	ldr	r1, [r7, #0]
 801a0c6:	4610      	mov	r0, r2
 801a0c8:	4798      	blx	r3
 801a0ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a0ce:	4619      	mov	r1, r3
 801a0d0:	4620      	mov	r0, r4
 801a0d2:	f7f0 f9ef 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801a0d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a0da:	4618      	mov	r0, r3
 801a0dc:	f7f0 f96d 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	332c      	adds	r3, #44	; 0x2c
 801a0e4:	491e      	ldr	r1, [pc, #120]	; (801a160 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801a0e6:	4618      	mov	r0, r3
 801a0e8:	f7f0 f9f6 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a0f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a0f6:	6839      	ldr	r1, [r7, #0]
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	f7fd fa2b 	bl	8017554 <_Z10StringFromRK14MockNamedValue>
 801a0fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a102:	4619      	mov	r1, r3
 801a104:	4620      	mov	r0, r4
 801a106:	f7f0 f9d5 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801a10a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a10e:	4618      	mov	r0, r3
 801a110:	f7f0 f953 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801a114:	68fb      	ldr	r3, [r7, #12]
 801a116:	332c      	adds	r3, #44	; 0x2c
 801a118:	490c      	ldr	r1, [pc, #48]	; (801a14c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801a11a:	4618      	mov	r0, r3
 801a11c:	f7f0 f9dc 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801a120:	f107 0310 	add.w	r3, r7, #16
 801a124:	4618      	mov	r0, r3
 801a126:	f7fe fdd1 	bl	8018ccc <_ZN21MockExpectedCallsListD1Ev>
}
 801a12a:	68fb      	ldr	r3, [r7, #12]
 801a12c:	4618      	mov	r0, r3
 801a12e:	3764      	adds	r7, #100	; 0x64
 801a130:	46bd      	mov	sp, r7
 801a132:	bd90      	pop	{r4, r7, pc}
 801a134:	08024798 	.word	0x08024798
 801a138:	08022cd4 	.word	0x08022cd4
 801a13c:	08022d0c 	.word	0x08022d0c
 801a140:	08022d10 	.word	0x08022d10
 801a144:	08022d48 	.word	0x08022d48
 801a148:	08022d58 	.word	0x08022d58
 801a14c:	08022d60 	.word	0x08022d60
 801a150:	08022bd8 	.word	0x08022bd8
 801a154:	08022d64 	.word	0x08022d64
 801a158:	08022b6c 	.word	0x08022b6c
 801a15c:	08022d98 	.word	0x08022d98
 801a160:	08022d9c 	.word	0x08022d9c

0801a164 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801a164:	b590      	push	{r4, r7, lr}
 801a166:	b097      	sub	sp, #92	; 0x5c
 801a168:	af00      	add	r7, sp, #0
 801a16a:	60f8      	str	r0, [r7, #12]
 801a16c:	60b9      	str	r1, [r7, #8]
 801a16e:	607a      	str	r2, [r7, #4]
 801a170:	603b      	str	r3, [r7, #0]
 801a172:	68fb      	ldr	r3, [r7, #12]
 801a174:	68b9      	ldr	r1, [r7, #8]
 801a176:	4618      	mov	r0, r3
 801a178:	f7ff fc8a 	bl	8019a90 <_ZN11MockFailureC1EP10UtestShell>
 801a17c:	4a90      	ldr	r2, [pc, #576]	; (801a3c0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801a182:	f107 0310 	add.w	r3, r7, #16
 801a186:	4618      	mov	r0, r3
 801a188:	f7fe fd8c 	bl	8018ca4 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801a18c:	f107 0310 	add.w	r3, r7, #16
 801a190:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a192:	6879      	ldr	r1, [r7, #4]
 801a194:	4618      	mov	r0, r3
 801a196:	f7fe ff2b 	bl	8018ff0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801a19a:	683b      	ldr	r3, [r7, #0]
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	335c      	adds	r3, #92	; 0x5c
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	f107 0218 	add.w	r2, r7, #24
 801a1a6:	6839      	ldr	r1, [r7, #0]
 801a1a8:	4610      	mov	r0, r2
 801a1aa:	4798      	blx	r3
 801a1ac:	f107 0218 	add.w	r2, r7, #24
 801a1b0:	f107 0310 	add.w	r3, r7, #16
 801a1b4:	4611      	mov	r1, r2
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	f7ff f812 	bl	80191e0 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801a1bc:	f107 0318 	add.w	r3, r7, #24
 801a1c0:	4618      	mov	r0, r3
 801a1c2:	f7f0 f8fa 	bl	800a3ba <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801a1c6:	f107 0310 	add.w	r3, r7, #16
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	f7fe fdeb 	bl	8018da6 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801a1d0:	4603      	mov	r3, r0
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d037      	beq.n	801a246 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a1dc:	f107 0320 	add.w	r3, r7, #32
 801a1e0:	4978      	ldr	r1, [pc, #480]	; (801a3c4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	f7ef fd31 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801a1e8:	f107 0320 	add.w	r3, r7, #32
 801a1ec:	4619      	mov	r1, r3
 801a1ee:	4620      	mov	r0, r4
 801a1f0:	f7ef fd97 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801a1f4:	f107 0320 	add.w	r3, r7, #32
 801a1f8:	4618      	mov	r0, r3
 801a1fa:	f7f0 f8de 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	332c      	adds	r3, #44	; 0x2c
 801a202:	6879      	ldr	r1, [r7, #4]
 801a204:	4618      	mov	r0, r3
 801a206:	f7f0 f955 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801a20a:	68fb      	ldr	r3, [r7, #12]
 801a20c:	332c      	adds	r3, #44	; 0x2c
 801a20e:	496e      	ldr	r1, [pc, #440]	; (801a3c8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801a210:	4618      	mov	r0, r3
 801a212:	f7f0 f961 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a21c:	683b      	ldr	r3, [r7, #0]
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	335c      	adds	r3, #92	; 0x5c
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a228:	6839      	ldr	r1, [r7, #0]
 801a22a:	4610      	mov	r0, r2
 801a22c:	4798      	blx	r3
 801a22e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a232:	4619      	mov	r1, r3
 801a234:	4620      	mov	r0, r4
 801a236:	f7f0 f93d 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801a23a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a23e:	4618      	mov	r0, r3
 801a240:	f7f0 f8bb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801a244:	e059      	b.n	801a2fa <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a24c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a250:	495e      	ldr	r1, [pc, #376]	; (801a3cc <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801a252:	4618      	mov	r0, r3
 801a254:	f7ef fcf9 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801a258:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a25c:	4619      	mov	r1, r3
 801a25e:	4620      	mov	r0, r4
 801a260:	f7ef fd5f 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801a264:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a268:	4618      	mov	r0, r3
 801a26a:	f7f0 f8a6 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a274:	683b      	ldr	r3, [r7, #0]
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	3360      	adds	r3, #96	; 0x60
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a280:	6839      	ldr	r1, [r7, #0]
 801a282:	4610      	mov	r0, r2
 801a284:	4798      	blx	r3
 801a286:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a28a:	4619      	mov	r1, r3
 801a28c:	4620      	mov	r0, r4
 801a28e:	f7f0 f911 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801a292:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a296:	4618      	mov	r0, r3
 801a298:	f7f0 f88f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	332c      	adds	r3, #44	; 0x2c
 801a2a0:	494b      	ldr	r1, [pc, #300]	; (801a3d0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801a2a2:	4618      	mov	r0, r3
 801a2a4:	f7f0 f918 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a2ae:	683b      	ldr	r3, [r7, #0]
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	335c      	adds	r3, #92	; 0x5c
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a2ba:	6839      	ldr	r1, [r7, #0]
 801a2bc:	4610      	mov	r0, r2
 801a2be:	4798      	blx	r3
 801a2c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a2c4:	4619      	mov	r1, r3
 801a2c6:	4620      	mov	r0, r4
 801a2c8:	f7f0 f8f4 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801a2cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	f7f0 f872 	bl	800a3ba <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801a2d6:	68fb      	ldr	r3, [r7, #12]
 801a2d8:	332c      	adds	r3, #44	; 0x2c
 801a2da:	493e      	ldr	r1, [pc, #248]	; (801a3d4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801a2dc:	4618      	mov	r0, r3
 801a2de:	f7f0 f8fb 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	332c      	adds	r3, #44	; 0x2c
 801a2e6:	6879      	ldr	r1, [r7, #4]
 801a2e8:	4618      	mov	r0, r3
 801a2ea:	f7f0 f8e3 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	332c      	adds	r3, #44	; 0x2c
 801a2f2:	4939      	ldr	r1, [pc, #228]	; (801a3d8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801a2f4:	4618      	mov	r0, r3
 801a2f6:	f7f0 f8ef 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	332c      	adds	r3, #44	; 0x2c
 801a2fe:	4937      	ldr	r1, [pc, #220]	; (801a3dc <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801a300:	4618      	mov	r0, r3
 801a302:	f7f0 f8e9 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a30a:	6879      	ldr	r1, [r7, #4]
 801a30c:	4618      	mov	r0, r3
 801a30e:	f7ff fc47 	bl	8019ba0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	332c      	adds	r3, #44	; 0x2c
 801a316:	4932      	ldr	r1, [pc, #200]	; (801a3e0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801a318:	4618      	mov	r0, r3
 801a31a:	f7f0 f8dd 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	332c      	adds	r3, #44	; 0x2c
 801a322:	6879      	ldr	r1, [r7, #4]
 801a324:	4618      	mov	r0, r3
 801a326:	f7f0 f8c5 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a32a:	68fb      	ldr	r3, [r7, #12]
 801a32c:	332c      	adds	r3, #44	; 0x2c
 801a32e:	492b      	ldr	r1, [pc, #172]	; (801a3dc <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801a330:	4618      	mov	r0, r3
 801a332:	f7f0 f8d1 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801a336:	68fb      	ldr	r3, [r7, #12]
 801a338:	332c      	adds	r3, #44	; 0x2c
 801a33a:	492a      	ldr	r1, [pc, #168]	; (801a3e4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801a33c:	4618      	mov	r0, r3
 801a33e:	f7f0 f8cb 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801a342:	68fb      	ldr	r3, [r7, #12]
 801a344:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a348:	683b      	ldr	r3, [r7, #0]
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	3360      	adds	r3, #96	; 0x60
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a354:	6839      	ldr	r1, [r7, #0]
 801a356:	4610      	mov	r0, r2
 801a358:	4798      	blx	r3
 801a35a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a35e:	4619      	mov	r1, r3
 801a360:	4620      	mov	r0, r4
 801a362:	f7f0 f8a7 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801a366:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a36a:	4618      	mov	r0, r3
 801a36c:	f7f0 f825 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	332c      	adds	r3, #44	; 0x2c
 801a374:	491c      	ldr	r1, [pc, #112]	; (801a3e8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801a376:	4618      	mov	r0, r3
 801a378:	f7f0 f8ae 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a382:	683b      	ldr	r3, [r7, #0]
 801a384:	681b      	ldr	r3, [r3, #0]
 801a386:	335c      	adds	r3, #92	; 0x5c
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801a38e:	6839      	ldr	r1, [r7, #0]
 801a390:	4610      	mov	r0, r2
 801a392:	4798      	blx	r3
 801a394:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a398:	4619      	mov	r1, r3
 801a39a:	4620      	mov	r0, r4
 801a39c:	f7f0 f88a 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801a3a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a3a4:	4618      	mov	r0, r3
 801a3a6:	f7f0 f808 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801a3aa:	f107 0310 	add.w	r3, r7, #16
 801a3ae:	4618      	mov	r0, r3
 801a3b0:	f7fe fc8c 	bl	8018ccc <_ZN21MockExpectedCallsListD1Ev>
}
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	4618      	mov	r0, r3
 801a3b8:	375c      	adds	r7, #92	; 0x5c
 801a3ba:	46bd      	mov	sp, r7
 801a3bc:	bd90      	pop	{r4, r7, pc}
 801a3be:	bf00      	nop
 801a3c0:	0802476c 	.word	0x0802476c
 801a3c4:	08022da0 	.word	0x08022da0
 801a3c8:	08022d0c 	.word	0x08022d0c
 801a3cc:	08022de0 	.word	0x08022de0
 801a3d0:	08022e0c 	.word	0x08022e0c
 801a3d4:	08022d48 	.word	0x08022d48
 801a3d8:	08022e24 	.word	0x08022e24
 801a3dc:	08022bd8 	.word	0x08022bd8
 801a3e0:	08022e28 	.word	0x08022e28
 801a3e4:	08022b6c 	.word	0x08022b6c
 801a3e8:	08022d98 	.word	0x08022d98

0801a3ec <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a3ec:	b590      	push	{r4, r7, lr}
 801a3ee:	b08b      	sub	sp, #44	; 0x2c
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	60f8      	str	r0, [r7, #12]
 801a3f4:	60b9      	str	r1, [r7, #8]
 801a3f6:	607a      	str	r2, [r7, #4]
 801a3f8:	603b      	str	r3, [r7, #0]
 801a3fa:	68fb      	ldr	r3, [r7, #12]
 801a3fc:	68b9      	ldr	r1, [r7, #8]
 801a3fe:	4618      	mov	r0, r3
 801a400:	f7ff fb46 	bl	8019a90 <_ZN11MockFailureC1EP10UtestShell>
 801a404:	4a30      	ldr	r2, [pc, #192]	; (801a4c8 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801a406:	68fb      	ldr	r3, [r7, #12]
 801a408:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801a40a:	f107 0310 	add.w	r3, r7, #16
 801a40e:	4618      	mov	r0, r3
 801a410:	f7fe fc48 	bl	8018ca4 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801a414:	f107 0310 	add.w	r3, r7, #16
 801a418:	683a      	ldr	r2, [r7, #0]
 801a41a:	6879      	ldr	r1, [r7, #4]
 801a41c:	4618      	mov	r0, r3
 801a41e:	f7fe fde7 	bl	8018ff0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a428:	f107 0318 	add.w	r3, r7, #24
 801a42c:	4927      	ldr	r1, [pc, #156]	; (801a4cc <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801a42e:	4618      	mov	r0, r3
 801a430:	f7ef fc0b 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801a434:	f107 0318 	add.w	r3, r7, #24
 801a438:	4619      	mov	r1, r3
 801a43a:	4620      	mov	r0, r4
 801a43c:	f7ef fc71 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801a440:	f107 0318 	add.w	r3, r7, #24
 801a444:	4618      	mov	r0, r3
 801a446:	f7ef ffb8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801a44a:	68fb      	ldr	r3, [r7, #12]
 801a44c:	332c      	adds	r3, #44	; 0x2c
 801a44e:	6879      	ldr	r1, [r7, #4]
 801a450:	4618      	mov	r0, r3
 801a452:	f7f0 f82f 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	332c      	adds	r3, #44	; 0x2c
 801a45a:	491d      	ldr	r1, [pc, #116]	; (801a4d0 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801a45c:	4618      	mov	r0, r3
 801a45e:	f7f0 f83b 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a462:	68fb      	ldr	r3, [r7, #12]
 801a464:	683a      	ldr	r2, [r7, #0]
 801a466:	6879      	ldr	r1, [r7, #4]
 801a468:	4618      	mov	r0, r3
 801a46a:	f7ff fb99 	bl	8019ba0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801a46e:	68fb      	ldr	r3, [r7, #12]
 801a470:	332c      	adds	r3, #44	; 0x2c
 801a472:	4918      	ldr	r1, [pc, #96]	; (801a4d4 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801a474:	4618      	mov	r0, r3
 801a476:	f7f0 f82f 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801a47a:	68fb      	ldr	r3, [r7, #12]
 801a47c:	332c      	adds	r3, #44	; 0x2c
 801a47e:	4916      	ldr	r1, [pc, #88]	; (801a4d8 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801a480:	4618      	mov	r0, r3
 801a482:	f7f0 f829 	bl	800a4d8 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a48c:	f107 0320 	add.w	r3, r7, #32
 801a490:	f107 0210 	add.w	r2, r7, #16
 801a494:	4611      	mov	r1, r2
 801a496:	4618      	mov	r0, r3
 801a498:	f7ff f9bc 	bl	8019814 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801a49c:	f107 0320 	add.w	r3, r7, #32
 801a4a0:	4619      	mov	r1, r3
 801a4a2:	4620      	mov	r0, r4
 801a4a4:	f7f0 f806 	bl	800a4b4 <_ZN12SimpleStringpLERKS_>
 801a4a8:	f107 0320 	add.w	r3, r7, #32
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	f7ef ff84 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801a4b2:	f107 0310 	add.w	r3, r7, #16
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	f7fe fc08 	bl	8018ccc <_ZN21MockExpectedCallsListD1Ev>
}
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	4618      	mov	r0, r3
 801a4c0:	372c      	adds	r7, #44	; 0x2c
 801a4c2:	46bd      	mov	sp, r7
 801a4c4:	bd90      	pop	{r4, r7, pc}
 801a4c6:	bf00      	nop
 801a4c8:	08024740 	.word	0x08024740
 801a4cc:	08022e64 	.word	0x08022e64
 801a4d0:	08022e94 	.word	0x08022e94
 801a4d4:	08022ea8 	.word	0x08022ea8
 801a4d8:	08022b6c 	.word	0x08022b6c

0801a4dc <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801a4dc:	b590      	push	{r4, r7, lr}
 801a4de:	b087      	sub	sp, #28
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	60f8      	str	r0, [r7, #12]
 801a4e4:	60b9      	str	r1, [r7, #8]
 801a4e6:	607a      	str	r2, [r7, #4]
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	68b9      	ldr	r1, [r7, #8]
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	f7ff facf 	bl	8019a90 <_ZN11MockFailureC1EP10UtestShell>
 801a4f2:	4a10      	ldr	r2, [pc, #64]	; (801a534 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a4fe:	6878      	ldr	r0, [r7, #4]
 801a500:	f7ef ff2e 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801a504:	4602      	mov	r2, r0
 801a506:	f107 0310 	add.w	r3, r7, #16
 801a50a:	490b      	ldr	r1, [pc, #44]	; (801a538 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801a50c:	4618      	mov	r0, r3
 801a50e:	f7f0 fc5b 	bl	800adc8 <_Z16StringFromFormatPKcz>
 801a512:	f107 0310 	add.w	r3, r7, #16
 801a516:	4619      	mov	r1, r3
 801a518:	4620      	mov	r0, r4
 801a51a:	f7ef fc02 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801a51e:	f107 0310 	add.w	r3, r7, #16
 801a522:	4618      	mov	r0, r3
 801a524:	f7ef ff49 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 801a528:	68fb      	ldr	r3, [r7, #12]
 801a52a:	4618      	mov	r0, r3
 801a52c:	371c      	adds	r7, #28
 801a52e:	46bd      	mov	sp, r7
 801a530:	bd90      	pop	{r4, r7, pc}
 801a532:	bf00      	nop
 801a534:	08024714 	.word	0x08024714
 801a538:	08022ed4 	.word	0x08022ed4

0801a53c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801a53c:	b590      	push	{r4, r7, lr}
 801a53e:	b087      	sub	sp, #28
 801a540:	af00      	add	r7, sp, #0
 801a542:	60f8      	str	r0, [r7, #12]
 801a544:	60b9      	str	r1, [r7, #8]
 801a546:	607a      	str	r2, [r7, #4]
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	68b9      	ldr	r1, [r7, #8]
 801a54c:	4618      	mov	r0, r3
 801a54e:	f7ff fa9f 	bl	8019a90 <_ZN11MockFailureC1EP10UtestShell>
 801a552:	4a10      	ldr	r2, [pc, #64]	; (801a594 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801a558:	68fb      	ldr	r3, [r7, #12]
 801a55a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a55e:	6878      	ldr	r0, [r7, #4]
 801a560:	f7ef fefe 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801a564:	4602      	mov	r2, r0
 801a566:	f107 0310 	add.w	r3, r7, #16
 801a56a:	490b      	ldr	r1, [pc, #44]	; (801a598 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801a56c:	4618      	mov	r0, r3
 801a56e:	f7f0 fc2b 	bl	800adc8 <_Z16StringFromFormatPKcz>
 801a572:	f107 0310 	add.w	r3, r7, #16
 801a576:	4619      	mov	r1, r3
 801a578:	4620      	mov	r0, r4
 801a57a:	f7ef fbd2 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801a57e:	f107 0310 	add.w	r3, r7, #16
 801a582:	4618      	mov	r0, r3
 801a584:	f7ef ff19 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	4618      	mov	r0, r3
 801a58c:	371c      	adds	r7, #28
 801a58e:	46bd      	mov	sp, r7
 801a590:	bd90      	pop	{r4, r7, pc}
 801a592:	bf00      	nop
 801a594:	080246e8 	.word	0x080246e8
 801a598:	08022f2c 	.word	0x08022f2c

0801a59c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a59c:	b590      	push	{r4, r7, lr}
 801a59e:	b087      	sub	sp, #28
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	60f8      	str	r0, [r7, #12]
 801a5a4:	60b9      	str	r1, [r7, #8]
 801a5a6:	607a      	str	r2, [r7, #4]
 801a5a8:	603b      	str	r3, [r7, #0]
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	68b9      	ldr	r1, [r7, #8]
 801a5ae:	4618      	mov	r0, r3
 801a5b0:	f7ff fa6e 	bl	8019a90 <_ZN11MockFailureC1EP10UtestShell>
 801a5b4:	4a12      	ldr	r2, [pc, #72]	; (801a600 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801a5b6:	68fb      	ldr	r3, [r7, #12]
 801a5b8:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801a5ba:	68fb      	ldr	r3, [r7, #12]
 801a5bc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801a5c0:	6878      	ldr	r0, [r7, #4]
 801a5c2:	f7ef fecd 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801a5c6:	4602      	mov	r2, r0
 801a5c8:	f107 0010 	add.w	r0, r7, #16
 801a5cc:	683b      	ldr	r3, [r7, #0]
 801a5ce:	490d      	ldr	r1, [pc, #52]	; (801a604 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801a5d0:	f7f0 fbfa 	bl	800adc8 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801a5d4:	f107 0310 	add.w	r3, r7, #16
 801a5d8:	4619      	mov	r1, r3
 801a5da:	4620      	mov	r0, r4
 801a5dc:	f7ef fba1 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801a5e0:	f107 0310 	add.w	r3, r7, #16
 801a5e4:	4618      	mov	r0, r3
 801a5e6:	f7ef fee8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a5ee:	6879      	ldr	r1, [r7, #4]
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	f7ff fad5 	bl	8019ba0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801a5f6:	68fb      	ldr	r3, [r7, #12]
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	371c      	adds	r7, #28
 801a5fc:	46bd      	mov	sp, r7
 801a5fe:	bd90      	pop	{r4, r7, pc}
 801a600:	080246bc 	.word	0x080246bc
 801a604:	08022f7c 	.word	0x08022f7c

0801a608 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a608:	b590      	push	{r4, r7, lr}
 801a60a:	b087      	sub	sp, #28
 801a60c:	af00      	add	r7, sp, #0
 801a60e:	60f8      	str	r0, [r7, #12]
 801a610:	60b9      	str	r1, [r7, #8]
 801a612:	607a      	str	r2, [r7, #4]
 801a614:	603b      	str	r3, [r7, #0]
 801a616:	68fb      	ldr	r3, [r7, #12]
 801a618:	68b9      	ldr	r1, [r7, #8]
 801a61a:	4618      	mov	r0, r3
 801a61c:	f7ff fa38 	bl	8019a90 <_ZN11MockFailureC1EP10UtestShell>
 801a620:	4a12      	ldr	r2, [pc, #72]	; (801a66c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801a622:	68fb      	ldr	r3, [r7, #12]
 801a624:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801a626:	68fb      	ldr	r3, [r7, #12]
 801a628:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a62c:	6878      	ldr	r0, [r7, #4]
 801a62e:	f7ef fe97 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801a632:	4602      	mov	r2, r0
 801a634:	f107 0310 	add.w	r3, r7, #16
 801a638:	490d      	ldr	r1, [pc, #52]	; (801a670 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801a63a:	4618      	mov	r0, r3
 801a63c:	f7f0 fbc4 	bl	800adc8 <_Z16StringFromFormatPKcz>
 801a640:	f107 0310 	add.w	r3, r7, #16
 801a644:	4619      	mov	r1, r3
 801a646:	4620      	mov	r0, r4
 801a648:	f7ef fb6b 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801a64c:	f107 0310 	add.w	r3, r7, #16
 801a650:	4618      	mov	r0, r3
 801a652:	f7ef feb2 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	683a      	ldr	r2, [r7, #0]
 801a65a:	6879      	ldr	r1, [r7, #4]
 801a65c:	4618      	mov	r0, r3
 801a65e:	f7ff fa9f 	bl	8019ba0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	4618      	mov	r0, r3
 801a666:	371c      	adds	r7, #28
 801a668:	46bd      	mov	sp, r7
 801a66a:	bd90      	pop	{r4, r7, pc}
 801a66c:	08024690 	.word	0x08024690
 801a670:	08022fe0 	.word	0x08022fe0

0801a674 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801a674:	b480      	push	{r7}
 801a676:	b083      	sub	sp, #12
 801a678:	af00      	add	r7, sp, #0
 801a67a:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801a67c:	4a04      	ldr	r2, [pc, #16]	; (801a690 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	6013      	str	r3, [r2, #0]
}
 801a682:	bf00      	nop
 801a684:	370c      	adds	r7, #12
 801a686:	46bd      	mov	sp, r7
 801a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a68c:	4770      	bx	lr
 801a68e:	bf00      	nop
 801a690:	20000c90 	.word	0x20000c90

0801a694 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801a694:	b580      	push	{r7, lr}
 801a696:	b082      	sub	sp, #8
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
 801a69c:	6039      	str	r1, [r7, #0]
 801a69e:	4a10      	ldr	r2, [pc, #64]	; (801a6e0 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	601a      	str	r2, [r3, #0]
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	3304      	adds	r3, #4
 801a6a8:	6839      	ldr	r1, [r7, #0]
 801a6aa:	4618      	mov	r0, r3
 801a6ac:	f7ef fb21 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	330c      	adds	r3, #12
 801a6b4:	490b      	ldr	r1, [pc, #44]	; (801a6e4 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801a6b6:	4618      	mov	r0, r3
 801a6b8:	f7ef fac7 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	2200      	movs	r2, #0
 801a6c0:	629a      	str	r2, [r3, #40]	; 0x28
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	2200      	movs	r2, #0
 801a6c6:	62da      	str	r2, [r3, #44]	; 0x2c
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	2200      	movs	r2, #0
 801a6cc:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	2200      	movs	r2, #0
 801a6d2:	619a      	str	r2, [r3, #24]
}
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	4618      	mov	r0, r3
 801a6d8:	3708      	adds	r7, #8
 801a6da:	46bd      	mov	sp, r7
 801a6dc:	bd80      	pop	{r7, pc}
 801a6de:	bf00      	nop
 801a6e0:	08024f18 	.word	0x08024f18
 801a6e4:	08023030 	.word	0x08023030

0801a6e8 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b082      	sub	sp, #8
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	6078      	str	r0, [r7, #4]
 801a6f0:	4a08      	ldr	r2, [pc, #32]	; (801a714 <_ZN14MockNamedValueD1Ev+0x2c>)
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	601a      	str	r2, [r3, #0]
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	330c      	adds	r3, #12
 801a6fa:	4618      	mov	r0, r3
 801a6fc:	f7ef fe5d 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	3304      	adds	r3, #4
 801a704:	4618      	mov	r0, r3
 801a706:	f7ef fe58 	bl	800a3ba <_ZN12SimpleStringD1Ev>
{
}
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	4618      	mov	r0, r3
 801a70e:	3708      	adds	r7, #8
 801a710:	46bd      	mov	sp, r7
 801a712:	bd80      	pop	{r7, pc}
 801a714:	08024f18 	.word	0x08024f18

0801a718 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801a718:	b580      	push	{r7, lr}
 801a71a:	b082      	sub	sp, #8
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	6078      	str	r0, [r7, #4]
}
 801a720:	6878      	ldr	r0, [r7, #4]
 801a722:	f7ff ffe1 	bl	801a6e8 <_ZN14MockNamedValueD1Ev>
 801a726:	2138      	movs	r1, #56	; 0x38
 801a728:	6878      	ldr	r0, [r7, #4]
 801a72a:	f7ec fedf 	bl	80074ec <_ZdlPvj>
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	4618      	mov	r0, r3
 801a732:	3708      	adds	r7, #8
 801a734:	46bd      	mov	sp, r7
 801a736:	bd80      	pop	{r7, pc}

0801a738 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801a738:	b590      	push	{r4, r7, lr}
 801a73a:	b085      	sub	sp, #20
 801a73c:	af00      	add	r7, sp, #0
 801a73e:	6078      	str	r0, [r7, #4]
 801a740:	460b      	mov	r3, r1
 801a742:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	f103 040c 	add.w	r4, r3, #12
 801a74a:	f107 0308 	add.w	r3, r7, #8
 801a74e:	490b      	ldr	r1, [pc, #44]	; (801a77c <_ZN14MockNamedValue8setValueEb+0x44>)
 801a750:	4618      	mov	r0, r3
 801a752:	f7ef fa7a 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801a756:	f107 0308 	add.w	r3, r7, #8
 801a75a:	4619      	mov	r1, r3
 801a75c:	4620      	mov	r0, r4
 801a75e:	f7ef fae0 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801a762:	f107 0308 	add.w	r3, r7, #8
 801a766:	4618      	mov	r0, r3
 801a768:	f7ef fe27 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	78fa      	ldrb	r2, [r7, #3]
 801a770:	761a      	strb	r2, [r3, #24]
}
 801a772:	bf00      	nop
 801a774:	3714      	adds	r7, #20
 801a776:	46bd      	mov	sp, r7
 801a778:	bd90      	pop	{r4, r7, pc}
 801a77a:	bf00      	nop
 801a77c:	08023034 	.word	0x08023034

0801a780 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801a780:	b590      	push	{r4, r7, lr}
 801a782:	b085      	sub	sp, #20
 801a784:	af00      	add	r7, sp, #0
 801a786:	6078      	str	r0, [r7, #4]
 801a788:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	f103 040c 	add.w	r4, r3, #12
 801a790:	f107 0308 	add.w	r3, r7, #8
 801a794:	490a      	ldr	r1, [pc, #40]	; (801a7c0 <_ZN14MockNamedValue8setValueEj+0x40>)
 801a796:	4618      	mov	r0, r3
 801a798:	f7ef fa57 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801a79c:	f107 0308 	add.w	r3, r7, #8
 801a7a0:	4619      	mov	r1, r3
 801a7a2:	4620      	mov	r0, r4
 801a7a4:	f7ef fabd 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801a7a8:	f107 0308 	add.w	r3, r7, #8
 801a7ac:	4618      	mov	r0, r3
 801a7ae:	f7ef fe04 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	683a      	ldr	r2, [r7, #0]
 801a7b6:	619a      	str	r2, [r3, #24]
}
 801a7b8:	bf00      	nop
 801a7ba:	3714      	adds	r7, #20
 801a7bc:	46bd      	mov	sp, r7
 801a7be:	bd90      	pop	{r4, r7, pc}
 801a7c0:	0802303c 	.word	0x0802303c

0801a7c4 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801a7c4:	b590      	push	{r4, r7, lr}
 801a7c6:	b085      	sub	sp, #20
 801a7c8:	af00      	add	r7, sp, #0
 801a7ca:	6078      	str	r0, [r7, #4]
 801a7cc:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	f103 040c 	add.w	r4, r3, #12
 801a7d4:	f107 0308 	add.w	r3, r7, #8
 801a7d8:	490a      	ldr	r1, [pc, #40]	; (801a804 <_ZN14MockNamedValue8setValueEi+0x40>)
 801a7da:	4618      	mov	r0, r3
 801a7dc:	f7ef fa35 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801a7e0:	f107 0308 	add.w	r3, r7, #8
 801a7e4:	4619      	mov	r1, r3
 801a7e6:	4620      	mov	r0, r4
 801a7e8:	f7ef fa9b 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801a7ec:	f107 0308 	add.w	r3, r7, #8
 801a7f0:	4618      	mov	r0, r3
 801a7f2:	f7ef fde2 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	683a      	ldr	r2, [r7, #0]
 801a7fa:	619a      	str	r2, [r3, #24]
}
 801a7fc:	bf00      	nop
 801a7fe:	3714      	adds	r7, #20
 801a800:	46bd      	mov	sp, r7
 801a802:	bd90      	pop	{r4, r7, pc}
 801a804:	08023030 	.word	0x08023030

0801a808 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801a808:	b590      	push	{r4, r7, lr}
 801a80a:	b085      	sub	sp, #20
 801a80c:	af00      	add	r7, sp, #0
 801a80e:	6078      	str	r0, [r7, #4]
 801a810:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	f103 040c 	add.w	r4, r3, #12
 801a818:	f107 0308 	add.w	r3, r7, #8
 801a81c:	490a      	ldr	r1, [pc, #40]	; (801a848 <_ZN14MockNamedValue8setValueEl+0x40>)
 801a81e:	4618      	mov	r0, r3
 801a820:	f7ef fa13 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801a824:	f107 0308 	add.w	r3, r7, #8
 801a828:	4619      	mov	r1, r3
 801a82a:	4620      	mov	r0, r4
 801a82c:	f7ef fa79 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801a830:	f107 0308 	add.w	r3, r7, #8
 801a834:	4618      	mov	r0, r3
 801a836:	f7ef fdc0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	683a      	ldr	r2, [r7, #0]
 801a83e:	619a      	str	r2, [r3, #24]
}
 801a840:	bf00      	nop
 801a842:	3714      	adds	r7, #20
 801a844:	46bd      	mov	sp, r7
 801a846:	bd90      	pop	{r4, r7, pc}
 801a848:	0802304c 	.word	0x0802304c

0801a84c <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801a84c:	b590      	push	{r4, r7, lr}
 801a84e:	b085      	sub	sp, #20
 801a850:	af00      	add	r7, sp, #0
 801a852:	6078      	str	r0, [r7, #4]
 801a854:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	f103 040c 	add.w	r4, r3, #12
 801a85c:	f107 0308 	add.w	r3, r7, #8
 801a860:	490a      	ldr	r1, [pc, #40]	; (801a88c <_ZN14MockNamedValue8setValueEm+0x40>)
 801a862:	4618      	mov	r0, r3
 801a864:	f7ef f9f1 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801a868:	f107 0308 	add.w	r3, r7, #8
 801a86c:	4619      	mov	r1, r3
 801a86e:	4620      	mov	r0, r4
 801a870:	f7ef fa57 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801a874:	f107 0308 	add.w	r3, r7, #8
 801a878:	4618      	mov	r0, r3
 801a87a:	f7ef fd9e 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	683a      	ldr	r2, [r7, #0]
 801a882:	619a      	str	r2, [r3, #24]
}
 801a884:	bf00      	nop
 801a886:	3714      	adds	r7, #20
 801a888:	46bd      	mov	sp, r7
 801a88a:	bd90      	pop	{r4, r7, pc}
 801a88c:	08023058 	.word	0x08023058

0801a890 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801a890:	b5b0      	push	{r4, r5, r7, lr}
 801a892:	b086      	sub	sp, #24
 801a894:	af02      	add	r7, sp, #8
 801a896:	60f8      	str	r0, [r7, #12]
 801a898:	1d3b      	adds	r3, r7, #4
 801a89a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801a89e:	f7f6 fdb7 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801a8a2:	4604      	mov	r4, r0
 801a8a4:	6823      	ldr	r3, [r4, #0]
 801a8a6:	3368      	adds	r3, #104	; 0x68
 801a8a8:	681d      	ldr	r5, [r3, #0]
 801a8aa:	f7f6 fdc1 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a8ae:	4603      	mov	r3, r0
 801a8b0:	9300      	str	r3, [sp, #0]
 801a8b2:	2367      	movs	r3, #103	; 0x67
 801a8b4:	4a03      	ldr	r2, [pc, #12]	; (801a8c4 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801a8b6:	4904      	ldr	r1, [pc, #16]	; (801a8c8 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801a8b8:	4620      	mov	r0, r4
 801a8ba:	47a8      	blx	r5
}
 801a8bc:	bf00      	nop
 801a8be:	3710      	adds	r7, #16
 801a8c0:	46bd      	mov	sp, r7
 801a8c2:	bdb0      	pop	{r4, r5, r7, pc}
 801a8c4:	0802306c 	.word	0x0802306c
 801a8c8:	08023088 	.word	0x08023088

0801a8cc <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801a8cc:	b5b0      	push	{r4, r5, r7, lr}
 801a8ce:	b086      	sub	sp, #24
 801a8d0:	af02      	add	r7, sp, #8
 801a8d2:	60f8      	str	r0, [r7, #12]
 801a8d4:	1d3b      	adds	r3, r7, #4
 801a8d6:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801a8da:	f7f6 fd99 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801a8de:	4604      	mov	r4, r0
 801a8e0:	6823      	ldr	r3, [r4, #0]
 801a8e2:	3368      	adds	r3, #104	; 0x68
 801a8e4:	681d      	ldr	r5, [r3, #0]
 801a8e6:	f7f6 fda3 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a8ea:	4603      	mov	r3, r0
 801a8ec:	9300      	str	r3, [sp, #0]
 801a8ee:	236c      	movs	r3, #108	; 0x6c
 801a8f0:	4a03      	ldr	r2, [pc, #12]	; (801a900 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801a8f2:	4904      	ldr	r1, [pc, #16]	; (801a904 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801a8f4:	4620      	mov	r0, r4
 801a8f6:	47a8      	blx	r5
}
 801a8f8:	bf00      	nop
 801a8fa:	3710      	adds	r7, #16
 801a8fc:	46bd      	mov	sp, r7
 801a8fe:	bdb0      	pop	{r4, r5, r7, pc}
 801a900:	0802306c 	.word	0x0802306c
 801a904:	080230a8 	.word	0x080230a8

0801a908 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801a908:	b580      	push	{r7, lr}
 801a90a:	b084      	sub	sp, #16
 801a90c:	af00      	add	r7, sp, #0
 801a90e:	60f8      	str	r0, [r7, #12]
 801a910:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	3328      	adds	r3, #40	; 0x28
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801a930 <_ZN14MockNamedValue8setValueEd+0x28>
 801a920:	ed97 0b00 	vldr	d0, [r7]
 801a924:	68f8      	ldr	r0, [r7, #12]
 801a926:	4798      	blx	r3
}
 801a928:	bf00      	nop
 801a92a:	3710      	adds	r7, #16
 801a92c:	46bd      	mov	sp, r7
 801a92e:	bd80      	pop	{r7, pc}
 801a930:	47ae147b 	.word	0x47ae147b
 801a934:	3f747ae1 	.word	0x3f747ae1

0801a938 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801a938:	b590      	push	{r4, r7, lr}
 801a93a:	b089      	sub	sp, #36	; 0x24
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	6178      	str	r0, [r7, #20]
 801a940:	ed87 0b02 	vstr	d0, [r7, #8]
 801a944:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801a948:	697b      	ldr	r3, [r7, #20]
 801a94a:	f103 040c 	add.w	r4, r3, #12
 801a94e:	f107 0318 	add.w	r3, r7, #24
 801a952:	490e      	ldr	r1, [pc, #56]	; (801a98c <_ZN14MockNamedValue8setValueEdd+0x54>)
 801a954:	4618      	mov	r0, r3
 801a956:	f7ef f978 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801a95a:	f107 0318 	add.w	r3, r7, #24
 801a95e:	4619      	mov	r1, r3
 801a960:	4620      	mov	r0, r4
 801a962:	f7ef f9de 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801a966:	f107 0318 	add.w	r3, r7, #24
 801a96a:	4618      	mov	r0, r3
 801a96c:	f7ef fd25 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801a970:	6979      	ldr	r1, [r7, #20]
 801a972:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801a976:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801a97a:	6979      	ldr	r1, [r7, #20]
 801a97c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a980:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801a984:	bf00      	nop
 801a986:	3724      	adds	r7, #36	; 0x24
 801a988:	46bd      	mov	sp, r7
 801a98a:	bd90      	pop	{r4, r7, pc}
 801a98c:	080230d4 	.word	0x080230d4

0801a990 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801a990:	b590      	push	{r4, r7, lr}
 801a992:	b085      	sub	sp, #20
 801a994:	af00      	add	r7, sp, #0
 801a996:	6078      	str	r0, [r7, #4]
 801a998:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	f103 040c 	add.w	r4, r3, #12
 801a9a0:	f107 0308 	add.w	r3, r7, #8
 801a9a4:	490a      	ldr	r1, [pc, #40]	; (801a9d0 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801a9a6:	4618      	mov	r0, r3
 801a9a8:	f7ef f94f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801a9ac:	f107 0308 	add.w	r3, r7, #8
 801a9b0:	4619      	mov	r1, r3
 801a9b2:	4620      	mov	r0, r4
 801a9b4:	f7ef f9b5 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801a9b8:	f107 0308 	add.w	r3, r7, #8
 801a9bc:	4618      	mov	r0, r3
 801a9be:	f7ef fcfc 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	683a      	ldr	r2, [r7, #0]
 801a9c6:	619a      	str	r2, [r3, #24]
}
 801a9c8:	bf00      	nop
 801a9ca:	3714      	adds	r7, #20
 801a9cc:	46bd      	mov	sp, r7
 801a9ce:	bd90      	pop	{r4, r7, pc}
 801a9d0:	080230dc 	.word	0x080230dc

0801a9d4 <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801a9d4:	b590      	push	{r4, r7, lr}
 801a9d6:	b085      	sub	sp, #20
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	6078      	str	r0, [r7, #4]
 801a9dc:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	f103 040c 	add.w	r4, r3, #12
 801a9e4:	f107 0308 	add.w	r3, r7, #8
 801a9e8:	490a      	ldr	r1, [pc, #40]	; (801aa14 <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	f7ef f92d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801a9f0:	f107 0308 	add.w	r3, r7, #8
 801a9f4:	4619      	mov	r1, r3
 801a9f6:	4620      	mov	r0, r4
 801a9f8:	f7ef f993 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801a9fc:	f107 0308 	add.w	r3, r7, #8
 801aa00:	4618      	mov	r0, r3
 801aa02:	f7ef fcda 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	683a      	ldr	r2, [r7, #0]
 801aa0a:	619a      	str	r2, [r3, #24]
}
 801aa0c:	bf00      	nop
 801aa0e:	3714      	adds	r7, #20
 801aa10:	46bd      	mov	sp, r7
 801aa12:	bd90      	pop	{r4, r7, pc}
 801aa14:	080230e4 	.word	0x080230e4

0801aa18 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801aa18:	b590      	push	{r4, r7, lr}
 801aa1a:	b085      	sub	sp, #20
 801aa1c:	af00      	add	r7, sp, #0
 801aa1e:	6078      	str	r0, [r7, #4]
 801aa20:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	f103 040c 	add.w	r4, r3, #12
 801aa28:	f107 0308 	add.w	r3, r7, #8
 801aa2c:	490a      	ldr	r1, [pc, #40]	; (801aa58 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801aa2e:	4618      	mov	r0, r3
 801aa30:	f7ef f90b 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801aa34:	f107 0308 	add.w	r3, r7, #8
 801aa38:	4619      	mov	r1, r3
 801aa3a:	4620      	mov	r0, r4
 801aa3c:	f7ef f971 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801aa40:	f107 0308 	add.w	r3, r7, #8
 801aa44:	4618      	mov	r0, r3
 801aa46:	f7ef fcb8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	683a      	ldr	r2, [r7, #0]
 801aa4e:	619a      	str	r2, [r3, #24]
}
 801aa50:	bf00      	nop
 801aa52:	3714      	adds	r7, #20
 801aa54:	46bd      	mov	sp, r7
 801aa56:	bd90      	pop	{r4, r7, pc}
 801aa58:	080230f0 	.word	0x080230f0

0801aa5c <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801aa5c:	b590      	push	{r4, r7, lr}
 801aa5e:	b085      	sub	sp, #20
 801aa60:	af00      	add	r7, sp, #0
 801aa62:	6078      	str	r0, [r7, #4]
 801aa64:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	f103 040c 	add.w	r4, r3, #12
 801aa6c:	f107 0308 	add.w	r3, r7, #8
 801aa70:	490a      	ldr	r1, [pc, #40]	; (801aa9c <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801aa72:	4618      	mov	r0, r3
 801aa74:	f7ef f8e9 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801aa78:	f107 0308 	add.w	r3, r7, #8
 801aa7c:	4619      	mov	r1, r3
 801aa7e:	4620      	mov	r0, r4
 801aa80:	f7ef f94f 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801aa84:	f107 0308 	add.w	r3, r7, #8
 801aa88:	4618      	mov	r0, r3
 801aa8a:	f7ef fc96 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	683a      	ldr	r2, [r7, #0]
 801aa92:	619a      	str	r2, [r3, #24]
}
 801aa94:	bf00      	nop
 801aa96:	3714      	adds	r7, #20
 801aa98:	46bd      	mov	sp, r7
 801aa9a:	bd90      	pop	{r4, r7, pc}
 801aa9c:	080230fc 	.word	0x080230fc

0801aaa0 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801aaa0:	b590      	push	{r4, r7, lr}
 801aaa2:	b087      	sub	sp, #28
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	60f8      	str	r0, [r7, #12]
 801aaa8:	60b9      	str	r1, [r7, #8]
 801aaaa:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	f103 040c 	add.w	r4, r3, #12
 801aab2:	f107 0310 	add.w	r3, r7, #16
 801aab6:	490c      	ldr	r1, [pc, #48]	; (801aae8 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801aab8:	4618      	mov	r0, r3
 801aaba:	f7ef f8c6 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801aabe:	f107 0310 	add.w	r3, r7, #16
 801aac2:	4619      	mov	r1, r3
 801aac4:	4620      	mov	r0, r4
 801aac6:	f7ef f92c 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801aaca:	f107 0310 	add.w	r3, r7, #16
 801aace:	4618      	mov	r0, r3
 801aad0:	f7ef fc73 	bl	800a3ba <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	68ba      	ldr	r2, [r7, #8]
 801aad8:	619a      	str	r2, [r3, #24]
    size_ = size;
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	687a      	ldr	r2, [r7, #4]
 801aade:	629a      	str	r2, [r3, #40]	; 0x28
}
 801aae0:	bf00      	nop
 801aae2:	371c      	adds	r7, #28
 801aae4:	46bd      	mov	sp, r7
 801aae6:	bd90      	pop	{r4, r7, pc}
 801aae8:	08023108 	.word	0x08023108

0801aaec <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801aaec:	b580      	push	{r7, lr}
 801aaee:	b084      	sub	sp, #16
 801aaf0:	af00      	add	r7, sp, #0
 801aaf2:	60f8      	str	r0, [r7, #12]
 801aaf4:	60b9      	str	r1, [r7, #8]
 801aaf6:	607a      	str	r2, [r7, #4]
    type_ = type;
 801aaf8:	68fb      	ldr	r3, [r7, #12]
 801aafa:	330c      	adds	r3, #12
 801aafc:	68b9      	ldr	r1, [r7, #8]
 801aafe:	4618      	mov	r0, r3
 801ab00:	f7ef f90f 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801ab04:	68fb      	ldr	r3, [r7, #12]
 801ab06:	687a      	ldr	r2, [r7, #4]
 801ab08:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801ab0a:	4b11      	ldr	r3, [pc, #68]	; (801ab50 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d019      	beq.n	801ab46 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801ab12:	4b0f      	ldr	r3, [pc, #60]	; (801ab50 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ab14:	681a      	ldr	r2, [r3, #0]
 801ab16:	4b0e      	ldr	r3, [pc, #56]	; (801ab50 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	3314      	adds	r3, #20
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	68b9      	ldr	r1, [r7, #8]
 801ab22:	4610      	mov	r0, r2
 801ab24:	4798      	blx	r3
 801ab26:	4602      	mov	r2, r0
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801ab2c:	4b08      	ldr	r3, [pc, #32]	; (801ab50 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ab2e:	681a      	ldr	r2, [r3, #0]
 801ab30:	4b07      	ldr	r3, [pc, #28]	; (801ab50 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	3318      	adds	r3, #24
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	68b9      	ldr	r1, [r7, #8]
 801ab3c:	4610      	mov	r0, r2
 801ab3e:	4798      	blx	r3
 801ab40:	4602      	mov	r2, r0
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801ab46:	bf00      	nop
 801ab48:	3710      	adds	r7, #16
 801ab4a:	46bd      	mov	sp, r7
 801ab4c:	bd80      	pop	{r7, pc}
 801ab4e:	bf00      	nop
 801ab50:	20000c90 	.word	0x20000c90

0801ab54 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801ab54:	b580      	push	{r7, lr}
 801ab56:	b084      	sub	sp, #16
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	60f8      	str	r0, [r7, #12]
 801ab5c:	60b9      	str	r1, [r7, #8]
 801ab5e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801ab60:	68fb      	ldr	r3, [r7, #12]
 801ab62:	330c      	adds	r3, #12
 801ab64:	68b9      	ldr	r1, [r7, #8]
 801ab66:	4618      	mov	r0, r3
 801ab68:	f7ef f8db 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	687a      	ldr	r2, [r7, #4]
 801ab70:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801ab72:	4b11      	ldr	r3, [pc, #68]	; (801abb8 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d019      	beq.n	801abae <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801ab7a:	4b0f      	ldr	r3, [pc, #60]	; (801abb8 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801ab7c:	681a      	ldr	r2, [r3, #0]
 801ab7e:	4b0e      	ldr	r3, [pc, #56]	; (801abb8 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	3314      	adds	r3, #20
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	68b9      	ldr	r1, [r7, #8]
 801ab8a:	4610      	mov	r0, r2
 801ab8c:	4798      	blx	r3
 801ab8e:	4602      	mov	r2, r0
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801ab94:	4b08      	ldr	r3, [pc, #32]	; (801abb8 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801ab96:	681a      	ldr	r2, [r3, #0]
 801ab98:	4b07      	ldr	r3, [pc, #28]	; (801abb8 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	3318      	adds	r3, #24
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	68b9      	ldr	r1, [r7, #8]
 801aba4:	4610      	mov	r0, r2
 801aba6:	4798      	blx	r3
 801aba8:	4602      	mov	r2, r0
 801abaa:	68fb      	ldr	r3, [r7, #12]
 801abac:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801abae:	bf00      	nop
 801abb0:	3710      	adds	r7, #16
 801abb2:	46bd      	mov	sp, r7
 801abb4:	bd80      	pop	{r7, pc}
 801abb6:	bf00      	nop
 801abb8:	20000c90 	.word	0x20000c90

0801abbc <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801abbc:	b480      	push	{r7}
 801abbe:	b083      	sub	sp, #12
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]
 801abc4:	6039      	str	r1, [r7, #0]
    size_ = size;
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	683a      	ldr	r2, [r7, #0]
 801abca:	629a      	str	r2, [r3, #40]	; 0x28
}
 801abcc:	bf00      	nop
 801abce:	370c      	adds	r7, #12
 801abd0:	46bd      	mov	sp, r7
 801abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abd6:	4770      	bx	lr

0801abd8 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801abd8:	b590      	push	{r4, r7, lr}
 801abda:	b085      	sub	sp, #20
 801abdc:	af00      	add	r7, sp, #0
 801abde:	6078      	str	r0, [r7, #4]
 801abe0:	6039      	str	r1, [r7, #0]
    name_ = name;
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	1d1c      	adds	r4, r3, #4
 801abe6:	f107 0308 	add.w	r3, r7, #8
 801abea:	6839      	ldr	r1, [r7, #0]
 801abec:	4618      	mov	r0, r3
 801abee:	f7ef f82c 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801abf2:	f107 0308 	add.w	r3, r7, #8
 801abf6:	4619      	mov	r1, r3
 801abf8:	4620      	mov	r0, r4
 801abfa:	f7ef f892 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
 801abfe:	f107 0308 	add.w	r3, r7, #8
 801ac02:	4618      	mov	r0, r3
 801ac04:	f7ef fbd9 	bl	800a3ba <_ZN12SimpleStringD1Ev>
}
 801ac08:	bf00      	nop
 801ac0a:	3714      	adds	r7, #20
 801ac0c:	46bd      	mov	sp, r7
 801ac0e:	bd90      	pop	{r4, r7, pc}

0801ac10 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801ac10:	b580      	push	{r7, lr}
 801ac12:	b082      	sub	sp, #8
 801ac14:	af00      	add	r7, sp, #0
 801ac16:	6078      	str	r0, [r7, #4]
 801ac18:	6039      	str	r1, [r7, #0]
    return name_;
 801ac1a:	683b      	ldr	r3, [r7, #0]
 801ac1c:	3304      	adds	r3, #4
 801ac1e:	4619      	mov	r1, r3
 801ac20:	6878      	ldr	r0, [r7, #4]
 801ac22:	f7ef f866 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
}
 801ac26:	6878      	ldr	r0, [r7, #4]
 801ac28:	3708      	adds	r7, #8
 801ac2a:	46bd      	mov	sp, r7
 801ac2c:	bd80      	pop	{r7, pc}

0801ac2e <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801ac2e:	b580      	push	{r7, lr}
 801ac30:	b082      	sub	sp, #8
 801ac32:	af00      	add	r7, sp, #0
 801ac34:	6078      	str	r0, [r7, #4]
 801ac36:	6039      	str	r1, [r7, #0]
    return type_;
 801ac38:	683b      	ldr	r3, [r7, #0]
 801ac3a:	330c      	adds	r3, #12
 801ac3c:	4619      	mov	r1, r3
 801ac3e:	6878      	ldr	r0, [r7, #4]
 801ac40:	f7ef f857 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
}
 801ac44:	6878      	ldr	r0, [r7, #4]
 801ac46:	3708      	adds	r7, #8
 801ac48:	46bd      	mov	sp, r7
 801ac4a:	bd80      	pop	{r7, pc}

0801ac4c <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801ac4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac4e:	b087      	sub	sp, #28
 801ac50:	af04      	add	r7, sp, #16
 801ac52:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801ac54:	f7f6 fbdc 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801ac58:	4604      	mov	r4, r0
 801ac5a:	6823      	ldr	r3, [r4, #0]
 801ac5c:	3324      	adds	r3, #36	; 0x24
 801ac5e:	681d      	ldr	r5, [r3, #0]
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	330c      	adds	r3, #12
 801ac64:	4618      	mov	r0, r3
 801ac66:	f7ef fb7b 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801ac6a:	4606      	mov	r6, r0
 801ac6c:	f7f6 fbe0 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ac70:	4603      	mov	r3, r0
 801ac72:	9302      	str	r3, [sp, #8]
 801ac74:	23c8      	movs	r3, #200	; 0xc8
 801ac76:	9301      	str	r3, [sp, #4]
 801ac78:	4b06      	ldr	r3, [pc, #24]	; (801ac94 <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801ac7a:	9300      	str	r3, [sp, #0]
 801ac7c:	2300      	movs	r3, #0
 801ac7e:	4632      	mov	r2, r6
 801ac80:	4905      	ldr	r1, [pc, #20]	; (801ac98 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801ac82:	4620      	mov	r0, r4
 801ac84:	47a8      	blx	r5
    return value_.boolValue_;
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	7e1b      	ldrb	r3, [r3, #24]
}
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	370c      	adds	r7, #12
 801ac8e:	46bd      	mov	sp, r7
 801ac90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac92:	bf00      	nop
 801ac94:	0802306c 	.word	0x0802306c
 801ac98:	08023034 	.word	0x08023034

0801ac9c <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801ac9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac9e:	b089      	sub	sp, #36	; 0x24
 801aca0:	af04      	add	r7, sp, #16
 801aca2:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	f103 040c 	add.w	r4, r3, #12
 801acaa:	f107 0308 	add.w	r3, r7, #8
 801acae:	4920      	ldr	r1, [pc, #128]	; (801ad30 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801acb0:	4618      	mov	r0, r3
 801acb2:	f7ee ffca 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801acb6:	2501      	movs	r5, #1
 801acb8:	f107 0308 	add.w	r3, r7, #8
 801acbc:	4619      	mov	r1, r3
 801acbe:	4620      	mov	r0, r4
 801acc0:	f7ef fb87 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801acc4:	4603      	mov	r3, r0
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d005      	beq.n	801acd6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	699b      	ldr	r3, [r3, #24]
 801acce:	2b00      	cmp	r3, #0
 801acd0:	db01      	blt.n	801acd6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801acd2:	2401      	movs	r4, #1
 801acd4:	e000      	b.n	801acd8 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801acd6:	2400      	movs	r4, #0
 801acd8:	2d00      	cmp	r5, #0
 801acda:	d004      	beq.n	801ace6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801acdc:	f107 0308 	add.w	r3, r7, #8
 801ace0:	4618      	mov	r0, r3
 801ace2:	f7ef fb6a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801ace6:	2c00      	cmp	r4, #0
 801ace8:	d002      	beq.n	801acf0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	699b      	ldr	r3, [r3, #24]
 801acee:	e01a      	b.n	801ad26 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801acf0:	f7f6 fb8e 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801acf4:	4604      	mov	r4, r0
 801acf6:	6823      	ldr	r3, [r4, #0]
 801acf8:	3324      	adds	r3, #36	; 0x24
 801acfa:	681d      	ldr	r5, [r3, #0]
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	330c      	adds	r3, #12
 801ad00:	4618      	mov	r0, r3
 801ad02:	f7ef fb2d 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801ad06:	4606      	mov	r6, r0
 801ad08:	f7f6 fb92 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ad0c:	4603      	mov	r3, r0
 801ad0e:	9302      	str	r3, [sp, #8]
 801ad10:	23d2      	movs	r3, #210	; 0xd2
 801ad12:	9301      	str	r3, [sp, #4]
 801ad14:	4b07      	ldr	r3, [pc, #28]	; (801ad34 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801ad16:	9300      	str	r3, [sp, #0]
 801ad18:	2300      	movs	r3, #0
 801ad1a:	4632      	mov	r2, r6
 801ad1c:	4906      	ldr	r1, [pc, #24]	; (801ad38 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801ad1e:	4620      	mov	r0, r4
 801ad20:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	699b      	ldr	r3, [r3, #24]
    }
}
 801ad26:	4618      	mov	r0, r3
 801ad28:	3714      	adds	r7, #20
 801ad2a:	46bd      	mov	sp, r7
 801ad2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad2e:	bf00      	nop
 801ad30:	08023030 	.word	0x08023030
 801ad34:	0802306c 	.word	0x0802306c
 801ad38:	0802303c 	.word	0x0802303c

0801ad3c <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801ad3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad3e:	b087      	sub	sp, #28
 801ad40:	af04      	add	r7, sp, #16
 801ad42:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801ad44:	f7f6 fb64 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801ad48:	4604      	mov	r4, r0
 801ad4a:	6823      	ldr	r3, [r4, #0]
 801ad4c:	3324      	adds	r3, #36	; 0x24
 801ad4e:	681d      	ldr	r5, [r3, #0]
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	330c      	adds	r3, #12
 801ad54:	4618      	mov	r0, r3
 801ad56:	f7ef fb03 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801ad5a:	4606      	mov	r6, r0
 801ad5c:	f7f6 fb68 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ad60:	4603      	mov	r3, r0
 801ad62:	9302      	str	r3, [sp, #8]
 801ad64:	23d9      	movs	r3, #217	; 0xd9
 801ad66:	9301      	str	r3, [sp, #4]
 801ad68:	4b06      	ldr	r3, [pc, #24]	; (801ad84 <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801ad6a:	9300      	str	r3, [sp, #0]
 801ad6c:	2300      	movs	r3, #0
 801ad6e:	4632      	mov	r2, r6
 801ad70:	4905      	ldr	r1, [pc, #20]	; (801ad88 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801ad72:	4620      	mov	r0, r4
 801ad74:	47a8      	blx	r5
    return value_.intValue_;
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	699b      	ldr	r3, [r3, #24]
}
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	370c      	adds	r7, #12
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad82:	bf00      	nop
 801ad84:	0802306c 	.word	0x0802306c
 801ad88:	08023030 	.word	0x08023030

0801ad8c <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801ad8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad8e:	b08b      	sub	sp, #44	; 0x2c
 801ad90:	af04      	add	r7, sp, #16
 801ad92:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	f103 040c 	add.w	r4, r3, #12
 801ad9a:	f107 0308 	add.w	r3, r7, #8
 801ad9e:	4928      	ldr	r1, [pc, #160]	; (801ae40 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801ada0:	4618      	mov	r0, r3
 801ada2:	f7ee ff52 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801ada6:	f107 0308 	add.w	r3, r7, #8
 801adaa:	4619      	mov	r1, r3
 801adac:	4620      	mov	r0, r4
 801adae:	f7ef fb10 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801adb2:	4603      	mov	r3, r0
 801adb4:	461c      	mov	r4, r3
 801adb6:	f107 0308 	add.w	r3, r7, #8
 801adba:	4618      	mov	r0, r3
 801adbc:	f7ef fafd 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801adc0:	2c00      	cmp	r4, #0
 801adc2:	d002      	beq.n	801adca <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	699b      	ldr	r3, [r3, #24]
 801adc8:	e035      	b.n	801ae36 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	f103 040c 	add.w	r4, r3, #12
 801add0:	f107 0310 	add.w	r3, r7, #16
 801add4:	491b      	ldr	r1, [pc, #108]	; (801ae44 <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801add6:	4618      	mov	r0, r3
 801add8:	f7ee ff37 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801addc:	f107 0310 	add.w	r3, r7, #16
 801ade0:	4619      	mov	r1, r3
 801ade2:	4620      	mov	r0, r4
 801ade4:	f7ef faf5 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801ade8:	4603      	mov	r3, r0
 801adea:	461c      	mov	r4, r3
 801adec:	f107 0310 	add.w	r3, r7, #16
 801adf0:	4618      	mov	r0, r3
 801adf2:	f7ef fae2 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801adf6:	2c00      	cmp	r4, #0
 801adf8:	d002      	beq.n	801ae00 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	699b      	ldr	r3, [r3, #24]
 801adfe:	e01a      	b.n	801ae36 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801ae00:	f7f6 fb06 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801ae04:	4604      	mov	r4, r0
 801ae06:	6823      	ldr	r3, [r4, #0]
 801ae08:	3324      	adds	r3, #36	; 0x24
 801ae0a:	681d      	ldr	r5, [r3, #0]
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	330c      	adds	r3, #12
 801ae10:	4618      	mov	r0, r3
 801ae12:	f7ef faa5 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801ae16:	4606      	mov	r6, r0
 801ae18:	f7f6 fb0a 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ae1c:	4603      	mov	r3, r0
 801ae1e:	9302      	str	r3, [sp, #8]
 801ae20:	23e5      	movs	r3, #229	; 0xe5
 801ae22:	9301      	str	r3, [sp, #4]
 801ae24:	4b08      	ldr	r3, [pc, #32]	; (801ae48 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801ae26:	9300      	str	r3, [sp, #0]
 801ae28:	2300      	movs	r3, #0
 801ae2a:	4632      	mov	r2, r6
 801ae2c:	4907      	ldr	r1, [pc, #28]	; (801ae4c <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801ae2e:	4620      	mov	r0, r4
 801ae30:	47a8      	blx	r5
        return value_.longIntValue_;
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	699b      	ldr	r3, [r3, #24]
    }
}
 801ae36:	4618      	mov	r0, r3
 801ae38:	371c      	adds	r7, #28
 801ae3a:	46bd      	mov	sp, r7
 801ae3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae3e:	bf00      	nop
 801ae40:	08023030 	.word	0x08023030
 801ae44:	0802303c 	.word	0x0802303c
 801ae48:	0802306c 	.word	0x0802306c
 801ae4c:	0802304c 	.word	0x0802304c

0801ae50 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801ae50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae52:	b08d      	sub	sp, #52	; 0x34
 801ae54:	af04      	add	r7, sp, #16
 801ae56:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	f103 040c 	add.w	r4, r3, #12
 801ae5e:	f107 0308 	add.w	r3, r7, #8
 801ae62:	4940      	ldr	r1, [pc, #256]	; (801af64 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801ae64:	4618      	mov	r0, r3
 801ae66:	f7ee fef0 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801ae6a:	f107 0308 	add.w	r3, r7, #8
 801ae6e:	4619      	mov	r1, r3
 801ae70:	4620      	mov	r0, r4
 801ae72:	f7ef faae 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801ae76:	4603      	mov	r3, r0
 801ae78:	461c      	mov	r4, r3
 801ae7a:	f107 0308 	add.w	r3, r7, #8
 801ae7e:	4618      	mov	r0, r3
 801ae80:	f7ef fa9b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801ae84:	2c00      	cmp	r4, #0
 801ae86:	d002      	beq.n	801ae8e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	699b      	ldr	r3, [r3, #24]
 801ae8c:	e066      	b.n	801af5c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	f103 040c 	add.w	r4, r3, #12
 801ae94:	f107 0310 	add.w	r3, r7, #16
 801ae98:	4933      	ldr	r1, [pc, #204]	; (801af68 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	f7ee fed5 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801aea0:	2501      	movs	r5, #1
 801aea2:	f107 0310 	add.w	r3, r7, #16
 801aea6:	4619      	mov	r1, r3
 801aea8:	4620      	mov	r0, r4
 801aeaa:	f7ef fa92 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801aeae:	4603      	mov	r3, r0
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d005      	beq.n	801aec0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	699b      	ldr	r3, [r3, #24]
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	db01      	blt.n	801aec0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801aebc:	2401      	movs	r4, #1
 801aebe:	e000      	b.n	801aec2 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801aec0:	2400      	movs	r4, #0
 801aec2:	2d00      	cmp	r5, #0
 801aec4:	d004      	beq.n	801aed0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801aec6:	f107 0310 	add.w	r3, r7, #16
 801aeca:	4618      	mov	r0, r3
 801aecc:	f7ef fa75 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801aed0:	2c00      	cmp	r4, #0
 801aed2:	d002      	beq.n	801aeda <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	699b      	ldr	r3, [r3, #24]
 801aed8:	e040      	b.n	801af5c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	f103 040c 	add.w	r4, r3, #12
 801aee0:	f107 0318 	add.w	r3, r7, #24
 801aee4:	4921      	ldr	r1, [pc, #132]	; (801af6c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801aee6:	4618      	mov	r0, r3
 801aee8:	f7ee feaf 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801aeec:	2501      	movs	r5, #1
 801aeee:	f107 0318 	add.w	r3, r7, #24
 801aef2:	4619      	mov	r1, r3
 801aef4:	4620      	mov	r0, r4
 801aef6:	f7ef fa6c 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801aefa:	4603      	mov	r3, r0
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d005      	beq.n	801af0c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	699b      	ldr	r3, [r3, #24]
 801af04:	2b00      	cmp	r3, #0
 801af06:	db01      	blt.n	801af0c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801af08:	2401      	movs	r4, #1
 801af0a:	e000      	b.n	801af0e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801af0c:	2400      	movs	r4, #0
 801af0e:	2d00      	cmp	r5, #0
 801af10:	d004      	beq.n	801af1c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801af12:	f107 0318 	add.w	r3, r7, #24
 801af16:	4618      	mov	r0, r3
 801af18:	f7ef fa4f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801af1c:	2c00      	cmp	r4, #0
 801af1e:	d002      	beq.n	801af26 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	699b      	ldr	r3, [r3, #24]
 801af24:	e01a      	b.n	801af5c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801af26:	f7f6 fa73 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801af2a:	4604      	mov	r4, r0
 801af2c:	6823      	ldr	r3, [r4, #0]
 801af2e:	3324      	adds	r3, #36	; 0x24
 801af30:	681d      	ldr	r5, [r3, #0]
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	330c      	adds	r3, #12
 801af36:	4618      	mov	r0, r3
 801af38:	f7ef fa12 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801af3c:	4606      	mov	r6, r0
 801af3e:	f7f6 fa77 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801af42:	4603      	mov	r3, r0
 801af44:	9302      	str	r3, [sp, #8]
 801af46:	23f4      	movs	r3, #244	; 0xf4
 801af48:	9301      	str	r3, [sp, #4]
 801af4a:	4b09      	ldr	r3, [pc, #36]	; (801af70 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801af4c:	9300      	str	r3, [sp, #0]
 801af4e:	2300      	movs	r3, #0
 801af50:	4632      	mov	r2, r6
 801af52:	4908      	ldr	r1, [pc, #32]	; (801af74 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801af54:	4620      	mov	r0, r4
 801af56:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	699b      	ldr	r3, [r3, #24]
    }
}
 801af5c:	4618      	mov	r0, r3
 801af5e:	3724      	adds	r7, #36	; 0x24
 801af60:	46bd      	mov	sp, r7
 801af62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af64:	0802303c 	.word	0x0802303c
 801af68:	08023030 	.word	0x08023030
 801af6c:	0802304c 	.word	0x0802304c
 801af70:	0802306c 	.word	0x0802306c
 801af74:	08023058 	.word	0x08023058

0801af78 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801af78:	b5b0      	push	{r4, r5, r7, lr}
 801af7a:	b084      	sub	sp, #16
 801af7c:	af02      	add	r7, sp, #8
 801af7e:	6078      	str	r0, [r7, #4]
 801af80:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801af82:	f7f6 fa45 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801af86:	4604      	mov	r4, r0
 801af88:	6823      	ldr	r3, [r4, #0]
 801af8a:	3368      	adds	r3, #104	; 0x68
 801af8c:	681d      	ldr	r5, [r3, #0]
 801af8e:	f7f6 fa4f 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801af92:	4603      	mov	r3, r0
 801af94:	9300      	str	r3, [sp, #0]
 801af96:	f240 1323 	movw	r3, #291	; 0x123
 801af9a:	4a06      	ldr	r2, [pc, #24]	; (801afb4 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801af9c:	4906      	ldr	r1, [pc, #24]	; (801afb8 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801af9e:	4620      	mov	r0, r4
 801afa0:	47a8      	blx	r5
    return cpputest_longlong(0);
 801afa2:	2100      	movs	r1, #0
 801afa4:	6878      	ldr	r0, [r7, #4]
 801afa6:	f7ec fe87 	bl	8007cb8 <_ZN17cpputest_longlongC1Ei>
}
 801afaa:	6878      	ldr	r0, [r7, #4]
 801afac:	3708      	adds	r7, #8
 801afae:	46bd      	mov	sp, r7
 801afb0:	bdb0      	pop	{r4, r5, r7, pc}
 801afb2:	bf00      	nop
 801afb4:	0802306c 	.word	0x0802306c
 801afb8:	08023088 	.word	0x08023088

0801afbc <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801afbc:	b5b0      	push	{r4, r5, r7, lr}
 801afbe:	b084      	sub	sp, #16
 801afc0:	af02      	add	r7, sp, #8
 801afc2:	6078      	str	r0, [r7, #4]
 801afc4:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801afc6:	f7f6 fa23 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801afca:	4604      	mov	r4, r0
 801afcc:	6823      	ldr	r3, [r4, #0]
 801afce:	3368      	adds	r3, #104	; 0x68
 801afd0:	681d      	ldr	r5, [r3, #0]
 801afd2:	f7f6 fa2d 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801afd6:	4603      	mov	r3, r0
 801afd8:	9300      	str	r3, [sp, #0]
 801afda:	f240 1329 	movw	r3, #297	; 0x129
 801afde:	4a06      	ldr	r2, [pc, #24]	; (801aff8 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801afe0:	4906      	ldr	r1, [pc, #24]	; (801affc <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801afe2:	4620      	mov	r0, r4
 801afe4:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801afe6:	2100      	movs	r1, #0
 801afe8:	6878      	ldr	r0, [r7, #4]
 801afea:	f7ec fe71 	bl	8007cd0 <_ZN18cpputest_ulonglongC1Ei>
}
 801afee:	6878      	ldr	r0, [r7, #4]
 801aff0:	3708      	adds	r7, #8
 801aff2:	46bd      	mov	sp, r7
 801aff4:	bdb0      	pop	{r4, r5, r7, pc}
 801aff6:	bf00      	nop
 801aff8:	0802306c 	.word	0x0802306c
 801affc:	080230a8 	.word	0x080230a8

0801b000 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801b000:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b002:	b087      	sub	sp, #28
 801b004:	af04      	add	r7, sp, #16
 801b006:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801b008:	f7f6 fa02 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801b00c:	4604      	mov	r4, r0
 801b00e:	6823      	ldr	r3, [r4, #0]
 801b010:	3324      	adds	r3, #36	; 0x24
 801b012:	681d      	ldr	r5, [r3, #0]
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	330c      	adds	r3, #12
 801b018:	4618      	mov	r0, r3
 801b01a:	f7ef f9a1 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801b01e:	4606      	mov	r6, r0
 801b020:	f7f6 fa06 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b024:	4603      	mov	r3, r0
 801b026:	9302      	str	r3, [sp, #8]
 801b028:	f240 1331 	movw	r3, #305	; 0x131
 801b02c:	9301      	str	r3, [sp, #4]
 801b02e:	4b09      	ldr	r3, [pc, #36]	; (801b054 <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801b030:	9300      	str	r3, [sp, #0]
 801b032:	2300      	movs	r3, #0
 801b034:	4632      	mov	r2, r6
 801b036:	4908      	ldr	r1, [pc, #32]	; (801b058 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801b038:	4620      	mov	r0, r4
 801b03a:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801b042:	ec43 2b17 	vmov	d7, r2, r3
}
 801b046:	eeb0 0a47 	vmov.f32	s0, s14
 801b04a:	eef0 0a67 	vmov.f32	s1, s15
 801b04e:	370c      	adds	r7, #12
 801b050:	46bd      	mov	sp, r7
 801b052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b054:	0802306c 	.word	0x0802306c
 801b058:	080230d4 	.word	0x080230d4

0801b05c <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801b05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b05e:	b087      	sub	sp, #28
 801b060:	af04      	add	r7, sp, #16
 801b062:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801b064:	f7f6 f9d4 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801b068:	4604      	mov	r4, r0
 801b06a:	6823      	ldr	r3, [r4, #0]
 801b06c:	3324      	adds	r3, #36	; 0x24
 801b06e:	681d      	ldr	r5, [r3, #0]
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	330c      	adds	r3, #12
 801b074:	4618      	mov	r0, r3
 801b076:	f7ef f973 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801b07a:	4606      	mov	r6, r0
 801b07c:	f7f6 f9d8 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b080:	4603      	mov	r3, r0
 801b082:	9302      	str	r3, [sp, #8]
 801b084:	f240 1337 	movw	r3, #311	; 0x137
 801b088:	9301      	str	r3, [sp, #4]
 801b08a:	4b09      	ldr	r3, [pc, #36]	; (801b0b0 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801b08c:	9300      	str	r3, [sp, #0]
 801b08e:	2300      	movs	r3, #0
 801b090:	4632      	mov	r2, r6
 801b092:	4908      	ldr	r1, [pc, #32]	; (801b0b4 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801b094:	4620      	mov	r0, r4
 801b096:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b09e:	ec43 2b17 	vmov	d7, r2, r3
}
 801b0a2:	eeb0 0a47 	vmov.f32	s0, s14
 801b0a6:	eef0 0a67 	vmov.f32	s1, s15
 801b0aa:	370c      	adds	r7, #12
 801b0ac:	46bd      	mov	sp, r7
 801b0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0b0:	0802306c 	.word	0x0802306c
 801b0b4:	080230d4 	.word	0x080230d4

0801b0b8 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801b0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0ba:	b087      	sub	sp, #28
 801b0bc:	af04      	add	r7, sp, #16
 801b0be:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801b0c0:	f7f6 f9a6 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801b0c4:	4604      	mov	r4, r0
 801b0c6:	6823      	ldr	r3, [r4, #0]
 801b0c8:	3324      	adds	r3, #36	; 0x24
 801b0ca:	681d      	ldr	r5, [r3, #0]
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	330c      	adds	r3, #12
 801b0d0:	4618      	mov	r0, r3
 801b0d2:	f7ef f945 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801b0d6:	4606      	mov	r6, r0
 801b0d8:	f7f6 f9aa 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b0dc:	4603      	mov	r3, r0
 801b0de:	9302      	str	r3, [sp, #8]
 801b0e0:	f240 133d 	movw	r3, #317	; 0x13d
 801b0e4:	9301      	str	r3, [sp, #4]
 801b0e6:	4b06      	ldr	r3, [pc, #24]	; (801b100 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801b0e8:	9300      	str	r3, [sp, #0]
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	4632      	mov	r2, r6
 801b0ee:	4905      	ldr	r1, [pc, #20]	; (801b104 <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801b0f0:	4620      	mov	r0, r4
 801b0f2:	47a8      	blx	r5
    return value_.stringValue_;
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	699b      	ldr	r3, [r3, #24]
}
 801b0f8:	4618      	mov	r0, r3
 801b0fa:	370c      	adds	r7, #12
 801b0fc:	46bd      	mov	sp, r7
 801b0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b100:	0802306c 	.word	0x0802306c
 801b104:	080230fc 	.word	0x080230fc

0801b108 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801b108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b10a:	b087      	sub	sp, #28
 801b10c:	af04      	add	r7, sp, #16
 801b10e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801b110:	f7f6 f97e 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801b114:	4604      	mov	r4, r0
 801b116:	6823      	ldr	r3, [r4, #0]
 801b118:	3324      	adds	r3, #36	; 0x24
 801b11a:	681d      	ldr	r5, [r3, #0]
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	330c      	adds	r3, #12
 801b120:	4618      	mov	r0, r3
 801b122:	f7ef f91d 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801b126:	4606      	mov	r6, r0
 801b128:	f7f6 f982 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b12c:	4603      	mov	r3, r0
 801b12e:	9302      	str	r3, [sp, #8]
 801b130:	f240 1343 	movw	r3, #323	; 0x143
 801b134:	9301      	str	r3, [sp, #4]
 801b136:	4b06      	ldr	r3, [pc, #24]	; (801b150 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801b138:	9300      	str	r3, [sp, #0]
 801b13a:	2300      	movs	r3, #0
 801b13c:	4632      	mov	r2, r6
 801b13e:	4905      	ldr	r1, [pc, #20]	; (801b154 <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801b140:	4620      	mov	r0, r4
 801b142:	47a8      	blx	r5
    return value_.pointerValue_;
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	699b      	ldr	r3, [r3, #24]
}
 801b148:	4618      	mov	r0, r3
 801b14a:	370c      	adds	r7, #12
 801b14c:	46bd      	mov	sp, r7
 801b14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b150:	0802306c 	.word	0x0802306c
 801b154:	080230dc 	.word	0x080230dc

0801b158 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801b158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b15a:	b087      	sub	sp, #28
 801b15c:	af04      	add	r7, sp, #16
 801b15e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801b160:	f7f6 f956 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801b164:	4604      	mov	r4, r0
 801b166:	6823      	ldr	r3, [r4, #0]
 801b168:	3324      	adds	r3, #36	; 0x24
 801b16a:	681d      	ldr	r5, [r3, #0]
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	330c      	adds	r3, #12
 801b170:	4618      	mov	r0, r3
 801b172:	f7ef f8f5 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801b176:	4606      	mov	r6, r0
 801b178:	f7f6 f95a 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b17c:	4603      	mov	r3, r0
 801b17e:	9302      	str	r3, [sp, #8]
 801b180:	f240 1349 	movw	r3, #329	; 0x149
 801b184:	9301      	str	r3, [sp, #4]
 801b186:	4b06      	ldr	r3, [pc, #24]	; (801b1a0 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801b188:	9300      	str	r3, [sp, #0]
 801b18a:	2300      	movs	r3, #0
 801b18c:	4632      	mov	r2, r6
 801b18e:	4905      	ldr	r1, [pc, #20]	; (801b1a4 <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801b190:	4620      	mov	r0, r4
 801b192:	47a8      	blx	r5
    return value_.pointerValue_;
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	699b      	ldr	r3, [r3, #24]
}
 801b198:	4618      	mov	r0, r3
 801b19a:	370c      	adds	r7, #12
 801b19c:	46bd      	mov	sp, r7
 801b19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1a0:	0802306c 	.word	0x0802306c
 801b1a4:	080230e4 	.word	0x080230e4

0801b1a8 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801b1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b1aa:	b087      	sub	sp, #28
 801b1ac:	af04      	add	r7, sp, #16
 801b1ae:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801b1b0:	f7f6 f92e 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801b1b4:	4604      	mov	r4, r0
 801b1b6:	6823      	ldr	r3, [r4, #0]
 801b1b8:	3324      	adds	r3, #36	; 0x24
 801b1ba:	681d      	ldr	r5, [r3, #0]
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	330c      	adds	r3, #12
 801b1c0:	4618      	mov	r0, r3
 801b1c2:	f7ef f8cd 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801b1c6:	4606      	mov	r6, r0
 801b1c8:	f7f6 f932 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b1cc:	4603      	mov	r3, r0
 801b1ce:	9302      	str	r3, [sp, #8]
 801b1d0:	f240 134f 	movw	r3, #335	; 0x14f
 801b1d4:	9301      	str	r3, [sp, #4]
 801b1d6:	4b06      	ldr	r3, [pc, #24]	; (801b1f0 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801b1d8:	9300      	str	r3, [sp, #0]
 801b1da:	2300      	movs	r3, #0
 801b1dc:	4632      	mov	r2, r6
 801b1de:	4905      	ldr	r1, [pc, #20]	; (801b1f4 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801b1e0:	4620      	mov	r0, r4
 801b1e2:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	699b      	ldr	r3, [r3, #24]
}
 801b1e8:	4618      	mov	r0, r3
 801b1ea:	370c      	adds	r7, #12
 801b1ec:	46bd      	mov	sp, r7
 801b1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1f0:	0802306c 	.word	0x0802306c
 801b1f4:	080230f0 	.word	0x080230f0

0801b1f8 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801b1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b1fa:	b087      	sub	sp, #28
 801b1fc:	af04      	add	r7, sp, #16
 801b1fe:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801b200:	f7f6 f906 	bl	8011410 <_ZN10UtestShell10getCurrentEv>
 801b204:	4604      	mov	r4, r0
 801b206:	6823      	ldr	r3, [r4, #0]
 801b208:	3324      	adds	r3, #36	; 0x24
 801b20a:	681d      	ldr	r5, [r3, #0]
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	330c      	adds	r3, #12
 801b210:	4618      	mov	r0, r3
 801b212:	f7ef f8a5 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801b216:	4606      	mov	r6, r0
 801b218:	f7f6 f90a 	bl	8011430 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b21c:	4603      	mov	r3, r0
 801b21e:	9302      	str	r3, [sp, #8]
 801b220:	f240 1355 	movw	r3, #341	; 0x155
 801b224:	9301      	str	r3, [sp, #4]
 801b226:	4b06      	ldr	r3, [pc, #24]	; (801b240 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801b228:	9300      	str	r3, [sp, #0]
 801b22a:	2300      	movs	r3, #0
 801b22c:	4632      	mov	r2, r6
 801b22e:	4905      	ldr	r1, [pc, #20]	; (801b244 <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801b230:	4620      	mov	r0, r4
 801b232:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	699b      	ldr	r3, [r3, #24]
}
 801b238:	4618      	mov	r0, r3
 801b23a:	370c      	adds	r7, #12
 801b23c:	46bd      	mov	sp, r7
 801b23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b240:	0802306c 	.word	0x0802306c
 801b244:	08023108 	.word	0x08023108

0801b248 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801b248:	b480      	push	{r7}
 801b24a:	b083      	sub	sp, #12
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	699b      	ldr	r3, [r3, #24]
}
 801b254:	4618      	mov	r0, r3
 801b256:	370c      	adds	r7, #12
 801b258:	46bd      	mov	sp, r7
 801b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b25e:	4770      	bx	lr

0801b260 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801b260:	b480      	push	{r7}
 801b262:	b083      	sub	sp, #12
 801b264:	af00      	add	r7, sp, #0
 801b266:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	699b      	ldr	r3, [r3, #24]
}
 801b26c:	4618      	mov	r0, r3
 801b26e:	370c      	adds	r7, #12
 801b270:	46bd      	mov	sp, r7
 801b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b276:	4770      	bx	lr

0801b278 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801b278:	b480      	push	{r7}
 801b27a:	b083      	sub	sp, #12
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	6078      	str	r0, [r7, #4]
    return size_;
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801b284:	4618      	mov	r0, r3
 801b286:	370c      	adds	r7, #12
 801b288:	46bd      	mov	sp, r7
 801b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b28e:	4770      	bx	lr

0801b290 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801b290:	b480      	push	{r7}
 801b292:	b083      	sub	sp, #12
 801b294:	af00      	add	r7, sp, #0
 801b296:	6078      	str	r0, [r7, #4]
    return comparator_;
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801b29c:	4618      	mov	r0, r3
 801b29e:	370c      	adds	r7, #12
 801b2a0:	46bd      	mov	sp, r7
 801b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2a6:	4770      	bx	lr

0801b2a8 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801b2a8:	b480      	push	{r7}
 801b2aa:	b083      	sub	sp, #12
 801b2ac:	af00      	add	r7, sp, #0
 801b2ae:	6078      	str	r0, [r7, #4]
    return copier_;
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801b2b4:	4618      	mov	r0, r3
 801b2b6:	370c      	adds	r7, #12
 801b2b8:	46bd      	mov	sp, r7
 801b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2be:	4770      	bx	lr

0801b2c0 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801b2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2c2:	b0cd      	sub	sp, #308	; 0x134
 801b2c4:	af00      	add	r7, sp, #0
 801b2c6:	1d3b      	adds	r3, r7, #4
 801b2c8:	6018      	str	r0, [r3, #0]
 801b2ca:	463b      	mov	r3, r7
 801b2cc:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801b2ce:	2500      	movs	r5, #0
 801b2d0:	1d3b      	adds	r3, r7, #4
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	f103 040c 	add.w	r4, r3, #12
 801b2d8:	f107 0308 	add.w	r3, r7, #8
 801b2dc:	49bb      	ldr	r1, [pc, #748]	; (801b5cc <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801b2de:	4618      	mov	r0, r3
 801b2e0:	f7ee fcb3 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b2e4:	2601      	movs	r6, #1
 801b2e6:	f107 0308 	add.w	r3, r7, #8
 801b2ea:	4619      	mov	r1, r3
 801b2ec:	4620      	mov	r0, r4
 801b2ee:	f7ef f870 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b2f2:	4603      	mov	r3, r0
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d015      	beq.n	801b324 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801b2f8:	463b      	mov	r3, r7
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	f103 040c 	add.w	r4, r3, #12
 801b300:	f107 0310 	add.w	r3, r7, #16
 801b304:	49b2      	ldr	r1, [pc, #712]	; (801b5d0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b306:	4618      	mov	r0, r3
 801b308:	f7ee fc9f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b30c:	2501      	movs	r5, #1
 801b30e:	f107 0310 	add.w	r3, r7, #16
 801b312:	4619      	mov	r1, r3
 801b314:	4620      	mov	r0, r4
 801b316:	f7ef f85c 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b31a:	4603      	mov	r3, r0
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	d001      	beq.n	801b324 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801b320:	2401      	movs	r4, #1
 801b322:	e000      	b.n	801b326 <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801b324:	2400      	movs	r4, #0
 801b326:	2d00      	cmp	r5, #0
 801b328:	d004      	beq.n	801b334 <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801b32a:	f107 0310 	add.w	r3, r7, #16
 801b32e:	4618      	mov	r0, r3
 801b330:	f7ef f843 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b334:	2e00      	cmp	r6, #0
 801b336:	d004      	beq.n	801b342 <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801b338:	f107 0308 	add.w	r3, r7, #8
 801b33c:	4618      	mov	r0, r3
 801b33e:	f7ef f83c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b342:	2c00      	cmp	r4, #0
 801b344:	d00c      	beq.n	801b360 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801b346:	1d3b      	adds	r3, r7, #4
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	699a      	ldr	r2, [r3, #24]
 801b34c:	463b      	mov	r3, r7
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	699b      	ldr	r3, [r3, #24]
 801b352:	429a      	cmp	r2, r3
 801b354:	bf0c      	ite	eq
 801b356:	2301      	moveq	r3, #1
 801b358:	2300      	movne	r3, #0
 801b35a:	b2dc      	uxtb	r4, r3
 801b35c:	f000 bd60 	b.w	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801b360:	2500      	movs	r5, #0
 801b362:	1d3b      	adds	r3, r7, #4
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	f103 040c 	add.w	r4, r3, #12
 801b36a:	f107 0318 	add.w	r3, r7, #24
 801b36e:	4998      	ldr	r1, [pc, #608]	; (801b5d0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b370:	4618      	mov	r0, r3
 801b372:	f7ee fc6a 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b376:	2601      	movs	r6, #1
 801b378:	f107 0318 	add.w	r3, r7, #24
 801b37c:	4619      	mov	r1, r3
 801b37e:	4620      	mov	r0, r4
 801b380:	f7ef f827 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b384:	4603      	mov	r3, r0
 801b386:	2b00      	cmp	r3, #0
 801b388:	d015      	beq.n	801b3b6 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801b38a:	463b      	mov	r3, r7
 801b38c:	681b      	ldr	r3, [r3, #0]
 801b38e:	f103 040c 	add.w	r4, r3, #12
 801b392:	f107 0320 	add.w	r3, r7, #32
 801b396:	498d      	ldr	r1, [pc, #564]	; (801b5cc <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801b398:	4618      	mov	r0, r3
 801b39a:	f7ee fc56 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b39e:	2501      	movs	r5, #1
 801b3a0:	f107 0320 	add.w	r3, r7, #32
 801b3a4:	4619      	mov	r1, r3
 801b3a6:	4620      	mov	r0, r4
 801b3a8:	f7ef f813 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b3ac:	4603      	mov	r3, r0
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d001      	beq.n	801b3b6 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801b3b2:	2401      	movs	r4, #1
 801b3b4:	e000      	b.n	801b3b8 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801b3b6:	2400      	movs	r4, #0
 801b3b8:	2d00      	cmp	r5, #0
 801b3ba:	d004      	beq.n	801b3c6 <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801b3bc:	f107 0320 	add.w	r3, r7, #32
 801b3c0:	4618      	mov	r0, r3
 801b3c2:	f7ee fffa 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b3c6:	2e00      	cmp	r6, #0
 801b3c8:	d004      	beq.n	801b3d4 <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801b3ca:	f107 0318 	add.w	r3, r7, #24
 801b3ce:	4618      	mov	r0, r3
 801b3d0:	f7ee fff3 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b3d4:	2c00      	cmp	r4, #0
 801b3d6:	d00c      	beq.n	801b3f2 <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801b3d8:	1d3b      	adds	r3, r7, #4
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	699a      	ldr	r2, [r3, #24]
 801b3de:	463b      	mov	r3, r7
 801b3e0:	681b      	ldr	r3, [r3, #0]
 801b3e2:	699b      	ldr	r3, [r3, #24]
 801b3e4:	429a      	cmp	r2, r3
 801b3e6:	bf0c      	ite	eq
 801b3e8:	2301      	moveq	r3, #1
 801b3ea:	2300      	movne	r3, #0
 801b3ec:	b2dc      	uxtb	r4, r3
 801b3ee:	f000 bd17 	b.w	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801b3f2:	2500      	movs	r5, #0
 801b3f4:	1d3b      	adds	r3, r7, #4
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	f103 040c 	add.w	r4, r3, #12
 801b3fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b400:	4974      	ldr	r1, [pc, #464]	; (801b5d4 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801b402:	4618      	mov	r0, r3
 801b404:	f7ee fc21 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b408:	2601      	movs	r6, #1
 801b40a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b40e:	4619      	mov	r1, r3
 801b410:	4620      	mov	r0, r4
 801b412:	f7ee ffde 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b416:	4603      	mov	r3, r0
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d015      	beq.n	801b448 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801b41c:	463b      	mov	r3, r7
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	f103 040c 	add.w	r4, r3, #12
 801b424:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b428:	4969      	ldr	r1, [pc, #420]	; (801b5d0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b42a:	4618      	mov	r0, r3
 801b42c:	f7ee fc0d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b430:	2501      	movs	r5, #1
 801b432:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b436:	4619      	mov	r1, r3
 801b438:	4620      	mov	r0, r4
 801b43a:	f7ee ffca 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b43e:	4603      	mov	r3, r0
 801b440:	2b00      	cmp	r3, #0
 801b442:	d001      	beq.n	801b448 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801b444:	2401      	movs	r4, #1
 801b446:	e000      	b.n	801b44a <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801b448:	2400      	movs	r4, #0
 801b44a:	2d00      	cmp	r5, #0
 801b44c:	d004      	beq.n	801b458 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801b44e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b452:	4618      	mov	r0, r3
 801b454:	f7ee ffb1 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b458:	2e00      	cmp	r6, #0
 801b45a:	d004      	beq.n	801b466 <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801b45c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b460:	4618      	mov	r0, r3
 801b462:	f7ee ffaa 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b466:	2c00      	cmp	r4, #0
 801b468:	d012      	beq.n	801b490 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801b46a:	463b      	mov	r3, r7
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	699b      	ldr	r3, [r3, #24]
 801b470:	2b00      	cmp	r3, #0
 801b472:	db0a      	blt.n	801b48a <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801b474:	1d3b      	adds	r3, r7, #4
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	699b      	ldr	r3, [r3, #24]
 801b47a:	463a      	mov	r2, r7
 801b47c:	6812      	ldr	r2, [r2, #0]
 801b47e:	6992      	ldr	r2, [r2, #24]
 801b480:	4293      	cmp	r3, r2
 801b482:	d102      	bne.n	801b48a <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801b484:	2401      	movs	r4, #1
 801b486:	f000 bccb 	b.w	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b48a:	2400      	movs	r4, #0
 801b48c:	f000 bcc8 	b.w	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801b490:	2500      	movs	r5, #0
 801b492:	1d3b      	adds	r3, r7, #4
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	f103 040c 	add.w	r4, r3, #12
 801b49a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b49e:	494c      	ldr	r1, [pc, #304]	; (801b5d0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b4a0:	4618      	mov	r0, r3
 801b4a2:	f7ee fbd2 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b4a6:	2601      	movs	r6, #1
 801b4a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b4ac:	4619      	mov	r1, r3
 801b4ae:	4620      	mov	r0, r4
 801b4b0:	f7ee ff8f 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b4b4:	4603      	mov	r3, r0
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d015      	beq.n	801b4e6 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801b4ba:	463b      	mov	r3, r7
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	f103 040c 	add.w	r4, r3, #12
 801b4c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b4c6:	4943      	ldr	r1, [pc, #268]	; (801b5d4 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801b4c8:	4618      	mov	r0, r3
 801b4ca:	f7ee fbbe 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b4ce:	2501      	movs	r5, #1
 801b4d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b4d4:	4619      	mov	r1, r3
 801b4d6:	4620      	mov	r0, r4
 801b4d8:	f7ee ff7b 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b4dc:	4603      	mov	r3, r0
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	d001      	beq.n	801b4e6 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801b4e2:	2401      	movs	r4, #1
 801b4e4:	e000      	b.n	801b4e8 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801b4e6:	2400      	movs	r4, #0
 801b4e8:	2d00      	cmp	r5, #0
 801b4ea:	d004      	beq.n	801b4f6 <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801b4ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b4f0:	4618      	mov	r0, r3
 801b4f2:	f7ee ff62 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b4f6:	2e00      	cmp	r6, #0
 801b4f8:	d004      	beq.n	801b504 <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801b4fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b4fe:	4618      	mov	r0, r3
 801b500:	f7ee ff5b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b504:	2c00      	cmp	r4, #0
 801b506:	d012      	beq.n	801b52e <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801b508:	1d3b      	adds	r3, r7, #4
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	699b      	ldr	r3, [r3, #24]
 801b50e:	2b00      	cmp	r3, #0
 801b510:	db0a      	blt.n	801b528 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801b512:	1d3b      	adds	r3, r7, #4
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	699b      	ldr	r3, [r3, #24]
 801b518:	463a      	mov	r2, r7
 801b51a:	6812      	ldr	r2, [r2, #0]
 801b51c:	6992      	ldr	r2, [r2, #24]
 801b51e:	4293      	cmp	r3, r2
 801b520:	d102      	bne.n	801b528 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801b522:	2401      	movs	r4, #1
 801b524:	f000 bc7c 	b.w	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b528:	2400      	movs	r4, #0
 801b52a:	f000 bc79 	b.w	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801b52e:	2500      	movs	r5, #0
 801b530:	1d3b      	adds	r3, r7, #4
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	f103 040c 	add.w	r4, r3, #12
 801b538:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b53c:	4926      	ldr	r1, [pc, #152]	; (801b5d8 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801b53e:	4618      	mov	r0, r3
 801b540:	f7ee fb83 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b544:	2601      	movs	r6, #1
 801b546:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b54a:	4619      	mov	r1, r3
 801b54c:	4620      	mov	r0, r4
 801b54e:	f7ee ff40 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b552:	4603      	mov	r3, r0
 801b554:	2b00      	cmp	r3, #0
 801b556:	d015      	beq.n	801b584 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801b558:	463b      	mov	r3, r7
 801b55a:	681b      	ldr	r3, [r3, #0]
 801b55c:	f103 040c 	add.w	r4, r3, #12
 801b560:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b564:	491a      	ldr	r1, [pc, #104]	; (801b5d0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b566:	4618      	mov	r0, r3
 801b568:	f7ee fb6f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b56c:	2501      	movs	r5, #1
 801b56e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b572:	4619      	mov	r1, r3
 801b574:	4620      	mov	r0, r4
 801b576:	f7ee ff2c 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b57a:	4603      	mov	r3, r0
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	d001      	beq.n	801b584 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801b580:	2401      	movs	r4, #1
 801b582:	e000      	b.n	801b586 <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801b584:	2400      	movs	r4, #0
 801b586:	2d00      	cmp	r5, #0
 801b588:	d004      	beq.n	801b594 <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801b58a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b58e:	4618      	mov	r0, r3
 801b590:	f7ee ff13 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b594:	2e00      	cmp	r6, #0
 801b596:	d004      	beq.n	801b5a2 <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801b598:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b59c:	4618      	mov	r0, r3
 801b59e:	f7ee ff0c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b5a2:	2c00      	cmp	r4, #0
 801b5a4:	d01a      	beq.n	801b5dc <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801b5a6:	463b      	mov	r3, r7
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	699b      	ldr	r3, [r3, #24]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	db0a      	blt.n	801b5c6 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801b5b0:	1d3b      	adds	r3, r7, #4
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	699b      	ldr	r3, [r3, #24]
 801b5b6:	463a      	mov	r2, r7
 801b5b8:	6812      	ldr	r2, [r2, #0]
 801b5ba:	6992      	ldr	r2, [r2, #24]
 801b5bc:	4293      	cmp	r3, r2
 801b5be:	d102      	bne.n	801b5c6 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801b5c0:	2401      	movs	r4, #1
 801b5c2:	f000 bc2d 	b.w	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b5c6:	2400      	movs	r4, #0
 801b5c8:	f000 bc2a 	b.w	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b5cc:	0802304c 	.word	0x0802304c
 801b5d0:	08023030 	.word	0x08023030
 801b5d4:	0802303c 	.word	0x0802303c
 801b5d8:	08023058 	.word	0x08023058
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801b5dc:	2500      	movs	r5, #0
 801b5de:	1d3b      	adds	r3, r7, #4
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	f103 040c 	add.w	r4, r3, #12
 801b5e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b5ea:	49b8      	ldr	r1, [pc, #736]	; (801b8cc <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801b5ec:	4618      	mov	r0, r3
 801b5ee:	f7ee fb2c 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b5f2:	2601      	movs	r6, #1
 801b5f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b5f8:	4619      	mov	r1, r3
 801b5fa:	4620      	mov	r0, r4
 801b5fc:	f7ee fee9 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b600:	4603      	mov	r3, r0
 801b602:	2b00      	cmp	r3, #0
 801b604:	d015      	beq.n	801b632 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801b606:	463b      	mov	r3, r7
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	f103 040c 	add.w	r4, r3, #12
 801b60e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b612:	49af      	ldr	r1, [pc, #700]	; (801b8d0 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801b614:	4618      	mov	r0, r3
 801b616:	f7ee fb18 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b61a:	2501      	movs	r5, #1
 801b61c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b620:	4619      	mov	r1, r3
 801b622:	4620      	mov	r0, r4
 801b624:	f7ee fed5 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b628:	4603      	mov	r3, r0
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d001      	beq.n	801b632 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801b62e:	2401      	movs	r4, #1
 801b630:	e000      	b.n	801b634 <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801b632:	2400      	movs	r4, #0
 801b634:	2d00      	cmp	r5, #0
 801b636:	d004      	beq.n	801b642 <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801b638:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b63c:	4618      	mov	r0, r3
 801b63e:	f7ee febc 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b642:	2e00      	cmp	r6, #0
 801b644:	d004      	beq.n	801b650 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801b646:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b64a:	4618      	mov	r0, r3
 801b64c:	f7ee feb5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b650:	2c00      	cmp	r4, #0
 801b652:	d010      	beq.n	801b676 <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801b654:	1d3b      	adds	r3, r7, #4
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	699b      	ldr	r3, [r3, #24]
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	db09      	blt.n	801b672 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801b65e:	1d3b      	adds	r3, r7, #4
 801b660:	681b      	ldr	r3, [r3, #0]
 801b662:	699b      	ldr	r3, [r3, #24]
 801b664:	463a      	mov	r2, r7
 801b666:	6812      	ldr	r2, [r2, #0]
 801b668:	6992      	ldr	r2, [r2, #24]
 801b66a:	4293      	cmp	r3, r2
 801b66c:	d101      	bne.n	801b672 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801b66e:	2401      	movs	r4, #1
 801b670:	e3d6      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b672:	2400      	movs	r4, #0
 801b674:	e3d4      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801b676:	2500      	movs	r5, #0
 801b678:	1d3b      	adds	r3, r7, #4
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	f103 040c 	add.w	r4, r3, #12
 801b680:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b684:	4993      	ldr	r1, [pc, #588]	; (801b8d4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801b686:	4618      	mov	r0, r3
 801b688:	f7ee fadf 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b68c:	2601      	movs	r6, #1
 801b68e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b692:	4619      	mov	r1, r3
 801b694:	4620      	mov	r0, r4
 801b696:	f7ee fe9c 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b69a:	4603      	mov	r3, r0
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d015      	beq.n	801b6cc <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801b6a0:	463b      	mov	r3, r7
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	f103 040c 	add.w	r4, r3, #12
 801b6a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801b6ac:	498a      	ldr	r1, [pc, #552]	; (801b8d8 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801b6ae:	4618      	mov	r0, r3
 801b6b0:	f7ee facb 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b6b4:	2501      	movs	r5, #1
 801b6b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801b6ba:	4619      	mov	r1, r3
 801b6bc:	4620      	mov	r0, r4
 801b6be:	f7ee fe88 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b6c2:	4603      	mov	r3, r0
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d001      	beq.n	801b6cc <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801b6c8:	2401      	movs	r4, #1
 801b6ca:	e000      	b.n	801b6ce <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801b6cc:	2400      	movs	r4, #0
 801b6ce:	2d00      	cmp	r5, #0
 801b6d0:	d004      	beq.n	801b6dc <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801b6d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801b6d6:	4618      	mov	r0, r3
 801b6d8:	f7ee fe6f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b6dc:	2e00      	cmp	r6, #0
 801b6de:	d004      	beq.n	801b6ea <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801b6e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b6e4:	4618      	mov	r0, r3
 801b6e6:	f7ee fe68 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b6ea:	2c00      	cmp	r4, #0
 801b6ec:	d010      	beq.n	801b710 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801b6ee:	463b      	mov	r3, r7
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	699b      	ldr	r3, [r3, #24]
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	db09      	blt.n	801b70c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801b6f8:	1d3b      	adds	r3, r7, #4
 801b6fa:	681b      	ldr	r3, [r3, #0]
 801b6fc:	699b      	ldr	r3, [r3, #24]
 801b6fe:	463a      	mov	r2, r7
 801b700:	6812      	ldr	r2, [r2, #0]
 801b702:	6992      	ldr	r2, [r2, #24]
 801b704:	4293      	cmp	r3, r2
 801b706:	d101      	bne.n	801b70c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801b708:	2401      	movs	r4, #1
 801b70a:	e389      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b70c:	2400      	movs	r4, #0
 801b70e:	e387      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801b710:	2500      	movs	r5, #0
 801b712:	1d3b      	adds	r3, r7, #4
 801b714:	681b      	ldr	r3, [r3, #0]
 801b716:	f103 040c 	add.w	r4, r3, #12
 801b71a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801b71e:	496e      	ldr	r1, [pc, #440]	; (801b8d8 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801b720:	4618      	mov	r0, r3
 801b722:	f7ee fa92 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b726:	2601      	movs	r6, #1
 801b728:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801b72c:	4619      	mov	r1, r3
 801b72e:	4620      	mov	r0, r4
 801b730:	f7ee fe4f 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b734:	4603      	mov	r3, r0
 801b736:	2b00      	cmp	r3, #0
 801b738:	d015      	beq.n	801b766 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801b73a:	463b      	mov	r3, r7
 801b73c:	681b      	ldr	r3, [r3, #0]
 801b73e:	f103 040c 	add.w	r4, r3, #12
 801b742:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801b746:	4963      	ldr	r1, [pc, #396]	; (801b8d4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801b748:	4618      	mov	r0, r3
 801b74a:	f7ee fa7e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b74e:	2501      	movs	r5, #1
 801b750:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801b754:	4619      	mov	r1, r3
 801b756:	4620      	mov	r0, r4
 801b758:	f7ee fe3b 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b75c:	4603      	mov	r3, r0
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d001      	beq.n	801b766 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801b762:	2401      	movs	r4, #1
 801b764:	e000      	b.n	801b768 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801b766:	2400      	movs	r4, #0
 801b768:	2d00      	cmp	r5, #0
 801b76a:	d004      	beq.n	801b776 <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801b76c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801b770:	4618      	mov	r0, r3
 801b772:	f7ee fe22 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b776:	2e00      	cmp	r6, #0
 801b778:	d004      	beq.n	801b784 <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801b77a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801b77e:	4618      	mov	r0, r3
 801b780:	f7ee fe1b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b784:	2c00      	cmp	r4, #0
 801b786:	d010      	beq.n	801b7aa <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801b788:	1d3b      	adds	r3, r7, #4
 801b78a:	681b      	ldr	r3, [r3, #0]
 801b78c:	699b      	ldr	r3, [r3, #24]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	db09      	blt.n	801b7a6 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801b792:	1d3b      	adds	r3, r7, #4
 801b794:	681b      	ldr	r3, [r3, #0]
 801b796:	699b      	ldr	r3, [r3, #24]
 801b798:	463a      	mov	r2, r7
 801b79a:	6812      	ldr	r2, [r2, #0]
 801b79c:	6992      	ldr	r2, [r2, #24]
 801b79e:	4293      	cmp	r3, r2
 801b7a0:	d101      	bne.n	801b7a6 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801b7a2:	2401      	movs	r4, #1
 801b7a4:	e33c      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b7a6:	2400      	movs	r4, #0
 801b7a8:	e33a      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801b7aa:	2500      	movs	r5, #0
 801b7ac:	1d3b      	adds	r3, r7, #4
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	f103 040c 	add.w	r4, r3, #12
 801b7b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801b7b8:	4946      	ldr	r1, [pc, #280]	; (801b8d4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801b7ba:	4618      	mov	r0, r3
 801b7bc:	f7ee fa45 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b7c0:	2601      	movs	r6, #1
 801b7c2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801b7c6:	4619      	mov	r1, r3
 801b7c8:	4620      	mov	r0, r4
 801b7ca:	f7ee fe02 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b7ce:	4603      	mov	r3, r0
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d015      	beq.n	801b800 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801b7d4:	463b      	mov	r3, r7
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	f103 040c 	add.w	r4, r3, #12
 801b7dc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801b7e0:	493b      	ldr	r1, [pc, #236]	; (801b8d0 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801b7e2:	4618      	mov	r0, r3
 801b7e4:	f7ee fa31 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b7e8:	2501      	movs	r5, #1
 801b7ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801b7ee:	4619      	mov	r1, r3
 801b7f0:	4620      	mov	r0, r4
 801b7f2:	f7ee fdee 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b7f6:	4603      	mov	r3, r0
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	d001      	beq.n	801b800 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801b7fc:	2401      	movs	r4, #1
 801b7fe:	e000      	b.n	801b802 <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801b800:	2400      	movs	r4, #0
 801b802:	2d00      	cmp	r5, #0
 801b804:	d004      	beq.n	801b810 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801b806:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801b80a:	4618      	mov	r0, r3
 801b80c:	f7ee fdd5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b810:	2e00      	cmp	r6, #0
 801b812:	d004      	beq.n	801b81e <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801b814:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801b818:	4618      	mov	r0, r3
 801b81a:	f7ee fdce 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b81e:	2c00      	cmp	r4, #0
 801b820:	d00b      	beq.n	801b83a <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801b822:	1d3b      	adds	r3, r7, #4
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	699a      	ldr	r2, [r3, #24]
 801b828:	463b      	mov	r3, r7
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	699b      	ldr	r3, [r3, #24]
 801b82e:	429a      	cmp	r2, r3
 801b830:	bf0c      	ite	eq
 801b832:	2301      	moveq	r3, #1
 801b834:	2300      	movne	r3, #0
 801b836:	b2dc      	uxtb	r4, r3
 801b838:	e2f2      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801b83a:	2500      	movs	r5, #0
 801b83c:	1d3b      	adds	r3, r7, #4
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	f103 040c 	add.w	r4, r3, #12
 801b844:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801b848:	4921      	ldr	r1, [pc, #132]	; (801b8d0 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801b84a:	4618      	mov	r0, r3
 801b84c:	f7ee f9fd 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b850:	2601      	movs	r6, #1
 801b852:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801b856:	4619      	mov	r1, r3
 801b858:	4620      	mov	r0, r4
 801b85a:	f7ee fdba 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b85e:	4603      	mov	r3, r0
 801b860:	2b00      	cmp	r3, #0
 801b862:	d015      	beq.n	801b890 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801b864:	463b      	mov	r3, r7
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	f103 040c 	add.w	r4, r3, #12
 801b86c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801b870:	4918      	ldr	r1, [pc, #96]	; (801b8d4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801b872:	4618      	mov	r0, r3
 801b874:	f7ee f9e9 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b878:	2501      	movs	r5, #1
 801b87a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801b87e:	4619      	mov	r1, r3
 801b880:	4620      	mov	r0, r4
 801b882:	f7ee fda6 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b886:	4603      	mov	r3, r0
 801b888:	2b00      	cmp	r3, #0
 801b88a:	d001      	beq.n	801b890 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801b88c:	2401      	movs	r4, #1
 801b88e:	e000      	b.n	801b892 <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801b890:	2400      	movs	r4, #0
 801b892:	2d00      	cmp	r5, #0
 801b894:	d004      	beq.n	801b8a0 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801b896:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801b89a:	4618      	mov	r0, r3
 801b89c:	f7ee fd8d 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b8a0:	2e00      	cmp	r6, #0
 801b8a2:	d004      	beq.n	801b8ae <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801b8a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801b8a8:	4618      	mov	r0, r3
 801b8aa:	f7ee fd86 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b8ae:	2c00      	cmp	r4, #0
 801b8b0:	d014      	beq.n	801b8dc <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801b8b2:	1d3b      	adds	r3, r7, #4
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	699a      	ldr	r2, [r3, #24]
 801b8b8:	463b      	mov	r3, r7
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	699b      	ldr	r3, [r3, #24]
 801b8be:	429a      	cmp	r2, r3
 801b8c0:	bf0c      	ite	eq
 801b8c2:	2301      	moveq	r3, #1
 801b8c4:	2300      	movne	r3, #0
 801b8c6:	b2dc      	uxtb	r4, r3
 801b8c8:	e2aa      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b8ca:	bf00      	nop
 801b8cc:	08023030 	.word	0x08023030
 801b8d0:	08023058 	.word	0x08023058
 801b8d4:	0802303c 	.word	0x0802303c
 801b8d8:	0802304c 	.word	0x0802304c
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801b8dc:	2500      	movs	r5, #0
 801b8de:	1d3b      	adds	r3, r7, #4
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	f103 040c 	add.w	r4, r3, #12
 801b8e6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801b8ea:	49ae      	ldr	r1, [pc, #696]	; (801bba4 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801b8ec:	4618      	mov	r0, r3
 801b8ee:	f7ee f9ac 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b8f2:	2601      	movs	r6, #1
 801b8f4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801b8f8:	4619      	mov	r1, r3
 801b8fa:	4620      	mov	r0, r4
 801b8fc:	f7ee fd69 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b900:	4603      	mov	r3, r0
 801b902:	2b00      	cmp	r3, #0
 801b904:	d015      	beq.n	801b932 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801b906:	463b      	mov	r3, r7
 801b908:	681b      	ldr	r3, [r3, #0]
 801b90a:	f103 040c 	add.w	r4, r3, #12
 801b90e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b912:	49a5      	ldr	r1, [pc, #660]	; (801bba8 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801b914:	4618      	mov	r0, r3
 801b916:	f7ee f998 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b91a:	2501      	movs	r5, #1
 801b91c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b920:	4619      	mov	r1, r3
 801b922:	4620      	mov	r0, r4
 801b924:	f7ee fd55 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b928:	4603      	mov	r3, r0
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d001      	beq.n	801b932 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801b92e:	2401      	movs	r4, #1
 801b930:	e000      	b.n	801b934 <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801b932:	2400      	movs	r4, #0
 801b934:	2d00      	cmp	r5, #0
 801b936:	d004      	beq.n	801b942 <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801b938:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b93c:	4618      	mov	r0, r3
 801b93e:	f7ee fd3c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b942:	2e00      	cmp	r6, #0
 801b944:	d004      	beq.n	801b950 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801b946:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801b94a:	4618      	mov	r0, r3
 801b94c:	f7ee fd35 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b950:	2c00      	cmp	r4, #0
 801b952:	d010      	beq.n	801b976 <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801b954:	1d3b      	adds	r3, r7, #4
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	699b      	ldr	r3, [r3, #24]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	db09      	blt.n	801b972 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801b95e:	1d3b      	adds	r3, r7, #4
 801b960:	681b      	ldr	r3, [r3, #0]
 801b962:	699b      	ldr	r3, [r3, #24]
 801b964:	463a      	mov	r2, r7
 801b966:	6812      	ldr	r2, [r2, #0]
 801b968:	6992      	ldr	r2, [r2, #24]
 801b96a:	4293      	cmp	r3, r2
 801b96c:	d101      	bne.n	801b972 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801b96e:	2401      	movs	r4, #1
 801b970:	e256      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b972:	2400      	movs	r4, #0
 801b974:	e254      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801b976:	2500      	movs	r5, #0
 801b978:	1d3b      	adds	r3, r7, #4
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	f103 040c 	add.w	r4, r3, #12
 801b980:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801b984:	4988      	ldr	r1, [pc, #544]	; (801bba8 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801b986:	4618      	mov	r0, r3
 801b988:	f7ee f95f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b98c:	2601      	movs	r6, #1
 801b98e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801b992:	4619      	mov	r1, r3
 801b994:	4620      	mov	r0, r4
 801b996:	f7ee fd1c 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b99a:	4603      	mov	r3, r0
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d015      	beq.n	801b9cc <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801b9a0:	463b      	mov	r3, r7
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	f103 040c 	add.w	r4, r3, #12
 801b9a8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801b9ac:	497d      	ldr	r1, [pc, #500]	; (801bba4 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	f7ee f94b 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801b9b4:	2501      	movs	r5, #1
 801b9b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801b9ba:	4619      	mov	r1, r3
 801b9bc:	4620      	mov	r0, r4
 801b9be:	f7ee fd08 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801b9c2:	4603      	mov	r3, r0
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d001      	beq.n	801b9cc <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801b9c8:	2401      	movs	r4, #1
 801b9ca:	e000      	b.n	801b9ce <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801b9cc:	2400      	movs	r4, #0
 801b9ce:	2d00      	cmp	r5, #0
 801b9d0:	d004      	beq.n	801b9dc <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801b9d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801b9d6:	4618      	mov	r0, r3
 801b9d8:	f7ee fcef 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b9dc:	2e00      	cmp	r6, #0
 801b9de:	d004      	beq.n	801b9ea <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801b9e0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801b9e4:	4618      	mov	r0, r3
 801b9e6:	f7ee fce8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801b9ea:	2c00      	cmp	r4, #0
 801b9ec:	d010      	beq.n	801ba10 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801b9ee:	463b      	mov	r3, r7
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	699b      	ldr	r3, [r3, #24]
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	db09      	blt.n	801ba0c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801b9f8:	1d3b      	adds	r3, r7, #4
 801b9fa:	681b      	ldr	r3, [r3, #0]
 801b9fc:	699b      	ldr	r3, [r3, #24]
 801b9fe:	463a      	mov	r2, r7
 801ba00:	6812      	ldr	r2, [r2, #0]
 801ba02:	6992      	ldr	r2, [r2, #24]
 801ba04:	4293      	cmp	r3, r2
 801ba06:	d101      	bne.n	801ba0c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801ba08:	2401      	movs	r4, #1
 801ba0a:	e209      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ba0c:	2400      	movs	r4, #0
 801ba0e:	e207      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801ba10:	1d3b      	adds	r3, r7, #4
 801ba12:	681b      	ldr	r3, [r3, #0]
 801ba14:	f103 020c 	add.w	r2, r3, #12
 801ba18:	463b      	mov	r3, r7
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	330c      	adds	r3, #12
 801ba1e:	4619      	mov	r1, r3
 801ba20:	4610      	mov	r0, r2
 801ba22:	f7ee fd1b 	bl	800a45c <_ZneRK12SimpleStringS1_>
 801ba26:	4603      	mov	r3, r0
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d001      	beq.n	801ba30 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801ba2c:	2400      	movs	r4, #0
 801ba2e:	e1f7      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801ba30:	1d3b      	adds	r3, r7, #4
 801ba32:	681b      	ldr	r3, [r3, #0]
 801ba34:	f103 040c 	add.w	r4, r3, #12
 801ba38:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801ba3c:	495b      	ldr	r1, [pc, #364]	; (801bbac <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801ba3e:	4618      	mov	r0, r3
 801ba40:	f7ee f903 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801ba44:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801ba48:	4619      	mov	r1, r3
 801ba4a:	4620      	mov	r0, r4
 801ba4c:	f7ee fcc1 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801ba50:	4603      	mov	r3, r0
 801ba52:	461c      	mov	r4, r3
 801ba54:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801ba58:	4618      	mov	r0, r3
 801ba5a:	f7ee fcae 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801ba5e:	2c00      	cmp	r4, #0
 801ba60:	d00b      	beq.n	801ba7a <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801ba62:	1d3b      	adds	r3, r7, #4
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	7e1a      	ldrb	r2, [r3, #24]
 801ba68:	463b      	mov	r3, r7
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	7e1b      	ldrb	r3, [r3, #24]
 801ba6e:	429a      	cmp	r2, r3
 801ba70:	bf0c      	ite	eq
 801ba72:	2301      	moveq	r3, #1
 801ba74:	2300      	movne	r3, #0
 801ba76:	b2dc      	uxtb	r4, r3
 801ba78:	e1d2      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801ba7a:	1d3b      	adds	r3, r7, #4
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	f103 040c 	add.w	r4, r3, #12
 801ba82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801ba86:	494a      	ldr	r1, [pc, #296]	; (801bbb0 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801ba88:	4618      	mov	r0, r3
 801ba8a:	f7ee f8de 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801ba8e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801ba92:	4619      	mov	r1, r3
 801ba94:	4620      	mov	r0, r4
 801ba96:	f7ee fc9c 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801ba9a:	4603      	mov	r3, r0
 801ba9c:	461c      	mov	r4, r3
 801ba9e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801baa2:	4618      	mov	r0, r3
 801baa4:	f7ee fc89 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801baa8:	2c00      	cmp	r4, #0
 801baaa:	d00b      	beq.n	801bac4 <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801baac:	1d3b      	adds	r3, r7, #4
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	699a      	ldr	r2, [r3, #24]
 801bab2:	463b      	mov	r3, r7
 801bab4:	681b      	ldr	r3, [r3, #0]
 801bab6:	699b      	ldr	r3, [r3, #24]
 801bab8:	429a      	cmp	r2, r3
 801baba:	bf0c      	ite	eq
 801babc:	2301      	moveq	r3, #1
 801babe:	2300      	movne	r3, #0
 801bac0:	b2dc      	uxtb	r4, r3
 801bac2:	e1ad      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801bac4:	1d3b      	adds	r3, r7, #4
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	f103 040c 	add.w	r4, r3, #12
 801bacc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801bad0:	4938      	ldr	r1, [pc, #224]	; (801bbb4 <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801bad2:	4618      	mov	r0, r3
 801bad4:	f7ee f8b9 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bad8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801badc:	4619      	mov	r1, r3
 801bade:	4620      	mov	r0, r4
 801bae0:	f7ee fc77 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801bae4:	4603      	mov	r3, r0
 801bae6:	461c      	mov	r4, r3
 801bae8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801baec:	4618      	mov	r0, r3
 801baee:	f7ee fc64 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801baf2:	2c00      	cmp	r4, #0
 801baf4:	d00b      	beq.n	801bb0e <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801baf6:	1d3b      	adds	r3, r7, #4
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	699a      	ldr	r2, [r3, #24]
 801bafc:	463b      	mov	r3, r7
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	699b      	ldr	r3, [r3, #24]
 801bb02:	429a      	cmp	r2, r3
 801bb04:	bf0c      	ite	eq
 801bb06:	2301      	moveq	r3, #1
 801bb08:	2300      	movne	r3, #0
 801bb0a:	b2dc      	uxtb	r4, r3
 801bb0c:	e188      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801bb0e:	1d3b      	adds	r3, r7, #4
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	f103 040c 	add.w	r4, r3, #12
 801bb16:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bb1a:	4922      	ldr	r1, [pc, #136]	; (801bba4 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801bb1c:	4618      	mov	r0, r3
 801bb1e:	f7ee f894 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bb22:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bb26:	4619      	mov	r1, r3
 801bb28:	4620      	mov	r0, r4
 801bb2a:	f7ee fc52 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801bb2e:	4603      	mov	r3, r0
 801bb30:	461c      	mov	r4, r3
 801bb32:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bb36:	4618      	mov	r0, r3
 801bb38:	f7ee fc3f 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bb3c:	2c00      	cmp	r4, #0
 801bb3e:	d00b      	beq.n	801bb58 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801bb40:	1d3b      	adds	r3, r7, #4
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	699a      	ldr	r2, [r3, #24]
 801bb46:	463b      	mov	r3, r7
 801bb48:	681b      	ldr	r3, [r3, #0]
 801bb4a:	699b      	ldr	r3, [r3, #24]
 801bb4c:	429a      	cmp	r2, r3
 801bb4e:	bf0c      	ite	eq
 801bb50:	2301      	moveq	r3, #1
 801bb52:	2300      	movne	r3, #0
 801bb54:	b2dc      	uxtb	r4, r3
 801bb56:	e163      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801bb58:	1d3b      	adds	r3, r7, #4
 801bb5a:	681b      	ldr	r3, [r3, #0]
 801bb5c:	f103 040c 	add.w	r4, r3, #12
 801bb60:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801bb64:	4910      	ldr	r1, [pc, #64]	; (801bba8 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801bb66:	4618      	mov	r0, r3
 801bb68:	f7ee f86f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bb6c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801bb70:	4619      	mov	r1, r3
 801bb72:	4620      	mov	r0, r4
 801bb74:	f7ee fc2d 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801bb78:	4603      	mov	r3, r0
 801bb7a:	461c      	mov	r4, r3
 801bb7c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801bb80:	4618      	mov	r0, r3
 801bb82:	f7ee fc1a 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bb86:	2c00      	cmp	r4, #0
 801bb88:	d016      	beq.n	801bbb8 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801bb8a:	1d3b      	adds	r3, r7, #4
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	699a      	ldr	r2, [r3, #24]
 801bb90:	463b      	mov	r3, r7
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	699b      	ldr	r3, [r3, #24]
 801bb96:	429a      	cmp	r2, r3
 801bb98:	bf0c      	ite	eq
 801bb9a:	2301      	moveq	r3, #1
 801bb9c:	2300      	movne	r3, #0
 801bb9e:	b2dc      	uxtb	r4, r3
 801bba0:	e13e      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801bba2:	bf00      	nop
 801bba4:	0802304c 	.word	0x0802304c
 801bba8:	08023058 	.word	0x08023058
 801bbac:	08023034 	.word	0x08023034
 801bbb0:	08023030 	.word	0x08023030
 801bbb4:	0802303c 	.word	0x0802303c
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801bbb8:	1d3b      	adds	r3, r7, #4
 801bbba:	681b      	ldr	r3, [r3, #0]
 801bbbc:	f103 040c 	add.w	r4, r3, #12
 801bbc0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801bbc4:	4999      	ldr	r1, [pc, #612]	; (801be2c <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801bbc6:	4618      	mov	r0, r3
 801bbc8:	f7ee f83f 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bbcc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801bbd0:	4619      	mov	r1, r3
 801bbd2:	4620      	mov	r0, r4
 801bbd4:	f7ee fbfd 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801bbd8:	4603      	mov	r3, r0
 801bbda:	461c      	mov	r4, r3
 801bbdc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801bbe0:	4618      	mov	r0, r3
 801bbe2:	f7ee fbea 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bbe6:	2c00      	cmp	r4, #0
 801bbe8:	d026      	beq.n	801bc38 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801bbea:	1d3b      	adds	r3, r7, #4
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	699a      	ldr	r2, [r3, #24]
 801bbf0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801bbf4:	4611      	mov	r1, r2
 801bbf6:	4618      	mov	r0, r3
 801bbf8:	f7ee f827 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bbfc:	463b      	mov	r3, r7
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	699a      	ldr	r2, [r3, #24]
 801bc02:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801bc06:	4611      	mov	r1, r2
 801bc08:	4618      	mov	r0, r3
 801bc0a:	f7ee f81e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bc0e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801bc12:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801bc16:	4611      	mov	r1, r2
 801bc18:	4618      	mov	r0, r3
 801bc1a:	f7ee fbda 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801bc1e:	4603      	mov	r3, r0
 801bc20:	461c      	mov	r4, r3
 801bc22:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801bc26:	4618      	mov	r0, r3
 801bc28:	f7ee fbc7 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bc2c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801bc30:	4618      	mov	r0, r3
 801bc32:	f7ee fbc2 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bc36:	e0f3      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801bc38:	1d3b      	adds	r3, r7, #4
 801bc3a:	681b      	ldr	r3, [r3, #0]
 801bc3c:	f103 040c 	add.w	r4, r3, #12
 801bc40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801bc44:	497a      	ldr	r1, [pc, #488]	; (801be30 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801bc46:	4618      	mov	r0, r3
 801bc48:	f7ed ffff 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bc4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801bc50:	4619      	mov	r1, r3
 801bc52:	4620      	mov	r0, r4
 801bc54:	f7ee fbbd 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801bc58:	4603      	mov	r3, r0
 801bc5a:	461c      	mov	r4, r3
 801bc5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801bc60:	4618      	mov	r0, r3
 801bc62:	f7ee fbaa 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bc66:	2c00      	cmp	r4, #0
 801bc68:	d00b      	beq.n	801bc82 <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801bc6a:	1d3b      	adds	r3, r7, #4
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	699a      	ldr	r2, [r3, #24]
 801bc70:	463b      	mov	r3, r7
 801bc72:	681b      	ldr	r3, [r3, #0]
 801bc74:	699b      	ldr	r3, [r3, #24]
 801bc76:	429a      	cmp	r2, r3
 801bc78:	bf0c      	ite	eq
 801bc7a:	2301      	moveq	r3, #1
 801bc7c:	2300      	movne	r3, #0
 801bc7e:	b2dc      	uxtb	r4, r3
 801bc80:	e0ce      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801bc82:	1d3b      	adds	r3, r7, #4
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	f103 040c 	add.w	r4, r3, #12
 801bc8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801bc8e:	4969      	ldr	r1, [pc, #420]	; (801be34 <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801bc90:	4618      	mov	r0, r3
 801bc92:	f7ed ffda 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bc96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801bc9a:	4619      	mov	r1, r3
 801bc9c:	4620      	mov	r0, r4
 801bc9e:	f7ee fb98 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801bca2:	4603      	mov	r3, r0
 801bca4:	461c      	mov	r4, r3
 801bca6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801bcaa:	4618      	mov	r0, r3
 801bcac:	f7ee fb85 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bcb0:	2c00      	cmp	r4, #0
 801bcb2:	d00b      	beq.n	801bccc <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801bcb4:	1d3b      	adds	r3, r7, #4
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	699a      	ldr	r2, [r3, #24]
 801bcba:	463b      	mov	r3, r7
 801bcbc:	681b      	ldr	r3, [r3, #0]
 801bcbe:	699b      	ldr	r3, [r3, #24]
 801bcc0:	429a      	cmp	r2, r3
 801bcc2:	bf0c      	ite	eq
 801bcc4:	2301      	moveq	r3, #1
 801bcc6:	2300      	movne	r3, #0
 801bcc8:	b2dc      	uxtb	r4, r3
 801bcca:	e0a9      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801bccc:	1d3b      	adds	r3, r7, #4
 801bcce:	681b      	ldr	r3, [r3, #0]
 801bcd0:	f103 040c 	add.w	r4, r3, #12
 801bcd4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801bcd8:	4957      	ldr	r1, [pc, #348]	; (801be38 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801bcda:	4618      	mov	r0, r3
 801bcdc:	f7ed ffb5 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bce0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801bce4:	4619      	mov	r1, r3
 801bce6:	4620      	mov	r0, r4
 801bce8:	f7ee fb73 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801bcec:	4603      	mov	r3, r0
 801bcee:	461c      	mov	r4, r3
 801bcf0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801bcf4:	4618      	mov	r0, r3
 801bcf6:	f7ee fb60 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bcfa:	2c00      	cmp	r4, #0
 801bcfc:	d00b      	beq.n	801bd16 <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801bcfe:	1d3b      	adds	r3, r7, #4
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	699a      	ldr	r2, [r3, #24]
 801bd04:	463b      	mov	r3, r7
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	699b      	ldr	r3, [r3, #24]
 801bd0a:	429a      	cmp	r2, r3
 801bd0c:	bf0c      	ite	eq
 801bd0e:	2301      	moveq	r3, #1
 801bd10:	2300      	movne	r3, #0
 801bd12:	b2dc      	uxtb	r4, r3
 801bd14:	e084      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801bd16:	1d3b      	adds	r3, r7, #4
 801bd18:	681b      	ldr	r3, [r3, #0]
 801bd1a:	f103 040c 	add.w	r4, r3, #12
 801bd1e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801bd22:	4946      	ldr	r1, [pc, #280]	; (801be3c <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801bd24:	4618      	mov	r0, r3
 801bd26:	f7ed ff90 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bd2a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801bd2e:	4619      	mov	r1, r3
 801bd30:	4620      	mov	r0, r4
 801bd32:	f7ee fb4e 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801bd36:	4603      	mov	r3, r0
 801bd38:	461c      	mov	r4, r3
 801bd3a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801bd3e:	4618      	mov	r0, r3
 801bd40:	f7ee fb3b 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bd44:	2c00      	cmp	r4, #0
 801bd46:	d01c      	beq.n	801bd82 <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801bd48:	1d3b      	adds	r3, r7, #4
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	ed93 7b06 	vldr	d7, [r3, #24]
 801bd50:	463b      	mov	r3, r7
 801bd52:	681b      	ldr	r3, [r3, #0]
 801bd54:	ed93 6b06 	vldr	d6, [r3, #24]
 801bd58:	1d3b      	adds	r3, r7, #4
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	ed93 5b08 	vldr	d5, [r3, #32]
 801bd60:	eeb0 2a45 	vmov.f32	s4, s10
 801bd64:	eef0 2a65 	vmov.f32	s5, s11
 801bd68:	eeb0 1a46 	vmov.f32	s2, s12
 801bd6c:	eef0 1a66 	vmov.f32	s3, s13
 801bd70:	eeb0 0a47 	vmov.f32	s0, s14
 801bd74:	eef0 0a67 	vmov.f32	s1, s15
 801bd78:	f7f3 fe1a 	bl	800f9b0 <_Z13doubles_equalddd>
 801bd7c:	4603      	mov	r3, r0
 801bd7e:	461c      	mov	r4, r3
 801bd80:	e04e      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801bd82:	1d3b      	adds	r3, r7, #4
 801bd84:	681b      	ldr	r3, [r3, #0]
 801bd86:	f103 040c 	add.w	r4, r3, #12
 801bd8a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801bd8e:	492c      	ldr	r1, [pc, #176]	; (801be40 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801bd90:	4618      	mov	r0, r3
 801bd92:	f7ed ff5a 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bd96:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801bd9a:	4619      	mov	r1, r3
 801bd9c:	4620      	mov	r0, r4
 801bd9e:	f7ee fb18 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801bda2:	4603      	mov	r3, r0
 801bda4:	461c      	mov	r4, r3
 801bda6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801bdaa:	4618      	mov	r0, r3
 801bdac:	f7ee fb05 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bdb0:	2c00      	cmp	r4, #0
 801bdb2:	d01c      	beq.n	801bdee <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801bdb4:	1d3b      	adds	r3, r7, #4
 801bdb6:	681b      	ldr	r3, [r3, #0]
 801bdb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801bdba:	463b      	mov	r3, r7
 801bdbc:	681b      	ldr	r3, [r3, #0]
 801bdbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bdc0:	429a      	cmp	r2, r3
 801bdc2:	d001      	beq.n	801bdc8 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801bdc4:	2400      	movs	r4, #0
 801bdc6:	e02b      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801bdc8:	1d3b      	adds	r3, r7, #4
 801bdca:	681b      	ldr	r3, [r3, #0]
 801bdcc:	6998      	ldr	r0, [r3, #24]
 801bdce:	463b      	mov	r3, r7
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	6999      	ldr	r1, [r3, #24]
 801bdd4:	1d3b      	adds	r3, r7, #4
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bdda:	461a      	mov	r2, r3
 801bddc:	f7ed fe54 	bl	8009a88 <_ZN12SimpleString6MemCmpEPKvS1_j>
 801bde0:	4603      	mov	r3, r0
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	bf0c      	ite	eq
 801bde6:	2301      	moveq	r3, #1
 801bde8:	2300      	movne	r3, #0
 801bdea:	b2dc      	uxtb	r4, r3
 801bdec:	e018      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801bdee:	1d3b      	adds	r3, r7, #4
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d012      	beq.n	801be1e <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801bdf8:	1d3b      	adds	r3, r7, #4
 801bdfa:	681b      	ldr	r3, [r3, #0]
 801bdfc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801bdfe:	1d3b      	adds	r3, r7, #4
 801be00:	681b      	ldr	r3, [r3, #0]
 801be02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	3308      	adds	r3, #8
 801be08:	681b      	ldr	r3, [r3, #0]
 801be0a:	1d3a      	adds	r2, r7, #4
 801be0c:	6812      	ldr	r2, [r2, #0]
 801be0e:	6991      	ldr	r1, [r2, #24]
 801be10:	463a      	mov	r2, r7
 801be12:	6812      	ldr	r2, [r2, #0]
 801be14:	6992      	ldr	r2, [r2, #24]
 801be16:	4798      	blx	r3
 801be18:	4603      	mov	r3, r0
 801be1a:	461c      	mov	r4, r3
 801be1c:	e000      	b.n	801be20 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801be1e:	2400      	movs	r4, #0
 801be20:	4623      	mov	r3, r4
}
 801be22:	4618      	mov	r0, r3
 801be24:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801be28:	46bd      	mov	sp, r7
 801be2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be2c:	080230fc 	.word	0x080230fc
 801be30:	080230dc 	.word	0x080230dc
 801be34:	080230e4 	.word	0x080230e4
 801be38:	080230f0 	.word	0x080230f0
 801be3c:	080230d4 	.word	0x080230d4
 801be40:	08023108 	.word	0x08023108

0801be44 <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801be44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be46:	b087      	sub	sp, #28
 801be48:	af00      	add	r7, sp, #0
 801be4a:	6078      	str	r0, [r7, #4]
 801be4c:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	f103 020c 	add.w	r2, r3, #12
 801be54:	683b      	ldr	r3, [r7, #0]
 801be56:	330c      	adds	r3, #12
 801be58:	4619      	mov	r1, r3
 801be5a:	4610      	mov	r0, r2
 801be5c:	f7ee fab9 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801be60:	4603      	mov	r3, r0
 801be62:	2b00      	cmp	r3, #0
 801be64:	d001      	beq.n	801be6a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801be66:	2301      	movs	r3, #1
 801be68:	e03c      	b.n	801bee4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801be6a:	2500      	movs	r5, #0
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	f103 040c 	add.w	r4, r3, #12
 801be72:	f107 0308 	add.w	r3, r7, #8
 801be76:	491d      	ldr	r1, [pc, #116]	; (801beec <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801be78:	4618      	mov	r0, r3
 801be7a:	f7ed fee6 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801be7e:	2601      	movs	r6, #1
 801be80:	f107 0308 	add.w	r3, r7, #8
 801be84:	4619      	mov	r1, r3
 801be86:	4620      	mov	r0, r4
 801be88:	f7ee faa3 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801be8c:	4603      	mov	r3, r0
 801be8e:	2b00      	cmp	r3, #0
 801be90:	d014      	beq.n	801bebc <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801be92:	683b      	ldr	r3, [r7, #0]
 801be94:	f103 040c 	add.w	r4, r3, #12
 801be98:	f107 0310 	add.w	r3, r7, #16
 801be9c:	4914      	ldr	r1, [pc, #80]	; (801bef0 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801be9e:	4618      	mov	r0, r3
 801bea0:	f7ed fed3 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bea4:	2501      	movs	r5, #1
 801bea6:	f107 0310 	add.w	r3, r7, #16
 801beaa:	4619      	mov	r1, r3
 801beac:	4620      	mov	r0, r4
 801beae:	f7ee fa90 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801beb2:	4603      	mov	r3, r0
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d001      	beq.n	801bebc <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801beb8:	2401      	movs	r4, #1
 801beba:	e000      	b.n	801bebe <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801bebc:	2400      	movs	r4, #0
 801bebe:	2d00      	cmp	r5, #0
 801bec0:	d004      	beq.n	801becc <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801bec2:	f107 0310 	add.w	r3, r7, #16
 801bec6:	4618      	mov	r0, r3
 801bec8:	f7ee fa77 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801becc:	2e00      	cmp	r6, #0
 801bece:	d004      	beq.n	801beda <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801bed0:	f107 0308 	add.w	r3, r7, #8
 801bed4:	4618      	mov	r0, r3
 801bed6:	f7ee fa70 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801beda:	2c00      	cmp	r4, #0
 801bedc:	d001      	beq.n	801bee2 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801bede:	2301      	movs	r3, #1
 801bee0:	e000      	b.n	801bee4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801bee2:	2300      	movs	r3, #0
}
 801bee4:	4618      	mov	r0, r3
 801bee6:	371c      	adds	r7, #28
 801bee8:	46bd      	mov	sp, r7
 801beea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801beec:	080230e4 	.word	0x080230e4
 801bef0:	080230dc 	.word	0x080230dc

0801bef4 <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801bef4:	b590      	push	{r4, r7, lr}
 801bef6:	b0b9      	sub	sp, #228	; 0xe4
 801bef8:	af00      	add	r7, sp, #0
 801befa:	6078      	str	r0, [r7, #4]
 801befc:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801befe:	683b      	ldr	r3, [r7, #0]
 801bf00:	f103 040c 	add.w	r4, r3, #12
 801bf04:	f107 0308 	add.w	r3, r7, #8
 801bf08:	49d4      	ldr	r1, [pc, #848]	; (801c25c <_ZNK14MockNamedValue8toStringEv+0x368>)
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	f7ed fe9d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bf10:	f107 0308 	add.w	r3, r7, #8
 801bf14:	4619      	mov	r1, r3
 801bf16:	4620      	mov	r0, r4
 801bf18:	f7ee fa5b 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801bf1c:	4603      	mov	r3, r0
 801bf1e:	461c      	mov	r4, r3
 801bf20:	f107 0308 	add.w	r3, r7, #8
 801bf24:	4618      	mov	r0, r3
 801bf26:	f7ee fa48 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bf2a:	2c00      	cmp	r4, #0
 801bf2c:	d007      	beq.n	801bf3e <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801bf2e:	683b      	ldr	r3, [r7, #0]
 801bf30:	7e1a      	ldrb	r2, [r3, #24]
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	4611      	mov	r1, r2
 801bf36:	4618      	mov	r0, r3
 801bf38:	f7ee fcb0 	bl	800a89c <_Z10StringFromb>
 801bf3c:	e23f      	b.n	801c3be <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801bf3e:	683b      	ldr	r3, [r7, #0]
 801bf40:	f103 040c 	add.w	r4, r3, #12
 801bf44:	f107 0310 	add.w	r3, r7, #16
 801bf48:	49c5      	ldr	r1, [pc, #788]	; (801c260 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801bf4a:	4618      	mov	r0, r3
 801bf4c:	f7ed fe7d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bf50:	f107 0310 	add.w	r3, r7, #16
 801bf54:	4619      	mov	r1, r3
 801bf56:	4620      	mov	r0, r4
 801bf58:	f7ee fa3b 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801bf5c:	4603      	mov	r3, r0
 801bf5e:	461c      	mov	r4, r3
 801bf60:	f107 0310 	add.w	r3, r7, #16
 801bf64:	4618      	mov	r0, r3
 801bf66:	f7ee fa28 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bf6a:	2c00      	cmp	r4, #0
 801bf6c:	d03b      	beq.n	801bfe6 <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801bf6e:	683b      	ldr	r3, [r7, #0]
 801bf70:	699a      	ldr	r2, [r3, #24]
 801bf72:	f107 0320 	add.w	r3, r7, #32
 801bf76:	4611      	mov	r1, r2
 801bf78:	4618      	mov	r0, r3
 801bf7a:	f7ee fce5 	bl	800a948 <_Z10StringFromi>
 801bf7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bf82:	49b8      	ldr	r1, [pc, #736]	; (801c264 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801bf84:	4618      	mov	r0, r3
 801bf86:	f7ed fe60 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bf8a:	f107 0318 	add.w	r3, r7, #24
 801bf8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801bf92:	f107 0120 	add.w	r1, r7, #32
 801bf96:	4618      	mov	r0, r3
 801bf98:	f7ee fa71 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 801bf9c:	683b      	ldr	r3, [r7, #0]
 801bf9e:	699a      	ldr	r2, [r3, #24]
 801bfa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bfa4:	4611      	mov	r1, r2
 801bfa6:	4618      	mov	r0, r3
 801bfa8:	f7ee fdbe 	bl	800ab28 <_Z30BracketsFormattedHexStringFromi>
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801bfb2:	f107 0118 	add.w	r1, r7, #24
 801bfb6:	4618      	mov	r0, r3
 801bfb8:	f7ee fa61 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 801bfbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bfc0:	4618      	mov	r0, r3
 801bfc2:	f7ee f9fa 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bfc6:	f107 0318 	add.w	r3, r7, #24
 801bfca:	4618      	mov	r0, r3
 801bfcc:	f7ee f9f5 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bfd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bfd4:	4618      	mov	r0, r3
 801bfd6:	f7ee f9f0 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bfda:	f107 0320 	add.w	r3, r7, #32
 801bfde:	4618      	mov	r0, r3
 801bfe0:	f7ee f9eb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801bfe4:	e1eb      	b.n	801c3be <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801bfe6:	683b      	ldr	r3, [r7, #0]
 801bfe8:	f103 040c 	add.w	r4, r3, #12
 801bfec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bff0:	499d      	ldr	r1, [pc, #628]	; (801c268 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801bff2:	4618      	mov	r0, r3
 801bff4:	f7ed fe29 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801bff8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bffc:	4619      	mov	r1, r3
 801bffe:	4620      	mov	r0, r4
 801c000:	f7ee f9e7 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801c004:	4603      	mov	r3, r0
 801c006:	461c      	mov	r4, r3
 801c008:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c00c:	4618      	mov	r0, r3
 801c00e:	f7ee f9d4 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c012:	2c00      	cmp	r4, #0
 801c014:	d03b      	beq.n	801c08e <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801c016:	683b      	ldr	r3, [r7, #0]
 801c018:	699a      	ldr	r2, [r3, #24]
 801c01a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c01e:	4611      	mov	r1, r2
 801c020:	4618      	mov	r0, r3
 801c022:	f7ee fef9 	bl	800ae18 <_Z10StringFromj>
 801c026:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c02a:	498e      	ldr	r1, [pc, #568]	; (801c264 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801c02c:	4618      	mov	r0, r3
 801c02e:	f7ed fe0c 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801c032:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c036:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c03a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801c03e:	4618      	mov	r0, r3
 801c040:	f7ee fa1d 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 801c044:	683b      	ldr	r3, [r7, #0]
 801c046:	699a      	ldr	r2, [r3, #24]
 801c048:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c04c:	4611      	mov	r1, r2
 801c04e:	4618      	mov	r0, r3
 801c050:	f7ee fd86 	bl	800ab60 <_Z30BracketsFormattedHexStringFromj>
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801c05a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801c05e:	4618      	mov	r0, r3
 801c060:	f7ee fa0d 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 801c064:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c068:	4618      	mov	r0, r3
 801c06a:	f7ee f9a6 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c06e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c072:	4618      	mov	r0, r3
 801c074:	f7ee f9a1 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c078:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c07c:	4618      	mov	r0, r3
 801c07e:	f7ee f99c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c082:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c086:	4618      	mov	r0, r3
 801c088:	f7ee f997 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c08c:	e197      	b.n	801c3be <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801c08e:	683b      	ldr	r3, [r7, #0]
 801c090:	f103 040c 	add.w	r4, r3, #12
 801c094:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c098:	4974      	ldr	r1, [pc, #464]	; (801c26c <_ZNK14MockNamedValue8toStringEv+0x378>)
 801c09a:	4618      	mov	r0, r3
 801c09c:	f7ed fdd5 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801c0a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c0a4:	4619      	mov	r1, r3
 801c0a6:	4620      	mov	r0, r4
 801c0a8:	f7ee f993 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801c0ac:	4603      	mov	r3, r0
 801c0ae:	461c      	mov	r4, r3
 801c0b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c0b4:	4618      	mov	r0, r3
 801c0b6:	f7ee f980 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c0ba:	2c00      	cmp	r4, #0
 801c0bc:	d03b      	beq.n	801c136 <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801c0be:	683b      	ldr	r3, [r7, #0]
 801c0c0:	699a      	ldr	r2, [r3, #24]
 801c0c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c0c6:	4611      	mov	r1, r2
 801c0c8:	4618      	mov	r0, r3
 801c0ca:	f7ee fc4f 	bl	800a96c <_Z10StringFroml>
 801c0ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c0d2:	4964      	ldr	r1, [pc, #400]	; (801c264 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801c0d4:	4618      	mov	r0, r3
 801c0d6:	f7ed fdb8 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801c0da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c0de:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801c0e2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801c0e6:	4618      	mov	r0, r3
 801c0e8:	f7ee f9c9 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 801c0ec:	683b      	ldr	r3, [r7, #0]
 801c0ee:	699a      	ldr	r2, [r3, #24]
 801c0f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c0f4:	4611      	mov	r1, r2
 801c0f6:	4618      	mov	r0, r3
 801c0f8:	f7ee fd4e 	bl	800ab98 <_Z30BracketsFormattedHexStringFroml>
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801c102:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801c106:	4618      	mov	r0, r3
 801c108:	f7ee f9b9 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 801c10c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c110:	4618      	mov	r0, r3
 801c112:	f7ee f952 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c116:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c11a:	4618      	mov	r0, r3
 801c11c:	f7ee f94d 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c120:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c124:	4618      	mov	r0, r3
 801c126:	f7ee f948 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c12a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c12e:	4618      	mov	r0, r3
 801c130:	f7ee f943 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c134:	e143      	b.n	801c3be <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801c136:	683b      	ldr	r3, [r7, #0]
 801c138:	f103 040c 	add.w	r4, r3, #12
 801c13c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c140:	494b      	ldr	r1, [pc, #300]	; (801c270 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801c142:	4618      	mov	r0, r3
 801c144:	f7ed fd81 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801c148:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c14c:	4619      	mov	r1, r3
 801c14e:	4620      	mov	r0, r4
 801c150:	f7ee f93f 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801c154:	4603      	mov	r3, r0
 801c156:	461c      	mov	r4, r3
 801c158:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c15c:	4618      	mov	r0, r3
 801c15e:	f7ee f92c 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c162:	2c00      	cmp	r4, #0
 801c164:	d03b      	beq.n	801c1de <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801c166:	683b      	ldr	r3, [r7, #0]
 801c168:	699a      	ldr	r2, [r3, #24]
 801c16a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c16e:	4611      	mov	r1, r2
 801c170:	4618      	mov	r0, r3
 801c172:	f7ee fe63 	bl	800ae3c <_Z10StringFromm>
 801c176:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c17a:	493a      	ldr	r1, [pc, #232]	; (801c264 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801c17c:	4618      	mov	r0, r3
 801c17e:	f7ed fd64 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801c182:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c186:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801c18a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801c18e:	4618      	mov	r0, r3
 801c190:	f7ee f975 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 801c194:	683b      	ldr	r3, [r7, #0]
 801c196:	699a      	ldr	r2, [r3, #24]
 801c198:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801c19c:	4611      	mov	r1, r2
 801c19e:	4618      	mov	r0, r3
 801c1a0:	f7ee fd16 	bl	800abd0 <_Z30BracketsFormattedHexStringFromm>
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801c1aa:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801c1ae:	4618      	mov	r0, r3
 801c1b0:	f7ee f965 	bl	800a47e <_ZNK12SimpleStringplERKS_>
 801c1b4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801c1b8:	4618      	mov	r0, r3
 801c1ba:	f7ee f8fe 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c1be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c1c2:	4618      	mov	r0, r3
 801c1c4:	f7ee f8f9 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c1c8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c1cc:	4618      	mov	r0, r3
 801c1ce:	f7ee f8f4 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c1d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c1d6:	4618      	mov	r0, r3
 801c1d8:	f7ee f8ef 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c1dc:	e0ef      	b.n	801c3be <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801c1de:	683b      	ldr	r3, [r7, #0]
 801c1e0:	f103 040c 	add.w	r4, r3, #12
 801c1e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c1e8:	4922      	ldr	r1, [pc, #136]	; (801c274 <_ZNK14MockNamedValue8toStringEv+0x380>)
 801c1ea:	4618      	mov	r0, r3
 801c1ec:	f7ed fd2d 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801c1f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c1f4:	4619      	mov	r1, r3
 801c1f6:	4620      	mov	r0, r4
 801c1f8:	f7ee f8eb 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801c1fc:	4603      	mov	r3, r0
 801c1fe:	461c      	mov	r4, r3
 801c200:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c204:	4618      	mov	r0, r3
 801c206:	f7ee f8d8 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c20a:	2c00      	cmp	r4, #0
 801c20c:	d006      	beq.n	801c21c <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801c20e:	683b      	ldr	r3, [r7, #0]
 801c210:	699b      	ldr	r3, [r3, #24]
 801c212:	4619      	mov	r1, r3
 801c214:	6878      	ldr	r0, [r7, #4]
 801c216:	f7ed fd18 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801c21a:	e0d0      	b.n	801c3be <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801c21c:	683b      	ldr	r3, [r7, #0]
 801c21e:	f103 040c 	add.w	r4, r3, #12
 801c222:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801c226:	4914      	ldr	r1, [pc, #80]	; (801c278 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801c228:	4618      	mov	r0, r3
 801c22a:	f7ed fd0e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801c22e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801c232:	4619      	mov	r1, r3
 801c234:	4620      	mov	r0, r4
 801c236:	f7ee f8cc 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801c23a:	4603      	mov	r3, r0
 801c23c:	461c      	mov	r4, r3
 801c23e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801c242:	4618      	mov	r0, r3
 801c244:	f7ee f8b9 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c248:	2c00      	cmp	r4, #0
 801c24a:	d017      	beq.n	801c27c <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801c24c:	683b      	ldr	r3, [r7, #0]
 801c24e:	699a      	ldr	r2, [r3, #24]
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	4611      	mov	r1, r2
 801c254:	4618      	mov	r0, r3
 801c256:	f7ee fb9b 	bl	800a990 <_Z10StringFromPKv>
 801c25a:	e0b0      	b.n	801c3be <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801c25c:	08023034 	.word	0x08023034
 801c260:	08023030 	.word	0x08023030
 801c264:	08023120 	.word	0x08023120
 801c268:	0802303c 	.word	0x0802303c
 801c26c:	0802304c 	.word	0x0802304c
 801c270:	08023058 	.word	0x08023058
 801c274:	080230fc 	.word	0x080230fc
 801c278:	080230dc 	.word	0x080230dc
    else if (type_ == "void (*)()")
 801c27c:	683b      	ldr	r3, [r7, #0]
 801c27e:	f103 040c 	add.w	r4, r3, #12
 801c282:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c286:	4950      	ldr	r1, [pc, #320]	; (801c3c8 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801c288:	4618      	mov	r0, r3
 801c28a:	f7ed fcde 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801c28e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c292:	4619      	mov	r1, r3
 801c294:	4620      	mov	r0, r4
 801c296:	f7ee f89c 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801c29a:	4603      	mov	r3, r0
 801c29c:	461c      	mov	r4, r3
 801c29e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c2a2:	4618      	mov	r0, r3
 801c2a4:	f7ee f889 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c2a8:	2c00      	cmp	r4, #0
 801c2aa:	d007      	beq.n	801c2bc <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801c2ac:	683b      	ldr	r3, [r7, #0]
 801c2ae:	699a      	ldr	r2, [r3, #24]
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	4611      	mov	r1, r2
 801c2b4:	4618      	mov	r0, r3
 801c2b6:	f7ee fb95 	bl	800a9e4 <_Z10StringFromPFvvE>
 801c2ba:	e080      	b.n	801c3be <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801c2bc:	683b      	ldr	r3, [r7, #0]
 801c2be:	f103 040c 	add.w	r4, r3, #12
 801c2c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c2c6:	4941      	ldr	r1, [pc, #260]	; (801c3cc <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801c2c8:	4618      	mov	r0, r3
 801c2ca:	f7ed fcbe 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801c2ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c2d2:	4619      	mov	r1, r3
 801c2d4:	4620      	mov	r0, r4
 801c2d6:	f7ee f87c 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801c2da:	4603      	mov	r3, r0
 801c2dc:	461c      	mov	r4, r3
 801c2de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c2e2:	4618      	mov	r0, r3
 801c2e4:	f7ee f869 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c2e8:	2c00      	cmp	r4, #0
 801c2ea:	d007      	beq.n	801c2fc <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801c2ec:	683b      	ldr	r3, [r7, #0]
 801c2ee:	699a      	ldr	r2, [r3, #24]
 801c2f0:	687b      	ldr	r3, [r7, #4]
 801c2f2:	4611      	mov	r1, r2
 801c2f4:	4618      	mov	r0, r3
 801c2f6:	f7ee fb4b 	bl	800a990 <_Z10StringFromPKv>
 801c2fa:	e060      	b.n	801c3be <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801c2fc:	683b      	ldr	r3, [r7, #0]
 801c2fe:	f103 040c 	add.w	r4, r3, #12
 801c302:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c306:	4932      	ldr	r1, [pc, #200]	; (801c3d0 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801c308:	4618      	mov	r0, r3
 801c30a:	f7ed fc9e 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801c30e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c312:	4619      	mov	r1, r3
 801c314:	4620      	mov	r0, r4
 801c316:	f7ee f85c 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801c31a:	4603      	mov	r3, r0
 801c31c:	461c      	mov	r4, r3
 801c31e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c322:	4618      	mov	r0, r3
 801c324:	f7ee f849 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c328:	2c00      	cmp	r4, #0
 801c32a:	d00c      	beq.n	801c346 <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801c32c:	683b      	ldr	r3, [r7, #0]
 801c32e:	ed93 7b06 	vldr	d7, [r3, #24]
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	2106      	movs	r1, #6
 801c336:	eeb0 0a47 	vmov.f32	s0, s14
 801c33a:	eef0 0a67 	vmov.f32	s1, s15
 801c33e:	4618      	mov	r0, r3
 801c340:	f7ee fd00 	bl	800ad44 <_Z10StringFromdi>
 801c344:	e03b      	b.n	801c3be <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801c346:	683b      	ldr	r3, [r7, #0]
 801c348:	f103 040c 	add.w	r4, r3, #12
 801c34c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c350:	4920      	ldr	r1, [pc, #128]	; (801c3d4 <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801c352:	4618      	mov	r0, r3
 801c354:	f7ed fc79 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801c358:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c35c:	4619      	mov	r1, r3
 801c35e:	4620      	mov	r0, r4
 801c360:	f7ee f837 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801c364:	4603      	mov	r3, r0
 801c366:	461c      	mov	r4, r3
 801c368:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c36c:	4618      	mov	r0, r3
 801c36e:	f7ee f824 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c372:	2c00      	cmp	r4, #0
 801c374:	d008      	beq.n	801c388 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801c376:	683b      	ldr	r3, [r7, #0]
 801c378:	6999      	ldr	r1, [r3, #24]
 801c37a:	683b      	ldr	r3, [r7, #0]
 801c37c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	4618      	mov	r0, r3
 801c382:	f7ee fe73 	bl	800b06c <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801c386:	e01a      	b.n	801c3be <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801c388:	683b      	ldr	r3, [r7, #0]
 801c38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d00b      	beq.n	801c3a8 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801c390:	683b      	ldr	r3, [r7, #0]
 801c392:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c394:	683b      	ldr	r3, [r7, #0]
 801c396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	330c      	adds	r3, #12
 801c39c:	681b      	ldr	r3, [r3, #0]
 801c39e:	683a      	ldr	r2, [r7, #0]
 801c3a0:	6992      	ldr	r2, [r2, #24]
 801c3a2:	6878      	ldr	r0, [r7, #4]
 801c3a4:	4798      	blx	r3
 801c3a6:	e00a      	b.n	801c3be <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801c3a8:	683b      	ldr	r3, [r7, #0]
 801c3aa:	330c      	adds	r3, #12
 801c3ac:	4618      	mov	r0, r3
 801c3ae:	f7ed ffd7 	bl	800a360 <_ZNK12SimpleString12asCharStringEv>
 801c3b2:	4602      	mov	r2, r0
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	4908      	ldr	r1, [pc, #32]	; (801c3d8 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801c3b8:	4618      	mov	r0, r3
 801c3ba:	f7ee fd05 	bl	800adc8 <_Z16StringFromFormatPKcz>

}
 801c3be:	6878      	ldr	r0, [r7, #4]
 801c3c0:	37e4      	adds	r7, #228	; 0xe4
 801c3c2:	46bd      	mov	sp, r7
 801c3c4:	bd90      	pop	{r4, r7, pc}
 801c3c6:	bf00      	nop
 801c3c8:	080230f0 	.word	0x080230f0
 801c3cc:	080230e4 	.word	0x080230e4
 801c3d0:	080230d4 	.word	0x080230d4
 801c3d4:	08023108 	.word	0x08023108
 801c3d8:	08023124 	.word	0x08023124

0801c3dc <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801c3dc:	b480      	push	{r7}
 801c3de:	b083      	sub	sp, #12
 801c3e0:	af00      	add	r7, sp, #0
 801c3e2:	6078      	str	r0, [r7, #4]
 801c3e4:	6039      	str	r1, [r7, #0]
    next_ = node;
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	683a      	ldr	r2, [r7, #0]
 801c3ea:	605a      	str	r2, [r3, #4]
}
 801c3ec:	bf00      	nop
 801c3ee:	370c      	adds	r7, #12
 801c3f0:	46bd      	mov	sp, r7
 801c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3f6:	4770      	bx	lr

0801c3f8 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801c3f8:	b480      	push	{r7}
 801c3fa:	b083      	sub	sp, #12
 801c3fc:	af00      	add	r7, sp, #0
 801c3fe:	6078      	str	r0, [r7, #4]
    return next_;
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	685b      	ldr	r3, [r3, #4]
}
 801c404:	4618      	mov	r0, r3
 801c406:	370c      	adds	r7, #12
 801c408:	46bd      	mov	sp, r7
 801c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c40e:	4770      	bx	lr

0801c410 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801c410:	b480      	push	{r7}
 801c412:	b083      	sub	sp, #12
 801c414:	af00      	add	r7, sp, #0
 801c416:	6078      	str	r0, [r7, #4]
    return data_;
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	681b      	ldr	r3, [r3, #0]
}
 801c41c:	4618      	mov	r0, r3
 801c41e:	370c      	adds	r7, #12
 801c420:	46bd      	mov	sp, r7
 801c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c426:	4770      	bx	lr

0801c428 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801c428:	b580      	push	{r7, lr}
 801c42a:	b082      	sub	sp, #8
 801c42c:	af00      	add	r7, sp, #0
 801c42e:	6078      	str	r0, [r7, #4]
    delete data_;
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	681b      	ldr	r3, [r3, #0]
 801c434:	2b00      	cmp	r3, #0
 801c436:	d004      	beq.n	801c442 <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801c438:	681a      	ldr	r2, [r3, #0]
 801c43a:	3204      	adds	r2, #4
 801c43c:	6812      	ldr	r2, [r2, #0]
 801c43e:	4618      	mov	r0, r3
 801c440:	4790      	blx	r2
}
 801c442:	bf00      	nop
 801c444:	3708      	adds	r7, #8
 801c446:	46bd      	mov	sp, r7
 801c448:	bd80      	pop	{r7, pc}

0801c44a <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801c44a:	b480      	push	{r7}
 801c44c:	b083      	sub	sp, #12
 801c44e:	af00      	add	r7, sp, #0
 801c450:	6078      	str	r0, [r7, #4]
 801c452:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	683a      	ldr	r2, [r7, #0]
 801c458:	601a      	str	r2, [r3, #0]
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	2200      	movs	r2, #0
 801c45e:	605a      	str	r2, [r3, #4]
{
}
 801c460:	687b      	ldr	r3, [r7, #4]
 801c462:	4618      	mov	r0, r3
 801c464:	370c      	adds	r7, #12
 801c466:	46bd      	mov	sp, r7
 801c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c46c:	4770      	bx	lr

0801c46e <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801c46e:	b580      	push	{r7, lr}
 801c470:	b082      	sub	sp, #8
 801c472:	af00      	add	r7, sp, #0
 801c474:	6078      	str	r0, [r7, #4]
 801c476:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801c478:	683b      	ldr	r3, [r7, #0]
 801c47a:	6819      	ldr	r1, [r3, #0]
 801c47c:	683b      	ldr	r3, [r7, #0]
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	335c      	adds	r3, #92	; 0x5c
 801c484:	681b      	ldr	r3, [r3, #0]
 801c486:	687a      	ldr	r2, [r7, #4]
 801c488:	4610      	mov	r0, r2
 801c48a:	4798      	blx	r3
}
 801c48c:	6878      	ldr	r0, [r7, #4]
 801c48e:	3708      	adds	r7, #8
 801c490:	46bd      	mov	sp, r7
 801c492:	bd80      	pop	{r7, pc}

0801c494 <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801c494:	b580      	push	{r7, lr}
 801c496:	b082      	sub	sp, #8
 801c498:	af00      	add	r7, sp, #0
 801c49a:	6078      	str	r0, [r7, #4]
 801c49c:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801c49e:	683b      	ldr	r3, [r7, #0]
 801c4a0:	6819      	ldr	r1, [r3, #0]
 801c4a2:	683b      	ldr	r3, [r7, #0]
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	681b      	ldr	r3, [r3, #0]
 801c4a8:	3360      	adds	r3, #96	; 0x60
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	687a      	ldr	r2, [r7, #4]
 801c4ae:	4610      	mov	r0, r2
 801c4b0:	4798      	blx	r3
}
 801c4b2:	6878      	ldr	r0, [r7, #4]
 801c4b4:	3708      	adds	r7, #8
 801c4b6:	46bd      	mov	sp, r7
 801c4b8:	bd80      	pop	{r7, pc}

0801c4ba <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801c4ba:	b480      	push	{r7}
 801c4bc:	b083      	sub	sp, #12
 801c4be:	af00      	add	r7, sp, #0
 801c4c0:	6078      	str	r0, [r7, #4]
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	2200      	movs	r2, #0
 801c4c6:	601a      	str	r2, [r3, #0]
{
}
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	4618      	mov	r0, r3
 801c4cc:	370c      	adds	r7, #12
 801c4ce:	46bd      	mov	sp, r7
 801c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4d4:	4770      	bx	lr

0801c4d6 <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801c4d6:	b580      	push	{r7, lr}
 801c4d8:	b084      	sub	sp, #16
 801c4da:	af00      	add	r7, sp, #0
 801c4dc:	6078      	str	r0, [r7, #4]
    while (head_) {
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d016      	beq.n	801c514 <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	681b      	ldr	r3, [r3, #0]
 801c4ea:	4618      	mov	r0, r3
 801c4ec:	f7ff ff84 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 801c4f0:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	4618      	mov	r0, r3
 801c4f8:	f7ff ff96 	bl	801c428 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	681b      	ldr	r3, [r3, #0]
 801c500:	2b00      	cmp	r3, #0
 801c502:	d003      	beq.n	801c50c <_ZN18MockNamedValueList5clearEv+0x36>
 801c504:	2108      	movs	r1, #8
 801c506:	4618      	mov	r0, r3
 801c508:	f7ea fff0 	bl	80074ec <_ZdlPvj>
        head_ = n;
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	68fa      	ldr	r2, [r7, #12]
 801c510:	601a      	str	r2, [r3, #0]
    while (head_) {
 801c512:	e7e4      	b.n	801c4de <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801c514:	bf00      	nop
 801c516:	3710      	adds	r7, #16
 801c518:	46bd      	mov	sp, r7
 801c51a:	bd80      	pop	{r7, pc}

0801c51c <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801c51c:	b590      	push	{r4, r7, lr}
 801c51e:	b085      	sub	sp, #20
 801c520:	af00      	add	r7, sp, #0
 801c522:	6078      	str	r0, [r7, #4]
 801c524:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801c526:	f44f 7210 	mov.w	r2, #576	; 0x240
 801c52a:	4916      	ldr	r1, [pc, #88]	; (801c584 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801c52c:	2008      	movs	r0, #8
 801c52e:	f7ea ffc9 	bl	80074c4 <_ZnwjPKci>
 801c532:	4604      	mov	r4, r0
 801c534:	6839      	ldr	r1, [r7, #0]
 801c536:	4620      	mov	r0, r4
 801c538:	f7ff ff87 	bl	801c44a <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801c53c:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	681b      	ldr	r3, [r3, #0]
 801c542:	2b00      	cmp	r3, #0
 801c544:	d103      	bne.n	801c54e <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	68ba      	ldr	r2, [r7, #8]
 801c54a:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801c54c:	e016      	b.n	801c57c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801c554:	68f8      	ldr	r0, [r7, #12]
 801c556:	f7ff ff4f 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 801c55a:	4603      	mov	r3, r0
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	bf14      	ite	ne
 801c560:	2301      	movne	r3, #1
 801c562:	2300      	moveq	r3, #0
 801c564:	b2db      	uxtb	r3, r3
 801c566:	2b00      	cmp	r3, #0
 801c568:	d004      	beq.n	801c574 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801c56a:	68f8      	ldr	r0, [r7, #12]
 801c56c:	f7ff ff44 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 801c570:	60f8      	str	r0, [r7, #12]
 801c572:	e7ef      	b.n	801c554 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801c574:	68b9      	ldr	r1, [r7, #8]
 801c576:	68f8      	ldr	r0, [r7, #12]
 801c578:	f7ff ff30 	bl	801c3dc <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801c57c:	bf00      	nop
 801c57e:	3714      	adds	r7, #20
 801c580:	46bd      	mov	sp, r7
 801c582:	bd90      	pop	{r4, r7, pc}
 801c584:	0802306c 	.word	0x0802306c

0801c588 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801c588:	b590      	push	{r4, r7, lr}
 801c58a:	b087      	sub	sp, #28
 801c58c:	af00      	add	r7, sp, #0
 801c58e:	6078      	str	r0, [r7, #4]
 801c590:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	617b      	str	r3, [r7, #20]
 801c598:	697b      	ldr	r3, [r7, #20]
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d01e      	beq.n	801c5dc <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801c59e:	f107 030c 	add.w	r3, r7, #12
 801c5a2:	6979      	ldr	r1, [r7, #20]
 801c5a4:	4618      	mov	r0, r3
 801c5a6:	f7ff ff62 	bl	801c46e <_ZNK22MockNamedValueListNode7getNameEv>
 801c5aa:	f107 030c 	add.w	r3, r7, #12
 801c5ae:	6839      	ldr	r1, [r7, #0]
 801c5b0:	4618      	mov	r0, r3
 801c5b2:	f7ed ff0e 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801c5b6:	4603      	mov	r3, r0
 801c5b8:	461c      	mov	r4, r3
 801c5ba:	f107 030c 	add.w	r3, r7, #12
 801c5be:	4618      	mov	r0, r3
 801c5c0:	f7ed fefb 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c5c4:	2c00      	cmp	r4, #0
 801c5c6:	d004      	beq.n	801c5d2 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801c5c8:	6978      	ldr	r0, [r7, #20]
 801c5ca:	f7ff ff21 	bl	801c410 <_ZN22MockNamedValueListNode4itemEv>
 801c5ce:	4603      	mov	r3, r0
 801c5d0:	e005      	b.n	801c5de <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801c5d2:	6978      	ldr	r0, [r7, #20]
 801c5d4:	f7ff ff10 	bl	801c3f8 <_ZN22MockNamedValueListNode4nextEv>
 801c5d8:	6178      	str	r0, [r7, #20]
 801c5da:	e7dd      	b.n	801c598 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801c5dc:	2300      	movs	r3, #0
}
 801c5de:	4618      	mov	r0, r3
 801c5e0:	371c      	adds	r7, #28
 801c5e2:	46bd      	mov	sp, r7
 801c5e4:	bd90      	pop	{r4, r7, pc}

0801c5e6 <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801c5e6:	b480      	push	{r7}
 801c5e8:	b083      	sub	sp, #12
 801c5ea:	af00      	add	r7, sp, #0
 801c5ec:	6078      	str	r0, [r7, #4]
    return head_;
 801c5ee:	687b      	ldr	r3, [r7, #4]
 801c5f0:	681b      	ldr	r3, [r3, #0]
}
 801c5f2:	4618      	mov	r0, r3
 801c5f4:	370c      	adds	r7, #12
 801c5f6:	46bd      	mov	sp, r7
 801c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5fc:	4770      	bx	lr

0801c5fe <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801c5fe:	b580      	push	{r7, lr}
 801c600:	b084      	sub	sp, #16
 801c602:	af00      	add	r7, sp, #0
 801c604:	60f8      	str	r0, [r7, #12]
 801c606:	60b9      	str	r1, [r7, #8]
 801c608:	607a      	str	r2, [r7, #4]
 801c60a:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801c60c:	68fb      	ldr	r3, [r7, #12]
 801c60e:	68b9      	ldr	r1, [r7, #8]
 801c610:	4618      	mov	r0, r3
 801c612:	f7ed fb6e 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 801c616:	68fb      	ldr	r3, [r7, #12]
 801c618:	687a      	ldr	r2, [r7, #4]
 801c61a:	609a      	str	r2, [r3, #8]
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	2200      	movs	r2, #0
 801c620:	60da      	str	r2, [r3, #12]
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	683a      	ldr	r2, [r7, #0]
 801c626:	611a      	str	r2, [r3, #16]
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	4618      	mov	r0, r3
 801c62c:	3710      	adds	r7, #16
 801c62e:	46bd      	mov	sp, r7
 801c630:	bd80      	pop	{r7, pc}

0801c632 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801c632:	b580      	push	{r7, lr}
 801c634:	b084      	sub	sp, #16
 801c636:	af00      	add	r7, sp, #0
 801c638:	60f8      	str	r0, [r7, #12]
 801c63a:	60b9      	str	r1, [r7, #8]
 801c63c:	607a      	str	r2, [r7, #4]
 801c63e:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801c640:	68fb      	ldr	r3, [r7, #12]
 801c642:	68b9      	ldr	r1, [r7, #8]
 801c644:	4618      	mov	r0, r3
 801c646:	f7ed fb54 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	2200      	movs	r2, #0
 801c64e:	609a      	str	r2, [r3, #8]
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	687a      	ldr	r2, [r7, #4]
 801c654:	60da      	str	r2, [r3, #12]
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	683a      	ldr	r2, [r7, #0]
 801c65a:	611a      	str	r2, [r3, #16]
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	4618      	mov	r0, r3
 801c660:	3710      	adds	r7, #16
 801c662:	46bd      	mov	sp, r7
 801c664:	bd80      	pop	{r7, pc}

0801c666 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801c666:	b580      	push	{r7, lr}
 801c668:	b084      	sub	sp, #16
 801c66a:	af00      	add	r7, sp, #0
 801c66c:	60f8      	str	r0, [r7, #12]
 801c66e:	60b9      	str	r1, [r7, #8]
 801c670:	607a      	str	r2, [r7, #4]
 801c672:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	68b9      	ldr	r1, [r7, #8]
 801c678:	4618      	mov	r0, r3
 801c67a:	f7ed fb3a 	bl	8009cf2 <_ZN12SimpleStringC1ERKS_>
 801c67e:	68fb      	ldr	r3, [r7, #12]
 801c680:	687a      	ldr	r2, [r7, #4]
 801c682:	609a      	str	r2, [r3, #8]
 801c684:	68fb      	ldr	r3, [r7, #12]
 801c686:	683a      	ldr	r2, [r7, #0]
 801c688:	60da      	str	r2, [r3, #12]
 801c68a:	68fb      	ldr	r3, [r7, #12]
 801c68c:	69ba      	ldr	r2, [r7, #24]
 801c68e:	611a      	str	r2, [r3, #16]
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	4618      	mov	r0, r3
 801c694:	3710      	adds	r7, #16
 801c696:	46bd      	mov	sp, r7
 801c698:	bd80      	pop	{r7, pc}
	...

0801c69c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801c69c:	b480      	push	{r7}
 801c69e:	b083      	sub	sp, #12
 801c6a0:	af00      	add	r7, sp, #0
 801c6a2:	6078      	str	r0, [r7, #4]
 801c6a4:	4a06      	ldr	r2, [pc, #24]	; (801c6c0 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	601a      	str	r2, [r3, #0]
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	2200      	movs	r2, #0
 801c6ae:	605a      	str	r2, [r3, #4]
{

}
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	4618      	mov	r0, r3
 801c6b4:	370c      	adds	r7, #12
 801c6b6:	46bd      	mov	sp, r7
 801c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6bc:	4770      	bx	lr
 801c6be:	bf00      	nop
 801c6c0:	08024ef4 	.word	0x08024ef4

0801c6c4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801c6c4:	b580      	push	{r7, lr}
 801c6c6:	b082      	sub	sp, #8
 801c6c8:	af00      	add	r7, sp, #0
 801c6ca:	6078      	str	r0, [r7, #4]
 801c6cc:	4a05      	ldr	r2, [pc, #20]	; (801c6e4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	601a      	str	r2, [r3, #0]
{
    clear();
 801c6d2:	6878      	ldr	r0, [r7, #4]
 801c6d4:	f000 f825 	bl	801c722 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	4618      	mov	r0, r3
 801c6dc:	3708      	adds	r7, #8
 801c6de:	46bd      	mov	sp, r7
 801c6e0:	bd80      	pop	{r7, pc}
 801c6e2:	bf00      	nop
 801c6e4:	08024ef4 	.word	0x08024ef4

0801c6e8 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801c6e8:	b580      	push	{r7, lr}
 801c6ea:	b082      	sub	sp, #8
 801c6ec:	af00      	add	r7, sp, #0
 801c6ee:	6078      	str	r0, [r7, #4]
}
 801c6f0:	6878      	ldr	r0, [r7, #4]
 801c6f2:	f7ff ffe7 	bl	801c6c4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801c6f6:	2108      	movs	r1, #8
 801c6f8:	6878      	ldr	r0, [r7, #4]
 801c6fa:	f7ea fef7 	bl	80074ec <_ZdlPvj>
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	4618      	mov	r0, r3
 801c702:	3708      	adds	r7, #8
 801c704:	46bd      	mov	sp, r7
 801c706:	bd80      	pop	{r7, pc}

0801c708 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801c708:	b580      	push	{r7, lr}
 801c70a:	b082      	sub	sp, #8
 801c70c:	af00      	add	r7, sp, #0
 801c70e:	6078      	str	r0, [r7, #4]
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	4618      	mov	r0, r3
 801c714:	f7ed fe51 	bl	800a3ba <_ZN12SimpleStringD1Ev>
 801c718:	687b      	ldr	r3, [r7, #4]
 801c71a:	4618      	mov	r0, r3
 801c71c:	3708      	adds	r7, #8
 801c71e:	46bd      	mov	sp, r7
 801c720:	bd80      	pop	{r7, pc}

0801c722 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801c722:	b590      	push	{r4, r7, lr}
 801c724:	b085      	sub	sp, #20
 801c726:	af00      	add	r7, sp, #0
 801c728:	6078      	str	r0, [r7, #4]
    while (head_) {
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	685b      	ldr	r3, [r3, #4]
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d012      	beq.n	801c758 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	685b      	ldr	r3, [r3, #4]
 801c736:	691b      	ldr	r3, [r3, #16]
 801c738:	60fb      	str	r3, [r7, #12]
        delete head_;
 801c73a:	687b      	ldr	r3, [r7, #4]
 801c73c:	685c      	ldr	r4, [r3, #4]
 801c73e:	2c00      	cmp	r4, #0
 801c740:	d006      	beq.n	801c750 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801c742:	4620      	mov	r0, r4
 801c744:	f7ff ffe0 	bl	801c708 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801c748:	2114      	movs	r1, #20
 801c74a:	4620      	mov	r0, r4
 801c74c:	f7ea fece 	bl	80074ec <_ZdlPvj>
        head_ = next;
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	68fa      	ldr	r2, [r7, #12]
 801c754:	605a      	str	r2, [r3, #4]
    while (head_) {
 801c756:	e7e8      	b.n	801c72a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801c758:	bf00      	nop
 801c75a:	3714      	adds	r7, #20
 801c75c:	46bd      	mov	sp, r7
 801c75e:	bd90      	pop	{r4, r7, pc}

0801c760 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801c760:	b590      	push	{r4, r7, lr}
 801c762:	b085      	sub	sp, #20
 801c764:	af00      	add	r7, sp, #0
 801c766:	60f8      	str	r0, [r7, #12]
 801c768:	60b9      	str	r1, [r7, #8]
 801c76a:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801c76c:	f240 227a 	movw	r2, #634	; 0x27a
 801c770:	4908      	ldr	r1, [pc, #32]	; (801c794 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801c772:	2014      	movs	r0, #20
 801c774:	f7ea fea6 	bl	80074c4 <_ZnwjPKci>
 801c778:	4604      	mov	r4, r0
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	685b      	ldr	r3, [r3, #4]
 801c77e:	687a      	ldr	r2, [r7, #4]
 801c780:	68b9      	ldr	r1, [r7, #8]
 801c782:	4620      	mov	r0, r4
 801c784:	f7ff ff3b 	bl	801c5fe <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	605c      	str	r4, [r3, #4]
}
 801c78c:	bf00      	nop
 801c78e:	3714      	adds	r7, #20
 801c790:	46bd      	mov	sp, r7
 801c792:	bd90      	pop	{r4, r7, pc}
 801c794:	0802306c 	.word	0x0802306c

0801c798 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801c798:	b590      	push	{r4, r7, lr}
 801c79a:	b085      	sub	sp, #20
 801c79c:	af00      	add	r7, sp, #0
 801c79e:	60f8      	str	r0, [r7, #12]
 801c7a0:	60b9      	str	r1, [r7, #8]
 801c7a2:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801c7a4:	f240 227f 	movw	r2, #639	; 0x27f
 801c7a8:	4908      	ldr	r1, [pc, #32]	; (801c7cc <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801c7aa:	2014      	movs	r0, #20
 801c7ac:	f7ea fe8a 	bl	80074c4 <_ZnwjPKci>
 801c7b0:	4604      	mov	r4, r0
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	685b      	ldr	r3, [r3, #4]
 801c7b6:	687a      	ldr	r2, [r7, #4]
 801c7b8:	68b9      	ldr	r1, [r7, #8]
 801c7ba:	4620      	mov	r0, r4
 801c7bc:	f7ff ff39 	bl	801c632 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801c7c0:	68fb      	ldr	r3, [r7, #12]
 801c7c2:	605c      	str	r4, [r3, #4]
}
 801c7c4:	bf00      	nop
 801c7c6:	3714      	adds	r7, #20
 801c7c8:	46bd      	mov	sp, r7
 801c7ca:	bd90      	pop	{r4, r7, pc}
 801c7cc:	0802306c 	.word	0x0802306c

0801c7d0 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801c7d0:	b580      	push	{r7, lr}
 801c7d2:	b084      	sub	sp, #16
 801c7d4:	af00      	add	r7, sp, #0
 801c7d6:	6078      	str	r0, [r7, #4]
 801c7d8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	685b      	ldr	r3, [r3, #4]
 801c7de:	60fb      	str	r3, [r7, #12]
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d017      	beq.n	801c816 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	6839      	ldr	r1, [r7, #0]
 801c7ea:	4618      	mov	r0, r3
 801c7ec:	f7ed fdf1 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801c7f0:	4603      	mov	r3, r0
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d005      	beq.n	801c802 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	689b      	ldr	r3, [r3, #8]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d001      	beq.n	801c802 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801c7fe:	2301      	movs	r3, #1
 801c800:	e000      	b.n	801c804 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801c802:	2300      	movs	r3, #0
 801c804:	2b00      	cmp	r3, #0
 801c806:	d002      	beq.n	801c80e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801c808:	68fb      	ldr	r3, [r7, #12]
 801c80a:	689b      	ldr	r3, [r3, #8]
 801c80c:	e004      	b.n	801c818 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	691b      	ldr	r3, [r3, #16]
 801c812:	60fb      	str	r3, [r7, #12]
 801c814:	e7e4      	b.n	801c7e0 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801c816:	2300      	movs	r3, #0
}
 801c818:	4618      	mov	r0, r3
 801c81a:	3710      	adds	r7, #16
 801c81c:	46bd      	mov	sp, r7
 801c81e:	bd80      	pop	{r7, pc}

0801c820 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801c820:	b580      	push	{r7, lr}
 801c822:	b084      	sub	sp, #16
 801c824:	af00      	add	r7, sp, #0
 801c826:	6078      	str	r0, [r7, #4]
 801c828:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	685b      	ldr	r3, [r3, #4]
 801c82e:	60fb      	str	r3, [r7, #12]
 801c830:	68fb      	ldr	r3, [r7, #12]
 801c832:	2b00      	cmp	r3, #0
 801c834:	d017      	beq.n	801c866 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	6839      	ldr	r1, [r7, #0]
 801c83a:	4618      	mov	r0, r3
 801c83c:	f7ed fdc9 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801c840:	4603      	mov	r3, r0
 801c842:	2b00      	cmp	r3, #0
 801c844:	d005      	beq.n	801c852 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801c846:	68fb      	ldr	r3, [r7, #12]
 801c848:	68db      	ldr	r3, [r3, #12]
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	d001      	beq.n	801c852 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801c84e:	2301      	movs	r3, #1
 801c850:	e000      	b.n	801c854 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801c852:	2300      	movs	r3, #0
 801c854:	2b00      	cmp	r3, #0
 801c856:	d002      	beq.n	801c85e <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801c858:	68fb      	ldr	r3, [r7, #12]
 801c85a:	68db      	ldr	r3, [r3, #12]
 801c85c:	e004      	b.n	801c868 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	691b      	ldr	r3, [r3, #16]
 801c862:	60fb      	str	r3, [r7, #12]
 801c864:	e7e4      	b.n	801c830 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801c866:	2300      	movs	r3, #0
}
 801c868:	4618      	mov	r0, r3
 801c86a:	3710      	adds	r7, #16
 801c86c:	46bd      	mov	sp, r7
 801c86e:	bd80      	pop	{r7, pc}

0801c870 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801c870:	b590      	push	{r4, r7, lr}
 801c872:	b087      	sub	sp, #28
 801c874:	af02      	add	r7, sp, #8
 801c876:	6078      	str	r0, [r7, #4]
 801c878:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801c87a:	683b      	ldr	r3, [r7, #0]
 801c87c:	685b      	ldr	r3, [r3, #4]
 801c87e:	60fb      	str	r3, [r7, #12]
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	2b00      	cmp	r3, #0
 801c884:	d018      	beq.n	801c8b8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801c886:	f240 2293 	movw	r2, #659	; 0x293
 801c88a:	490d      	ldr	r1, [pc, #52]	; (801c8c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801c88c:	2014      	movs	r0, #20
 801c88e:	f7ea fe19 	bl	80074c4 <_ZnwjPKci>
 801c892:	4604      	mov	r4, r0
 801c894:	68f9      	ldr	r1, [r7, #12]
 801c896:	68fb      	ldr	r3, [r7, #12]
 801c898:	689a      	ldr	r2, [r3, #8]
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	68d8      	ldr	r0, [r3, #12]
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	685b      	ldr	r3, [r3, #4]
 801c8a2:	9300      	str	r3, [sp, #0]
 801c8a4:	4603      	mov	r3, r0
 801c8a6:	4620      	mov	r0, r4
 801c8a8:	f7ff fedd 	bl	801c666 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801c8b0:	68fb      	ldr	r3, [r7, #12]
 801c8b2:	691b      	ldr	r3, [r3, #16]
 801c8b4:	60fb      	str	r3, [r7, #12]
 801c8b6:	e7e3      	b.n	801c880 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801c8b8:	bf00      	nop
 801c8ba:	3714      	adds	r7, #20
 801c8bc:	46bd      	mov	sp, r7
 801c8be:	bd90      	pop	{r4, r7, pc}
 801c8c0:	0802306c 	.word	0x0802306c

0801c8c4 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801c8c4:	b580      	push	{r7, lr}
 801c8c6:	b082      	sub	sp, #8
 801c8c8:	af00      	add	r7, sp, #0
 801c8ca:	6078      	str	r0, [r7, #4]
 801c8cc:	6039      	str	r1, [r7, #0]
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	490b      	ldr	r1, [pc, #44]	; (801c900 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801c8d2:	4618      	mov	r0, r3
 801c8d4:	f7ed f9b9 	bl	8009c4a <_ZN12SimpleStringC1EPKc>
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	2200      	movs	r2, #0
 801c8dc:	721a      	strb	r2, [r3, #8]
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	2200      	movs	r2, #0
 801c8e2:	725a      	strb	r2, [r3, #9]
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	2200      	movs	r2, #0
 801c8e8:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801c8ea:	687b      	ldr	r3, [r7, #4]
 801c8ec:	6839      	ldr	r1, [r7, #0]
 801c8ee:	4618      	mov	r0, r3
 801c8f0:	f7ed fa17 	bl	8009d22 <_ZN12SimpleStringaSERKS_>
}
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	4618      	mov	r0, r3
 801c8f8:	3708      	adds	r7, #8
 801c8fa:	46bd      	mov	sp, r7
 801c8fc:	bd80      	pop	{r7, pc}
 801c8fe:	bf00      	nop
 801c900:	08023148 	.word	0x08023148

0801c904 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801c904:	b480      	push	{r7}
 801c906:	b083      	sub	sp, #12
 801c908:	af00      	add	r7, sp, #0
 801c90a:	6078      	str	r0, [r7, #4]
 801c90c:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	683a      	ldr	r2, [r7, #0]
 801c912:	60da      	str	r2, [r3, #12]
    return this;
 801c914:	687b      	ldr	r3, [r7, #4]
}
 801c916:	4618      	mov	r0, r3
 801c918:	370c      	adds	r7, #12
 801c91a:	46bd      	mov	sp, r7
 801c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c920:	4770      	bx	lr

0801c922 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801c922:	b480      	push	{r7}
 801c924:	b083      	sub	sp, #12
 801c926:	af00      	add	r7, sp, #0
 801c928:	6078      	str	r0, [r7, #4]
    return next_;
 801c92a:	687b      	ldr	r3, [r7, #4]
 801c92c:	68db      	ldr	r3, [r3, #12]
}
 801c92e:	4618      	mov	r0, r3
 801c930:	370c      	adds	r7, #12
 801c932:	46bd      	mov	sp, r7
 801c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c938:	4770      	bx	lr

0801c93a <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801c93a:	b480      	push	{r7}
 801c93c:	b083      	sub	sp, #12
 801c93e:	af00      	add	r7, sp, #0
 801c940:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	2201      	movs	r2, #1
 801c946:	721a      	strb	r2, [r3, #8]
}
 801c948:	bf00      	nop
 801c94a:	370c      	adds	r7, #12
 801c94c:	46bd      	mov	sp, r7
 801c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c952:	4770      	bx	lr

0801c954 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801c954:	b480      	push	{r7}
 801c956:	b083      	sub	sp, #12
 801c958:	af00      	add	r7, sp, #0
 801c95a:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	2201      	movs	r2, #1
 801c960:	725a      	strb	r2, [r3, #9]
}
 801c962:	bf00      	nop
 801c964:	370c      	adds	r7, #12
 801c966:	46bd      	mov	sp, r7
 801c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c96c:	4770      	bx	lr

0801c96e <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801c96e:	b580      	push	{r7, lr}
 801c970:	b084      	sub	sp, #16
 801c972:	af00      	add	r7, sp, #0
 801c974:	6078      	str	r0, [r7, #4]
 801c976:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801c978:	2300      	movs	r3, #0
 801c97a:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	7a1b      	ldrb	r3, [r3, #8]
 801c980:	2b00      	cmp	r3, #0
 801c982:	d007      	beq.n	801c994 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	4619      	mov	r1, r3
 801c988:	6838      	ldr	r0, [r7, #0]
 801c98a:	f7ed fd22 	bl	800a3d2 <_ZeqRK12SimpleStringS1_>
 801c98e:	4603      	mov	r3, r0
 801c990:	73fb      	strb	r3, [r7, #15]
 801c992:	e006      	b.n	801c9a2 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	4619      	mov	r1, r3
 801c998:	6838      	ldr	r0, [r7, #0]
 801c99a:	f7ed f9d4 	bl	8009d46 <_ZNK12SimpleString8containsERKS_>
 801c99e:	4603      	mov	r3, r0
 801c9a0:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	7a5b      	ldrb	r3, [r3, #9]
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d004      	beq.n	801c9b4 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801c9aa:	7bfb      	ldrb	r3, [r7, #15]
 801c9ac:	f083 0301 	eor.w	r3, r3, #1
 801c9b0:	b2db      	uxtb	r3, r3
 801c9b2:	e005      	b.n	801c9c0 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801c9b4:	7bfb      	ldrb	r3, [r7, #15]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	bf14      	ite	ne
 801c9ba:	2301      	movne	r3, #1
 801c9bc:	2300      	moveq	r3, #0
 801c9be:	b2db      	uxtb	r3, r3
}
 801c9c0:	4618      	mov	r0, r3
 801c9c2:	3710      	adds	r7, #16
 801c9c4:	46bd      	mov	sp, r7
 801c9c6:	bd80      	pop	{r7, pc}

0801c9c8 <__cxa_guard_acquire>:
 801c9c8:	6803      	ldr	r3, [r0, #0]
 801c9ca:	07db      	lsls	r3, r3, #31
 801c9cc:	d406      	bmi.n	801c9dc <__cxa_guard_acquire+0x14>
 801c9ce:	7843      	ldrb	r3, [r0, #1]
 801c9d0:	b103      	cbz	r3, 801c9d4 <__cxa_guard_acquire+0xc>
 801c9d2:	deff      	udf	#255	; 0xff
 801c9d4:	2301      	movs	r3, #1
 801c9d6:	7043      	strb	r3, [r0, #1]
 801c9d8:	4618      	mov	r0, r3
 801c9da:	4770      	bx	lr
 801c9dc:	2000      	movs	r0, #0
 801c9de:	4770      	bx	lr

0801c9e0 <__cxa_guard_release>:
 801c9e0:	2301      	movs	r3, #1
 801c9e2:	6003      	str	r3, [r0, #0]
 801c9e4:	4770      	bx	lr

0801c9e6 <__cxa_pure_virtual>:
 801c9e6:	b508      	push	{r3, lr}
 801c9e8:	f000 f80c 	bl	801ca04 <_ZSt9terminatev>

0801c9ec <_ZN10__cxxabiv111__terminateEPFvvE>:
 801c9ec:	b508      	push	{r3, lr}
 801c9ee:	4780      	blx	r0
 801c9f0:	f000 f816 	bl	801ca20 <abort>

0801c9f4 <_ZSt13get_terminatev>:
 801c9f4:	4b02      	ldr	r3, [pc, #8]	; (801ca00 <_ZSt13get_terminatev+0xc>)
 801c9f6:	6818      	ldr	r0, [r3, #0]
 801c9f8:	f3bf 8f5b 	dmb	ish
 801c9fc:	4770      	bx	lr
 801c9fe:	bf00      	nop
 801ca00:	20000100 	.word	0x20000100

0801ca04 <_ZSt9terminatev>:
 801ca04:	b508      	push	{r3, lr}
 801ca06:	f7ff fff5 	bl	801c9f4 <_ZSt13get_terminatev>
 801ca0a:	f7ff ffef 	bl	801c9ec <_ZN10__cxxabiv111__terminateEPFvvE>

0801ca0e <fabs>:
 801ca0e:	ec51 0b10 	vmov	r0, r1, d0
 801ca12:	ee10 2a10 	vmov	r2, s0
 801ca16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ca1a:	ec43 2b10 	vmov	d0, r2, r3
 801ca1e:	4770      	bx	lr

0801ca20 <abort>:
 801ca20:	b508      	push	{r3, lr}
 801ca22:	2006      	movs	r0, #6
 801ca24:	f000 ff88 	bl	801d938 <raise>
 801ca28:	2001      	movs	r0, #1
 801ca2a:	f7e4 f9aa 	bl	8000d82 <_exit>

0801ca2e <atexit>:
 801ca2e:	2300      	movs	r3, #0
 801ca30:	4601      	mov	r1, r0
 801ca32:	461a      	mov	r2, r3
 801ca34:	4618      	mov	r0, r3
 801ca36:	f002 b939 	b.w	801ecac <__register_exitproc>
	...

0801ca3c <calloc>:
 801ca3c:	4b02      	ldr	r3, [pc, #8]	; (801ca48 <calloc+0xc>)
 801ca3e:	460a      	mov	r2, r1
 801ca40:	4601      	mov	r1, r0
 801ca42:	6818      	ldr	r0, [r3, #0]
 801ca44:	f000 bde8 	b.w	801d618 <_calloc_r>
 801ca48:	20000104 	.word	0x20000104

0801ca4c <__errno>:
 801ca4c:	4b01      	ldr	r3, [pc, #4]	; (801ca54 <__errno+0x8>)
 801ca4e:	6818      	ldr	r0, [r3, #0]
 801ca50:	4770      	bx	lr
 801ca52:	bf00      	nop
 801ca54:	20000104 	.word	0x20000104

0801ca58 <_fclose_r>:
 801ca58:	b570      	push	{r4, r5, r6, lr}
 801ca5a:	4605      	mov	r5, r0
 801ca5c:	460c      	mov	r4, r1
 801ca5e:	b911      	cbnz	r1, 801ca66 <_fclose_r+0xe>
 801ca60:	2600      	movs	r6, #0
 801ca62:	4630      	mov	r0, r6
 801ca64:	bd70      	pop	{r4, r5, r6, pc}
 801ca66:	b118      	cbz	r0, 801ca70 <_fclose_r+0x18>
 801ca68:	6983      	ldr	r3, [r0, #24]
 801ca6a:	b90b      	cbnz	r3, 801ca70 <_fclose_r+0x18>
 801ca6c:	f000 f994 	bl	801cd98 <__sinit>
 801ca70:	4b2c      	ldr	r3, [pc, #176]	; (801cb24 <_fclose_r+0xcc>)
 801ca72:	429c      	cmp	r4, r3
 801ca74:	d114      	bne.n	801caa0 <_fclose_r+0x48>
 801ca76:	686c      	ldr	r4, [r5, #4]
 801ca78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ca7a:	07d8      	lsls	r0, r3, #31
 801ca7c:	d405      	bmi.n	801ca8a <_fclose_r+0x32>
 801ca7e:	89a3      	ldrh	r3, [r4, #12]
 801ca80:	0599      	lsls	r1, r3, #22
 801ca82:	d402      	bmi.n	801ca8a <_fclose_r+0x32>
 801ca84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ca86:	f000 fd3a 	bl	801d4fe <__retarget_lock_acquire_recursive>
 801ca8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca8e:	b98b      	cbnz	r3, 801cab4 <_fclose_r+0x5c>
 801ca90:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801ca92:	f016 0601 	ands.w	r6, r6, #1
 801ca96:	d1e3      	bne.n	801ca60 <_fclose_r+0x8>
 801ca98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ca9a:	f000 fd32 	bl	801d502 <__retarget_lock_release_recursive>
 801ca9e:	e7e0      	b.n	801ca62 <_fclose_r+0xa>
 801caa0:	4b21      	ldr	r3, [pc, #132]	; (801cb28 <_fclose_r+0xd0>)
 801caa2:	429c      	cmp	r4, r3
 801caa4:	d101      	bne.n	801caaa <_fclose_r+0x52>
 801caa6:	68ac      	ldr	r4, [r5, #8]
 801caa8:	e7e6      	b.n	801ca78 <_fclose_r+0x20>
 801caaa:	4b20      	ldr	r3, [pc, #128]	; (801cb2c <_fclose_r+0xd4>)
 801caac:	429c      	cmp	r4, r3
 801caae:	bf08      	it	eq
 801cab0:	68ec      	ldreq	r4, [r5, #12]
 801cab2:	e7e1      	b.n	801ca78 <_fclose_r+0x20>
 801cab4:	4621      	mov	r1, r4
 801cab6:	4628      	mov	r0, r5
 801cab8:	f000 f842 	bl	801cb40 <__sflush_r>
 801cabc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cabe:	4606      	mov	r6, r0
 801cac0:	b133      	cbz	r3, 801cad0 <_fclose_r+0x78>
 801cac2:	6a21      	ldr	r1, [r4, #32]
 801cac4:	4628      	mov	r0, r5
 801cac6:	4798      	blx	r3
 801cac8:	2800      	cmp	r0, #0
 801caca:	bfb8      	it	lt
 801cacc:	f04f 36ff 	movlt.w	r6, #4294967295
 801cad0:	89a3      	ldrh	r3, [r4, #12]
 801cad2:	061a      	lsls	r2, r3, #24
 801cad4:	d503      	bpl.n	801cade <_fclose_r+0x86>
 801cad6:	6921      	ldr	r1, [r4, #16]
 801cad8:	4628      	mov	r0, r5
 801cada:	f000 fdad 	bl	801d638 <_free_r>
 801cade:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cae0:	b141      	cbz	r1, 801caf4 <_fclose_r+0x9c>
 801cae2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cae6:	4299      	cmp	r1, r3
 801cae8:	d002      	beq.n	801caf0 <_fclose_r+0x98>
 801caea:	4628      	mov	r0, r5
 801caec:	f000 fda4 	bl	801d638 <_free_r>
 801caf0:	2300      	movs	r3, #0
 801caf2:	6363      	str	r3, [r4, #52]	; 0x34
 801caf4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801caf6:	b121      	cbz	r1, 801cb02 <_fclose_r+0xaa>
 801caf8:	4628      	mov	r0, r5
 801cafa:	f000 fd9d 	bl	801d638 <_free_r>
 801cafe:	2300      	movs	r3, #0
 801cb00:	64a3      	str	r3, [r4, #72]	; 0x48
 801cb02:	f000 f931 	bl	801cd68 <__sfp_lock_acquire>
 801cb06:	2300      	movs	r3, #0
 801cb08:	81a3      	strh	r3, [r4, #12]
 801cb0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cb0c:	07db      	lsls	r3, r3, #31
 801cb0e:	d402      	bmi.n	801cb16 <_fclose_r+0xbe>
 801cb10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cb12:	f000 fcf6 	bl	801d502 <__retarget_lock_release_recursive>
 801cb16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cb18:	f000 fcef 	bl	801d4fa <__retarget_lock_close_recursive>
 801cb1c:	f000 f92a 	bl	801cd74 <__sfp_lock_release>
 801cb20:	e79f      	b.n	801ca62 <_fclose_r+0xa>
 801cb22:	bf00      	nop
 801cb24:	08024fe8 	.word	0x08024fe8
 801cb28:	08025008 	.word	0x08025008
 801cb2c:	08024fc8 	.word	0x08024fc8

0801cb30 <fclose>:
 801cb30:	4b02      	ldr	r3, [pc, #8]	; (801cb3c <fclose+0xc>)
 801cb32:	4601      	mov	r1, r0
 801cb34:	6818      	ldr	r0, [r3, #0]
 801cb36:	f7ff bf8f 	b.w	801ca58 <_fclose_r>
 801cb3a:	bf00      	nop
 801cb3c:	20000104 	.word	0x20000104

0801cb40 <__sflush_r>:
 801cb40:	898a      	ldrh	r2, [r1, #12]
 801cb42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb46:	4605      	mov	r5, r0
 801cb48:	0710      	lsls	r0, r2, #28
 801cb4a:	460c      	mov	r4, r1
 801cb4c:	d458      	bmi.n	801cc00 <__sflush_r+0xc0>
 801cb4e:	684b      	ldr	r3, [r1, #4]
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	dc05      	bgt.n	801cb60 <__sflush_r+0x20>
 801cb54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	dc02      	bgt.n	801cb60 <__sflush_r+0x20>
 801cb5a:	2000      	movs	r0, #0
 801cb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cb62:	2e00      	cmp	r6, #0
 801cb64:	d0f9      	beq.n	801cb5a <__sflush_r+0x1a>
 801cb66:	2300      	movs	r3, #0
 801cb68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cb6c:	682f      	ldr	r7, [r5, #0]
 801cb6e:	602b      	str	r3, [r5, #0]
 801cb70:	d032      	beq.n	801cbd8 <__sflush_r+0x98>
 801cb72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cb74:	89a3      	ldrh	r3, [r4, #12]
 801cb76:	075a      	lsls	r2, r3, #29
 801cb78:	d505      	bpl.n	801cb86 <__sflush_r+0x46>
 801cb7a:	6863      	ldr	r3, [r4, #4]
 801cb7c:	1ac0      	subs	r0, r0, r3
 801cb7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cb80:	b10b      	cbz	r3, 801cb86 <__sflush_r+0x46>
 801cb82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cb84:	1ac0      	subs	r0, r0, r3
 801cb86:	2300      	movs	r3, #0
 801cb88:	4602      	mov	r2, r0
 801cb8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cb8c:	6a21      	ldr	r1, [r4, #32]
 801cb8e:	4628      	mov	r0, r5
 801cb90:	47b0      	blx	r6
 801cb92:	1c43      	adds	r3, r0, #1
 801cb94:	89a3      	ldrh	r3, [r4, #12]
 801cb96:	d106      	bne.n	801cba6 <__sflush_r+0x66>
 801cb98:	6829      	ldr	r1, [r5, #0]
 801cb9a:	291d      	cmp	r1, #29
 801cb9c:	d82c      	bhi.n	801cbf8 <__sflush_r+0xb8>
 801cb9e:	4a2a      	ldr	r2, [pc, #168]	; (801cc48 <__sflush_r+0x108>)
 801cba0:	40ca      	lsrs	r2, r1
 801cba2:	07d6      	lsls	r6, r2, #31
 801cba4:	d528      	bpl.n	801cbf8 <__sflush_r+0xb8>
 801cba6:	2200      	movs	r2, #0
 801cba8:	6062      	str	r2, [r4, #4]
 801cbaa:	04d9      	lsls	r1, r3, #19
 801cbac:	6922      	ldr	r2, [r4, #16]
 801cbae:	6022      	str	r2, [r4, #0]
 801cbb0:	d504      	bpl.n	801cbbc <__sflush_r+0x7c>
 801cbb2:	1c42      	adds	r2, r0, #1
 801cbb4:	d101      	bne.n	801cbba <__sflush_r+0x7a>
 801cbb6:	682b      	ldr	r3, [r5, #0]
 801cbb8:	b903      	cbnz	r3, 801cbbc <__sflush_r+0x7c>
 801cbba:	6560      	str	r0, [r4, #84]	; 0x54
 801cbbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cbbe:	602f      	str	r7, [r5, #0]
 801cbc0:	2900      	cmp	r1, #0
 801cbc2:	d0ca      	beq.n	801cb5a <__sflush_r+0x1a>
 801cbc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cbc8:	4299      	cmp	r1, r3
 801cbca:	d002      	beq.n	801cbd2 <__sflush_r+0x92>
 801cbcc:	4628      	mov	r0, r5
 801cbce:	f000 fd33 	bl	801d638 <_free_r>
 801cbd2:	2000      	movs	r0, #0
 801cbd4:	6360      	str	r0, [r4, #52]	; 0x34
 801cbd6:	e7c1      	b.n	801cb5c <__sflush_r+0x1c>
 801cbd8:	6a21      	ldr	r1, [r4, #32]
 801cbda:	2301      	movs	r3, #1
 801cbdc:	4628      	mov	r0, r5
 801cbde:	47b0      	blx	r6
 801cbe0:	1c41      	adds	r1, r0, #1
 801cbe2:	d1c7      	bne.n	801cb74 <__sflush_r+0x34>
 801cbe4:	682b      	ldr	r3, [r5, #0]
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d0c4      	beq.n	801cb74 <__sflush_r+0x34>
 801cbea:	2b1d      	cmp	r3, #29
 801cbec:	d001      	beq.n	801cbf2 <__sflush_r+0xb2>
 801cbee:	2b16      	cmp	r3, #22
 801cbf0:	d101      	bne.n	801cbf6 <__sflush_r+0xb6>
 801cbf2:	602f      	str	r7, [r5, #0]
 801cbf4:	e7b1      	b.n	801cb5a <__sflush_r+0x1a>
 801cbf6:	89a3      	ldrh	r3, [r4, #12]
 801cbf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cbfc:	81a3      	strh	r3, [r4, #12]
 801cbfe:	e7ad      	b.n	801cb5c <__sflush_r+0x1c>
 801cc00:	690f      	ldr	r7, [r1, #16]
 801cc02:	2f00      	cmp	r7, #0
 801cc04:	d0a9      	beq.n	801cb5a <__sflush_r+0x1a>
 801cc06:	0793      	lsls	r3, r2, #30
 801cc08:	680e      	ldr	r6, [r1, #0]
 801cc0a:	bf08      	it	eq
 801cc0c:	694b      	ldreq	r3, [r1, #20]
 801cc0e:	600f      	str	r7, [r1, #0]
 801cc10:	bf18      	it	ne
 801cc12:	2300      	movne	r3, #0
 801cc14:	eba6 0807 	sub.w	r8, r6, r7
 801cc18:	608b      	str	r3, [r1, #8]
 801cc1a:	f1b8 0f00 	cmp.w	r8, #0
 801cc1e:	dd9c      	ble.n	801cb5a <__sflush_r+0x1a>
 801cc20:	6a21      	ldr	r1, [r4, #32]
 801cc22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cc24:	4643      	mov	r3, r8
 801cc26:	463a      	mov	r2, r7
 801cc28:	4628      	mov	r0, r5
 801cc2a:	47b0      	blx	r6
 801cc2c:	2800      	cmp	r0, #0
 801cc2e:	dc06      	bgt.n	801cc3e <__sflush_r+0xfe>
 801cc30:	89a3      	ldrh	r3, [r4, #12]
 801cc32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cc36:	81a3      	strh	r3, [r4, #12]
 801cc38:	f04f 30ff 	mov.w	r0, #4294967295
 801cc3c:	e78e      	b.n	801cb5c <__sflush_r+0x1c>
 801cc3e:	4407      	add	r7, r0
 801cc40:	eba8 0800 	sub.w	r8, r8, r0
 801cc44:	e7e9      	b.n	801cc1a <__sflush_r+0xda>
 801cc46:	bf00      	nop
 801cc48:	20400001 	.word	0x20400001

0801cc4c <_fflush_r>:
 801cc4c:	b538      	push	{r3, r4, r5, lr}
 801cc4e:	690b      	ldr	r3, [r1, #16]
 801cc50:	4605      	mov	r5, r0
 801cc52:	460c      	mov	r4, r1
 801cc54:	b913      	cbnz	r3, 801cc5c <_fflush_r+0x10>
 801cc56:	2500      	movs	r5, #0
 801cc58:	4628      	mov	r0, r5
 801cc5a:	bd38      	pop	{r3, r4, r5, pc}
 801cc5c:	b118      	cbz	r0, 801cc66 <_fflush_r+0x1a>
 801cc5e:	6983      	ldr	r3, [r0, #24]
 801cc60:	b90b      	cbnz	r3, 801cc66 <_fflush_r+0x1a>
 801cc62:	f000 f899 	bl	801cd98 <__sinit>
 801cc66:	4b14      	ldr	r3, [pc, #80]	; (801ccb8 <_fflush_r+0x6c>)
 801cc68:	429c      	cmp	r4, r3
 801cc6a:	d11b      	bne.n	801cca4 <_fflush_r+0x58>
 801cc6c:	686c      	ldr	r4, [r5, #4]
 801cc6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d0ef      	beq.n	801cc56 <_fflush_r+0xa>
 801cc76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cc78:	07d0      	lsls	r0, r2, #31
 801cc7a:	d404      	bmi.n	801cc86 <_fflush_r+0x3a>
 801cc7c:	0599      	lsls	r1, r3, #22
 801cc7e:	d402      	bmi.n	801cc86 <_fflush_r+0x3a>
 801cc80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cc82:	f000 fc3c 	bl	801d4fe <__retarget_lock_acquire_recursive>
 801cc86:	4628      	mov	r0, r5
 801cc88:	4621      	mov	r1, r4
 801cc8a:	f7ff ff59 	bl	801cb40 <__sflush_r>
 801cc8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cc90:	07da      	lsls	r2, r3, #31
 801cc92:	4605      	mov	r5, r0
 801cc94:	d4e0      	bmi.n	801cc58 <_fflush_r+0xc>
 801cc96:	89a3      	ldrh	r3, [r4, #12]
 801cc98:	059b      	lsls	r3, r3, #22
 801cc9a:	d4dd      	bmi.n	801cc58 <_fflush_r+0xc>
 801cc9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cc9e:	f000 fc30 	bl	801d502 <__retarget_lock_release_recursive>
 801cca2:	e7d9      	b.n	801cc58 <_fflush_r+0xc>
 801cca4:	4b05      	ldr	r3, [pc, #20]	; (801ccbc <_fflush_r+0x70>)
 801cca6:	429c      	cmp	r4, r3
 801cca8:	d101      	bne.n	801ccae <_fflush_r+0x62>
 801ccaa:	68ac      	ldr	r4, [r5, #8]
 801ccac:	e7df      	b.n	801cc6e <_fflush_r+0x22>
 801ccae:	4b04      	ldr	r3, [pc, #16]	; (801ccc0 <_fflush_r+0x74>)
 801ccb0:	429c      	cmp	r4, r3
 801ccb2:	bf08      	it	eq
 801ccb4:	68ec      	ldreq	r4, [r5, #12]
 801ccb6:	e7da      	b.n	801cc6e <_fflush_r+0x22>
 801ccb8:	08024fe8 	.word	0x08024fe8
 801ccbc:	08025008 	.word	0x08025008
 801ccc0:	08024fc8 	.word	0x08024fc8

0801ccc4 <fflush>:
 801ccc4:	4601      	mov	r1, r0
 801ccc6:	b920      	cbnz	r0, 801ccd2 <fflush+0xe>
 801ccc8:	4b04      	ldr	r3, [pc, #16]	; (801ccdc <fflush+0x18>)
 801ccca:	4905      	ldr	r1, [pc, #20]	; (801cce0 <fflush+0x1c>)
 801cccc:	6818      	ldr	r0, [r3, #0]
 801ccce:	f000 babb 	b.w	801d248 <_fwalk_reent>
 801ccd2:	4b04      	ldr	r3, [pc, #16]	; (801cce4 <fflush+0x20>)
 801ccd4:	6818      	ldr	r0, [r3, #0]
 801ccd6:	f7ff bfb9 	b.w	801cc4c <_fflush_r>
 801ccda:	bf00      	nop
 801ccdc:	08025028 	.word	0x08025028
 801cce0:	0801cc4d 	.word	0x0801cc4d
 801cce4:	20000104 	.word	0x20000104

0801cce8 <std>:
 801cce8:	2300      	movs	r3, #0
 801ccea:	b510      	push	{r4, lr}
 801ccec:	4604      	mov	r4, r0
 801ccee:	e9c0 3300 	strd	r3, r3, [r0]
 801ccf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ccf6:	6083      	str	r3, [r0, #8]
 801ccf8:	8181      	strh	r1, [r0, #12]
 801ccfa:	6643      	str	r3, [r0, #100]	; 0x64
 801ccfc:	81c2      	strh	r2, [r0, #14]
 801ccfe:	6183      	str	r3, [r0, #24]
 801cd00:	4619      	mov	r1, r3
 801cd02:	2208      	movs	r2, #8
 801cd04:	305c      	adds	r0, #92	; 0x5c
 801cd06:	f000 fc7f 	bl	801d608 <memset>
 801cd0a:	4b05      	ldr	r3, [pc, #20]	; (801cd20 <std+0x38>)
 801cd0c:	6263      	str	r3, [r4, #36]	; 0x24
 801cd0e:	4b05      	ldr	r3, [pc, #20]	; (801cd24 <std+0x3c>)
 801cd10:	62a3      	str	r3, [r4, #40]	; 0x28
 801cd12:	4b05      	ldr	r3, [pc, #20]	; (801cd28 <std+0x40>)
 801cd14:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cd16:	4b05      	ldr	r3, [pc, #20]	; (801cd2c <std+0x44>)
 801cd18:	6224      	str	r4, [r4, #32]
 801cd1a:	6323      	str	r3, [r4, #48]	; 0x30
 801cd1c:	bd10      	pop	{r4, pc}
 801cd1e:	bf00      	nop
 801cd20:	0801d971 	.word	0x0801d971
 801cd24:	0801d997 	.word	0x0801d997
 801cd28:	0801d9cf 	.word	0x0801d9cf
 801cd2c:	0801d9f3 	.word	0x0801d9f3

0801cd30 <_cleanup_r>:
 801cd30:	4901      	ldr	r1, [pc, #4]	; (801cd38 <_cleanup_r+0x8>)
 801cd32:	f000 ba89 	b.w	801d248 <_fwalk_reent>
 801cd36:	bf00      	nop
 801cd38:	0801cc4d 	.word	0x0801cc4d

0801cd3c <__sfmoreglue>:
 801cd3c:	b570      	push	{r4, r5, r6, lr}
 801cd3e:	1e4a      	subs	r2, r1, #1
 801cd40:	2568      	movs	r5, #104	; 0x68
 801cd42:	4355      	muls	r5, r2
 801cd44:	460e      	mov	r6, r1
 801cd46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cd4a:	f000 fcc5 	bl	801d6d8 <_malloc_r>
 801cd4e:	4604      	mov	r4, r0
 801cd50:	b140      	cbz	r0, 801cd64 <__sfmoreglue+0x28>
 801cd52:	2100      	movs	r1, #0
 801cd54:	e9c0 1600 	strd	r1, r6, [r0]
 801cd58:	300c      	adds	r0, #12
 801cd5a:	60a0      	str	r0, [r4, #8]
 801cd5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801cd60:	f000 fc52 	bl	801d608 <memset>
 801cd64:	4620      	mov	r0, r4
 801cd66:	bd70      	pop	{r4, r5, r6, pc}

0801cd68 <__sfp_lock_acquire>:
 801cd68:	4801      	ldr	r0, [pc, #4]	; (801cd70 <__sfp_lock_acquire+0x8>)
 801cd6a:	f000 bbc8 	b.w	801d4fe <__retarget_lock_acquire_recursive>
 801cd6e:	bf00      	nop
 801cd70:	20000d5c 	.word	0x20000d5c

0801cd74 <__sfp_lock_release>:
 801cd74:	4801      	ldr	r0, [pc, #4]	; (801cd7c <__sfp_lock_release+0x8>)
 801cd76:	f000 bbc4 	b.w	801d502 <__retarget_lock_release_recursive>
 801cd7a:	bf00      	nop
 801cd7c:	20000d5c 	.word	0x20000d5c

0801cd80 <__sinit_lock_acquire>:
 801cd80:	4801      	ldr	r0, [pc, #4]	; (801cd88 <__sinit_lock_acquire+0x8>)
 801cd82:	f000 bbbc 	b.w	801d4fe <__retarget_lock_acquire_recursive>
 801cd86:	bf00      	nop
 801cd88:	20000d57 	.word	0x20000d57

0801cd8c <__sinit_lock_release>:
 801cd8c:	4801      	ldr	r0, [pc, #4]	; (801cd94 <__sinit_lock_release+0x8>)
 801cd8e:	f000 bbb8 	b.w	801d502 <__retarget_lock_release_recursive>
 801cd92:	bf00      	nop
 801cd94:	20000d57 	.word	0x20000d57

0801cd98 <__sinit>:
 801cd98:	b510      	push	{r4, lr}
 801cd9a:	4604      	mov	r4, r0
 801cd9c:	f7ff fff0 	bl	801cd80 <__sinit_lock_acquire>
 801cda0:	69a3      	ldr	r3, [r4, #24]
 801cda2:	b11b      	cbz	r3, 801cdac <__sinit+0x14>
 801cda4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cda8:	f7ff bff0 	b.w	801cd8c <__sinit_lock_release>
 801cdac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801cdb0:	6523      	str	r3, [r4, #80]	; 0x50
 801cdb2:	4b13      	ldr	r3, [pc, #76]	; (801ce00 <__sinit+0x68>)
 801cdb4:	4a13      	ldr	r2, [pc, #76]	; (801ce04 <__sinit+0x6c>)
 801cdb6:	681b      	ldr	r3, [r3, #0]
 801cdb8:	62a2      	str	r2, [r4, #40]	; 0x28
 801cdba:	42a3      	cmp	r3, r4
 801cdbc:	bf04      	itt	eq
 801cdbe:	2301      	moveq	r3, #1
 801cdc0:	61a3      	streq	r3, [r4, #24]
 801cdc2:	4620      	mov	r0, r4
 801cdc4:	f000 f820 	bl	801ce08 <__sfp>
 801cdc8:	6060      	str	r0, [r4, #4]
 801cdca:	4620      	mov	r0, r4
 801cdcc:	f000 f81c 	bl	801ce08 <__sfp>
 801cdd0:	60a0      	str	r0, [r4, #8]
 801cdd2:	4620      	mov	r0, r4
 801cdd4:	f000 f818 	bl	801ce08 <__sfp>
 801cdd8:	2200      	movs	r2, #0
 801cdda:	60e0      	str	r0, [r4, #12]
 801cddc:	2104      	movs	r1, #4
 801cdde:	6860      	ldr	r0, [r4, #4]
 801cde0:	f7ff ff82 	bl	801cce8 <std>
 801cde4:	68a0      	ldr	r0, [r4, #8]
 801cde6:	2201      	movs	r2, #1
 801cde8:	2109      	movs	r1, #9
 801cdea:	f7ff ff7d 	bl	801cce8 <std>
 801cdee:	68e0      	ldr	r0, [r4, #12]
 801cdf0:	2202      	movs	r2, #2
 801cdf2:	2112      	movs	r1, #18
 801cdf4:	f7ff ff78 	bl	801cce8 <std>
 801cdf8:	2301      	movs	r3, #1
 801cdfa:	61a3      	str	r3, [r4, #24]
 801cdfc:	e7d2      	b.n	801cda4 <__sinit+0xc>
 801cdfe:	bf00      	nop
 801ce00:	08025028 	.word	0x08025028
 801ce04:	0801cd31 	.word	0x0801cd31

0801ce08 <__sfp>:
 801ce08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce0a:	4607      	mov	r7, r0
 801ce0c:	f7ff ffac 	bl	801cd68 <__sfp_lock_acquire>
 801ce10:	4b1e      	ldr	r3, [pc, #120]	; (801ce8c <__sfp+0x84>)
 801ce12:	681e      	ldr	r6, [r3, #0]
 801ce14:	69b3      	ldr	r3, [r6, #24]
 801ce16:	b913      	cbnz	r3, 801ce1e <__sfp+0x16>
 801ce18:	4630      	mov	r0, r6
 801ce1a:	f7ff ffbd 	bl	801cd98 <__sinit>
 801ce1e:	3648      	adds	r6, #72	; 0x48
 801ce20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ce24:	3b01      	subs	r3, #1
 801ce26:	d503      	bpl.n	801ce30 <__sfp+0x28>
 801ce28:	6833      	ldr	r3, [r6, #0]
 801ce2a:	b30b      	cbz	r3, 801ce70 <__sfp+0x68>
 801ce2c:	6836      	ldr	r6, [r6, #0]
 801ce2e:	e7f7      	b.n	801ce20 <__sfp+0x18>
 801ce30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ce34:	b9d5      	cbnz	r5, 801ce6c <__sfp+0x64>
 801ce36:	4b16      	ldr	r3, [pc, #88]	; (801ce90 <__sfp+0x88>)
 801ce38:	60e3      	str	r3, [r4, #12]
 801ce3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ce3e:	6665      	str	r5, [r4, #100]	; 0x64
 801ce40:	f000 fb5a 	bl	801d4f8 <__retarget_lock_init_recursive>
 801ce44:	f7ff ff96 	bl	801cd74 <__sfp_lock_release>
 801ce48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ce4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ce50:	6025      	str	r5, [r4, #0]
 801ce52:	61a5      	str	r5, [r4, #24]
 801ce54:	2208      	movs	r2, #8
 801ce56:	4629      	mov	r1, r5
 801ce58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ce5c:	f000 fbd4 	bl	801d608 <memset>
 801ce60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ce64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ce68:	4620      	mov	r0, r4
 801ce6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ce6c:	3468      	adds	r4, #104	; 0x68
 801ce6e:	e7d9      	b.n	801ce24 <__sfp+0x1c>
 801ce70:	2104      	movs	r1, #4
 801ce72:	4638      	mov	r0, r7
 801ce74:	f7ff ff62 	bl	801cd3c <__sfmoreglue>
 801ce78:	4604      	mov	r4, r0
 801ce7a:	6030      	str	r0, [r6, #0]
 801ce7c:	2800      	cmp	r0, #0
 801ce7e:	d1d5      	bne.n	801ce2c <__sfp+0x24>
 801ce80:	f7ff ff78 	bl	801cd74 <__sfp_lock_release>
 801ce84:	230c      	movs	r3, #12
 801ce86:	603b      	str	r3, [r7, #0]
 801ce88:	e7ee      	b.n	801ce68 <__sfp+0x60>
 801ce8a:	bf00      	nop
 801ce8c:	08025028 	.word	0x08025028
 801ce90:	ffff0001 	.word	0xffff0001

0801ce94 <_fopen_r>:
 801ce94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ce96:	460f      	mov	r7, r1
 801ce98:	4611      	mov	r1, r2
 801ce9a:	aa01      	add	r2, sp, #4
 801ce9c:	4605      	mov	r5, r0
 801ce9e:	f001 ff99 	bl	801edd4 <__sflags>
 801cea2:	4606      	mov	r6, r0
 801cea4:	b918      	cbnz	r0, 801ceae <_fopen_r+0x1a>
 801cea6:	2400      	movs	r4, #0
 801cea8:	4620      	mov	r0, r4
 801ceaa:	b003      	add	sp, #12
 801ceac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ceae:	4628      	mov	r0, r5
 801ceb0:	f7ff ffaa 	bl	801ce08 <__sfp>
 801ceb4:	4604      	mov	r4, r0
 801ceb6:	2800      	cmp	r0, #0
 801ceb8:	d0f5      	beq.n	801cea6 <_fopen_r+0x12>
 801ceba:	4639      	mov	r1, r7
 801cebc:	9a01      	ldr	r2, [sp, #4]
 801cebe:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801cec2:	4628      	mov	r0, r5
 801cec4:	f000 fc62 	bl	801d78c <_open_r>
 801cec8:	1e07      	subs	r7, r0, #0
 801ceca:	da09      	bge.n	801cee0 <_fopen_r+0x4c>
 801cecc:	2500      	movs	r5, #0
 801cece:	f7ff ff4b 	bl	801cd68 <__sfp_lock_acquire>
 801ced2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ced4:	81a5      	strh	r5, [r4, #12]
 801ced6:	f000 fb10 	bl	801d4fa <__retarget_lock_close_recursive>
 801ceda:	f7ff ff4b 	bl	801cd74 <__sfp_lock_release>
 801cede:	e7e2      	b.n	801cea6 <_fopen_r+0x12>
 801cee0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cee2:	07db      	lsls	r3, r3, #31
 801cee4:	d405      	bmi.n	801cef2 <_fopen_r+0x5e>
 801cee6:	89a3      	ldrh	r3, [r4, #12]
 801cee8:	0598      	lsls	r0, r3, #22
 801ceea:	d402      	bmi.n	801cef2 <_fopen_r+0x5e>
 801ceec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ceee:	f000 fb06 	bl	801d4fe <__retarget_lock_acquire_recursive>
 801cef2:	4b0e      	ldr	r3, [pc, #56]	; (801cf2c <_fopen_r+0x98>)
 801cef4:	6263      	str	r3, [r4, #36]	; 0x24
 801cef6:	4b0e      	ldr	r3, [pc, #56]	; (801cf30 <_fopen_r+0x9c>)
 801cef8:	62a3      	str	r3, [r4, #40]	; 0x28
 801cefa:	4b0e      	ldr	r3, [pc, #56]	; (801cf34 <_fopen_r+0xa0>)
 801cefc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cefe:	05f1      	lsls	r1, r6, #23
 801cf00:	4b0d      	ldr	r3, [pc, #52]	; (801cf38 <_fopen_r+0xa4>)
 801cf02:	81e7      	strh	r7, [r4, #14]
 801cf04:	81a6      	strh	r6, [r4, #12]
 801cf06:	6224      	str	r4, [r4, #32]
 801cf08:	6323      	str	r3, [r4, #48]	; 0x30
 801cf0a:	d505      	bpl.n	801cf18 <_fopen_r+0x84>
 801cf0c:	2302      	movs	r3, #2
 801cf0e:	2200      	movs	r2, #0
 801cf10:	4621      	mov	r1, r4
 801cf12:	4628      	mov	r0, r5
 801cf14:	f000 f888 	bl	801d028 <_fseek_r>
 801cf18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cf1a:	07da      	lsls	r2, r3, #31
 801cf1c:	d4c4      	bmi.n	801cea8 <_fopen_r+0x14>
 801cf1e:	89a3      	ldrh	r3, [r4, #12]
 801cf20:	059b      	lsls	r3, r3, #22
 801cf22:	d4c1      	bmi.n	801cea8 <_fopen_r+0x14>
 801cf24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cf26:	f000 faec 	bl	801d502 <__retarget_lock_release_recursive>
 801cf2a:	e7bd      	b.n	801cea8 <_fopen_r+0x14>
 801cf2c:	0801d971 	.word	0x0801d971
 801cf30:	0801d997 	.word	0x0801d997
 801cf34:	0801d9cf 	.word	0x0801d9cf
 801cf38:	0801d9f3 	.word	0x0801d9f3

0801cf3c <fopen>:
 801cf3c:	4b02      	ldr	r3, [pc, #8]	; (801cf48 <fopen+0xc>)
 801cf3e:	460a      	mov	r2, r1
 801cf40:	4601      	mov	r1, r0
 801cf42:	6818      	ldr	r0, [r3, #0]
 801cf44:	f7ff bfa6 	b.w	801ce94 <_fopen_r>
 801cf48:	20000104 	.word	0x20000104

0801cf4c <_fputs_r>:
 801cf4c:	b570      	push	{r4, r5, r6, lr}
 801cf4e:	460e      	mov	r6, r1
 801cf50:	4614      	mov	r4, r2
 801cf52:	4605      	mov	r5, r0
 801cf54:	b118      	cbz	r0, 801cf5e <_fputs_r+0x12>
 801cf56:	6983      	ldr	r3, [r0, #24]
 801cf58:	b90b      	cbnz	r3, 801cf5e <_fputs_r+0x12>
 801cf5a:	f7ff ff1d 	bl	801cd98 <__sinit>
 801cf5e:	4b2b      	ldr	r3, [pc, #172]	; (801d00c <_fputs_r+0xc0>)
 801cf60:	429c      	cmp	r4, r3
 801cf62:	d11e      	bne.n	801cfa2 <_fputs_r+0x56>
 801cf64:	686c      	ldr	r4, [r5, #4]
 801cf66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cf68:	07da      	lsls	r2, r3, #31
 801cf6a:	d405      	bmi.n	801cf78 <_fputs_r+0x2c>
 801cf6c:	89a3      	ldrh	r3, [r4, #12]
 801cf6e:	059b      	lsls	r3, r3, #22
 801cf70:	d402      	bmi.n	801cf78 <_fputs_r+0x2c>
 801cf72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cf74:	f000 fac3 	bl	801d4fe <__retarget_lock_acquire_recursive>
 801cf78:	89a3      	ldrh	r3, [r4, #12]
 801cf7a:	0718      	lsls	r0, r3, #28
 801cf7c:	d51b      	bpl.n	801cfb6 <_fputs_r+0x6a>
 801cf7e:	6923      	ldr	r3, [r4, #16]
 801cf80:	b1cb      	cbz	r3, 801cfb6 <_fputs_r+0x6a>
 801cf82:	3e01      	subs	r6, #1
 801cf84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801cf88:	bb39      	cbnz	r1, 801cfda <_fputs_r+0x8e>
 801cf8a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801cf8c:	f015 0501 	ands.w	r5, r5, #1
 801cf90:	d139      	bne.n	801d006 <_fputs_r+0xba>
 801cf92:	89a3      	ldrh	r3, [r4, #12]
 801cf94:	0599      	lsls	r1, r3, #22
 801cf96:	d402      	bmi.n	801cf9e <_fputs_r+0x52>
 801cf98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cf9a:	f000 fab2 	bl	801d502 <__retarget_lock_release_recursive>
 801cf9e:	4628      	mov	r0, r5
 801cfa0:	bd70      	pop	{r4, r5, r6, pc}
 801cfa2:	4b1b      	ldr	r3, [pc, #108]	; (801d010 <_fputs_r+0xc4>)
 801cfa4:	429c      	cmp	r4, r3
 801cfa6:	d101      	bne.n	801cfac <_fputs_r+0x60>
 801cfa8:	68ac      	ldr	r4, [r5, #8]
 801cfaa:	e7dc      	b.n	801cf66 <_fputs_r+0x1a>
 801cfac:	4b19      	ldr	r3, [pc, #100]	; (801d014 <_fputs_r+0xc8>)
 801cfae:	429c      	cmp	r4, r3
 801cfb0:	bf08      	it	eq
 801cfb2:	68ec      	ldreq	r4, [r5, #12]
 801cfb4:	e7d7      	b.n	801cf66 <_fputs_r+0x1a>
 801cfb6:	4621      	mov	r1, r4
 801cfb8:	4628      	mov	r0, r5
 801cfba:	f001 fe09 	bl	801ebd0 <__swsetup_r>
 801cfbe:	2800      	cmp	r0, #0
 801cfc0:	d0df      	beq.n	801cf82 <_fputs_r+0x36>
 801cfc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cfc4:	07da      	lsls	r2, r3, #31
 801cfc6:	d405      	bmi.n	801cfd4 <_fputs_r+0x88>
 801cfc8:	89a3      	ldrh	r3, [r4, #12]
 801cfca:	059b      	lsls	r3, r3, #22
 801cfcc:	d402      	bmi.n	801cfd4 <_fputs_r+0x88>
 801cfce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cfd0:	f000 fa97 	bl	801d502 <__retarget_lock_release_recursive>
 801cfd4:	f04f 35ff 	mov.w	r5, #4294967295
 801cfd8:	e7e1      	b.n	801cf9e <_fputs_r+0x52>
 801cfda:	68a3      	ldr	r3, [r4, #8]
 801cfdc:	3b01      	subs	r3, #1
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	60a3      	str	r3, [r4, #8]
 801cfe2:	da04      	bge.n	801cfee <_fputs_r+0xa2>
 801cfe4:	69a2      	ldr	r2, [r4, #24]
 801cfe6:	4293      	cmp	r3, r2
 801cfe8:	db06      	blt.n	801cff8 <_fputs_r+0xac>
 801cfea:	290a      	cmp	r1, #10
 801cfec:	d004      	beq.n	801cff8 <_fputs_r+0xac>
 801cfee:	6823      	ldr	r3, [r4, #0]
 801cff0:	1c5a      	adds	r2, r3, #1
 801cff2:	6022      	str	r2, [r4, #0]
 801cff4:	7019      	strb	r1, [r3, #0]
 801cff6:	e7c5      	b.n	801cf84 <_fputs_r+0x38>
 801cff8:	4622      	mov	r2, r4
 801cffa:	4628      	mov	r0, r5
 801cffc:	f001 fd84 	bl	801eb08 <__swbuf_r>
 801d000:	3001      	adds	r0, #1
 801d002:	d1bf      	bne.n	801cf84 <_fputs_r+0x38>
 801d004:	e7dd      	b.n	801cfc2 <_fputs_r+0x76>
 801d006:	460d      	mov	r5, r1
 801d008:	e7c9      	b.n	801cf9e <_fputs_r+0x52>
 801d00a:	bf00      	nop
 801d00c:	08024fe8 	.word	0x08024fe8
 801d010:	08025008 	.word	0x08025008
 801d014:	08024fc8 	.word	0x08024fc8

0801d018 <fputs>:
 801d018:	4b02      	ldr	r3, [pc, #8]	; (801d024 <fputs+0xc>)
 801d01a:	460a      	mov	r2, r1
 801d01c:	4601      	mov	r1, r0
 801d01e:	6818      	ldr	r0, [r3, #0]
 801d020:	f7ff bf94 	b.w	801cf4c <_fputs_r>
 801d024:	20000104 	.word	0x20000104

0801d028 <_fseek_r>:
 801d028:	f000 b800 	b.w	801d02c <_fseeko_r>

0801d02c <_fseeko_r>:
 801d02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d030:	460c      	mov	r4, r1
 801d032:	4617      	mov	r7, r2
 801d034:	461e      	mov	r6, r3
 801d036:	4605      	mov	r5, r0
 801d038:	b118      	cbz	r0, 801d042 <_fseeko_r+0x16>
 801d03a:	6983      	ldr	r3, [r0, #24]
 801d03c:	b90b      	cbnz	r3, 801d042 <_fseeko_r+0x16>
 801d03e:	f7ff feab 	bl	801cd98 <__sinit>
 801d042:	4b44      	ldr	r3, [pc, #272]	; (801d154 <_fseeko_r+0x128>)
 801d044:	429c      	cmp	r4, r3
 801d046:	d122      	bne.n	801d08e <_fseeko_r+0x62>
 801d048:	686c      	ldr	r4, [r5, #4]
 801d04a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d04c:	07d9      	lsls	r1, r3, #31
 801d04e:	d405      	bmi.n	801d05c <_fseeko_r+0x30>
 801d050:	89a3      	ldrh	r3, [r4, #12]
 801d052:	059a      	lsls	r2, r3, #22
 801d054:	d402      	bmi.n	801d05c <_fseeko_r+0x30>
 801d056:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d058:	f000 fa51 	bl	801d4fe <__retarget_lock_acquire_recursive>
 801d05c:	89a3      	ldrh	r3, [r4, #12]
 801d05e:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801d062:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801d066:	d103      	bne.n	801d070 <_fseeko_r+0x44>
 801d068:	4621      	mov	r1, r4
 801d06a:	4628      	mov	r0, r5
 801d06c:	f7ff fdee 	bl	801cc4c <_fflush_r>
 801d070:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801d074:	f1b8 0f00 	cmp.w	r8, #0
 801d078:	d113      	bne.n	801d0a2 <_fseeko_r+0x76>
 801d07a:	231d      	movs	r3, #29
 801d07c:	602b      	str	r3, [r5, #0]
 801d07e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d080:	07d9      	lsls	r1, r3, #31
 801d082:	d55d      	bpl.n	801d140 <_fseeko_r+0x114>
 801d084:	f04f 36ff 	mov.w	r6, #4294967295
 801d088:	4630      	mov	r0, r6
 801d08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d08e:	4b32      	ldr	r3, [pc, #200]	; (801d158 <_fseeko_r+0x12c>)
 801d090:	429c      	cmp	r4, r3
 801d092:	d101      	bne.n	801d098 <_fseeko_r+0x6c>
 801d094:	68ac      	ldr	r4, [r5, #8]
 801d096:	e7d8      	b.n	801d04a <_fseeko_r+0x1e>
 801d098:	4b30      	ldr	r3, [pc, #192]	; (801d15c <_fseeko_r+0x130>)
 801d09a:	429c      	cmp	r4, r3
 801d09c:	bf08      	it	eq
 801d09e:	68ec      	ldreq	r4, [r5, #12]
 801d0a0:	e7d3      	b.n	801d04a <_fseeko_r+0x1e>
 801d0a2:	2e01      	cmp	r6, #1
 801d0a4:	d036      	beq.n	801d114 <_fseeko_r+0xe8>
 801d0a6:	f036 0302 	bics.w	r3, r6, #2
 801d0aa:	d147      	bne.n	801d13c <_fseeko_r+0x110>
 801d0ac:	6923      	ldr	r3, [r4, #16]
 801d0ae:	b91b      	cbnz	r3, 801d0b8 <_fseeko_r+0x8c>
 801d0b0:	4621      	mov	r1, r4
 801d0b2:	4628      	mov	r0, r5
 801d0b4:	f000 fa4a 	bl	801d54c <__smakebuf_r>
 801d0b8:	4621      	mov	r1, r4
 801d0ba:	4628      	mov	r0, r5
 801d0bc:	f7ff fdc6 	bl	801cc4c <_fflush_r>
 801d0c0:	2800      	cmp	r0, #0
 801d0c2:	d1dc      	bne.n	801d07e <_fseeko_r+0x52>
 801d0c4:	6a21      	ldr	r1, [r4, #32]
 801d0c6:	4633      	mov	r3, r6
 801d0c8:	463a      	mov	r2, r7
 801d0ca:	4628      	mov	r0, r5
 801d0cc:	47c0      	blx	r8
 801d0ce:	3001      	adds	r0, #1
 801d0d0:	d0d5      	beq.n	801d07e <_fseeko_r+0x52>
 801d0d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d0d4:	b141      	cbz	r1, 801d0e8 <_fseeko_r+0xbc>
 801d0d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d0da:	4299      	cmp	r1, r3
 801d0dc:	d002      	beq.n	801d0e4 <_fseeko_r+0xb8>
 801d0de:	4628      	mov	r0, r5
 801d0e0:	f000 faaa 	bl	801d638 <_free_r>
 801d0e4:	2300      	movs	r3, #0
 801d0e6:	6363      	str	r3, [r4, #52]	; 0x34
 801d0e8:	6923      	ldr	r3, [r4, #16]
 801d0ea:	6023      	str	r3, [r4, #0]
 801d0ec:	89a3      	ldrh	r3, [r4, #12]
 801d0ee:	2500      	movs	r5, #0
 801d0f0:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801d0f4:	6065      	str	r5, [r4, #4]
 801d0f6:	81a3      	strh	r3, [r4, #12]
 801d0f8:	2208      	movs	r2, #8
 801d0fa:	4629      	mov	r1, r5
 801d0fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d100:	f000 fa82 	bl	801d608 <memset>
 801d104:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801d106:	f016 0601 	ands.w	r6, r6, #1
 801d10a:	d120      	bne.n	801d14e <_fseeko_r+0x122>
 801d10c:	89a3      	ldrh	r3, [r4, #12]
 801d10e:	059b      	lsls	r3, r3, #22
 801d110:	d4ba      	bmi.n	801d088 <_fseeko_r+0x5c>
 801d112:	e00c      	b.n	801d12e <_fseeko_r+0x102>
 801d114:	4621      	mov	r1, r4
 801d116:	4628      	mov	r0, r5
 801d118:	f000 f822 	bl	801d160 <_ftello_r>
 801d11c:	1c43      	adds	r3, r0, #1
 801d11e:	4606      	mov	r6, r0
 801d120:	d109      	bne.n	801d136 <_fseeko_r+0x10a>
 801d122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d124:	07dd      	lsls	r5, r3, #31
 801d126:	d4ad      	bmi.n	801d084 <_fseeko_r+0x58>
 801d128:	89a3      	ldrh	r3, [r4, #12]
 801d12a:	0598      	lsls	r0, r3, #22
 801d12c:	d4aa      	bmi.n	801d084 <_fseeko_r+0x58>
 801d12e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d130:	f000 f9e7 	bl	801d502 <__retarget_lock_release_recursive>
 801d134:	e7a8      	b.n	801d088 <_fseeko_r+0x5c>
 801d136:	4407      	add	r7, r0
 801d138:	2600      	movs	r6, #0
 801d13a:	e7b7      	b.n	801d0ac <_fseeko_r+0x80>
 801d13c:	2316      	movs	r3, #22
 801d13e:	e79d      	b.n	801d07c <_fseeko_r+0x50>
 801d140:	89a3      	ldrh	r3, [r4, #12]
 801d142:	059a      	lsls	r2, r3, #22
 801d144:	d49e      	bmi.n	801d084 <_fseeko_r+0x58>
 801d146:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d148:	f000 f9db 	bl	801d502 <__retarget_lock_release_recursive>
 801d14c:	e79a      	b.n	801d084 <_fseeko_r+0x58>
 801d14e:	462e      	mov	r6, r5
 801d150:	e79a      	b.n	801d088 <_fseeko_r+0x5c>
 801d152:	bf00      	nop
 801d154:	08024fe8 	.word	0x08024fe8
 801d158:	08025008 	.word	0x08025008
 801d15c:	08024fc8 	.word	0x08024fc8

0801d160 <_ftello_r>:
 801d160:	b570      	push	{r4, r5, r6, lr}
 801d162:	460c      	mov	r4, r1
 801d164:	4605      	mov	r5, r0
 801d166:	b118      	cbz	r0, 801d170 <_ftello_r+0x10>
 801d168:	6983      	ldr	r3, [r0, #24]
 801d16a:	b90b      	cbnz	r3, 801d170 <_ftello_r+0x10>
 801d16c:	f7ff fe14 	bl	801cd98 <__sinit>
 801d170:	4b32      	ldr	r3, [pc, #200]	; (801d23c <_ftello_r+0xdc>)
 801d172:	429c      	cmp	r4, r3
 801d174:	d114      	bne.n	801d1a0 <_ftello_r+0x40>
 801d176:	686c      	ldr	r4, [r5, #4]
 801d178:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d17a:	07da      	lsls	r2, r3, #31
 801d17c:	d405      	bmi.n	801d18a <_ftello_r+0x2a>
 801d17e:	89a3      	ldrh	r3, [r4, #12]
 801d180:	059b      	lsls	r3, r3, #22
 801d182:	d402      	bmi.n	801d18a <_ftello_r+0x2a>
 801d184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d186:	f000 f9ba 	bl	801d4fe <__retarget_lock_acquire_recursive>
 801d18a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d18c:	b9ce      	cbnz	r6, 801d1c2 <_ftello_r+0x62>
 801d18e:	231d      	movs	r3, #29
 801d190:	602b      	str	r3, [r5, #0]
 801d192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d194:	07de      	lsls	r6, r3, #31
 801d196:	d50d      	bpl.n	801d1b4 <_ftello_r+0x54>
 801d198:	f04f 35ff 	mov.w	r5, #4294967295
 801d19c:	4628      	mov	r0, r5
 801d19e:	bd70      	pop	{r4, r5, r6, pc}
 801d1a0:	4b27      	ldr	r3, [pc, #156]	; (801d240 <_ftello_r+0xe0>)
 801d1a2:	429c      	cmp	r4, r3
 801d1a4:	d101      	bne.n	801d1aa <_ftello_r+0x4a>
 801d1a6:	68ac      	ldr	r4, [r5, #8]
 801d1a8:	e7e6      	b.n	801d178 <_ftello_r+0x18>
 801d1aa:	4b26      	ldr	r3, [pc, #152]	; (801d244 <_ftello_r+0xe4>)
 801d1ac:	429c      	cmp	r4, r3
 801d1ae:	bf08      	it	eq
 801d1b0:	68ec      	ldreq	r4, [r5, #12]
 801d1b2:	e7e1      	b.n	801d178 <_ftello_r+0x18>
 801d1b4:	89a3      	ldrh	r3, [r4, #12]
 801d1b6:	059d      	lsls	r5, r3, #22
 801d1b8:	d4ee      	bmi.n	801d198 <_ftello_r+0x38>
 801d1ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d1bc:	f000 f9a1 	bl	801d502 <__retarget_lock_release_recursive>
 801d1c0:	e7ea      	b.n	801d198 <_ftello_r+0x38>
 801d1c2:	89a2      	ldrh	r2, [r4, #12]
 801d1c4:	f002 030c 	and.w	r3, r2, #12
 801d1c8:	2b08      	cmp	r3, #8
 801d1ca:	d119      	bne.n	801d200 <_ftello_r+0xa0>
 801d1cc:	6823      	ldr	r3, [r4, #0]
 801d1ce:	b1bb      	cbz	r3, 801d200 <_ftello_r+0xa0>
 801d1d0:	6921      	ldr	r1, [r4, #16]
 801d1d2:	1a5b      	subs	r3, r3, r1
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	dd13      	ble.n	801d200 <_ftello_r+0xa0>
 801d1d8:	05d0      	lsls	r0, r2, #23
 801d1da:	d511      	bpl.n	801d200 <_ftello_r+0xa0>
 801d1dc:	2302      	movs	r3, #2
 801d1de:	2200      	movs	r2, #0
 801d1e0:	6a21      	ldr	r1, [r4, #32]
 801d1e2:	4628      	mov	r0, r5
 801d1e4:	47b0      	blx	r6
 801d1e6:	1c41      	adds	r1, r0, #1
 801d1e8:	4605      	mov	r5, r0
 801d1ea:	d10d      	bne.n	801d208 <_ftello_r+0xa8>
 801d1ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d1ee:	07da      	lsls	r2, r3, #31
 801d1f0:	d4d2      	bmi.n	801d198 <_ftello_r+0x38>
 801d1f2:	89a3      	ldrh	r3, [r4, #12]
 801d1f4:	059b      	lsls	r3, r3, #22
 801d1f6:	d4cf      	bmi.n	801d198 <_ftello_r+0x38>
 801d1f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d1fa:	f000 f982 	bl	801d502 <__retarget_lock_release_recursive>
 801d1fe:	e7cd      	b.n	801d19c <_ftello_r+0x3c>
 801d200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d204:	d00f      	beq.n	801d226 <_ftello_r+0xc6>
 801d206:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801d208:	89a2      	ldrh	r2, [r4, #12]
 801d20a:	0756      	lsls	r6, r2, #29
 801d20c:	d50d      	bpl.n	801d22a <_ftello_r+0xca>
 801d20e:	6863      	ldr	r3, [r4, #4]
 801d210:	1aed      	subs	r5, r5, r3
 801d212:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d214:	b10b      	cbz	r3, 801d21a <_ftello_r+0xba>
 801d216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d218:	1aed      	subs	r5, r5, r3
 801d21a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d21c:	07d9      	lsls	r1, r3, #31
 801d21e:	d4bd      	bmi.n	801d19c <_ftello_r+0x3c>
 801d220:	0593      	lsls	r3, r2, #22
 801d222:	d4bb      	bmi.n	801d19c <_ftello_r+0x3c>
 801d224:	e7e8      	b.n	801d1f8 <_ftello_r+0x98>
 801d226:	2301      	movs	r3, #1
 801d228:	e7da      	b.n	801d1e0 <_ftello_r+0x80>
 801d22a:	0710      	lsls	r0, r2, #28
 801d22c:	d5f5      	bpl.n	801d21a <_ftello_r+0xba>
 801d22e:	6823      	ldr	r3, [r4, #0]
 801d230:	2b00      	cmp	r3, #0
 801d232:	d0f2      	beq.n	801d21a <_ftello_r+0xba>
 801d234:	6921      	ldr	r1, [r4, #16]
 801d236:	1a5b      	subs	r3, r3, r1
 801d238:	441d      	add	r5, r3
 801d23a:	e7ee      	b.n	801d21a <_ftello_r+0xba>
 801d23c:	08024fe8 	.word	0x08024fe8
 801d240:	08025008 	.word	0x08025008
 801d244:	08024fc8 	.word	0x08024fc8

0801d248 <_fwalk_reent>:
 801d248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d24c:	4606      	mov	r6, r0
 801d24e:	4688      	mov	r8, r1
 801d250:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d254:	2700      	movs	r7, #0
 801d256:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d25a:	f1b9 0901 	subs.w	r9, r9, #1
 801d25e:	d505      	bpl.n	801d26c <_fwalk_reent+0x24>
 801d260:	6824      	ldr	r4, [r4, #0]
 801d262:	2c00      	cmp	r4, #0
 801d264:	d1f7      	bne.n	801d256 <_fwalk_reent+0xe>
 801d266:	4638      	mov	r0, r7
 801d268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d26c:	89ab      	ldrh	r3, [r5, #12]
 801d26e:	2b01      	cmp	r3, #1
 801d270:	d907      	bls.n	801d282 <_fwalk_reent+0x3a>
 801d272:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d276:	3301      	adds	r3, #1
 801d278:	d003      	beq.n	801d282 <_fwalk_reent+0x3a>
 801d27a:	4629      	mov	r1, r5
 801d27c:	4630      	mov	r0, r6
 801d27e:	47c0      	blx	r8
 801d280:	4307      	orrs	r7, r0
 801d282:	3568      	adds	r5, #104	; 0x68
 801d284:	e7e9      	b.n	801d25a <_fwalk_reent+0x12>
	...

0801d288 <__libc_init_array>:
 801d288:	b570      	push	{r4, r5, r6, lr}
 801d28a:	4d0d      	ldr	r5, [pc, #52]	; (801d2c0 <__libc_init_array+0x38>)
 801d28c:	4c0d      	ldr	r4, [pc, #52]	; (801d2c4 <__libc_init_array+0x3c>)
 801d28e:	1b64      	subs	r4, r4, r5
 801d290:	10a4      	asrs	r4, r4, #2
 801d292:	2600      	movs	r6, #0
 801d294:	42a6      	cmp	r6, r4
 801d296:	d109      	bne.n	801d2ac <__libc_init_array+0x24>
 801d298:	4d0b      	ldr	r5, [pc, #44]	; (801d2c8 <__libc_init_array+0x40>)
 801d29a:	4c0c      	ldr	r4, [pc, #48]	; (801d2cc <__libc_init_array+0x44>)
 801d29c:	f003 f8e0 	bl	8020460 <_init>
 801d2a0:	1b64      	subs	r4, r4, r5
 801d2a2:	10a4      	asrs	r4, r4, #2
 801d2a4:	2600      	movs	r6, #0
 801d2a6:	42a6      	cmp	r6, r4
 801d2a8:	d105      	bne.n	801d2b6 <__libc_init_array+0x2e>
 801d2aa:	bd70      	pop	{r4, r5, r6, pc}
 801d2ac:	f855 3b04 	ldr.w	r3, [r5], #4
 801d2b0:	4798      	blx	r3
 801d2b2:	3601      	adds	r6, #1
 801d2b4:	e7ee      	b.n	801d294 <__libc_init_array+0xc>
 801d2b6:	f855 3b04 	ldr.w	r3, [r5], #4
 801d2ba:	4798      	blx	r3
 801d2bc:	3601      	adds	r6, #1
 801d2be:	e7f2      	b.n	801d2a6 <__libc_init_array+0x1e>
 801d2c0:	080255c0 	.word	0x080255c0
 801d2c4:	080255c0 	.word	0x080255c0
 801d2c8:	080255c0 	.word	0x080255c0
 801d2cc:	080255d0 	.word	0x080255d0

0801d2d0 <localtime>:
 801d2d0:	b538      	push	{r3, r4, r5, lr}
 801d2d2:	4b0b      	ldr	r3, [pc, #44]	; (801d300 <localtime+0x30>)
 801d2d4:	681d      	ldr	r5, [r3, #0]
 801d2d6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801d2d8:	4604      	mov	r4, r0
 801d2da:	b953      	cbnz	r3, 801d2f2 <localtime+0x22>
 801d2dc:	2024      	movs	r0, #36	; 0x24
 801d2de:	f000 f975 	bl	801d5cc <malloc>
 801d2e2:	4602      	mov	r2, r0
 801d2e4:	63e8      	str	r0, [r5, #60]	; 0x3c
 801d2e6:	b920      	cbnz	r0, 801d2f2 <localtime+0x22>
 801d2e8:	4b06      	ldr	r3, [pc, #24]	; (801d304 <localtime+0x34>)
 801d2ea:	4807      	ldr	r0, [pc, #28]	; (801d308 <localtime+0x38>)
 801d2ec:	2132      	movs	r1, #50	; 0x32
 801d2ee:	f001 fd43 	bl	801ed78 <__assert_func>
 801d2f2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801d2f4:	4620      	mov	r0, r4
 801d2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d2fa:	f000 b807 	b.w	801d30c <localtime_r>
 801d2fe:	bf00      	nop
 801d300:	20000104 	.word	0x20000104
 801d304:	0802502c 	.word	0x0802502c
 801d308:	08025043 	.word	0x08025043

0801d30c <localtime_r>:
 801d30c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d310:	4607      	mov	r7, r0
 801d312:	9101      	str	r1, [sp, #4]
 801d314:	f001 fe0c 	bl	801ef30 <__gettzinfo>
 801d318:	9901      	ldr	r1, [sp, #4]
 801d31a:	4680      	mov	r8, r0
 801d31c:	4638      	mov	r0, r7
 801d31e:	f001 fe0b 	bl	801ef38 <gmtime_r>
 801d322:	6943      	ldr	r3, [r0, #20]
 801d324:	079a      	lsls	r2, r3, #30
 801d326:	4604      	mov	r4, r0
 801d328:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801d32c:	d105      	bne.n	801d33a <localtime_r+0x2e>
 801d32e:	2264      	movs	r2, #100	; 0x64
 801d330:	fb96 f3f2 	sdiv	r3, r6, r2
 801d334:	fb02 6313 	mls	r3, r2, r3, r6
 801d338:	bb7b      	cbnz	r3, 801d39a <localtime_r+0x8e>
 801d33a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801d33e:	fb96 f5f3 	sdiv	r5, r6, r3
 801d342:	fb03 6515 	mls	r5, r3, r5, r6
 801d346:	fab5 f585 	clz	r5, r5
 801d34a:	096d      	lsrs	r5, r5, #5
 801d34c:	4b68      	ldr	r3, [pc, #416]	; (801d4f0 <localtime_r+0x1e4>)
 801d34e:	2230      	movs	r2, #48	; 0x30
 801d350:	fb02 3505 	mla	r5, r2, r5, r3
 801d354:	f001 fa10 	bl	801e778 <__tz_lock>
 801d358:	f001 fa1a 	bl	801e790 <_tzset_unlocked>
 801d35c:	4b65      	ldr	r3, [pc, #404]	; (801d4f4 <localtime_r+0x1e8>)
 801d35e:	681b      	ldr	r3, [r3, #0]
 801d360:	b353      	cbz	r3, 801d3b8 <localtime_r+0xac>
 801d362:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d366:	42b3      	cmp	r3, r6
 801d368:	d119      	bne.n	801d39e <localtime_r+0x92>
 801d36a:	f8d8 1000 	ldr.w	r1, [r8]
 801d36e:	e9d7 6700 	ldrd	r6, r7, [r7]
 801d372:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801d376:	b9d1      	cbnz	r1, 801d3ae <localtime_r+0xa2>
 801d378:	4296      	cmp	r6, r2
 801d37a:	eb77 0303 	sbcs.w	r3, r7, r3
 801d37e:	da23      	bge.n	801d3c8 <localtime_r+0xbc>
 801d380:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801d384:	4296      	cmp	r6, r2
 801d386:	eb77 0303 	sbcs.w	r3, r7, r3
 801d38a:	bfb4      	ite	lt
 801d38c:	2301      	movlt	r3, #1
 801d38e:	2300      	movge	r3, #0
 801d390:	6223      	str	r3, [r4, #32]
 801d392:	db1b      	blt.n	801d3cc <localtime_r+0xc0>
 801d394:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801d398:	e01a      	b.n	801d3d0 <localtime_r+0xc4>
 801d39a:	2501      	movs	r5, #1
 801d39c:	e7d6      	b.n	801d34c <localtime_r+0x40>
 801d39e:	4630      	mov	r0, r6
 801d3a0:	f001 f942 	bl	801e628 <__tzcalc_limits>
 801d3a4:	2800      	cmp	r0, #0
 801d3a6:	d1e0      	bne.n	801d36a <localtime_r+0x5e>
 801d3a8:	f04f 33ff 	mov.w	r3, #4294967295
 801d3ac:	e004      	b.n	801d3b8 <localtime_r+0xac>
 801d3ae:	4296      	cmp	r6, r2
 801d3b0:	eb77 0303 	sbcs.w	r3, r7, r3
 801d3b4:	da02      	bge.n	801d3bc <localtime_r+0xb0>
 801d3b6:	2300      	movs	r3, #0
 801d3b8:	6223      	str	r3, [r4, #32]
 801d3ba:	e7eb      	b.n	801d394 <localtime_r+0x88>
 801d3bc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801d3c0:	4296      	cmp	r6, r2
 801d3c2:	eb77 0303 	sbcs.w	r3, r7, r3
 801d3c6:	daf6      	bge.n	801d3b6 <localtime_r+0xaa>
 801d3c8:	2301      	movs	r3, #1
 801d3ca:	6223      	str	r3, [r4, #32]
 801d3cc:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801d3d0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801d3d4:	203c      	movs	r0, #60	; 0x3c
 801d3d6:	fb91 f6f3 	sdiv	r6, r1, r3
 801d3da:	fb03 1316 	mls	r3, r3, r6, r1
 801d3de:	6861      	ldr	r1, [r4, #4]
 801d3e0:	fb93 f2f0 	sdiv	r2, r3, r0
 801d3e4:	fb00 3012 	mls	r0, r0, r2, r3
 801d3e8:	6823      	ldr	r3, [r4, #0]
 801d3ea:	1a89      	subs	r1, r1, r2
 801d3ec:	68a2      	ldr	r2, [r4, #8]
 801d3ee:	6061      	str	r1, [r4, #4]
 801d3f0:	1a1b      	subs	r3, r3, r0
 801d3f2:	1b92      	subs	r2, r2, r6
 801d3f4:	2b3b      	cmp	r3, #59	; 0x3b
 801d3f6:	6023      	str	r3, [r4, #0]
 801d3f8:	60a2      	str	r2, [r4, #8]
 801d3fa:	dd35      	ble.n	801d468 <localtime_r+0x15c>
 801d3fc:	3101      	adds	r1, #1
 801d3fe:	6061      	str	r1, [r4, #4]
 801d400:	3b3c      	subs	r3, #60	; 0x3c
 801d402:	6023      	str	r3, [r4, #0]
 801d404:	6863      	ldr	r3, [r4, #4]
 801d406:	2b3b      	cmp	r3, #59	; 0x3b
 801d408:	dd34      	ble.n	801d474 <localtime_r+0x168>
 801d40a:	3201      	adds	r2, #1
 801d40c:	60a2      	str	r2, [r4, #8]
 801d40e:	3b3c      	subs	r3, #60	; 0x3c
 801d410:	6063      	str	r3, [r4, #4]
 801d412:	68a3      	ldr	r3, [r4, #8]
 801d414:	2b17      	cmp	r3, #23
 801d416:	dd33      	ble.n	801d480 <localtime_r+0x174>
 801d418:	69e2      	ldr	r2, [r4, #28]
 801d41a:	3201      	adds	r2, #1
 801d41c:	61e2      	str	r2, [r4, #28]
 801d41e:	69a2      	ldr	r2, [r4, #24]
 801d420:	3201      	adds	r2, #1
 801d422:	2a06      	cmp	r2, #6
 801d424:	bfc8      	it	gt
 801d426:	2200      	movgt	r2, #0
 801d428:	61a2      	str	r2, [r4, #24]
 801d42a:	68e2      	ldr	r2, [r4, #12]
 801d42c:	3b18      	subs	r3, #24
 801d42e:	3201      	adds	r2, #1
 801d430:	60a3      	str	r3, [r4, #8]
 801d432:	6923      	ldr	r3, [r4, #16]
 801d434:	60e2      	str	r2, [r4, #12]
 801d436:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801d43a:	428a      	cmp	r2, r1
 801d43c:	dd0e      	ble.n	801d45c <localtime_r+0x150>
 801d43e:	2b0b      	cmp	r3, #11
 801d440:	eba2 0201 	sub.w	r2, r2, r1
 801d444:	60e2      	str	r2, [r4, #12]
 801d446:	f103 0201 	add.w	r2, r3, #1
 801d44a:	bf09      	itett	eq
 801d44c:	6963      	ldreq	r3, [r4, #20]
 801d44e:	6122      	strne	r2, [r4, #16]
 801d450:	2200      	moveq	r2, #0
 801d452:	3301      	addeq	r3, #1
 801d454:	bf02      	ittt	eq
 801d456:	6122      	streq	r2, [r4, #16]
 801d458:	6163      	streq	r3, [r4, #20]
 801d45a:	61e2      	streq	r2, [r4, #28]
 801d45c:	f001 f992 	bl	801e784 <__tz_unlock>
 801d460:	4620      	mov	r0, r4
 801d462:	b002      	add	sp, #8
 801d464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d468:	2b00      	cmp	r3, #0
 801d46a:	dacb      	bge.n	801d404 <localtime_r+0xf8>
 801d46c:	3901      	subs	r1, #1
 801d46e:	6061      	str	r1, [r4, #4]
 801d470:	333c      	adds	r3, #60	; 0x3c
 801d472:	e7c6      	b.n	801d402 <localtime_r+0xf6>
 801d474:	2b00      	cmp	r3, #0
 801d476:	dacc      	bge.n	801d412 <localtime_r+0x106>
 801d478:	3a01      	subs	r2, #1
 801d47a:	60a2      	str	r2, [r4, #8]
 801d47c:	333c      	adds	r3, #60	; 0x3c
 801d47e:	e7c7      	b.n	801d410 <localtime_r+0x104>
 801d480:	2b00      	cmp	r3, #0
 801d482:	daeb      	bge.n	801d45c <localtime_r+0x150>
 801d484:	69e2      	ldr	r2, [r4, #28]
 801d486:	3a01      	subs	r2, #1
 801d488:	61e2      	str	r2, [r4, #28]
 801d48a:	69a2      	ldr	r2, [r4, #24]
 801d48c:	3a01      	subs	r2, #1
 801d48e:	bf48      	it	mi
 801d490:	2206      	movmi	r2, #6
 801d492:	61a2      	str	r2, [r4, #24]
 801d494:	68e2      	ldr	r2, [r4, #12]
 801d496:	3318      	adds	r3, #24
 801d498:	3a01      	subs	r2, #1
 801d49a:	60e2      	str	r2, [r4, #12]
 801d49c:	60a3      	str	r3, [r4, #8]
 801d49e:	2a00      	cmp	r2, #0
 801d4a0:	d1dc      	bne.n	801d45c <localtime_r+0x150>
 801d4a2:	6923      	ldr	r3, [r4, #16]
 801d4a4:	3b01      	subs	r3, #1
 801d4a6:	d405      	bmi.n	801d4b4 <localtime_r+0x1a8>
 801d4a8:	6123      	str	r3, [r4, #16]
 801d4aa:	6923      	ldr	r3, [r4, #16]
 801d4ac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801d4b0:	60e3      	str	r3, [r4, #12]
 801d4b2:	e7d3      	b.n	801d45c <localtime_r+0x150>
 801d4b4:	230b      	movs	r3, #11
 801d4b6:	6123      	str	r3, [r4, #16]
 801d4b8:	6963      	ldr	r3, [r4, #20]
 801d4ba:	1e5a      	subs	r2, r3, #1
 801d4bc:	6162      	str	r2, [r4, #20]
 801d4be:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801d4c2:	0793      	lsls	r3, r2, #30
 801d4c4:	d105      	bne.n	801d4d2 <localtime_r+0x1c6>
 801d4c6:	2164      	movs	r1, #100	; 0x64
 801d4c8:	fb92 f3f1 	sdiv	r3, r2, r1
 801d4cc:	fb01 2313 	mls	r3, r1, r3, r2
 801d4d0:	b963      	cbnz	r3, 801d4ec <localtime_r+0x1e0>
 801d4d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801d4d6:	fb92 f3f1 	sdiv	r3, r2, r1
 801d4da:	fb01 2313 	mls	r3, r1, r3, r2
 801d4de:	fab3 f383 	clz	r3, r3
 801d4e2:	095b      	lsrs	r3, r3, #5
 801d4e4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801d4e8:	61e3      	str	r3, [r4, #28]
 801d4ea:	e7de      	b.n	801d4aa <localtime_r+0x19e>
 801d4ec:	2301      	movs	r3, #1
 801d4ee:	e7f9      	b.n	801d4e4 <localtime_r+0x1d8>
 801d4f0:	080250a4 	.word	0x080250a4
 801d4f4:	20000cb8 	.word	0x20000cb8

0801d4f8 <__retarget_lock_init_recursive>:
 801d4f8:	4770      	bx	lr

0801d4fa <__retarget_lock_close_recursive>:
 801d4fa:	4770      	bx	lr

0801d4fc <__retarget_lock_acquire>:
 801d4fc:	4770      	bx	lr

0801d4fe <__retarget_lock_acquire_recursive>:
 801d4fe:	4770      	bx	lr

0801d500 <__retarget_lock_release>:
 801d500:	4770      	bx	lr

0801d502 <__retarget_lock_release_recursive>:
 801d502:	4770      	bx	lr

0801d504 <__swhatbuf_r>:
 801d504:	b570      	push	{r4, r5, r6, lr}
 801d506:	460e      	mov	r6, r1
 801d508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d50c:	2900      	cmp	r1, #0
 801d50e:	b096      	sub	sp, #88	; 0x58
 801d510:	4614      	mov	r4, r2
 801d512:	461d      	mov	r5, r3
 801d514:	da07      	bge.n	801d526 <__swhatbuf_r+0x22>
 801d516:	2300      	movs	r3, #0
 801d518:	602b      	str	r3, [r5, #0]
 801d51a:	89b3      	ldrh	r3, [r6, #12]
 801d51c:	061a      	lsls	r2, r3, #24
 801d51e:	d410      	bmi.n	801d542 <__swhatbuf_r+0x3e>
 801d520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d524:	e00e      	b.n	801d544 <__swhatbuf_r+0x40>
 801d526:	466a      	mov	r2, sp
 801d528:	f001 fc9c 	bl	801ee64 <_fstat_r>
 801d52c:	2800      	cmp	r0, #0
 801d52e:	dbf2      	blt.n	801d516 <__swhatbuf_r+0x12>
 801d530:	9a01      	ldr	r2, [sp, #4]
 801d532:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d536:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d53a:	425a      	negs	r2, r3
 801d53c:	415a      	adcs	r2, r3
 801d53e:	602a      	str	r2, [r5, #0]
 801d540:	e7ee      	b.n	801d520 <__swhatbuf_r+0x1c>
 801d542:	2340      	movs	r3, #64	; 0x40
 801d544:	2000      	movs	r0, #0
 801d546:	6023      	str	r3, [r4, #0]
 801d548:	b016      	add	sp, #88	; 0x58
 801d54a:	bd70      	pop	{r4, r5, r6, pc}

0801d54c <__smakebuf_r>:
 801d54c:	898b      	ldrh	r3, [r1, #12]
 801d54e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d550:	079d      	lsls	r5, r3, #30
 801d552:	4606      	mov	r6, r0
 801d554:	460c      	mov	r4, r1
 801d556:	d507      	bpl.n	801d568 <__smakebuf_r+0x1c>
 801d558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d55c:	6023      	str	r3, [r4, #0]
 801d55e:	6123      	str	r3, [r4, #16]
 801d560:	2301      	movs	r3, #1
 801d562:	6163      	str	r3, [r4, #20]
 801d564:	b002      	add	sp, #8
 801d566:	bd70      	pop	{r4, r5, r6, pc}
 801d568:	ab01      	add	r3, sp, #4
 801d56a:	466a      	mov	r2, sp
 801d56c:	f7ff ffca 	bl	801d504 <__swhatbuf_r>
 801d570:	9900      	ldr	r1, [sp, #0]
 801d572:	4605      	mov	r5, r0
 801d574:	4630      	mov	r0, r6
 801d576:	f000 f8af 	bl	801d6d8 <_malloc_r>
 801d57a:	b948      	cbnz	r0, 801d590 <__smakebuf_r+0x44>
 801d57c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d580:	059a      	lsls	r2, r3, #22
 801d582:	d4ef      	bmi.n	801d564 <__smakebuf_r+0x18>
 801d584:	f023 0303 	bic.w	r3, r3, #3
 801d588:	f043 0302 	orr.w	r3, r3, #2
 801d58c:	81a3      	strh	r3, [r4, #12]
 801d58e:	e7e3      	b.n	801d558 <__smakebuf_r+0xc>
 801d590:	4b0d      	ldr	r3, [pc, #52]	; (801d5c8 <__smakebuf_r+0x7c>)
 801d592:	62b3      	str	r3, [r6, #40]	; 0x28
 801d594:	89a3      	ldrh	r3, [r4, #12]
 801d596:	6020      	str	r0, [r4, #0]
 801d598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d59c:	81a3      	strh	r3, [r4, #12]
 801d59e:	9b00      	ldr	r3, [sp, #0]
 801d5a0:	6163      	str	r3, [r4, #20]
 801d5a2:	9b01      	ldr	r3, [sp, #4]
 801d5a4:	6120      	str	r0, [r4, #16]
 801d5a6:	b15b      	cbz	r3, 801d5c0 <__smakebuf_r+0x74>
 801d5a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d5ac:	4630      	mov	r0, r6
 801d5ae:	f001 fd73 	bl	801f098 <_isatty_r>
 801d5b2:	b128      	cbz	r0, 801d5c0 <__smakebuf_r+0x74>
 801d5b4:	89a3      	ldrh	r3, [r4, #12]
 801d5b6:	f023 0303 	bic.w	r3, r3, #3
 801d5ba:	f043 0301 	orr.w	r3, r3, #1
 801d5be:	81a3      	strh	r3, [r4, #12]
 801d5c0:	89a0      	ldrh	r0, [r4, #12]
 801d5c2:	4305      	orrs	r5, r0
 801d5c4:	81a5      	strh	r5, [r4, #12]
 801d5c6:	e7cd      	b.n	801d564 <__smakebuf_r+0x18>
 801d5c8:	0801cd31 	.word	0x0801cd31

0801d5cc <malloc>:
 801d5cc:	4b02      	ldr	r3, [pc, #8]	; (801d5d8 <malloc+0xc>)
 801d5ce:	4601      	mov	r1, r0
 801d5d0:	6818      	ldr	r0, [r3, #0]
 801d5d2:	f000 b881 	b.w	801d6d8 <_malloc_r>
 801d5d6:	bf00      	nop
 801d5d8:	20000104 	.word	0x20000104

0801d5dc <free>:
 801d5dc:	4b02      	ldr	r3, [pc, #8]	; (801d5e8 <free+0xc>)
 801d5de:	4601      	mov	r1, r0
 801d5e0:	6818      	ldr	r0, [r3, #0]
 801d5e2:	f000 b829 	b.w	801d638 <_free_r>
 801d5e6:	bf00      	nop
 801d5e8:	20000104 	.word	0x20000104

0801d5ec <memcpy>:
 801d5ec:	440a      	add	r2, r1
 801d5ee:	4291      	cmp	r1, r2
 801d5f0:	f100 33ff 	add.w	r3, r0, #4294967295
 801d5f4:	d100      	bne.n	801d5f8 <memcpy+0xc>
 801d5f6:	4770      	bx	lr
 801d5f8:	b510      	push	{r4, lr}
 801d5fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d5fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d602:	4291      	cmp	r1, r2
 801d604:	d1f9      	bne.n	801d5fa <memcpy+0xe>
 801d606:	bd10      	pop	{r4, pc}

0801d608 <memset>:
 801d608:	4402      	add	r2, r0
 801d60a:	4603      	mov	r3, r0
 801d60c:	4293      	cmp	r3, r2
 801d60e:	d100      	bne.n	801d612 <memset+0xa>
 801d610:	4770      	bx	lr
 801d612:	f803 1b01 	strb.w	r1, [r3], #1
 801d616:	e7f9      	b.n	801d60c <memset+0x4>

0801d618 <_calloc_r>:
 801d618:	b513      	push	{r0, r1, r4, lr}
 801d61a:	434a      	muls	r2, r1
 801d61c:	4611      	mov	r1, r2
 801d61e:	9201      	str	r2, [sp, #4]
 801d620:	f000 f85a 	bl	801d6d8 <_malloc_r>
 801d624:	4604      	mov	r4, r0
 801d626:	b118      	cbz	r0, 801d630 <_calloc_r+0x18>
 801d628:	9a01      	ldr	r2, [sp, #4]
 801d62a:	2100      	movs	r1, #0
 801d62c:	f7ff ffec 	bl	801d608 <memset>
 801d630:	4620      	mov	r0, r4
 801d632:	b002      	add	sp, #8
 801d634:	bd10      	pop	{r4, pc}
	...

0801d638 <_free_r>:
 801d638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d63a:	2900      	cmp	r1, #0
 801d63c:	d048      	beq.n	801d6d0 <_free_r+0x98>
 801d63e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d642:	9001      	str	r0, [sp, #4]
 801d644:	2b00      	cmp	r3, #0
 801d646:	f1a1 0404 	sub.w	r4, r1, #4
 801d64a:	bfb8      	it	lt
 801d64c:	18e4      	addlt	r4, r4, r3
 801d64e:	f001 fd5b 	bl	801f108 <__malloc_lock>
 801d652:	4a20      	ldr	r2, [pc, #128]	; (801d6d4 <_free_r+0x9c>)
 801d654:	9801      	ldr	r0, [sp, #4]
 801d656:	6813      	ldr	r3, [r2, #0]
 801d658:	4615      	mov	r5, r2
 801d65a:	b933      	cbnz	r3, 801d66a <_free_r+0x32>
 801d65c:	6063      	str	r3, [r4, #4]
 801d65e:	6014      	str	r4, [r2, #0]
 801d660:	b003      	add	sp, #12
 801d662:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d666:	f001 bd55 	b.w	801f114 <__malloc_unlock>
 801d66a:	42a3      	cmp	r3, r4
 801d66c:	d90b      	bls.n	801d686 <_free_r+0x4e>
 801d66e:	6821      	ldr	r1, [r4, #0]
 801d670:	1862      	adds	r2, r4, r1
 801d672:	4293      	cmp	r3, r2
 801d674:	bf04      	itt	eq
 801d676:	681a      	ldreq	r2, [r3, #0]
 801d678:	685b      	ldreq	r3, [r3, #4]
 801d67a:	6063      	str	r3, [r4, #4]
 801d67c:	bf04      	itt	eq
 801d67e:	1852      	addeq	r2, r2, r1
 801d680:	6022      	streq	r2, [r4, #0]
 801d682:	602c      	str	r4, [r5, #0]
 801d684:	e7ec      	b.n	801d660 <_free_r+0x28>
 801d686:	461a      	mov	r2, r3
 801d688:	685b      	ldr	r3, [r3, #4]
 801d68a:	b10b      	cbz	r3, 801d690 <_free_r+0x58>
 801d68c:	42a3      	cmp	r3, r4
 801d68e:	d9fa      	bls.n	801d686 <_free_r+0x4e>
 801d690:	6811      	ldr	r1, [r2, #0]
 801d692:	1855      	adds	r5, r2, r1
 801d694:	42a5      	cmp	r5, r4
 801d696:	d10b      	bne.n	801d6b0 <_free_r+0x78>
 801d698:	6824      	ldr	r4, [r4, #0]
 801d69a:	4421      	add	r1, r4
 801d69c:	1854      	adds	r4, r2, r1
 801d69e:	42a3      	cmp	r3, r4
 801d6a0:	6011      	str	r1, [r2, #0]
 801d6a2:	d1dd      	bne.n	801d660 <_free_r+0x28>
 801d6a4:	681c      	ldr	r4, [r3, #0]
 801d6a6:	685b      	ldr	r3, [r3, #4]
 801d6a8:	6053      	str	r3, [r2, #4]
 801d6aa:	4421      	add	r1, r4
 801d6ac:	6011      	str	r1, [r2, #0]
 801d6ae:	e7d7      	b.n	801d660 <_free_r+0x28>
 801d6b0:	d902      	bls.n	801d6b8 <_free_r+0x80>
 801d6b2:	230c      	movs	r3, #12
 801d6b4:	6003      	str	r3, [r0, #0]
 801d6b6:	e7d3      	b.n	801d660 <_free_r+0x28>
 801d6b8:	6825      	ldr	r5, [r4, #0]
 801d6ba:	1961      	adds	r1, r4, r5
 801d6bc:	428b      	cmp	r3, r1
 801d6be:	bf04      	itt	eq
 801d6c0:	6819      	ldreq	r1, [r3, #0]
 801d6c2:	685b      	ldreq	r3, [r3, #4]
 801d6c4:	6063      	str	r3, [r4, #4]
 801d6c6:	bf04      	itt	eq
 801d6c8:	1949      	addeq	r1, r1, r5
 801d6ca:	6021      	streq	r1, [r4, #0]
 801d6cc:	6054      	str	r4, [r2, #4]
 801d6ce:	e7c7      	b.n	801d660 <_free_r+0x28>
 801d6d0:	b003      	add	sp, #12
 801d6d2:	bd30      	pop	{r4, r5, pc}
 801d6d4:	20000c94 	.word	0x20000c94

0801d6d8 <_malloc_r>:
 801d6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6da:	1ccd      	adds	r5, r1, #3
 801d6dc:	f025 0503 	bic.w	r5, r5, #3
 801d6e0:	3508      	adds	r5, #8
 801d6e2:	2d0c      	cmp	r5, #12
 801d6e4:	bf38      	it	cc
 801d6e6:	250c      	movcc	r5, #12
 801d6e8:	2d00      	cmp	r5, #0
 801d6ea:	4606      	mov	r6, r0
 801d6ec:	db01      	blt.n	801d6f2 <_malloc_r+0x1a>
 801d6ee:	42a9      	cmp	r1, r5
 801d6f0:	d903      	bls.n	801d6fa <_malloc_r+0x22>
 801d6f2:	230c      	movs	r3, #12
 801d6f4:	6033      	str	r3, [r6, #0]
 801d6f6:	2000      	movs	r0, #0
 801d6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d6fa:	f001 fd05 	bl	801f108 <__malloc_lock>
 801d6fe:	4921      	ldr	r1, [pc, #132]	; (801d784 <_malloc_r+0xac>)
 801d700:	680a      	ldr	r2, [r1, #0]
 801d702:	4614      	mov	r4, r2
 801d704:	b99c      	cbnz	r4, 801d72e <_malloc_r+0x56>
 801d706:	4f20      	ldr	r7, [pc, #128]	; (801d788 <_malloc_r+0xb0>)
 801d708:	683b      	ldr	r3, [r7, #0]
 801d70a:	b923      	cbnz	r3, 801d716 <_malloc_r+0x3e>
 801d70c:	4621      	mov	r1, r4
 801d70e:	4630      	mov	r0, r6
 801d710:	f000 f8da 	bl	801d8c8 <_sbrk_r>
 801d714:	6038      	str	r0, [r7, #0]
 801d716:	4629      	mov	r1, r5
 801d718:	4630      	mov	r0, r6
 801d71a:	f000 f8d5 	bl	801d8c8 <_sbrk_r>
 801d71e:	1c43      	adds	r3, r0, #1
 801d720:	d123      	bne.n	801d76a <_malloc_r+0x92>
 801d722:	230c      	movs	r3, #12
 801d724:	6033      	str	r3, [r6, #0]
 801d726:	4630      	mov	r0, r6
 801d728:	f001 fcf4 	bl	801f114 <__malloc_unlock>
 801d72c:	e7e3      	b.n	801d6f6 <_malloc_r+0x1e>
 801d72e:	6823      	ldr	r3, [r4, #0]
 801d730:	1b5b      	subs	r3, r3, r5
 801d732:	d417      	bmi.n	801d764 <_malloc_r+0x8c>
 801d734:	2b0b      	cmp	r3, #11
 801d736:	d903      	bls.n	801d740 <_malloc_r+0x68>
 801d738:	6023      	str	r3, [r4, #0]
 801d73a:	441c      	add	r4, r3
 801d73c:	6025      	str	r5, [r4, #0]
 801d73e:	e004      	b.n	801d74a <_malloc_r+0x72>
 801d740:	6863      	ldr	r3, [r4, #4]
 801d742:	42a2      	cmp	r2, r4
 801d744:	bf0c      	ite	eq
 801d746:	600b      	streq	r3, [r1, #0]
 801d748:	6053      	strne	r3, [r2, #4]
 801d74a:	4630      	mov	r0, r6
 801d74c:	f001 fce2 	bl	801f114 <__malloc_unlock>
 801d750:	f104 000b 	add.w	r0, r4, #11
 801d754:	1d23      	adds	r3, r4, #4
 801d756:	f020 0007 	bic.w	r0, r0, #7
 801d75a:	1ac2      	subs	r2, r0, r3
 801d75c:	d0cc      	beq.n	801d6f8 <_malloc_r+0x20>
 801d75e:	1a1b      	subs	r3, r3, r0
 801d760:	50a3      	str	r3, [r4, r2]
 801d762:	e7c9      	b.n	801d6f8 <_malloc_r+0x20>
 801d764:	4622      	mov	r2, r4
 801d766:	6864      	ldr	r4, [r4, #4]
 801d768:	e7cc      	b.n	801d704 <_malloc_r+0x2c>
 801d76a:	1cc4      	adds	r4, r0, #3
 801d76c:	f024 0403 	bic.w	r4, r4, #3
 801d770:	42a0      	cmp	r0, r4
 801d772:	d0e3      	beq.n	801d73c <_malloc_r+0x64>
 801d774:	1a21      	subs	r1, r4, r0
 801d776:	4630      	mov	r0, r6
 801d778:	f000 f8a6 	bl	801d8c8 <_sbrk_r>
 801d77c:	3001      	adds	r0, #1
 801d77e:	d1dd      	bne.n	801d73c <_malloc_r+0x64>
 801d780:	e7cf      	b.n	801d722 <_malloc_r+0x4a>
 801d782:	bf00      	nop
 801d784:	20000c94 	.word	0x20000c94
 801d788:	20000c98 	.word	0x20000c98

0801d78c <_open_r>:
 801d78c:	b538      	push	{r3, r4, r5, lr}
 801d78e:	4d07      	ldr	r5, [pc, #28]	; (801d7ac <_open_r+0x20>)
 801d790:	4604      	mov	r4, r0
 801d792:	4608      	mov	r0, r1
 801d794:	4611      	mov	r1, r2
 801d796:	2200      	movs	r2, #0
 801d798:	602a      	str	r2, [r5, #0]
 801d79a:	461a      	mov	r2, r3
 801d79c:	f7e3 fb68 	bl	8000e70 <_open>
 801d7a0:	1c43      	adds	r3, r0, #1
 801d7a2:	d102      	bne.n	801d7aa <_open_r+0x1e>
 801d7a4:	682b      	ldr	r3, [r5, #0]
 801d7a6:	b103      	cbz	r3, 801d7aa <_open_r+0x1e>
 801d7a8:	6023      	str	r3, [r4, #0]
 801d7aa:	bd38      	pop	{r3, r4, r5, pc}
 801d7ac:	20000d60 	.word	0x20000d60

0801d7b0 <putchar>:
 801d7b0:	4b09      	ldr	r3, [pc, #36]	; (801d7d8 <putchar+0x28>)
 801d7b2:	b513      	push	{r0, r1, r4, lr}
 801d7b4:	681c      	ldr	r4, [r3, #0]
 801d7b6:	4601      	mov	r1, r0
 801d7b8:	b134      	cbz	r4, 801d7c8 <putchar+0x18>
 801d7ba:	69a3      	ldr	r3, [r4, #24]
 801d7bc:	b923      	cbnz	r3, 801d7c8 <putchar+0x18>
 801d7be:	9001      	str	r0, [sp, #4]
 801d7c0:	4620      	mov	r0, r4
 801d7c2:	f7ff fae9 	bl	801cd98 <__sinit>
 801d7c6:	9901      	ldr	r1, [sp, #4]
 801d7c8:	68a2      	ldr	r2, [r4, #8]
 801d7ca:	4620      	mov	r0, r4
 801d7cc:	b002      	add	sp, #8
 801d7ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d7d2:	f002 b915 	b.w	801fa00 <_putc_r>
 801d7d6:	bf00      	nop
 801d7d8:	20000104 	.word	0x20000104

0801d7dc <srand>:
 801d7dc:	b538      	push	{r3, r4, r5, lr}
 801d7de:	4b10      	ldr	r3, [pc, #64]	; (801d820 <srand+0x44>)
 801d7e0:	681d      	ldr	r5, [r3, #0]
 801d7e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801d7e4:	4604      	mov	r4, r0
 801d7e6:	b9b3      	cbnz	r3, 801d816 <srand+0x3a>
 801d7e8:	2018      	movs	r0, #24
 801d7ea:	f7ff feef 	bl	801d5cc <malloc>
 801d7ee:	4602      	mov	r2, r0
 801d7f0:	63a8      	str	r0, [r5, #56]	; 0x38
 801d7f2:	b920      	cbnz	r0, 801d7fe <srand+0x22>
 801d7f4:	4b0b      	ldr	r3, [pc, #44]	; (801d824 <srand+0x48>)
 801d7f6:	480c      	ldr	r0, [pc, #48]	; (801d828 <srand+0x4c>)
 801d7f8:	2142      	movs	r1, #66	; 0x42
 801d7fa:	f001 fabd 	bl	801ed78 <__assert_func>
 801d7fe:	490b      	ldr	r1, [pc, #44]	; (801d82c <srand+0x50>)
 801d800:	4b0b      	ldr	r3, [pc, #44]	; (801d830 <srand+0x54>)
 801d802:	e9c0 1300 	strd	r1, r3, [r0]
 801d806:	4b0b      	ldr	r3, [pc, #44]	; (801d834 <srand+0x58>)
 801d808:	6083      	str	r3, [r0, #8]
 801d80a:	230b      	movs	r3, #11
 801d80c:	8183      	strh	r3, [r0, #12]
 801d80e:	2100      	movs	r1, #0
 801d810:	2001      	movs	r0, #1
 801d812:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d816:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801d818:	2200      	movs	r2, #0
 801d81a:	611c      	str	r4, [r3, #16]
 801d81c:	615a      	str	r2, [r3, #20]
 801d81e:	bd38      	pop	{r3, r4, r5, pc}
 801d820:	20000104 	.word	0x20000104
 801d824:	0802502c 	.word	0x0802502c
 801d828:	08025104 	.word	0x08025104
 801d82c:	abcd330e 	.word	0xabcd330e
 801d830:	e66d1234 	.word	0xe66d1234
 801d834:	0005deec 	.word	0x0005deec

0801d838 <rand>:
 801d838:	4b17      	ldr	r3, [pc, #92]	; (801d898 <rand+0x60>)
 801d83a:	b510      	push	{r4, lr}
 801d83c:	681c      	ldr	r4, [r3, #0]
 801d83e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d840:	b9b3      	cbnz	r3, 801d870 <rand+0x38>
 801d842:	2018      	movs	r0, #24
 801d844:	f7ff fec2 	bl	801d5cc <malloc>
 801d848:	63a0      	str	r0, [r4, #56]	; 0x38
 801d84a:	b928      	cbnz	r0, 801d858 <rand+0x20>
 801d84c:	4602      	mov	r2, r0
 801d84e:	4b13      	ldr	r3, [pc, #76]	; (801d89c <rand+0x64>)
 801d850:	4813      	ldr	r0, [pc, #76]	; (801d8a0 <rand+0x68>)
 801d852:	214e      	movs	r1, #78	; 0x4e
 801d854:	f001 fa90 	bl	801ed78 <__assert_func>
 801d858:	4a12      	ldr	r2, [pc, #72]	; (801d8a4 <rand+0x6c>)
 801d85a:	4b13      	ldr	r3, [pc, #76]	; (801d8a8 <rand+0x70>)
 801d85c:	e9c0 2300 	strd	r2, r3, [r0]
 801d860:	4b12      	ldr	r3, [pc, #72]	; (801d8ac <rand+0x74>)
 801d862:	6083      	str	r3, [r0, #8]
 801d864:	230b      	movs	r3, #11
 801d866:	8183      	strh	r3, [r0, #12]
 801d868:	2201      	movs	r2, #1
 801d86a:	2300      	movs	r3, #0
 801d86c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801d870:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d872:	480f      	ldr	r0, [pc, #60]	; (801d8b0 <rand+0x78>)
 801d874:	690a      	ldr	r2, [r1, #16]
 801d876:	694b      	ldr	r3, [r1, #20]
 801d878:	4c0e      	ldr	r4, [pc, #56]	; (801d8b4 <rand+0x7c>)
 801d87a:	4350      	muls	r0, r2
 801d87c:	fb04 0003 	mla	r0, r4, r3, r0
 801d880:	fba2 3404 	umull	r3, r4, r2, r4
 801d884:	1c5a      	adds	r2, r3, #1
 801d886:	4404      	add	r4, r0
 801d888:	f144 0000 	adc.w	r0, r4, #0
 801d88c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801d890:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d894:	bd10      	pop	{r4, pc}
 801d896:	bf00      	nop
 801d898:	20000104 	.word	0x20000104
 801d89c:	0802502c 	.word	0x0802502c
 801d8a0:	08025104 	.word	0x08025104
 801d8a4:	abcd330e 	.word	0xabcd330e
 801d8a8:	e66d1234 	.word	0xe66d1234
 801d8ac:	0005deec 	.word	0x0005deec
 801d8b0:	5851f42d 	.word	0x5851f42d
 801d8b4:	4c957f2d 	.word	0x4c957f2d

0801d8b8 <realloc>:
 801d8b8:	4b02      	ldr	r3, [pc, #8]	; (801d8c4 <realloc+0xc>)
 801d8ba:	460a      	mov	r2, r1
 801d8bc:	4601      	mov	r1, r0
 801d8be:	6818      	ldr	r0, [r3, #0]
 801d8c0:	f001 bc2e 	b.w	801f120 <_realloc_r>
 801d8c4:	20000104 	.word	0x20000104

0801d8c8 <_sbrk_r>:
 801d8c8:	b538      	push	{r3, r4, r5, lr}
 801d8ca:	4d06      	ldr	r5, [pc, #24]	; (801d8e4 <_sbrk_r+0x1c>)
 801d8cc:	2300      	movs	r3, #0
 801d8ce:	4604      	mov	r4, r0
 801d8d0:	4608      	mov	r0, r1
 801d8d2:	602b      	str	r3, [r5, #0]
 801d8d4:	f7e3 fada 	bl	8000e8c <_sbrk>
 801d8d8:	1c43      	adds	r3, r0, #1
 801d8da:	d102      	bne.n	801d8e2 <_sbrk_r+0x1a>
 801d8dc:	682b      	ldr	r3, [r5, #0]
 801d8de:	b103      	cbz	r3, 801d8e2 <_sbrk_r+0x1a>
 801d8e0:	6023      	str	r3, [r4, #0]
 801d8e2:	bd38      	pop	{r3, r4, r5, pc}
 801d8e4:	20000d60 	.word	0x20000d60

0801d8e8 <_raise_r>:
 801d8e8:	291f      	cmp	r1, #31
 801d8ea:	b538      	push	{r3, r4, r5, lr}
 801d8ec:	4604      	mov	r4, r0
 801d8ee:	460d      	mov	r5, r1
 801d8f0:	d904      	bls.n	801d8fc <_raise_r+0x14>
 801d8f2:	2316      	movs	r3, #22
 801d8f4:	6003      	str	r3, [r0, #0]
 801d8f6:	f04f 30ff 	mov.w	r0, #4294967295
 801d8fa:	bd38      	pop	{r3, r4, r5, pc}
 801d8fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d8fe:	b112      	cbz	r2, 801d906 <_raise_r+0x1e>
 801d900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d904:	b94b      	cbnz	r3, 801d91a <_raise_r+0x32>
 801d906:	4620      	mov	r0, r4
 801d908:	f000 f830 	bl	801d96c <_getpid_r>
 801d90c:	462a      	mov	r2, r5
 801d90e:	4601      	mov	r1, r0
 801d910:	4620      	mov	r0, r4
 801d912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d916:	f000 b817 	b.w	801d948 <_kill_r>
 801d91a:	2b01      	cmp	r3, #1
 801d91c:	d00a      	beq.n	801d934 <_raise_r+0x4c>
 801d91e:	1c59      	adds	r1, r3, #1
 801d920:	d103      	bne.n	801d92a <_raise_r+0x42>
 801d922:	2316      	movs	r3, #22
 801d924:	6003      	str	r3, [r0, #0]
 801d926:	2001      	movs	r0, #1
 801d928:	e7e7      	b.n	801d8fa <_raise_r+0x12>
 801d92a:	2400      	movs	r4, #0
 801d92c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d930:	4628      	mov	r0, r5
 801d932:	4798      	blx	r3
 801d934:	2000      	movs	r0, #0
 801d936:	e7e0      	b.n	801d8fa <_raise_r+0x12>

0801d938 <raise>:
 801d938:	4b02      	ldr	r3, [pc, #8]	; (801d944 <raise+0xc>)
 801d93a:	4601      	mov	r1, r0
 801d93c:	6818      	ldr	r0, [r3, #0]
 801d93e:	f7ff bfd3 	b.w	801d8e8 <_raise_r>
 801d942:	bf00      	nop
 801d944:	20000104 	.word	0x20000104

0801d948 <_kill_r>:
 801d948:	b538      	push	{r3, r4, r5, lr}
 801d94a:	4d07      	ldr	r5, [pc, #28]	; (801d968 <_kill_r+0x20>)
 801d94c:	2300      	movs	r3, #0
 801d94e:	4604      	mov	r4, r0
 801d950:	4608      	mov	r0, r1
 801d952:	4611      	mov	r1, r2
 801d954:	602b      	str	r3, [r5, #0]
 801d956:	f7e3 fa04 	bl	8000d62 <_kill>
 801d95a:	1c43      	adds	r3, r0, #1
 801d95c:	d102      	bne.n	801d964 <_kill_r+0x1c>
 801d95e:	682b      	ldr	r3, [r5, #0]
 801d960:	b103      	cbz	r3, 801d964 <_kill_r+0x1c>
 801d962:	6023      	str	r3, [r4, #0]
 801d964:	bd38      	pop	{r3, r4, r5, pc}
 801d966:	bf00      	nop
 801d968:	20000d60 	.word	0x20000d60

0801d96c <_getpid_r>:
 801d96c:	f7e3 b9f1 	b.w	8000d52 <_getpid>

0801d970 <__sread>:
 801d970:	b510      	push	{r4, lr}
 801d972:	460c      	mov	r4, r1
 801d974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d978:	f002 f88a 	bl	801fa90 <_read_r>
 801d97c:	2800      	cmp	r0, #0
 801d97e:	bfab      	itete	ge
 801d980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d982:	89a3      	ldrhlt	r3, [r4, #12]
 801d984:	181b      	addge	r3, r3, r0
 801d986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d98a:	bfac      	ite	ge
 801d98c:	6563      	strge	r3, [r4, #84]	; 0x54
 801d98e:	81a3      	strhlt	r3, [r4, #12]
 801d990:	bd10      	pop	{r4, pc}

0801d992 <__seofread>:
 801d992:	2000      	movs	r0, #0
 801d994:	4770      	bx	lr

0801d996 <__swrite>:
 801d996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d99a:	461f      	mov	r7, r3
 801d99c:	898b      	ldrh	r3, [r1, #12]
 801d99e:	05db      	lsls	r3, r3, #23
 801d9a0:	4605      	mov	r5, r0
 801d9a2:	460c      	mov	r4, r1
 801d9a4:	4616      	mov	r6, r2
 801d9a6:	d505      	bpl.n	801d9b4 <__swrite+0x1e>
 801d9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9ac:	2302      	movs	r3, #2
 801d9ae:	2200      	movs	r2, #0
 801d9b0:	f001 fb86 	bl	801f0c0 <_lseek_r>
 801d9b4:	89a3      	ldrh	r3, [r4, #12]
 801d9b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d9ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d9be:	81a3      	strh	r3, [r4, #12]
 801d9c0:	4632      	mov	r2, r6
 801d9c2:	463b      	mov	r3, r7
 801d9c4:	4628      	mov	r0, r5
 801d9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d9ca:	f001 b8ef 	b.w	801ebac <_write_r>

0801d9ce <__sseek>:
 801d9ce:	b510      	push	{r4, lr}
 801d9d0:	460c      	mov	r4, r1
 801d9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9d6:	f001 fb73 	bl	801f0c0 <_lseek_r>
 801d9da:	1c43      	adds	r3, r0, #1
 801d9dc:	89a3      	ldrh	r3, [r4, #12]
 801d9de:	bf15      	itete	ne
 801d9e0:	6560      	strne	r0, [r4, #84]	; 0x54
 801d9e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d9e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d9ea:	81a3      	strheq	r3, [r4, #12]
 801d9ec:	bf18      	it	ne
 801d9ee:	81a3      	strhne	r3, [r4, #12]
 801d9f0:	bd10      	pop	{r4, pc}

0801d9f2 <__sclose>:
 801d9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9f6:	f001 b9dd 	b.w	801edb4 <_close_r>
	...

0801d9fc <iso_year_adjust>:
 801d9fc:	6941      	ldr	r1, [r0, #20]
 801d9fe:	2900      	cmp	r1, #0
 801da00:	f240 736c 	movw	r3, #1900	; 0x76c
 801da04:	bfa8      	it	ge
 801da06:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 801da0a:	18ca      	adds	r2, r1, r3
 801da0c:	078b      	lsls	r3, r1, #30
 801da0e:	d105      	bne.n	801da1c <iso_year_adjust+0x20>
 801da10:	2164      	movs	r1, #100	; 0x64
 801da12:	fb92 f3f1 	sdiv	r3, r2, r1
 801da16:	fb01 2313 	mls	r3, r1, r3, r2
 801da1a:	b9db      	cbnz	r3, 801da54 <iso_year_adjust+0x58>
 801da1c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801da20:	fb92 f3f1 	sdiv	r3, r2, r1
 801da24:	fb01 2313 	mls	r3, r1, r3, r2
 801da28:	fab3 f383 	clz	r3, r3
 801da2c:	095b      	lsrs	r3, r3, #5
 801da2e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801da32:	0040      	lsls	r0, r0, #1
 801da34:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801da38:	4418      	add	r0, r3
 801da3a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801da3e:	4298      	cmp	r0, r3
 801da40:	d03a      	beq.n	801dab8 <iso_year_adjust+0xbc>
 801da42:	dc21      	bgt.n	801da88 <iso_year_adjust+0x8c>
 801da44:	2801      	cmp	r0, #1
 801da46:	dc1a      	bgt.n	801da7e <iso_year_adjust+0x82>
 801da48:	2800      	cmp	r0, #0
 801da4a:	bfb4      	ite	lt
 801da4c:	2000      	movlt	r0, #0
 801da4e:	f04f 30ff 	movge.w	r0, #4294967295
 801da52:	4770      	bx	lr
 801da54:	2301      	movs	r3, #1
 801da56:	e7ea      	b.n	801da2e <iso_year_adjust+0x32>
 801da58:	2817      	cmp	r0, #23
 801da5a:	d813      	bhi.n	801da84 <iso_year_adjust+0x88>
 801da5c:	e8df f000 	tbb	[pc, r0]
 801da60:	0c0c0c0c 	.word	0x0c0c0c0c
 801da64:	0c0c1212 	.word	0x0c0c1212
 801da68:	12121212 	.word	0x12121212
 801da6c:	12121212 	.word	0x12121212
 801da70:	0c0c1212 	.word	0x0c0c1212
 801da74:	0c0c1212 	.word	0x0c0c1212
 801da78:	f04f 30ff 	mov.w	r0, #4294967295
 801da7c:	4770      	bx	lr
 801da7e:	380a      	subs	r0, #10
 801da80:	2817      	cmp	r0, #23
 801da82:	d9e9      	bls.n	801da58 <iso_year_adjust+0x5c>
 801da84:	2000      	movs	r0, #0
 801da86:	4770      	bx	lr
 801da88:	f241 63b4 	movw	r3, #5812	; 0x16b4
 801da8c:	4298      	cmp	r0, r3
 801da8e:	dc06      	bgt.n	801da9e <iso_year_adjust+0xa2>
 801da90:	f241 63b1 	movw	r3, #5809	; 0x16b1
 801da94:	4298      	cmp	r0, r3
 801da96:	bfd4      	ite	le
 801da98:	2000      	movle	r0, #0
 801da9a:	2001      	movgt	r0, #1
 801da9c:	4770      	bx	lr
 801da9e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801daa2:	3802      	subs	r0, #2
 801daa4:	2815      	cmp	r0, #21
 801daa6:	d8ed      	bhi.n	801da84 <iso_year_adjust+0x88>
 801daa8:	2301      	movs	r3, #1
 801daaa:	4083      	lsls	r3, r0
 801daac:	4803      	ldr	r0, [pc, #12]	; (801dabc <iso_year_adjust+0xc0>)
 801daae:	4018      	ands	r0, r3
 801dab0:	3800      	subs	r0, #0
 801dab2:	bf18      	it	ne
 801dab4:	2001      	movne	r0, #1
 801dab6:	4770      	bx	lr
 801dab8:	2001      	movs	r0, #1
 801daba:	4770      	bx	lr
 801dabc:	002a001f 	.word	0x002a001f

0801dac0 <__strftime>:
 801dac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dac4:	b091      	sub	sp, #68	; 0x44
 801dac6:	461d      	mov	r5, r3
 801dac8:	2300      	movs	r3, #0
 801daca:	4681      	mov	r9, r0
 801dacc:	4688      	mov	r8, r1
 801dace:	9304      	str	r3, [sp, #16]
 801dad0:	461c      	mov	r4, r3
 801dad2:	7813      	ldrb	r3, [r2, #0]
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	f000 84d1 	beq.w	801e47c <__strftime+0x9bc>
 801dada:	2b25      	cmp	r3, #37	; 0x25
 801dadc:	d11b      	bne.n	801db16 <__strftime+0x56>
 801dade:	7857      	ldrb	r7, [r2, #1]
 801dae0:	2f30      	cmp	r7, #48	; 0x30
 801dae2:	d024      	beq.n	801db2e <__strftime+0x6e>
 801dae4:	2f2b      	cmp	r7, #43	; 0x2b
 801dae6:	d022      	beq.n	801db2e <__strftime+0x6e>
 801dae8:	f102 0b01 	add.w	fp, r2, #1
 801daec:	2700      	movs	r7, #0
 801daee:	f89b 3000 	ldrb.w	r3, [fp]
 801daf2:	3b31      	subs	r3, #49	; 0x31
 801daf4:	2b08      	cmp	r3, #8
 801daf6:	d81d      	bhi.n	801db34 <__strftime+0x74>
 801daf8:	4658      	mov	r0, fp
 801dafa:	220a      	movs	r2, #10
 801dafc:	a908      	add	r1, sp, #32
 801dafe:	f000 fd6f 	bl	801e5e0 <strtoul>
 801db02:	f8dd b020 	ldr.w	fp, [sp, #32]
 801db06:	4606      	mov	r6, r0
 801db08:	f89b 3000 	ldrb.w	r3, [fp]
 801db0c:	2b45      	cmp	r3, #69	; 0x45
 801db0e:	d113      	bne.n	801db38 <__strftime+0x78>
 801db10:	f10b 0b01 	add.w	fp, fp, #1
 801db14:	e012      	b.n	801db3c <__strftime+0x7c>
 801db16:	f108 31ff 	add.w	r1, r8, #4294967295
 801db1a:	42a1      	cmp	r1, r4
 801db1c:	d802      	bhi.n	801db24 <__strftime+0x64>
 801db1e:	2400      	movs	r4, #0
 801db20:	f000 bcb2 	b.w	801e488 <__strftime+0x9c8>
 801db24:	f809 3004 	strb.w	r3, [r9, r4]
 801db28:	3201      	adds	r2, #1
 801db2a:	3401      	adds	r4, #1
 801db2c:	e7d1      	b.n	801dad2 <__strftime+0x12>
 801db2e:	f102 0b02 	add.w	fp, r2, #2
 801db32:	e7dc      	b.n	801daee <__strftime+0x2e>
 801db34:	2600      	movs	r6, #0
 801db36:	e7e7      	b.n	801db08 <__strftime+0x48>
 801db38:	2b4f      	cmp	r3, #79	; 0x4f
 801db3a:	d0e9      	beq.n	801db10 <__strftime+0x50>
 801db3c:	f89b 0000 	ldrb.w	r0, [fp]
 801db40:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 801db44:	2b55      	cmp	r3, #85	; 0x55
 801db46:	d8ea      	bhi.n	801db1e <__strftime+0x5e>
 801db48:	a201      	add	r2, pc, #4	; (adr r2, 801db50 <__strftime+0x90>)
 801db4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801db4e:	bf00      	nop
 801db50:	0801e46f 	.word	0x0801e46f
 801db54:	0801db1f 	.word	0x0801db1f
 801db58:	0801db1f 	.word	0x0801db1f
 801db5c:	0801db1f 	.word	0x0801db1f
 801db60:	0801db1f 	.word	0x0801db1f
 801db64:	0801db1f 	.word	0x0801db1f
 801db68:	0801db1f 	.word	0x0801db1f
 801db6c:	0801db1f 	.word	0x0801db1f
 801db70:	0801db1f 	.word	0x0801db1f
 801db74:	0801db1f 	.word	0x0801db1f
 801db78:	0801db1f 	.word	0x0801db1f
 801db7c:	0801db1f 	.word	0x0801db1f
 801db80:	0801db1f 	.word	0x0801db1f
 801db84:	0801db1f 	.word	0x0801db1f
 801db88:	0801db1f 	.word	0x0801db1f
 801db8c:	0801db1f 	.word	0x0801db1f
 801db90:	0801db1f 	.word	0x0801db1f
 801db94:	0801db1f 	.word	0x0801db1f
 801db98:	0801db1f 	.word	0x0801db1f
 801db9c:	0801db1f 	.word	0x0801db1f
 801dba0:	0801db1f 	.word	0x0801db1f
 801dba4:	0801db1f 	.word	0x0801db1f
 801dba8:	0801db1f 	.word	0x0801db1f
 801dbac:	0801db1f 	.word	0x0801db1f
 801dbb0:	0801db1f 	.word	0x0801db1f
 801dbb4:	0801db1f 	.word	0x0801db1f
 801dbb8:	0801db1f 	.word	0x0801db1f
 801dbbc:	0801db1f 	.word	0x0801db1f
 801dbc0:	0801dce7 	.word	0x0801dce7
 801dbc4:	0801dd41 	.word	0x0801dd41
 801dbc8:	0801ddb7 	.word	0x0801ddb7
 801dbcc:	0801de51 	.word	0x0801de51
 801dbd0:	0801db1f 	.word	0x0801db1f
 801dbd4:	0801de9d 	.word	0x0801de9d
 801dbd8:	0801df7d 	.word	0x0801df7d
 801dbdc:	0801e07f 	.word	0x0801e07f
 801dbe0:	0801e08d 	.word	0x0801e08d
 801dbe4:	0801db1f 	.word	0x0801db1f
 801dbe8:	0801db1f 	.word	0x0801db1f
 801dbec:	0801db1f 	.word	0x0801db1f
 801dbf0:	0801e0bd 	.word	0x0801e0bd
 801dbf4:	0801db1f 	.word	0x0801db1f
 801dbf8:	0801db1f 	.word	0x0801db1f
 801dbfc:	0801e0d5 	.word	0x0801e0d5
 801dc00:	0801db1f 	.word	0x0801db1f
 801dc04:	0801e123 	.word	0x0801e123
 801dc08:	0801e239 	.word	0x0801e239
 801dc0c:	0801e24b 	.word	0x0801e24b
 801dc10:	0801e2a3 	.word	0x0801e2a3
 801dc14:	0801e2b3 	.word	0x0801e2b3
 801dc18:	0801e329 	.word	0x0801e329
 801dc1c:	0801ddaf 	.word	0x0801ddaf
 801dc20:	0801e35d 	.word	0x0801e35d
 801dc24:	0801e41b 	.word	0x0801e41b
 801dc28:	0801db1f 	.word	0x0801db1f
 801dc2c:	0801db1f 	.word	0x0801db1f
 801dc30:	0801db1f 	.word	0x0801db1f
 801dc34:	0801db1f 	.word	0x0801db1f
 801dc38:	0801db1f 	.word	0x0801db1f
 801dc3c:	0801db1f 	.word	0x0801db1f
 801dc40:	0801dca9 	.word	0x0801dca9
 801dc44:	0801dd15 	.word	0x0801dd15
 801dc48:	0801dd6f 	.word	0x0801dd6f
 801dc4c:	0801de29 	.word	0x0801de29
 801dc50:	0801de29 	.word	0x0801de29
 801dc54:	0801db1f 	.word	0x0801db1f
 801dc58:	0801dee5 	.word	0x0801dee5
 801dc5c:	0801dd15 	.word	0x0801dd15
 801dc60:	0801db1f 	.word	0x0801db1f
 801dc64:	0801e0af 	.word	0x0801e0af
 801dc68:	0801e07f 	.word	0x0801e07f
 801dc6c:	0801e08d 	.word	0x0801e08d
 801dc70:	0801e0b7 	.word	0x0801e0b7
 801dc74:	0801e0c1 	.word	0x0801e0c1
 801dc78:	0801db1f 	.word	0x0801db1f
 801dc7c:	0801e0d5 	.word	0x0801e0d5
 801dc80:	0801db1f 	.word	0x0801db1f
 801dc84:	0801dd9f 	.word	0x0801dd9f
 801dc88:	0801e139 	.word	0x0801e139
 801dc8c:	0801e23d 	.word	0x0801e23d
 801dc90:	0801e285 	.word	0x0801e285
 801dc94:	0801db1f 	.word	0x0801db1f
 801dc98:	0801e319 	.word	0x0801e319
 801dc9c:	0801dda7 	.word	0x0801dda7
 801dca0:	0801e341 	.word	0x0801e341
 801dca4:	0801e3ad 	.word	0x0801e3ad
 801dca8:	69ab      	ldr	r3, [r5, #24]
 801dcaa:	4aa7      	ldr	r2, [pc, #668]	; (801df48 <__strftime+0x488>)
 801dcac:	3318      	adds	r3, #24
 801dcae:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801dcb2:	4630      	mov	r0, r6
 801dcb4:	f7e2 fac2 	bl	800023c <strlen>
 801dcb8:	3e01      	subs	r6, #1
 801dcba:	4420      	add	r0, r4
 801dcbc:	f108 33ff 	add.w	r3, r8, #4294967295
 801dcc0:	42a0      	cmp	r0, r4
 801dcc2:	d107      	bne.n	801dcd4 <__strftime+0x214>
 801dcc4:	f89b 3000 	ldrb.w	r3, [fp]
 801dcc8:	2b00      	cmp	r3, #0
 801dcca:	f000 83d7 	beq.w	801e47c <__strftime+0x9bc>
 801dcce:	f10b 0201 	add.w	r2, fp, #1
 801dcd2:	e6fe      	b.n	801dad2 <__strftime+0x12>
 801dcd4:	42a3      	cmp	r3, r4
 801dcd6:	f67f af22 	bls.w	801db1e <__strftime+0x5e>
 801dcda:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801dcde:	f809 2004 	strb.w	r2, [r9, r4]
 801dce2:	3401      	adds	r4, #1
 801dce4:	e7ec      	b.n	801dcc0 <__strftime+0x200>
 801dce6:	69aa      	ldr	r2, [r5, #24]
 801dce8:	4b97      	ldr	r3, [pc, #604]	; (801df48 <__strftime+0x488>)
 801dcea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801dcee:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 801dcf0:	4630      	mov	r0, r6
 801dcf2:	f7e2 faa3 	bl	800023c <strlen>
 801dcf6:	3e01      	subs	r6, #1
 801dcf8:	4420      	add	r0, r4
 801dcfa:	f108 33ff 	add.w	r3, r8, #4294967295
 801dcfe:	42a0      	cmp	r0, r4
 801dd00:	d0e0      	beq.n	801dcc4 <__strftime+0x204>
 801dd02:	42a3      	cmp	r3, r4
 801dd04:	f67f af0b 	bls.w	801db1e <__strftime+0x5e>
 801dd08:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801dd0c:	f809 2004 	strb.w	r2, [r9, r4]
 801dd10:	3401      	adds	r4, #1
 801dd12:	e7f4      	b.n	801dcfe <__strftime+0x23e>
 801dd14:	4b8c      	ldr	r3, [pc, #560]	; (801df48 <__strftime+0x488>)
 801dd16:	692a      	ldr	r2, [r5, #16]
 801dd18:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801dd1c:	4630      	mov	r0, r6
 801dd1e:	f7e2 fa8d 	bl	800023c <strlen>
 801dd22:	3e01      	subs	r6, #1
 801dd24:	4420      	add	r0, r4
 801dd26:	f108 33ff 	add.w	r3, r8, #4294967295
 801dd2a:	42a0      	cmp	r0, r4
 801dd2c:	d0ca      	beq.n	801dcc4 <__strftime+0x204>
 801dd2e:	42a3      	cmp	r3, r4
 801dd30:	f67f aef5 	bls.w	801db1e <__strftime+0x5e>
 801dd34:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801dd38:	f809 2004 	strb.w	r2, [r9, r4]
 801dd3c:	3401      	adds	r4, #1
 801dd3e:	e7f4      	b.n	801dd2a <__strftime+0x26a>
 801dd40:	692b      	ldr	r3, [r5, #16]
 801dd42:	4a81      	ldr	r2, [pc, #516]	; (801df48 <__strftime+0x488>)
 801dd44:	330c      	adds	r3, #12
 801dd46:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801dd4a:	4630      	mov	r0, r6
 801dd4c:	f7e2 fa76 	bl	800023c <strlen>
 801dd50:	3e01      	subs	r6, #1
 801dd52:	4420      	add	r0, r4
 801dd54:	f108 33ff 	add.w	r3, r8, #4294967295
 801dd58:	42a0      	cmp	r0, r4
 801dd5a:	d0b3      	beq.n	801dcc4 <__strftime+0x204>
 801dd5c:	42a3      	cmp	r3, r4
 801dd5e:	f67f aede 	bls.w	801db1e <__strftime+0x5e>
 801dd62:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801dd66:	f809 2004 	strb.w	r2, [r9, r4]
 801dd6a:	3401      	adds	r4, #1
 801dd6c:	e7f4      	b.n	801dd58 <__strftime+0x298>
 801dd6e:	4b76      	ldr	r3, [pc, #472]	; (801df48 <__strftime+0x488>)
 801dd70:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801dd74:	4630      	mov	r0, r6
 801dd76:	f7e2 fa61 	bl	800023c <strlen>
 801dd7a:	7833      	ldrb	r3, [r6, #0]
 801dd7c:	2b00      	cmp	r3, #0
 801dd7e:	d0a1      	beq.n	801dcc4 <__strftime+0x204>
 801dd80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801dd82:	9300      	str	r3, [sp, #0]
 801dd84:	4632      	mov	r2, r6
 801dd86:	462b      	mov	r3, r5
 801dd88:	eba8 0104 	sub.w	r1, r8, r4
 801dd8c:	eb09 0004 	add.w	r0, r9, r4
 801dd90:	f7ff fe96 	bl	801dac0 <__strftime>
 801dd94:	2800      	cmp	r0, #0
 801dd96:	f77f aec2 	ble.w	801db1e <__strftime+0x5e>
 801dd9a:	4404      	add	r4, r0
 801dd9c:	e792      	b.n	801dcc4 <__strftime+0x204>
 801dd9e:	4b6a      	ldr	r3, [pc, #424]	; (801df48 <__strftime+0x488>)
 801dda0:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 801dda4:	e7e6      	b.n	801dd74 <__strftime+0x2b4>
 801dda6:	4b68      	ldr	r3, [pc, #416]	; (801df48 <__strftime+0x488>)
 801dda8:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 801ddac:	e7e2      	b.n	801dd74 <__strftime+0x2b4>
 801ddae:	4b66      	ldr	r3, [pc, #408]	; (801df48 <__strftime+0x488>)
 801ddb0:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 801ddb4:	e7de      	b.n	801dd74 <__strftime+0x2b4>
 801ddb6:	4965      	ldr	r1, [pc, #404]	; (801df4c <__strftime+0x48c>)
 801ddb8:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801ddbc:	458a      	cmp	sl, r1
 801ddbe:	bfac      	ite	ge
 801ddc0:	2100      	movge	r1, #0
 801ddc2:	2101      	movlt	r1, #1
 801ddc4:	f1ba 0f00 	cmp.w	sl, #0
 801ddc8:	db0e      	blt.n	801dde8 <__strftime+0x328>
 801ddca:	2064      	movs	r0, #100	; 0x64
 801ddcc:	fb9a f0f0 	sdiv	r0, sl, r0
 801ddd0:	3013      	adds	r0, #19
 801ddd2:	b19f      	cbz	r7, 801ddfc <__strftime+0x33c>
 801ddd4:	2863      	cmp	r0, #99	; 0x63
 801ddd6:	dd25      	ble.n	801de24 <__strftime+0x364>
 801ddd8:	4a5d      	ldr	r2, [pc, #372]	; (801df50 <__strftime+0x490>)
 801ddda:	4b5e      	ldr	r3, [pc, #376]	; (801df54 <__strftime+0x494>)
 801dddc:	2f2b      	cmp	r7, #43	; 0x2b
 801ddde:	bf14      	ite	ne
 801dde0:	4617      	movne	r7, r2
 801dde2:	461f      	moveq	r7, r3
 801dde4:	4a5c      	ldr	r2, [pc, #368]	; (801df58 <__strftime+0x498>)
 801dde6:	e00b      	b.n	801de00 <__strftime+0x340>
 801dde8:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 801ddec:	9105      	str	r1, [sp, #20]
 801ddee:	f000 ffbf 	bl	801ed70 <abs>
 801ddf2:	2364      	movs	r3, #100	; 0x64
 801ddf4:	9905      	ldr	r1, [sp, #20]
 801ddf6:	fb90 f0f3 	sdiv	r0, r0, r3
 801ddfa:	e7ea      	b.n	801ddd2 <__strftime+0x312>
 801ddfc:	4f54      	ldr	r7, [pc, #336]	; (801df50 <__strftime+0x490>)
 801ddfe:	4a57      	ldr	r2, [pc, #348]	; (801df5c <__strftime+0x49c>)
 801de00:	4b57      	ldr	r3, [pc, #348]	; (801df60 <__strftime+0x4a0>)
 801de02:	9001      	str	r0, [sp, #4]
 801de04:	2e02      	cmp	r6, #2
 801de06:	bf2c      	ite	cs
 801de08:	ebc1 0606 	rsbcs	r6, r1, r6
 801de0c:	f1c1 0602 	rsbcc	r6, r1, #2
 801de10:	494e      	ldr	r1, [pc, #312]	; (801df4c <__strftime+0x48c>)
 801de12:	9600      	str	r6, [sp, #0]
 801de14:	458a      	cmp	sl, r1
 801de16:	bfa8      	it	ge
 801de18:	463b      	movge	r3, r7
 801de1a:	eba8 0104 	sub.w	r1, r8, r4
 801de1e:	eb09 0004 	add.w	r0, r9, r4
 801de22:	e02a      	b.n	801de7a <__strftime+0x3ba>
 801de24:	4f4a      	ldr	r7, [pc, #296]	; (801df50 <__strftime+0x490>)
 801de26:	e7dd      	b.n	801dde4 <__strftime+0x324>
 801de28:	494e      	ldr	r1, [pc, #312]	; (801df64 <__strftime+0x4a4>)
 801de2a:	4a4f      	ldr	r2, [pc, #316]	; (801df68 <__strftime+0x4a8>)
 801de2c:	68eb      	ldr	r3, [r5, #12]
 801de2e:	2864      	cmp	r0, #100	; 0x64
 801de30:	bf08      	it	eq
 801de32:	460a      	moveq	r2, r1
 801de34:	eba8 0104 	sub.w	r1, r8, r4
 801de38:	eb09 0004 	add.w	r0, r9, r4
 801de3c:	f001 fe3a 	bl	801fab4 <sniprintf>
 801de40:	2800      	cmp	r0, #0
 801de42:	f6ff ae6c 	blt.w	801db1e <__strftime+0x5e>
 801de46:	4404      	add	r4, r0
 801de48:	45a0      	cmp	r8, r4
 801de4a:	f63f af3b 	bhi.w	801dcc4 <__strftime+0x204>
 801de4e:	e666      	b.n	801db1e <__strftime+0x5e>
 801de50:	6968      	ldr	r0, [r5, #20]
 801de52:	692b      	ldr	r3, [r5, #16]
 801de54:	68ef      	ldr	r7, [r5, #12]
 801de56:	2800      	cmp	r0, #0
 801de58:	eb09 0604 	add.w	r6, r9, r4
 801de5c:	eba8 0104 	sub.w	r1, r8, r4
 801de60:	f103 0301 	add.w	r3, r3, #1
 801de64:	db0c      	blt.n	801de80 <__strftime+0x3c0>
 801de66:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801de6a:	fb90 f2fc 	sdiv	r2, r0, ip
 801de6e:	fb0c 0212 	mls	r2, ip, r2, r0
 801de72:	e9cd 7200 	strd	r7, r2, [sp]
 801de76:	4a3d      	ldr	r2, [pc, #244]	; (801df6c <__strftime+0x4ac>)
 801de78:	4630      	mov	r0, r6
 801de7a:	f001 fe1b 	bl	801fab4 <sniprintf>
 801de7e:	e7df      	b.n	801de40 <__strftime+0x380>
 801de80:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801de84:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801de88:	f000 ff72 	bl	801ed70 <abs>
 801de8c:	2264      	movs	r2, #100	; 0x64
 801de8e:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 801de92:	fb90 fcf2 	sdiv	ip, r0, r2
 801de96:	fb0c 0212 	mls	r2, ip, r2, r0
 801de9a:	e7ea      	b.n	801de72 <__strftime+0x3b2>
 801de9c:	2325      	movs	r3, #37	; 0x25
 801de9e:	f88d 3020 	strb.w	r3, [sp, #32]
 801dea2:	b187      	cbz	r7, 801dec6 <__strftime+0x406>
 801dea4:	2e06      	cmp	r6, #6
 801dea6:	bf38      	it	cc
 801dea8:	2606      	movcc	r6, #6
 801deaa:	1fb3      	subs	r3, r6, #6
 801deac:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 801deb0:	d10c      	bne.n	801decc <__strftime+0x40c>
 801deb2:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801deb6:	492e      	ldr	r1, [pc, #184]	; (801df70 <__strftime+0x4b0>)
 801deb8:	f001 fe5c 	bl	801fb74 <strcpy>
 801debc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801debe:	9300      	str	r3, [sp, #0]
 801dec0:	aa08      	add	r2, sp, #32
 801dec2:	462b      	mov	r3, r5
 801dec4:	e760      	b.n	801dd88 <__strftime+0x2c8>
 801dec6:	272b      	movs	r7, #43	; 0x2b
 801dec8:	260a      	movs	r6, #10
 801deca:	e7ee      	b.n	801deaa <__strftime+0x3ea>
 801decc:	4a29      	ldr	r2, [pc, #164]	; (801df74 <__strftime+0x4b4>)
 801dece:	211e      	movs	r1, #30
 801ded0:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801ded4:	f001 fdee 	bl	801fab4 <sniprintf>
 801ded8:	2800      	cmp	r0, #0
 801deda:	ddea      	ble.n	801deb2 <__strftime+0x3f2>
 801dedc:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 801dee0:	4418      	add	r0, r3
 801dee2:	e7e8      	b.n	801deb6 <__strftime+0x3f6>
 801dee4:	4628      	mov	r0, r5
 801dee6:	f7ff fd89 	bl	801d9fc <iso_year_adjust>
 801deea:	4606      	mov	r6, r0
 801deec:	6968      	ldr	r0, [r5, #20]
 801deee:	2800      	cmp	r0, #0
 801def0:	db11      	blt.n	801df16 <__strftime+0x456>
 801def2:	2264      	movs	r2, #100	; 0x64
 801def4:	fb90 f3f2 	sdiv	r3, r0, r2
 801def8:	fb02 0313 	mls	r3, r2, r3, r0
 801defc:	441e      	add	r6, r3
 801defe:	2364      	movs	r3, #100	; 0x64
 801df00:	fb96 f0f3 	sdiv	r0, r6, r3
 801df04:	fb03 6610 	mls	r6, r3, r0, r6
 801df08:	441e      	add	r6, r3
 801df0a:	fbb6 f2f3 	udiv	r2, r6, r3
 801df0e:	fb03 6312 	mls	r3, r3, r2, r6
 801df12:	4a14      	ldr	r2, [pc, #80]	; (801df64 <__strftime+0x4a4>)
 801df14:	e78e      	b.n	801de34 <__strftime+0x374>
 801df16:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801df1a:	f000 ff29 	bl	801ed70 <abs>
 801df1e:	2364      	movs	r3, #100	; 0x64
 801df20:	2e00      	cmp	r6, #0
 801df22:	fb90 f2f3 	sdiv	r2, r0, r3
 801df26:	fb02 0313 	mls	r3, r2, r3, r0
 801df2a:	da05      	bge.n	801df38 <__strftime+0x478>
 801df2c:	6969      	ldr	r1, [r5, #20]
 801df2e:	4a12      	ldr	r2, [pc, #72]	; (801df78 <__strftime+0x4b8>)
 801df30:	4291      	cmp	r1, r2
 801df32:	bfb8      	it	lt
 801df34:	2601      	movlt	r6, #1
 801df36:	e7e1      	b.n	801defc <__strftime+0x43c>
 801df38:	d0e0      	beq.n	801defc <__strftime+0x43c>
 801df3a:	6969      	ldr	r1, [r5, #20]
 801df3c:	4a03      	ldr	r2, [pc, #12]	; (801df4c <__strftime+0x48c>)
 801df3e:	4291      	cmp	r1, r2
 801df40:	bfb8      	it	lt
 801df42:	f04f 36ff 	movlt.w	r6, #4294967295
 801df46:	e7d9      	b.n	801defc <__strftime+0x43c>
 801df48:	080252e8 	.word	0x080252e8
 801df4c:	fffff894 	.word	0xfffff894
 801df50:	0802545b 	.word	0x0802545b
 801df54:	08025172 	.word	0x08025172
 801df58:	0802516a 	.word	0x0802516a
 801df5c:	08025163 	.word	0x08025163
 801df60:	0802559b 	.word	0x0802559b
 801df64:	08025182 	.word	0x08025182
 801df68:	08025174 	.word	0x08025174
 801df6c:	08025178 	.word	0x08025178
 801df70:	0802518b 	.word	0x0802518b
 801df74:	08025187 	.word	0x08025187
 801df78:	fffff895 	.word	0xfffff895
 801df7c:	4bb6      	ldr	r3, [pc, #728]	; (801e258 <__strftime+0x798>)
 801df7e:	6969      	ldr	r1, [r5, #20]
 801df80:	4299      	cmp	r1, r3
 801df82:	bfac      	ite	ge
 801df84:	2300      	movge	r3, #0
 801df86:	2301      	movlt	r3, #1
 801df88:	4628      	mov	r0, r5
 801df8a:	e9cd 3105 	strd	r3, r1, [sp, #20]
 801df8e:	f7ff fd35 	bl	801d9fc <iso_year_adjust>
 801df92:	9906      	ldr	r1, [sp, #24]
 801df94:	2900      	cmp	r1, #0
 801df96:	4682      	mov	sl, r0
 801df98:	db27      	blt.n	801dfea <__strftime+0x52a>
 801df9a:	2264      	movs	r2, #100	; 0x64
 801df9c:	fb91 f2f2 	sdiv	r2, r1, r2
 801dfa0:	3213      	adds	r2, #19
 801dfa2:	6968      	ldr	r0, [r5, #20]
 801dfa4:	2800      	cmp	r0, #0
 801dfa6:	db2b      	blt.n	801e000 <__strftime+0x540>
 801dfa8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801dfac:	fb90 fefc 	sdiv	lr, r0, ip
 801dfb0:	fb0c 001e 	mls	r0, ip, lr, r0
 801dfb4:	f1ba 0f00 	cmp.w	sl, #0
 801dfb8:	da31      	bge.n	801e01e <__strftime+0x55e>
 801dfba:	6969      	ldr	r1, [r5, #20]
 801dfbc:	4ba7      	ldr	r3, [pc, #668]	; (801e25c <__strftime+0x79c>)
 801dfbe:	4299      	cmp	r1, r3
 801dfc0:	db38      	blt.n	801e034 <__strftime+0x574>
 801dfc2:	eb0a 0300 	add.w	r3, sl, r0
 801dfc6:	1c59      	adds	r1, r3, #1
 801dfc8:	d139      	bne.n	801e03e <__strftime+0x57e>
 801dfca:	3a01      	subs	r2, #1
 801dfcc:	2363      	movs	r3, #99	; 0x63
 801dfce:	2064      	movs	r0, #100	; 0x64
 801dfd0:	fb00 3202 	mla	r2, r0, r2, r3
 801dfd4:	9b05      	ldr	r3, [sp, #20]
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	d036      	beq.n	801e048 <__strftime+0x588>
 801dfda:	232d      	movs	r3, #45	; 0x2d
 801dfdc:	f88d 3020 	strb.w	r3, [sp, #32]
 801dfe0:	b106      	cbz	r6, 801dfe4 <__strftime+0x524>
 801dfe2:	3e01      	subs	r6, #1
 801dfe4:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801dfe8:	e038      	b.n	801e05c <__strftime+0x59c>
 801dfea:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801dfee:	9106      	str	r1, [sp, #24]
 801dff0:	f000 febe 	bl	801ed70 <abs>
 801dff4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801dff8:	9906      	ldr	r1, [sp, #24]
 801dffa:	fb90 f2fc 	sdiv	r2, r0, ip
 801dffe:	e7d0      	b.n	801dfa2 <__strftime+0x4e2>
 801e000:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801e004:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801e008:	f000 feb2 	bl	801ed70 <abs>
 801e00c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801e010:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801e014:	fb90 fefc 	sdiv	lr, r0, ip
 801e018:	fb0e 001c 	mls	r0, lr, ip, r0
 801e01c:	e7ca      	b.n	801dfb4 <__strftime+0x4f4>
 801e01e:	d0d0      	beq.n	801dfc2 <__strftime+0x502>
 801e020:	4b8d      	ldr	r3, [pc, #564]	; (801e258 <__strftime+0x798>)
 801e022:	4299      	cmp	r1, r3
 801e024:	bfb4      	ite	lt
 801e026:	2301      	movlt	r3, #1
 801e028:	2300      	movge	r3, #0
 801e02a:	9305      	str	r3, [sp, #20]
 801e02c:	bfb8      	it	lt
 801e02e:	f04f 3aff 	movlt.w	sl, #4294967295
 801e032:	e7c6      	b.n	801dfc2 <__strftime+0x502>
 801e034:	f04f 0a01 	mov.w	sl, #1
 801e038:	f8cd a014 	str.w	sl, [sp, #20]
 801e03c:	e7c1      	b.n	801dfc2 <__strftime+0x502>
 801e03e:	2b64      	cmp	r3, #100	; 0x64
 801e040:	bf04      	itt	eq
 801e042:	3201      	addeq	r2, #1
 801e044:	2300      	moveq	r3, #0
 801e046:	e7c2      	b.n	801dfce <__strftime+0x50e>
 801e048:	2f2b      	cmp	r7, #43	; 0x2b
 801e04a:	d106      	bne.n	801e05a <__strftime+0x59a>
 801e04c:	f242 730f 	movw	r3, #9999	; 0x270f
 801e050:	429a      	cmp	r2, r3
 801e052:	d902      	bls.n	801e05a <__strftime+0x59a>
 801e054:	f88d 7020 	strb.w	r7, [sp, #32]
 801e058:	e7c2      	b.n	801dfe0 <__strftime+0x520>
 801e05a:	ab08      	add	r3, sp, #32
 801e05c:	2125      	movs	r1, #37	; 0x25
 801e05e:	7019      	strb	r1, [r3, #0]
 801e060:	b94f      	cbnz	r7, 801e076 <__strftime+0x5b6>
 801e062:	1c58      	adds	r0, r3, #1
 801e064:	497e      	ldr	r1, [pc, #504]	; (801e260 <__strftime+0x7a0>)
 801e066:	9205      	str	r2, [sp, #20]
 801e068:	f001 fd84 	bl	801fb74 <strcpy>
 801e06c:	9a05      	ldr	r2, [sp, #20]
 801e06e:	9200      	str	r2, [sp, #0]
 801e070:	4633      	mov	r3, r6
 801e072:	aa08      	add	r2, sp, #32
 801e074:	e059      	b.n	801e12a <__strftime+0x66a>
 801e076:	2130      	movs	r1, #48	; 0x30
 801e078:	1c98      	adds	r0, r3, #2
 801e07a:	7059      	strb	r1, [r3, #1]
 801e07c:	e7f2      	b.n	801e064 <__strftime+0x5a4>
 801e07e:	4979      	ldr	r1, [pc, #484]	; (801e264 <__strftime+0x7a4>)
 801e080:	4a79      	ldr	r2, [pc, #484]	; (801e268 <__strftime+0x7a8>)
 801e082:	68ab      	ldr	r3, [r5, #8]
 801e084:	286b      	cmp	r0, #107	; 0x6b
 801e086:	bf08      	it	eq
 801e088:	460a      	moveq	r2, r1
 801e08a:	e6d3      	b.n	801de34 <__strftime+0x374>
 801e08c:	68ab      	ldr	r3, [r5, #8]
 801e08e:	b163      	cbz	r3, 801e0aa <__strftime+0x5ea>
 801e090:	2b0c      	cmp	r3, #12
 801e092:	d004      	beq.n	801e09e <__strftime+0x5de>
 801e094:	210c      	movs	r1, #12
 801e096:	fb93 f2f1 	sdiv	r2, r3, r1
 801e09a:	fb01 3312 	mls	r3, r1, r2, r3
 801e09e:	4972      	ldr	r1, [pc, #456]	; (801e268 <__strftime+0x7a8>)
 801e0a0:	4a70      	ldr	r2, [pc, #448]	; (801e264 <__strftime+0x7a4>)
 801e0a2:	2849      	cmp	r0, #73	; 0x49
 801e0a4:	bf08      	it	eq
 801e0a6:	460a      	moveq	r2, r1
 801e0a8:	e6c4      	b.n	801de34 <__strftime+0x374>
 801e0aa:	230c      	movs	r3, #12
 801e0ac:	e7f7      	b.n	801e09e <__strftime+0x5de>
 801e0ae:	69eb      	ldr	r3, [r5, #28]
 801e0b0:	4a6e      	ldr	r2, [pc, #440]	; (801e26c <__strftime+0x7ac>)
 801e0b2:	3301      	adds	r3, #1
 801e0b4:	e6be      	b.n	801de34 <__strftime+0x374>
 801e0b6:	692b      	ldr	r3, [r5, #16]
 801e0b8:	3301      	adds	r3, #1
 801e0ba:	e72a      	b.n	801df12 <__strftime+0x452>
 801e0bc:	686b      	ldr	r3, [r5, #4]
 801e0be:	e728      	b.n	801df12 <__strftime+0x452>
 801e0c0:	f108 33ff 	add.w	r3, r8, #4294967295
 801e0c4:	42a3      	cmp	r3, r4
 801e0c6:	f67f ad2a 	bls.w	801db1e <__strftime+0x5e>
 801e0ca:	230a      	movs	r3, #10
 801e0cc:	f809 3004 	strb.w	r3, [r9, r4]
 801e0d0:	3401      	adds	r4, #1
 801e0d2:	e5f7      	b.n	801dcc4 <__strftime+0x204>
 801e0d4:	68ab      	ldr	r3, [r5, #8]
 801e0d6:	2b0b      	cmp	r3, #11
 801e0d8:	bfcc      	ite	gt
 801e0da:	22a4      	movgt	r2, #164	; 0xa4
 801e0dc:	22a0      	movle	r2, #160	; 0xa0
 801e0de:	4b64      	ldr	r3, [pc, #400]	; (801e270 <__strftime+0x7b0>)
 801e0e0:	4413      	add	r3, r2
 801e0e2:	685e      	ldr	r6, [r3, #4]
 801e0e4:	4630      	mov	r0, r6
 801e0e6:	f7e2 f8a9 	bl	800023c <strlen>
 801e0ea:	1e72      	subs	r2, r6, #1
 801e0ec:	4420      	add	r0, r4
 801e0ee:	f108 36ff 	add.w	r6, r8, #4294967295
 801e0f2:	42a0      	cmp	r0, r4
 801e0f4:	f43f ade6 	beq.w	801dcc4 <__strftime+0x204>
 801e0f8:	42a6      	cmp	r6, r4
 801e0fa:	f67f ad10 	bls.w	801db1e <__strftime+0x5e>
 801e0fe:	f89b 1000 	ldrb.w	r1, [fp]
 801e102:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801e106:	2950      	cmp	r1, #80	; 0x50
 801e108:	d107      	bne.n	801e11a <__strftime+0x65a>
 801e10a:	495a      	ldr	r1, [pc, #360]	; (801e274 <__strftime+0x7b4>)
 801e10c:	5cc9      	ldrb	r1, [r1, r3]
 801e10e:	f001 0103 	and.w	r1, r1, #3
 801e112:	2901      	cmp	r1, #1
 801e114:	bf08      	it	eq
 801e116:	3320      	addeq	r3, #32
 801e118:	b2db      	uxtb	r3, r3
 801e11a:	f809 3004 	strb.w	r3, [r9, r4]
 801e11e:	3401      	adds	r4, #1
 801e120:	e7e7      	b.n	801e0f2 <__strftime+0x632>
 801e122:	686b      	ldr	r3, [r5, #4]
 801e124:	9300      	str	r3, [sp, #0]
 801e126:	4a54      	ldr	r2, [pc, #336]	; (801e278 <__strftime+0x7b8>)
 801e128:	68ab      	ldr	r3, [r5, #8]
 801e12a:	eba8 0104 	sub.w	r1, r8, r4
 801e12e:	eb09 0004 	add.w	r0, r9, r4
 801e132:	f001 fcbf 	bl	801fab4 <sniprintf>
 801e136:	e683      	b.n	801de40 <__strftime+0x380>
 801e138:	6a2b      	ldr	r3, [r5, #32]
 801e13a:	2b00      	cmp	r3, #0
 801e13c:	db79      	blt.n	801e232 <__strftime+0x772>
 801e13e:	f000 fb1b 	bl	801e778 <__tz_lock>
 801e142:	9b04      	ldr	r3, [sp, #16]
 801e144:	b90b      	cbnz	r3, 801e14a <__strftime+0x68a>
 801e146:	f000 fb23 	bl	801e790 <_tzset_unlocked>
 801e14a:	f000 fef1 	bl	801ef30 <__gettzinfo>
 801e14e:	6a2b      	ldr	r3, [r5, #32]
 801e150:	2b00      	cmp	r3, #0
 801e152:	bfcc      	ite	gt
 801e154:	2350      	movgt	r3, #80	; 0x50
 801e156:	2328      	movle	r3, #40	; 0x28
 801e158:	58c3      	ldr	r3, [r0, r3]
 801e15a:	f1c3 0a00 	rsb	sl, r3, #0
 801e15e:	f000 fb11 	bl	801e784 <__tz_unlock>
 801e162:	2301      	movs	r3, #1
 801e164:	9304      	str	r3, [sp, #16]
 801e166:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801e16a:	4662      	mov	r2, ip
 801e16c:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 801e170:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801e174:	9602      	str	r6, [sp, #8]
 801e176:	f143 36ff 	adc.w	r6, r3, #4294967295
 801e17a:	9603      	str	r6, [sp, #12]
 801e17c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e180:	2e00      	cmp	r6, #0
 801e182:	f177 0600 	sbcs.w	r6, r7, #0
 801e186:	eba8 0104 	sub.w	r1, r8, r4
 801e18a:	eb09 0004 	add.w	r0, r9, r4
 801e18e:	da05      	bge.n	801e19c <__strftime+0x6dc>
 801e190:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 801e194:	f143 33ff 	adc.w	r3, r3, #4294967295
 801e198:	9602      	str	r6, [sp, #8]
 801e19a:	9303      	str	r3, [sp, #12]
 801e19c:	9b02      	ldr	r3, [sp, #8]
 801e19e:	089e      	lsrs	r6, r3, #2
 801e1a0:	9b03      	ldr	r3, [sp, #12]
 801e1a2:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 801e1a6:	f10c 32ff 	add.w	r2, ip, #4294967295
 801e1aa:	109f      	asrs	r7, r3, #2
 801e1ac:	2364      	movs	r3, #100	; 0x64
 801e1ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801e1b2:	1af6      	subs	r6, r6, r3
 801e1b4:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 801e1b8:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 801e1bc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801e1c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e1c4:	18f6      	adds	r6, r6, r3
 801e1c6:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801e1ca:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 801e1ce:	f240 136d 	movw	r3, #365	; 0x16d
 801e1d2:	fb03 fc0c 	mul.w	ip, r3, ip
 801e1d6:	69eb      	ldr	r3, [r5, #28]
 801e1d8:	eb16 060c 	adds.w	r6, r6, ip
 801e1dc:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 801e1e0:	18f6      	adds	r6, r6, r3
 801e1e2:	f04f 0c18 	mov.w	ip, #24
 801e1e6:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801e1ea:	fba6 230c 	umull	r2, r3, r6, ip
 801e1ee:	68ae      	ldr	r6, [r5, #8]
 801e1f0:	fb0c 3307 	mla	r3, ip, r7, r3
 801e1f4:	1992      	adds	r2, r2, r6
 801e1f6:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 801e1fa:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801e1fe:	fba2 670c 	umull	r6, r7, r2, ip
 801e202:	fb0c 7703 	mla	r7, ip, r3, r7
 801e206:	686b      	ldr	r3, [r5, #4]
 801e208:	18f6      	adds	r6, r6, r3
 801e20a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801e20e:	fba6 230c 	umull	r2, r3, r6, ip
 801e212:	682e      	ldr	r6, [r5, #0]
 801e214:	fb0c 3307 	mla	r3, ip, r7, r3
 801e218:	1992      	adds	r2, r2, r6
 801e21a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801e21e:	ebb2 020a 	subs.w	r2, r2, sl
 801e222:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 801e226:	e9cd 2300 	strd	r2, r3, [sp]
 801e22a:	4a14      	ldr	r2, [pc, #80]	; (801e27c <__strftime+0x7bc>)
 801e22c:	f001 fc42 	bl	801fab4 <sniprintf>
 801e230:	e606      	b.n	801de40 <__strftime+0x380>
 801e232:	f04f 0a00 	mov.w	sl, #0
 801e236:	e796      	b.n	801e166 <__strftime+0x6a6>
 801e238:	682b      	ldr	r3, [r5, #0]
 801e23a:	e66a      	b.n	801df12 <__strftime+0x452>
 801e23c:	f108 33ff 	add.w	r3, r8, #4294967295
 801e240:	42a3      	cmp	r3, r4
 801e242:	f67f ac6c 	bls.w	801db1e <__strftime+0x5e>
 801e246:	2309      	movs	r3, #9
 801e248:	e740      	b.n	801e0cc <__strftime+0x60c>
 801e24a:	682b      	ldr	r3, [r5, #0]
 801e24c:	9301      	str	r3, [sp, #4]
 801e24e:	686b      	ldr	r3, [r5, #4]
 801e250:	9300      	str	r3, [sp, #0]
 801e252:	4a0b      	ldr	r2, [pc, #44]	; (801e280 <__strftime+0x7c0>)
 801e254:	68ab      	ldr	r3, [r5, #8]
 801e256:	e5e0      	b.n	801de1a <__strftime+0x35a>
 801e258:	fffff894 	.word	0xfffff894
 801e25c:	fffff895 	.word	0xfffff895
 801e260:	08025193 	.word	0x08025193
 801e264:	08025174 	.word	0x08025174
 801e268:	08025182 	.word	0x08025182
 801e26c:	08025197 	.word	0x08025197
 801e270:	080252e8 	.word	0x080252e8
 801e274:	0802545d 	.word	0x0802545d
 801e278:	080251a6 	.word	0x080251a6
 801e27c:	0802519c 	.word	0x0802519c
 801e280:	080251a1 	.word	0x080251a1
 801e284:	f108 33ff 	add.w	r3, r8, #4294967295
 801e288:	42a3      	cmp	r3, r4
 801e28a:	f67f ac48 	bls.w	801db1e <__strftime+0x5e>
 801e28e:	69ab      	ldr	r3, [r5, #24]
 801e290:	eb09 0204 	add.w	r2, r9, r4
 801e294:	3401      	adds	r4, #1
 801e296:	b913      	cbnz	r3, 801e29e <__strftime+0x7de>
 801e298:	2337      	movs	r3, #55	; 0x37
 801e29a:	7013      	strb	r3, [r2, #0]
 801e29c:	e512      	b.n	801dcc4 <__strftime+0x204>
 801e29e:	3330      	adds	r3, #48	; 0x30
 801e2a0:	e7fb      	b.n	801e29a <__strftime+0x7da>
 801e2a2:	69eb      	ldr	r3, [r5, #28]
 801e2a4:	69aa      	ldr	r2, [r5, #24]
 801e2a6:	3307      	adds	r3, #7
 801e2a8:	1a9b      	subs	r3, r3, r2
 801e2aa:	2207      	movs	r2, #7
 801e2ac:	fb93 f3f2 	sdiv	r3, r3, r2
 801e2b0:	e62f      	b.n	801df12 <__strftime+0x452>
 801e2b2:	4628      	mov	r0, r5
 801e2b4:	f7ff fba2 	bl	801d9fc <iso_year_adjust>
 801e2b8:	69aa      	ldr	r2, [r5, #24]
 801e2ba:	b132      	cbz	r2, 801e2ca <__strftime+0x80a>
 801e2bc:	3a01      	subs	r2, #1
 801e2be:	2800      	cmp	r0, #0
 801e2c0:	dc28      	bgt.n	801e314 <__strftime+0x854>
 801e2c2:	69eb      	ldr	r3, [r5, #28]
 801e2c4:	d103      	bne.n	801e2ce <__strftime+0x80e>
 801e2c6:	330a      	adds	r3, #10
 801e2c8:	e7ee      	b.n	801e2a8 <__strftime+0x7e8>
 801e2ca:	2206      	movs	r2, #6
 801e2cc:	e7f7      	b.n	801e2be <__strftime+0x7fe>
 801e2ce:	6968      	ldr	r0, [r5, #20]
 801e2d0:	2800      	cmp	r0, #0
 801e2d2:	eba2 0303 	sub.w	r3, r2, r3
 801e2d6:	f240 726b 	movw	r2, #1899	; 0x76b
 801e2da:	bfa8      	it	ge
 801e2dc:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 801e2e0:	4410      	add	r0, r2
 801e2e2:	0782      	lsls	r2, r0, #30
 801e2e4:	d105      	bne.n	801e2f2 <__strftime+0x832>
 801e2e6:	2264      	movs	r2, #100	; 0x64
 801e2e8:	fb90 f1f2 	sdiv	r1, r0, r2
 801e2ec:	fb02 0111 	mls	r1, r2, r1, r0
 801e2f0:	b971      	cbnz	r1, 801e310 <__strftime+0x850>
 801e2f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801e2f6:	fb90 f2f1 	sdiv	r2, r0, r1
 801e2fa:	fb01 0212 	mls	r2, r1, r2, r0
 801e2fe:	fab2 f282 	clz	r2, r2
 801e302:	0952      	lsrs	r2, r2, #5
 801e304:	1a9a      	subs	r2, r3, r2
 801e306:	2a05      	cmp	r2, #5
 801e308:	bfb4      	ite	lt
 801e30a:	2335      	movlt	r3, #53	; 0x35
 801e30c:	2334      	movge	r3, #52	; 0x34
 801e30e:	e600      	b.n	801df12 <__strftime+0x452>
 801e310:	2201      	movs	r2, #1
 801e312:	e7f7      	b.n	801e304 <__strftime+0x844>
 801e314:	2301      	movs	r3, #1
 801e316:	e5fc      	b.n	801df12 <__strftime+0x452>
 801e318:	f108 33ff 	add.w	r3, r8, #4294967295
 801e31c:	42a3      	cmp	r3, r4
 801e31e:	f67f abfe 	bls.w	801db1e <__strftime+0x5e>
 801e322:	69ab      	ldr	r3, [r5, #24]
 801e324:	3330      	adds	r3, #48	; 0x30
 801e326:	e6d1      	b.n	801e0cc <__strftime+0x60c>
 801e328:	69ab      	ldr	r3, [r5, #24]
 801e32a:	b13b      	cbz	r3, 801e33c <__strftime+0x87c>
 801e32c:	3b01      	subs	r3, #1
 801e32e:	69ea      	ldr	r2, [r5, #28]
 801e330:	3207      	adds	r2, #7
 801e332:	1ad2      	subs	r2, r2, r3
 801e334:	2307      	movs	r3, #7
 801e336:	fb92 f3f3 	sdiv	r3, r2, r3
 801e33a:	e5ea      	b.n	801df12 <__strftime+0x452>
 801e33c:	2306      	movs	r3, #6
 801e33e:	e7f6      	b.n	801e32e <__strftime+0x86e>
 801e340:	6968      	ldr	r0, [r5, #20]
 801e342:	2800      	cmp	r0, #0
 801e344:	db05      	blt.n	801e352 <__strftime+0x892>
 801e346:	2264      	movs	r2, #100	; 0x64
 801e348:	fb90 f3f2 	sdiv	r3, r0, r2
 801e34c:	fb03 0312 	mls	r3, r3, r2, r0
 801e350:	e5df      	b.n	801df12 <__strftime+0x452>
 801e352:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801e356:	f000 fd0b 	bl	801ed70 <abs>
 801e35a:	e7f4      	b.n	801e346 <__strftime+0x886>
 801e35c:	696b      	ldr	r3, [r5, #20]
 801e35e:	4a4c      	ldr	r2, [pc, #304]	; (801e490 <__strftime+0x9d0>)
 801e360:	4293      	cmp	r3, r2
 801e362:	da09      	bge.n	801e378 <__strftime+0x8b8>
 801e364:	212d      	movs	r1, #45	; 0x2d
 801e366:	f88d 1020 	strb.w	r1, [sp, #32]
 801e36a:	eba2 0a03 	sub.w	sl, r2, r3
 801e36e:	b106      	cbz	r6, 801e372 <__strftime+0x8b2>
 801e370:	3e01      	subs	r6, #1
 801e372:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801e376:	e00b      	b.n	801e390 <__strftime+0x8d0>
 801e378:	2f2b      	cmp	r7, #43	; 0x2b
 801e37a:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 801e37e:	d106      	bne.n	801e38e <__strftime+0x8ce>
 801e380:	f242 730f 	movw	r3, #9999	; 0x270f
 801e384:	459a      	cmp	sl, r3
 801e386:	d902      	bls.n	801e38e <__strftime+0x8ce>
 801e388:	f88d 7020 	strb.w	r7, [sp, #32]
 801e38c:	e7ef      	b.n	801e36e <__strftime+0x8ae>
 801e38e:	ab08      	add	r3, sp, #32
 801e390:	2225      	movs	r2, #37	; 0x25
 801e392:	701a      	strb	r2, [r3, #0]
 801e394:	b937      	cbnz	r7, 801e3a4 <__strftime+0x8e4>
 801e396:	1c58      	adds	r0, r3, #1
 801e398:	493e      	ldr	r1, [pc, #248]	; (801e494 <__strftime+0x9d4>)
 801e39a:	f001 fbeb 	bl	801fb74 <strcpy>
 801e39e:	f8cd a000 	str.w	sl, [sp]
 801e3a2:	e665      	b.n	801e070 <__strftime+0x5b0>
 801e3a4:	2230      	movs	r2, #48	; 0x30
 801e3a6:	1c98      	adds	r0, r3, #2
 801e3a8:	705a      	strb	r2, [r3, #1]
 801e3aa:	e7f5      	b.n	801e398 <__strftime+0x8d8>
 801e3ac:	6a2b      	ldr	r3, [r5, #32]
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	f6ff ac88 	blt.w	801dcc4 <__strftime+0x204>
 801e3b4:	f000 f9e0 	bl	801e778 <__tz_lock>
 801e3b8:	9b04      	ldr	r3, [sp, #16]
 801e3ba:	b90b      	cbnz	r3, 801e3c0 <__strftime+0x900>
 801e3bc:	f000 f9e8 	bl	801e790 <_tzset_unlocked>
 801e3c0:	f000 fdb6 	bl	801ef30 <__gettzinfo>
 801e3c4:	6a2b      	ldr	r3, [r5, #32]
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	bfcc      	ite	gt
 801e3ca:	2350      	movgt	r3, #80	; 0x50
 801e3cc:	2328      	movle	r3, #40	; 0x28
 801e3ce:	eb09 0704 	add.w	r7, r9, r4
 801e3d2:	58c6      	ldr	r6, [r0, r3]
 801e3d4:	f000 f9d6 	bl	801e784 <__tz_unlock>
 801e3d8:	4276      	negs	r6, r6
 801e3da:	233c      	movs	r3, #60	; 0x3c
 801e3dc:	fb96 f0f3 	sdiv	r0, r6, r3
 801e3e0:	f000 fe6a 	bl	801f0b8 <labs>
 801e3e4:	233c      	movs	r3, #60	; 0x3c
 801e3e6:	eba8 0a04 	sub.w	sl, r8, r4
 801e3ea:	fb90 f2f3 	sdiv	r2, r0, r3
 801e3ee:	fb02 0013 	mls	r0, r2, r3, r0
 801e3f2:	9000      	str	r0, [sp, #0]
 801e3f4:	4a28      	ldr	r2, [pc, #160]	; (801e498 <__strftime+0x9d8>)
 801e3f6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801e3fa:	4651      	mov	r1, sl
 801e3fc:	4638      	mov	r0, r7
 801e3fe:	fb96 f3f3 	sdiv	r3, r6, r3
 801e402:	f001 fb57 	bl	801fab4 <sniprintf>
 801e406:	2800      	cmp	r0, #0
 801e408:	f6ff ab89 	blt.w	801db1e <__strftime+0x5e>
 801e40c:	4404      	add	r4, r0
 801e40e:	45a0      	cmp	r8, r4
 801e410:	f67f ab85 	bls.w	801db1e <__strftime+0x5e>
 801e414:	2301      	movs	r3, #1
 801e416:	9304      	str	r3, [sp, #16]
 801e418:	e454      	b.n	801dcc4 <__strftime+0x204>
 801e41a:	6a2b      	ldr	r3, [r5, #32]
 801e41c:	2b00      	cmp	r3, #0
 801e41e:	f6ff ac51 	blt.w	801dcc4 <__strftime+0x204>
 801e422:	f000 f9a9 	bl	801e778 <__tz_lock>
 801e426:	9b04      	ldr	r3, [sp, #16]
 801e428:	b90b      	cbnz	r3, 801e42e <__strftime+0x96e>
 801e42a:	f000 f9b1 	bl	801e790 <_tzset_unlocked>
 801e42e:	6a2b      	ldr	r3, [r5, #32]
 801e430:	4a1a      	ldr	r2, [pc, #104]	; (801e49c <__strftime+0x9dc>)
 801e432:	2b00      	cmp	r3, #0
 801e434:	bfd4      	ite	le
 801e436:	2300      	movle	r3, #0
 801e438:	2301      	movgt	r3, #1
 801e43a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801e43e:	4630      	mov	r0, r6
 801e440:	f7e1 fefc 	bl	800023c <strlen>
 801e444:	3e01      	subs	r6, #1
 801e446:	4420      	add	r0, r4
 801e448:	f108 33ff 	add.w	r3, r8, #4294967295
 801e44c:	42a0      	cmp	r0, r4
 801e44e:	d102      	bne.n	801e456 <__strftime+0x996>
 801e450:	f000 f998 	bl	801e784 <__tz_unlock>
 801e454:	e7de      	b.n	801e414 <__strftime+0x954>
 801e456:	42a3      	cmp	r3, r4
 801e458:	d905      	bls.n	801e466 <__strftime+0x9a6>
 801e45a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801e45e:	f809 2004 	strb.w	r2, [r9, r4]
 801e462:	3401      	adds	r4, #1
 801e464:	e7f2      	b.n	801e44c <__strftime+0x98c>
 801e466:	f000 f98d 	bl	801e784 <__tz_unlock>
 801e46a:	f7ff bb58 	b.w	801db1e <__strftime+0x5e>
 801e46e:	f108 33ff 	add.w	r3, r8, #4294967295
 801e472:	42a3      	cmp	r3, r4
 801e474:	f67f ab53 	bls.w	801db1e <__strftime+0x5e>
 801e478:	2325      	movs	r3, #37	; 0x25
 801e47a:	e627      	b.n	801e0cc <__strftime+0x60c>
 801e47c:	f1b8 0f00 	cmp.w	r8, #0
 801e480:	d002      	beq.n	801e488 <__strftime+0x9c8>
 801e482:	2300      	movs	r3, #0
 801e484:	f809 3004 	strb.w	r3, [r9, r4]
 801e488:	4620      	mov	r0, r4
 801e48a:	b011      	add	sp, #68	; 0x44
 801e48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e490:	fffff894 	.word	0xfffff894
 801e494:	08025193 	.word	0x08025193
 801e498:	080251b0 	.word	0x080251b0
 801e49c:	20000168 	.word	0x20000168

0801e4a0 <strftime>:
 801e4a0:	b513      	push	{r0, r1, r4, lr}
 801e4a2:	4c03      	ldr	r4, [pc, #12]	; (801e4b0 <strftime+0x10>)
 801e4a4:	9400      	str	r4, [sp, #0]
 801e4a6:	f7ff fb0b 	bl	801dac0 <__strftime>
 801e4aa:	b002      	add	sp, #8
 801e4ac:	bd10      	pop	{r4, pc}
 801e4ae:	bf00      	nop
 801e4b0:	200001d0 	.word	0x200001d0

0801e4b4 <strstr>:
 801e4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e4b6:	780c      	ldrb	r4, [r1, #0]
 801e4b8:	b164      	cbz	r4, 801e4d4 <strstr+0x20>
 801e4ba:	4603      	mov	r3, r0
 801e4bc:	781a      	ldrb	r2, [r3, #0]
 801e4be:	4618      	mov	r0, r3
 801e4c0:	1c5e      	adds	r6, r3, #1
 801e4c2:	b90a      	cbnz	r2, 801e4c8 <strstr+0x14>
 801e4c4:	4610      	mov	r0, r2
 801e4c6:	e005      	b.n	801e4d4 <strstr+0x20>
 801e4c8:	4294      	cmp	r4, r2
 801e4ca:	d108      	bne.n	801e4de <strstr+0x2a>
 801e4cc:	460d      	mov	r5, r1
 801e4ce:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801e4d2:	b902      	cbnz	r2, 801e4d6 <strstr+0x22>
 801e4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e4d6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801e4da:	4297      	cmp	r7, r2
 801e4dc:	d0f7      	beq.n	801e4ce <strstr+0x1a>
 801e4de:	4633      	mov	r3, r6
 801e4e0:	e7ec      	b.n	801e4bc <strstr+0x8>
	...

0801e4e4 <_strtoul_l.isra.0>:
 801e4e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e4e8:	4e3b      	ldr	r6, [pc, #236]	; (801e5d8 <_strtoul_l.isra.0+0xf4>)
 801e4ea:	4686      	mov	lr, r0
 801e4ec:	468c      	mov	ip, r1
 801e4ee:	4660      	mov	r0, ip
 801e4f0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801e4f4:	5da5      	ldrb	r5, [r4, r6]
 801e4f6:	f015 0508 	ands.w	r5, r5, #8
 801e4fa:	d1f8      	bne.n	801e4ee <_strtoul_l.isra.0+0xa>
 801e4fc:	2c2d      	cmp	r4, #45	; 0x2d
 801e4fe:	d134      	bne.n	801e56a <_strtoul_l.isra.0+0x86>
 801e500:	f89c 4000 	ldrb.w	r4, [ip]
 801e504:	f04f 0801 	mov.w	r8, #1
 801e508:	f100 0c02 	add.w	ip, r0, #2
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	d05e      	beq.n	801e5ce <_strtoul_l.isra.0+0xea>
 801e510:	2b10      	cmp	r3, #16
 801e512:	d10c      	bne.n	801e52e <_strtoul_l.isra.0+0x4a>
 801e514:	2c30      	cmp	r4, #48	; 0x30
 801e516:	d10a      	bne.n	801e52e <_strtoul_l.isra.0+0x4a>
 801e518:	f89c 0000 	ldrb.w	r0, [ip]
 801e51c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801e520:	2858      	cmp	r0, #88	; 0x58
 801e522:	d14f      	bne.n	801e5c4 <_strtoul_l.isra.0+0xe0>
 801e524:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801e528:	2310      	movs	r3, #16
 801e52a:	f10c 0c02 	add.w	ip, ip, #2
 801e52e:	f04f 37ff 	mov.w	r7, #4294967295
 801e532:	2500      	movs	r5, #0
 801e534:	fbb7 f7f3 	udiv	r7, r7, r3
 801e538:	fb03 f907 	mul.w	r9, r3, r7
 801e53c:	ea6f 0909 	mvn.w	r9, r9
 801e540:	4628      	mov	r0, r5
 801e542:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801e546:	2e09      	cmp	r6, #9
 801e548:	d818      	bhi.n	801e57c <_strtoul_l.isra.0+0x98>
 801e54a:	4634      	mov	r4, r6
 801e54c:	42a3      	cmp	r3, r4
 801e54e:	dd24      	ble.n	801e59a <_strtoul_l.isra.0+0xb6>
 801e550:	2d00      	cmp	r5, #0
 801e552:	db1f      	blt.n	801e594 <_strtoul_l.isra.0+0xb0>
 801e554:	4287      	cmp	r7, r0
 801e556:	d31d      	bcc.n	801e594 <_strtoul_l.isra.0+0xb0>
 801e558:	d101      	bne.n	801e55e <_strtoul_l.isra.0+0x7a>
 801e55a:	45a1      	cmp	r9, r4
 801e55c:	db1a      	blt.n	801e594 <_strtoul_l.isra.0+0xb0>
 801e55e:	fb00 4003 	mla	r0, r0, r3, r4
 801e562:	2501      	movs	r5, #1
 801e564:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801e568:	e7eb      	b.n	801e542 <_strtoul_l.isra.0+0x5e>
 801e56a:	2c2b      	cmp	r4, #43	; 0x2b
 801e56c:	bf08      	it	eq
 801e56e:	f89c 4000 	ldrbeq.w	r4, [ip]
 801e572:	46a8      	mov	r8, r5
 801e574:	bf08      	it	eq
 801e576:	f100 0c02 	addeq.w	ip, r0, #2
 801e57a:	e7c7      	b.n	801e50c <_strtoul_l.isra.0+0x28>
 801e57c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801e580:	2e19      	cmp	r6, #25
 801e582:	d801      	bhi.n	801e588 <_strtoul_l.isra.0+0xa4>
 801e584:	3c37      	subs	r4, #55	; 0x37
 801e586:	e7e1      	b.n	801e54c <_strtoul_l.isra.0+0x68>
 801e588:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801e58c:	2e19      	cmp	r6, #25
 801e58e:	d804      	bhi.n	801e59a <_strtoul_l.isra.0+0xb6>
 801e590:	3c57      	subs	r4, #87	; 0x57
 801e592:	e7db      	b.n	801e54c <_strtoul_l.isra.0+0x68>
 801e594:	f04f 35ff 	mov.w	r5, #4294967295
 801e598:	e7e4      	b.n	801e564 <_strtoul_l.isra.0+0x80>
 801e59a:	2d00      	cmp	r5, #0
 801e59c:	da07      	bge.n	801e5ae <_strtoul_l.isra.0+0xca>
 801e59e:	2322      	movs	r3, #34	; 0x22
 801e5a0:	f8ce 3000 	str.w	r3, [lr]
 801e5a4:	f04f 30ff 	mov.w	r0, #4294967295
 801e5a8:	b942      	cbnz	r2, 801e5bc <_strtoul_l.isra.0+0xd8>
 801e5aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e5ae:	f1b8 0f00 	cmp.w	r8, #0
 801e5b2:	d000      	beq.n	801e5b6 <_strtoul_l.isra.0+0xd2>
 801e5b4:	4240      	negs	r0, r0
 801e5b6:	2a00      	cmp	r2, #0
 801e5b8:	d0f7      	beq.n	801e5aa <_strtoul_l.isra.0+0xc6>
 801e5ba:	b10d      	cbz	r5, 801e5c0 <_strtoul_l.isra.0+0xdc>
 801e5bc:	f10c 31ff 	add.w	r1, ip, #4294967295
 801e5c0:	6011      	str	r1, [r2, #0]
 801e5c2:	e7f2      	b.n	801e5aa <_strtoul_l.isra.0+0xc6>
 801e5c4:	2430      	movs	r4, #48	; 0x30
 801e5c6:	2b00      	cmp	r3, #0
 801e5c8:	d1b1      	bne.n	801e52e <_strtoul_l.isra.0+0x4a>
 801e5ca:	2308      	movs	r3, #8
 801e5cc:	e7af      	b.n	801e52e <_strtoul_l.isra.0+0x4a>
 801e5ce:	2c30      	cmp	r4, #48	; 0x30
 801e5d0:	d0a2      	beq.n	801e518 <_strtoul_l.isra.0+0x34>
 801e5d2:	230a      	movs	r3, #10
 801e5d4:	e7ab      	b.n	801e52e <_strtoul_l.isra.0+0x4a>
 801e5d6:	bf00      	nop
 801e5d8:	0802545d 	.word	0x0802545d

0801e5dc <_strtoul_r>:
 801e5dc:	f7ff bf82 	b.w	801e4e4 <_strtoul_l.isra.0>

0801e5e0 <strtoul>:
 801e5e0:	4613      	mov	r3, r2
 801e5e2:	460a      	mov	r2, r1
 801e5e4:	4601      	mov	r1, r0
 801e5e6:	4802      	ldr	r0, [pc, #8]	; (801e5f0 <strtoul+0x10>)
 801e5e8:	6800      	ldr	r0, [r0, #0]
 801e5ea:	f7ff bf7b 	b.w	801e4e4 <_strtoul_l.isra.0>
 801e5ee:	bf00      	nop
 801e5f0:	20000104 	.word	0x20000104

0801e5f4 <time>:
 801e5f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e5f6:	4b0b      	ldr	r3, [pc, #44]	; (801e624 <time+0x30>)
 801e5f8:	2200      	movs	r2, #0
 801e5fa:	4669      	mov	r1, sp
 801e5fc:	4604      	mov	r4, r0
 801e5fe:	6818      	ldr	r0, [r3, #0]
 801e600:	f000 fc84 	bl	801ef0c <_gettimeofday_r>
 801e604:	2800      	cmp	r0, #0
 801e606:	bfbe      	ittt	lt
 801e608:	f04f 32ff 	movlt.w	r2, #4294967295
 801e60c:	f04f 33ff 	movlt.w	r3, #4294967295
 801e610:	e9cd 2300 	strdlt	r2, r3, [sp]
 801e614:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e618:	b10c      	cbz	r4, 801e61e <time+0x2a>
 801e61a:	e9c4 0100 	strd	r0, r1, [r4]
 801e61e:	b004      	add	sp, #16
 801e620:	bd10      	pop	{r4, pc}
 801e622:	bf00      	nop
 801e624:	20000104 	.word	0x20000104

0801e628 <__tzcalc_limits>:
 801e628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e62c:	4680      	mov	r8, r0
 801e62e:	f000 fc7f 	bl	801ef30 <__gettzinfo>
 801e632:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801e636:	4598      	cmp	r8, r3
 801e638:	f340 8098 	ble.w	801e76c <__tzcalc_limits+0x144>
 801e63c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801e640:	4443      	add	r3, r8
 801e642:	109b      	asrs	r3, r3, #2
 801e644:	f240 126d 	movw	r2, #365	; 0x16d
 801e648:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801e64c:	fb02 3505 	mla	r5, r2, r5, r3
 801e650:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801e654:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801e658:	fb93 f3f2 	sdiv	r3, r3, r2
 801e65c:	441d      	add	r5, r3
 801e65e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801e662:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801e666:	fb98 f7f3 	sdiv	r7, r8, r3
 801e66a:	fb03 8717 	mls	r7, r3, r7, r8
 801e66e:	4442      	add	r2, r8
 801e670:	fab7 fc87 	clz	ip, r7
 801e674:	fbb2 f2f3 	udiv	r2, r2, r3
 801e678:	f008 0303 	and.w	r3, r8, #3
 801e67c:	4415      	add	r5, r2
 801e67e:	2264      	movs	r2, #100	; 0x64
 801e680:	f8c0 8004 	str.w	r8, [r0, #4]
 801e684:	fb98 f6f2 	sdiv	r6, r8, r2
 801e688:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e68c:	fb02 8616 	mls	r6, r2, r6, r8
 801e690:	4604      	mov	r4, r0
 801e692:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801e696:	9300      	str	r3, [sp, #0]
 801e698:	f04f 0e07 	mov.w	lr, #7
 801e69c:	7a22      	ldrb	r2, [r4, #8]
 801e69e:	6963      	ldr	r3, [r4, #20]
 801e6a0:	2a4a      	cmp	r2, #74	; 0x4a
 801e6a2:	d128      	bne.n	801e6f6 <__tzcalc_limits+0xce>
 801e6a4:	9900      	ldr	r1, [sp, #0]
 801e6a6:	18ea      	adds	r2, r5, r3
 801e6a8:	b901      	cbnz	r1, 801e6ac <__tzcalc_limits+0x84>
 801e6aa:	b906      	cbnz	r6, 801e6ae <__tzcalc_limits+0x86>
 801e6ac:	bb0f      	cbnz	r7, 801e6f2 <__tzcalc_limits+0xca>
 801e6ae:	2b3b      	cmp	r3, #59	; 0x3b
 801e6b0:	bfd4      	ite	le
 801e6b2:	2300      	movle	r3, #0
 801e6b4:	2301      	movgt	r3, #1
 801e6b6:	4413      	add	r3, r2
 801e6b8:	1e5a      	subs	r2, r3, #1
 801e6ba:	69a3      	ldr	r3, [r4, #24]
 801e6bc:	492c      	ldr	r1, [pc, #176]	; (801e770 <__tzcalc_limits+0x148>)
 801e6be:	fb01 3202 	mla	r2, r1, r2, r3
 801e6c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e6c4:	4413      	add	r3, r2
 801e6c6:	461a      	mov	r2, r3
 801e6c8:	17db      	asrs	r3, r3, #31
 801e6ca:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801e6ce:	3428      	adds	r4, #40	; 0x28
 801e6d0:	45a3      	cmp	fp, r4
 801e6d2:	d1e3      	bne.n	801e69c <__tzcalc_limits+0x74>
 801e6d4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801e6d8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801e6dc:	4294      	cmp	r4, r2
 801e6de:	eb75 0303 	sbcs.w	r3, r5, r3
 801e6e2:	bfb4      	ite	lt
 801e6e4:	2301      	movlt	r3, #1
 801e6e6:	2300      	movge	r3, #0
 801e6e8:	6003      	str	r3, [r0, #0]
 801e6ea:	2001      	movs	r0, #1
 801e6ec:	b003      	add	sp, #12
 801e6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6f2:	2300      	movs	r3, #0
 801e6f4:	e7df      	b.n	801e6b6 <__tzcalc_limits+0x8e>
 801e6f6:	2a44      	cmp	r2, #68	; 0x44
 801e6f8:	d101      	bne.n	801e6fe <__tzcalc_limits+0xd6>
 801e6fa:	18ea      	adds	r2, r5, r3
 801e6fc:	e7dd      	b.n	801e6ba <__tzcalc_limits+0x92>
 801e6fe:	9a00      	ldr	r2, [sp, #0]
 801e700:	bb72      	cbnz	r2, 801e760 <__tzcalc_limits+0x138>
 801e702:	2e00      	cmp	r6, #0
 801e704:	bf0c      	ite	eq
 801e706:	46e0      	moveq	r8, ip
 801e708:	f04f 0801 	movne.w	r8, #1
 801e70c:	4919      	ldr	r1, [pc, #100]	; (801e774 <__tzcalc_limits+0x14c>)
 801e70e:	68e2      	ldr	r2, [r4, #12]
 801e710:	9201      	str	r2, [sp, #4]
 801e712:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801e716:	fb0a 1808 	mla	r8, sl, r8, r1
 801e71a:	462a      	mov	r2, r5
 801e71c:	f04f 0900 	mov.w	r9, #0
 801e720:	f1a8 0804 	sub.w	r8, r8, #4
 801e724:	9901      	ldr	r1, [sp, #4]
 801e726:	f109 0901 	add.w	r9, r9, #1
 801e72a:	4549      	cmp	r1, r9
 801e72c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801e730:	dc18      	bgt.n	801e764 <__tzcalc_limits+0x13c>
 801e732:	f102 0804 	add.w	r8, r2, #4
 801e736:	fb98 f9fe 	sdiv	r9, r8, lr
 801e73a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801e73e:	eba8 0909 	sub.w	r9, r8, r9
 801e742:	ebb3 0909 	subs.w	r9, r3, r9
 801e746:	6923      	ldr	r3, [r4, #16]
 801e748:	f103 33ff 	add.w	r3, r3, #4294967295
 801e74c:	bf48      	it	mi
 801e74e:	f109 0907 	addmi.w	r9, r9, #7
 801e752:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801e756:	444b      	add	r3, r9
 801e758:	4553      	cmp	r3, sl
 801e75a:	da05      	bge.n	801e768 <__tzcalc_limits+0x140>
 801e75c:	441a      	add	r2, r3
 801e75e:	e7ac      	b.n	801e6ba <__tzcalc_limits+0x92>
 801e760:	46e0      	mov	r8, ip
 801e762:	e7d3      	b.n	801e70c <__tzcalc_limits+0xe4>
 801e764:	4452      	add	r2, sl
 801e766:	e7dd      	b.n	801e724 <__tzcalc_limits+0xfc>
 801e768:	3b07      	subs	r3, #7
 801e76a:	e7f5      	b.n	801e758 <__tzcalc_limits+0x130>
 801e76c:	2000      	movs	r0, #0
 801e76e:	e7bd      	b.n	801e6ec <__tzcalc_limits+0xc4>
 801e770:	00015180 	.word	0x00015180
 801e774:	080250a4 	.word	0x080250a4

0801e778 <__tz_lock>:
 801e778:	4801      	ldr	r0, [pc, #4]	; (801e780 <__tz_lock+0x8>)
 801e77a:	f7fe bebf 	b.w	801d4fc <__retarget_lock_acquire>
 801e77e:	bf00      	nop
 801e780:	20000d5b 	.word	0x20000d5b

0801e784 <__tz_unlock>:
 801e784:	4801      	ldr	r0, [pc, #4]	; (801e78c <__tz_unlock+0x8>)
 801e786:	f7fe bebb 	b.w	801d500 <__retarget_lock_release>
 801e78a:	bf00      	nop
 801e78c:	20000d5b 	.word	0x20000d5b

0801e790 <_tzset_unlocked>:
 801e790:	4b01      	ldr	r3, [pc, #4]	; (801e798 <_tzset_unlocked+0x8>)
 801e792:	6818      	ldr	r0, [r3, #0]
 801e794:	f000 b802 	b.w	801e79c <_tzset_unlocked_r>
 801e798:	20000104 	.word	0x20000104

0801e79c <_tzset_unlocked_r>:
 801e79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7a0:	b08d      	sub	sp, #52	; 0x34
 801e7a2:	4607      	mov	r7, r0
 801e7a4:	f000 fbc4 	bl	801ef30 <__gettzinfo>
 801e7a8:	49ae      	ldr	r1, [pc, #696]	; (801ea64 <_tzset_unlocked_r+0x2c8>)
 801e7aa:	4eaf      	ldr	r6, [pc, #700]	; (801ea68 <_tzset_unlocked_r+0x2cc>)
 801e7ac:	4605      	mov	r5, r0
 801e7ae:	4638      	mov	r0, r7
 801e7b0:	f000 fba4 	bl	801eefc <_getenv_r>
 801e7b4:	4604      	mov	r4, r0
 801e7b6:	b970      	cbnz	r0, 801e7d6 <_tzset_unlocked_r+0x3a>
 801e7b8:	4bac      	ldr	r3, [pc, #688]	; (801ea6c <_tzset_unlocked_r+0x2d0>)
 801e7ba:	4aad      	ldr	r2, [pc, #692]	; (801ea70 <_tzset_unlocked_r+0x2d4>)
 801e7bc:	6018      	str	r0, [r3, #0]
 801e7be:	4bad      	ldr	r3, [pc, #692]	; (801ea74 <_tzset_unlocked_r+0x2d8>)
 801e7c0:	6018      	str	r0, [r3, #0]
 801e7c2:	4bad      	ldr	r3, [pc, #692]	; (801ea78 <_tzset_unlocked_r+0x2dc>)
 801e7c4:	6830      	ldr	r0, [r6, #0]
 801e7c6:	e9c3 2200 	strd	r2, r2, [r3]
 801e7ca:	f7fe ff07 	bl	801d5dc <free>
 801e7ce:	6034      	str	r4, [r6, #0]
 801e7d0:	b00d      	add	sp, #52	; 0x34
 801e7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7d6:	6831      	ldr	r1, [r6, #0]
 801e7d8:	2900      	cmp	r1, #0
 801e7da:	d15f      	bne.n	801e89c <_tzset_unlocked_r+0x100>
 801e7dc:	6830      	ldr	r0, [r6, #0]
 801e7de:	f7fe fefd 	bl	801d5dc <free>
 801e7e2:	4620      	mov	r0, r4
 801e7e4:	f7e1 fd2a 	bl	800023c <strlen>
 801e7e8:	1c41      	adds	r1, r0, #1
 801e7ea:	4638      	mov	r0, r7
 801e7ec:	f7fe ff74 	bl	801d6d8 <_malloc_r>
 801e7f0:	6030      	str	r0, [r6, #0]
 801e7f2:	2800      	cmp	r0, #0
 801e7f4:	d157      	bne.n	801e8a6 <_tzset_unlocked_r+0x10a>
 801e7f6:	7823      	ldrb	r3, [r4, #0]
 801e7f8:	4aa0      	ldr	r2, [pc, #640]	; (801ea7c <_tzset_unlocked_r+0x2e0>)
 801e7fa:	49a1      	ldr	r1, [pc, #644]	; (801ea80 <_tzset_unlocked_r+0x2e4>)
 801e7fc:	2b3a      	cmp	r3, #58	; 0x3a
 801e7fe:	bf08      	it	eq
 801e800:	3401      	addeq	r4, #1
 801e802:	ae0a      	add	r6, sp, #40	; 0x28
 801e804:	4633      	mov	r3, r6
 801e806:	4620      	mov	r0, r4
 801e808:	f001 f988 	bl	801fb1c <siscanf>
 801e80c:	2800      	cmp	r0, #0
 801e80e:	dddf      	ble.n	801e7d0 <_tzset_unlocked_r+0x34>
 801e810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e812:	18e7      	adds	r7, r4, r3
 801e814:	5ce3      	ldrb	r3, [r4, r3]
 801e816:	2b2d      	cmp	r3, #45	; 0x2d
 801e818:	d149      	bne.n	801e8ae <_tzset_unlocked_r+0x112>
 801e81a:	3701      	adds	r7, #1
 801e81c:	f04f 34ff 	mov.w	r4, #4294967295
 801e820:	f10d 0a20 	add.w	sl, sp, #32
 801e824:	f10d 0b1e 	add.w	fp, sp, #30
 801e828:	f04f 0800 	mov.w	r8, #0
 801e82c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801e830:	4994      	ldr	r1, [pc, #592]	; (801ea84 <_tzset_unlocked_r+0x2e8>)
 801e832:	9603      	str	r6, [sp, #12]
 801e834:	f8cd b000 	str.w	fp, [sp]
 801e838:	4633      	mov	r3, r6
 801e83a:	aa07      	add	r2, sp, #28
 801e83c:	4638      	mov	r0, r7
 801e83e:	f8ad 801e 	strh.w	r8, [sp, #30]
 801e842:	f8ad 8020 	strh.w	r8, [sp, #32]
 801e846:	f001 f969 	bl	801fb1c <siscanf>
 801e84a:	4540      	cmp	r0, r8
 801e84c:	ddc0      	ble.n	801e7d0 <_tzset_unlocked_r+0x34>
 801e84e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801e852:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e856:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801ea90 <_tzset_unlocked_r+0x2f4>
 801e85a:	213c      	movs	r1, #60	; 0x3c
 801e85c:	fb01 2203 	mla	r2, r1, r3, r2
 801e860:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801e864:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801e868:	fb01 2303 	mla	r3, r1, r3, r2
 801e86c:	435c      	muls	r4, r3
 801e86e:	62ac      	str	r4, [r5, #40]	; 0x28
 801e870:	4c81      	ldr	r4, [pc, #516]	; (801ea78 <_tzset_unlocked_r+0x2dc>)
 801e872:	4b82      	ldr	r3, [pc, #520]	; (801ea7c <_tzset_unlocked_r+0x2e0>)
 801e874:	6023      	str	r3, [r4, #0]
 801e876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e878:	4981      	ldr	r1, [pc, #516]	; (801ea80 <_tzset_unlocked_r+0x2e4>)
 801e87a:	441f      	add	r7, r3
 801e87c:	464a      	mov	r2, r9
 801e87e:	4633      	mov	r3, r6
 801e880:	4638      	mov	r0, r7
 801e882:	f001 f94b 	bl	801fb1c <siscanf>
 801e886:	4540      	cmp	r0, r8
 801e888:	dc16      	bgt.n	801e8b8 <_tzset_unlocked_r+0x11c>
 801e88a:	6823      	ldr	r3, [r4, #0]
 801e88c:	6063      	str	r3, [r4, #4]
 801e88e:	4b77      	ldr	r3, [pc, #476]	; (801ea6c <_tzset_unlocked_r+0x2d0>)
 801e890:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801e892:	601a      	str	r2, [r3, #0]
 801e894:	4b77      	ldr	r3, [pc, #476]	; (801ea74 <_tzset_unlocked_r+0x2d8>)
 801e896:	f8c3 8000 	str.w	r8, [r3]
 801e89a:	e799      	b.n	801e7d0 <_tzset_unlocked_r+0x34>
 801e89c:	f7e1 fcd6 	bl	800024c <strcmp>
 801e8a0:	2800      	cmp	r0, #0
 801e8a2:	d19b      	bne.n	801e7dc <_tzset_unlocked_r+0x40>
 801e8a4:	e794      	b.n	801e7d0 <_tzset_unlocked_r+0x34>
 801e8a6:	4621      	mov	r1, r4
 801e8a8:	f001 f964 	bl	801fb74 <strcpy>
 801e8ac:	e7a3      	b.n	801e7f6 <_tzset_unlocked_r+0x5a>
 801e8ae:	2b2b      	cmp	r3, #43	; 0x2b
 801e8b0:	bf08      	it	eq
 801e8b2:	3701      	addeq	r7, #1
 801e8b4:	2401      	movs	r4, #1
 801e8b6:	e7b3      	b.n	801e820 <_tzset_unlocked_r+0x84>
 801e8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8ba:	f8c4 9004 	str.w	r9, [r4, #4]
 801e8be:	18fc      	adds	r4, r7, r3
 801e8c0:	5cfb      	ldrb	r3, [r7, r3]
 801e8c2:	2b2d      	cmp	r3, #45	; 0x2d
 801e8c4:	f040 808b 	bne.w	801e9de <_tzset_unlocked_r+0x242>
 801e8c8:	3401      	adds	r4, #1
 801e8ca:	f04f 37ff 	mov.w	r7, #4294967295
 801e8ce:	2300      	movs	r3, #0
 801e8d0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e8d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e8d8:	f8ad 3020 	strh.w	r3, [sp, #32]
 801e8dc:	930a      	str	r3, [sp, #40]	; 0x28
 801e8de:	e9cd a602 	strd	sl, r6, [sp, #8]
 801e8e2:	e9cd b600 	strd	fp, r6, [sp]
 801e8e6:	4967      	ldr	r1, [pc, #412]	; (801ea84 <_tzset_unlocked_r+0x2e8>)
 801e8e8:	4633      	mov	r3, r6
 801e8ea:	aa07      	add	r2, sp, #28
 801e8ec:	4620      	mov	r0, r4
 801e8ee:	f001 f915 	bl	801fb1c <siscanf>
 801e8f2:	2800      	cmp	r0, #0
 801e8f4:	dc78      	bgt.n	801e9e8 <_tzset_unlocked_r+0x24c>
 801e8f6:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801e8f8:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801e8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8fe:	652f      	str	r7, [r5, #80]	; 0x50
 801e900:	441c      	add	r4, r3
 801e902:	462f      	mov	r7, r5
 801e904:	f04f 0900 	mov.w	r9, #0
 801e908:	7823      	ldrb	r3, [r4, #0]
 801e90a:	2b2c      	cmp	r3, #44	; 0x2c
 801e90c:	bf08      	it	eq
 801e90e:	3401      	addeq	r4, #1
 801e910:	f894 8000 	ldrb.w	r8, [r4]
 801e914:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801e918:	d178      	bne.n	801ea0c <_tzset_unlocked_r+0x270>
 801e91a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801e91e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801e922:	ab09      	add	r3, sp, #36	; 0x24
 801e924:	9300      	str	r3, [sp, #0]
 801e926:	4958      	ldr	r1, [pc, #352]	; (801ea88 <_tzset_unlocked_r+0x2ec>)
 801e928:	9603      	str	r6, [sp, #12]
 801e92a:	4633      	mov	r3, r6
 801e92c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801e930:	4620      	mov	r0, r4
 801e932:	f001 f8f3 	bl	801fb1c <siscanf>
 801e936:	2803      	cmp	r0, #3
 801e938:	f47f af4a 	bne.w	801e7d0 <_tzset_unlocked_r+0x34>
 801e93c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801e940:	1e4b      	subs	r3, r1, #1
 801e942:	2b0b      	cmp	r3, #11
 801e944:	f63f af44 	bhi.w	801e7d0 <_tzset_unlocked_r+0x34>
 801e948:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801e94c:	1e53      	subs	r3, r2, #1
 801e94e:	2b04      	cmp	r3, #4
 801e950:	f63f af3e 	bhi.w	801e7d0 <_tzset_unlocked_r+0x34>
 801e954:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801e958:	2b06      	cmp	r3, #6
 801e95a:	f63f af39 	bhi.w	801e7d0 <_tzset_unlocked_r+0x34>
 801e95e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801e962:	f887 8008 	strb.w	r8, [r7, #8]
 801e966:	617b      	str	r3, [r7, #20]
 801e968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e96a:	eb04 0803 	add.w	r8, r4, r3
 801e96e:	2302      	movs	r3, #2
 801e970:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e974:	2300      	movs	r3, #0
 801e976:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e97a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801e97e:	930a      	str	r3, [sp, #40]	; 0x28
 801e980:	f898 3000 	ldrb.w	r3, [r8]
 801e984:	2b2f      	cmp	r3, #47	; 0x2f
 801e986:	d109      	bne.n	801e99c <_tzset_unlocked_r+0x200>
 801e988:	e9cd a602 	strd	sl, r6, [sp, #8]
 801e98c:	e9cd b600 	strd	fp, r6, [sp]
 801e990:	493e      	ldr	r1, [pc, #248]	; (801ea8c <_tzset_unlocked_r+0x2f0>)
 801e992:	4633      	mov	r3, r6
 801e994:	aa07      	add	r2, sp, #28
 801e996:	4640      	mov	r0, r8
 801e998:	f001 f8c0 	bl	801fb1c <siscanf>
 801e99c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801e9a0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e9a4:	213c      	movs	r1, #60	; 0x3c
 801e9a6:	fb01 2203 	mla	r2, r1, r3, r2
 801e9aa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801e9ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801e9b2:	fb01 2303 	mla	r3, r1, r3, r2
 801e9b6:	61bb      	str	r3, [r7, #24]
 801e9b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e9ba:	3728      	adds	r7, #40	; 0x28
 801e9bc:	4444      	add	r4, r8
 801e9be:	f1b9 0f00 	cmp.w	r9, #0
 801e9c2:	d020      	beq.n	801ea06 <_tzset_unlocked_r+0x26a>
 801e9c4:	6868      	ldr	r0, [r5, #4]
 801e9c6:	f7ff fe2f 	bl	801e628 <__tzcalc_limits>
 801e9ca:	4b28      	ldr	r3, [pc, #160]	; (801ea6c <_tzset_unlocked_r+0x2d0>)
 801e9cc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801e9ce:	601a      	str	r2, [r3, #0]
 801e9d0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801e9d2:	1a9b      	subs	r3, r3, r2
 801e9d4:	4a27      	ldr	r2, [pc, #156]	; (801ea74 <_tzset_unlocked_r+0x2d8>)
 801e9d6:	bf18      	it	ne
 801e9d8:	2301      	movne	r3, #1
 801e9da:	6013      	str	r3, [r2, #0]
 801e9dc:	e6f8      	b.n	801e7d0 <_tzset_unlocked_r+0x34>
 801e9de:	2b2b      	cmp	r3, #43	; 0x2b
 801e9e0:	bf08      	it	eq
 801e9e2:	3401      	addeq	r4, #1
 801e9e4:	2701      	movs	r7, #1
 801e9e6:	e772      	b.n	801e8ce <_tzset_unlocked_r+0x132>
 801e9e8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801e9ec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e9f0:	213c      	movs	r1, #60	; 0x3c
 801e9f2:	fb01 2203 	mla	r2, r1, r3, r2
 801e9f6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801e9fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801e9fe:	fb01 2303 	mla	r3, r1, r3, r2
 801ea02:	435f      	muls	r7, r3
 801ea04:	e77a      	b.n	801e8fc <_tzset_unlocked_r+0x160>
 801ea06:	f04f 0901 	mov.w	r9, #1
 801ea0a:	e77d      	b.n	801e908 <_tzset_unlocked_r+0x16c>
 801ea0c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801ea10:	bf06      	itte	eq
 801ea12:	3401      	addeq	r4, #1
 801ea14:	4643      	moveq	r3, r8
 801ea16:	2344      	movne	r3, #68	; 0x44
 801ea18:	220a      	movs	r2, #10
 801ea1a:	a90b      	add	r1, sp, #44	; 0x2c
 801ea1c:	4620      	mov	r0, r4
 801ea1e:	9305      	str	r3, [sp, #20]
 801ea20:	f7ff fdde 	bl	801e5e0 <strtoul>
 801ea24:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801ea28:	9b05      	ldr	r3, [sp, #20]
 801ea2a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801ea2e:	45a0      	cmp	r8, r4
 801ea30:	d114      	bne.n	801ea5c <_tzset_unlocked_r+0x2c0>
 801ea32:	234d      	movs	r3, #77	; 0x4d
 801ea34:	f1b9 0f00 	cmp.w	r9, #0
 801ea38:	d107      	bne.n	801ea4a <_tzset_unlocked_r+0x2ae>
 801ea3a:	722b      	strb	r3, [r5, #8]
 801ea3c:	2103      	movs	r1, #3
 801ea3e:	2302      	movs	r3, #2
 801ea40:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801ea44:	f8c5 9014 	str.w	r9, [r5, #20]
 801ea48:	e791      	b.n	801e96e <_tzset_unlocked_r+0x1d2>
 801ea4a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801ea4e:	220b      	movs	r2, #11
 801ea50:	2301      	movs	r3, #1
 801ea52:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801ea56:	2300      	movs	r3, #0
 801ea58:	63eb      	str	r3, [r5, #60]	; 0x3c
 801ea5a:	e788      	b.n	801e96e <_tzset_unlocked_r+0x1d2>
 801ea5c:	b280      	uxth	r0, r0
 801ea5e:	723b      	strb	r3, [r7, #8]
 801ea60:	6178      	str	r0, [r7, #20]
 801ea62:	e784      	b.n	801e96e <_tzset_unlocked_r+0x1d2>
 801ea64:	080253e4 	.word	0x080253e4
 801ea68:	20000cb4 	.word	0x20000cb4
 801ea6c:	20000cbc 	.word	0x20000cbc
 801ea70:	080253e7 	.word	0x080253e7
 801ea74:	20000cb8 	.word	0x20000cb8
 801ea78:	20000168 	.word	0x20000168
 801ea7c:	20000ca7 	.word	0x20000ca7
 801ea80:	080253eb 	.word	0x080253eb
 801ea84:	0802540e 	.word	0x0802540e
 801ea88:	080253fa 	.word	0x080253fa
 801ea8c:	0802540d 	.word	0x0802540d
 801ea90:	20000c9c 	.word	0x20000c9c

0801ea94 <_vsniprintf_r>:
 801ea94:	b530      	push	{r4, r5, lr}
 801ea96:	1e14      	subs	r4, r2, #0
 801ea98:	4605      	mov	r5, r0
 801ea9a:	b09b      	sub	sp, #108	; 0x6c
 801ea9c:	4618      	mov	r0, r3
 801ea9e:	da05      	bge.n	801eaac <_vsniprintf_r+0x18>
 801eaa0:	238b      	movs	r3, #139	; 0x8b
 801eaa2:	602b      	str	r3, [r5, #0]
 801eaa4:	f04f 30ff 	mov.w	r0, #4294967295
 801eaa8:	b01b      	add	sp, #108	; 0x6c
 801eaaa:	bd30      	pop	{r4, r5, pc}
 801eaac:	f44f 7302 	mov.w	r3, #520	; 0x208
 801eab0:	f8ad 300c 	strh.w	r3, [sp, #12]
 801eab4:	bf14      	ite	ne
 801eab6:	f104 33ff 	addne.w	r3, r4, #4294967295
 801eaba:	4623      	moveq	r3, r4
 801eabc:	9302      	str	r3, [sp, #8]
 801eabe:	9305      	str	r3, [sp, #20]
 801eac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801eac4:	9100      	str	r1, [sp, #0]
 801eac6:	9104      	str	r1, [sp, #16]
 801eac8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801eacc:	4602      	mov	r2, r0
 801eace:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ead0:	4669      	mov	r1, sp
 801ead2:	4628      	mov	r0, r5
 801ead4:	f000 fba6 	bl	801f224 <_svfiprintf_r>
 801ead8:	1c43      	adds	r3, r0, #1
 801eada:	bfbc      	itt	lt
 801eadc:	238b      	movlt	r3, #139	; 0x8b
 801eade:	602b      	strlt	r3, [r5, #0]
 801eae0:	2c00      	cmp	r4, #0
 801eae2:	d0e1      	beq.n	801eaa8 <_vsniprintf_r+0x14>
 801eae4:	9b00      	ldr	r3, [sp, #0]
 801eae6:	2200      	movs	r2, #0
 801eae8:	701a      	strb	r2, [r3, #0]
 801eaea:	e7dd      	b.n	801eaa8 <_vsniprintf_r+0x14>

0801eaec <vsniprintf>:
 801eaec:	b507      	push	{r0, r1, r2, lr}
 801eaee:	9300      	str	r3, [sp, #0]
 801eaf0:	4613      	mov	r3, r2
 801eaf2:	460a      	mov	r2, r1
 801eaf4:	4601      	mov	r1, r0
 801eaf6:	4803      	ldr	r0, [pc, #12]	; (801eb04 <vsniprintf+0x18>)
 801eaf8:	6800      	ldr	r0, [r0, #0]
 801eafa:	f7ff ffcb 	bl	801ea94 <_vsniprintf_r>
 801eafe:	b003      	add	sp, #12
 801eb00:	f85d fb04 	ldr.w	pc, [sp], #4
 801eb04:	20000104 	.word	0x20000104

0801eb08 <__swbuf_r>:
 801eb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb0a:	460e      	mov	r6, r1
 801eb0c:	4614      	mov	r4, r2
 801eb0e:	4605      	mov	r5, r0
 801eb10:	b118      	cbz	r0, 801eb1a <__swbuf_r+0x12>
 801eb12:	6983      	ldr	r3, [r0, #24]
 801eb14:	b90b      	cbnz	r3, 801eb1a <__swbuf_r+0x12>
 801eb16:	f7fe f93f 	bl	801cd98 <__sinit>
 801eb1a:	4b21      	ldr	r3, [pc, #132]	; (801eba0 <__swbuf_r+0x98>)
 801eb1c:	429c      	cmp	r4, r3
 801eb1e:	d12b      	bne.n	801eb78 <__swbuf_r+0x70>
 801eb20:	686c      	ldr	r4, [r5, #4]
 801eb22:	69a3      	ldr	r3, [r4, #24]
 801eb24:	60a3      	str	r3, [r4, #8]
 801eb26:	89a3      	ldrh	r3, [r4, #12]
 801eb28:	071a      	lsls	r2, r3, #28
 801eb2a:	d52f      	bpl.n	801eb8c <__swbuf_r+0x84>
 801eb2c:	6923      	ldr	r3, [r4, #16]
 801eb2e:	b36b      	cbz	r3, 801eb8c <__swbuf_r+0x84>
 801eb30:	6923      	ldr	r3, [r4, #16]
 801eb32:	6820      	ldr	r0, [r4, #0]
 801eb34:	1ac0      	subs	r0, r0, r3
 801eb36:	6963      	ldr	r3, [r4, #20]
 801eb38:	b2f6      	uxtb	r6, r6
 801eb3a:	4283      	cmp	r3, r0
 801eb3c:	4637      	mov	r7, r6
 801eb3e:	dc04      	bgt.n	801eb4a <__swbuf_r+0x42>
 801eb40:	4621      	mov	r1, r4
 801eb42:	4628      	mov	r0, r5
 801eb44:	f7fe f882 	bl	801cc4c <_fflush_r>
 801eb48:	bb30      	cbnz	r0, 801eb98 <__swbuf_r+0x90>
 801eb4a:	68a3      	ldr	r3, [r4, #8]
 801eb4c:	3b01      	subs	r3, #1
 801eb4e:	60a3      	str	r3, [r4, #8]
 801eb50:	6823      	ldr	r3, [r4, #0]
 801eb52:	1c5a      	adds	r2, r3, #1
 801eb54:	6022      	str	r2, [r4, #0]
 801eb56:	701e      	strb	r6, [r3, #0]
 801eb58:	6963      	ldr	r3, [r4, #20]
 801eb5a:	3001      	adds	r0, #1
 801eb5c:	4283      	cmp	r3, r0
 801eb5e:	d004      	beq.n	801eb6a <__swbuf_r+0x62>
 801eb60:	89a3      	ldrh	r3, [r4, #12]
 801eb62:	07db      	lsls	r3, r3, #31
 801eb64:	d506      	bpl.n	801eb74 <__swbuf_r+0x6c>
 801eb66:	2e0a      	cmp	r6, #10
 801eb68:	d104      	bne.n	801eb74 <__swbuf_r+0x6c>
 801eb6a:	4621      	mov	r1, r4
 801eb6c:	4628      	mov	r0, r5
 801eb6e:	f7fe f86d 	bl	801cc4c <_fflush_r>
 801eb72:	b988      	cbnz	r0, 801eb98 <__swbuf_r+0x90>
 801eb74:	4638      	mov	r0, r7
 801eb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb78:	4b0a      	ldr	r3, [pc, #40]	; (801eba4 <__swbuf_r+0x9c>)
 801eb7a:	429c      	cmp	r4, r3
 801eb7c:	d101      	bne.n	801eb82 <__swbuf_r+0x7a>
 801eb7e:	68ac      	ldr	r4, [r5, #8]
 801eb80:	e7cf      	b.n	801eb22 <__swbuf_r+0x1a>
 801eb82:	4b09      	ldr	r3, [pc, #36]	; (801eba8 <__swbuf_r+0xa0>)
 801eb84:	429c      	cmp	r4, r3
 801eb86:	bf08      	it	eq
 801eb88:	68ec      	ldreq	r4, [r5, #12]
 801eb8a:	e7ca      	b.n	801eb22 <__swbuf_r+0x1a>
 801eb8c:	4621      	mov	r1, r4
 801eb8e:	4628      	mov	r0, r5
 801eb90:	f000 f81e 	bl	801ebd0 <__swsetup_r>
 801eb94:	2800      	cmp	r0, #0
 801eb96:	d0cb      	beq.n	801eb30 <__swbuf_r+0x28>
 801eb98:	f04f 37ff 	mov.w	r7, #4294967295
 801eb9c:	e7ea      	b.n	801eb74 <__swbuf_r+0x6c>
 801eb9e:	bf00      	nop
 801eba0:	08024fe8 	.word	0x08024fe8
 801eba4:	08025008 	.word	0x08025008
 801eba8:	08024fc8 	.word	0x08024fc8

0801ebac <_write_r>:
 801ebac:	b538      	push	{r3, r4, r5, lr}
 801ebae:	4d07      	ldr	r5, [pc, #28]	; (801ebcc <_write_r+0x20>)
 801ebb0:	4604      	mov	r4, r0
 801ebb2:	4608      	mov	r0, r1
 801ebb4:	4611      	mov	r1, r2
 801ebb6:	2200      	movs	r2, #0
 801ebb8:	602a      	str	r2, [r5, #0]
 801ebba:	461a      	mov	r2, r3
 801ebbc:	f7e2 f908 	bl	8000dd0 <_write>
 801ebc0:	1c43      	adds	r3, r0, #1
 801ebc2:	d102      	bne.n	801ebca <_write_r+0x1e>
 801ebc4:	682b      	ldr	r3, [r5, #0]
 801ebc6:	b103      	cbz	r3, 801ebca <_write_r+0x1e>
 801ebc8:	6023      	str	r3, [r4, #0]
 801ebca:	bd38      	pop	{r3, r4, r5, pc}
 801ebcc:	20000d60 	.word	0x20000d60

0801ebd0 <__swsetup_r>:
 801ebd0:	4b32      	ldr	r3, [pc, #200]	; (801ec9c <__swsetup_r+0xcc>)
 801ebd2:	b570      	push	{r4, r5, r6, lr}
 801ebd4:	681d      	ldr	r5, [r3, #0]
 801ebd6:	4606      	mov	r6, r0
 801ebd8:	460c      	mov	r4, r1
 801ebda:	b125      	cbz	r5, 801ebe6 <__swsetup_r+0x16>
 801ebdc:	69ab      	ldr	r3, [r5, #24]
 801ebde:	b913      	cbnz	r3, 801ebe6 <__swsetup_r+0x16>
 801ebe0:	4628      	mov	r0, r5
 801ebe2:	f7fe f8d9 	bl	801cd98 <__sinit>
 801ebe6:	4b2e      	ldr	r3, [pc, #184]	; (801eca0 <__swsetup_r+0xd0>)
 801ebe8:	429c      	cmp	r4, r3
 801ebea:	d10f      	bne.n	801ec0c <__swsetup_r+0x3c>
 801ebec:	686c      	ldr	r4, [r5, #4]
 801ebee:	89a3      	ldrh	r3, [r4, #12]
 801ebf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ebf4:	0719      	lsls	r1, r3, #28
 801ebf6:	d42c      	bmi.n	801ec52 <__swsetup_r+0x82>
 801ebf8:	06dd      	lsls	r5, r3, #27
 801ebfa:	d411      	bmi.n	801ec20 <__swsetup_r+0x50>
 801ebfc:	2309      	movs	r3, #9
 801ebfe:	6033      	str	r3, [r6, #0]
 801ec00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ec04:	81a3      	strh	r3, [r4, #12]
 801ec06:	f04f 30ff 	mov.w	r0, #4294967295
 801ec0a:	e03e      	b.n	801ec8a <__swsetup_r+0xba>
 801ec0c:	4b25      	ldr	r3, [pc, #148]	; (801eca4 <__swsetup_r+0xd4>)
 801ec0e:	429c      	cmp	r4, r3
 801ec10:	d101      	bne.n	801ec16 <__swsetup_r+0x46>
 801ec12:	68ac      	ldr	r4, [r5, #8]
 801ec14:	e7eb      	b.n	801ebee <__swsetup_r+0x1e>
 801ec16:	4b24      	ldr	r3, [pc, #144]	; (801eca8 <__swsetup_r+0xd8>)
 801ec18:	429c      	cmp	r4, r3
 801ec1a:	bf08      	it	eq
 801ec1c:	68ec      	ldreq	r4, [r5, #12]
 801ec1e:	e7e6      	b.n	801ebee <__swsetup_r+0x1e>
 801ec20:	0758      	lsls	r0, r3, #29
 801ec22:	d512      	bpl.n	801ec4a <__swsetup_r+0x7a>
 801ec24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ec26:	b141      	cbz	r1, 801ec3a <__swsetup_r+0x6a>
 801ec28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ec2c:	4299      	cmp	r1, r3
 801ec2e:	d002      	beq.n	801ec36 <__swsetup_r+0x66>
 801ec30:	4630      	mov	r0, r6
 801ec32:	f7fe fd01 	bl	801d638 <_free_r>
 801ec36:	2300      	movs	r3, #0
 801ec38:	6363      	str	r3, [r4, #52]	; 0x34
 801ec3a:	89a3      	ldrh	r3, [r4, #12]
 801ec3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ec40:	81a3      	strh	r3, [r4, #12]
 801ec42:	2300      	movs	r3, #0
 801ec44:	6063      	str	r3, [r4, #4]
 801ec46:	6923      	ldr	r3, [r4, #16]
 801ec48:	6023      	str	r3, [r4, #0]
 801ec4a:	89a3      	ldrh	r3, [r4, #12]
 801ec4c:	f043 0308 	orr.w	r3, r3, #8
 801ec50:	81a3      	strh	r3, [r4, #12]
 801ec52:	6923      	ldr	r3, [r4, #16]
 801ec54:	b94b      	cbnz	r3, 801ec6a <__swsetup_r+0x9a>
 801ec56:	89a3      	ldrh	r3, [r4, #12]
 801ec58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ec5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ec60:	d003      	beq.n	801ec6a <__swsetup_r+0x9a>
 801ec62:	4621      	mov	r1, r4
 801ec64:	4630      	mov	r0, r6
 801ec66:	f7fe fc71 	bl	801d54c <__smakebuf_r>
 801ec6a:	89a0      	ldrh	r0, [r4, #12]
 801ec6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ec70:	f010 0301 	ands.w	r3, r0, #1
 801ec74:	d00a      	beq.n	801ec8c <__swsetup_r+0xbc>
 801ec76:	2300      	movs	r3, #0
 801ec78:	60a3      	str	r3, [r4, #8]
 801ec7a:	6963      	ldr	r3, [r4, #20]
 801ec7c:	425b      	negs	r3, r3
 801ec7e:	61a3      	str	r3, [r4, #24]
 801ec80:	6923      	ldr	r3, [r4, #16]
 801ec82:	b943      	cbnz	r3, 801ec96 <__swsetup_r+0xc6>
 801ec84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ec88:	d1ba      	bne.n	801ec00 <__swsetup_r+0x30>
 801ec8a:	bd70      	pop	{r4, r5, r6, pc}
 801ec8c:	0781      	lsls	r1, r0, #30
 801ec8e:	bf58      	it	pl
 801ec90:	6963      	ldrpl	r3, [r4, #20]
 801ec92:	60a3      	str	r3, [r4, #8]
 801ec94:	e7f4      	b.n	801ec80 <__swsetup_r+0xb0>
 801ec96:	2000      	movs	r0, #0
 801ec98:	e7f7      	b.n	801ec8a <__swsetup_r+0xba>
 801ec9a:	bf00      	nop
 801ec9c:	20000104 	.word	0x20000104
 801eca0:	08024fe8 	.word	0x08024fe8
 801eca4:	08025008 	.word	0x08025008
 801eca8:	08024fc8 	.word	0x08024fc8

0801ecac <__register_exitproc>:
 801ecac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ecb0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801ed6c <__register_exitproc+0xc0>
 801ecb4:	4606      	mov	r6, r0
 801ecb6:	f8d8 0000 	ldr.w	r0, [r8]
 801ecba:	461f      	mov	r7, r3
 801ecbc:	460d      	mov	r5, r1
 801ecbe:	4691      	mov	r9, r2
 801ecc0:	f7fe fc1d 	bl	801d4fe <__retarget_lock_acquire_recursive>
 801ecc4:	4b25      	ldr	r3, [pc, #148]	; (801ed5c <__register_exitproc+0xb0>)
 801ecc6:	681c      	ldr	r4, [r3, #0]
 801ecc8:	b934      	cbnz	r4, 801ecd8 <__register_exitproc+0x2c>
 801ecca:	4c25      	ldr	r4, [pc, #148]	; (801ed60 <__register_exitproc+0xb4>)
 801eccc:	601c      	str	r4, [r3, #0]
 801ecce:	4b25      	ldr	r3, [pc, #148]	; (801ed64 <__register_exitproc+0xb8>)
 801ecd0:	b113      	cbz	r3, 801ecd8 <__register_exitproc+0x2c>
 801ecd2:	681b      	ldr	r3, [r3, #0]
 801ecd4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801ecd8:	6863      	ldr	r3, [r4, #4]
 801ecda:	2b1f      	cmp	r3, #31
 801ecdc:	dd07      	ble.n	801ecee <__register_exitproc+0x42>
 801ecde:	f8d8 0000 	ldr.w	r0, [r8]
 801ece2:	f7fe fc0e 	bl	801d502 <__retarget_lock_release_recursive>
 801ece6:	f04f 30ff 	mov.w	r0, #4294967295
 801ecea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ecee:	b34e      	cbz	r6, 801ed44 <__register_exitproc+0x98>
 801ecf0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801ecf4:	b988      	cbnz	r0, 801ed1a <__register_exitproc+0x6e>
 801ecf6:	4b1c      	ldr	r3, [pc, #112]	; (801ed68 <__register_exitproc+0xbc>)
 801ecf8:	b923      	cbnz	r3, 801ed04 <__register_exitproc+0x58>
 801ecfa:	f8d8 0000 	ldr.w	r0, [r8]
 801ecfe:	f7fe fbff 	bl	801d500 <__retarget_lock_release>
 801ed02:	e7f0      	b.n	801ece6 <__register_exitproc+0x3a>
 801ed04:	f44f 7084 	mov.w	r0, #264	; 0x108
 801ed08:	f7fe fc60 	bl	801d5cc <malloc>
 801ed0c:	2800      	cmp	r0, #0
 801ed0e:	d0f4      	beq.n	801ecfa <__register_exitproc+0x4e>
 801ed10:	2300      	movs	r3, #0
 801ed12:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801ed16:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801ed1a:	6863      	ldr	r3, [r4, #4]
 801ed1c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801ed20:	2201      	movs	r2, #1
 801ed22:	409a      	lsls	r2, r3
 801ed24:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801ed28:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801ed2c:	4313      	orrs	r3, r2
 801ed2e:	2e02      	cmp	r6, #2
 801ed30:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801ed34:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801ed38:	bf02      	ittt	eq
 801ed3a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801ed3e:	431a      	orreq	r2, r3
 801ed40:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801ed44:	6863      	ldr	r3, [r4, #4]
 801ed46:	f8d8 0000 	ldr.w	r0, [r8]
 801ed4a:	1c5a      	adds	r2, r3, #1
 801ed4c:	3302      	adds	r3, #2
 801ed4e:	6062      	str	r2, [r4, #4]
 801ed50:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801ed54:	f7fe fbd5 	bl	801d502 <__retarget_lock_release_recursive>
 801ed58:	2000      	movs	r0, #0
 801ed5a:	e7c6      	b.n	801ecea <__register_exitproc+0x3e>
 801ed5c:	20000d4c 	.word	0x20000d4c
 801ed60:	20000cc0 	.word	0x20000cc0
 801ed64:	00000000 	.word	0x00000000
 801ed68:	0801d5cd 	.word	0x0801d5cd
 801ed6c:	20000170 	.word	0x20000170

0801ed70 <abs>:
 801ed70:	2800      	cmp	r0, #0
 801ed72:	bfb8      	it	lt
 801ed74:	4240      	neglt	r0, r0
 801ed76:	4770      	bx	lr

0801ed78 <__assert_func>:
 801ed78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ed7a:	4614      	mov	r4, r2
 801ed7c:	461a      	mov	r2, r3
 801ed7e:	4b09      	ldr	r3, [pc, #36]	; (801eda4 <__assert_func+0x2c>)
 801ed80:	681b      	ldr	r3, [r3, #0]
 801ed82:	4605      	mov	r5, r0
 801ed84:	68d8      	ldr	r0, [r3, #12]
 801ed86:	b14c      	cbz	r4, 801ed9c <__assert_func+0x24>
 801ed88:	4b07      	ldr	r3, [pc, #28]	; (801eda8 <__assert_func+0x30>)
 801ed8a:	9100      	str	r1, [sp, #0]
 801ed8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ed90:	4906      	ldr	r1, [pc, #24]	; (801edac <__assert_func+0x34>)
 801ed92:	462b      	mov	r3, r5
 801ed94:	f000 f854 	bl	801ee40 <fiprintf>
 801ed98:	f7fd fe42 	bl	801ca20 <abort>
 801ed9c:	4b04      	ldr	r3, [pc, #16]	; (801edb0 <__assert_func+0x38>)
 801ed9e:	461c      	mov	r4, r3
 801eda0:	e7f3      	b.n	801ed8a <__assert_func+0x12>
 801eda2:	bf00      	nop
 801eda4:	20000104 	.word	0x20000104
 801eda8:	08025420 	.word	0x08025420
 801edac:	0802542d 	.word	0x0802542d
 801edb0:	0802545b 	.word	0x0802545b

0801edb4 <_close_r>:
 801edb4:	b538      	push	{r3, r4, r5, lr}
 801edb6:	4d06      	ldr	r5, [pc, #24]	; (801edd0 <_close_r+0x1c>)
 801edb8:	2300      	movs	r3, #0
 801edba:	4604      	mov	r4, r0
 801edbc:	4608      	mov	r0, r1
 801edbe:	602b      	str	r3, [r5, #0]
 801edc0:	f7e2 f822 	bl	8000e08 <_close>
 801edc4:	1c43      	adds	r3, r0, #1
 801edc6:	d102      	bne.n	801edce <_close_r+0x1a>
 801edc8:	682b      	ldr	r3, [r5, #0]
 801edca:	b103      	cbz	r3, 801edce <_close_r+0x1a>
 801edcc:	6023      	str	r3, [r4, #0]
 801edce:	bd38      	pop	{r3, r4, r5, pc}
 801edd0:	20000d60 	.word	0x20000d60

0801edd4 <__sflags>:
 801edd4:	780b      	ldrb	r3, [r1, #0]
 801edd6:	2b72      	cmp	r3, #114	; 0x72
 801edd8:	b530      	push	{r4, r5, lr}
 801edda:	d022      	beq.n	801ee22 <__sflags+0x4e>
 801eddc:	2b77      	cmp	r3, #119	; 0x77
 801edde:	d024      	beq.n	801ee2a <__sflags+0x56>
 801ede0:	2b61      	cmp	r3, #97	; 0x61
 801ede2:	d027      	beq.n	801ee34 <__sflags+0x60>
 801ede4:	2316      	movs	r3, #22
 801ede6:	6003      	str	r3, [r0, #0]
 801ede8:	2000      	movs	r0, #0
 801edea:	bd30      	pop	{r4, r5, pc}
 801edec:	2d62      	cmp	r5, #98	; 0x62
 801edee:	d012      	beq.n	801ee16 <__sflags+0x42>
 801edf0:	2d78      	cmp	r5, #120	; 0x78
 801edf2:	d013      	beq.n	801ee1c <__sflags+0x48>
 801edf4:	2d2b      	cmp	r5, #43	; 0x2b
 801edf6:	d107      	bne.n	801ee08 <__sflags+0x34>
 801edf8:	f020 001c 	bic.w	r0, r0, #28
 801edfc:	f023 0303 	bic.w	r3, r3, #3
 801ee00:	f040 0010 	orr.w	r0, r0, #16
 801ee04:	f043 0302 	orr.w	r3, r3, #2
 801ee08:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801ee0c:	2d00      	cmp	r5, #0
 801ee0e:	d1ed      	bne.n	801edec <__sflags+0x18>
 801ee10:	4323      	orrs	r3, r4
 801ee12:	6013      	str	r3, [r2, #0]
 801ee14:	e7e9      	b.n	801edea <__sflags+0x16>
 801ee16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ee1a:	e7f5      	b.n	801ee08 <__sflags+0x34>
 801ee1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ee20:	e7f2      	b.n	801ee08 <__sflags+0x34>
 801ee22:	2400      	movs	r4, #0
 801ee24:	4623      	mov	r3, r4
 801ee26:	2004      	movs	r0, #4
 801ee28:	e7ee      	b.n	801ee08 <__sflags+0x34>
 801ee2a:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801ee2e:	2301      	movs	r3, #1
 801ee30:	2008      	movs	r0, #8
 801ee32:	e7e9      	b.n	801ee08 <__sflags+0x34>
 801ee34:	f44f 7402 	mov.w	r4, #520	; 0x208
 801ee38:	2301      	movs	r3, #1
 801ee3a:	f44f 7084 	mov.w	r0, #264	; 0x108
 801ee3e:	e7e3      	b.n	801ee08 <__sflags+0x34>

0801ee40 <fiprintf>:
 801ee40:	b40e      	push	{r1, r2, r3}
 801ee42:	b503      	push	{r0, r1, lr}
 801ee44:	4601      	mov	r1, r0
 801ee46:	ab03      	add	r3, sp, #12
 801ee48:	4805      	ldr	r0, [pc, #20]	; (801ee60 <fiprintf+0x20>)
 801ee4a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ee4e:	6800      	ldr	r0, [r0, #0]
 801ee50:	9301      	str	r3, [sp, #4]
 801ee52:	f000 fb11 	bl	801f478 <_vfiprintf_r>
 801ee56:	b002      	add	sp, #8
 801ee58:	f85d eb04 	ldr.w	lr, [sp], #4
 801ee5c:	b003      	add	sp, #12
 801ee5e:	4770      	bx	lr
 801ee60:	20000104 	.word	0x20000104

0801ee64 <_fstat_r>:
 801ee64:	b538      	push	{r3, r4, r5, lr}
 801ee66:	4d07      	ldr	r5, [pc, #28]	; (801ee84 <_fstat_r+0x20>)
 801ee68:	2300      	movs	r3, #0
 801ee6a:	4604      	mov	r4, r0
 801ee6c:	4608      	mov	r0, r1
 801ee6e:	4611      	mov	r1, r2
 801ee70:	602b      	str	r3, [r5, #0]
 801ee72:	f7e1 ffd5 	bl	8000e20 <_fstat>
 801ee76:	1c43      	adds	r3, r0, #1
 801ee78:	d102      	bne.n	801ee80 <_fstat_r+0x1c>
 801ee7a:	682b      	ldr	r3, [r5, #0]
 801ee7c:	b103      	cbz	r3, 801ee80 <_fstat_r+0x1c>
 801ee7e:	6023      	str	r3, [r4, #0]
 801ee80:	bd38      	pop	{r3, r4, r5, pc}
 801ee82:	bf00      	nop
 801ee84:	20000d60 	.word	0x20000d60

0801ee88 <_findenv_r>:
 801ee88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee8c:	4607      	mov	r7, r0
 801ee8e:	4689      	mov	r9, r1
 801ee90:	4616      	mov	r6, r2
 801ee92:	f000 fe97 	bl	801fbc4 <__env_lock>
 801ee96:	4b18      	ldr	r3, [pc, #96]	; (801eef8 <_findenv_r+0x70>)
 801ee98:	681c      	ldr	r4, [r3, #0]
 801ee9a:	469a      	mov	sl, r3
 801ee9c:	b134      	cbz	r4, 801eeac <_findenv_r+0x24>
 801ee9e:	464b      	mov	r3, r9
 801eea0:	4698      	mov	r8, r3
 801eea2:	f813 1b01 	ldrb.w	r1, [r3], #1
 801eea6:	b139      	cbz	r1, 801eeb8 <_findenv_r+0x30>
 801eea8:	293d      	cmp	r1, #61	; 0x3d
 801eeaa:	d1f9      	bne.n	801eea0 <_findenv_r+0x18>
 801eeac:	4638      	mov	r0, r7
 801eeae:	f000 fe8f 	bl	801fbd0 <__env_unlock>
 801eeb2:	2000      	movs	r0, #0
 801eeb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eeb8:	eba8 0809 	sub.w	r8, r8, r9
 801eebc:	46a3      	mov	fp, r4
 801eebe:	f854 0b04 	ldr.w	r0, [r4], #4
 801eec2:	2800      	cmp	r0, #0
 801eec4:	d0f2      	beq.n	801eeac <_findenv_r+0x24>
 801eec6:	4642      	mov	r2, r8
 801eec8:	4649      	mov	r1, r9
 801eeca:	f000 fe5b 	bl	801fb84 <strncmp>
 801eece:	2800      	cmp	r0, #0
 801eed0:	d1f4      	bne.n	801eebc <_findenv_r+0x34>
 801eed2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801eed6:	eb03 0508 	add.w	r5, r3, r8
 801eeda:	f813 3008 	ldrb.w	r3, [r3, r8]
 801eede:	2b3d      	cmp	r3, #61	; 0x3d
 801eee0:	d1ec      	bne.n	801eebc <_findenv_r+0x34>
 801eee2:	f8da 3000 	ldr.w	r3, [sl]
 801eee6:	ebab 0303 	sub.w	r3, fp, r3
 801eeea:	109b      	asrs	r3, r3, #2
 801eeec:	4638      	mov	r0, r7
 801eeee:	6033      	str	r3, [r6, #0]
 801eef0:	f000 fe6e 	bl	801fbd0 <__env_unlock>
 801eef4:	1c68      	adds	r0, r5, #1
 801eef6:	e7dd      	b.n	801eeb4 <_findenv_r+0x2c>
 801eef8:	20000000 	.word	0x20000000

0801eefc <_getenv_r>:
 801eefc:	b507      	push	{r0, r1, r2, lr}
 801eefe:	aa01      	add	r2, sp, #4
 801ef00:	f7ff ffc2 	bl	801ee88 <_findenv_r>
 801ef04:	b003      	add	sp, #12
 801ef06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801ef0c <_gettimeofday_r>:
 801ef0c:	b538      	push	{r3, r4, r5, lr}
 801ef0e:	4d07      	ldr	r5, [pc, #28]	; (801ef2c <_gettimeofday_r+0x20>)
 801ef10:	2300      	movs	r3, #0
 801ef12:	4604      	mov	r4, r0
 801ef14:	4608      	mov	r0, r1
 801ef16:	4611      	mov	r1, r2
 801ef18:	602b      	str	r3, [r5, #0]
 801ef1a:	f001 fa99 	bl	8020450 <_gettimeofday>
 801ef1e:	1c43      	adds	r3, r0, #1
 801ef20:	d102      	bne.n	801ef28 <_gettimeofday_r+0x1c>
 801ef22:	682b      	ldr	r3, [r5, #0]
 801ef24:	b103      	cbz	r3, 801ef28 <_gettimeofday_r+0x1c>
 801ef26:	6023      	str	r3, [r4, #0]
 801ef28:	bd38      	pop	{r3, r4, r5, pc}
 801ef2a:	bf00      	nop
 801ef2c:	20000d60 	.word	0x20000d60

0801ef30 <__gettzinfo>:
 801ef30:	4800      	ldr	r0, [pc, #0]	; (801ef34 <__gettzinfo+0x4>)
 801ef32:	4770      	bx	lr
 801ef34:	20000178 	.word	0x20000178

0801ef38 <gmtime_r>:
 801ef38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef3c:	e9d0 6700 	ldrd	r6, r7, [r0]
 801ef40:	460c      	mov	r4, r1
 801ef42:	4a51      	ldr	r2, [pc, #324]	; (801f088 <gmtime_r+0x150>)
 801ef44:	2300      	movs	r3, #0
 801ef46:	4630      	mov	r0, r6
 801ef48:	4639      	mov	r1, r7
 801ef4a:	f7e1 fc33 	bl	80007b4 <__aeabi_ldivmod>
 801ef4e:	4639      	mov	r1, r7
 801ef50:	4605      	mov	r5, r0
 801ef52:	4a4d      	ldr	r2, [pc, #308]	; (801f088 <gmtime_r+0x150>)
 801ef54:	4630      	mov	r0, r6
 801ef56:	2300      	movs	r3, #0
 801ef58:	f7e1 fc2c 	bl	80007b4 <__aeabi_ldivmod>
 801ef5c:	2a00      	cmp	r2, #0
 801ef5e:	bfbc      	itt	lt
 801ef60:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801ef64:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801ef68:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ef6c:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801ef70:	fbb2 f3f1 	udiv	r3, r2, r1
 801ef74:	fb01 2213 	mls	r2, r1, r3, r2
 801ef78:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801ef7c:	bfac      	ite	ge
 801ef7e:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801ef82:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801ef86:	60a3      	str	r3, [r4, #8]
 801ef88:	fbb2 f3f1 	udiv	r3, r2, r1
 801ef8c:	fb01 2213 	mls	r2, r1, r3, r2
 801ef90:	6063      	str	r3, [r4, #4]
 801ef92:	6022      	str	r2, [r4, #0]
 801ef94:	1cc3      	adds	r3, r0, #3
 801ef96:	2207      	movs	r2, #7
 801ef98:	fb93 f2f2 	sdiv	r2, r3, r2
 801ef9c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801efa0:	1a9b      	subs	r3, r3, r2
 801efa2:	bf48      	it	mi
 801efa4:	3307      	addmi	r3, #7
 801efa6:	2800      	cmp	r0, #0
 801efa8:	61a3      	str	r3, [r4, #24]
 801efaa:	bfb8      	it	lt
 801efac:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801efb0:	4936      	ldr	r1, [pc, #216]	; (801f08c <gmtime_r+0x154>)
 801efb2:	bfae      	itee	ge
 801efb4:	fb90 f1f1 	sdivge	r1, r0, r1
 801efb8:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801efbc:	fb93 f1f1 	sdivlt	r1, r3, r1
 801efc0:	4b33      	ldr	r3, [pc, #204]	; (801f090 <gmtime_r+0x158>)
 801efc2:	fb03 0001 	mla	r0, r3, r1, r0
 801efc6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801efca:	fbb0 f2f2 	udiv	r2, r0, r2
 801efce:	4402      	add	r2, r0
 801efd0:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801efd4:	fbb0 f3fc 	udiv	r3, r0, ip
 801efd8:	1ad2      	subs	r2, r2, r3
 801efda:	f240 176d 	movw	r7, #365	; 0x16d
 801efde:	4b2d      	ldr	r3, [pc, #180]	; (801f094 <gmtime_r+0x15c>)
 801efe0:	fbb0 f3f3 	udiv	r3, r0, r3
 801efe4:	2664      	movs	r6, #100	; 0x64
 801efe6:	1ad3      	subs	r3, r2, r3
 801efe8:	fbb3 f5f7 	udiv	r5, r3, r7
 801efec:	fbb3 f3fc 	udiv	r3, r3, ip
 801eff0:	fbb5 f2f6 	udiv	r2, r5, r6
 801eff4:	1ad3      	subs	r3, r2, r3
 801eff6:	4403      	add	r3, r0
 801eff8:	fb07 3315 	mls	r3, r7, r5, r3
 801effc:	2099      	movs	r0, #153	; 0x99
 801effe:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801f002:	f10c 0c02 	add.w	ip, ip, #2
 801f006:	f103 0e01 	add.w	lr, r3, #1
 801f00a:	fbbc f7f0 	udiv	r7, ip, r0
 801f00e:	4378      	muls	r0, r7
 801f010:	3002      	adds	r0, #2
 801f012:	f04f 0805 	mov.w	r8, #5
 801f016:	fbb0 f0f8 	udiv	r0, r0, r8
 801f01a:	ebae 0000 	sub.w	r0, lr, r0
 801f01e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801f022:	45f4      	cmp	ip, lr
 801f024:	bf94      	ite	ls
 801f026:	f04f 0c02 	movls.w	ip, #2
 801f02a:	f06f 0c09 	mvnhi.w	ip, #9
 801f02e:	4467      	add	r7, ip
 801f030:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801f034:	fb0c 5101 	mla	r1, ip, r1, r5
 801f038:	2f01      	cmp	r7, #1
 801f03a:	bf98      	it	ls
 801f03c:	3101      	addls	r1, #1
 801f03e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801f042:	d30c      	bcc.n	801f05e <gmtime_r+0x126>
 801f044:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801f048:	61e3      	str	r3, [r4, #28]
 801f04a:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801f04e:	2300      	movs	r3, #0
 801f050:	60e0      	str	r0, [r4, #12]
 801f052:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801f056:	6223      	str	r3, [r4, #32]
 801f058:	4620      	mov	r0, r4
 801f05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f05e:	f015 0f03 	tst.w	r5, #3
 801f062:	d102      	bne.n	801f06a <gmtime_r+0x132>
 801f064:	fb06 5212 	mls	r2, r6, r2, r5
 801f068:	b95a      	cbnz	r2, 801f082 <gmtime_r+0x14a>
 801f06a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801f06e:	fbb5 f2f6 	udiv	r2, r5, r6
 801f072:	fb06 5212 	mls	r2, r6, r2, r5
 801f076:	fab2 f282 	clz	r2, r2
 801f07a:	0952      	lsrs	r2, r2, #5
 801f07c:	333b      	adds	r3, #59	; 0x3b
 801f07e:	4413      	add	r3, r2
 801f080:	e7e2      	b.n	801f048 <gmtime_r+0x110>
 801f082:	2201      	movs	r2, #1
 801f084:	e7fa      	b.n	801f07c <gmtime_r+0x144>
 801f086:	bf00      	nop
 801f088:	00015180 	.word	0x00015180
 801f08c:	00023ab1 	.word	0x00023ab1
 801f090:	fffdc54f 	.word	0xfffdc54f
 801f094:	00023ab0 	.word	0x00023ab0

0801f098 <_isatty_r>:
 801f098:	b538      	push	{r3, r4, r5, lr}
 801f09a:	4d06      	ldr	r5, [pc, #24]	; (801f0b4 <_isatty_r+0x1c>)
 801f09c:	2300      	movs	r3, #0
 801f09e:	4604      	mov	r4, r0
 801f0a0:	4608      	mov	r0, r1
 801f0a2:	602b      	str	r3, [r5, #0]
 801f0a4:	f7e1 fecc 	bl	8000e40 <_isatty>
 801f0a8:	1c43      	adds	r3, r0, #1
 801f0aa:	d102      	bne.n	801f0b2 <_isatty_r+0x1a>
 801f0ac:	682b      	ldr	r3, [r5, #0]
 801f0ae:	b103      	cbz	r3, 801f0b2 <_isatty_r+0x1a>
 801f0b0:	6023      	str	r3, [r4, #0]
 801f0b2:	bd38      	pop	{r3, r4, r5, pc}
 801f0b4:	20000d60 	.word	0x20000d60

0801f0b8 <labs>:
 801f0b8:	2800      	cmp	r0, #0
 801f0ba:	bfb8      	it	lt
 801f0bc:	4240      	neglt	r0, r0
 801f0be:	4770      	bx	lr

0801f0c0 <_lseek_r>:
 801f0c0:	b538      	push	{r3, r4, r5, lr}
 801f0c2:	4d07      	ldr	r5, [pc, #28]	; (801f0e0 <_lseek_r+0x20>)
 801f0c4:	4604      	mov	r4, r0
 801f0c6:	4608      	mov	r0, r1
 801f0c8:	4611      	mov	r1, r2
 801f0ca:	2200      	movs	r2, #0
 801f0cc:	602a      	str	r2, [r5, #0]
 801f0ce:	461a      	mov	r2, r3
 801f0d0:	f7e1 fec1 	bl	8000e56 <_lseek>
 801f0d4:	1c43      	adds	r3, r0, #1
 801f0d6:	d102      	bne.n	801f0de <_lseek_r+0x1e>
 801f0d8:	682b      	ldr	r3, [r5, #0]
 801f0da:	b103      	cbz	r3, 801f0de <_lseek_r+0x1e>
 801f0dc:	6023      	str	r3, [r4, #0]
 801f0de:	bd38      	pop	{r3, r4, r5, pc}
 801f0e0:	20000d60 	.word	0x20000d60

0801f0e4 <__ascii_mbtowc>:
 801f0e4:	b082      	sub	sp, #8
 801f0e6:	b901      	cbnz	r1, 801f0ea <__ascii_mbtowc+0x6>
 801f0e8:	a901      	add	r1, sp, #4
 801f0ea:	b142      	cbz	r2, 801f0fe <__ascii_mbtowc+0x1a>
 801f0ec:	b14b      	cbz	r3, 801f102 <__ascii_mbtowc+0x1e>
 801f0ee:	7813      	ldrb	r3, [r2, #0]
 801f0f0:	600b      	str	r3, [r1, #0]
 801f0f2:	7812      	ldrb	r2, [r2, #0]
 801f0f4:	1e10      	subs	r0, r2, #0
 801f0f6:	bf18      	it	ne
 801f0f8:	2001      	movne	r0, #1
 801f0fa:	b002      	add	sp, #8
 801f0fc:	4770      	bx	lr
 801f0fe:	4610      	mov	r0, r2
 801f100:	e7fb      	b.n	801f0fa <__ascii_mbtowc+0x16>
 801f102:	f06f 0001 	mvn.w	r0, #1
 801f106:	e7f8      	b.n	801f0fa <__ascii_mbtowc+0x16>

0801f108 <__malloc_lock>:
 801f108:	4801      	ldr	r0, [pc, #4]	; (801f110 <__malloc_lock+0x8>)
 801f10a:	f7fe b9f8 	b.w	801d4fe <__retarget_lock_acquire_recursive>
 801f10e:	bf00      	nop
 801f110:	20000d58 	.word	0x20000d58

0801f114 <__malloc_unlock>:
 801f114:	4801      	ldr	r0, [pc, #4]	; (801f11c <__malloc_unlock+0x8>)
 801f116:	f7fe b9f4 	b.w	801d502 <__retarget_lock_release_recursive>
 801f11a:	bf00      	nop
 801f11c:	20000d58 	.word	0x20000d58

0801f120 <_realloc_r>:
 801f120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f122:	4607      	mov	r7, r0
 801f124:	4614      	mov	r4, r2
 801f126:	460e      	mov	r6, r1
 801f128:	b921      	cbnz	r1, 801f134 <_realloc_r+0x14>
 801f12a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f12e:	4611      	mov	r1, r2
 801f130:	f7fe bad2 	b.w	801d6d8 <_malloc_r>
 801f134:	b922      	cbnz	r2, 801f140 <_realloc_r+0x20>
 801f136:	f7fe fa7f 	bl	801d638 <_free_r>
 801f13a:	4625      	mov	r5, r4
 801f13c:	4628      	mov	r0, r5
 801f13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f140:	f000 fd66 	bl	801fc10 <_malloc_usable_size_r>
 801f144:	42a0      	cmp	r0, r4
 801f146:	d20f      	bcs.n	801f168 <_realloc_r+0x48>
 801f148:	4621      	mov	r1, r4
 801f14a:	4638      	mov	r0, r7
 801f14c:	f7fe fac4 	bl	801d6d8 <_malloc_r>
 801f150:	4605      	mov	r5, r0
 801f152:	2800      	cmp	r0, #0
 801f154:	d0f2      	beq.n	801f13c <_realloc_r+0x1c>
 801f156:	4631      	mov	r1, r6
 801f158:	4622      	mov	r2, r4
 801f15a:	f7fe fa47 	bl	801d5ec <memcpy>
 801f15e:	4631      	mov	r1, r6
 801f160:	4638      	mov	r0, r7
 801f162:	f7fe fa69 	bl	801d638 <_free_r>
 801f166:	e7e9      	b.n	801f13c <_realloc_r+0x1c>
 801f168:	4635      	mov	r5, r6
 801f16a:	e7e7      	b.n	801f13c <_realloc_r+0x1c>

0801f16c <__ssputs_r>:
 801f16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f170:	688e      	ldr	r6, [r1, #8]
 801f172:	429e      	cmp	r6, r3
 801f174:	4682      	mov	sl, r0
 801f176:	460c      	mov	r4, r1
 801f178:	4690      	mov	r8, r2
 801f17a:	461f      	mov	r7, r3
 801f17c:	d838      	bhi.n	801f1f0 <__ssputs_r+0x84>
 801f17e:	898a      	ldrh	r2, [r1, #12]
 801f180:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f184:	d032      	beq.n	801f1ec <__ssputs_r+0x80>
 801f186:	6825      	ldr	r5, [r4, #0]
 801f188:	6909      	ldr	r1, [r1, #16]
 801f18a:	eba5 0901 	sub.w	r9, r5, r1
 801f18e:	6965      	ldr	r5, [r4, #20]
 801f190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f198:	3301      	adds	r3, #1
 801f19a:	444b      	add	r3, r9
 801f19c:	106d      	asrs	r5, r5, #1
 801f19e:	429d      	cmp	r5, r3
 801f1a0:	bf38      	it	cc
 801f1a2:	461d      	movcc	r5, r3
 801f1a4:	0553      	lsls	r3, r2, #21
 801f1a6:	d531      	bpl.n	801f20c <__ssputs_r+0xa0>
 801f1a8:	4629      	mov	r1, r5
 801f1aa:	f7fe fa95 	bl	801d6d8 <_malloc_r>
 801f1ae:	4606      	mov	r6, r0
 801f1b0:	b950      	cbnz	r0, 801f1c8 <__ssputs_r+0x5c>
 801f1b2:	230c      	movs	r3, #12
 801f1b4:	f8ca 3000 	str.w	r3, [sl]
 801f1b8:	89a3      	ldrh	r3, [r4, #12]
 801f1ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f1be:	81a3      	strh	r3, [r4, #12]
 801f1c0:	f04f 30ff 	mov.w	r0, #4294967295
 801f1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f1c8:	6921      	ldr	r1, [r4, #16]
 801f1ca:	464a      	mov	r2, r9
 801f1cc:	f7fe fa0e 	bl	801d5ec <memcpy>
 801f1d0:	89a3      	ldrh	r3, [r4, #12]
 801f1d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f1d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f1da:	81a3      	strh	r3, [r4, #12]
 801f1dc:	6126      	str	r6, [r4, #16]
 801f1de:	6165      	str	r5, [r4, #20]
 801f1e0:	444e      	add	r6, r9
 801f1e2:	eba5 0509 	sub.w	r5, r5, r9
 801f1e6:	6026      	str	r6, [r4, #0]
 801f1e8:	60a5      	str	r5, [r4, #8]
 801f1ea:	463e      	mov	r6, r7
 801f1ec:	42be      	cmp	r6, r7
 801f1ee:	d900      	bls.n	801f1f2 <__ssputs_r+0x86>
 801f1f0:	463e      	mov	r6, r7
 801f1f2:	4632      	mov	r2, r6
 801f1f4:	6820      	ldr	r0, [r4, #0]
 801f1f6:	4641      	mov	r1, r8
 801f1f8:	f000 fcf0 	bl	801fbdc <memmove>
 801f1fc:	68a3      	ldr	r3, [r4, #8]
 801f1fe:	6822      	ldr	r2, [r4, #0]
 801f200:	1b9b      	subs	r3, r3, r6
 801f202:	4432      	add	r2, r6
 801f204:	60a3      	str	r3, [r4, #8]
 801f206:	6022      	str	r2, [r4, #0]
 801f208:	2000      	movs	r0, #0
 801f20a:	e7db      	b.n	801f1c4 <__ssputs_r+0x58>
 801f20c:	462a      	mov	r2, r5
 801f20e:	f7ff ff87 	bl	801f120 <_realloc_r>
 801f212:	4606      	mov	r6, r0
 801f214:	2800      	cmp	r0, #0
 801f216:	d1e1      	bne.n	801f1dc <__ssputs_r+0x70>
 801f218:	6921      	ldr	r1, [r4, #16]
 801f21a:	4650      	mov	r0, sl
 801f21c:	f7fe fa0c 	bl	801d638 <_free_r>
 801f220:	e7c7      	b.n	801f1b2 <__ssputs_r+0x46>
	...

0801f224 <_svfiprintf_r>:
 801f224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f228:	4698      	mov	r8, r3
 801f22a:	898b      	ldrh	r3, [r1, #12]
 801f22c:	061b      	lsls	r3, r3, #24
 801f22e:	b09d      	sub	sp, #116	; 0x74
 801f230:	4607      	mov	r7, r0
 801f232:	460d      	mov	r5, r1
 801f234:	4614      	mov	r4, r2
 801f236:	d50e      	bpl.n	801f256 <_svfiprintf_r+0x32>
 801f238:	690b      	ldr	r3, [r1, #16]
 801f23a:	b963      	cbnz	r3, 801f256 <_svfiprintf_r+0x32>
 801f23c:	2140      	movs	r1, #64	; 0x40
 801f23e:	f7fe fa4b 	bl	801d6d8 <_malloc_r>
 801f242:	6028      	str	r0, [r5, #0]
 801f244:	6128      	str	r0, [r5, #16]
 801f246:	b920      	cbnz	r0, 801f252 <_svfiprintf_r+0x2e>
 801f248:	230c      	movs	r3, #12
 801f24a:	603b      	str	r3, [r7, #0]
 801f24c:	f04f 30ff 	mov.w	r0, #4294967295
 801f250:	e0d1      	b.n	801f3f6 <_svfiprintf_r+0x1d2>
 801f252:	2340      	movs	r3, #64	; 0x40
 801f254:	616b      	str	r3, [r5, #20]
 801f256:	2300      	movs	r3, #0
 801f258:	9309      	str	r3, [sp, #36]	; 0x24
 801f25a:	2320      	movs	r3, #32
 801f25c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f260:	f8cd 800c 	str.w	r8, [sp, #12]
 801f264:	2330      	movs	r3, #48	; 0x30
 801f266:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f410 <_svfiprintf_r+0x1ec>
 801f26a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f26e:	f04f 0901 	mov.w	r9, #1
 801f272:	4623      	mov	r3, r4
 801f274:	469a      	mov	sl, r3
 801f276:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f27a:	b10a      	cbz	r2, 801f280 <_svfiprintf_r+0x5c>
 801f27c:	2a25      	cmp	r2, #37	; 0x25
 801f27e:	d1f9      	bne.n	801f274 <_svfiprintf_r+0x50>
 801f280:	ebba 0b04 	subs.w	fp, sl, r4
 801f284:	d00b      	beq.n	801f29e <_svfiprintf_r+0x7a>
 801f286:	465b      	mov	r3, fp
 801f288:	4622      	mov	r2, r4
 801f28a:	4629      	mov	r1, r5
 801f28c:	4638      	mov	r0, r7
 801f28e:	f7ff ff6d 	bl	801f16c <__ssputs_r>
 801f292:	3001      	adds	r0, #1
 801f294:	f000 80aa 	beq.w	801f3ec <_svfiprintf_r+0x1c8>
 801f298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f29a:	445a      	add	r2, fp
 801f29c:	9209      	str	r2, [sp, #36]	; 0x24
 801f29e:	f89a 3000 	ldrb.w	r3, [sl]
 801f2a2:	2b00      	cmp	r3, #0
 801f2a4:	f000 80a2 	beq.w	801f3ec <_svfiprintf_r+0x1c8>
 801f2a8:	2300      	movs	r3, #0
 801f2aa:	f04f 32ff 	mov.w	r2, #4294967295
 801f2ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f2b2:	f10a 0a01 	add.w	sl, sl, #1
 801f2b6:	9304      	str	r3, [sp, #16]
 801f2b8:	9307      	str	r3, [sp, #28]
 801f2ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f2be:	931a      	str	r3, [sp, #104]	; 0x68
 801f2c0:	4654      	mov	r4, sl
 801f2c2:	2205      	movs	r2, #5
 801f2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f2c8:	4851      	ldr	r0, [pc, #324]	; (801f410 <_svfiprintf_r+0x1ec>)
 801f2ca:	f7e0 ffc9 	bl	8000260 <memchr>
 801f2ce:	9a04      	ldr	r2, [sp, #16]
 801f2d0:	b9d8      	cbnz	r0, 801f30a <_svfiprintf_r+0xe6>
 801f2d2:	06d0      	lsls	r0, r2, #27
 801f2d4:	bf44      	itt	mi
 801f2d6:	2320      	movmi	r3, #32
 801f2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f2dc:	0711      	lsls	r1, r2, #28
 801f2de:	bf44      	itt	mi
 801f2e0:	232b      	movmi	r3, #43	; 0x2b
 801f2e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f2e6:	f89a 3000 	ldrb.w	r3, [sl]
 801f2ea:	2b2a      	cmp	r3, #42	; 0x2a
 801f2ec:	d015      	beq.n	801f31a <_svfiprintf_r+0xf6>
 801f2ee:	9a07      	ldr	r2, [sp, #28]
 801f2f0:	4654      	mov	r4, sl
 801f2f2:	2000      	movs	r0, #0
 801f2f4:	f04f 0c0a 	mov.w	ip, #10
 801f2f8:	4621      	mov	r1, r4
 801f2fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f2fe:	3b30      	subs	r3, #48	; 0x30
 801f300:	2b09      	cmp	r3, #9
 801f302:	d94e      	bls.n	801f3a2 <_svfiprintf_r+0x17e>
 801f304:	b1b0      	cbz	r0, 801f334 <_svfiprintf_r+0x110>
 801f306:	9207      	str	r2, [sp, #28]
 801f308:	e014      	b.n	801f334 <_svfiprintf_r+0x110>
 801f30a:	eba0 0308 	sub.w	r3, r0, r8
 801f30e:	fa09 f303 	lsl.w	r3, r9, r3
 801f312:	4313      	orrs	r3, r2
 801f314:	9304      	str	r3, [sp, #16]
 801f316:	46a2      	mov	sl, r4
 801f318:	e7d2      	b.n	801f2c0 <_svfiprintf_r+0x9c>
 801f31a:	9b03      	ldr	r3, [sp, #12]
 801f31c:	1d19      	adds	r1, r3, #4
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	9103      	str	r1, [sp, #12]
 801f322:	2b00      	cmp	r3, #0
 801f324:	bfbb      	ittet	lt
 801f326:	425b      	neglt	r3, r3
 801f328:	f042 0202 	orrlt.w	r2, r2, #2
 801f32c:	9307      	strge	r3, [sp, #28]
 801f32e:	9307      	strlt	r3, [sp, #28]
 801f330:	bfb8      	it	lt
 801f332:	9204      	strlt	r2, [sp, #16]
 801f334:	7823      	ldrb	r3, [r4, #0]
 801f336:	2b2e      	cmp	r3, #46	; 0x2e
 801f338:	d10c      	bne.n	801f354 <_svfiprintf_r+0x130>
 801f33a:	7863      	ldrb	r3, [r4, #1]
 801f33c:	2b2a      	cmp	r3, #42	; 0x2a
 801f33e:	d135      	bne.n	801f3ac <_svfiprintf_r+0x188>
 801f340:	9b03      	ldr	r3, [sp, #12]
 801f342:	1d1a      	adds	r2, r3, #4
 801f344:	681b      	ldr	r3, [r3, #0]
 801f346:	9203      	str	r2, [sp, #12]
 801f348:	2b00      	cmp	r3, #0
 801f34a:	bfb8      	it	lt
 801f34c:	f04f 33ff 	movlt.w	r3, #4294967295
 801f350:	3402      	adds	r4, #2
 801f352:	9305      	str	r3, [sp, #20]
 801f354:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f420 <_svfiprintf_r+0x1fc>
 801f358:	7821      	ldrb	r1, [r4, #0]
 801f35a:	2203      	movs	r2, #3
 801f35c:	4650      	mov	r0, sl
 801f35e:	f7e0 ff7f 	bl	8000260 <memchr>
 801f362:	b140      	cbz	r0, 801f376 <_svfiprintf_r+0x152>
 801f364:	2340      	movs	r3, #64	; 0x40
 801f366:	eba0 000a 	sub.w	r0, r0, sl
 801f36a:	fa03 f000 	lsl.w	r0, r3, r0
 801f36e:	9b04      	ldr	r3, [sp, #16]
 801f370:	4303      	orrs	r3, r0
 801f372:	3401      	adds	r4, #1
 801f374:	9304      	str	r3, [sp, #16]
 801f376:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f37a:	4826      	ldr	r0, [pc, #152]	; (801f414 <_svfiprintf_r+0x1f0>)
 801f37c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f380:	2206      	movs	r2, #6
 801f382:	f7e0 ff6d 	bl	8000260 <memchr>
 801f386:	2800      	cmp	r0, #0
 801f388:	d038      	beq.n	801f3fc <_svfiprintf_r+0x1d8>
 801f38a:	4b23      	ldr	r3, [pc, #140]	; (801f418 <_svfiprintf_r+0x1f4>)
 801f38c:	bb1b      	cbnz	r3, 801f3d6 <_svfiprintf_r+0x1b2>
 801f38e:	9b03      	ldr	r3, [sp, #12]
 801f390:	3307      	adds	r3, #7
 801f392:	f023 0307 	bic.w	r3, r3, #7
 801f396:	3308      	adds	r3, #8
 801f398:	9303      	str	r3, [sp, #12]
 801f39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f39c:	4433      	add	r3, r6
 801f39e:	9309      	str	r3, [sp, #36]	; 0x24
 801f3a0:	e767      	b.n	801f272 <_svfiprintf_r+0x4e>
 801f3a2:	fb0c 3202 	mla	r2, ip, r2, r3
 801f3a6:	460c      	mov	r4, r1
 801f3a8:	2001      	movs	r0, #1
 801f3aa:	e7a5      	b.n	801f2f8 <_svfiprintf_r+0xd4>
 801f3ac:	2300      	movs	r3, #0
 801f3ae:	3401      	adds	r4, #1
 801f3b0:	9305      	str	r3, [sp, #20]
 801f3b2:	4619      	mov	r1, r3
 801f3b4:	f04f 0c0a 	mov.w	ip, #10
 801f3b8:	4620      	mov	r0, r4
 801f3ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f3be:	3a30      	subs	r2, #48	; 0x30
 801f3c0:	2a09      	cmp	r2, #9
 801f3c2:	d903      	bls.n	801f3cc <_svfiprintf_r+0x1a8>
 801f3c4:	2b00      	cmp	r3, #0
 801f3c6:	d0c5      	beq.n	801f354 <_svfiprintf_r+0x130>
 801f3c8:	9105      	str	r1, [sp, #20]
 801f3ca:	e7c3      	b.n	801f354 <_svfiprintf_r+0x130>
 801f3cc:	fb0c 2101 	mla	r1, ip, r1, r2
 801f3d0:	4604      	mov	r4, r0
 801f3d2:	2301      	movs	r3, #1
 801f3d4:	e7f0      	b.n	801f3b8 <_svfiprintf_r+0x194>
 801f3d6:	ab03      	add	r3, sp, #12
 801f3d8:	9300      	str	r3, [sp, #0]
 801f3da:	462a      	mov	r2, r5
 801f3dc:	4b0f      	ldr	r3, [pc, #60]	; (801f41c <_svfiprintf_r+0x1f8>)
 801f3de:	a904      	add	r1, sp, #16
 801f3e0:	4638      	mov	r0, r7
 801f3e2:	f3af 8000 	nop.w
 801f3e6:	1c42      	adds	r2, r0, #1
 801f3e8:	4606      	mov	r6, r0
 801f3ea:	d1d6      	bne.n	801f39a <_svfiprintf_r+0x176>
 801f3ec:	89ab      	ldrh	r3, [r5, #12]
 801f3ee:	065b      	lsls	r3, r3, #25
 801f3f0:	f53f af2c 	bmi.w	801f24c <_svfiprintf_r+0x28>
 801f3f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f3f6:	b01d      	add	sp, #116	; 0x74
 801f3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3fc:	ab03      	add	r3, sp, #12
 801f3fe:	9300      	str	r3, [sp, #0]
 801f400:	462a      	mov	r2, r5
 801f402:	4b06      	ldr	r3, [pc, #24]	; (801f41c <_svfiprintf_r+0x1f8>)
 801f404:	a904      	add	r1, sp, #16
 801f406:	4638      	mov	r0, r7
 801f408:	f000 f9d4 	bl	801f7b4 <_printf_i>
 801f40c:	e7eb      	b.n	801f3e6 <_svfiprintf_r+0x1c2>
 801f40e:	bf00      	nop
 801f410:	08025567 	.word	0x08025567
 801f414:	08025571 	.word	0x08025571
 801f418:	00000000 	.word	0x00000000
 801f41c:	0801f16d 	.word	0x0801f16d
 801f420:	0802556d 	.word	0x0802556d

0801f424 <__sfputc_r>:
 801f424:	6893      	ldr	r3, [r2, #8]
 801f426:	3b01      	subs	r3, #1
 801f428:	2b00      	cmp	r3, #0
 801f42a:	b410      	push	{r4}
 801f42c:	6093      	str	r3, [r2, #8]
 801f42e:	da08      	bge.n	801f442 <__sfputc_r+0x1e>
 801f430:	6994      	ldr	r4, [r2, #24]
 801f432:	42a3      	cmp	r3, r4
 801f434:	db01      	blt.n	801f43a <__sfputc_r+0x16>
 801f436:	290a      	cmp	r1, #10
 801f438:	d103      	bne.n	801f442 <__sfputc_r+0x1e>
 801f43a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f43e:	f7ff bb63 	b.w	801eb08 <__swbuf_r>
 801f442:	6813      	ldr	r3, [r2, #0]
 801f444:	1c58      	adds	r0, r3, #1
 801f446:	6010      	str	r0, [r2, #0]
 801f448:	7019      	strb	r1, [r3, #0]
 801f44a:	4608      	mov	r0, r1
 801f44c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f450:	4770      	bx	lr

0801f452 <__sfputs_r>:
 801f452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f454:	4606      	mov	r6, r0
 801f456:	460f      	mov	r7, r1
 801f458:	4614      	mov	r4, r2
 801f45a:	18d5      	adds	r5, r2, r3
 801f45c:	42ac      	cmp	r4, r5
 801f45e:	d101      	bne.n	801f464 <__sfputs_r+0x12>
 801f460:	2000      	movs	r0, #0
 801f462:	e007      	b.n	801f474 <__sfputs_r+0x22>
 801f464:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f468:	463a      	mov	r2, r7
 801f46a:	4630      	mov	r0, r6
 801f46c:	f7ff ffda 	bl	801f424 <__sfputc_r>
 801f470:	1c43      	adds	r3, r0, #1
 801f472:	d1f3      	bne.n	801f45c <__sfputs_r+0xa>
 801f474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f478 <_vfiprintf_r>:
 801f478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f47c:	460d      	mov	r5, r1
 801f47e:	b09d      	sub	sp, #116	; 0x74
 801f480:	4614      	mov	r4, r2
 801f482:	4698      	mov	r8, r3
 801f484:	4606      	mov	r6, r0
 801f486:	b118      	cbz	r0, 801f490 <_vfiprintf_r+0x18>
 801f488:	6983      	ldr	r3, [r0, #24]
 801f48a:	b90b      	cbnz	r3, 801f490 <_vfiprintf_r+0x18>
 801f48c:	f7fd fc84 	bl	801cd98 <__sinit>
 801f490:	4b89      	ldr	r3, [pc, #548]	; (801f6b8 <_vfiprintf_r+0x240>)
 801f492:	429d      	cmp	r5, r3
 801f494:	d11b      	bne.n	801f4ce <_vfiprintf_r+0x56>
 801f496:	6875      	ldr	r5, [r6, #4]
 801f498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f49a:	07d9      	lsls	r1, r3, #31
 801f49c:	d405      	bmi.n	801f4aa <_vfiprintf_r+0x32>
 801f49e:	89ab      	ldrh	r3, [r5, #12]
 801f4a0:	059a      	lsls	r2, r3, #22
 801f4a2:	d402      	bmi.n	801f4aa <_vfiprintf_r+0x32>
 801f4a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f4a6:	f7fe f82a 	bl	801d4fe <__retarget_lock_acquire_recursive>
 801f4aa:	89ab      	ldrh	r3, [r5, #12]
 801f4ac:	071b      	lsls	r3, r3, #28
 801f4ae:	d501      	bpl.n	801f4b4 <_vfiprintf_r+0x3c>
 801f4b0:	692b      	ldr	r3, [r5, #16]
 801f4b2:	b9eb      	cbnz	r3, 801f4f0 <_vfiprintf_r+0x78>
 801f4b4:	4629      	mov	r1, r5
 801f4b6:	4630      	mov	r0, r6
 801f4b8:	f7ff fb8a 	bl	801ebd0 <__swsetup_r>
 801f4bc:	b1c0      	cbz	r0, 801f4f0 <_vfiprintf_r+0x78>
 801f4be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f4c0:	07dc      	lsls	r4, r3, #31
 801f4c2:	d50e      	bpl.n	801f4e2 <_vfiprintf_r+0x6a>
 801f4c4:	f04f 30ff 	mov.w	r0, #4294967295
 801f4c8:	b01d      	add	sp, #116	; 0x74
 801f4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4ce:	4b7b      	ldr	r3, [pc, #492]	; (801f6bc <_vfiprintf_r+0x244>)
 801f4d0:	429d      	cmp	r5, r3
 801f4d2:	d101      	bne.n	801f4d8 <_vfiprintf_r+0x60>
 801f4d4:	68b5      	ldr	r5, [r6, #8]
 801f4d6:	e7df      	b.n	801f498 <_vfiprintf_r+0x20>
 801f4d8:	4b79      	ldr	r3, [pc, #484]	; (801f6c0 <_vfiprintf_r+0x248>)
 801f4da:	429d      	cmp	r5, r3
 801f4dc:	bf08      	it	eq
 801f4de:	68f5      	ldreq	r5, [r6, #12]
 801f4e0:	e7da      	b.n	801f498 <_vfiprintf_r+0x20>
 801f4e2:	89ab      	ldrh	r3, [r5, #12]
 801f4e4:	0598      	lsls	r0, r3, #22
 801f4e6:	d4ed      	bmi.n	801f4c4 <_vfiprintf_r+0x4c>
 801f4e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f4ea:	f7fe f80a 	bl	801d502 <__retarget_lock_release_recursive>
 801f4ee:	e7e9      	b.n	801f4c4 <_vfiprintf_r+0x4c>
 801f4f0:	2300      	movs	r3, #0
 801f4f2:	9309      	str	r3, [sp, #36]	; 0x24
 801f4f4:	2320      	movs	r3, #32
 801f4f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f4fa:	f8cd 800c 	str.w	r8, [sp, #12]
 801f4fe:	2330      	movs	r3, #48	; 0x30
 801f500:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f6c4 <_vfiprintf_r+0x24c>
 801f504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f508:	f04f 0901 	mov.w	r9, #1
 801f50c:	4623      	mov	r3, r4
 801f50e:	469a      	mov	sl, r3
 801f510:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f514:	b10a      	cbz	r2, 801f51a <_vfiprintf_r+0xa2>
 801f516:	2a25      	cmp	r2, #37	; 0x25
 801f518:	d1f9      	bne.n	801f50e <_vfiprintf_r+0x96>
 801f51a:	ebba 0b04 	subs.w	fp, sl, r4
 801f51e:	d00b      	beq.n	801f538 <_vfiprintf_r+0xc0>
 801f520:	465b      	mov	r3, fp
 801f522:	4622      	mov	r2, r4
 801f524:	4629      	mov	r1, r5
 801f526:	4630      	mov	r0, r6
 801f528:	f7ff ff93 	bl	801f452 <__sfputs_r>
 801f52c:	3001      	adds	r0, #1
 801f52e:	f000 80aa 	beq.w	801f686 <_vfiprintf_r+0x20e>
 801f532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f534:	445a      	add	r2, fp
 801f536:	9209      	str	r2, [sp, #36]	; 0x24
 801f538:	f89a 3000 	ldrb.w	r3, [sl]
 801f53c:	2b00      	cmp	r3, #0
 801f53e:	f000 80a2 	beq.w	801f686 <_vfiprintf_r+0x20e>
 801f542:	2300      	movs	r3, #0
 801f544:	f04f 32ff 	mov.w	r2, #4294967295
 801f548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f54c:	f10a 0a01 	add.w	sl, sl, #1
 801f550:	9304      	str	r3, [sp, #16]
 801f552:	9307      	str	r3, [sp, #28]
 801f554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f558:	931a      	str	r3, [sp, #104]	; 0x68
 801f55a:	4654      	mov	r4, sl
 801f55c:	2205      	movs	r2, #5
 801f55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f562:	4858      	ldr	r0, [pc, #352]	; (801f6c4 <_vfiprintf_r+0x24c>)
 801f564:	f7e0 fe7c 	bl	8000260 <memchr>
 801f568:	9a04      	ldr	r2, [sp, #16]
 801f56a:	b9d8      	cbnz	r0, 801f5a4 <_vfiprintf_r+0x12c>
 801f56c:	06d1      	lsls	r1, r2, #27
 801f56e:	bf44      	itt	mi
 801f570:	2320      	movmi	r3, #32
 801f572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f576:	0713      	lsls	r3, r2, #28
 801f578:	bf44      	itt	mi
 801f57a:	232b      	movmi	r3, #43	; 0x2b
 801f57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f580:	f89a 3000 	ldrb.w	r3, [sl]
 801f584:	2b2a      	cmp	r3, #42	; 0x2a
 801f586:	d015      	beq.n	801f5b4 <_vfiprintf_r+0x13c>
 801f588:	9a07      	ldr	r2, [sp, #28]
 801f58a:	4654      	mov	r4, sl
 801f58c:	2000      	movs	r0, #0
 801f58e:	f04f 0c0a 	mov.w	ip, #10
 801f592:	4621      	mov	r1, r4
 801f594:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f598:	3b30      	subs	r3, #48	; 0x30
 801f59a:	2b09      	cmp	r3, #9
 801f59c:	d94e      	bls.n	801f63c <_vfiprintf_r+0x1c4>
 801f59e:	b1b0      	cbz	r0, 801f5ce <_vfiprintf_r+0x156>
 801f5a0:	9207      	str	r2, [sp, #28]
 801f5a2:	e014      	b.n	801f5ce <_vfiprintf_r+0x156>
 801f5a4:	eba0 0308 	sub.w	r3, r0, r8
 801f5a8:	fa09 f303 	lsl.w	r3, r9, r3
 801f5ac:	4313      	orrs	r3, r2
 801f5ae:	9304      	str	r3, [sp, #16]
 801f5b0:	46a2      	mov	sl, r4
 801f5b2:	e7d2      	b.n	801f55a <_vfiprintf_r+0xe2>
 801f5b4:	9b03      	ldr	r3, [sp, #12]
 801f5b6:	1d19      	adds	r1, r3, #4
 801f5b8:	681b      	ldr	r3, [r3, #0]
 801f5ba:	9103      	str	r1, [sp, #12]
 801f5bc:	2b00      	cmp	r3, #0
 801f5be:	bfbb      	ittet	lt
 801f5c0:	425b      	neglt	r3, r3
 801f5c2:	f042 0202 	orrlt.w	r2, r2, #2
 801f5c6:	9307      	strge	r3, [sp, #28]
 801f5c8:	9307      	strlt	r3, [sp, #28]
 801f5ca:	bfb8      	it	lt
 801f5cc:	9204      	strlt	r2, [sp, #16]
 801f5ce:	7823      	ldrb	r3, [r4, #0]
 801f5d0:	2b2e      	cmp	r3, #46	; 0x2e
 801f5d2:	d10c      	bne.n	801f5ee <_vfiprintf_r+0x176>
 801f5d4:	7863      	ldrb	r3, [r4, #1]
 801f5d6:	2b2a      	cmp	r3, #42	; 0x2a
 801f5d8:	d135      	bne.n	801f646 <_vfiprintf_r+0x1ce>
 801f5da:	9b03      	ldr	r3, [sp, #12]
 801f5dc:	1d1a      	adds	r2, r3, #4
 801f5de:	681b      	ldr	r3, [r3, #0]
 801f5e0:	9203      	str	r2, [sp, #12]
 801f5e2:	2b00      	cmp	r3, #0
 801f5e4:	bfb8      	it	lt
 801f5e6:	f04f 33ff 	movlt.w	r3, #4294967295
 801f5ea:	3402      	adds	r4, #2
 801f5ec:	9305      	str	r3, [sp, #20]
 801f5ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f6d4 <_vfiprintf_r+0x25c>
 801f5f2:	7821      	ldrb	r1, [r4, #0]
 801f5f4:	2203      	movs	r2, #3
 801f5f6:	4650      	mov	r0, sl
 801f5f8:	f7e0 fe32 	bl	8000260 <memchr>
 801f5fc:	b140      	cbz	r0, 801f610 <_vfiprintf_r+0x198>
 801f5fe:	2340      	movs	r3, #64	; 0x40
 801f600:	eba0 000a 	sub.w	r0, r0, sl
 801f604:	fa03 f000 	lsl.w	r0, r3, r0
 801f608:	9b04      	ldr	r3, [sp, #16]
 801f60a:	4303      	orrs	r3, r0
 801f60c:	3401      	adds	r4, #1
 801f60e:	9304      	str	r3, [sp, #16]
 801f610:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f614:	482c      	ldr	r0, [pc, #176]	; (801f6c8 <_vfiprintf_r+0x250>)
 801f616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f61a:	2206      	movs	r2, #6
 801f61c:	f7e0 fe20 	bl	8000260 <memchr>
 801f620:	2800      	cmp	r0, #0
 801f622:	d03f      	beq.n	801f6a4 <_vfiprintf_r+0x22c>
 801f624:	4b29      	ldr	r3, [pc, #164]	; (801f6cc <_vfiprintf_r+0x254>)
 801f626:	bb1b      	cbnz	r3, 801f670 <_vfiprintf_r+0x1f8>
 801f628:	9b03      	ldr	r3, [sp, #12]
 801f62a:	3307      	adds	r3, #7
 801f62c:	f023 0307 	bic.w	r3, r3, #7
 801f630:	3308      	adds	r3, #8
 801f632:	9303      	str	r3, [sp, #12]
 801f634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f636:	443b      	add	r3, r7
 801f638:	9309      	str	r3, [sp, #36]	; 0x24
 801f63a:	e767      	b.n	801f50c <_vfiprintf_r+0x94>
 801f63c:	fb0c 3202 	mla	r2, ip, r2, r3
 801f640:	460c      	mov	r4, r1
 801f642:	2001      	movs	r0, #1
 801f644:	e7a5      	b.n	801f592 <_vfiprintf_r+0x11a>
 801f646:	2300      	movs	r3, #0
 801f648:	3401      	adds	r4, #1
 801f64a:	9305      	str	r3, [sp, #20]
 801f64c:	4619      	mov	r1, r3
 801f64e:	f04f 0c0a 	mov.w	ip, #10
 801f652:	4620      	mov	r0, r4
 801f654:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f658:	3a30      	subs	r2, #48	; 0x30
 801f65a:	2a09      	cmp	r2, #9
 801f65c:	d903      	bls.n	801f666 <_vfiprintf_r+0x1ee>
 801f65e:	2b00      	cmp	r3, #0
 801f660:	d0c5      	beq.n	801f5ee <_vfiprintf_r+0x176>
 801f662:	9105      	str	r1, [sp, #20]
 801f664:	e7c3      	b.n	801f5ee <_vfiprintf_r+0x176>
 801f666:	fb0c 2101 	mla	r1, ip, r1, r2
 801f66a:	4604      	mov	r4, r0
 801f66c:	2301      	movs	r3, #1
 801f66e:	e7f0      	b.n	801f652 <_vfiprintf_r+0x1da>
 801f670:	ab03      	add	r3, sp, #12
 801f672:	9300      	str	r3, [sp, #0]
 801f674:	462a      	mov	r2, r5
 801f676:	4b16      	ldr	r3, [pc, #88]	; (801f6d0 <_vfiprintf_r+0x258>)
 801f678:	a904      	add	r1, sp, #16
 801f67a:	4630      	mov	r0, r6
 801f67c:	f3af 8000 	nop.w
 801f680:	4607      	mov	r7, r0
 801f682:	1c78      	adds	r0, r7, #1
 801f684:	d1d6      	bne.n	801f634 <_vfiprintf_r+0x1bc>
 801f686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f688:	07d9      	lsls	r1, r3, #31
 801f68a:	d405      	bmi.n	801f698 <_vfiprintf_r+0x220>
 801f68c:	89ab      	ldrh	r3, [r5, #12]
 801f68e:	059a      	lsls	r2, r3, #22
 801f690:	d402      	bmi.n	801f698 <_vfiprintf_r+0x220>
 801f692:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f694:	f7fd ff35 	bl	801d502 <__retarget_lock_release_recursive>
 801f698:	89ab      	ldrh	r3, [r5, #12]
 801f69a:	065b      	lsls	r3, r3, #25
 801f69c:	f53f af12 	bmi.w	801f4c4 <_vfiprintf_r+0x4c>
 801f6a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f6a2:	e711      	b.n	801f4c8 <_vfiprintf_r+0x50>
 801f6a4:	ab03      	add	r3, sp, #12
 801f6a6:	9300      	str	r3, [sp, #0]
 801f6a8:	462a      	mov	r2, r5
 801f6aa:	4b09      	ldr	r3, [pc, #36]	; (801f6d0 <_vfiprintf_r+0x258>)
 801f6ac:	a904      	add	r1, sp, #16
 801f6ae:	4630      	mov	r0, r6
 801f6b0:	f000 f880 	bl	801f7b4 <_printf_i>
 801f6b4:	e7e4      	b.n	801f680 <_vfiprintf_r+0x208>
 801f6b6:	bf00      	nop
 801f6b8:	08024fe8 	.word	0x08024fe8
 801f6bc:	08025008 	.word	0x08025008
 801f6c0:	08024fc8 	.word	0x08024fc8
 801f6c4:	08025567 	.word	0x08025567
 801f6c8:	08025571 	.word	0x08025571
 801f6cc:	00000000 	.word	0x00000000
 801f6d0:	0801f453 	.word	0x0801f453
 801f6d4:	0802556d 	.word	0x0802556d

0801f6d8 <_printf_common>:
 801f6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f6dc:	4616      	mov	r6, r2
 801f6de:	4699      	mov	r9, r3
 801f6e0:	688a      	ldr	r2, [r1, #8]
 801f6e2:	690b      	ldr	r3, [r1, #16]
 801f6e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f6e8:	4293      	cmp	r3, r2
 801f6ea:	bfb8      	it	lt
 801f6ec:	4613      	movlt	r3, r2
 801f6ee:	6033      	str	r3, [r6, #0]
 801f6f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f6f4:	4607      	mov	r7, r0
 801f6f6:	460c      	mov	r4, r1
 801f6f8:	b10a      	cbz	r2, 801f6fe <_printf_common+0x26>
 801f6fa:	3301      	adds	r3, #1
 801f6fc:	6033      	str	r3, [r6, #0]
 801f6fe:	6823      	ldr	r3, [r4, #0]
 801f700:	0699      	lsls	r1, r3, #26
 801f702:	bf42      	ittt	mi
 801f704:	6833      	ldrmi	r3, [r6, #0]
 801f706:	3302      	addmi	r3, #2
 801f708:	6033      	strmi	r3, [r6, #0]
 801f70a:	6825      	ldr	r5, [r4, #0]
 801f70c:	f015 0506 	ands.w	r5, r5, #6
 801f710:	d106      	bne.n	801f720 <_printf_common+0x48>
 801f712:	f104 0a19 	add.w	sl, r4, #25
 801f716:	68e3      	ldr	r3, [r4, #12]
 801f718:	6832      	ldr	r2, [r6, #0]
 801f71a:	1a9b      	subs	r3, r3, r2
 801f71c:	42ab      	cmp	r3, r5
 801f71e:	dc26      	bgt.n	801f76e <_printf_common+0x96>
 801f720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f724:	1e13      	subs	r3, r2, #0
 801f726:	6822      	ldr	r2, [r4, #0]
 801f728:	bf18      	it	ne
 801f72a:	2301      	movne	r3, #1
 801f72c:	0692      	lsls	r2, r2, #26
 801f72e:	d42b      	bmi.n	801f788 <_printf_common+0xb0>
 801f730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f734:	4649      	mov	r1, r9
 801f736:	4638      	mov	r0, r7
 801f738:	47c0      	blx	r8
 801f73a:	3001      	adds	r0, #1
 801f73c:	d01e      	beq.n	801f77c <_printf_common+0xa4>
 801f73e:	6823      	ldr	r3, [r4, #0]
 801f740:	68e5      	ldr	r5, [r4, #12]
 801f742:	6832      	ldr	r2, [r6, #0]
 801f744:	f003 0306 	and.w	r3, r3, #6
 801f748:	2b04      	cmp	r3, #4
 801f74a:	bf08      	it	eq
 801f74c:	1aad      	subeq	r5, r5, r2
 801f74e:	68a3      	ldr	r3, [r4, #8]
 801f750:	6922      	ldr	r2, [r4, #16]
 801f752:	bf0c      	ite	eq
 801f754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f758:	2500      	movne	r5, #0
 801f75a:	4293      	cmp	r3, r2
 801f75c:	bfc4      	itt	gt
 801f75e:	1a9b      	subgt	r3, r3, r2
 801f760:	18ed      	addgt	r5, r5, r3
 801f762:	2600      	movs	r6, #0
 801f764:	341a      	adds	r4, #26
 801f766:	42b5      	cmp	r5, r6
 801f768:	d11a      	bne.n	801f7a0 <_printf_common+0xc8>
 801f76a:	2000      	movs	r0, #0
 801f76c:	e008      	b.n	801f780 <_printf_common+0xa8>
 801f76e:	2301      	movs	r3, #1
 801f770:	4652      	mov	r2, sl
 801f772:	4649      	mov	r1, r9
 801f774:	4638      	mov	r0, r7
 801f776:	47c0      	blx	r8
 801f778:	3001      	adds	r0, #1
 801f77a:	d103      	bne.n	801f784 <_printf_common+0xac>
 801f77c:	f04f 30ff 	mov.w	r0, #4294967295
 801f780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f784:	3501      	adds	r5, #1
 801f786:	e7c6      	b.n	801f716 <_printf_common+0x3e>
 801f788:	18e1      	adds	r1, r4, r3
 801f78a:	1c5a      	adds	r2, r3, #1
 801f78c:	2030      	movs	r0, #48	; 0x30
 801f78e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f792:	4422      	add	r2, r4
 801f794:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f798:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f79c:	3302      	adds	r3, #2
 801f79e:	e7c7      	b.n	801f730 <_printf_common+0x58>
 801f7a0:	2301      	movs	r3, #1
 801f7a2:	4622      	mov	r2, r4
 801f7a4:	4649      	mov	r1, r9
 801f7a6:	4638      	mov	r0, r7
 801f7a8:	47c0      	blx	r8
 801f7aa:	3001      	adds	r0, #1
 801f7ac:	d0e6      	beq.n	801f77c <_printf_common+0xa4>
 801f7ae:	3601      	adds	r6, #1
 801f7b0:	e7d9      	b.n	801f766 <_printf_common+0x8e>
	...

0801f7b4 <_printf_i>:
 801f7b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f7b8:	460c      	mov	r4, r1
 801f7ba:	4691      	mov	r9, r2
 801f7bc:	7e27      	ldrb	r7, [r4, #24]
 801f7be:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f7c0:	2f78      	cmp	r7, #120	; 0x78
 801f7c2:	4680      	mov	r8, r0
 801f7c4:	469a      	mov	sl, r3
 801f7c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f7ca:	d807      	bhi.n	801f7dc <_printf_i+0x28>
 801f7cc:	2f62      	cmp	r7, #98	; 0x62
 801f7ce:	d80a      	bhi.n	801f7e6 <_printf_i+0x32>
 801f7d0:	2f00      	cmp	r7, #0
 801f7d2:	f000 80d8 	beq.w	801f986 <_printf_i+0x1d2>
 801f7d6:	2f58      	cmp	r7, #88	; 0x58
 801f7d8:	f000 80a3 	beq.w	801f922 <_printf_i+0x16e>
 801f7dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f7e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f7e4:	e03a      	b.n	801f85c <_printf_i+0xa8>
 801f7e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f7ea:	2b15      	cmp	r3, #21
 801f7ec:	d8f6      	bhi.n	801f7dc <_printf_i+0x28>
 801f7ee:	a001      	add	r0, pc, #4	; (adr r0, 801f7f4 <_printf_i+0x40>)
 801f7f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801f7f4:	0801f84d 	.word	0x0801f84d
 801f7f8:	0801f861 	.word	0x0801f861
 801f7fc:	0801f7dd 	.word	0x0801f7dd
 801f800:	0801f7dd 	.word	0x0801f7dd
 801f804:	0801f7dd 	.word	0x0801f7dd
 801f808:	0801f7dd 	.word	0x0801f7dd
 801f80c:	0801f861 	.word	0x0801f861
 801f810:	0801f7dd 	.word	0x0801f7dd
 801f814:	0801f7dd 	.word	0x0801f7dd
 801f818:	0801f7dd 	.word	0x0801f7dd
 801f81c:	0801f7dd 	.word	0x0801f7dd
 801f820:	0801f96d 	.word	0x0801f96d
 801f824:	0801f891 	.word	0x0801f891
 801f828:	0801f94f 	.word	0x0801f94f
 801f82c:	0801f7dd 	.word	0x0801f7dd
 801f830:	0801f7dd 	.word	0x0801f7dd
 801f834:	0801f98f 	.word	0x0801f98f
 801f838:	0801f7dd 	.word	0x0801f7dd
 801f83c:	0801f891 	.word	0x0801f891
 801f840:	0801f7dd 	.word	0x0801f7dd
 801f844:	0801f7dd 	.word	0x0801f7dd
 801f848:	0801f957 	.word	0x0801f957
 801f84c:	680b      	ldr	r3, [r1, #0]
 801f84e:	1d1a      	adds	r2, r3, #4
 801f850:	681b      	ldr	r3, [r3, #0]
 801f852:	600a      	str	r2, [r1, #0]
 801f854:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f85c:	2301      	movs	r3, #1
 801f85e:	e0a3      	b.n	801f9a8 <_printf_i+0x1f4>
 801f860:	6825      	ldr	r5, [r4, #0]
 801f862:	6808      	ldr	r0, [r1, #0]
 801f864:	062e      	lsls	r6, r5, #24
 801f866:	f100 0304 	add.w	r3, r0, #4
 801f86a:	d50a      	bpl.n	801f882 <_printf_i+0xce>
 801f86c:	6805      	ldr	r5, [r0, #0]
 801f86e:	600b      	str	r3, [r1, #0]
 801f870:	2d00      	cmp	r5, #0
 801f872:	da03      	bge.n	801f87c <_printf_i+0xc8>
 801f874:	232d      	movs	r3, #45	; 0x2d
 801f876:	426d      	negs	r5, r5
 801f878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f87c:	485e      	ldr	r0, [pc, #376]	; (801f9f8 <_printf_i+0x244>)
 801f87e:	230a      	movs	r3, #10
 801f880:	e019      	b.n	801f8b6 <_printf_i+0x102>
 801f882:	f015 0f40 	tst.w	r5, #64	; 0x40
 801f886:	6805      	ldr	r5, [r0, #0]
 801f888:	600b      	str	r3, [r1, #0]
 801f88a:	bf18      	it	ne
 801f88c:	b22d      	sxthne	r5, r5
 801f88e:	e7ef      	b.n	801f870 <_printf_i+0xbc>
 801f890:	680b      	ldr	r3, [r1, #0]
 801f892:	6825      	ldr	r5, [r4, #0]
 801f894:	1d18      	adds	r0, r3, #4
 801f896:	6008      	str	r0, [r1, #0]
 801f898:	0628      	lsls	r0, r5, #24
 801f89a:	d501      	bpl.n	801f8a0 <_printf_i+0xec>
 801f89c:	681d      	ldr	r5, [r3, #0]
 801f89e:	e002      	b.n	801f8a6 <_printf_i+0xf2>
 801f8a0:	0669      	lsls	r1, r5, #25
 801f8a2:	d5fb      	bpl.n	801f89c <_printf_i+0xe8>
 801f8a4:	881d      	ldrh	r5, [r3, #0]
 801f8a6:	4854      	ldr	r0, [pc, #336]	; (801f9f8 <_printf_i+0x244>)
 801f8a8:	2f6f      	cmp	r7, #111	; 0x6f
 801f8aa:	bf0c      	ite	eq
 801f8ac:	2308      	moveq	r3, #8
 801f8ae:	230a      	movne	r3, #10
 801f8b0:	2100      	movs	r1, #0
 801f8b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f8b6:	6866      	ldr	r6, [r4, #4]
 801f8b8:	60a6      	str	r6, [r4, #8]
 801f8ba:	2e00      	cmp	r6, #0
 801f8bc:	bfa2      	ittt	ge
 801f8be:	6821      	ldrge	r1, [r4, #0]
 801f8c0:	f021 0104 	bicge.w	r1, r1, #4
 801f8c4:	6021      	strge	r1, [r4, #0]
 801f8c6:	b90d      	cbnz	r5, 801f8cc <_printf_i+0x118>
 801f8c8:	2e00      	cmp	r6, #0
 801f8ca:	d04d      	beq.n	801f968 <_printf_i+0x1b4>
 801f8cc:	4616      	mov	r6, r2
 801f8ce:	fbb5 f1f3 	udiv	r1, r5, r3
 801f8d2:	fb03 5711 	mls	r7, r3, r1, r5
 801f8d6:	5dc7      	ldrb	r7, [r0, r7]
 801f8d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f8dc:	462f      	mov	r7, r5
 801f8de:	42bb      	cmp	r3, r7
 801f8e0:	460d      	mov	r5, r1
 801f8e2:	d9f4      	bls.n	801f8ce <_printf_i+0x11a>
 801f8e4:	2b08      	cmp	r3, #8
 801f8e6:	d10b      	bne.n	801f900 <_printf_i+0x14c>
 801f8e8:	6823      	ldr	r3, [r4, #0]
 801f8ea:	07df      	lsls	r7, r3, #31
 801f8ec:	d508      	bpl.n	801f900 <_printf_i+0x14c>
 801f8ee:	6923      	ldr	r3, [r4, #16]
 801f8f0:	6861      	ldr	r1, [r4, #4]
 801f8f2:	4299      	cmp	r1, r3
 801f8f4:	bfde      	ittt	le
 801f8f6:	2330      	movle	r3, #48	; 0x30
 801f8f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801f8fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 801f900:	1b92      	subs	r2, r2, r6
 801f902:	6122      	str	r2, [r4, #16]
 801f904:	f8cd a000 	str.w	sl, [sp]
 801f908:	464b      	mov	r3, r9
 801f90a:	aa03      	add	r2, sp, #12
 801f90c:	4621      	mov	r1, r4
 801f90e:	4640      	mov	r0, r8
 801f910:	f7ff fee2 	bl	801f6d8 <_printf_common>
 801f914:	3001      	adds	r0, #1
 801f916:	d14c      	bne.n	801f9b2 <_printf_i+0x1fe>
 801f918:	f04f 30ff 	mov.w	r0, #4294967295
 801f91c:	b004      	add	sp, #16
 801f91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f922:	4835      	ldr	r0, [pc, #212]	; (801f9f8 <_printf_i+0x244>)
 801f924:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801f928:	6823      	ldr	r3, [r4, #0]
 801f92a:	680e      	ldr	r6, [r1, #0]
 801f92c:	061f      	lsls	r7, r3, #24
 801f92e:	f856 5b04 	ldr.w	r5, [r6], #4
 801f932:	600e      	str	r6, [r1, #0]
 801f934:	d514      	bpl.n	801f960 <_printf_i+0x1ac>
 801f936:	07d9      	lsls	r1, r3, #31
 801f938:	bf44      	itt	mi
 801f93a:	f043 0320 	orrmi.w	r3, r3, #32
 801f93e:	6023      	strmi	r3, [r4, #0]
 801f940:	b91d      	cbnz	r5, 801f94a <_printf_i+0x196>
 801f942:	6823      	ldr	r3, [r4, #0]
 801f944:	f023 0320 	bic.w	r3, r3, #32
 801f948:	6023      	str	r3, [r4, #0]
 801f94a:	2310      	movs	r3, #16
 801f94c:	e7b0      	b.n	801f8b0 <_printf_i+0xfc>
 801f94e:	6823      	ldr	r3, [r4, #0]
 801f950:	f043 0320 	orr.w	r3, r3, #32
 801f954:	6023      	str	r3, [r4, #0]
 801f956:	2378      	movs	r3, #120	; 0x78
 801f958:	4828      	ldr	r0, [pc, #160]	; (801f9fc <_printf_i+0x248>)
 801f95a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f95e:	e7e3      	b.n	801f928 <_printf_i+0x174>
 801f960:	065e      	lsls	r6, r3, #25
 801f962:	bf48      	it	mi
 801f964:	b2ad      	uxthmi	r5, r5
 801f966:	e7e6      	b.n	801f936 <_printf_i+0x182>
 801f968:	4616      	mov	r6, r2
 801f96a:	e7bb      	b.n	801f8e4 <_printf_i+0x130>
 801f96c:	680b      	ldr	r3, [r1, #0]
 801f96e:	6826      	ldr	r6, [r4, #0]
 801f970:	6960      	ldr	r0, [r4, #20]
 801f972:	1d1d      	adds	r5, r3, #4
 801f974:	600d      	str	r5, [r1, #0]
 801f976:	0635      	lsls	r5, r6, #24
 801f978:	681b      	ldr	r3, [r3, #0]
 801f97a:	d501      	bpl.n	801f980 <_printf_i+0x1cc>
 801f97c:	6018      	str	r0, [r3, #0]
 801f97e:	e002      	b.n	801f986 <_printf_i+0x1d2>
 801f980:	0671      	lsls	r1, r6, #25
 801f982:	d5fb      	bpl.n	801f97c <_printf_i+0x1c8>
 801f984:	8018      	strh	r0, [r3, #0]
 801f986:	2300      	movs	r3, #0
 801f988:	6123      	str	r3, [r4, #16]
 801f98a:	4616      	mov	r6, r2
 801f98c:	e7ba      	b.n	801f904 <_printf_i+0x150>
 801f98e:	680b      	ldr	r3, [r1, #0]
 801f990:	1d1a      	adds	r2, r3, #4
 801f992:	600a      	str	r2, [r1, #0]
 801f994:	681e      	ldr	r6, [r3, #0]
 801f996:	6862      	ldr	r2, [r4, #4]
 801f998:	2100      	movs	r1, #0
 801f99a:	4630      	mov	r0, r6
 801f99c:	f7e0 fc60 	bl	8000260 <memchr>
 801f9a0:	b108      	cbz	r0, 801f9a6 <_printf_i+0x1f2>
 801f9a2:	1b80      	subs	r0, r0, r6
 801f9a4:	6060      	str	r0, [r4, #4]
 801f9a6:	6863      	ldr	r3, [r4, #4]
 801f9a8:	6123      	str	r3, [r4, #16]
 801f9aa:	2300      	movs	r3, #0
 801f9ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f9b0:	e7a8      	b.n	801f904 <_printf_i+0x150>
 801f9b2:	6923      	ldr	r3, [r4, #16]
 801f9b4:	4632      	mov	r2, r6
 801f9b6:	4649      	mov	r1, r9
 801f9b8:	4640      	mov	r0, r8
 801f9ba:	47d0      	blx	sl
 801f9bc:	3001      	adds	r0, #1
 801f9be:	d0ab      	beq.n	801f918 <_printf_i+0x164>
 801f9c0:	6823      	ldr	r3, [r4, #0]
 801f9c2:	079b      	lsls	r3, r3, #30
 801f9c4:	d413      	bmi.n	801f9ee <_printf_i+0x23a>
 801f9c6:	68e0      	ldr	r0, [r4, #12]
 801f9c8:	9b03      	ldr	r3, [sp, #12]
 801f9ca:	4298      	cmp	r0, r3
 801f9cc:	bfb8      	it	lt
 801f9ce:	4618      	movlt	r0, r3
 801f9d0:	e7a4      	b.n	801f91c <_printf_i+0x168>
 801f9d2:	2301      	movs	r3, #1
 801f9d4:	4632      	mov	r2, r6
 801f9d6:	4649      	mov	r1, r9
 801f9d8:	4640      	mov	r0, r8
 801f9da:	47d0      	blx	sl
 801f9dc:	3001      	adds	r0, #1
 801f9de:	d09b      	beq.n	801f918 <_printf_i+0x164>
 801f9e0:	3501      	adds	r5, #1
 801f9e2:	68e3      	ldr	r3, [r4, #12]
 801f9e4:	9903      	ldr	r1, [sp, #12]
 801f9e6:	1a5b      	subs	r3, r3, r1
 801f9e8:	42ab      	cmp	r3, r5
 801f9ea:	dcf2      	bgt.n	801f9d2 <_printf_i+0x21e>
 801f9ec:	e7eb      	b.n	801f9c6 <_printf_i+0x212>
 801f9ee:	2500      	movs	r5, #0
 801f9f0:	f104 0619 	add.w	r6, r4, #25
 801f9f4:	e7f5      	b.n	801f9e2 <_printf_i+0x22e>
 801f9f6:	bf00      	nop
 801f9f8:	08025578 	.word	0x08025578
 801f9fc:	08025589 	.word	0x08025589

0801fa00 <_putc_r>:
 801fa00:	b570      	push	{r4, r5, r6, lr}
 801fa02:	460d      	mov	r5, r1
 801fa04:	4614      	mov	r4, r2
 801fa06:	4606      	mov	r6, r0
 801fa08:	b118      	cbz	r0, 801fa12 <_putc_r+0x12>
 801fa0a:	6983      	ldr	r3, [r0, #24]
 801fa0c:	b90b      	cbnz	r3, 801fa12 <_putc_r+0x12>
 801fa0e:	f7fd f9c3 	bl	801cd98 <__sinit>
 801fa12:	4b1c      	ldr	r3, [pc, #112]	; (801fa84 <_putc_r+0x84>)
 801fa14:	429c      	cmp	r4, r3
 801fa16:	d124      	bne.n	801fa62 <_putc_r+0x62>
 801fa18:	6874      	ldr	r4, [r6, #4]
 801fa1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fa1c:	07d8      	lsls	r0, r3, #31
 801fa1e:	d405      	bmi.n	801fa2c <_putc_r+0x2c>
 801fa20:	89a3      	ldrh	r3, [r4, #12]
 801fa22:	0599      	lsls	r1, r3, #22
 801fa24:	d402      	bmi.n	801fa2c <_putc_r+0x2c>
 801fa26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa28:	f7fd fd69 	bl	801d4fe <__retarget_lock_acquire_recursive>
 801fa2c:	68a3      	ldr	r3, [r4, #8]
 801fa2e:	3b01      	subs	r3, #1
 801fa30:	2b00      	cmp	r3, #0
 801fa32:	60a3      	str	r3, [r4, #8]
 801fa34:	da05      	bge.n	801fa42 <_putc_r+0x42>
 801fa36:	69a2      	ldr	r2, [r4, #24]
 801fa38:	4293      	cmp	r3, r2
 801fa3a:	db1c      	blt.n	801fa76 <_putc_r+0x76>
 801fa3c:	b2eb      	uxtb	r3, r5
 801fa3e:	2b0a      	cmp	r3, #10
 801fa40:	d019      	beq.n	801fa76 <_putc_r+0x76>
 801fa42:	6823      	ldr	r3, [r4, #0]
 801fa44:	1c5a      	adds	r2, r3, #1
 801fa46:	6022      	str	r2, [r4, #0]
 801fa48:	701d      	strb	r5, [r3, #0]
 801fa4a:	b2ed      	uxtb	r5, r5
 801fa4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fa4e:	07da      	lsls	r2, r3, #31
 801fa50:	d405      	bmi.n	801fa5e <_putc_r+0x5e>
 801fa52:	89a3      	ldrh	r3, [r4, #12]
 801fa54:	059b      	lsls	r3, r3, #22
 801fa56:	d402      	bmi.n	801fa5e <_putc_r+0x5e>
 801fa58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa5a:	f7fd fd52 	bl	801d502 <__retarget_lock_release_recursive>
 801fa5e:	4628      	mov	r0, r5
 801fa60:	bd70      	pop	{r4, r5, r6, pc}
 801fa62:	4b09      	ldr	r3, [pc, #36]	; (801fa88 <_putc_r+0x88>)
 801fa64:	429c      	cmp	r4, r3
 801fa66:	d101      	bne.n	801fa6c <_putc_r+0x6c>
 801fa68:	68b4      	ldr	r4, [r6, #8]
 801fa6a:	e7d6      	b.n	801fa1a <_putc_r+0x1a>
 801fa6c:	4b07      	ldr	r3, [pc, #28]	; (801fa8c <_putc_r+0x8c>)
 801fa6e:	429c      	cmp	r4, r3
 801fa70:	bf08      	it	eq
 801fa72:	68f4      	ldreq	r4, [r6, #12]
 801fa74:	e7d1      	b.n	801fa1a <_putc_r+0x1a>
 801fa76:	4629      	mov	r1, r5
 801fa78:	4622      	mov	r2, r4
 801fa7a:	4630      	mov	r0, r6
 801fa7c:	f7ff f844 	bl	801eb08 <__swbuf_r>
 801fa80:	4605      	mov	r5, r0
 801fa82:	e7e3      	b.n	801fa4c <_putc_r+0x4c>
 801fa84:	08024fe8 	.word	0x08024fe8
 801fa88:	08025008 	.word	0x08025008
 801fa8c:	08024fc8 	.word	0x08024fc8

0801fa90 <_read_r>:
 801fa90:	b538      	push	{r3, r4, r5, lr}
 801fa92:	4d07      	ldr	r5, [pc, #28]	; (801fab0 <_read_r+0x20>)
 801fa94:	4604      	mov	r4, r0
 801fa96:	4608      	mov	r0, r1
 801fa98:	4611      	mov	r1, r2
 801fa9a:	2200      	movs	r2, #0
 801fa9c:	602a      	str	r2, [r5, #0]
 801fa9e:	461a      	mov	r2, r3
 801faa0:	f7e1 f979 	bl	8000d96 <_read>
 801faa4:	1c43      	adds	r3, r0, #1
 801faa6:	d102      	bne.n	801faae <_read_r+0x1e>
 801faa8:	682b      	ldr	r3, [r5, #0]
 801faaa:	b103      	cbz	r3, 801faae <_read_r+0x1e>
 801faac:	6023      	str	r3, [r4, #0]
 801faae:	bd38      	pop	{r3, r4, r5, pc}
 801fab0:	20000d60 	.word	0x20000d60

0801fab4 <sniprintf>:
 801fab4:	b40c      	push	{r2, r3}
 801fab6:	b530      	push	{r4, r5, lr}
 801fab8:	4b17      	ldr	r3, [pc, #92]	; (801fb18 <sniprintf+0x64>)
 801faba:	1e0c      	subs	r4, r1, #0
 801fabc:	681d      	ldr	r5, [r3, #0]
 801fabe:	b09d      	sub	sp, #116	; 0x74
 801fac0:	da08      	bge.n	801fad4 <sniprintf+0x20>
 801fac2:	238b      	movs	r3, #139	; 0x8b
 801fac4:	602b      	str	r3, [r5, #0]
 801fac6:	f04f 30ff 	mov.w	r0, #4294967295
 801faca:	b01d      	add	sp, #116	; 0x74
 801facc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fad0:	b002      	add	sp, #8
 801fad2:	4770      	bx	lr
 801fad4:	f44f 7302 	mov.w	r3, #520	; 0x208
 801fad8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801fadc:	bf14      	ite	ne
 801fade:	f104 33ff 	addne.w	r3, r4, #4294967295
 801fae2:	4623      	moveq	r3, r4
 801fae4:	9304      	str	r3, [sp, #16]
 801fae6:	9307      	str	r3, [sp, #28]
 801fae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801faec:	9002      	str	r0, [sp, #8]
 801faee:	9006      	str	r0, [sp, #24]
 801faf0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801faf4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801faf6:	ab21      	add	r3, sp, #132	; 0x84
 801faf8:	a902      	add	r1, sp, #8
 801fafa:	4628      	mov	r0, r5
 801fafc:	9301      	str	r3, [sp, #4]
 801fafe:	f7ff fb91 	bl	801f224 <_svfiprintf_r>
 801fb02:	1c43      	adds	r3, r0, #1
 801fb04:	bfbc      	itt	lt
 801fb06:	238b      	movlt	r3, #139	; 0x8b
 801fb08:	602b      	strlt	r3, [r5, #0]
 801fb0a:	2c00      	cmp	r4, #0
 801fb0c:	d0dd      	beq.n	801faca <sniprintf+0x16>
 801fb0e:	9b02      	ldr	r3, [sp, #8]
 801fb10:	2200      	movs	r2, #0
 801fb12:	701a      	strb	r2, [r3, #0]
 801fb14:	e7d9      	b.n	801faca <sniprintf+0x16>
 801fb16:	bf00      	nop
 801fb18:	20000104 	.word	0x20000104

0801fb1c <siscanf>:
 801fb1c:	b40e      	push	{r1, r2, r3}
 801fb1e:	b510      	push	{r4, lr}
 801fb20:	b09f      	sub	sp, #124	; 0x7c
 801fb22:	ac21      	add	r4, sp, #132	; 0x84
 801fb24:	f44f 7101 	mov.w	r1, #516	; 0x204
 801fb28:	f854 2b04 	ldr.w	r2, [r4], #4
 801fb2c:	9201      	str	r2, [sp, #4]
 801fb2e:	f8ad 101c 	strh.w	r1, [sp, #28]
 801fb32:	9004      	str	r0, [sp, #16]
 801fb34:	9008      	str	r0, [sp, #32]
 801fb36:	f7e0 fb81 	bl	800023c <strlen>
 801fb3a:	4b0c      	ldr	r3, [pc, #48]	; (801fb6c <siscanf+0x50>)
 801fb3c:	9005      	str	r0, [sp, #20]
 801fb3e:	9009      	str	r0, [sp, #36]	; 0x24
 801fb40:	930d      	str	r3, [sp, #52]	; 0x34
 801fb42:	480b      	ldr	r0, [pc, #44]	; (801fb70 <siscanf+0x54>)
 801fb44:	9a01      	ldr	r2, [sp, #4]
 801fb46:	6800      	ldr	r0, [r0, #0]
 801fb48:	9403      	str	r4, [sp, #12]
 801fb4a:	2300      	movs	r3, #0
 801fb4c:	9311      	str	r3, [sp, #68]	; 0x44
 801fb4e:	9316      	str	r3, [sp, #88]	; 0x58
 801fb50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fb54:	f8ad 301e 	strh.w	r3, [sp, #30]
 801fb58:	a904      	add	r1, sp, #16
 801fb5a:	4623      	mov	r3, r4
 801fb5c:	f000 f8ba 	bl	801fcd4 <__ssvfiscanf_r>
 801fb60:	b01f      	add	sp, #124	; 0x7c
 801fb62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb66:	b003      	add	sp, #12
 801fb68:	4770      	bx	lr
 801fb6a:	bf00      	nop
 801fb6c:	0801d993 	.word	0x0801d993
 801fb70:	20000104 	.word	0x20000104

0801fb74 <strcpy>:
 801fb74:	4603      	mov	r3, r0
 801fb76:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fb7a:	f803 2b01 	strb.w	r2, [r3], #1
 801fb7e:	2a00      	cmp	r2, #0
 801fb80:	d1f9      	bne.n	801fb76 <strcpy+0x2>
 801fb82:	4770      	bx	lr

0801fb84 <strncmp>:
 801fb84:	b510      	push	{r4, lr}
 801fb86:	b16a      	cbz	r2, 801fba4 <strncmp+0x20>
 801fb88:	3901      	subs	r1, #1
 801fb8a:	1884      	adds	r4, r0, r2
 801fb8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 801fb90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801fb94:	4293      	cmp	r3, r2
 801fb96:	d103      	bne.n	801fba0 <strncmp+0x1c>
 801fb98:	42a0      	cmp	r0, r4
 801fb9a:	d001      	beq.n	801fba0 <strncmp+0x1c>
 801fb9c:	2b00      	cmp	r3, #0
 801fb9e:	d1f5      	bne.n	801fb8c <strncmp+0x8>
 801fba0:	1a98      	subs	r0, r3, r2
 801fba2:	bd10      	pop	{r4, pc}
 801fba4:	4610      	mov	r0, r2
 801fba6:	e7fc      	b.n	801fba2 <strncmp+0x1e>

0801fba8 <__ascii_wctomb>:
 801fba8:	b149      	cbz	r1, 801fbbe <__ascii_wctomb+0x16>
 801fbaa:	2aff      	cmp	r2, #255	; 0xff
 801fbac:	bf85      	ittet	hi
 801fbae:	238a      	movhi	r3, #138	; 0x8a
 801fbb0:	6003      	strhi	r3, [r0, #0]
 801fbb2:	700a      	strbls	r2, [r1, #0]
 801fbb4:	f04f 30ff 	movhi.w	r0, #4294967295
 801fbb8:	bf98      	it	ls
 801fbba:	2001      	movls	r0, #1
 801fbbc:	4770      	bx	lr
 801fbbe:	4608      	mov	r0, r1
 801fbc0:	4770      	bx	lr
	...

0801fbc4 <__env_lock>:
 801fbc4:	4801      	ldr	r0, [pc, #4]	; (801fbcc <__env_lock+0x8>)
 801fbc6:	f7fd bc9a 	b.w	801d4fe <__retarget_lock_acquire_recursive>
 801fbca:	bf00      	nop
 801fbcc:	20000d56 	.word	0x20000d56

0801fbd0 <__env_unlock>:
 801fbd0:	4801      	ldr	r0, [pc, #4]	; (801fbd8 <__env_unlock+0x8>)
 801fbd2:	f7fd bc96 	b.w	801d502 <__retarget_lock_release_recursive>
 801fbd6:	bf00      	nop
 801fbd8:	20000d56 	.word	0x20000d56

0801fbdc <memmove>:
 801fbdc:	4288      	cmp	r0, r1
 801fbde:	b510      	push	{r4, lr}
 801fbe0:	eb01 0402 	add.w	r4, r1, r2
 801fbe4:	d902      	bls.n	801fbec <memmove+0x10>
 801fbe6:	4284      	cmp	r4, r0
 801fbe8:	4623      	mov	r3, r4
 801fbea:	d807      	bhi.n	801fbfc <memmove+0x20>
 801fbec:	1e43      	subs	r3, r0, #1
 801fbee:	42a1      	cmp	r1, r4
 801fbf0:	d008      	beq.n	801fc04 <memmove+0x28>
 801fbf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fbf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801fbfa:	e7f8      	b.n	801fbee <memmove+0x12>
 801fbfc:	4402      	add	r2, r0
 801fbfe:	4601      	mov	r1, r0
 801fc00:	428a      	cmp	r2, r1
 801fc02:	d100      	bne.n	801fc06 <memmove+0x2a>
 801fc04:	bd10      	pop	{r4, pc}
 801fc06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fc0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801fc0e:	e7f7      	b.n	801fc00 <memmove+0x24>

0801fc10 <_malloc_usable_size_r>:
 801fc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fc14:	1f18      	subs	r0, r3, #4
 801fc16:	2b00      	cmp	r3, #0
 801fc18:	bfbc      	itt	lt
 801fc1a:	580b      	ldrlt	r3, [r1, r0]
 801fc1c:	18c0      	addlt	r0, r0, r3
 801fc1e:	4770      	bx	lr

0801fc20 <_sungetc_r>:
 801fc20:	b538      	push	{r3, r4, r5, lr}
 801fc22:	1c4b      	adds	r3, r1, #1
 801fc24:	4614      	mov	r4, r2
 801fc26:	d103      	bne.n	801fc30 <_sungetc_r+0x10>
 801fc28:	f04f 35ff 	mov.w	r5, #4294967295
 801fc2c:	4628      	mov	r0, r5
 801fc2e:	bd38      	pop	{r3, r4, r5, pc}
 801fc30:	8993      	ldrh	r3, [r2, #12]
 801fc32:	f023 0320 	bic.w	r3, r3, #32
 801fc36:	8193      	strh	r3, [r2, #12]
 801fc38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fc3a:	6852      	ldr	r2, [r2, #4]
 801fc3c:	b2cd      	uxtb	r5, r1
 801fc3e:	b18b      	cbz	r3, 801fc64 <_sungetc_r+0x44>
 801fc40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801fc42:	4293      	cmp	r3, r2
 801fc44:	dd08      	ble.n	801fc58 <_sungetc_r+0x38>
 801fc46:	6823      	ldr	r3, [r4, #0]
 801fc48:	1e5a      	subs	r2, r3, #1
 801fc4a:	6022      	str	r2, [r4, #0]
 801fc4c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801fc50:	6863      	ldr	r3, [r4, #4]
 801fc52:	3301      	adds	r3, #1
 801fc54:	6063      	str	r3, [r4, #4]
 801fc56:	e7e9      	b.n	801fc2c <_sungetc_r+0xc>
 801fc58:	4621      	mov	r1, r4
 801fc5a:	f000 fbbf 	bl	80203dc <__submore>
 801fc5e:	2800      	cmp	r0, #0
 801fc60:	d0f1      	beq.n	801fc46 <_sungetc_r+0x26>
 801fc62:	e7e1      	b.n	801fc28 <_sungetc_r+0x8>
 801fc64:	6921      	ldr	r1, [r4, #16]
 801fc66:	6823      	ldr	r3, [r4, #0]
 801fc68:	b151      	cbz	r1, 801fc80 <_sungetc_r+0x60>
 801fc6a:	4299      	cmp	r1, r3
 801fc6c:	d208      	bcs.n	801fc80 <_sungetc_r+0x60>
 801fc6e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801fc72:	42a9      	cmp	r1, r5
 801fc74:	d104      	bne.n	801fc80 <_sungetc_r+0x60>
 801fc76:	3b01      	subs	r3, #1
 801fc78:	3201      	adds	r2, #1
 801fc7a:	6023      	str	r3, [r4, #0]
 801fc7c:	6062      	str	r2, [r4, #4]
 801fc7e:	e7d5      	b.n	801fc2c <_sungetc_r+0xc>
 801fc80:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801fc84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fc88:	6363      	str	r3, [r4, #52]	; 0x34
 801fc8a:	2303      	movs	r3, #3
 801fc8c:	63a3      	str	r3, [r4, #56]	; 0x38
 801fc8e:	4623      	mov	r3, r4
 801fc90:	f803 5f46 	strb.w	r5, [r3, #70]!
 801fc94:	6023      	str	r3, [r4, #0]
 801fc96:	2301      	movs	r3, #1
 801fc98:	e7dc      	b.n	801fc54 <_sungetc_r+0x34>

0801fc9a <__ssrefill_r>:
 801fc9a:	b510      	push	{r4, lr}
 801fc9c:	460c      	mov	r4, r1
 801fc9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801fca0:	b169      	cbz	r1, 801fcbe <__ssrefill_r+0x24>
 801fca2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fca6:	4299      	cmp	r1, r3
 801fca8:	d001      	beq.n	801fcae <__ssrefill_r+0x14>
 801fcaa:	f7fd fcc5 	bl	801d638 <_free_r>
 801fcae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fcb0:	6063      	str	r3, [r4, #4]
 801fcb2:	2000      	movs	r0, #0
 801fcb4:	6360      	str	r0, [r4, #52]	; 0x34
 801fcb6:	b113      	cbz	r3, 801fcbe <__ssrefill_r+0x24>
 801fcb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801fcba:	6023      	str	r3, [r4, #0]
 801fcbc:	bd10      	pop	{r4, pc}
 801fcbe:	6923      	ldr	r3, [r4, #16]
 801fcc0:	6023      	str	r3, [r4, #0]
 801fcc2:	2300      	movs	r3, #0
 801fcc4:	6063      	str	r3, [r4, #4]
 801fcc6:	89a3      	ldrh	r3, [r4, #12]
 801fcc8:	f043 0320 	orr.w	r3, r3, #32
 801fccc:	81a3      	strh	r3, [r4, #12]
 801fcce:	f04f 30ff 	mov.w	r0, #4294967295
 801fcd2:	e7f3      	b.n	801fcbc <__ssrefill_r+0x22>

0801fcd4 <__ssvfiscanf_r>:
 801fcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcd8:	460c      	mov	r4, r1
 801fcda:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801fcde:	2100      	movs	r1, #0
 801fce0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801fce4:	49b2      	ldr	r1, [pc, #712]	; (801ffb0 <__ssvfiscanf_r+0x2dc>)
 801fce6:	91a0      	str	r1, [sp, #640]	; 0x280
 801fce8:	f10d 0804 	add.w	r8, sp, #4
 801fcec:	49b1      	ldr	r1, [pc, #708]	; (801ffb4 <__ssvfiscanf_r+0x2e0>)
 801fcee:	4fb2      	ldr	r7, [pc, #712]	; (801ffb8 <__ssvfiscanf_r+0x2e4>)
 801fcf0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801ffbc <__ssvfiscanf_r+0x2e8>
 801fcf4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801fcf8:	4606      	mov	r6, r0
 801fcfa:	91a1      	str	r1, [sp, #644]	; 0x284
 801fcfc:	9300      	str	r3, [sp, #0]
 801fcfe:	f892 a000 	ldrb.w	sl, [r2]
 801fd02:	f1ba 0f00 	cmp.w	sl, #0
 801fd06:	f000 8151 	beq.w	801ffac <__ssvfiscanf_r+0x2d8>
 801fd0a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801fd0e:	f013 0308 	ands.w	r3, r3, #8
 801fd12:	f102 0501 	add.w	r5, r2, #1
 801fd16:	d019      	beq.n	801fd4c <__ssvfiscanf_r+0x78>
 801fd18:	6863      	ldr	r3, [r4, #4]
 801fd1a:	2b00      	cmp	r3, #0
 801fd1c:	dd0f      	ble.n	801fd3e <__ssvfiscanf_r+0x6a>
 801fd1e:	6823      	ldr	r3, [r4, #0]
 801fd20:	781a      	ldrb	r2, [r3, #0]
 801fd22:	5cba      	ldrb	r2, [r7, r2]
 801fd24:	0712      	lsls	r2, r2, #28
 801fd26:	d401      	bmi.n	801fd2c <__ssvfiscanf_r+0x58>
 801fd28:	462a      	mov	r2, r5
 801fd2a:	e7e8      	b.n	801fcfe <__ssvfiscanf_r+0x2a>
 801fd2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801fd2e:	3201      	adds	r2, #1
 801fd30:	9245      	str	r2, [sp, #276]	; 0x114
 801fd32:	6862      	ldr	r2, [r4, #4]
 801fd34:	3301      	adds	r3, #1
 801fd36:	3a01      	subs	r2, #1
 801fd38:	6062      	str	r2, [r4, #4]
 801fd3a:	6023      	str	r3, [r4, #0]
 801fd3c:	e7ec      	b.n	801fd18 <__ssvfiscanf_r+0x44>
 801fd3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801fd40:	4621      	mov	r1, r4
 801fd42:	4630      	mov	r0, r6
 801fd44:	4798      	blx	r3
 801fd46:	2800      	cmp	r0, #0
 801fd48:	d0e9      	beq.n	801fd1e <__ssvfiscanf_r+0x4a>
 801fd4a:	e7ed      	b.n	801fd28 <__ssvfiscanf_r+0x54>
 801fd4c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801fd50:	f040 8083 	bne.w	801fe5a <__ssvfiscanf_r+0x186>
 801fd54:	9341      	str	r3, [sp, #260]	; 0x104
 801fd56:	9343      	str	r3, [sp, #268]	; 0x10c
 801fd58:	7853      	ldrb	r3, [r2, #1]
 801fd5a:	2b2a      	cmp	r3, #42	; 0x2a
 801fd5c:	bf02      	ittt	eq
 801fd5e:	2310      	moveq	r3, #16
 801fd60:	1c95      	addeq	r5, r2, #2
 801fd62:	9341      	streq	r3, [sp, #260]	; 0x104
 801fd64:	220a      	movs	r2, #10
 801fd66:	46ab      	mov	fp, r5
 801fd68:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801fd6c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801fd70:	2b09      	cmp	r3, #9
 801fd72:	d91d      	bls.n	801fdb0 <__ssvfiscanf_r+0xdc>
 801fd74:	4891      	ldr	r0, [pc, #580]	; (801ffbc <__ssvfiscanf_r+0x2e8>)
 801fd76:	2203      	movs	r2, #3
 801fd78:	f7e0 fa72 	bl	8000260 <memchr>
 801fd7c:	b140      	cbz	r0, 801fd90 <__ssvfiscanf_r+0xbc>
 801fd7e:	2301      	movs	r3, #1
 801fd80:	eba0 0009 	sub.w	r0, r0, r9
 801fd84:	fa03 f000 	lsl.w	r0, r3, r0
 801fd88:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801fd8a:	4318      	orrs	r0, r3
 801fd8c:	9041      	str	r0, [sp, #260]	; 0x104
 801fd8e:	465d      	mov	r5, fp
 801fd90:	f815 3b01 	ldrb.w	r3, [r5], #1
 801fd94:	2b78      	cmp	r3, #120	; 0x78
 801fd96:	d806      	bhi.n	801fda6 <__ssvfiscanf_r+0xd2>
 801fd98:	2b57      	cmp	r3, #87	; 0x57
 801fd9a:	d810      	bhi.n	801fdbe <__ssvfiscanf_r+0xea>
 801fd9c:	2b25      	cmp	r3, #37	; 0x25
 801fd9e:	d05c      	beq.n	801fe5a <__ssvfiscanf_r+0x186>
 801fda0:	d856      	bhi.n	801fe50 <__ssvfiscanf_r+0x17c>
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	d074      	beq.n	801fe90 <__ssvfiscanf_r+0x1bc>
 801fda6:	2303      	movs	r3, #3
 801fda8:	9347      	str	r3, [sp, #284]	; 0x11c
 801fdaa:	230a      	movs	r3, #10
 801fdac:	9342      	str	r3, [sp, #264]	; 0x108
 801fdae:	e081      	b.n	801feb4 <__ssvfiscanf_r+0x1e0>
 801fdb0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801fdb2:	fb02 1303 	mla	r3, r2, r3, r1
 801fdb6:	3b30      	subs	r3, #48	; 0x30
 801fdb8:	9343      	str	r3, [sp, #268]	; 0x10c
 801fdba:	465d      	mov	r5, fp
 801fdbc:	e7d3      	b.n	801fd66 <__ssvfiscanf_r+0x92>
 801fdbe:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801fdc2:	2a20      	cmp	r2, #32
 801fdc4:	d8ef      	bhi.n	801fda6 <__ssvfiscanf_r+0xd2>
 801fdc6:	a101      	add	r1, pc, #4	; (adr r1, 801fdcc <__ssvfiscanf_r+0xf8>)
 801fdc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801fdcc:	0801fe9f 	.word	0x0801fe9f
 801fdd0:	0801fda7 	.word	0x0801fda7
 801fdd4:	0801fda7 	.word	0x0801fda7
 801fdd8:	0801fefd 	.word	0x0801fefd
 801fddc:	0801fda7 	.word	0x0801fda7
 801fde0:	0801fda7 	.word	0x0801fda7
 801fde4:	0801fda7 	.word	0x0801fda7
 801fde8:	0801fda7 	.word	0x0801fda7
 801fdec:	0801fda7 	.word	0x0801fda7
 801fdf0:	0801fda7 	.word	0x0801fda7
 801fdf4:	0801fda7 	.word	0x0801fda7
 801fdf8:	0801ff13 	.word	0x0801ff13
 801fdfc:	0801fee9 	.word	0x0801fee9
 801fe00:	0801fe57 	.word	0x0801fe57
 801fe04:	0801fe57 	.word	0x0801fe57
 801fe08:	0801fe57 	.word	0x0801fe57
 801fe0c:	0801fda7 	.word	0x0801fda7
 801fe10:	0801feed 	.word	0x0801feed
 801fe14:	0801fda7 	.word	0x0801fda7
 801fe18:	0801fda7 	.word	0x0801fda7
 801fe1c:	0801fda7 	.word	0x0801fda7
 801fe20:	0801fda7 	.word	0x0801fda7
 801fe24:	0801ff23 	.word	0x0801ff23
 801fe28:	0801fef5 	.word	0x0801fef5
 801fe2c:	0801fe97 	.word	0x0801fe97
 801fe30:	0801fda7 	.word	0x0801fda7
 801fe34:	0801fda7 	.word	0x0801fda7
 801fe38:	0801ff1f 	.word	0x0801ff1f
 801fe3c:	0801fda7 	.word	0x0801fda7
 801fe40:	0801fee9 	.word	0x0801fee9
 801fe44:	0801fda7 	.word	0x0801fda7
 801fe48:	0801fda7 	.word	0x0801fda7
 801fe4c:	0801fe9f 	.word	0x0801fe9f
 801fe50:	3b45      	subs	r3, #69	; 0x45
 801fe52:	2b02      	cmp	r3, #2
 801fe54:	d8a7      	bhi.n	801fda6 <__ssvfiscanf_r+0xd2>
 801fe56:	2305      	movs	r3, #5
 801fe58:	e02b      	b.n	801feb2 <__ssvfiscanf_r+0x1de>
 801fe5a:	6863      	ldr	r3, [r4, #4]
 801fe5c:	2b00      	cmp	r3, #0
 801fe5e:	dd0d      	ble.n	801fe7c <__ssvfiscanf_r+0x1a8>
 801fe60:	6823      	ldr	r3, [r4, #0]
 801fe62:	781a      	ldrb	r2, [r3, #0]
 801fe64:	4552      	cmp	r2, sl
 801fe66:	f040 80a1 	bne.w	801ffac <__ssvfiscanf_r+0x2d8>
 801fe6a:	3301      	adds	r3, #1
 801fe6c:	6862      	ldr	r2, [r4, #4]
 801fe6e:	6023      	str	r3, [r4, #0]
 801fe70:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801fe72:	3a01      	subs	r2, #1
 801fe74:	3301      	adds	r3, #1
 801fe76:	6062      	str	r2, [r4, #4]
 801fe78:	9345      	str	r3, [sp, #276]	; 0x114
 801fe7a:	e755      	b.n	801fd28 <__ssvfiscanf_r+0x54>
 801fe7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801fe7e:	4621      	mov	r1, r4
 801fe80:	4630      	mov	r0, r6
 801fe82:	4798      	blx	r3
 801fe84:	2800      	cmp	r0, #0
 801fe86:	d0eb      	beq.n	801fe60 <__ssvfiscanf_r+0x18c>
 801fe88:	9844      	ldr	r0, [sp, #272]	; 0x110
 801fe8a:	2800      	cmp	r0, #0
 801fe8c:	f040 8084 	bne.w	801ff98 <__ssvfiscanf_r+0x2c4>
 801fe90:	f04f 30ff 	mov.w	r0, #4294967295
 801fe94:	e086      	b.n	801ffa4 <__ssvfiscanf_r+0x2d0>
 801fe96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801fe98:	f042 0220 	orr.w	r2, r2, #32
 801fe9c:	9241      	str	r2, [sp, #260]	; 0x104
 801fe9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801fea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fea4:	9241      	str	r2, [sp, #260]	; 0x104
 801fea6:	2210      	movs	r2, #16
 801fea8:	2b6f      	cmp	r3, #111	; 0x6f
 801feaa:	9242      	str	r2, [sp, #264]	; 0x108
 801feac:	bf34      	ite	cc
 801feae:	2303      	movcc	r3, #3
 801feb0:	2304      	movcs	r3, #4
 801feb2:	9347      	str	r3, [sp, #284]	; 0x11c
 801feb4:	6863      	ldr	r3, [r4, #4]
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	dd41      	ble.n	801ff3e <__ssvfiscanf_r+0x26a>
 801feba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801febc:	0659      	lsls	r1, r3, #25
 801febe:	d404      	bmi.n	801feca <__ssvfiscanf_r+0x1f6>
 801fec0:	6823      	ldr	r3, [r4, #0]
 801fec2:	781a      	ldrb	r2, [r3, #0]
 801fec4:	5cba      	ldrb	r2, [r7, r2]
 801fec6:	0712      	lsls	r2, r2, #28
 801fec8:	d440      	bmi.n	801ff4c <__ssvfiscanf_r+0x278>
 801feca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801fecc:	2b02      	cmp	r3, #2
 801fece:	dc4f      	bgt.n	801ff70 <__ssvfiscanf_r+0x29c>
 801fed0:	466b      	mov	r3, sp
 801fed2:	4622      	mov	r2, r4
 801fed4:	a941      	add	r1, sp, #260	; 0x104
 801fed6:	4630      	mov	r0, r6
 801fed8:	f000 f874 	bl	801ffc4 <_scanf_chars>
 801fedc:	2801      	cmp	r0, #1
 801fede:	d065      	beq.n	801ffac <__ssvfiscanf_r+0x2d8>
 801fee0:	2802      	cmp	r0, #2
 801fee2:	f47f af21 	bne.w	801fd28 <__ssvfiscanf_r+0x54>
 801fee6:	e7cf      	b.n	801fe88 <__ssvfiscanf_r+0x1b4>
 801fee8:	220a      	movs	r2, #10
 801feea:	e7dd      	b.n	801fea8 <__ssvfiscanf_r+0x1d4>
 801feec:	2300      	movs	r3, #0
 801feee:	9342      	str	r3, [sp, #264]	; 0x108
 801fef0:	2303      	movs	r3, #3
 801fef2:	e7de      	b.n	801feb2 <__ssvfiscanf_r+0x1de>
 801fef4:	2308      	movs	r3, #8
 801fef6:	9342      	str	r3, [sp, #264]	; 0x108
 801fef8:	2304      	movs	r3, #4
 801fefa:	e7da      	b.n	801feb2 <__ssvfiscanf_r+0x1de>
 801fefc:	4629      	mov	r1, r5
 801fefe:	4640      	mov	r0, r8
 801ff00:	f000 f9ac 	bl	802025c <__sccl>
 801ff04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ff06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ff0a:	9341      	str	r3, [sp, #260]	; 0x104
 801ff0c:	4605      	mov	r5, r0
 801ff0e:	2301      	movs	r3, #1
 801ff10:	e7cf      	b.n	801feb2 <__ssvfiscanf_r+0x1de>
 801ff12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ff14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ff18:	9341      	str	r3, [sp, #260]	; 0x104
 801ff1a:	2300      	movs	r3, #0
 801ff1c:	e7c9      	b.n	801feb2 <__ssvfiscanf_r+0x1de>
 801ff1e:	2302      	movs	r3, #2
 801ff20:	e7c7      	b.n	801feb2 <__ssvfiscanf_r+0x1de>
 801ff22:	9841      	ldr	r0, [sp, #260]	; 0x104
 801ff24:	06c3      	lsls	r3, r0, #27
 801ff26:	f53f aeff 	bmi.w	801fd28 <__ssvfiscanf_r+0x54>
 801ff2a:	9b00      	ldr	r3, [sp, #0]
 801ff2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ff2e:	1d19      	adds	r1, r3, #4
 801ff30:	9100      	str	r1, [sp, #0]
 801ff32:	681b      	ldr	r3, [r3, #0]
 801ff34:	07c0      	lsls	r0, r0, #31
 801ff36:	bf4c      	ite	mi
 801ff38:	801a      	strhmi	r2, [r3, #0]
 801ff3a:	601a      	strpl	r2, [r3, #0]
 801ff3c:	e6f4      	b.n	801fd28 <__ssvfiscanf_r+0x54>
 801ff3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ff40:	4621      	mov	r1, r4
 801ff42:	4630      	mov	r0, r6
 801ff44:	4798      	blx	r3
 801ff46:	2800      	cmp	r0, #0
 801ff48:	d0b7      	beq.n	801feba <__ssvfiscanf_r+0x1e6>
 801ff4a:	e79d      	b.n	801fe88 <__ssvfiscanf_r+0x1b4>
 801ff4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ff4e:	3201      	adds	r2, #1
 801ff50:	9245      	str	r2, [sp, #276]	; 0x114
 801ff52:	6862      	ldr	r2, [r4, #4]
 801ff54:	3a01      	subs	r2, #1
 801ff56:	2a00      	cmp	r2, #0
 801ff58:	6062      	str	r2, [r4, #4]
 801ff5a:	dd02      	ble.n	801ff62 <__ssvfiscanf_r+0x28e>
 801ff5c:	3301      	adds	r3, #1
 801ff5e:	6023      	str	r3, [r4, #0]
 801ff60:	e7ae      	b.n	801fec0 <__ssvfiscanf_r+0x1ec>
 801ff62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ff64:	4621      	mov	r1, r4
 801ff66:	4630      	mov	r0, r6
 801ff68:	4798      	blx	r3
 801ff6a:	2800      	cmp	r0, #0
 801ff6c:	d0a8      	beq.n	801fec0 <__ssvfiscanf_r+0x1ec>
 801ff6e:	e78b      	b.n	801fe88 <__ssvfiscanf_r+0x1b4>
 801ff70:	2b04      	cmp	r3, #4
 801ff72:	dc06      	bgt.n	801ff82 <__ssvfiscanf_r+0x2ae>
 801ff74:	466b      	mov	r3, sp
 801ff76:	4622      	mov	r2, r4
 801ff78:	a941      	add	r1, sp, #260	; 0x104
 801ff7a:	4630      	mov	r0, r6
 801ff7c:	f000 f87a 	bl	8020074 <_scanf_i>
 801ff80:	e7ac      	b.n	801fedc <__ssvfiscanf_r+0x208>
 801ff82:	4b0f      	ldr	r3, [pc, #60]	; (801ffc0 <__ssvfiscanf_r+0x2ec>)
 801ff84:	2b00      	cmp	r3, #0
 801ff86:	f43f aecf 	beq.w	801fd28 <__ssvfiscanf_r+0x54>
 801ff8a:	466b      	mov	r3, sp
 801ff8c:	4622      	mov	r2, r4
 801ff8e:	a941      	add	r1, sp, #260	; 0x104
 801ff90:	4630      	mov	r0, r6
 801ff92:	f3af 8000 	nop.w
 801ff96:	e7a1      	b.n	801fedc <__ssvfiscanf_r+0x208>
 801ff98:	89a3      	ldrh	r3, [r4, #12]
 801ff9a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ff9e:	bf18      	it	ne
 801ffa0:	f04f 30ff 	movne.w	r0, #4294967295
 801ffa4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801ffa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffac:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ffae:	e7f9      	b.n	801ffa4 <__ssvfiscanf_r+0x2d0>
 801ffb0:	0801fc21 	.word	0x0801fc21
 801ffb4:	0801fc9b 	.word	0x0801fc9b
 801ffb8:	0802545d 	.word	0x0802545d
 801ffbc:	0802556d 	.word	0x0802556d
 801ffc0:	00000000 	.word	0x00000000

0801ffc4 <_scanf_chars>:
 801ffc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ffc8:	4615      	mov	r5, r2
 801ffca:	688a      	ldr	r2, [r1, #8]
 801ffcc:	4680      	mov	r8, r0
 801ffce:	460c      	mov	r4, r1
 801ffd0:	b932      	cbnz	r2, 801ffe0 <_scanf_chars+0x1c>
 801ffd2:	698a      	ldr	r2, [r1, #24]
 801ffd4:	2a00      	cmp	r2, #0
 801ffd6:	bf0c      	ite	eq
 801ffd8:	2201      	moveq	r2, #1
 801ffda:	f04f 32ff 	movne.w	r2, #4294967295
 801ffde:	608a      	str	r2, [r1, #8]
 801ffe0:	6822      	ldr	r2, [r4, #0]
 801ffe2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8020070 <_scanf_chars+0xac>
 801ffe6:	06d1      	lsls	r1, r2, #27
 801ffe8:	bf5f      	itttt	pl
 801ffea:	681a      	ldrpl	r2, [r3, #0]
 801ffec:	1d11      	addpl	r1, r2, #4
 801ffee:	6019      	strpl	r1, [r3, #0]
 801fff0:	6816      	ldrpl	r6, [r2, #0]
 801fff2:	2700      	movs	r7, #0
 801fff4:	69a0      	ldr	r0, [r4, #24]
 801fff6:	b188      	cbz	r0, 802001c <_scanf_chars+0x58>
 801fff8:	2801      	cmp	r0, #1
 801fffa:	d107      	bne.n	802000c <_scanf_chars+0x48>
 801fffc:	682b      	ldr	r3, [r5, #0]
 801fffe:	781a      	ldrb	r2, [r3, #0]
 8020000:	6963      	ldr	r3, [r4, #20]
 8020002:	5c9b      	ldrb	r3, [r3, r2]
 8020004:	b953      	cbnz	r3, 802001c <_scanf_chars+0x58>
 8020006:	bb27      	cbnz	r7, 8020052 <_scanf_chars+0x8e>
 8020008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802000c:	2802      	cmp	r0, #2
 802000e:	d120      	bne.n	8020052 <_scanf_chars+0x8e>
 8020010:	682b      	ldr	r3, [r5, #0]
 8020012:	781b      	ldrb	r3, [r3, #0]
 8020014:	f813 3009 	ldrb.w	r3, [r3, r9]
 8020018:	071b      	lsls	r3, r3, #28
 802001a:	d41a      	bmi.n	8020052 <_scanf_chars+0x8e>
 802001c:	6823      	ldr	r3, [r4, #0]
 802001e:	06da      	lsls	r2, r3, #27
 8020020:	bf5e      	ittt	pl
 8020022:	682b      	ldrpl	r3, [r5, #0]
 8020024:	781b      	ldrbpl	r3, [r3, #0]
 8020026:	f806 3b01 	strbpl.w	r3, [r6], #1
 802002a:	682a      	ldr	r2, [r5, #0]
 802002c:	686b      	ldr	r3, [r5, #4]
 802002e:	3201      	adds	r2, #1
 8020030:	602a      	str	r2, [r5, #0]
 8020032:	68a2      	ldr	r2, [r4, #8]
 8020034:	3b01      	subs	r3, #1
 8020036:	3a01      	subs	r2, #1
 8020038:	606b      	str	r3, [r5, #4]
 802003a:	3701      	adds	r7, #1
 802003c:	60a2      	str	r2, [r4, #8]
 802003e:	b142      	cbz	r2, 8020052 <_scanf_chars+0x8e>
 8020040:	2b00      	cmp	r3, #0
 8020042:	dcd7      	bgt.n	801fff4 <_scanf_chars+0x30>
 8020044:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020048:	4629      	mov	r1, r5
 802004a:	4640      	mov	r0, r8
 802004c:	4798      	blx	r3
 802004e:	2800      	cmp	r0, #0
 8020050:	d0d0      	beq.n	801fff4 <_scanf_chars+0x30>
 8020052:	6823      	ldr	r3, [r4, #0]
 8020054:	f013 0310 	ands.w	r3, r3, #16
 8020058:	d105      	bne.n	8020066 <_scanf_chars+0xa2>
 802005a:	68e2      	ldr	r2, [r4, #12]
 802005c:	3201      	adds	r2, #1
 802005e:	60e2      	str	r2, [r4, #12]
 8020060:	69a2      	ldr	r2, [r4, #24]
 8020062:	b102      	cbz	r2, 8020066 <_scanf_chars+0xa2>
 8020064:	7033      	strb	r3, [r6, #0]
 8020066:	6923      	ldr	r3, [r4, #16]
 8020068:	441f      	add	r7, r3
 802006a:	6127      	str	r7, [r4, #16]
 802006c:	2000      	movs	r0, #0
 802006e:	e7cb      	b.n	8020008 <_scanf_chars+0x44>
 8020070:	0802545d 	.word	0x0802545d

08020074 <_scanf_i>:
 8020074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020078:	4698      	mov	r8, r3
 802007a:	4b74      	ldr	r3, [pc, #464]	; (802024c <_scanf_i+0x1d8>)
 802007c:	460c      	mov	r4, r1
 802007e:	4682      	mov	sl, r0
 8020080:	4616      	mov	r6, r2
 8020082:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020086:	b087      	sub	sp, #28
 8020088:	ab03      	add	r3, sp, #12
 802008a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802008e:	4b70      	ldr	r3, [pc, #448]	; (8020250 <_scanf_i+0x1dc>)
 8020090:	69a1      	ldr	r1, [r4, #24]
 8020092:	4a70      	ldr	r2, [pc, #448]	; (8020254 <_scanf_i+0x1e0>)
 8020094:	2903      	cmp	r1, #3
 8020096:	bf18      	it	ne
 8020098:	461a      	movne	r2, r3
 802009a:	68a3      	ldr	r3, [r4, #8]
 802009c:	9201      	str	r2, [sp, #4]
 802009e:	1e5a      	subs	r2, r3, #1
 80200a0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80200a4:	bf88      	it	hi
 80200a6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80200aa:	4627      	mov	r7, r4
 80200ac:	bf82      	ittt	hi
 80200ae:	eb03 0905 	addhi.w	r9, r3, r5
 80200b2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80200b6:	60a3      	strhi	r3, [r4, #8]
 80200b8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80200bc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80200c0:	bf98      	it	ls
 80200c2:	f04f 0900 	movls.w	r9, #0
 80200c6:	6023      	str	r3, [r4, #0]
 80200c8:	463d      	mov	r5, r7
 80200ca:	f04f 0b00 	mov.w	fp, #0
 80200ce:	6831      	ldr	r1, [r6, #0]
 80200d0:	ab03      	add	r3, sp, #12
 80200d2:	7809      	ldrb	r1, [r1, #0]
 80200d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80200d8:	2202      	movs	r2, #2
 80200da:	f7e0 f8c1 	bl	8000260 <memchr>
 80200de:	b328      	cbz	r0, 802012c <_scanf_i+0xb8>
 80200e0:	f1bb 0f01 	cmp.w	fp, #1
 80200e4:	d159      	bne.n	802019a <_scanf_i+0x126>
 80200e6:	6862      	ldr	r2, [r4, #4]
 80200e8:	b92a      	cbnz	r2, 80200f6 <_scanf_i+0x82>
 80200ea:	6822      	ldr	r2, [r4, #0]
 80200ec:	2308      	movs	r3, #8
 80200ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80200f2:	6063      	str	r3, [r4, #4]
 80200f4:	6022      	str	r2, [r4, #0]
 80200f6:	6822      	ldr	r2, [r4, #0]
 80200f8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80200fc:	6022      	str	r2, [r4, #0]
 80200fe:	68a2      	ldr	r2, [r4, #8]
 8020100:	1e51      	subs	r1, r2, #1
 8020102:	60a1      	str	r1, [r4, #8]
 8020104:	b192      	cbz	r2, 802012c <_scanf_i+0xb8>
 8020106:	6832      	ldr	r2, [r6, #0]
 8020108:	1c51      	adds	r1, r2, #1
 802010a:	6031      	str	r1, [r6, #0]
 802010c:	7812      	ldrb	r2, [r2, #0]
 802010e:	f805 2b01 	strb.w	r2, [r5], #1
 8020112:	6872      	ldr	r2, [r6, #4]
 8020114:	3a01      	subs	r2, #1
 8020116:	2a00      	cmp	r2, #0
 8020118:	6072      	str	r2, [r6, #4]
 802011a:	dc07      	bgt.n	802012c <_scanf_i+0xb8>
 802011c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8020120:	4631      	mov	r1, r6
 8020122:	4650      	mov	r0, sl
 8020124:	4790      	blx	r2
 8020126:	2800      	cmp	r0, #0
 8020128:	f040 8085 	bne.w	8020236 <_scanf_i+0x1c2>
 802012c:	f10b 0b01 	add.w	fp, fp, #1
 8020130:	f1bb 0f03 	cmp.w	fp, #3
 8020134:	d1cb      	bne.n	80200ce <_scanf_i+0x5a>
 8020136:	6863      	ldr	r3, [r4, #4]
 8020138:	b90b      	cbnz	r3, 802013e <_scanf_i+0xca>
 802013a:	230a      	movs	r3, #10
 802013c:	6063      	str	r3, [r4, #4]
 802013e:	6863      	ldr	r3, [r4, #4]
 8020140:	4945      	ldr	r1, [pc, #276]	; (8020258 <_scanf_i+0x1e4>)
 8020142:	6960      	ldr	r0, [r4, #20]
 8020144:	1ac9      	subs	r1, r1, r3
 8020146:	f000 f889 	bl	802025c <__sccl>
 802014a:	f04f 0b00 	mov.w	fp, #0
 802014e:	68a3      	ldr	r3, [r4, #8]
 8020150:	6822      	ldr	r2, [r4, #0]
 8020152:	2b00      	cmp	r3, #0
 8020154:	d03d      	beq.n	80201d2 <_scanf_i+0x15e>
 8020156:	6831      	ldr	r1, [r6, #0]
 8020158:	6960      	ldr	r0, [r4, #20]
 802015a:	f891 c000 	ldrb.w	ip, [r1]
 802015e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8020162:	2800      	cmp	r0, #0
 8020164:	d035      	beq.n	80201d2 <_scanf_i+0x15e>
 8020166:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802016a:	d124      	bne.n	80201b6 <_scanf_i+0x142>
 802016c:	0510      	lsls	r0, r2, #20
 802016e:	d522      	bpl.n	80201b6 <_scanf_i+0x142>
 8020170:	f10b 0b01 	add.w	fp, fp, #1
 8020174:	f1b9 0f00 	cmp.w	r9, #0
 8020178:	d003      	beq.n	8020182 <_scanf_i+0x10e>
 802017a:	3301      	adds	r3, #1
 802017c:	f109 39ff 	add.w	r9, r9, #4294967295
 8020180:	60a3      	str	r3, [r4, #8]
 8020182:	6873      	ldr	r3, [r6, #4]
 8020184:	3b01      	subs	r3, #1
 8020186:	2b00      	cmp	r3, #0
 8020188:	6073      	str	r3, [r6, #4]
 802018a:	dd1b      	ble.n	80201c4 <_scanf_i+0x150>
 802018c:	6833      	ldr	r3, [r6, #0]
 802018e:	3301      	adds	r3, #1
 8020190:	6033      	str	r3, [r6, #0]
 8020192:	68a3      	ldr	r3, [r4, #8]
 8020194:	3b01      	subs	r3, #1
 8020196:	60a3      	str	r3, [r4, #8]
 8020198:	e7d9      	b.n	802014e <_scanf_i+0xda>
 802019a:	f1bb 0f02 	cmp.w	fp, #2
 802019e:	d1ae      	bne.n	80200fe <_scanf_i+0x8a>
 80201a0:	6822      	ldr	r2, [r4, #0]
 80201a2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80201a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80201aa:	d1bf      	bne.n	802012c <_scanf_i+0xb8>
 80201ac:	2310      	movs	r3, #16
 80201ae:	6063      	str	r3, [r4, #4]
 80201b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80201b4:	e7a2      	b.n	80200fc <_scanf_i+0x88>
 80201b6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80201ba:	6022      	str	r2, [r4, #0]
 80201bc:	780b      	ldrb	r3, [r1, #0]
 80201be:	f805 3b01 	strb.w	r3, [r5], #1
 80201c2:	e7de      	b.n	8020182 <_scanf_i+0x10e>
 80201c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80201c8:	4631      	mov	r1, r6
 80201ca:	4650      	mov	r0, sl
 80201cc:	4798      	blx	r3
 80201ce:	2800      	cmp	r0, #0
 80201d0:	d0df      	beq.n	8020192 <_scanf_i+0x11e>
 80201d2:	6823      	ldr	r3, [r4, #0]
 80201d4:	05d9      	lsls	r1, r3, #23
 80201d6:	d50d      	bpl.n	80201f4 <_scanf_i+0x180>
 80201d8:	42bd      	cmp	r5, r7
 80201da:	d909      	bls.n	80201f0 <_scanf_i+0x17c>
 80201dc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80201e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80201e4:	4632      	mov	r2, r6
 80201e6:	4650      	mov	r0, sl
 80201e8:	4798      	blx	r3
 80201ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80201ee:	464d      	mov	r5, r9
 80201f0:	42bd      	cmp	r5, r7
 80201f2:	d028      	beq.n	8020246 <_scanf_i+0x1d2>
 80201f4:	6822      	ldr	r2, [r4, #0]
 80201f6:	f012 0210 	ands.w	r2, r2, #16
 80201fa:	d113      	bne.n	8020224 <_scanf_i+0x1b0>
 80201fc:	702a      	strb	r2, [r5, #0]
 80201fe:	6863      	ldr	r3, [r4, #4]
 8020200:	9e01      	ldr	r6, [sp, #4]
 8020202:	4639      	mov	r1, r7
 8020204:	4650      	mov	r0, sl
 8020206:	47b0      	blx	r6
 8020208:	f8d8 3000 	ldr.w	r3, [r8]
 802020c:	6821      	ldr	r1, [r4, #0]
 802020e:	1d1a      	adds	r2, r3, #4
 8020210:	f8c8 2000 	str.w	r2, [r8]
 8020214:	f011 0f20 	tst.w	r1, #32
 8020218:	681b      	ldr	r3, [r3, #0]
 802021a:	d00f      	beq.n	802023c <_scanf_i+0x1c8>
 802021c:	6018      	str	r0, [r3, #0]
 802021e:	68e3      	ldr	r3, [r4, #12]
 8020220:	3301      	adds	r3, #1
 8020222:	60e3      	str	r3, [r4, #12]
 8020224:	1bed      	subs	r5, r5, r7
 8020226:	44ab      	add	fp, r5
 8020228:	6925      	ldr	r5, [r4, #16]
 802022a:	445d      	add	r5, fp
 802022c:	6125      	str	r5, [r4, #16]
 802022e:	2000      	movs	r0, #0
 8020230:	b007      	add	sp, #28
 8020232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020236:	f04f 0b00 	mov.w	fp, #0
 802023a:	e7ca      	b.n	80201d2 <_scanf_i+0x15e>
 802023c:	07ca      	lsls	r2, r1, #31
 802023e:	bf4c      	ite	mi
 8020240:	8018      	strhmi	r0, [r3, #0]
 8020242:	6018      	strpl	r0, [r3, #0]
 8020244:	e7eb      	b.n	802021e <_scanf_i+0x1aa>
 8020246:	2001      	movs	r0, #1
 8020248:	e7f2      	b.n	8020230 <_scanf_i+0x1bc>
 802024a:	bf00      	nop
 802024c:	080231b0 	.word	0x080231b0
 8020250:	0801e5dd 	.word	0x0801e5dd
 8020254:	080203d9 	.word	0x080203d9
 8020258:	080255b3 	.word	0x080255b3

0802025c <__sccl>:
 802025c:	b570      	push	{r4, r5, r6, lr}
 802025e:	780b      	ldrb	r3, [r1, #0]
 8020260:	4604      	mov	r4, r0
 8020262:	2b5e      	cmp	r3, #94	; 0x5e
 8020264:	bf0b      	itete	eq
 8020266:	784b      	ldrbeq	r3, [r1, #1]
 8020268:	1c48      	addne	r0, r1, #1
 802026a:	1c88      	addeq	r0, r1, #2
 802026c:	2200      	movne	r2, #0
 802026e:	bf08      	it	eq
 8020270:	2201      	moveq	r2, #1
 8020272:	1e61      	subs	r1, r4, #1
 8020274:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8020278:	f801 2f01 	strb.w	r2, [r1, #1]!
 802027c:	42a9      	cmp	r1, r5
 802027e:	d1fb      	bne.n	8020278 <__sccl+0x1c>
 8020280:	b90b      	cbnz	r3, 8020286 <__sccl+0x2a>
 8020282:	3801      	subs	r0, #1
 8020284:	bd70      	pop	{r4, r5, r6, pc}
 8020286:	f082 0101 	eor.w	r1, r2, #1
 802028a:	54e1      	strb	r1, [r4, r3]
 802028c:	1c42      	adds	r2, r0, #1
 802028e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8020292:	2d2d      	cmp	r5, #45	; 0x2d
 8020294:	f102 36ff 	add.w	r6, r2, #4294967295
 8020298:	4610      	mov	r0, r2
 802029a:	d006      	beq.n	80202aa <__sccl+0x4e>
 802029c:	2d5d      	cmp	r5, #93	; 0x5d
 802029e:	d0f1      	beq.n	8020284 <__sccl+0x28>
 80202a0:	b90d      	cbnz	r5, 80202a6 <__sccl+0x4a>
 80202a2:	4630      	mov	r0, r6
 80202a4:	e7ee      	b.n	8020284 <__sccl+0x28>
 80202a6:	462b      	mov	r3, r5
 80202a8:	e7ef      	b.n	802028a <__sccl+0x2e>
 80202aa:	7816      	ldrb	r6, [r2, #0]
 80202ac:	2e5d      	cmp	r6, #93	; 0x5d
 80202ae:	d0fa      	beq.n	80202a6 <__sccl+0x4a>
 80202b0:	42b3      	cmp	r3, r6
 80202b2:	dcf8      	bgt.n	80202a6 <__sccl+0x4a>
 80202b4:	4618      	mov	r0, r3
 80202b6:	3001      	adds	r0, #1
 80202b8:	4286      	cmp	r6, r0
 80202ba:	5421      	strb	r1, [r4, r0]
 80202bc:	dcfb      	bgt.n	80202b6 <__sccl+0x5a>
 80202be:	43d8      	mvns	r0, r3
 80202c0:	4430      	add	r0, r6
 80202c2:	1c5d      	adds	r5, r3, #1
 80202c4:	42b3      	cmp	r3, r6
 80202c6:	bfa8      	it	ge
 80202c8:	2000      	movge	r0, #0
 80202ca:	182b      	adds	r3, r5, r0
 80202cc:	3202      	adds	r2, #2
 80202ce:	e7de      	b.n	802028e <__sccl+0x32>

080202d0 <_strtol_l.isra.0>:
 80202d0:	2b01      	cmp	r3, #1
 80202d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202d6:	d001      	beq.n	80202dc <_strtol_l.isra.0+0xc>
 80202d8:	2b24      	cmp	r3, #36	; 0x24
 80202da:	d906      	bls.n	80202ea <_strtol_l.isra.0+0x1a>
 80202dc:	f7fc fbb6 	bl	801ca4c <__errno>
 80202e0:	2316      	movs	r3, #22
 80202e2:	6003      	str	r3, [r0, #0]
 80202e4:	2000      	movs	r0, #0
 80202e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202ea:	4f3a      	ldr	r7, [pc, #232]	; (80203d4 <_strtol_l.isra.0+0x104>)
 80202ec:	468e      	mov	lr, r1
 80202ee:	4676      	mov	r6, lr
 80202f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80202f4:	5de5      	ldrb	r5, [r4, r7]
 80202f6:	f015 0508 	ands.w	r5, r5, #8
 80202fa:	d1f8      	bne.n	80202ee <_strtol_l.isra.0+0x1e>
 80202fc:	2c2d      	cmp	r4, #45	; 0x2d
 80202fe:	d134      	bne.n	802036a <_strtol_l.isra.0+0x9a>
 8020300:	f89e 4000 	ldrb.w	r4, [lr]
 8020304:	f04f 0801 	mov.w	r8, #1
 8020308:	f106 0e02 	add.w	lr, r6, #2
 802030c:	2b00      	cmp	r3, #0
 802030e:	d05c      	beq.n	80203ca <_strtol_l.isra.0+0xfa>
 8020310:	2b10      	cmp	r3, #16
 8020312:	d10c      	bne.n	802032e <_strtol_l.isra.0+0x5e>
 8020314:	2c30      	cmp	r4, #48	; 0x30
 8020316:	d10a      	bne.n	802032e <_strtol_l.isra.0+0x5e>
 8020318:	f89e 4000 	ldrb.w	r4, [lr]
 802031c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020320:	2c58      	cmp	r4, #88	; 0x58
 8020322:	d14d      	bne.n	80203c0 <_strtol_l.isra.0+0xf0>
 8020324:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020328:	2310      	movs	r3, #16
 802032a:	f10e 0e02 	add.w	lr, lr, #2
 802032e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8020332:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020336:	2600      	movs	r6, #0
 8020338:	fbbc f9f3 	udiv	r9, ip, r3
 802033c:	4635      	mov	r5, r6
 802033e:	fb03 ca19 	mls	sl, r3, r9, ip
 8020342:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8020346:	2f09      	cmp	r7, #9
 8020348:	d818      	bhi.n	802037c <_strtol_l.isra.0+0xac>
 802034a:	463c      	mov	r4, r7
 802034c:	42a3      	cmp	r3, r4
 802034e:	dd24      	ble.n	802039a <_strtol_l.isra.0+0xca>
 8020350:	2e00      	cmp	r6, #0
 8020352:	db1f      	blt.n	8020394 <_strtol_l.isra.0+0xc4>
 8020354:	45a9      	cmp	r9, r5
 8020356:	d31d      	bcc.n	8020394 <_strtol_l.isra.0+0xc4>
 8020358:	d101      	bne.n	802035e <_strtol_l.isra.0+0x8e>
 802035a:	45a2      	cmp	sl, r4
 802035c:	db1a      	blt.n	8020394 <_strtol_l.isra.0+0xc4>
 802035e:	fb05 4503 	mla	r5, r5, r3, r4
 8020362:	2601      	movs	r6, #1
 8020364:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020368:	e7eb      	b.n	8020342 <_strtol_l.isra.0+0x72>
 802036a:	2c2b      	cmp	r4, #43	; 0x2b
 802036c:	bf08      	it	eq
 802036e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8020372:	46a8      	mov	r8, r5
 8020374:	bf08      	it	eq
 8020376:	f106 0e02 	addeq.w	lr, r6, #2
 802037a:	e7c7      	b.n	802030c <_strtol_l.isra.0+0x3c>
 802037c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8020380:	2f19      	cmp	r7, #25
 8020382:	d801      	bhi.n	8020388 <_strtol_l.isra.0+0xb8>
 8020384:	3c37      	subs	r4, #55	; 0x37
 8020386:	e7e1      	b.n	802034c <_strtol_l.isra.0+0x7c>
 8020388:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 802038c:	2f19      	cmp	r7, #25
 802038e:	d804      	bhi.n	802039a <_strtol_l.isra.0+0xca>
 8020390:	3c57      	subs	r4, #87	; 0x57
 8020392:	e7db      	b.n	802034c <_strtol_l.isra.0+0x7c>
 8020394:	f04f 36ff 	mov.w	r6, #4294967295
 8020398:	e7e4      	b.n	8020364 <_strtol_l.isra.0+0x94>
 802039a:	2e00      	cmp	r6, #0
 802039c:	da05      	bge.n	80203aa <_strtol_l.isra.0+0xda>
 802039e:	2322      	movs	r3, #34	; 0x22
 80203a0:	6003      	str	r3, [r0, #0]
 80203a2:	4665      	mov	r5, ip
 80203a4:	b942      	cbnz	r2, 80203b8 <_strtol_l.isra.0+0xe8>
 80203a6:	4628      	mov	r0, r5
 80203a8:	e79d      	b.n	80202e6 <_strtol_l.isra.0+0x16>
 80203aa:	f1b8 0f00 	cmp.w	r8, #0
 80203ae:	d000      	beq.n	80203b2 <_strtol_l.isra.0+0xe2>
 80203b0:	426d      	negs	r5, r5
 80203b2:	2a00      	cmp	r2, #0
 80203b4:	d0f7      	beq.n	80203a6 <_strtol_l.isra.0+0xd6>
 80203b6:	b10e      	cbz	r6, 80203bc <_strtol_l.isra.0+0xec>
 80203b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80203bc:	6011      	str	r1, [r2, #0]
 80203be:	e7f2      	b.n	80203a6 <_strtol_l.isra.0+0xd6>
 80203c0:	2430      	movs	r4, #48	; 0x30
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	d1b3      	bne.n	802032e <_strtol_l.isra.0+0x5e>
 80203c6:	2308      	movs	r3, #8
 80203c8:	e7b1      	b.n	802032e <_strtol_l.isra.0+0x5e>
 80203ca:	2c30      	cmp	r4, #48	; 0x30
 80203cc:	d0a4      	beq.n	8020318 <_strtol_l.isra.0+0x48>
 80203ce:	230a      	movs	r3, #10
 80203d0:	e7ad      	b.n	802032e <_strtol_l.isra.0+0x5e>
 80203d2:	bf00      	nop
 80203d4:	0802545d 	.word	0x0802545d

080203d8 <_strtol_r>:
 80203d8:	f7ff bf7a 	b.w	80202d0 <_strtol_l.isra.0>

080203dc <__submore>:
 80203dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203e0:	460c      	mov	r4, r1
 80203e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80203e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80203e8:	4299      	cmp	r1, r3
 80203ea:	d11d      	bne.n	8020428 <__submore+0x4c>
 80203ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80203f0:	f7fd f972 	bl	801d6d8 <_malloc_r>
 80203f4:	b918      	cbnz	r0, 80203fe <__submore+0x22>
 80203f6:	f04f 30ff 	mov.w	r0, #4294967295
 80203fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020402:	63a3      	str	r3, [r4, #56]	; 0x38
 8020404:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8020408:	6360      	str	r0, [r4, #52]	; 0x34
 802040a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802040e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8020412:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8020416:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802041a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802041e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8020422:	6020      	str	r0, [r4, #0]
 8020424:	2000      	movs	r0, #0
 8020426:	e7e8      	b.n	80203fa <__submore+0x1e>
 8020428:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802042a:	0077      	lsls	r7, r6, #1
 802042c:	463a      	mov	r2, r7
 802042e:	f7fe fe77 	bl	801f120 <_realloc_r>
 8020432:	4605      	mov	r5, r0
 8020434:	2800      	cmp	r0, #0
 8020436:	d0de      	beq.n	80203f6 <__submore+0x1a>
 8020438:	eb00 0806 	add.w	r8, r0, r6
 802043c:	4601      	mov	r1, r0
 802043e:	4632      	mov	r2, r6
 8020440:	4640      	mov	r0, r8
 8020442:	f7fd f8d3 	bl	801d5ec <memcpy>
 8020446:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802044a:	f8c4 8000 	str.w	r8, [r4]
 802044e:	e7e9      	b.n	8020424 <__submore+0x48>

08020450 <_gettimeofday>:
 8020450:	4b02      	ldr	r3, [pc, #8]	; (802045c <_gettimeofday+0xc>)
 8020452:	2258      	movs	r2, #88	; 0x58
 8020454:	601a      	str	r2, [r3, #0]
 8020456:	f04f 30ff 	mov.w	r0, #4294967295
 802045a:	4770      	bx	lr
 802045c:	20000d60 	.word	0x20000d60

08020460 <_init>:
 8020460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020462:	bf00      	nop
 8020464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020466:	bc08      	pop	{r3}
 8020468:	469e      	mov	lr, r3
 802046a:	4770      	bx	lr

0802046c <_fini>:
 802046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802046e:	bf00      	nop
 8020470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020472:	bc08      	pop	{r3}
 8020474:	469e      	mov	lr, r3
 8020476:	4770      	bx	lr
