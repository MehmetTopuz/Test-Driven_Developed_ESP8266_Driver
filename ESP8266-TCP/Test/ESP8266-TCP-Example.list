
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015898  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003870  08015a78  08015a78  00025a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080192e8  080192e8  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  080192e8  080192e8  000292e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080192f0  080192f0  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080192f0  080192f0  000292f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  080192fc  080192fc  000292fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  08019308  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000934  20000334  0801963c  00030334  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c68  0801963c  00030c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a03a  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000920b  00000000  00000000  0007a39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002cd0  00000000  00000000  000835b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b20  00000000  00000000  00086280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c740  00000000  00000000  00088da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000214ac  00000000  00000000  000b54e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001018a0  00000000  00000000  000d698c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d822c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dccc  00000000  00000000  001d8280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001e5f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001e5f70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000334 	.word	0x20000334
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015a60 	.word	0x08015a60

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000338 	.word	0x20000338
 800021c:	08015a60 	.word	0x08015a60

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200003e8 	.word	0x200003e8

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f011 f986 	bl	801207c <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f011 f8de 	bl	801207c <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000354 	.word	0x20000354
 8000ef4:	20000c68 	.word	0x20000c68

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f011 fcb5 	bl	80128b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 fda7 	bl	8003aa0 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8000f60:	08019308 	.word	0x08019308
  ldr r2, =_sbss
 8000f64:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8000f68:	20000c68 	.word	0x20000c68

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000c54 	.word	0x20000c54
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000c54 	.word	0x20000c54

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	08017cd0 	.word	0x08017cd0
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08017ce0 	.word	0x08017ce0

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08017ce0 	.word	0x08017ce0

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08017ce8 	.word	0x08017ce8
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	08017d00 	.word	0x08017d00
 8003904:	08017d08 	.word	0x08017d08

08003908 <ringBuffer_init>:
#include "ring_buffer.h"
#include <stdlib.h>
#include <string.h>

RingBuffer* ringBuffer_init(uint32_t size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003910:	2010      	movs	r0, #16
 8003912:	f00f f973 	bl	8012bfc <malloc>
 8003916:	4603      	mov	r3, r0
 8003918:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003920:	2300      	movs	r3, #0
 8003922:	e017      	b.n	8003954 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003936:	2101      	movs	r1, #1
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f00e fb97 	bl	801206c <calloc>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003952:	68fb      	ldr	r3, [r7, #12]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <ringBuffer_deInit>:

void ringBuffer_deInit(RingBuffer* buffer)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	4618      	mov	r0, r3
 8003978:	f00f f948 	bl	8012c0c <free>
		}
		free(buffer);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f00f f945 	bl	8012c0c <free>
	}
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <ringBuffer_push>:

void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	460b      	mov	r3, r1
 8003994:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	3b01      	subs	r3, #1
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d00c      	beq.n	80039be <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4413      	add	r3, r2
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 80039bc:	e009      	b.n	80039d2 <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4413      	add	r3, r2
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <ringBuffer_pop>:

uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d00d      	beq.n	8003a10 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4413      	add	r3, r2
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	605a      	str	r2, [r3, #4]
		return data;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	e00a      	b.n	8003a26 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	605a      	str	r2, [r3, #4]
		return data;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <ringBuffer_flush>:

void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68d8      	ldr	r0, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	461a      	mov	r2, r3
 8003a44:	2100      	movs	r1, #0
 8003a46:	f00f f8f7 	bl	8012c38 <memset>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <ringBuffer_pushArray>:

void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<sizeof(data);i++)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	e00a      	b.n	8003a78 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	4413      	add	r3, r2
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff ff8c 	bl	800398a <ringBuffer_push>
	 for(int i = 0; i<sizeof(data);i++)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3301      	adds	r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d9f1      	bls.n	8003a62 <ringBuffer_pushArray+0x10>
}
 8003a7e:	bf00      	nop
 8003a80:	bf00      	nop
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <ringBuffer_lookFor>:

uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
	return 0;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003aa6:	f7fd fa62 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003aaa:	f000 f81d 	bl	8003ae8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003aae:	f000 f951 	bl	8003d54 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003ab2:	f000 f891 	bl	8003bd8 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003ab6:	f000 f8ed 	bl	8003c94 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003aba:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <main+0x44>)
 8003abc:	463b      	mov	r3, r7
 8003abe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ac2:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003ac6:	463b      	mov	r3, r7
 8003ac8:	4619      	mov	r1, r3
 8003aca:	2002      	movs	r0, #2
 8003acc:	f001 fa46 	bl	8004f5c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003ad0:	2120      	movs	r1, #32
 8003ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ad6:	f7fd fe47 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003ada:	2064      	movs	r0, #100	; 0x64
 8003adc:	f7fd fab8 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003ae0:	e7f6      	b.n	8003ad0 <main+0x30>
 8003ae2:	bf00      	nop
 8003ae4:	08015a80 	.word	0x08015a80

08003ae8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b0a8      	sub	sp, #160	; 0xa0
 8003aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003af2:	2238      	movs	r2, #56	; 0x38
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f00f f89e 	bl	8012c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003afc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b0c:	463b      	mov	r3, r7
 8003b0e:	2254      	movs	r2, #84	; 0x54
 8003b10:	2100      	movs	r1, #0
 8003b12:	4618      	mov	r0, r3
 8003b14:	f00f f890 	bl	8012c38 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003b18:	2000      	movs	r0, #0
 8003b1a:	f7fd fe63 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b26:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b28:	2340      	movs	r3, #64	; 0x40
 8003b2a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b32:	2302      	movs	r3, #2
 8003b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003b38:	2304      	movs	r3, #4
 8003b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003b3e:	2355      	movs	r3, #85	; 0x55
 8003b40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b44:	2302      	movs	r3, #2
 8003b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003b50:	2302      	movs	r3, #2
 8003b52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fd fef6 	bl	800194c <HAL_RCC_OscConfig>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	bf14      	ite	ne
 8003b66:	2301      	movne	r3, #1
 8003b68:	2300      	moveq	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003b70:	f000 f960 	bl	8003e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b74:	230f      	movs	r3, #15
 8003b76:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b80:	2300      	movs	r3, #0
 8003b82:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b84:	2300      	movs	r3, #0
 8003b86:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b8c:	2104      	movs	r1, #4
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe f9f4 	bl	8001f7c <HAL_RCC_ClockConfig>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bf14      	ite	ne
 8003b9a:	2301      	movne	r3, #1
 8003b9c:	2300      	moveq	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003ba4:	f000 f946 	bl	8003e34 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003ba8:	2321      	movs	r3, #33	; 0x21
 8003baa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003bac:	2300      	movs	r3, #0
 8003bae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe fbfc 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bf14      	ite	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	2300      	moveq	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003bcc:	f000 f932 	bl	8003e34 <Error_Handler>
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	37a0      	adds	r7, #160	; 0xa0
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003bdc:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003bde:	4a2c      	ldr	r2, [pc, #176]	; (8003c90 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003be0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003be2:	4b2a      	ldr	r3, [pc, #168]	; (8003c8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003be8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bea:	4b28      	ldr	r3, [pc, #160]	; (8003c8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003bf0:	4b26      	ldr	r3, [pc, #152]	; (8003c8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003bf6:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003bfc:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003bfe:	220c      	movs	r2, #12
 8003c00:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c02:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c08:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c0e:	4b1f      	ldr	r3, [pc, #124]	; (8003c8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c14:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003c1a:	481c      	ldr	r0, [pc, #112]	; (8003c8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c1c:	f7fe fe16 	bl	800284c <HAL_UART_Init>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	bf14      	ite	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	2300      	moveq	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003c30:	f000 f900 	bl	8003e34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c34:	2100      	movs	r1, #0
 8003c36:	4815      	ldr	r0, [pc, #84]	; (8003c8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c38:	f7ff fd9c 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bf14      	ite	ne
 8003c42:	2301      	movne	r3, #1
 8003c44:	2300      	moveq	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003c4c:	f000 f8f2 	bl	8003e34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c50:	2100      	movs	r1, #0
 8003c52:	480e      	ldr	r0, [pc, #56]	; (8003c8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c54:	f7ff fdcc 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bf14      	ite	ne
 8003c5e:	2301      	movne	r3, #1
 8003c60:	2300      	moveq	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003c68:	f000 f8e4 	bl	8003e34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003c6c:	4807      	ldr	r0, [pc, #28]	; (8003c8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c6e:	f7ff fd48 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003c82:	f000 f8d7 	bl	8003e34 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000358 	.word	0x20000358
 8003c90:	40008000 	.word	0x40008000

08003c94 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c98:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003c9a:	4a2d      	ldr	r2, [pc, #180]	; (8003d50 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003c9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c9e:	4b2b      	ldr	r3, [pc, #172]	; (8003d4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ca4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ca6:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003cb2:	4b26      	ldr	r3, [pc, #152]	; (8003d4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cb8:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cba:	220c      	movs	r2, #12
 8003cbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cbe:	4b23      	ldr	r3, [pc, #140]	; (8003d4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cc4:	4b21      	ldr	r3, [pc, #132]	; (8003d4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cca:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003cd0:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003cdc:	481b      	ldr	r0, [pc, #108]	; (8003d4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cde:	f7fe fdb5 	bl	800284c <HAL_UART_Init>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf14      	ite	ne
 8003ce8:	2301      	movne	r3, #1
 8003cea:	2300      	moveq	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003cf2:	f000 f89f 	bl	8003e34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4814      	ldr	r0, [pc, #80]	; (8003d4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cfa:	f7ff fd3b 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf14      	ite	ne
 8003d04:	2301      	movne	r3, #1
 8003d06:	2300      	moveq	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003d0e:	f000 f891 	bl	8003e34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d12:	2100      	movs	r1, #0
 8003d14:	480d      	ldr	r0, [pc, #52]	; (8003d4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d16:	f7ff fd6b 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bf14      	ite	ne
 8003d20:	2301      	movne	r3, #1
 8003d22:	2300      	moveq	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003d2a:	f000 f883 	bl	8003e34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003d2e:	4807      	ldr	r0, [pc, #28]	; (8003d4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d30:	f7ff fce7 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	bf14      	ite	ne
 8003d3a:	2301      	movne	r3, #1
 8003d3c:	2300      	moveq	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003d44:	f000 f876 	bl	8003e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	200003e8 	.word	0x200003e8
 8003d50:	40013800 	.word	0x40013800

08003d54 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5a:	f107 0314 	add.w	r3, r7, #20
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	605a      	str	r2, [r3, #4]
 8003d64:	609a      	str	r2, [r3, #8]
 8003d66:	60da      	str	r2, [r3, #12]
 8003d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d6a:	4b2f      	ldr	r3, [pc, #188]	; (8003e28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6e:	4a2e      	ldr	r2, [pc, #184]	; (8003e28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d70:	f043 0304 	orr.w	r3, r3, #4
 8003d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d76:	4b2c      	ldr	r3, [pc, #176]	; (8003e28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d82:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d86:	4a28      	ldr	r2, [pc, #160]	; (8003e28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d88:	f043 0320 	orr.w	r3, r3, #32
 8003d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d8e:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003db2:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db6:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003db8:	f043 0302 	orr.w	r3, r3, #2
 8003dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dbe:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2120      	movs	r1, #32
 8003dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dd2:	f7fd fcb1 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003dd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ddc:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <_ZL12MX_GPIO_Initv+0xd8>)
 8003dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003de4:	f107 0314 	add.w	r3, r7, #20
 8003de8:	4619      	mov	r1, r3
 8003dea:	4811      	ldr	r0, [pc, #68]	; (8003e30 <_ZL12MX_GPIO_Initv+0xdc>)
 8003dec:	f7fd fb22 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003df0:	2320      	movs	r3, #32
 8003df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003df4:	2301      	movs	r3, #1
 8003df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003e00:	f107 0314 	add.w	r3, r7, #20
 8003e04:	4619      	mov	r1, r3
 8003e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e0a:	f7fd fb13 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2100      	movs	r1, #0
 8003e12:	2028      	movs	r0, #40	; 0x28
 8003e14:	f7fd fa19 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e18:	2028      	movs	r0, #40	; 0x28
 8003e1a:	f7fd fa30 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 8003e1e:	bf00      	nop
 8003e20:	3728      	adds	r7, #40	; 0x28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	10110000 	.word	0x10110000
 8003e30:	48000800 	.word	0x48000800

08003e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e38:	b672      	cpsid	i
}
 8003e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e3c:	e7fe      	b.n	8003e3c <Error_Handler+0x8>

08003e3e <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8003e46:	2032      	movs	r0, #50	; 0x32
 8003e48:	f7ff fd5e 	bl	8003908 <ringBuffer_init>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	605a      	str	r2, [r3, #4]

	}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fd78 	bl	800395c <ringBuffer_deInit>
	}
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f00a ff10 	bl	800eca4 <_ZN5UtestC1Ev>
 8003e84:	4a03      	ldr	r2, [pc, #12]	; (8003e94 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	08018378 	.word	0x08018378

08003e98 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	4a05      	ldr	r2, [pc, #20]	; (8003eb8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f00a ff0b 	bl	800ecc4 <_ZN5UtestD1Ev>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	08018378 	.word	0x08018378

08003ebc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff ffe7 	bl	8003e98 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8003eca:	2108      	movs	r1, #8
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f002 fd27 	bl	8006920 <_ZdlPvj>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff ffbe 	bl	8003e74 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8003ef8:	4a03      	ldr	r2, [pc, #12]	; (8003f08 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	08018358 	.word	0x08018358

08003f0c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 8003f0c:	b590      	push	{r4, r7, lr}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	2222      	movs	r2, #34	; 0x22
 8003f16:	4906      	ldr	r1, [pc, #24]	; (8003f30 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8003f18:	2008      	movs	r0, #8
 8003f1a:	f002 fced 	bl	80068f8 <_ZnwjPKci>
 8003f1e:	4604      	mov	r4, r0
 8003f20:	4620      	mov	r0, r4
 8003f22:	f7ff ffdb 	bl	8003edc <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 8003f26:	4623      	mov	r3, r4
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd90      	pop	{r4, r7, pc}
 8003f30:	08015a88 	.word	0x08015a88

08003f34 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f009 fae0 	bl	800d504 <_ZN10UtestShellC1Ev>
 8003f44:	4a03      	ldr	r2, [pc, #12]	; (8003f54 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	080182ac 	.word	0x080182ac

08003f58 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8003f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af04      	add	r7, sp, #16
 8003f5e:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8003f60:	f00a fe76 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 8003f64:	4604      	mov	r4, r0
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	3338      	adds	r3, #56	; 0x38
 8003f6a:	681d      	ldr	r5, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	461e      	mov	r6, r3
 8003f74:	f00a fe7c 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	9302      	str	r3, [sp, #8]
 8003f7c:	2325      	movs	r3, #37	; 0x25
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	4b2a      	ldr	r3, [pc, #168]	; (800402c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8003f86:	4632      	mov	r2, r6
 8003f88:	2132      	movs	r1, #50	; 0x32
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8003f8e:	f00a fe5f 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 8003f92:	4604      	mov	r4, r0
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	3320      	adds	r3, #32
 8003f98:	681d      	ldr	r5, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf14      	ite	ne
 8003fa4:	2301      	movne	r3, #1
 8003fa6:	2300      	moveq	r3, #0
 8003fa8:	b2de      	uxtb	r6, r3
 8003faa:	f00a fe61 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	9303      	str	r3, [sp, #12]
 8003fb2:	2326      	movs	r3, #38	; 0x26
 8003fb4:	9302      	str	r3, [sp, #8]
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	; (800402c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8003fc0:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 8003fc2:	4631      	mov	r1, r6
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8003fc8:	f00a fe42 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 8003fcc:	4604      	mov	r4, r0
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	3338      	adds	r3, #56	; 0x38
 8003fd2:	681d      	ldr	r5, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	461e      	mov	r6, r3
 8003fdc:	f00a fe48 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	9302      	str	r3, [sp, #8]
 8003fe4:	2327      	movs	r3, #39	; 0x27
 8003fe6:	9301      	str	r3, [sp, #4]
 8003fe8:	4b10      	ldr	r3, [pc, #64]	; (800402c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	4b13      	ldr	r3, [pc, #76]	; (800403c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 8003fee:	4632      	mov	r2, r6
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 8003ff6:	f00a fe2b 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	3338      	adds	r3, #56	; 0x38
 8004000:	681d      	ldr	r5, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	461e      	mov	r6, r3
 800400a:	f00a fe31 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800400e:	4603      	mov	r3, r0
 8004010:	9302      	str	r3, [sp, #8]
 8004012:	2328      	movs	r3, #40	; 0x28
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	4b05      	ldr	r3, [pc, #20]	; (800402c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	4b09      	ldr	r3, [pc, #36]	; (8004040 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 800401c:	4632      	mov	r2, r6
 800401e:	2100      	movs	r1, #0
 8004020:	4620      	mov	r0, r4
 8004022:	47a8      	blx	r5

}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800402c:	08015a88 	.word	0x08015a88
 8004030:	08015a9c 	.word	0x08015a9c
 8004034:	08015ac4 	.word	0x08015ac4
 8004038:	08015adc 	.word	0x08015adc
 800403c:	08015ae4 	.word	0x08015ae4
 8004040:	08015b0c 	.word	0x08015b0c

08004044 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	605a      	str	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff ff0a 	bl	8003e74 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004060:	4a03      	ldr	r2, [pc, #12]	; (8004070 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	0801828c 	.word	0x0801828c

08004074 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	222c      	movs	r2, #44	; 0x2c
 800407e:	4906      	ldr	r1, [pc, #24]	; (8004098 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004080:	2008      	movs	r0, #8
 8004082:	f002 fc39 	bl	80068f8 <_ZnwjPKci>
 8004086:	4604      	mov	r4, r0
 8004088:	4620      	mov	r0, r4
 800408a:	f7ff ffdb 	bl	8004044 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 800408e:	4623      	mov	r3, r4
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	bd90      	pop	{r4, r7, pc}
 8004098:	08015a88 	.word	0x08015a88

0800409c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f009 fa2c 	bl	800d504 <_ZN10UtestShellC1Ev>
 80040ac:	4a03      	ldr	r2, [pc, #12]	; (80040bc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	080181e0 	.word	0x080181e0

080040c0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 80040c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af04      	add	r7, sp, #16
 80040c6:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2145      	movs	r1, #69	; 0x45
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fc5b 	bl	800398a <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 80040d4:	f00a fdbc 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 80040d8:	4604      	mov	r4, r0
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	3338      	adds	r3, #56	; 0x38
 80040de:	681d      	ldr	r5, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	461e      	mov	r6, r3
 80040ea:	f00a fdc1 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80040ee:	4603      	mov	r3, r0
 80040f0:	9302      	str	r3, [sp, #8]
 80040f2:	232f      	movs	r3, #47	; 0x2f
 80040f4:	9301      	str	r3, [sp, #4]
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	4b15      	ldr	r3, [pc, #84]	; (8004150 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 80040fc:	4632      	mov	r2, r6
 80040fe:	2145      	movs	r1, #69	; 0x45
 8004100:	4620      	mov	r0, r4
 8004102:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2110      	movs	r1, #16
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fc3d 	bl	800398a <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8004110:	f00a fd9e 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 8004114:	4604      	mov	r4, r0
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	3338      	adds	r3, #56	; 0x38
 800411a:	681d      	ldr	r5, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	461e      	mov	r6, r3
 8004128:	f00a fda2 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800412c:	4603      	mov	r3, r0
 800412e:	9302      	str	r3, [sp, #8]
 8004130:	2332      	movs	r3, #50	; 0x32
 8004132:	9301      	str	r3, [sp, #4]
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 800413a:	4632      	mov	r2, r6
 800413c:	2110      	movs	r1, #16
 800413e:	4620      	mov	r0, r4
 8004140:	47a8      	blx	r5

}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800414a:	bf00      	nop
 800414c:	08015a88 	.word	0x08015a88
 8004150:	08015b34 	.word	0x08015b34
 8004154:	08015b64 	.word	0x08015b64

08004158 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	605a      	str	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fe80 	bl	8003e74 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004174:	4a03      	ldr	r2, [pc, #12]	; (8004184 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	080181c0 	.word	0x080181c0

08004188 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004188:	b590      	push	{r4, r7, lr}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	2236      	movs	r2, #54	; 0x36
 8004192:	4906      	ldr	r1, [pc, #24]	; (80041ac <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004194:	2008      	movs	r0, #8
 8004196:	f002 fbaf 	bl	80068f8 <_ZnwjPKci>
 800419a:	4604      	mov	r4, r0
 800419c:	4620      	mov	r0, r4
 800419e:	f7ff ffdb 	bl	8004158 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 80041a2:	4623      	mov	r3, r4
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd90      	pop	{r4, r7, pc}
 80041ac:	08015a88 	.word	0x08015a88

080041b0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f009 f9a2 	bl	800d504 <_ZN10UtestShellC1Ev>
 80041c0:	4a03      	ldr	r2, [pc, #12]	; (80041d0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4618      	mov	r0, r3
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	08018114 	.word	0x08018114

080041d4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 80041d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041d6:	b089      	sub	sp, #36	; 0x24
 80041d8:	af04      	add	r7, sp, #16
 80041da:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	429a      	cmp	r2, r3
 80041f4:	bf0c      	ite	eq
 80041f6:	2301      	moveq	r3, #1
 80041f8:	2300      	movne	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	461a      	mov	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4293      	cmp	r3, r2
 8004202:	da0b      	bge.n	800421c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	4611      	mov	r1, r2
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff fbbb 	bl	800398a <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3301      	adds	r3, #1
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	e7e3      	b.n	80041e4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	21ff      	movs	r1, #255	; 0xff
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fbb1 	bl	800398a <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 8004228:	f00a fd12 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 800422c:	4604      	mov	r4, r0
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	3338      	adds	r3, #56	; 0x38
 8004232:	681d      	ldr	r5, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	461e      	mov	r6, r3
 800423e:	f00a fd17 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004242:	4603      	mov	r3, r0
 8004244:	9302      	str	r3, [sp, #8]
 8004246:	233e      	movs	r3, #62	; 0x3e
 8004248:	9301      	str	r3, [sp, #4]
 800424a:	4b05      	ldr	r3, [pc, #20]	; (8004260 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	4b05      	ldr	r3, [pc, #20]	; (8004264 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004250:	4632      	mov	r2, r6
 8004252:	21ff      	movs	r1, #255	; 0xff
 8004254:	4620      	mov	r0, r4
 8004256:	47a8      	blx	r5
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004260:	08015a88 	.word	0x08015a88
 8004264:	08015b94 	.word	0x08015b94

08004268 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff fdf8 	bl	8003e74 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004284:	4a03      	ldr	r2, [pc, #12]	; (8004294 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	080180f4 	.word	0x080180f4

08004298 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	2241      	movs	r2, #65	; 0x41
 80042a2:	4906      	ldr	r1, [pc, #24]	; (80042bc <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 80042a4:	2008      	movs	r0, #8
 80042a6:	f002 fb27 	bl	80068f8 <_ZnwjPKci>
 80042aa:	4604      	mov	r4, r0
 80042ac:	4620      	mov	r0, r4
 80042ae:	f7ff ffdb 	bl	8004268 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 80042b2:	4623      	mov	r3, r4
 80042b4:	4618      	mov	r0, r3
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd90      	pop	{r4, r7, pc}
 80042bc:	08015a88 	.word	0x08015a88

080042c0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f009 f91a 	bl	800d504 <_ZN10UtestShellC1Ev>
 80042d0:	4a03      	ldr	r2, [pc, #12]	; (80042e0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	08018048 	.word	0x08018048

080042e4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 80042e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042e6:	b089      	sub	sp, #36	; 0x24
 80042e8:	af04      	add	r7, sp, #16
 80042ea:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	21ff      	movs	r1, #255	; 0xff
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fb49 	bl	800398a <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff fb6e 	bl	80039de <ringBuffer_pop>
 8004302:	4603      	mov	r3, r0
 8004304:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 8004306:	f00a fca3 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 800430a:	4604      	mov	r4, r0
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	3338      	adds	r3, #56	; 0x38
 8004310:	681d      	ldr	r5, [r3, #0]
 8004312:	7bfe      	ldrb	r6, [r7, #15]
 8004314:	f00a fcac 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004318:	4603      	mov	r3, r0
 800431a:	9302      	str	r3, [sp, #8]
 800431c:	2346      	movs	r3, #70	; 0x46
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	4b05      	ldr	r3, [pc, #20]	; (8004338 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 8004326:	4632      	mov	r2, r6
 8004328:	21ff      	movs	r1, #255	; 0xff
 800432a:	4620      	mov	r0, r4
 800432c:	47a8      	blx	r5

}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004336:	bf00      	nop
 8004338:	08015a88 	.word	0x08015a88
 800433c:	08015bc4 	.word	0x08015bc4

08004340 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff fd8c 	bl	8003e74 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800435c:	4a03      	ldr	r2, [pc, #12]	; (800436c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	08018028 	.word	0x08018028

08004370 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004370:	b590      	push	{r4, r7, lr}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	224a      	movs	r2, #74	; 0x4a
 800437a:	4906      	ldr	r1, [pc, #24]	; (8004394 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 800437c:	2008      	movs	r0, #8
 800437e:	f002 fabb 	bl	80068f8 <_ZnwjPKci>
 8004382:	4604      	mov	r4, r0
 8004384:	4620      	mov	r0, r4
 8004386:	f7ff ffdb 	bl	8004340 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 800438a:	4623      	mov	r3, r4
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bd90      	pop	{r4, r7, pc}
 8004394:	08015a88 	.word	0x08015a88

08004398 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f009 f8ae 	bl	800d504 <_ZN10UtestShellC1Ev>
 80043a8:	4a03      	ldr	r2, [pc, #12]	; (80043b8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	08017f7c 	.word	0x08017f7c

080043bc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 80043bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043be:	b089      	sub	sp, #36	; 0x24
 80043c0:	af04      	add	r7, sp, #16
 80043c2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	21aa      	movs	r1, #170	; 0xaa
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fadb 	bl	800398a <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	429a      	cmp	r2, r3
 80043ec:	bf0c      	ite	eq
 80043ee:	2301      	moveq	r3, #1
 80043f0:	2300      	movne	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4293      	cmp	r3, r2
 80043fa:	da0a      	bge.n	8004412 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff faec 	bl	80039de <ringBuffer_pop>
 8004406:	4603      	mov	r3, r0
 8004408:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3301      	adds	r3, #1
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	e7e4      	b.n	80043dc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fae1 	bl	80039de <ringBuffer_pop>
 800441c:	4603      	mov	r3, r0
 800441e:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 8004420:	f00a fc16 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 8004424:	4604      	mov	r4, r0
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	3338      	adds	r3, #56	; 0x38
 800442a:	681d      	ldr	r5, [r3, #0]
 800442c:	7afe      	ldrb	r6, [r7, #11]
 800442e:	f00a fc1f 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004432:	4603      	mov	r3, r0
 8004434:	9302      	str	r3, [sp, #8]
 8004436:	2357      	movs	r3, #87	; 0x57
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 8004440:	4632      	mov	r2, r6
 8004442:	21aa      	movs	r1, #170	; 0xaa
 8004444:	4620      	mov	r0, r4
 8004446:	47a8      	blx	r5
}
 8004448:	bf00      	nop
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004450:	08015a88 	.word	0x08015a88
 8004454:	08015be4 	.word	0x08015be4

08004458 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	605a      	str	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fd00 	bl	8003e74 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004474:	4a03      	ldr	r2, [pc, #12]	; (8004484 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	08017f5c 	.word	0x08017f5c

08004488 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	225a      	movs	r2, #90	; 0x5a
 8004492:	4906      	ldr	r1, [pc, #24]	; (80044ac <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004494:	2008      	movs	r0, #8
 8004496:	f002 fa2f 	bl	80068f8 <_ZnwjPKci>
 800449a:	4604      	mov	r4, r0
 800449c:	4620      	mov	r0, r4
 800449e:	f7ff ffdb 	bl	8004458 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 80044a2:	4623      	mov	r3, r4
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd90      	pop	{r4, r7, pc}
 80044ac:	08015a88 	.word	0x08015a88

080044b0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f009 f822 	bl	800d504 <_ZN10UtestShellC1Ev>
 80044c0:	4a03      	ldr	r2, [pc, #12]	; (80044d0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	08017eb0 	.word	0x08017eb0

080044d4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 80044d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044d6:	b089      	sub	sp, #36	; 0x24
 80044d8:	af04      	add	r7, sp, #16
 80044da:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d20b      	bcs.n	8004504 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fa47 	bl	800398a <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3301      	adds	r3, #1
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	e7ed      	b.n	80044e0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004504:	f00a fba4 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 8004508:	4604      	mov	r4, r0
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	3338      	adds	r3, #56	; 0x38
 800450e:	681d      	ldr	r5, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	3b01      	subs	r3, #1
 800451e:	4413      	add	r3, r2
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	461e      	mov	r6, r3
 8004524:	f00a fba4 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004528:	4603      	mov	r3, r0
 800452a:	9302      	str	r3, [sp, #8]
 800452c:	2361      	movs	r3, #97	; 0x61
 800452e:	9301      	str	r3, [sp, #4]
 8004530:	4b24      	ldr	r3, [pc, #144]	; (80045c4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004536:	4632      	mov	r2, r6
 8004538:	2131      	movs	r1, #49	; 0x31
 800453a:	4620      	mov	r0, r4
 800453c:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fa75 	bl	8003a32 <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004548:	f00a fb82 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 800454c:	4604      	mov	r4, r0
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	3338      	adds	r3, #56	; 0x38
 8004552:	681d      	ldr	r5, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	3b01      	subs	r3, #1
 8004562:	4413      	add	r3, r2
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	461e      	mov	r6, r3
 8004568:	f00a fb82 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800456c:	4603      	mov	r3, r0
 800456e:	9302      	str	r3, [sp, #8]
 8004570:	2365      	movs	r3, #101	; 0x65
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	4b13      	ldr	r3, [pc, #76]	; (80045c4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	4b14      	ldr	r3, [pc, #80]	; (80045cc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 800457a:	4632      	mov	r2, r6
 800457c:	2100      	movs	r1, #0
 800457e:	4620      	mov	r0, r4
 8004580:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 8004582:	f00a fb65 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 8004586:	4604      	mov	r4, r0
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	3338      	adds	r3, #56	; 0x38
 800458c:	681d      	ldr	r5, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	4413      	add	r3, r2
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	461e      	mov	r6, r3
 80045a2:	f00a fb65 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045a6:	4603      	mov	r3, r0
 80045a8:	9302      	str	r3, [sp, #8]
 80045aa:	2366      	movs	r3, #102	; 0x66
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 80045b4:	4632      	mov	r2, r6
 80045b6:	2100      	movs	r1, #0
 80045b8:	4620      	mov	r0, r4
 80045ba:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c4:	08015a88 	.word	0x08015a88
 80045c8:	08015c04 	.word	0x08015c04
 80045cc:	08015c40 	.word	0x08015c40
 80045d0:	08015c7c 	.word	0x08015c7c

080045d4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	605a      	str	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff fc42 	bl	8003e74 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80045f0:	4a03      	ldr	r2, [pc, #12]	; (8004600 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	08017e90 	.word	0x08017e90

08004604 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004604:	b590      	push	{r4, r7, lr}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	226f      	movs	r2, #111	; 0x6f
 800460e:	4906      	ldr	r1, [pc, #24]	; (8004628 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004610:	2008      	movs	r0, #8
 8004612:	f002 f971 	bl	80068f8 <_ZnwjPKci>
 8004616:	4604      	mov	r4, r0
 8004618:	4620      	mov	r0, r4
 800461a:	f7ff ffdb 	bl	80045d4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 800461e:	4623      	mov	r3, r4
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	bd90      	pop	{r4, r7, pc}
 8004628:	08015a88 	.word	0x08015a88

0800462c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4618      	mov	r0, r3
 8004638:	f008 ff64 	bl	800d504 <_ZN10UtestShellC1Ev>
 800463c:	4a03      	ldr	r2, [pc, #12]	; (800464c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	08017de4 	.word	0x08017de4

08004650 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004652:	b087      	sub	sp, #28
 8004654:	af04      	add	r7, sp, #16
 8004656:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	490e      	ldr	r1, [pc, #56]	; (8004698 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff f9f7 	bl	8003a52 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004664:	f00a faf4 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 8004668:	4604      	mov	r4, r0
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	3324      	adds	r3, #36	; 0x24
 800466e:	681d      	ldr	r5, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	68de      	ldr	r6, [r3, #12]
 8004676:	f00a fafb 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800467a:	4603      	mov	r3, r0
 800467c:	9302      	str	r3, [sp, #8]
 800467e:	2373      	movs	r3, #115	; 0x73
 8004680:	9301      	str	r3, [sp, #4]
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	2300      	movs	r3, #0
 8004688:	4632      	mov	r2, r6
 800468a:	4903      	ldr	r1, [pc, #12]	; (8004698 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 800468c:	4620      	mov	r0, r4
 800468e:	47a8      	blx	r5
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004698:	08015cb4 	.word	0x08015cb4
 800469c:	08015a88 	.word	0x08015a88

080046a0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	605a      	str	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fbdc 	bl	8003e74 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80046bc:	4a03      	ldr	r2, [pc, #12]	; (80046cc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	08017dc4 	.word	0x08017dc4

080046d0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 80046d0:	b590      	push	{r4, r7, lr}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	2276      	movs	r2, #118	; 0x76
 80046da:	4906      	ldr	r1, [pc, #24]	; (80046f4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 80046dc:	2008      	movs	r0, #8
 80046de:	f002 f90b 	bl	80068f8 <_ZnwjPKci>
 80046e2:	4604      	mov	r4, r0
 80046e4:	4620      	mov	r0, r4
 80046e6:	f7ff ffdb 	bl	80046a0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 80046ea:	4623      	mov	r3, r4
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd90      	pop	{r4, r7, pc}
 80046f4:	08015a88 	.word	0x08015a88

080046f8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4618      	mov	r0, r3
 8004704:	f008 fefe 	bl	800d504 <_ZN10UtestShellC1Ev>
 8004708:	4a03      	ldr	r2, [pc, #12]	; (8004718 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	08017d18 	.word	0x08017d18

0800471c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 800471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004720:	b08a      	sub	sp, #40	; 0x28
 8004722:	af04      	add	r7, sp, #16
 8004724:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	4943      	ldr	r1, [pc, #268]	; (8004838 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x11c>)
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff f990 	bl	8003a52 <ringBuffer_pushArray>

	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4941      	ldr	r1, [pc, #260]	; (800483c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x120>)
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff f9a5 	bl	8003a88 <ringBuffer_lookFor>
 800473e:	4603      	mov	r3, r0
 8004740:	2b01      	cmp	r3, #1
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d05c      	beq.n	8004808 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0xec>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	493a      	ldr	r1, [pc, #232]	; (800483c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x120>)
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff f997 	bl	8003a88 <ringBuffer_lookFor>
 800475a:	4604      	mov	r4, r0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4936      	ldr	r1, [pc, #216]	; (800483c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x120>)
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff f990 	bl	8003a88 <ringBuffer_lookFor>
 8004768:	4603      	mov	r3, r0
 800476a:	429c      	cmp	r4, r3
 800476c:	bf14      	ite	ne
 800476e:	2301      	movne	r3, #1
 8004770:	2300      	moveq	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x6e>
 8004778:	f00a fa6a 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 800477c:	6803      	ldr	r3, [r0, #0]
 800477e:	3370      	adds	r3, #112	; 0x70
 8004780:	681c      	ldr	r4, [r3, #0]
 8004782:	237a      	movs	r3, #122	; 0x7a
 8004784:	4a2e      	ldr	r2, [pc, #184]	; (8004840 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x124>)
 8004786:	492f      	ldr	r1, [pc, #188]	; (8004844 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x128>)
 8004788:	47a0      	blx	r4
 800478a:	f00a fa61 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 800478e:	4604      	mov	r4, r0
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	3358      	adds	r3, #88	; 0x58
 8004794:	681d      	ldr	r5, [r3, #0]
 8004796:	f107 0308 	add.w	r3, r7, #8
 800479a:	2101      	movs	r1, #1
 800479c:	4618      	mov	r0, r3
 800479e:	f003 fdf5 	bl	800838c <_Z10StringFromi>
 80047a2:	f107 0308 	add.w	r3, r7, #8
 80047a6:	4618      	mov	r0, r3
 80047a8:	f003 fb1a 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 80047ac:	4606      	mov	r6, r0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4922      	ldr	r1, [pc, #136]	; (800483c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x120>)
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff f967 	bl	8003a88 <ringBuffer_lookFor>
 80047ba:	4602      	mov	r2, r0
 80047bc:	f107 0310 	add.w	r3, r7, #16
 80047c0:	4611      	mov	r1, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f004 f800 	bl	80087c8 <_Z10StringFromm>
 80047c8:	f107 0310 	add.w	r3, r7, #16
 80047cc:	4618      	mov	r0, r3
 80047ce:	f003 fb07 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 80047d2:	4680      	mov	r8, r0
 80047d4:	f00a fa4c 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80047d8:	4603      	mov	r3, r0
 80047da:	9303      	str	r3, [sp, #12]
 80047dc:	237a      	movs	r3, #122	; 0x7a
 80047de:	9302      	str	r3, [sp, #8]
 80047e0:	4b17      	ldr	r3, [pc, #92]	; (8004840 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x124>)
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	2300      	movs	r3, #0
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	4643      	mov	r3, r8
 80047ea:	4632      	mov	r2, r6
 80047ec:	2101      	movs	r1, #1
 80047ee:	4620      	mov	r0, r4
 80047f0:	47a8      	blx	r5
 80047f2:	f107 0310 	add.w	r3, r7, #16
 80047f6:	4618      	mov	r0, r3
 80047f8:	f003 fb1f 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 80047fc:	f107 0308 	add.w	r3, r7, #8
 8004800:	4618      	mov	r0, r3
 8004802:	f003 fb1a 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 8004806:	e012      	b.n	800482e <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x112>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004808:	f00a fa22 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 800480c:	4604      	mov	r4, r0
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	3338      	adds	r3, #56	; 0x38
 8004812:	681d      	ldr	r5, [r3, #0]
 8004814:	f00a fa2c 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004818:	4603      	mov	r3, r0
 800481a:	9302      	str	r3, [sp, #8]
 800481c:	237a      	movs	r3, #122	; 0x7a
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	4b07      	ldr	r3, [pc, #28]	; (8004840 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x124>)
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	2300      	movs	r3, #0
 8004826:	2200      	movs	r2, #0
 8004828:	2100      	movs	r1, #0
 800482a:	4620      	mov	r0, r4
 800482c:	47a8      	blx	r5
}
 800482e:	bf00      	nop
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004838:	08015cbc 	.word	0x08015cbc
 800483c:	08015cc8 	.word	0x08015cc8
 8004840:	08015a88 	.word	0x08015a88
 8004844:	08015cd0 	.word	0x08015cd0

08004848 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	4a05      	ldr	r2, [pc, #20]	; (8004868 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4618      	mov	r0, r3
 800485a:	f008 fea7 	bl	800d5ac <_ZN10UtestShellD1Ev>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	08017d18 	.word	0x08017d18

0800486c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ffe7 	bl	8004848 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 800487a:	211c      	movs	r1, #28
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f002 f84f 	bl	8006920 <_ZdlPvj>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	4a05      	ldr	r2, [pc, #20]	; (80048ac <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fafb 	bl	8003e98 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	08017dc4 	.word	0x08017dc4

080048b0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ffe7 	bl	800488c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 80048be:	2108      	movs	r1, #8
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f002 f82d 	bl	8006920 <_ZdlPvj>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	4a05      	ldr	r2, [pc, #20]	; (80048f0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f008 fe63 	bl	800d5ac <_ZN10UtestShellD1Ev>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	08017de4 	.word	0x08017de4

080048f4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff ffe7 	bl	80048d0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8004902:	211c      	movs	r1, #28
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f002 f80b 	bl	8006920 <_ZdlPvj>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	4a05      	ldr	r2, [pc, #20]	; (8004934 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fab7 	bl	8003e98 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	08017e90 	.word	0x08017e90

08004938 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff ffe7 	bl	8004914 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8004946:	2108      	movs	r1, #8
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f001 ffe9 	bl	8006920 <_ZdlPvj>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	4a05      	ldr	r2, [pc, #20]	; (8004978 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4618      	mov	r0, r3
 800496a:	f008 fe1f 	bl	800d5ac <_ZN10UtestShellD1Ev>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	08017eb0 	.word	0x08017eb0

0800497c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff ffe7 	bl	8004958 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 800498a:	211c      	movs	r1, #28
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f001 ffc7 	bl	8006920 <_ZdlPvj>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	4a05      	ldr	r2, [pc, #20]	; (80049bc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff fa73 	bl	8003e98 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	08017f5c 	.word	0x08017f5c

080049c0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff ffe7 	bl	800499c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 80049ce:	2108      	movs	r1, #8
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f001 ffa5 	bl	8006920 <_ZdlPvj>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	4a05      	ldr	r2, [pc, #20]	; (8004a00 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f008 fddb 	bl	800d5ac <_ZN10UtestShellD1Ev>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	08017f7c 	.word	0x08017f7c

08004a04 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ffe7 	bl	80049e0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8004a12:	211c      	movs	r1, #28
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 ff83 	bl	8006920 <_ZdlPvj>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	4a05      	ldr	r2, [pc, #20]	; (8004a44 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fa2f 	bl	8003e98 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	08018028 	.word	0x08018028

08004a48 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff ffe7 	bl	8004a24 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8004a56:	2108      	movs	r1, #8
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f001 ff61 	bl	8006920 <_ZdlPvj>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	4a05      	ldr	r2, [pc, #20]	; (8004a88 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f008 fd97 	bl	800d5ac <_ZN10UtestShellD1Ev>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4618      	mov	r0, r3
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	08018048 	.word	0x08018048

08004a8c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ffe7 	bl	8004a68 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8004a9a:	211c      	movs	r1, #28
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f001 ff3f 	bl	8006920 <_ZdlPvj>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	4a05      	ldr	r2, [pc, #20]	; (8004acc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff f9eb 	bl	8003e98 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	080180f4 	.word	0x080180f4

08004ad0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff ffe7 	bl	8004aac <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8004ade:	2108      	movs	r1, #8
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f001 ff1d 	bl	8006920 <_ZdlPvj>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	4a05      	ldr	r2, [pc, #20]	; (8004b10 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f008 fd53 	bl	800d5ac <_ZN10UtestShellD1Ev>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	08018114 	.word	0x08018114

08004b14 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff ffe7 	bl	8004af0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8004b22:	211c      	movs	r1, #28
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f001 fefb 	bl	8006920 <_ZdlPvj>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	4a05      	ldr	r2, [pc, #20]	; (8004b54 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff f9a7 	bl	8003e98 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	080181c0 	.word	0x080181c0

08004b58 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff ffe7 	bl	8004b34 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8004b66:	2108      	movs	r1, #8
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f001 fed9 	bl	8006920 <_ZdlPvj>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	4a05      	ldr	r2, [pc, #20]	; (8004b98 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f008 fd0f 	bl	800d5ac <_ZN10UtestShellD1Ev>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	080181e0 	.word	0x080181e0

08004b9c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff ffe7 	bl	8004b78 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8004baa:	211c      	movs	r1, #28
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f001 feb7 	bl	8006920 <_ZdlPvj>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	4a05      	ldr	r2, [pc, #20]	; (8004bdc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff f963 	bl	8003e98 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	0801828c 	.word	0x0801828c

08004be0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff ffe7 	bl	8004bbc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8004bee:	2108      	movs	r1, #8
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f001 fe95 	bl	8006920 <_ZdlPvj>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	4a05      	ldr	r2, [pc, #20]	; (8004c20 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f008 fccb 	bl	800d5ac <_ZN10UtestShellD1Ev>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	080182ac 	.word	0x080182ac

08004c24 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7ff ffe7 	bl	8004c00 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8004c32:	211c      	movs	r1, #28
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f001 fe73 	bl	8006920 <_ZdlPvj>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	4a05      	ldr	r2, [pc, #20]	; (8004c64 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff f91f 	bl	8003e98 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	08018358 	.word	0x08018358

08004c68 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff ffe7 	bl	8004c44 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8004c76:	2108      	movs	r1, #8
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f001 fe51 	bl	8006920 <_ZdlPvj>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d16c      	bne.n	8004d72 <_Z41__static_initialization_and_destruction_0ii+0xea>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d167      	bne.n	8004d72 <_Z41__static_initialization_and_destruction_0ii+0xea>
TEST(RingBuffer_Test_Group, InitTest)
 8004ca2:	4852      	ldr	r0, [pc, #328]	; (8004dec <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004ca4:	f7ff f946 	bl	8003f34 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8004ca8:	2322      	movs	r3, #34	; 0x22
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	4b50      	ldr	r3, [pc, #320]	; (8004df0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	4b50      	ldr	r3, [pc, #320]	; (8004df4 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004cb2:	4a51      	ldr	r2, [pc, #324]	; (8004df8 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004cb4:	494d      	ldr	r1, [pc, #308]	; (8004dec <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004cb6:	4851      	ldr	r0, [pc, #324]	; (8004dfc <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004cb8:	f00a fa62 	bl	800f180 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8004cbc:	4850      	ldr	r0, [pc, #320]	; (8004e00 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004cbe:	f7ff f9ed 	bl	800409c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8004cc2:	232c      	movs	r3, #44	; 0x2c
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	4b4a      	ldr	r3, [pc, #296]	; (8004df0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	4b4e      	ldr	r3, [pc, #312]	; (8004e04 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004ccc:	4a4a      	ldr	r2, [pc, #296]	; (8004df8 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004cce:	494c      	ldr	r1, [pc, #304]	; (8004e00 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004cd0:	484d      	ldr	r0, [pc, #308]	; (8004e08 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004cd2:	f00a fa55 	bl	800f180 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004cd6:	484d      	ldr	r0, [pc, #308]	; (8004e0c <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004cd8:	f7ff fa6a 	bl	80041b0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8004cdc:	2336      	movs	r3, #54	; 0x36
 8004cde:	9301      	str	r3, [sp, #4]
 8004ce0:	4b43      	ldr	r3, [pc, #268]	; (8004df0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	4b4a      	ldr	r3, [pc, #296]	; (8004e10 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004ce6:	4a44      	ldr	r2, [pc, #272]	; (8004df8 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004ce8:	4948      	ldr	r1, [pc, #288]	; (8004e0c <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004cea:	484a      	ldr	r0, [pc, #296]	; (8004e14 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004cec:	f00a fa48 	bl	800f180 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8004cf0:	4849      	ldr	r0, [pc, #292]	; (8004e18 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004cf2:	f7ff fae5 	bl	80042c0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8004cf6:	2341      	movs	r3, #65	; 0x41
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	4b3d      	ldr	r3, [pc, #244]	; (8004df0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	4b47      	ldr	r3, [pc, #284]	; (8004e1c <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004d00:	4a3d      	ldr	r2, [pc, #244]	; (8004df8 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004d02:	4945      	ldr	r1, [pc, #276]	; (8004e18 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004d04:	4846      	ldr	r0, [pc, #280]	; (8004e20 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004d06:	f00a fa3b 	bl	800f180 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004d0a:	4846      	ldr	r0, [pc, #280]	; (8004e24 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004d0c:	f7ff fb44 	bl	8004398 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8004d10:	234a      	movs	r3, #74	; 0x4a
 8004d12:	9301      	str	r3, [sp, #4]
 8004d14:	4b36      	ldr	r3, [pc, #216]	; (8004df0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	4b43      	ldr	r3, [pc, #268]	; (8004e28 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8004d1a:	4a37      	ldr	r2, [pc, #220]	; (8004df8 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004d1c:	4941      	ldr	r1, [pc, #260]	; (8004e24 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004d1e:	4843      	ldr	r0, [pc, #268]	; (8004e2c <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8004d20:	f00a fa2e 	bl	800f180 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004d24:	4842      	ldr	r0, [pc, #264]	; (8004e30 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8004d26:	f7ff fbc3 	bl	80044b0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8004d2a:	235a      	movs	r3, #90	; 0x5a
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	4b30      	ldr	r3, [pc, #192]	; (8004df0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	4b40      	ldr	r3, [pc, #256]	; (8004e34 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8004d34:	4a30      	ldr	r2, [pc, #192]	; (8004df8 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004d36:	493e      	ldr	r1, [pc, #248]	; (8004e30 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8004d38:	483f      	ldr	r0, [pc, #252]	; (8004e38 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8004d3a:	f00a fa21 	bl	800f180 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8004d3e:	483f      	ldr	r0, [pc, #252]	; (8004e3c <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8004d40:	f7ff fc74 	bl	800462c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8004d44:	236f      	movs	r3, #111	; 0x6f
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	4b29      	ldr	r3, [pc, #164]	; (8004df0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	4b3c      	ldr	r3, [pc, #240]	; (8004e40 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8004d4e:	4a2a      	ldr	r2, [pc, #168]	; (8004df8 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004d50:	493a      	ldr	r1, [pc, #232]	; (8004e3c <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8004d52:	483c      	ldr	r0, [pc, #240]	; (8004e44 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8004d54:	f00a fa14 	bl	800f180 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 8004d58:	483b      	ldr	r0, [pc, #236]	; (8004e48 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8004d5a:	f7ff fccd 	bl	80046f8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8004d5e:	2376      	movs	r3, #118	; 0x76
 8004d60:	9301      	str	r3, [sp, #4]
 8004d62:	4b23      	ldr	r3, [pc, #140]	; (8004df0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	4b39      	ldr	r3, [pc, #228]	; (8004e4c <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8004d68:	4a23      	ldr	r2, [pc, #140]	; (8004df8 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004d6a:	4937      	ldr	r1, [pc, #220]	; (8004e48 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8004d6c:	4838      	ldr	r0, [pc, #224]	; (8004e50 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8004d6e:	f00a fa07 	bl	800f180 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d134      	bne.n	8004de2 <_Z41__static_initialization_and_destruction_0ii+0x15a>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d12f      	bne.n	8004de2 <_Z41__static_initialization_and_destruction_0ii+0x15a>
 8004d82:	4833      	ldr	r0, [pc, #204]	; (8004e50 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8004d84:	f00a fa26 	bl	800f1d4 <_ZN13TestInstallerD1Ev>
 8004d88:	482f      	ldr	r0, [pc, #188]	; (8004e48 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8004d8a:	f7ff fd5d 	bl	8004848 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8004d8e:	482d      	ldr	r0, [pc, #180]	; (8004e44 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8004d90:	f00a fa20 	bl	800f1d4 <_ZN13TestInstallerD1Ev>
 8004d94:	4829      	ldr	r0, [pc, #164]	; (8004e3c <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8004d96:	f7ff fd9b 	bl	80048d0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004d9a:	4827      	ldr	r0, [pc, #156]	; (8004e38 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8004d9c:	f00a fa1a 	bl	800f1d4 <_ZN13TestInstallerD1Ev>
 8004da0:	4823      	ldr	r0, [pc, #140]	; (8004e30 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8004da2:	f7ff fdd9 	bl	8004958 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004da6:	4821      	ldr	r0, [pc, #132]	; (8004e2c <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8004da8:	f00a fa14 	bl	800f1d4 <_ZN13TestInstallerD1Ev>
 8004dac:	481d      	ldr	r0, [pc, #116]	; (8004e24 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004dae:	f7ff fe17 	bl	80049e0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 8004db2:	481b      	ldr	r0, [pc, #108]	; (8004e20 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004db4:	f00a fa0e 	bl	800f1d4 <_ZN13TestInstallerD1Ev>
 8004db8:	4817      	ldr	r0, [pc, #92]	; (8004e18 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004dba:	f7ff fe55 	bl	8004a68 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004dbe:	4815      	ldr	r0, [pc, #84]	; (8004e14 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004dc0:	f00a fa08 	bl	800f1d4 <_ZN13TestInstallerD1Ev>
 8004dc4:	4811      	ldr	r0, [pc, #68]	; (8004e0c <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004dc6:	f7ff fe93 	bl	8004af0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8004dca:	480f      	ldr	r0, [pc, #60]	; (8004e08 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004dcc:	f00a fa02 	bl	800f1d4 <_ZN13TestInstallerD1Ev>
 8004dd0:	480b      	ldr	r0, [pc, #44]	; (8004e00 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004dd2:	f7ff fed1 	bl	8004b78 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8004dd6:	4809      	ldr	r0, [pc, #36]	; (8004dfc <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004dd8:	f00a f9fc 	bl	800f1d4 <_ZN13TestInstallerD1Ev>
 8004ddc:	4803      	ldr	r0, [pc, #12]	; (8004dec <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004dde:	f7ff ff0f 	bl	8004c00 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000478 	.word	0x20000478
 8004df0:	08015a88 	.word	0x08015a88
 8004df4:	08015d74 	.word	0x08015d74
 8004df8:	08015d80 	.word	0x08015d80
 8004dfc:	20000494 	.word	0x20000494
 8004e00:	20000498 	.word	0x20000498
 8004e04:	08015d98 	.word	0x08015d98
 8004e08:	200004b4 	.word	0x200004b4
 8004e0c:	200004b8 	.word	0x200004b8
 8004e10:	08015da8 	.word	0x08015da8
 8004e14:	200004d4 	.word	0x200004d4
 8004e18:	200004d8 	.word	0x200004d8
 8004e1c:	08015dbc 	.word	0x08015dbc
 8004e20:	200004f4 	.word	0x200004f4
 8004e24:	200004f8 	.word	0x200004f8
 8004e28:	08015dcc 	.word	0x08015dcc
 8004e2c:	20000514 	.word	0x20000514
 8004e30:	20000518 	.word	0x20000518
 8004e34:	08015de4 	.word	0x08015de4
 8004e38:	20000534 	.word	0x20000534
 8004e3c:	20000538 	.word	0x20000538
 8004e40:	08015df4 	.word	0x08015df4
 8004e44:	20000554 	.word	0x20000554
 8004e48:	20000558 	.word	0x20000558
 8004e4c:	08015e04 	.word	0x08015e04
 8004e50:	20000574 	.word	0x20000574

08004e54 <_GLOBAL__sub_I_externTestGroupRingBuffer_Test_Group>:
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	f7ff ff13 	bl	8004c88 <_Z41__static_initialization_and_destruction_0ii>
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <_GLOBAL__sub_D_externTestGroupRingBuffer_Test_Group>:
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	f7ff ff0b 	bl	8004c88 <_Z41__static_initialization_and_destruction_0ii>
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
    }
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69db      	ldr	r3, [r3, #28]
    }
 8004e98:	4618      	mov	r0, r3
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	695b      	ldr	r3, [r3, #20]
    }
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8004ebc:	b590      	push	{r4, r7, lr}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff ffed 	bl	8004ea4 <_ZNK10TestResult15getFailureCountEv>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10a      	bne.n	8004ee6 <_ZNK10TestResult9isFailureEv+0x2a>
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff ffcf 	bl	8004e74 <_ZNK10TestResult11getRunCountEv>
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff ffd7 	bl	8004e8c <_ZNK10TestResult15getIgnoredCountEv>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4423      	add	r3, r4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <_ZNK10TestResult9isFailureEv+0x2e>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <_ZNK10TestResult9isFailureEv+0x30>
 8004eea:	2300      	movs	r3, #0
    }
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd90      	pop	{r4, r7, pc}

08004ef4 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
    {
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f005 fffe 	bl	800af00 <_ZN10TestOutputC1Ev>
 8004f04:	4a03      	ldr	r2, [pc, #12]	; (8004f14 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	601a      	str	r2, [r3, #0]
    }
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	080188b8 	.word	0x080188b8

08004f18 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
    {
 8004f20:	4a05      	ldr	r2, [pc, #20]	; (8004f38 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f006 f807 	bl	800af3c <_ZN10TestOutputD1Ev>
    }
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	080188b8 	.word	0x080188b8

08004f3c <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
    }
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff ffe7 	bl	8004f18 <_ZN17ConsoleTestOutputD1Ev>
 8004f4a:	2110      	movs	r1, #16
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f001 fce7 	bl	8006920 <_ZdlPvj>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8004f5c:	b5b0      	push	{r4, r5, r7, lr}
 8004f5e:	b098      	sub	sp, #96	; 0x60
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
    int result = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8004f6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff ffc0 	bl	8004ef4 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8004f74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f78:	4935      	ldr	r1, [pc, #212]	; (8005050 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f002 fba5 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8004f80:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004f84:	f107 0318 	add.w	r3, r7, #24
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 ff6a 	bl	8006e64 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8004f90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f94:	4618      	mov	r0, r3
 8004f96:	f002 ff50 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8004f9a:	f107 0318 	add.w	r3, r7, #24
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f001 ff2f 	bl	8006e04 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8004fa6:	f007 fd39 	bl	800ca1c <_ZN12TestRegistry18getCurrentRegistryEv>
 8004faa:	4603      	mov	r3, r0
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	3234      	adds	r2, #52	; 0x34
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	f107 0118 	add.w	r1, r7, #24
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8004fba:	f007 fd2f 	bl	800ca1c <_ZN12TestRegistry18getCurrentRegistryEv>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f107 0008 	add.w	r0, r7, #8
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	f000 f844 	bl	8005054 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8004fcc:	f107 0308 	add.w	r3, r7, #8
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 f899 	bl	8005108 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8004fd6:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8004fd8:	f107 0308 	add.w	r3, r7, #8
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 f863 	bl	80050a8 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8004fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10c      	bne.n	8005002 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8004fe8:	f107 0318 	add.w	r3, r7, #24
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f002 f83a 	bl	8007068 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f006 f83f 	bl	800b080 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8005002:	f007 fd0b 	bl	800ca1c <_ZN12TestRegistry18getCurrentRegistryEv>
 8005006:	4604      	mov	r4, r0
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	3344      	adds	r3, #68	; 0x44
 800500c:	681d      	ldr	r5, [r3, #0]
 800500e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005012:	490f      	ldr	r1, [pc, #60]	; (8005050 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8005014:	4618      	mov	r0, r3
 8005016:	f002 fb58 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800501a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800501e:	4619      	mov	r1, r3
 8005020:	4620      	mov	r0, r4
 8005022:	47a8      	blx	r5
 8005024:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005028:	4618      	mov	r0, r3
 800502a:	f002 ff06 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    return result;
 800502e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8005030:	f107 0318 	add.w	r3, r7, #24
 8005034:	4618      	mov	r0, r3
 8005036:	f001 ff4d 	bl	8006ed4 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 800503a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff ff6a 	bl	8004f18 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8005044:	4623      	mov	r3, r4
}
 8005046:	4618      	mov	r0, r3
 8005048:	3760      	adds	r7, #96	; 0x60
 800504a:	46bd      	mov	sp, r7
 800504c:	bdb0      	pop	{r4, r5, r7, pc}
 800504e:	bf00      	nop
 8005050:	08015e10 	.word	0x08015e10

08005054 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8005054:	b590      	push	{r4, r7, lr}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8005062:	4a0f      	ldr	r2, [pc, #60]	; (80050a0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	605a      	str	r2, [r3, #4]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	609a      	str	r2, [r3, #8]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 800507a:	2241      	movs	r2, #65	; 0x41
 800507c:	4909      	ldr	r1, [pc, #36]	; (80050a4 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 800507e:	2038      	movs	r0, #56	; 0x38
 8005080:	f001 fc3a 	bl	80068f8 <_ZnwjPKci>
 8005084:	4604      	mov	r4, r0
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4620      	mov	r0, r4
 800508c:	f00a fa50 	bl	800f530 <_ZN20CommandLineArgumentsC1EiPKPKc>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	609c      	str	r4, [r3, #8]
}
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4618      	mov	r0, r3
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	bd90      	pop	{r4, r7, pc}
 800509e:	bf00      	nop
 80050a0:	08018398 	.word	0x08018398
 80050a4:	08015e24 	.word	0x08015e24

080050a8 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	4a0c      	ldr	r2, [pc, #48]	; (80050e4 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d004      	beq.n	80050c8 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	3204      	adds	r2, #4
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	4618      	mov	r0, r3
 80050c6:	4790      	blx	r2
    delete output_;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d004      	beq.n	80050da <_ZN21CommandLineTestRunnerD1Ev+0x32>
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	3204      	adds	r2, #4
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	4790      	blx	r2
}
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	08018398 	.word	0x08018398

080050e8 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
}
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff ffd9 	bl	80050a8 <_ZN21CommandLineTestRunnerD1Ev>
 80050f6:	2110      	movs	r1, #16
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f001 fc11 	bl	8006920 <_ZdlPvj>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8005108:	b5b0      	push	{r4, r5, r7, lr}
 800510a:	b08c      	sub	sp, #48	; 0x30
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8005110:	2301      	movs	r3, #1
 8005112:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8005114:	f107 031c 	add.w	r3, r7, #28
 8005118:	4929      	ldr	r1, [pc, #164]	; (80051c0 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800511a:	4618      	mov	r0, r3
 800511c:	f002 fad5 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8005120:	f107 021c 	add.w	r2, r7, #28
 8005124:	f107 0308 	add.w	r3, r7, #8
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f007 f834 	bl	800c198 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8005130:	f107 031c 	add.w	r3, r7, #28
 8005134:	4618      	mov	r0, r3
 8005136:	f002 fe80 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3334      	adds	r3, #52	; 0x34
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f107 0108 	add.w	r1, r7, #8
 800514c:	4610      	mov	r0, r2
 800514e:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	333c      	adds	r3, #60	; 0x3c
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4610      	mov	r0, r2
 8005160:	4798      	blx	r3
 8005162:	4603      	mov	r3, r0
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fa3e 	bl	80055e8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f8ac 	bl	80052d0 <_ZN21CommandLineTestRunner11runAllTestsEv>
 8005178:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68dd      	ldr	r5, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3344      	adds	r3, #68	; 0x44
 8005186:	681c      	ldr	r4, [r3, #0]
 8005188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800518c:	490c      	ldr	r1, [pc, #48]	; (80051c0 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800518e:	4618      	mov	r0, r3
 8005190:	f002 fa9b 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8005194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005198:	4619      	mov	r1, r3
 800519a:	4628      	mov	r0, r5
 800519c:	47a0      	blx	r4
 800519e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051a2:	4618      	mov	r0, r3
 80051a4:	f002 fe49 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    return testResult;
 80051a8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80051aa:	f107 0308 	add.w	r3, r7, #8
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 faaa 	bl	8005708 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 80051b4:	4623      	mov	r3, r4
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3730      	adds	r7, #48	; 0x30
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bdb0      	pop	{r4, r5, r7, pc}
 80051be:	bf00      	nop
 80051c0:	08015e48 	.word	0x08015e48

080051c4 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 80051c4:	b5b0      	push	{r4, r5, r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68dd      	ldr	r5, [r3, #12]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3330      	adds	r3, #48	; 0x30
 80051d8:	681c      	ldr	r4, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4618      	mov	r0, r3
 80051e0:	f00a fee6 	bl	800ffb0 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 80051e4:	4603      	mov	r3, r0
 80051e6:	4619      	mov	r1, r3
 80051e8:	4628      	mov	r0, r5
 80051ea:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68dd      	ldr	r5, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	332c      	adds	r3, #44	; 0x2c
 80051f8:	681c      	ldr	r4, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	4618      	mov	r0, r3
 8005200:	f00a fee2 	bl	800ffc8 <_ZNK20CommandLineArguments14getNameFiltersEv>
 8005204:	4603      	mov	r3, r0
 8005206:	4619      	mov	r1, r3
 8005208:	4628      	mov	r0, r5
 800520a:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	4618      	mov	r0, r3
 8005212:	f00a fe31 	bl	800fe78 <_ZNK20CommandLineArguments9isVerboseEv>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d009      	beq.n	8005230 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3320      	adds	r3, #32
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2101      	movs	r1, #1
 800522c:	4610      	mov	r0, r2
 800522e:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	4618      	mov	r0, r3
 8005236:	f00a fe2b 	bl	800fe90 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d009      	beq.n	8005254 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3320      	adds	r3, #32
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2102      	movs	r1, #2
 8005250:	4610      	mov	r0, r2
 8005252:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	4618      	mov	r0, r3
 800525a:	f00a fe25 	bl	800fea8 <_ZNK20CommandLineArguments7isColorEv>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3324      	adds	r3, #36	; 0x24
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4610      	mov	r0, r2
 8005274:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f00a fe50 	bl	800ff20 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3360      	adds	r3, #96	; 0x60
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4610      	mov	r0, r2
 8005296:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	4618      	mov	r0, r3
 800529e:	f00a fe33 	bl	800ff08 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f007 fc31 	bl	800cb14 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f00a fe56 	bl	800ff68 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 80052c2:	f009 fce1 	bl	800ec88 <_ZN10UtestShell14setCrashOnFailEv>
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080052d0 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 80052d0:	b5b0      	push	{r4, r5, r7, lr}
 80052d2:	b094      	sub	sp, #80	; 0x50
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7ff ff73 	bl	80051c4 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f00a fe22 	bl	800ff38 <_ZNK20CommandLineArguments14getRepeatCountEv>
 80052f4:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f00a fde0 	bl	800fec0 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d019      	beq.n	800533a <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	f107 0308 	add.w	r3, r7, #8
 800530e:	4611      	mov	r1, r2
 8005310:	4618      	mov	r0, r3
 8005312:	f007 fdc7 	bl	800cea4 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3320      	adds	r3, #32
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f107 0108 	add.w	r1, r7, #8
 8005328:	4610      	mov	r0, r2
 800532a:	4798      	blx	r3
        return 0;
 800532c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800532e:	f107 0308 	add.w	r3, r7, #8
 8005332:	4618      	mov	r0, r3
 8005334:	f007 fdee 	bl	800cf14 <_ZN10TestResultD1Ev>
 8005338:	e0e1      	b.n	80054fe <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	4618      	mov	r0, r3
 8005340:	f00a fdca 	bl	800fed8 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d019      	beq.n	800537e <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	f107 0308 	add.w	r3, r7, #8
 8005352:	4611      	mov	r1, r2
 8005354:	4618      	mov	r0, r3
 8005356:	f007 fda5 	bl	800cea4 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3324      	adds	r3, #36	; 0x24
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f107 0108 	add.w	r1, r7, #8
 800536c:	4610      	mov	r0, r2
 800536e:	4798      	blx	r3
        return 0;
 8005370:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8005372:	f107 0308 	add.w	r3, r7, #8
 8005376:	4618      	mov	r0, r3
 8005378:	f007 fdcc 	bl	800cf14 <_ZN10TestResultD1Ev>
 800537c:	e0bf      	b.n	80054fe <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	4618      	mov	r0, r3
 8005384:	f00a fdb4 	bl	800fef0 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d019      	beq.n	80053c2 <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	f107 0308 	add.w	r3, r7, #8
 8005396:	4611      	mov	r1, r2
 8005398:	4618      	mov	r0, r3
 800539a:	f007 fd83 	bl	800cea4 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3328      	adds	r3, #40	; 0x28
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f107 0108 	add.w	r1, r7, #8
 80053b0:	4610      	mov	r0, r2
 80053b2:	4798      	blx	r3
        return 0;
 80053b4:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80053b6:	f107 0308 	add.w	r3, r7, #8
 80053ba:	4618      	mov	r0, r3
 80053bc:	f007 fdaa 	bl	800cf14 <_ZN10TestResultD1Ev>
 80053c0:	e09d      	b.n	80054fe <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f00a fdc2 	bl	800ff50 <_ZNK20CommandLineArguments11isReversingEv>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	331c      	adds	r3, #28
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4610      	mov	r0, r2
 80053e2:	4798      	blx	r3

    if (arguments_->isShuffling())
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f00a fdc9 	bl	800ff80 <_ZNK20CommandLineArguments11isShufflingEv>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d023      	beq.n	800543c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	332c      	adds	r3, #44	; 0x2c
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4941      	ldr	r1, [pc, #260]	; (8005508 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8005404:	4610      	mov	r0, r2
 8005406:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685d      	ldr	r5, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3334      	adds	r3, #52	; 0x34
 8005414:	681c      	ldr	r4, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	4618      	mov	r0, r3
 800541c:	f00a fdbc 	bl	800ff98 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8005420:	4603      	mov	r3, r0
 8005422:	4619      	mov	r1, r3
 8005424:	4628      	mov	r0, r5
 8005426:	47a0      	blx	r4
        output_->print("\n");
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	332c      	adds	r3, #44	; 0x2c
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4935      	ldr	r1, [pc, #212]	; (800550c <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8005438:	4610      	mov	r0, r2
 800543a:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 800543c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005442:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005444:	429a      	cmp	r2, r3
 8005446:	bf8c      	ite	hi
 8005448:	2301      	movhi	r3, #1
 800544a:	2300      	movls	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d04e      	beq.n	80054f0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	4618      	mov	r0, r3
 8005458:	f00a fd92 	bl	800ff80 <_ZNK20CommandLineArguments11isShufflingEv>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00f      	beq.n	8005482 <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68dd      	ldr	r5, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3318      	adds	r3, #24
 800546e:	681c      	ldr	r4, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	4618      	mov	r0, r3
 8005476:	f00a fd8f 	bl	800ff98 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800547a:	4603      	mov	r3, r0
 800547c:	4619      	mov	r1, r3
 800547e:	4628      	mov	r0, r5
 8005480:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6858      	ldr	r0, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3340      	adds	r3, #64	; 0x40
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005492:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005494:	4798      	blx	r3
        TestResult tr(*output_);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	f107 0308 	add.w	r3, r7, #8
 800549e:	4611      	mov	r1, r2
 80054a0:	4618      	mov	r0, r3
 80054a2:	f007 fcff 	bl	800cea4 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3314      	adds	r3, #20
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f107 0108 	add.w	r1, r7, #8
 80054b8:	4610      	mov	r0, r2
 80054ba:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 80054bc:	f107 0308 	add.w	r3, r7, #8
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff fcef 	bl	8004ea4 <_ZNK10TestResult15getFailureCountEv>
 80054c6:	4602      	mov	r2, r0
 80054c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ca:	4413      	add	r3, r2
 80054cc:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 80054ce:	f107 0308 	add.w	r3, r7, #8
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff fcf2 	bl	8004ebc <_ZNK10TestResult9isFailureEv>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 80054de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e0:	3301      	adds	r3, #1
 80054e2:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 80054e4:	f107 0308 	add.w	r3, r7, #8
 80054e8:	4618      	mov	r0, r3
 80054ea:	f007 fd13 	bl	800cf14 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 80054ee:	e7a5      	b.n	800543c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 80054f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 80054f6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80054f8:	e000      	b.n	80054fc <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 80054fa:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80054fc:	bf00      	nop
 80054fe:	4623      	mov	r3, r4
}
 8005500:	4618      	mov	r0, r3
 8005502:	3750      	adds	r7, #80	; 0x50
 8005504:	46bd      	mov	sp, r7
 8005506:	bdb0      	pop	{r4, r5, r7, pc}
 8005508:	08015e5c 	.word	0x08015e5c
 800550c:	08015e88 	.word	0x08015e88

08005510 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8005518:	229d      	movs	r2, #157	; 0x9d
 800551a:	4906      	ldr	r1, [pc, #24]	; (8005534 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 800551c:	201c      	movs	r0, #28
 800551e:	f001 f9eb 	bl	80068f8 <_ZnwjPKci>
 8005522:	4604      	mov	r4, r0
 8005524:	4620      	mov	r0, r4
 8005526:	f003 fb6d 	bl	8008c04 <_ZN18TeamCityTestOutputC1Ev>
 800552a:	4623      	mov	r3, r4
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bd90      	pop	{r4, r7, pc}
 8005534:	08015e24 	.word	0x08015e24

08005538 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8005538:	b590      	push	{r4, r7, lr}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 8005542:	22a2      	movs	r2, #162	; 0xa2
 8005544:	490a      	ldr	r1, [pc, #40]	; (8005570 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8005546:	2014      	movs	r0, #20
 8005548:	f001 f9d6 	bl	80068f8 <_ZnwjPKci>
 800554c:	4604      	mov	r4, r0
 800554e:	4620      	mov	r0, r4
 8005550:	f000 f980 	bl	8005854 <_ZN15JUnitTestOutputC1Ev>
 8005554:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 800555c:	6839      	ldr	r1, [r7, #0]
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fbb2 	bl	8005cc8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8005564:	68fb      	ldr	r3, [r7, #12]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	bd90      	pop	{r4, r7, pc}
 800556e:	bf00      	nop
 8005570:	08015e24 	.word	0x08015e24

08005574 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8005574:	b590      	push	{r4, r7, lr}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 800557c:	22ab      	movs	r2, #171	; 0xab
 800557e:	4906      	ldr	r1, [pc, #24]	; (8005598 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8005580:	2010      	movs	r0, #16
 8005582:	f001 f9b9 	bl	80068f8 <_ZnwjPKci>
 8005586:	4604      	mov	r4, r0
 8005588:	4620      	mov	r0, r4
 800558a:	f7ff fcb3 	bl	8004ef4 <_ZN17ConsoleTestOutputC1Ev>
 800558e:	4623      	mov	r3, r4
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	bd90      	pop	{r4, r7, pc}
 8005598:	08015e24 	.word	0x08015e24

0800559c <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 800559c:	b590      	push	{r4, r7, lr}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 80055a8:	22b0      	movs	r2, #176	; 0xb0
 80055aa:	490e      	ldr	r1, [pc, #56]	; (80055e4 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 80055ac:	2018      	movs	r0, #24
 80055ae:	f001 f9a3 	bl	80068f8 <_ZnwjPKci>
 80055b2:	4604      	mov	r4, r0
 80055b4:	4620      	mov	r0, r4
 80055b6:	f006 f99b 	bl	800b8f0 <_ZN19CompositeTestOutputC1Ev>
 80055ba:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	335c      	adds	r3, #92	; 0x5c
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	6978      	ldr	r0, [r7, #20]
 80055c8:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3360      	adds	r3, #96	; 0x60
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	6978      	ldr	r0, [r7, #20]
 80055d6:	4798      	blx	r3
  return composite;
 80055d8:	697b      	ldr	r3, [r7, #20]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd90      	pop	{r4, r7, pc}
 80055e2:	bf00      	nop
 80055e4:	08015e24 	.word	0x08015e24

080055e8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 80055e8:	b5b0      	push	{r4, r5, r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	6839      	ldr	r1, [r7, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f00a f855 	bl	800f6a8 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 80055fe:	4603      	mov	r3, r0
 8005600:	f083 0301 	eor.w	r3, r3, #1
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d029      	beq.n	800565e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3310      	adds	r3, #16
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
 8005616:	4602      	mov	r2, r0
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685d      	ldr	r5, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	332c      	adds	r3, #44	; 0x2c
 8005628:	681c      	ldr	r4, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	4618      	mov	r0, r3
 8005630:	f00a fc16 	bl	800fe60 <_ZNK20CommandLineArguments8needHelpEv>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d006      	beq.n	8005648 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	4618      	mov	r0, r3
 8005640:	f00a fc00 	bl	800fe44 <_ZNK20CommandLineArguments4helpEv>
 8005644:	4603      	mov	r3, r0
 8005646:	e005      	b.n	8005654 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	4618      	mov	r0, r3
 800564e:	f00a fbeb 	bl	800fe28 <_ZNK20CommandLineArguments5usageEv>
 8005652:	4603      	mov	r3, r0
 8005654:	4619      	mov	r1, r3
 8005656:	4628      	mov	r0, r5
 8005658:	47a0      	blx	r4
    return false;
 800565a:	2300      	movs	r3, #0
 800565c:	e050      	b.n	8005700 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	4618      	mov	r0, r3
 8005664:	f00b fa52 	bl	8010b0c <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d02c      	beq.n	80056c8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	330c      	adds	r3, #12
 8005674:	681c      	ldr	r4, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	4618      	mov	r0, r3
 800567c:	f00b fa6a 	bl	8010b54 <_ZNK20CommandLineArguments14getPackageNameEv>
 8005680:	4603      	mov	r3, r0
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	47a0      	blx	r4
 8005688:	4602      	mov	r2, r0
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	4618      	mov	r0, r3
 8005694:	f00a fbf0 	bl	800fe78 <_ZNK20CommandLineArguments9isVerboseEv>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d02f      	beq.n	80056fe <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3314      	adds	r3, #20
 80056a4:	681c      	ldr	r4, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685d      	ldr	r5, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3310      	adds	r3, #16
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	4798      	blx	r3
 80056b6:	4603      	mov	r3, r0
 80056b8:	461a      	mov	r2, r3
 80056ba:	4629      	mov	r1, r5
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	47a0      	blx	r4
 80056c0:	4602      	mov	r2, r0
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	605a      	str	r2, [r3, #4]
 80056c6:	e01a      	b.n	80056fe <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f00b fa2f 	bl	8010b30 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d009      	beq.n	80056ec <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3308      	adds	r3, #8
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	4798      	blx	r3
 80056e4:	4602      	mov	r2, r0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	605a      	str	r2, [r3, #4]
 80056ea:	e008      	b.n	80056fe <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3310      	adds	r3, #16
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	4798      	blx	r3
 80056f8:	4602      	mov	r2, r0
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	605a      	str	r2, [r3, #4]
  return true;
 80056fe:	2301      	movs	r3, #1
}
 8005700:	4618      	mov	r0, r3
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bdb0      	pop	{r4, r5, r7, pc}

08005708 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	4a05      	ldr	r2, [pc, #20]	; (8005728 <_ZN16SetPointerPluginD1Ev+0x20>)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4618      	mov	r0, r3
 800571a:	f006 fbff 	bl	800bf1c <_ZN10TestPluginD1Ev>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	080189c4 	.word	0x080189c4

0800572c <_ZN16SetPointerPluginD0Ev>:
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff ffe7 	bl	8005708 <_ZN16SetPointerPluginD1Ev>
 800573a:	2114      	movs	r1, #20
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 f8ef 	bl	8006920 <_ZdlPvj>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
    }
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4910      	ldr	r1, [pc, #64]	; (80057b0 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8005770:	4618      	mov	r0, r3
 8005772:	f001 ffaa 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	609a      	str	r2, [r3, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	60da      	str	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	741a      	strb	r2, [r3, #16]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3314      	adds	r3, #20
 800578c:	4908      	ldr	r1, [pc, #32]	; (80057b0 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800578e:	4618      	mov	r0, r3
 8005790:	f001 ff9b 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	61da      	str	r2, [r3, #28]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	621a      	str	r2, [r3, #32]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	08015e8c 	.word	0x08015e8c

080057b4 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	605a      	str	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	609a      	str	r2, [r3, #8]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	60da      	str	r2, [r3, #12]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	611a      	str	r2, [r3, #16]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3314      	adds	r3, #20
 80057de:	4907      	ldr	r1, [pc, #28]	; (80057fc <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 80057e0:	4618      	mov	r0, r3
 80057e2:	f001 ff72 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	61da      	str	r2, [r3, #28]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	621a      	str	r2, [r3, #32]
    {
    }
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	08015e8c 	.word	0x08015e8c

08005800 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3314      	adds	r3, #20
 800580c:	4618      	mov	r0, r3
 800580e:	f002 fb14 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff ffc4 	bl	80057b4 <_ZN20JUnitTestGroupResultC1Ev>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3328      	adds	r3, #40	; 0x28
 8005830:	4907      	ldr	r1, [pc, #28]	; (8005850 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8005832:	4618      	mov	r0, r3
 8005834:	f001 ff49 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3330      	adds	r3, #48	; 0x30
 800583c:	4904      	ldr	r1, [pc, #16]	; (8005850 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800583e:	4618      	mov	r0, r3
 8005840:	f001 ff43 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	08015e8c 	.word	0x08015e8c

08005854 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4618      	mov	r0, r3
 8005860:	f005 fb4e 	bl	800af00 <_ZN10TestOutputC1Ev>
 8005864:	4a09      	ldr	r2, [pc, #36]	; (800588c <_ZN15JUnitTestOutputC1Ev+0x38>)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	224d      	movs	r2, #77	; 0x4d
 800586c:	4908      	ldr	r1, [pc, #32]	; (8005890 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 800586e:	2038      	movs	r0, #56	; 0x38
 8005870:	f001 f842 	bl	80068f8 <_ZnwjPKci>
 8005874:	4604      	mov	r4, r0
 8005876:	4620      	mov	r0, r4
 8005878:	f7ff ffd0 	bl	800581c <_ZN19JUnitTestOutputImplC1Ev>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	611c      	str	r4, [r3, #16]
{
}
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4618      	mov	r0, r3
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	bd90      	pop	{r4, r7, pc}
 800588a:	bf00      	nop
 800588c:	080183b8 	.word	0x080183b8
 8005890:	08015e90 	.word	0x08015e90

08005894 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3330      	adds	r3, #48	; 0x30
 80058a0:	4618      	mov	r0, r3
 80058a2:	f002 faca 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3328      	adds	r3, #40	; 0x28
 80058aa:	4618      	mov	r0, r3
 80058ac:	f002 fac5 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff ffa4 	bl	8005800 <_ZN20JUnitTestGroupResultD1Ev>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 80058c4:	b590      	push	{r4, r7, lr}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	4a0c      	ldr	r2, [pc, #48]	; (8005900 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f838 	bl	8005948 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691c      	ldr	r4, [r3, #16]
 80058dc:	2c00      	cmp	r4, #0
 80058de:	d006      	beq.n	80058ee <_ZN15JUnitTestOutputD1Ev+0x2a>
 80058e0:	4620      	mov	r0, r4
 80058e2:	f7ff ffd7 	bl	8005894 <_ZN19JUnitTestOutputImplD1Ev>
 80058e6:	2138      	movs	r1, #56	; 0x38
 80058e8:	4620      	mov	r0, r4
 80058ea:	f001 f819 	bl	8006920 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f005 fb23 	bl	800af3c <_ZN10TestOutputD1Ev>
}
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd90      	pop	{r4, r7, pc}
 8005900:	080183b8 	.word	0x080183b8

08005904 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
}
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff ffd9 	bl	80058c4 <_ZN15JUnitTestOutputD1Ev>
 8005912:	2114      	movs	r1, #20
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 f803 	bl	8006920 <_ZdlPvj>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3314      	adds	r3, #20
 8005930:	4618      	mov	r0, r3
 8005932:	f002 fa82 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4618      	mov	r0, r3
 800593a:	f002 fa7e 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8005948:	b590      	push	{r4, r7, lr}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	2200      	movs	r2, #0
 800595e:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	f103 0414 	add.w	r4, r3, #20
 8005968:	f107 0308 	add.w	r3, r7, #8
 800596c:	491d      	ldr	r1, [pc, #116]	; (80059e4 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 800596e:	4618      	mov	r0, r3
 8005970:	f001 feab 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8005974:	f107 0308 	add.w	r3, r7, #8
 8005978:	4619      	mov	r1, r3
 800597a:	4620      	mov	r0, r4
 800597c:	f001 ff11 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8005980:	f107 0308 	add.w	r3, r7, #8
 8005984:	4618      	mov	r0, r3
 8005986:	f002 fa58 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	617b      	str	r3, [r7, #20]
    while (cur) {
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d018      	beq.n	80059ca <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d004      	beq.n	80059b0 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	3204      	adds	r2, #4
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	4618      	mov	r0, r3
 80059ae:	4790      	blx	r2
        delete cur;
 80059b0:	697c      	ldr	r4, [r7, #20]
 80059b2:	2c00      	cmp	r4, #0
 80059b4:	d006      	beq.n	80059c4 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 80059b6:	4620      	mov	r0, r4
 80059b8:	f7ff ffb4 	bl	8005924 <_ZN23JUnitTestCaseResultNodeD1Ev>
 80059bc:	2128      	movs	r1, #40	; 0x28
 80059be:	4620      	mov	r0, r4
 80059c0:	f000 ffae 	bl	8006920 <_ZdlPvj>
        cur = tmp;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	617b      	str	r3, [r7, #20]
    while (cur) {
 80059c8:	e7e3      	b.n	8005992 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2200      	movs	r2, #0
 80059d0:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2200      	movs	r2, #0
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd90      	pop	{r4, r7, pc}
 80059e2:	bf00      	nop
 80059e4:	08015e8c 	.word	0x08015e8c

080059e8 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8005a12:	b590      	push	{r4, r7, lr}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	6a1c      	ldr	r4, [r3, #32]
 8005a22:	6838      	ldr	r0, [r7, #0]
 8005a24:	f007 fbde 	bl	800d1e4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	6a1c      	ldr	r4, [r3, #32]
 8005a32:	6838      	ldr	r0, [r7, #0]
 8005a34:	f7ff fe8a 	bl	800574c <_ZNK10TestResult13getCheckCountEv>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	6223      	str	r3, [r4, #32]
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd90      	pop	{r4, r7, pc}

08005a44 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8005a5a:	b590      	push	{r4, r7, lr}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691c      	ldr	r4, [r3, #16]
 8005a68:	6838      	ldr	r0, [r7, #0]
 8005a6a:	f007 fbc7 	bl	800d1fc <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3364      	adds	r3, #100	; 0x64
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	4798      	blx	r3
    resetTestGroupResult();
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7ff ff62 	bl	8005948 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd90      	pop	{r4, r7, pc}

08005a8c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8005a8c:	b590      	push	{r4, r7, lr}
 8005a8e:	b089      	sub	sp, #36	; 0x24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	3201      	adds	r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	f103 0414 	add.w	r4, r3, #20
 8005aa8:	f107 0308 	add.w	r3, r7, #8
 8005aac:	6839      	ldr	r1, [r7, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f007 ff07 	bl	800d8c2 <_ZNK10UtestShell8getGroupEv>
 8005ab4:	f107 0308 	add.w	r3, r7, #8
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4620      	mov	r0, r4
 8005abc:	f001 fe71 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8005ac0:	f107 0308 	add.w	r3, r7, #8
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f002 f9b8 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8005aca:	4b3c      	ldr	r3, [pc, #240]	; (8005bbc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4798      	blx	r3
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d110      	bne.n	8005b04 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8005ae2:	2288      	movs	r2, #136	; 0x88
 8005ae4:	4936      	ldr	r1, [pc, #216]	; (8005bc0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8005ae6:	2028      	movs	r0, #40	; 0x28
 8005ae8:	f000 ff06 	bl	80068f8 <_ZnwjPKci>
 8005aec:	4604      	mov	r4, r0
 8005aee:	4620      	mov	r0, r4
 8005af0:	f7ff fe38 	bl	8005764 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8005af8:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6912      	ldr	r2, [r2, #16]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	61d3      	str	r3, [r2, #28]
 8005b02:	e013      	b.n	8005b2c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8005b04:	228b      	movs	r2, #139	; 0x8b
 8005b06:	492e      	ldr	r1, [pc, #184]	; (8005bc0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8005b08:	2028      	movs	r0, #40	; 0x28
 8005b0a:	f000 fef5 	bl	80068f8 <_ZnwjPKci>
 8005b0e:	4604      	mov	r4, r0
 8005b10:	4620      	mov	r0, r4
 8005b12:	f7ff fe27 	bl	8005764 <_ZN23JUnitTestCaseResultNodeC1Ev>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	6a1a      	ldr	r2, [r3, #32]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b2a:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	461c      	mov	r4, r3
 8005b34:	f107 0310 	add.w	r3, r7, #16
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f007 feb2 	bl	800d8a4 <_ZNK10UtestShell7getNameEv>
 8005b40:	f107 0310 	add.w	r3, r7, #16
 8005b44:	4619      	mov	r1, r3
 8005b46:	4620      	mov	r0, r4
 8005b48:	f001 fe2b 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8005b4c:	f107 0310 	add.w	r3, r7, #16
 8005b50:	4618      	mov	r0, r3
 8005b52:	f002 f972 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	f103 0414 	add.w	r4, r3, #20
 8005b60:	f107 0318 	add.w	r3, r7, #24
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f007 ff5c 	bl	800da24 <_ZNK10UtestShell7getFileEv>
 8005b6c:	f107 0318 	add.w	r3, r7, #24
 8005b70:	4619      	mov	r1, r3
 8005b72:	4620      	mov	r0, r4
 8005b74:	f001 fe15 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8005b78:	f107 0318 	add.w	r3, r7, #24
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f002 f95c 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	6a1c      	ldr	r4, [r3, #32]
 8005b88:	6838      	ldr	r0, [r7, #0]
 8005b8a:	f007 ff5a 	bl	800da42 <_ZNK10UtestShell13getLineNumberEv>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3318      	adds	r3, #24
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6838      	ldr	r0, [r7, #0]
 8005b9c:	4798      	blx	r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	f083 0301 	eor.w	r3, r3, #1
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d004      	beq.n	8005bb4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	741a      	strb	r2, [r3, #16]
    }
}
 8005bb4:	bf00      	nop
 8005bb6:	3724      	adds	r7, #36	; 0x24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd90      	pop	{r4, r7, pc}
 8005bbc:	200000a4 	.word	0x200000a4
 8005bc0:	08015e90 	.word	0x08015e90

08005bc4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b08a      	sub	sp, #40	; 0x28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8005bd0:	f107 0310 	add.w	r3, r7, #16
 8005bd4:	4928      	ldr	r1, [pc, #160]	; (8005c78 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 fd77 	bl	80076ca <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	3328      	adds	r3, #40	; 0x28
 8005be2:	4618      	mov	r0, r3
 8005be4:	f002 f918 	bl	8007e18 <_ZNK12SimpleString7isEmptyEv>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f083 0301 	eor.w	r3, r3, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00f      	beq.n	8005c14 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005bfc:	f107 0310 	add.w	r3, r7, #16
 8005c00:	4611      	mov	r1, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f002 f996 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8005c08:	f107 0310 	add.w	r3, r7, #16
 8005c0c:	491b      	ldr	r1, [pc, #108]	; (8005c7c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f002 f9a2 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8005c14:	f107 0310 	add.w	r3, r7, #16
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f002 f98a 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3384      	adds	r3, #132	; 0x84
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f107 0018 	add.w	r0, r7, #24
 8005c2c:	f107 0210 	add.w	r2, r7, #16
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	4798      	blx	r3
 8005c34:	f107 0320 	add.w	r3, r7, #32
 8005c38:	4911      	ldr	r1, [pc, #68]	; (8005c80 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f001 fd45 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f107 0220 	add.w	r2, r7, #32
 8005c46:	f107 0118 	add.w	r1, r7, #24
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f002 f957 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8005c50:	f107 0320 	add.w	r3, r7, #32
 8005c54:	4618      	mov	r0, r3
 8005c56:	f002 f8f0 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8005c5a:	f107 0318 	add.w	r3, r7, #24
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f002 f8eb 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8005c64:	f107 0310 	add.w	r3, r7, #16
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f002 f8e6 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 8005c6e:	bf00      	nop
}
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	3728      	adds	r7, #40	; 0x28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	08015eac 	.word	0x08015eac
 8005c7c:	08015eb8 	.word	0x08015eb8
 8005c80:	08015ebc 	.word	0x08015ebc

08005c84 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f001 fd6d 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8005c98:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	225f      	movs	r2, #95	; 0x5f
 8005caa:	4619      	mov	r1, r3
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f001 fef2 	bl	8007a96 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	e7f0      	b.n	8005c9c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 8005cba:	bf00      	nop
}
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	08015ec4 	.word	0x08015ec4

08005cc8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d006      	beq.n	8005ce8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	3328      	adds	r3, #40	; 0x28
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f001 fd5d 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
    }
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8005cf0:	b590      	push	{r4, r7, lr}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3368      	adds	r3, #104	; 0x68
 8005cfe:	681c      	ldr	r4, [r3, #0]
 8005d00:	f107 0308 	add.w	r3, r7, #8
 8005d04:	4908      	ldr	r1, [pc, #32]	; (8005d28 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 8005d06:	4618      	mov	r0, r3
 8005d08:	f001 fcdf 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8005d0c:	f107 0308 	add.w	r3, r7, #8
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	47a0      	blx	r4
 8005d16:	f107 0308 	add.w	r3, r7, #8
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f002 f88d 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 8005d20:	bf00      	nop
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd90      	pop	{r4, r7, pc}
 8005d28:	08015ed0 	.word	0x08015ed0

08005d2c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8005d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d30:	b08a      	sub	sp, #40	; 0x28
 8005d32:	af04      	add	r7, sp, #16
 8005d34:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8005d3c:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 8005d42:	3314      	adds	r3, #20
 8005d44:	4618      	mov	r0, r3
 8005d46:	f002 f84b 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8005d4a:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 8005d52:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	4a23      	ldr	r2, [pc, #140]	; (8005de8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8005d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d60:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 8005d62:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	691a      	ldr	r2, [r3, #16]
 8005d6a:	4b1f      	ldr	r3, [pc, #124]	; (8005de8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8005d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d70:	099b      	lsrs	r3, r3, #6
 8005d72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d76:	fb01 f303 	mul.w	r3, r1, r3
 8005d7a:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8005d7c:	603b      	str	r3, [r7, #0]
 8005d7e:	4b1b      	ldr	r3, [pc, #108]	; (8005dec <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4798      	blx	r3
 8005d84:	4603      	mov	r3, r0
 8005d86:	f107 0008 	add.w	r0, r7, #8
 8005d8a:	9303      	str	r3, [sp, #12]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	9302      	str	r3, [sp, #8]
 8005d90:	9601      	str	r6, [sp, #4]
 8005d92:	9500      	str	r5, [sp, #0]
 8005d94:	4623      	mov	r3, r4
 8005d96:	4642      	mov	r2, r8
 8005d98:	4915      	ldr	r1, [pc, #84]	; (8005df0 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8005d9a:	f002 fcdb 	bl	8008754 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3368      	adds	r3, #104	; 0x68
 8005da4:	681c      	ldr	r4, [r3, #0]
 8005da6:	f107 0308 	add.w	r3, r7, #8
 8005daa:	4618      	mov	r0, r3
 8005dac:	f002 f818 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8005db0:	4602      	mov	r2, r0
 8005db2:	f107 0310 	add.w	r3, r7, #16
 8005db6:	4611      	mov	r1, r2
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 fc86 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8005dbe:	f107 0310 	add.w	r3, r7, #16
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	47a0      	blx	r4
 8005dc8:	f107 0310 	add.w	r3, r7, #16
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f002 f834 	bl	8007e3a <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 8005dd2:	f107 0308 	add.w	r3, r7, #8
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f002 f82f 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 8005ddc:	bf00      	nop
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005de6:	bf00      	nop
 8005de8:	10624dd3 	.word	0x10624dd3
 8005dec:	200000a8 	.word	0x200000a8
 8005df0:	08015efc 	.word	0x08015efc

08005df4 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8005df4:	b590      	push	{r4, r7, lr}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3368      	adds	r3, #104	; 0x68
 8005e02:	681c      	ldr	r4, [r3, #0]
 8005e04:	f107 0308 	add.w	r3, r7, #8
 8005e08:	4912      	ldr	r1, [pc, #72]	; (8005e54 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f001 fc5d 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8005e10:	f107 0308 	add.w	r3, r7, #8
 8005e14:	4619      	mov	r1, r3
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	47a0      	blx	r4
 8005e1a:	f107 0308 	add.w	r3, r7, #8
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f002 f80b 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3368      	adds	r3, #104	; 0x68
 8005e2a:	681c      	ldr	r4, [r3, #0]
 8005e2c:	f107 0310 	add.w	r3, r7, #16
 8005e30:	4909      	ldr	r1, [pc, #36]	; (8005e58 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 8005e32:	4618      	mov	r0, r3
 8005e34:	f001 fc49 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8005e38:	f107 0310 	add.w	r3, r7, #16
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	47a0      	blx	r4
 8005e42:	f107 0310 	add.w	r3, r7, #16
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 fff7 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 8005e4c:	bf00      	nop
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd90      	pop	{r4, r7, pc}
 8005e54:	08015f6c 	.word	0x08015f6c
 8005e58:	08015f7c 	.word	0x08015f7c

08005e5c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f001 ffb9 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	4619      	mov	r1, r3
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f001 fc29 	bl	80076ca <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8005e78:	4a0e      	ldr	r2, [pc, #56]	; (8005eb4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8005e7a:	490f      	ldr	r1, [pc, #60]	; (8005eb8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f001 fe39 	bl	8007af4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 8005e82:	4a0e      	ldr	r2, [pc, #56]	; (8005ebc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8005e84:	490e      	ldr	r1, [pc, #56]	; (8005ec0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f001 fe34 	bl	8007af4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8005e8c:	4a0d      	ldr	r2, [pc, #52]	; (8005ec4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 8005e8e:	490e      	ldr	r1, [pc, #56]	; (8005ec8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f001 fe2f 	bl	8007af4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 8005e96:	4a0d      	ldr	r2, [pc, #52]	; (8005ecc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8005e98:	490d      	ldr	r1, [pc, #52]	; (8005ed0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f001 fe2a 	bl	8007af4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8005ea0:	4a0c      	ldr	r2, [pc, #48]	; (8005ed4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 8005ea2:	490d      	ldr	r1, [pc, #52]	; (8005ed8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f001 fe25 	bl	8007af4 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8005eaa:	bf00      	nop
}
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	08015f8c 	.word	0x08015f8c
 8005eb8:	08015f94 	.word	0x08015f94
 8005ebc:	08015f98 	.word	0x08015f98
 8005ec0:	08015fa0 	.word	0x08015fa0
 8005ec4:	08015fa4 	.word	0x08015fa4
 8005ec8:	08015fac 	.word	0x08015fac
 8005ecc:	08015fb0 	.word	0x08015fb0
 8005ed0:	08015fb8 	.word	0x08015fb8
 8005ed4:	08015fbc 	.word	0x08015fbc
 8005ed8:	08015fc8 	.word	0x08015fc8

08005edc <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8005edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee0:	b096      	sub	sp, #88	; 0x58
 8005ee2:	af08      	add	r7, sp, #32
 8005ee4:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8005eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 80b2 	beq.w	800605a <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8005efa:	3328      	adds	r3, #40	; 0x28
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 ff6f 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8005f02:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	3328      	adds	r3, #40	; 0x28
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 ff84 	bl	8007e18 <_ZNK12SimpleString7isEmptyEv>
 8005f10:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8005f16:	4c53      	ldr	r4, [pc, #332]	; (8006064 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8005f18:	e000      	b.n	8005f1c <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8005f1a:	4c53      	ldr	r4, [pc, #332]	; (8006068 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8005f20:	3314      	adds	r3, #20
 8005f22:	4618      	mov	r0, r3
 8005f24:	f001 ff5c 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8005f28:	4605      	mov	r5, r0
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f001 ff57 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8005f32:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8005f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f36:	6a1a      	ldr	r2, [r3, #32]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8005f40:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8005f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	4a49      	ldr	r2, [pc, #292]	; (800606c <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8005f48:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4c:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8005f4e:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8005f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	4b45      	ldr	r3, [pc, #276]	; (800606c <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8005f56:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5a:	099b      	lsrs	r3, r3, #6
 8005f5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f60:	fb01 f303 	mul.w	r3, r1, r3
 8005f64:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8005f66:	603b      	str	r3, [r7, #0]
 8005f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6a:	3314      	adds	r3, #20
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 ff37 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8005f72:	4602      	mov	r2, r0
 8005f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	f107 0014 	add.w	r0, r7, #20
 8005f7c:	9306      	str	r3, [sp, #24]
 8005f7e:	9205      	str	r2, [sp, #20]
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	9204      	str	r2, [sp, #16]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	9203      	str	r2, [sp, #12]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	9302      	str	r3, [sp, #8]
 8005f8c:	9601      	str	r6, [sp, #4]
 8005f8e:	9500      	str	r5, [sp, #0]
 8005f90:	4623      	mov	r3, r4
 8005f92:	4642      	mov	r2, r8
 8005f94:	4936      	ldr	r1, [pc, #216]	; (8006070 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 8005f96:	f002 fbdd 	bl	8008754 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3368      	adds	r3, #104	; 0x68
 8005fa0:	681c      	ldr	r4, [r3, #0]
 8005fa2:	f107 0314 	add.w	r3, r7, #20
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f001 ff1a 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8005fac:	4602      	mov	r2, r0
 8005fae:	f107 031c 	add.w	r3, r7, #28
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f001 fb88 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8005fba:	f107 031c 	add.w	r3, r7, #28
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	47a0      	blx	r4
 8005fc4:	f107 031c 	add.w	r3, r7, #28
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 ff36 	bl	8007e3a <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fd4:	6a12      	ldr	r2, [r2, #32]
 8005fd6:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3388      	adds	r3, #136	; 0x88
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	4798      	blx	r3
 8005fee:	e017      	b.n	8006020 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff2:	7c1b      	ldrb	r3, [r3, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d013      	beq.n	8006020 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3368      	adds	r3, #104	; 0x68
 8005ffe:	681c      	ldr	r4, [r3, #0]
 8006000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006004:	491b      	ldr	r1, [pc, #108]	; (8006074 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8006006:	4618      	mov	r0, r3
 8006008:	f001 fb5f 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800600c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006010:	4619      	mov	r1, r3
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	47a0      	blx	r4
 8006016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800601a:	4618      	mov	r0, r3
 800601c:	f001 ff0d 	bl	8007e3a <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3368      	adds	r3, #104	; 0x68
 8006026:	681c      	ldr	r4, [r3, #0]
 8006028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800602c:	4912      	ldr	r1, [pc, #72]	; (8006078 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 800602e:	4618      	mov	r0, r3
 8006030:	f001 fb4b 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8006034:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006038:	4619      	mov	r1, r3
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	47a0      	blx	r4
 800603e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006042:	4618      	mov	r0, r3
 8006044:	f001 fef9 	bl	8007e3a <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8006048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 800604e:	f107 0314 	add.w	r3, r7, #20
 8006052:	4618      	mov	r0, r3
 8006054:	f001 fef1 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    while (cur) {
 8006058:	e749      	b.n	8005eee <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 800605a:	bf00      	nop
 800605c:	3738      	adds	r7, #56	; 0x38
 800605e:	46bd      	mov	sp, r7
 8006060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006064:	08015e8c 	.word	0x08015e8c
 8006068:	08015fcc 	.word	0x08015fcc
 800606c:	10624dd3 	.word	0x10624dd3
 8006070:	08015fd0 	.word	0x08015fd0
 8006074:	0801602c 	.word	0x0801602c
 8006078:	0801603c 	.word	0x0801603c

0800607c <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 800607c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800607e:	b091      	sub	sp, #68	; 0x44
 8006080:	af02      	add	r7, sp, #8
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68d9      	ldr	r1, [r3, #12]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3308      	adds	r3, #8
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f107 0210 	add.w	r2, r7, #16
 8006098:	4610      	mov	r0, r2
 800609a:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800609c:	f107 0310 	add.w	r3, r7, #16
 80060a0:	4618      	mov	r0, r3
 80060a2:	f001 fe9d 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 80060a6:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3314      	adds	r3, #20
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4610      	mov	r0, r2
 80060b8:	4798      	blx	r3
 80060ba:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80060bc:	461e      	mov	r6, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3380      	adds	r3, #128	; 0x80
 80060c4:	681c      	ldr	r4, [r3, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68d9      	ldr	r1, [r3, #12]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3318      	adds	r3, #24
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f107 0220 	add.w	r2, r7, #32
 80060d8:	4610      	mov	r0, r2
 80060da:	4798      	blx	r3
 80060dc:	f107 0318 	add.w	r3, r7, #24
 80060e0:	f107 0220 	add.w	r2, r7, #32
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	4618      	mov	r0, r3
 80060e8:	47a0      	blx	r4
 80060ea:	f107 0318 	add.w	r3, r7, #24
 80060ee:	4618      	mov	r0, r3
 80060f0:	f001 fe76 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f107 0008 	add.w	r0, r7, #8
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	4633      	mov	r3, r6
 80060fe:	462a      	mov	r2, r5
 8006100:	4924      	ldr	r1, [pc, #144]	; (8006194 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 8006102:	f002 fb27 	bl	8008754 <_Z16StringFromFormatPKcz>
 8006106:	f107 0318 	add.w	r3, r7, #24
 800610a:	4618      	mov	r0, r3
 800610c:	f001 fe95 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8006110:	f107 0320 	add.w	r3, r7, #32
 8006114:	4618      	mov	r0, r3
 8006116:	f001 fe90 	bl	8007e3a <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 800611a:	f107 0310 	add.w	r3, r7, #16
 800611e:	4618      	mov	r0, r3
 8006120:	f001 fe8b 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3368      	adds	r3, #104	; 0x68
 800612a:	681c      	ldr	r4, [r3, #0]
 800612c:	f107 0308 	add.w	r3, r7, #8
 8006130:	4618      	mov	r0, r3
 8006132:	f001 fe55 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8006136:	4602      	mov	r2, r0
 8006138:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800613c:	4611      	mov	r1, r2
 800613e:	4618      	mov	r0, r3
 8006140:	f001 fac3 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8006144:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	47a0      	blx	r4
 800614e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006152:	4618      	mov	r0, r3
 8006154:	f001 fe71 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3368      	adds	r3, #104	; 0x68
 800615e:	681c      	ldr	r4, [r3, #0]
 8006160:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006164:	490c      	ldr	r1, [pc, #48]	; (8006198 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8006166:	4618      	mov	r0, r3
 8006168:	f001 faaf 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800616c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	47a0      	blx	r4
 8006176:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800617a:	4618      	mov	r0, r3
 800617c:	f001 fe5d 	bl	8007e3a <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8006180:	f107 0308 	add.w	r3, r7, #8
 8006184:	4618      	mov	r0, r3
 8006186:	f001 fe58 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800618a:	bf00      	nop
 800618c:	373c      	adds	r7, #60	; 0x3c
 800618e:	46bd      	mov	sp, r7
 8006190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006192:	bf00      	nop
 8006194:	0801604c 	.word	0x0801604c
 8006198:	08016088 	.word	0x08016088

0800619c <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b08d      	sub	sp, #52	; 0x34
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3368      	adds	r3, #104	; 0x68
 80061aa:	681c      	ldr	r4, [r3, #0]
 80061ac:	f107 0308 	add.w	r3, r7, #8
 80061b0:	4933      	ldr	r1, [pc, #204]	; (8006280 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 fa89 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 80061b8:	f107 0308 	add.w	r3, r7, #8
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	47a0      	blx	r4
 80061c2:	f107 0308 	add.w	r3, r7, #8
 80061c6:	4618      	mov	r0, r3
 80061c8:	f001 fe37 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3368      	adds	r3, #104	; 0x68
 80061d2:	681c      	ldr	r4, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3380      	adds	r3, #128	; 0x80
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6912      	ldr	r2, [r2, #16]
 80061e0:	3230      	adds	r2, #48	; 0x30
 80061e2:	f107 0010 	add.w	r0, r7, #16
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	4798      	blx	r3
 80061ea:	f107 0310 	add.w	r3, r7, #16
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	47a0      	blx	r4
 80061f4:	f107 0310 	add.w	r3, r7, #16
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 fe1e 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3368      	adds	r3, #104	; 0x68
 8006204:	681c      	ldr	r4, [r3, #0]
 8006206:	f107 0318 	add.w	r3, r7, #24
 800620a:	491e      	ldr	r1, [pc, #120]	; (8006284 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 800620c:	4618      	mov	r0, r3
 800620e:	f001 fa5c 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8006212:	f107 0318 	add.w	r3, r7, #24
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	47a0      	blx	r4
 800621c:	f107 0318 	add.w	r3, r7, #24
 8006220:	4618      	mov	r0, r3
 8006222:	f001 fe0a 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3368      	adds	r3, #104	; 0x68
 800622c:	681c      	ldr	r4, [r3, #0]
 800622e:	f107 0320 	add.w	r3, r7, #32
 8006232:	4915      	ldr	r1, [pc, #84]	; (8006288 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8006234:	4618      	mov	r0, r3
 8006236:	f001 fa48 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800623a:	f107 0320 	add.w	r3, r7, #32
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	47a0      	blx	r4
 8006244:	f107 0320 	add.w	r3, r7, #32
 8006248:	4618      	mov	r0, r3
 800624a:	f001 fdf6 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3368      	adds	r3, #104	; 0x68
 8006254:	681c      	ldr	r4, [r3, #0]
 8006256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800625a:	490c      	ldr	r1, [pc, #48]	; (800628c <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 800625c:	4618      	mov	r0, r3
 800625e:	f001 fa34 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8006262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	47a0      	blx	r4
 800626c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006270:	4618      	mov	r0, r3
 8006272:	f001 fde2 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 8006276:	bf00      	nop
 8006278:	3734      	adds	r7, #52	; 0x34
 800627a:	46bd      	mov	sp, r7
 800627c:	bd90      	pop	{r4, r7, pc}
 800627e:	bf00      	nop
 8006280:	08016094 	.word	0x08016094
 8006284:	080160a4 	.word	0x080160a4
 8006288:	080160b4 	.word	0x080160b4
 800628c:	080160d0 	.word	0x080160d0

08006290 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 8006290:	b590      	push	{r4, r7, lr}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3360      	adds	r3, #96	; 0x60
 800629e:	681c      	ldr	r4, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	335c      	adds	r3, #92	; 0x5c
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6912      	ldr	r2, [r2, #16]
 80062ac:	3214      	adds	r2, #20
 80062ae:	f107 0008 	add.w	r0, r7, #8
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	4798      	blx	r3
 80062b6:	f107 0308 	add.w	r3, r7, #8
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	47a0      	blx	r4
 80062c0:	f107 0308 	add.w	r3, r7, #8
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 fdb8 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3370      	adds	r3, #112	; 0x70
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
    writeTestSuiteSummary();
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3374      	adds	r3, #116	; 0x74
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	4798      	blx	r3
    writeProperties();
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3378      	adds	r3, #120	; 0x78
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
    writeTestCases();
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	337c      	adds	r3, #124	; 0x7c
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	4798      	blx	r3
    writeFileEnding();
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	338c      	adds	r3, #140	; 0x8c
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	4798      	blx	r3
    closeFile();
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	336c      	adds	r3, #108	; 0x6c
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	4798      	blx	r3
}
 8006312:	bf00      	nop
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	bd90      	pop	{r4, r7, pc}

0800631a <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	6039      	str	r1, [r7, #0]
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	3330      	adds	r3, #48	; 0x30
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	4618      	mov	r0, r3
 8006344:	f001 fe08 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
}
 8006348:	bf00      	nop
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 8006390:	b590      	push	{r4, r7, lr}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d113      	bne.n	80063ce <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	3201      	adds	r2, #1
 80063ae:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 80063b0:	f240 1233 	movw	r2, #307	; 0x133
 80063b4:	4908      	ldr	r1, [pc, #32]	; (80063d8 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 80063b6:	2034      	movs	r0, #52	; 0x34
 80063b8:	f000 fa9e 	bl	80068f8 <_ZnwjPKci>
 80063bc:	4604      	mov	r4, r0
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	4620      	mov	r0, r4
 80063c2:	f002 ff4f 	bl	8009264 <_ZN11TestFailureC1ERKS_>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	60dc      	str	r4, [r3, #12]
    }
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd90      	pop	{r4, r7, pc}
 80063d6:	bf00      	nop
 80063d8:	08015e90 	.word	0x08015e90

080063dc <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 80063dc:	b5b0      	push	{r4, r5, r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 80063e6:	4b08      	ldr	r3, [pc, #32]	; (8006408 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 80063e8:	681d      	ldr	r5, [r3, #0]
 80063ea:	6838      	ldr	r0, [r7, #0]
 80063ec:	f001 fcf8 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 80063f0:	4602      	mov	r2, r0
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691c      	ldr	r4, [r3, #16]
 80063f6:	4905      	ldr	r1, [pc, #20]	; (800640c <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 80063f8:	4610      	mov	r0, r2
 80063fa:	47a8      	blx	r5
 80063fc:	4603      	mov	r3, r0
 80063fe:	6263      	str	r3, [r4, #36]	; 0x24
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bdb0      	pop	{r4, r5, r7, pc}
 8006408:	200000b0 	.word	0x200000b0
 800640c:	080160e0 	.word	0x080160e0

08006410 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 8006410:	b590      	push	{r4, r7, lr}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 800641a:	4b08      	ldr	r3, [pc, #32]	; (800643c <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 800641c:	681c      	ldr	r4, [r3, #0]
 800641e:	6838      	ldr	r0, [r7, #0]
 8006420:	f001 fcde 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8006424:	4602      	mov	r2, r0
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	4619      	mov	r1, r3
 800642e:	4610      	mov	r0, r2
 8006430:	47a0      	blx	r4
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	bd90      	pop	{r4, r7, pc}
 800643a:	bf00      	nop
 800643c:	200000b4 	.word	0x200000b4

08006440 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8006448:	4b05      	ldr	r3, [pc, #20]	; (8006460 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6912      	ldr	r2, [r2, #16]
 8006450:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006452:	4610      	mov	r0, r2
 8006454:	4798      	blx	r3
}
 8006456:	bf00      	nop
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	200000b8 	.word	0x200000b8

08006464 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
        return false;
 8006472:	2300      	movs	r3, #0
    }
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
    {
 8006488:	4a04      	ldr	r2, [pc, #16]	; (800649c <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	601a      	str	r2, [r3, #0]
    }
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	08018464 	.word	0x08018464

080064a0 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
    }
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff ffe9 	bl	8006480 <_ZN17MemoryLeakFailureD1Ev>
 80064ae:	2104      	movs	r1, #4
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fa35 	bl	8006920 <_ZdlPvj>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 80064c0:	b590      	push	{r4, r7, lr}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	687c      	ldr	r4, [r7, #4]
 80064ca:	f000 fc71 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80064ce:	4603      	mov	r3, r0
 80064d0:	4618      	mov	r0, r3
 80064d2:	f00b f972 	bl	80117ba <_ZN18MemoryLeakDetector8getMutexEv>
 80064d6:	4603      	mov	r3, r0
 80064d8:	4619      	mov	r1, r3
 80064da:	4620      	mov	r0, r4
 80064dc:	f000 fe4a 	bl	8007174 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4618      	mov	r0, r3
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd90      	pop	{r4, r7, pc}

080064ea <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fe4f 	bl	8007198 <_ZN15ScopedMutexLockD1Ev>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 8006504:	b590      	push	{r4, r7, lr}
 8006506:	b087      	sub	sp, #28
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 8006510:	f000 fc4e 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006514:	4604      	mov	r4, r0
 8006516:	f004 faf7 	bl	800ab08 <_Z25getCurrentMallocAllocatorv>
 800651a:	4601      	mov	r1, r0
 800651c:	2301      	movs	r3, #1
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4620      	mov	r0, r4
 800652a:	f00b fb89 	bl	8011c40 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800652e:	4603      	mov	r3, r0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	bd90      	pop	{r4, r7, pc}

08006538 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8006538:	b590      	push	{r4, r7, lr}
 800653a:	b087      	sub	sp, #28
 800653c:	af02      	add	r7, sp, #8
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8006544:	f000 fc34 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006548:	4603      	mov	r3, r0
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	4618      	mov	r0, r3
 800654e:	f00b f9e3 	bl	8011918 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 8006552:	f000 fc2d 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006556:	4604      	mov	r4, r0
 8006558:	f004 fad6 	bl	800ab08 <_Z25getCurrentMallocAllocatorv>
 800655c:	4601      	mov	r1, r0
 800655e:	2301      	movs	r3, #1
 8006560:	9301      	str	r3, [sp, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4620      	mov	r0, r4
 800656c:	f00b fb9c 	bl	8011ca8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8006570:	bf00      	nop
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	bd90      	pop	{r4, r7, pc}

08006578 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8006578:	b590      	push	{r4, r7, lr}
 800657a:	b089      	sub	sp, #36	; 0x24
 800657c:	af04      	add	r7, sp, #16
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 8006586:	f000 fc13 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800658a:	4604      	mov	r4, r0
 800658c:	f004 fabc 	bl	800ab08 <_Z25getCurrentMallocAllocatorv>
 8006590:	4601      	mov	r1, r0
 8006592:	2301      	movs	r3, #1
 8006594:	9302      	str	r3, [sp, #8]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	9301      	str	r3, [sp, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4620      	mov	r0, r4
 80065a4:	f00b fbe4 	bl	8011d70 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 80065a8:	4603      	mov	r3, r0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd90      	pop	{r4, r7, pc}
	...

080065b4 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 80065c0:	4b04      	ldr	r3, [pc, #16]	; (80065d4 <_ZL13normal_mallocjPKcj+0x20>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	4798      	blx	r3
 80065c8:	4603      	mov	r3, r0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	200000c4 	.word	0x200000c4

080065d8 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 80065e6:	4b05      	ldr	r3, [pc, #20]	; (80065fc <_ZL14normal_reallocPvjPKcj+0x24>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	4798      	blx	r3
 80065f0:	4603      	mov	r3, r0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	200000c8 	.word	0x200000c8

08006600 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 800660c:	4b03      	ldr	r3, [pc, #12]	; (800661c <_ZL11normal_freePvPKcj+0x1c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	4798      	blx	r3
}
 8006614:	bf00      	nop
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	200000cc 	.word	0x200000cc

08006620 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8006620:	b590      	push	{r4, r7, lr}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8006628:	f107 0308 	add.w	r3, r7, #8
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff ff47 	bl	80064c0 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8006632:	f000 fbbd 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006636:	4604      	mov	r4, r0
 8006638:	f004 f9b6 	bl	800a9a8 <_Z22getCurrentNewAllocatorv>
 800663c:	4601      	mov	r1, r0
 800663e:	2300      	movs	r3, #0
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	4620      	mov	r0, r4
 8006644:	f00b fa6a 	bl	8011b1c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006648:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800664a:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 800664c:	f107 0308 	add.w	r3, r7, #8
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff ff4a 	bl	80064ea <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8006656:	4623      	mov	r3, r4
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	bd90      	pop	{r4, r7, pc}

08006660 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8006660:	b590      	push	{r4, r7, lr}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8006668:	f000 fba2 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800666c:	4604      	mov	r4, r0
 800666e:	f004 f99b 	bl	800a9a8 <_Z22getCurrentNewAllocatorv>
 8006672:	4601      	mov	r1, r0
 8006674:	2300      	movs	r3, #0
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	4620      	mov	r0, r4
 800667a:	f00b fa4f 	bl	8011b1c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800667e:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006680:	68fb      	ldr	r3, [r7, #12]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	bd90      	pop	{r4, r7, pc}

0800668a <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800668a:	b590      	push	{r4, r7, lr}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8006692:	f000 fb8d 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006696:	4604      	mov	r4, r0
 8006698:	f004 f986 	bl	800a9a8 <_Z22getCurrentNewAllocatorv>
 800669c:	4601      	mov	r1, r0
 800669e:	2300      	movs	r3, #0
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	4620      	mov	r0, r4
 80066a4:	f00b fa3a 	bl	8011b1c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80066a8:	4603      	mov	r3, r0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd90      	pop	{r4, r7, pc}

080066b2 <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 80066b2:	b590      	push	{r4, r7, lr}
 80066b4:	b089      	sub	sp, #36	; 0x24
 80066b6:	af02      	add	r7, sp, #8
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 80066be:	f000 fb77 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80066c2:	4604      	mov	r4, r0
 80066c4:	f004 f970 	bl	800a9a8 <_Z22getCurrentNewAllocatorv>
 80066c8:	4601      	mov	r1, r0
 80066ca:	2300      	movs	r3, #0
 80066cc:	9301      	str	r3, [sp, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4620      	mov	r0, r4
 80066d8:	f00b fab2 	bl	8011c40 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80066dc:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80066de:	697b      	ldr	r3, [r7, #20]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	371c      	adds	r7, #28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd90      	pop	{r4, r7, pc}

080066e8 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 80066e8:	b590      	push	{r4, r7, lr}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 80066f0:	f000 fb5e 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80066f4:	4604      	mov	r4, r0
 80066f6:	f004 f9af 	bl	800aa58 <_Z27getCurrentNewArrayAllocatorv>
 80066fa:	4601      	mov	r1, r0
 80066fc:	2300      	movs	r3, #0
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	4620      	mov	r0, r4
 8006702:	f00b fa0b 	bl	8011b1c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006706:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006708:	68fb      	ldr	r3, [r7, #12]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	bd90      	pop	{r4, r7, pc}

08006712 <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8006712:	b590      	push	{r4, r7, lr}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800671a:	f000 fb49 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800671e:	4604      	mov	r4, r0
 8006720:	f004 f99a 	bl	800aa58 <_Z27getCurrentNewArrayAllocatorv>
 8006724:	4601      	mov	r1, r0
 8006726:	2300      	movs	r3, #0
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	4620      	mov	r0, r4
 800672c:	f00b f9f6 	bl	8011b1c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006730:	4603      	mov	r3, r0
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	bd90      	pop	{r4, r7, pc}

0800673a <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800673a:	b590      	push	{r4, r7, lr}
 800673c:	b089      	sub	sp, #36	; 0x24
 800673e:	af02      	add	r7, sp, #8
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8006746:	f000 fb33 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800674a:	4604      	mov	r4, r0
 800674c:	f004 f984 	bl	800aa58 <_Z27getCurrentNewArrayAllocatorv>
 8006750:	4601      	mov	r1, r0
 8006752:	2300      	movs	r3, #0
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4620      	mov	r0, r4
 8006760:	f00b fa6e 	bl	8011c40 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8006764:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006766:	697b      	ldr	r3, [r7, #20]
}
 8006768:	4618      	mov	r0, r3
 800676a:	371c      	adds	r7, #28
 800676c:	46bd      	mov	sp, r7
 800676e:	bd90      	pop	{r4, r7, pc}

08006770 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8006770:	b590      	push	{r4, r7, lr}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8006778:	f000 fb1a 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800677c:	4603      	mov	r3, r0
 800677e:	6879      	ldr	r1, [r7, #4]
 8006780:	4618      	mov	r0, r3
 8006782:	f00b f8c9 	bl	8011918 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8006786:	f000 fb13 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800678a:	4604      	mov	r4, r0
 800678c:	f004 f90c 	bl	800a9a8 <_Z22getCurrentNewAllocatorv>
 8006790:	4601      	mov	r1, r0
 8006792:	2300      	movs	r3, #0
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	4620      	mov	r0, r4
 8006798:	f00b fad0 	bl	8011d3c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd90      	pop	{r4, r7, pc}

080067a4 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 80067ac:	f000 fb00 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80067b0:	4603      	mov	r3, r0
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f00b f8af 	bl	8011918 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 80067ba:	f000 faf9 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80067be:	4604      	mov	r4, r0
 80067c0:	f004 f94a 	bl	800aa58 <_Z27getCurrentNewArrayAllocatorv>
 80067c4:	4601      	mov	r1, r0
 80067c6:	2300      	movs	r3, #0
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	4620      	mov	r0, r4
 80067cc:	f00b fab6 	bl	8011d3c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd90      	pop	{r4, r7, pc}

080067d8 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 80067e0:	4b04      	ldr	r3, [pc, #16]	; (80067f4 <_ZL19normal_operator_newj+0x1c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	4798      	blx	r3
 80067e8:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80067ea:	68fb      	ldr	r3, [r7, #12]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	200000c4 	.word	0x200000c4

080067f8 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8006800:	4b04      	ldr	r3, [pc, #16]	; (8006814 <_ZL27normal_operator_new_nothrowj+0x1c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
 8006808:	4603      	mov	r3, r0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	200000c4 	.word	0x200000c4

08006818 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8006824:	4b04      	ldr	r3, [pc, #16]	; (8006838 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	4798      	blx	r3
 800682c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800682e:	697b      	ldr	r3, [r7, #20]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	200000c4 	.word	0x200000c4

0800683c <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8006844:	4b04      	ldr	r3, [pc, #16]	; (8006858 <_ZL25normal_operator_new_arrayj+0x1c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	4798      	blx	r3
 800684c:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800684e:	68fb      	ldr	r3, [r7, #12]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	200000c4 	.word	0x200000c4

0800685c <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8006864:	4b04      	ldr	r3, [pc, #16]	; (8006878 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	4798      	blx	r3
 800686c:	4603      	mov	r3, r0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	200000c4 	.word	0x200000c4

0800687c <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8006888:	4b04      	ldr	r3, [pc, #16]	; (800689c <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	4798      	blx	r3
 8006890:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006892:	697b      	ldr	r3, [r7, #20]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	200000c4 	.word	0x200000c4

080068a0 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 80068a8:	4b03      	ldr	r3, [pc, #12]	; (80068b8 <_ZL22normal_operator_deletePv+0x18>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	4798      	blx	r3
}
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	200000cc 	.word	0x200000cc

080068bc <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 80068c4:	4b03      	ldr	r3, [pc, #12]	; (80068d4 <_ZL28normal_operator_delete_arrayPv+0x18>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	4798      	blx	r3
}
 80068cc:	bf00      	nop
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	200000cc 	.word	0x200000cc

080068d8 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 80068e0:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <_Znwj+0x1c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	4798      	blx	r3
 80068e8:	4603      	mov	r3, r0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20000028 	.word	0x20000028

080068f8 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8006904:	4b05      	ldr	r3, [pc, #20]	; (800691c <_ZnwjPKci+0x24>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	4798      	blx	r3
 8006910:	4603      	mov	r3, r0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20000030 	.word	0x20000030

08006920 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800692a:	4b04      	ldr	r3, [pc, #16]	; (800693c <_ZdlPvj+0x1c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	4798      	blx	r3
}
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20000040 	.word	0x20000040

08006940 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 800694c:	4b05      	ldr	r3, [pc, #20]	; (8006964 <_ZnajPKci+0x24>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	4798      	blx	r3
 8006958:	4603      	mov	r3, r0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	2000003c 	.word	0x2000003c

08006968 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 8006970:	4b03      	ldr	r3, [pc, #12]	; (8006980 <_ZdaPv+0x18>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	4798      	blx	r3
}
 8006978:	bf00      	nop
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	20000044 	.word	0x20000044

08006984 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800698e:	4b04      	ldr	r3, [pc, #16]	; (80069a0 <_ZdaPvj+0x1c>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	4798      	blx	r3
}
 8006996:	bf00      	nop
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20000044 	.word	0x20000044

080069a4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 80069a8:	4b12      	ldr	r3, [pc, #72]	; (80069f4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 80069aa:	4a13      	ldr	r2, [pc, #76]	; (80069f8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 80069ac:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 80069ae:	4b13      	ldr	r3, [pc, #76]	; (80069fc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 80069b0:	4a13      	ldr	r2, [pc, #76]	; (8006a00 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 80069b2:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 80069b4:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 80069b6:	4a14      	ldr	r2, [pc, #80]	; (8006a08 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 80069b8:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 80069ba:	4b14      	ldr	r3, [pc, #80]	; (8006a0c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 80069bc:	4a14      	ldr	r2, [pc, #80]	; (8006a10 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 80069be:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 80069c0:	4b14      	ldr	r3, [pc, #80]	; (8006a14 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 80069c2:	4a15      	ldr	r2, [pc, #84]	; (8006a18 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 80069c4:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 80069c6:	4b15      	ldr	r3, [pc, #84]	; (8006a1c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 80069c8:	4a15      	ldr	r2, [pc, #84]	; (8006a20 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 80069ca:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 80069cc:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 80069ce:	4a16      	ldr	r2, [pc, #88]	; (8006a28 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 80069d0:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 80069d2:	4b16      	ldr	r3, [pc, #88]	; (8006a2c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 80069d4:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 80069d6:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 80069d8:	4b16      	ldr	r3, [pc, #88]	; (8006a34 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 80069da:	4a17      	ldr	r2, [pc, #92]	; (8006a38 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 80069dc:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 80069de:	4b17      	ldr	r3, [pc, #92]	; (8006a3c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 80069e0:	4a17      	ldr	r2, [pc, #92]	; (8006a40 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 80069e2:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 80069e4:	4b17      	ldr	r3, [pc, #92]	; (8006a44 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 80069e6:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 80069e8:	601a      	str	r2, [r3, #0]

#endif
}
 80069ea:	bf00      	nop
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	20000028 	.word	0x20000028
 80069f8:	080067d9 	.word	0x080067d9
 80069fc:	2000002c 	.word	0x2000002c
 8006a00:	080067f9 	.word	0x080067f9
 8006a04:	20000030 	.word	0x20000030
 8006a08:	08006819 	.word	0x08006819
 8006a0c:	20000034 	.word	0x20000034
 8006a10:	0800683d 	.word	0x0800683d
 8006a14:	20000038 	.word	0x20000038
 8006a18:	0800685d 	.word	0x0800685d
 8006a1c:	2000003c 	.word	0x2000003c
 8006a20:	0800687d 	.word	0x0800687d
 8006a24:	20000040 	.word	0x20000040
 8006a28:	080068a1 	.word	0x080068a1
 8006a2c:	20000044 	.word	0x20000044
 8006a30:	080068bd 	.word	0x080068bd
 8006a34:	20000010 	.word	0x20000010
 8006a38:	080065b5 	.word	0x080065b5
 8006a3c:	20000018 	.word	0x20000018
 8006a40:	080065d9 	.word	0x080065d9
 8006a44:	20000014 	.word	0x20000014
 8006a48:	08006601 	.word	0x08006601

08006a4c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8006a50:	4b08      	ldr	r3, [pc, #32]	; (8006a74 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a08      	ldr	r2, [pc, #32]	; (8006a78 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d004      	beq.n	8006a64 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 8006a5a:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a07      	ldr	r2, [pc, #28]	; (8006a7c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d101      	bne.n	8006a68 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 8006a68:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	20000028 	.word	0x20000028
 8006a78:	08006661 	.word	0x08006661
 8006a7c:	08006621 	.word	0x08006621

08006a80 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8006a84:	4b1f      	ldr	r3, [pc, #124]	; (8006b04 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	4a1e      	ldr	r2, [pc, #120]	; (8006b04 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	4b1d      	ldr	r3, [pc, #116]	; (8006b04 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	bfcc      	ite	gt
 8006a96:	2301      	movgt	r3, #1
 8006a98:	2300      	movle	r3, #0
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d12e      	bne.n	8006afe <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 8006aa0:	4b19      	ldr	r3, [pc, #100]	; (8006b08 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 8006aa6:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8006aa8:	4b19      	ldr	r3, [pc, #100]	; (8006b10 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a19      	ldr	r2, [pc, #100]	; (8006b14 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 8006aae:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 8006ab0:	4b19      	ldr	r3, [pc, #100]	; (8006b18 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a19      	ldr	r2, [pc, #100]	; (8006b1c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 8006ab6:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 8006ab8:	4b19      	ldr	r3, [pc, #100]	; (8006b20 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a19      	ldr	r2, [pc, #100]	; (8006b24 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 8006abe:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 8006ac0:	4b19      	ldr	r3, [pc, #100]	; (8006b28 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a19      	ldr	r2, [pc, #100]	; (8006b2c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8006ac6:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8006ac8:	4b19      	ldr	r3, [pc, #100]	; (8006b30 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a19      	ldr	r2, [pc, #100]	; (8006b34 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8006ace:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8006ad0:	4b19      	ldr	r3, [pc, #100]	; (8006b38 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a19      	ldr	r2, [pc, #100]	; (8006b3c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 8006ad6:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8006ad8:	4b19      	ldr	r3, [pc, #100]	; (8006b40 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a19      	ldr	r2, [pc, #100]	; (8006b44 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 8006ade:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8006ae0:	4b19      	ldr	r3, [pc, #100]	; (8006b48 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a19      	ldr	r2, [pc, #100]	; (8006b4c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 8006ae6:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8006ae8:	4b19      	ldr	r3, [pc, #100]	; (8006b50 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a19      	ldr	r2, [pc, #100]	; (8006b54 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 8006aee:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 8006af0:	4b19      	ldr	r3, [pc, #100]	; (8006b58 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a19      	ldr	r2, [pc, #100]	; (8006b5c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 8006af6:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8006af8:	f7ff ff54 	bl	80069a4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8006afc:	e000      	b.n	8006b00 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 8006afe:	bf00      	nop
#endif
}
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000578 	.word	0x20000578
 8006b08:	20000028 	.word	0x20000028
 8006b0c:	20000048 	.word	0x20000048
 8006b10:	2000002c 	.word	0x2000002c
 8006b14:	2000004c 	.word	0x2000004c
 8006b18:	20000030 	.word	0x20000030
 8006b1c:	20000050 	.word	0x20000050
 8006b20:	20000034 	.word	0x20000034
 8006b24:	20000054 	.word	0x20000054
 8006b28:	20000038 	.word	0x20000038
 8006b2c:	20000058 	.word	0x20000058
 8006b30:	2000003c 	.word	0x2000003c
 8006b34:	2000005c 	.word	0x2000005c
 8006b38:	20000040 	.word	0x20000040
 8006b3c:	20000060 	.word	0x20000060
 8006b40:	20000044 	.word	0x20000044
 8006b44:	20000064 	.word	0x20000064
 8006b48:	20000010 	.word	0x20000010
 8006b4c:	2000001c 	.word	0x2000001c
 8006b50:	20000018 	.word	0x20000018
 8006b54:	20000024 	.word	0x20000024
 8006b58:	20000014 	.word	0x20000014
 8006b5c:	20000020 	.word	0x20000020

08006b60 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 8006b60:	b480      	push	{r7}
 8006b62:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 8006b64:	4b1f      	ldr	r3, [pc, #124]	; (8006be4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	4a1e      	ldr	r2, [pc, #120]	; (8006be4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	4b1d      	ldr	r3, [pc, #116]	; (8006be4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	bfcc      	ite	gt
 8006b76:	2301      	movgt	r3, #1
 8006b78:	2300      	movle	r3, #0
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d12c      	bne.n	8006bda <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 8006b80:	4b19      	ldr	r3, [pc, #100]	; (8006be8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a19      	ldr	r2, [pc, #100]	; (8006bec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 8006b86:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 8006b88:	4b19      	ldr	r3, [pc, #100]	; (8006bf0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a19      	ldr	r2, [pc, #100]	; (8006bf4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 8006b8e:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 8006b90:	4b19      	ldr	r3, [pc, #100]	; (8006bf8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a19      	ldr	r2, [pc, #100]	; (8006bfc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 8006b96:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 8006b98:	4b19      	ldr	r3, [pc, #100]	; (8006c00 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a19      	ldr	r2, [pc, #100]	; (8006c04 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 8006b9e:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 8006ba0:	4b19      	ldr	r3, [pc, #100]	; (8006c08 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a19      	ldr	r2, [pc, #100]	; (8006c0c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 8006ba6:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 8006ba8:	4b19      	ldr	r3, [pc, #100]	; (8006c10 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a19      	ldr	r2, [pc, #100]	; (8006c14 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 8006bae:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 8006bb0:	4b19      	ldr	r3, [pc, #100]	; (8006c18 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a19      	ldr	r2, [pc, #100]	; (8006c1c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 8006bb6:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 8006bb8:	4b19      	ldr	r3, [pc, #100]	; (8006c20 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a19      	ldr	r2, [pc, #100]	; (8006c24 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 8006bbe:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 8006bc0:	4b19      	ldr	r3, [pc, #100]	; (8006c28 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a19      	ldr	r2, [pc, #100]	; (8006c2c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 8006bc6:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 8006bc8:	4b19      	ldr	r3, [pc, #100]	; (8006c30 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a19      	ldr	r2, [pc, #100]	; (8006c34 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 8006bce:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 8006bd0:	4b19      	ldr	r3, [pc, #100]	; (8006c38 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a19      	ldr	r2, [pc, #100]	; (8006c3c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	e000      	b.n	8006bdc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 8006bda:	bf00      	nop
#endif
}
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	20000578 	.word	0x20000578
 8006be8:	20000048 	.word	0x20000048
 8006bec:	20000028 	.word	0x20000028
 8006bf0:	2000004c 	.word	0x2000004c
 8006bf4:	2000002c 	.word	0x2000002c
 8006bf8:	20000050 	.word	0x20000050
 8006bfc:	20000030 	.word	0x20000030
 8006c00:	20000054 	.word	0x20000054
 8006c04:	20000034 	.word	0x20000034
 8006c08:	20000058 	.word	0x20000058
 8006c0c:	20000038 	.word	0x20000038
 8006c10:	2000005c 	.word	0x2000005c
 8006c14:	2000003c 	.word	0x2000003c
 8006c18:	20000060 	.word	0x20000060
 8006c1c:	20000040 	.word	0x20000040
 8006c20:	20000064 	.word	0x20000064
 8006c24:	20000044 	.word	0x20000044
 8006c28:	2000001c 	.word	0x2000001c
 8006c2c:	20000010 	.word	0x20000010
 8006c30:	20000024 	.word	0x20000024
 8006c34:	20000018 	.word	0x20000018
 8006c38:	20000020 	.word	0x20000020
 8006c3c:	20000014 	.word	0x20000014

08006c40 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
    {
 8006c48:	4a05      	ldr	r2, [pc, #20]	; (8006c60 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff fc15 	bl	8006480 <_ZN17MemoryLeakFailureD1Ev>
    }
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	08018450 	.word	0x08018450

08006c64 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
    }
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff ffe7 	bl	8006c40 <_ZN25MemoryLeakWarningReporterD1Ev>
 8006c72:	2104      	movs	r1, #4
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff fe53 	bl	8006920 <_ZdlPvj>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	4a04      	ldr	r2, [pc, #16]	; (8006ca0 <_ZN14TestTerminatorC1Ev+0x1c>)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4618      	mov	r0, r3
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	08018ca8 	.word	0x08018ca8

08006ca4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff ffe8 	bl	8006c84 <_ZN14TestTerminatorC1Ev>
 8006cb4:	4a03      	ldr	r2, [pc, #12]	; (8006cc4 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	08018c80 	.word	0x08018c80

08006cc8 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 8006cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cca:	b099      	sub	sp, #100	; 0x64
 8006ccc:	af02      	add	r7, sp, #8
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 8006cd2:	f007 ffbd 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 8006cd6:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 8006cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	339c      	adds	r3, #156	; 0x9c
 8006cde:	681c      	ldr	r4, [r3, #0]
 8006ce0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ce4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f006 fddc 	bl	800d8a4 <_ZNK10UtestShell7getNameEv>
 8006cec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f001 f875 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006cfa:	f006 fea2 	bl	800da42 <_ZNK10UtestShell13getLineNumberEv>
 8006cfe:	4606      	mov	r6, r0
 8006d00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fcdf 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8006d0c:	f107 000c 	add.w	r0, r7, #12
 8006d10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	4633      	mov	r3, r6
 8006d18:	462a      	mov	r2, r5
 8006d1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d1c:	f002 ff2c 	bl	8009b78 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8006d20:	2300      	movs	r3, #0
 8006d22:	653b      	str	r3, [r7, #80]	; 0x50
 8006d24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff ffbb 	bl	8006ca4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8006d2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006d32:	f107 030c 	add.w	r3, r7, #12
 8006d36:	4619      	mov	r1, r3
 8006d38:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006d3a:	47a0      	blx	r4
 8006d3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d40:	4618      	mov	r0, r3
 8006d42:	f008 f87f 	bl	800ee44 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8006d46:	f107 030c 	add.w	r3, r7, #12
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 f9ac 	bl	80070a8 <_ZN11FailFailureD1Ev>
 8006d50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006d54:	4618      	mov	r0, r3
 8006d56:	f001 f870 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8006d5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f001 f86b 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 8006d64:	bf00      	nop
 8006d66:	375c      	adds	r7, #92	; 0x5c
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d6c <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	4a04      	ldr	r2, [pc, #16]	; (8006d88 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	08018464 	.word	0x08018464

08006d8c <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff ffe8 	bl	8006d6c <_ZN17MemoryLeakFailureC1Ev>
 8006d9c:	4a03      	ldr	r2, [pc, #12]	; (8006dac <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	08018450 	.word	0x08018450

08006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 8006db0:	b598      	push	{r3, r4, r7, lr}
 8006db2:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 8006db4:	4b11      	ldr	r3, [pc, #68]	; (8006dfc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d11b      	bne.n	8006df4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 8006dbc:	f7ff fe60 	bl	8006a80 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 8006dc0:	2004      	movs	r0, #4
 8006dc2:	f7ff fd89 	bl	80068d8 <_Znwj>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	461c      	mov	r4, r3
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f7ff ffde 	bl	8006d8c <_ZN25MemoryLeakWarningReporterC1Ev>
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8006dd2:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 8006dd4:	f241 1050 	movw	r0, #4432	; 0x1150
 8006dd8:	f7ff fd7e 	bl	80068d8 <_Znwj>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	461c      	mov	r4, r3
 8006de0:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4619      	mov	r1, r3
 8006de6:	4620      	mov	r0, r4
 8006de8:	f00a fc44 	bl	8011674 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 8006dec:	4b03      	ldr	r3, [pc, #12]	; (8006dfc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8006dee:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 8006df0:	f7ff feb6 	bl	8006b60 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 8006df4:	4b01      	ldr	r3, [pc, #4]	; (8006dfc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	bd98      	pop	{r3, r4, r7, pc}
 8006dfc:	20000580 	.word	0x20000580
 8006e00:	2000057c 	.word	0x2000057c

08006e04 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	78fa      	ldrb	r2, [r7, #3]
 8006e14:	765a      	strb	r2, [r3, #25]
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
	...

08006e24 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 8006e28:	f7ff fdbc 	bl	80069a4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 8006e2c:	4b0b      	ldr	r3, [pc, #44]	; (8006e5c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d004      	beq.n	8006e3e <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	3204      	adds	r2, #4
 8006e38:	6812      	ldr	r2, [r2, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	4790      	blx	r2
    delete globalReporter;
 8006e3e:	4b08      	ldr	r3, [pc, #32]	; (8006e60 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d004      	beq.n	8006e50 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	3204      	adds	r2, #4
 8006e4a:	6812      	ldr	r2, [r2, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	4790      	blx	r2
    globalDetector = NULLPTR;
 8006e50:	4b02      	ldr	r3, [pc, #8]	; (8006e5c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
}
 8006e56:	bf00      	nop
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000580 	.word	0x20000580
 8006e60:	2000057c 	.word	0x2000057c

08006e64 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f005 f815 	bl	800bea4 <_ZN10TestPluginC1ERK12SimpleString>
 8006e7a:	4a14      	ldr	r2, [pc, #80]	; (8006ecc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	761a      	strb	r2, [r3, #24]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	765a      	strb	r2, [r3, #25]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 8006e92:	4b0f      	ldr	r3, [pc, #60]	; (8006ed0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d102      	bne.n	8006ea0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 8006e9a:	4a0d      	ldr	r2, [pc, #52]	; (8006ed0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	615a      	str	r2, [r3, #20]
 8006eac:	e004      	b.n	8006eb8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 8006eae:	f7ff ff7f 	bl	8006db0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f00a fc6f 	bl	80117a0 <_ZN18MemoryLeakDetector6enableEv>
}
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	08018478 	.word	0x08018478
 8006ed0:	20000584 	.word	0x20000584

08006ed4 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	4a09      	ldr	r2, [pc, #36]	; (8006f04 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	7e5b      	ldrb	r3, [r3, #25]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 8006eea:	f7ff fd5b 	bl	80069a4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 8006eee:	f7ff ff99 	bl	8006e24 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f005 f811 	bl	800bf1c <_ZN10TestPluginD1Ev>
    }
}
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	08018478 	.word	0x08018478

08006f08 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
}
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7ff ffdf 	bl	8006ed4 <_ZN23MemoryLeakWarningPluginD1Ev>
 8006f16:	2124      	movs	r1, #36	; 0x24
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff fd01 	bl	8006920 <_ZdlPvj>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f00a fc14 	bl	8011766 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fd ffb0 	bl	8004ea4 <_ZNK10TestResult15getFailureCountEv>
 8006f44:	4602      	mov	r2, r0
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	621a      	str	r2, [r3, #32]
}
 8006f4a:	bf00      	nop
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
	...

08006f54 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 8006f54:	b590      	push	{r4, r7, lr}
 8006f56:	b097      	sub	sp, #92	; 0x5c
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f00a fc0e 	bl	8011786 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	2103      	movs	r1, #3
 8006f70:	4618      	mov	r0, r3
 8006f72:	f00a ffab 	bl	8011ecc <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8006f76:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	7e1b      	ldrb	r3, [r3, #24]
 8006f7c:	f083 0301 	eor.w	r3, r3, #1
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00e      	beq.n	8006fa4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d009      	beq.n	8006fa4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a1c      	ldr	r4, [r3, #32]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7fd ff85 	bl	8004ea4 <_ZNK10TestResult15getFailureCountEv>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	429c      	cmp	r4, r3
 8006f9e:	d101      	bne.n	8006fa4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e000      	b.n	8006fa6 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d04c      	beq.n	8007044 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 8006faa:	f7ff fd4f 	bl	8006a4c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d028      	beq.n	8007006 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	2103      	movs	r1, #3
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f00a ff4b 	bl	8011e56 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fb7e 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8006fce:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8006fd2:	f107 0310 	add.w	r3, r7, #16
 8006fd6:	68b9      	ldr	r1, [r7, #8]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f002 f8c7 	bl	800916c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8006fde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 ff29 	bl	8007e3a <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3334      	adds	r3, #52	; 0x34
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f107 0210 	add.w	r2, r7, #16
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8006ffa:	f107 0310 	add.w	r3, r7, #16
 8006ffe:	4618      	mov	r0, r3
 8007000:	f002 f974 	bl	80092ec <_ZN11TestFailureD1Ev>
 8007004:	e01e      	b.n	8007044 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d01a      	beq.n	8007044 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3338      	adds	r3, #56	; 0x38
 8007014:	681c      	ldr	r4, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	461a      	mov	r2, r3
 800701c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007020:	4910      	ldr	r1, [pc, #64]	; (8007064 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 8007022:	4618      	mov	r0, r3
 8007024:	f001 fb96 	bl	8008754 <_Z16StringFromFormatPKcz>
 8007028:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fed7 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8007032:	4603      	mov	r3, r0
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	47a0      	blx	r4
 800703a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fefb 	bl	8007e3a <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	4618      	mov	r0, r3
 800704a:	f00a ff19 	bl	8011e80 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	61da      	str	r2, [r3, #28]
}
 800705a:	bf00      	nop
 800705c:	375c      	adds	r7, #92	; 0x5c
 800705e:	46bd      	mov	sp, r7
 8007060:	bd90      	pop	{r4, r7, pc}
 8007062:	bf00      	nop
 8007064:	080160e4 	.word	0x080160e4

08007068 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	2102      	movs	r1, #2
 8007078:	4618      	mov	r0, r3
 800707a:	f00a ff27 	bl	8011ecc <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800707e:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d007      	beq.n	8007098 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	2102      	movs	r1, #2
 800708e:	4618      	mov	r0, r3
 8007090:	f00a fee1 	bl	8011e56 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8007094:	4603      	mov	r3, r0
 8007096:	e000      	b.n	800709a <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 8007098:	4b02      	ldr	r3, [pc, #8]	; (80070a4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	08016124 	.word	0x08016124

080070a8 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	4a05      	ldr	r2, [pc, #20]	; (80070c8 <_ZN11FailFailureD1Ev+0x20>)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f002 f917 	bl	80092ec <_ZN11TestFailureD1Ev>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	080184c0 	.word	0x080184c0

080070cc <_ZN11FailFailureD0Ev>:
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff ffe7 	bl	80070a8 <_ZN11FailFailureD1Ev>
 80070da:	2134      	movs	r1, #52	; 0x34
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff fc1f 	bl	8006920 <_ZdlPvj>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4618      	mov	r0, r3
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 80070f4:	4b05      	ldr	r3, [pc, #20]	; (800710c <_ZN11SimpleMutexC1Ev+0x20>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4798      	blx	r3
 80070fa:	4602      	mov	r2, r0
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	601a      	str	r2, [r3, #0]
}
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	200000e8 	.word	0x200000e8

08007110 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 8007118:	4b05      	ldr	r3, [pc, #20]	; (8007130 <_ZN11SimpleMutexD1Ev+0x20>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6812      	ldr	r2, [r2, #0]
 8007120:	4610      	mov	r0, r2
 8007122:	4798      	blx	r3
}
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	200000f4 	.word	0x200000f4

08007134 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800713c:	4b04      	ldr	r3, [pc, #16]	; (8007150 <_ZN11SimpleMutex4LockEv+0x1c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6812      	ldr	r2, [r2, #0]
 8007144:	4610      	mov	r0, r2
 8007146:	4798      	blx	r3
}
 8007148:	bf00      	nop
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	200000ec 	.word	0x200000ec

08007154 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800715c:	4b04      	ldr	r3, [pc, #16]	; (8007170 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	4610      	mov	r0, r2
 8007166:	4798      	blx	r3
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	200000f0 	.word	0x200000f0

08007174 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f7ff ffd3 	bl	8007134 <_ZN11SimpleMutex4LockEv>
}
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff ffd5 	bl	8007154 <_ZN11SimpleMutex6UnlockEv>
}
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 80071b8:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 80071c0:	f003 fc6c 	bl	800aa9c <_Z24defaultNewArrayAllocatorv>
 80071c4:	4603      	mov	r3, r0
 80071c6:	e001      	b.n	80071cc <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 80071c8:	4b01      	ldr	r3, [pc, #4]	; (80071d0 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20000588 	.word	0x20000588

080071d4 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 80071d4:	b590      	push	{r4, r7, lr}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 80071e0:	f7ff ffe8 	bl	80071b4 <_ZN12SimpleString18getStringAllocatorEv>
 80071e4:	6803      	ldr	r3, [r0, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	681c      	ldr	r4, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	68f9      	ldr	r1, [r7, #12]
 80071f0:	47a0      	blx	r4
 80071f2:	4603      	mov	r3, r0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd90      	pop	{r4, r7, pc}

080071fc <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 80071fc:	b590      	push	{r4, r7, lr}
 80071fe:	b087      	sub	sp, #28
 8007200:	af02      	add	r7, sp, #8
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800720a:	f7ff ffd3 	bl	80071b4 <_ZN12SimpleString18getStringAllocatorEv>
 800720e:	6803      	ldr	r3, [r0, #0]
 8007210:	330c      	adds	r3, #12
 8007212:	681c      	ldr	r4, [r3, #0]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	68f9      	ldr	r1, [r7, #12]
 800721e:	47a0      	blx	r4
}
 8007220:	bf00      	nop
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	bd90      	pop	{r4, r7, pc}

08007228 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 8007230:	2284      	movs	r2, #132	; 0x84
 8007232:	4906      	ldr	r1, [pc, #24]	; (800724c <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 8007234:	2001      	movs	r0, #1
 8007236:	f7ff ffcd 	bl	80071d4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800723a:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	701a      	strb	r2, [r3, #0]
    return empty;
 8007242:	68fb      	ldr	r3, [r7, #12]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	08016128 	.word	0x08016128

08007250 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	4618      	mov	r0, r3
 800725e:	f001 f809 	bl	8008274 <_ZN12SimpleString7isSpaceEc>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <_ZN12SimpleString4AtoUEPKc+0x20>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	3301      	adds	r3, #1
 800726c:	607b      	str	r3, [r7, #4]
 800726e:	e7f3      	b.n	8007258 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 8007270:	2300      	movs	r3, #0
 8007272:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f000 ffe7 	bl	800824c <_ZN12SimpleString7isDigitEc>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d005      	beq.n	8007290 <_ZN12SimpleString4AtoUEPKc+0x40>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b2f      	cmp	r3, #47	; 0x2f
 800728a:	d901      	bls.n	8007290 <_ZN12SimpleString4AtoUEPKc+0x40>
 800728c:	2301      	movs	r3, #1
 800728e:	e000      	b.n	8007292 <_ZN12SimpleString4AtoUEPKc+0x42>
 8007290:	2300      	movs	r3, #0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d010      	beq.n	80072b8 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4413      	add	r3, r2
 80072ac:	3b30      	subs	r3, #48	; 0x30
 80072ae:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3301      	adds	r3, #1
 80072b4:	607b      	str	r3, [r7, #4]
 80072b6:	e7dd      	b.n	8007274 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 80072b8:	68fb      	ldr	r3, [r7, #12]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b084      	sub	sp, #16
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 ffd0 	bl	8008274 <_ZN12SimpleString7isSpaceEc>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <_ZN12SimpleString4AtoIEPKc+0x20>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3301      	adds	r3, #1
 80072de:	607b      	str	r3, [r7, #4]
 80072e0:	e7f3      	b.n	80072ca <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 80072e8:	7afb      	ldrb	r3, [r7, #11]
 80072ea:	2b2d      	cmp	r3, #45	; 0x2d
 80072ec:	d002      	beq.n	80072f4 <_ZN12SimpleString4AtoIEPKc+0x32>
 80072ee:	7afb      	ldrb	r3, [r7, #11]
 80072f0:	2b2b      	cmp	r3, #43	; 0x2b
 80072f2:	d102      	bne.n	80072fa <_ZN12SimpleString4AtoIEPKc+0x38>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	3301      	adds	r3, #1
 80072f8:	607b      	str	r3, [r7, #4]

    int  result = 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	f000 ffa2 	bl	800824c <_ZN12SimpleString7isDigitEc>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00f      	beq.n	800732e <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	3b30      	subs	r3, #48	; 0x30
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3301      	adds	r3, #1
 800732a:	607b      	str	r3, [r7, #4]
 800732c:	e7e7      	b.n	80072fe <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800732e:	7afb      	ldrb	r3, [r7, #11]
 8007330:	2b2d      	cmp	r3, #45	; 0x2d
 8007332:	d102      	bne.n	800733a <_ZN12SimpleString4AtoIEPKc+0x78>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	425b      	negs	r3, r3
 8007338:	e000      	b.n	800733c <_ZN12SimpleString4AtoIEPKc+0x7a>
 800733a:	68fb      	ldr	r3, [r7, #12]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00c      	beq.n	8007370 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	781a      	ldrb	r2, [r3, #0]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d106      	bne.n	8007370 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	3301      	adds	r3, #1
 8007366:	607b      	str	r3, [r7, #4]
       ++s2;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	3301      	adds	r3, #1
 800736c:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800736e:	e7ee      	b.n	800734e <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	461a      	mov	r2, r3
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	1ad3      	subs	r3, r2, r3
}
 800737c:	4618      	mov	r0, r3
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 8007390:	f04f 33ff 	mov.w	r3, #4294967295
 8007394:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3301      	adds	r3, #1
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	607a      	str	r2, [r7, #4]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bf14      	ite	ne
 80073a8:	2301      	movne	r3, #1
 80073aa:	2300      	moveq	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d000      	beq.n	80073b4 <_ZN12SimpleString6StrLenEPKc+0x2c>
 80073b2:	e7f0      	b.n	8007396 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 80073b4:	68fb      	ldr	r3, [r7, #12]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d013      	beq.n	80073fc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00f      	beq.n	80073fc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	781a      	ldrb	r2, [r3, #0]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d109      	bne.n	80073fc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	607b      	str	r3, [r7, #4]
        ++s1;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3301      	adds	r3, #1
 80073f2:	60fb      	str	r3, [r7, #12]
        ++s2;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	3301      	adds	r3, #1
 80073f8:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 80073fa:	e7e8      	b.n	80073ce <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d006      	beq.n	8007410 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	e000      	b.n	8007412 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800741e:	b480      	push	{r7}
 8007420:	b087      	sub	sp, #28
 8007422:	af00      	add	r7, sp, #0
 8007424:	60f8      	str	r0, [r7, #12]
 8007426:	60b9      	str	r1, [r7, #8]
 8007428:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	e01e      	b.n	800747c <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	781a      	ldrb	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	3b01      	subs	r3, #1
 800744a:	607b      	str	r3, [r7, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800745a:	2301      	movs	r3, #1
 800745c:	e000      	b.n	8007460 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800745e:	2300      	movs	r3, #0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00a      	beq.n	800747a <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	3301      	adds	r3, #1
 8007468:	60bb      	str	r3, [r7, #8]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3301      	adds	r3, #1
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8007478:	e7e5      	b.n	8007446 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800747a:	697b      	ldr	r3, [r7, #20]
}
 800747c:	4618      	mov	r0, r3
 800747e:	371c      	adds	r7, #28
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	e01b      	b.n	80074d6 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d016      	beq.n	80074d4 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 80074a6:	6838      	ldr	r0, [r7, #0]
 80074a8:	f7ff ff6e 	bl	8007388 <_ZN12SimpleString6StrLenEPKc>
 80074ac:	4603      	mov	r3, r0
 80074ae:	461a      	mov	r2, r3
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff ff85 	bl	80073c2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	bf0c      	ite	eq
 80074be:	2301      	moveq	r3, #1
 80074c0:	2300      	movne	r3, #0
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	e004      	b.n	80074d6 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	3301      	adds	r3, #1
 80074d0:	607b      	str	r3, [r7, #4]
 80074d2:	e7e4      	b.n	800749e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	4603      	mov	r3, r0
 80074e6:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 80074e8:	79fb      	ldrb	r3, [r7, #7]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fed9 	bl	80082a2 <_ZN12SimpleString7isUpperEc>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <_ZN12SimpleString7ToLowerEc+0x20>
 80074f6:	79fb      	ldrb	r3, [r7, #7]
 80074f8:	3320      	adds	r3, #32
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	e000      	b.n	8007500 <_ZN12SimpleString7ToLowerEc+0x22>
 80074fe:	79fb      	ldrb	r3, [r7, #7]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	613b      	str	r3, [r7, #16]

    while (n--)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	1e5a      	subs	r2, r3, #1
 8007520:	607a      	str	r2, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	bf14      	ite	ne
 8007526:	2301      	movne	r3, #1
 8007528:	2300      	moveq	r3, #0
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d013      	beq.n	8007558 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	781a      	ldrb	r2, [r3, #0]
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d006      	beq.n	800754a <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	461a      	mov	r2, r3
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	e007      	b.n	800755a <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	3301      	adds	r3, #1
 800754e:	617b      	str	r3, [r7, #20]
            ++p2;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	3301      	adds	r3, #1
 8007554:	613b      	str	r3, [r7, #16]
    while (n--)
 8007556:	e7e1      	b.n	800751c <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
	...

08007568 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00d      	beq.n	8007594 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6859      	ldr	r1, [r3, #4]
 8007580:	23ee      	movs	r3, #238	; 0xee
 8007582:	4a06      	ldr	r2, [pc, #24]	; (800759c <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 8007584:	f7ff fe3a 	bl	80071fc <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	605a      	str	r2, [r3, #4]
    }
}
 8007594:	bf00      	nop
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	08016128 	.word	0x08016128

080075a0 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7ff ffdd 	bl	8007568 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7ff fe37 	bl	8007228 <_ZNK12SimpleString14getEmptyStringEv>
 80075ba:	4602      	mov	r2, r0
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	601a      	str	r2, [r3, #0]
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f7ff ffc7 	bl	8007568 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	4619      	mov	r1, r3
 80075e6:	68b8      	ldr	r0, [r7, #8]
 80075e8:	f000 fe12 	bl	8008210 <_ZN12SimpleString15copyToNewBufferEPKcj>
 80075ec:	4602      	mov	r2, r0
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	601a      	str	r2, [r3, #0]
}
 80075f2:	bf00      	nop
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff ffae 	bl	8007568 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f240 1209 	movw	r2, #265	; 0x109
 800761a:	4907      	ldr	r1, [pc, #28]	; (8007638 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff fdd9 	bl	80071d4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8007622:	4602      	mov	r2, r0
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2200      	movs	r2, #0
 800762e:	701a      	strb	r2, [r3, #0]
}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	08016128 	.word	0x08016128

0800763c <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f7ff ff8d 	bl	8007568 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	601a      	str	r2, [r3, #0]
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 8007662:	b590      	push	{r4, r7, lr}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681c      	ldr	r4, [r3, #0]
 8007670:	6838      	ldr	r0, [r7, #0]
 8007672:	f000 fbc1 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8007676:	4603      	mov	r3, r0
 8007678:	3301      	adds	r3, #1
 800767a:	461a      	mov	r2, r3
 800767c:	4621      	mov	r1, r4
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff ffa2 	bl	80075c8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	bd90      	pop	{r4, r7, pc}

0800768c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 8007696:	6838      	ldr	r0, [r7, #0]
 8007698:	f7ff fe76 	bl	8007388 <_ZN12SimpleString6StrLenEPKc>
 800769c:	4603      	mov	r3, r0
 800769e:	3301      	adds	r3, #1
 80076a0:	461a      	mov	r2, r3
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff ff8f 	bl	80075c8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 80076aa:	bf00      	nop
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
    return buffer_;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b082      	sub	sp, #8
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d103      	bne.n	80076ee <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7ff ff5a 	bl	80075a0 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 80076ec:	e003      	b.n	80076f6 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7ff ffcb 	bl	800768c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 8007718:	68b8      	ldr	r0, [r7, #8]
 800771a:	f7ff fe35 	bl	8007388 <_ZN12SimpleString6StrLenEPKc>
 800771e:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	fb02 f303 	mul.w	r3, r2, r3
 8007728:	3301      	adds	r3, #1
 800772a:	4619      	mov	r1, r3
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f7ff ff65 	bl	80075fc <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 8007738:	2300      	movs	r3, #0
 800773a:	61bb      	str	r3, [r7, #24]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	429a      	cmp	r2, r3
 8007742:	d20e      	bcs.n	8007762 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	3301      	adds	r3, #1
 8007748:	461a      	mov	r2, r3
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	69f8      	ldr	r0, [r7, #28]
 800774e:	f7ff fe66 	bl	800741e <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	4413      	add	r3, r2
 8007758:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	3301      	adds	r3, #1
 800775e:	61bb      	str	r3, [r7, #24]
 8007760:	e7ec      	b.n	800773c <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	2200      	movs	r2, #0
 8007766:	701a      	strb	r2, [r3, #0]
}
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4618      	mov	r0, r3
 800776c:	3720      	adds	r7, #32
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 8007788:	6838      	ldr	r0, [r7, #0]
 800778a:	f7ff ff92 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 800778e:	4603      	mov	r3, r0
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff ff7a 	bl	800768c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
    if (this != &other)
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d003      	beq.n	80077bc <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff ff53 	bl	8007662 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 80077bc:	687b      	ldr	r3, [r7, #4]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 80077c6:	b590      	push	{r4, r7, lr}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7ff ff6e 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 80077d6:	4604      	mov	r4, r0
 80077d8:	6838      	ldr	r0, [r7, #0]
 80077da:	f7ff ff6a 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 80077de:	4603      	mov	r3, r0
 80077e0:	4619      	mov	r1, r3
 80077e2:	4620      	mov	r0, r4
 80077e4:	f7ff fe50 	bl	8007488 <_ZN12SimpleString6StrStrEPKcS1_>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	bf14      	ite	ne
 80077ee:	2301      	movne	r3, #1
 80077f0:	2300      	moveq	r3, #0
 80077f2:	b2db      	uxtb	r3, r3
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd90      	pop	{r4, r7, pc}

080077fc <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 80077fc:	b590      	push	{r4, r7, lr}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 8007806:	f107 0308 	add.w	r3, r7, #8
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fabb 	bl	8007d88 <_ZNK12SimpleString9lowerCaseEv>
 8007812:	f107 0310 	add.w	r3, r7, #16
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 fab5 	bl	8007d88 <_ZNK12SimpleString9lowerCaseEv>
 800781e:	f107 0210 	add.w	r2, r7, #16
 8007822:	f107 0308 	add.w	r3, r7, #8
 8007826:	4611      	mov	r1, r2
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff ffcc 	bl	80077c6 <_ZNK12SimpleString8containsERKS_>
 800782e:	4603      	mov	r3, r0
 8007830:	461c      	mov	r4, r3
 8007832:	bf00      	nop
 8007834:	f107 0310 	add.w	r3, r7, #16
 8007838:	4618      	mov	r0, r3
 800783a:	f000 fafe 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800783e:	f107 0308 	add.w	r3, r7, #8
 8007842:	4618      	mov	r0, r3
 8007844:	f000 faf9 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8007848:	4623      	mov	r3, r4
}
 800784a:	4618      	mov	r0, r3
 800784c:	371c      	adds	r7, #28
 800784e:	46bd      	mov	sp, r7
 8007850:	bd90      	pop	{r4, r7, pc}

08007852 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 8007852:	b590      	push	{r4, r7, lr}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800785c:	6838      	ldr	r0, [r7, #0]
 800785e:	f000 facb 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	bf0c      	ite	eq
 8007868:	2301      	moveq	r3, #1
 800786a:	2300      	movne	r3, #0
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <_ZNK12SimpleString10startsWithERKS_+0x24>
 8007872:	2301      	movs	r3, #1
 8007874:	e022      	b.n	80078bc <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fabe 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	bf0c      	ite	eq
 8007882:	2301      	moveq	r3, #1
 8007884:	2300      	movne	r3, #0
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800788c:	2300      	movs	r3, #0
 800788e:	e015      	b.n	80078bc <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff ff0e 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8007896:	4604      	mov	r4, r0
 8007898:	6838      	ldr	r0, [r7, #0]
 800789a:	f7ff ff0a 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 800789e:	4603      	mov	r3, r0
 80078a0:	4619      	mov	r1, r3
 80078a2:	4620      	mov	r0, r4
 80078a4:	f7ff fdf0 	bl	8007488 <_ZN12SimpleString6StrStrEPKcS1_>
 80078a8:	4604      	mov	r4, r0
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff ff01 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 80078b0:	4603      	mov	r3, r0
 80078b2:	429c      	cmp	r4, r3
 80078b4:	bf0c      	ite	eq
 80078b6:	2301      	moveq	r3, #1
 80078b8:	2300      	movne	r3, #0
 80078ba:	b2db      	uxtb	r3, r3
}
 80078bc:	4618      	mov	r0, r3
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd90      	pop	{r4, r7, pc}

080078c4 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 80078c4:	b590      	push	{r4, r7, lr}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
    size_t length = size();
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa92 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 80078d4:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 80078d6:	6838      	ldr	r0, [r7, #0]
 80078d8:	f000 fa8e 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 80078dc:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <_ZNK12SimpleString8endsWithERKS_+0x24>
 80078e4:	2301      	movs	r3, #1
 80078e6:	e020      	b.n	800792a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 80078ee:	2300      	movs	r3, #0
 80078f0:	e01b      	b.n	800792a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d201      	bcs.n	80078fe <_ZNK12SimpleString8endsWithERKS_+0x3a>
 80078fa:	2300      	movs	r3, #0
 80078fc:	e015      	b.n	800792a <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff fed7 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8007904:	4601      	mov	r1, r0
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	18cc      	adds	r4, r1, r3
 800790e:	6838      	ldr	r0, [r7, #0]
 8007910:	f7ff fecf 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8007914:	4603      	mov	r3, r0
 8007916:	4619      	mov	r1, r3
 8007918:	4620      	mov	r0, r4
 800791a:	f7ff fd13 	bl	8007344 <_ZN12SimpleString6StrCmpEPKcS1_>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	bf0c      	ite	eq
 8007924:	2301      	moveq	r3, #1
 8007926:	2300      	movne	r3, #0
 8007928:	b2db      	uxtb	r3, r3
}
 800792a:	4618      	mov	r0, r3
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	bd90      	pop	{r4, r7, pc}

08007932 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b086      	sub	sp, #24
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff feb6 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8007946:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 8007948:	2300      	movs	r3, #0
 800794a:	60fb      	str	r3, [r7, #12]
    if (*str){
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d008      	beq.n	8007966 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 8007954:	6838      	ldr	r0, [r7, #0]
 8007956:	f7ff feac 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 800795a:	4603      	mov	r3, r0
 800795c:	4619      	mov	r1, r3
 800795e:	6938      	ldr	r0, [r7, #16]
 8007960:	f7ff fd92 	bl	8007488 <_ZN12SimpleString6StrStrEPKcS1_>
 8007964:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d014      	beq.n	8007998 <_ZNK12SimpleString5countERKS_+0x66>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d011      	beq.n	8007998 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	613b      	str	r3, [r7, #16]
        str++;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	3301      	adds	r3, #1
 800797c:	613b      	str	r3, [r7, #16]
        num++;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	3301      	adds	r3, #1
 8007982:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 8007984:	6838      	ldr	r0, [r7, #0]
 8007986:	f7ff fe94 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 800798a:	4603      	mov	r3, r0
 800798c:	4619      	mov	r1, r3
 800798e:	6938      	ldr	r0, [r7, #16]
 8007990:	f7ff fd7a 	bl	8007488 <_ZN12SimpleString6StrStrEPKcS1_>
 8007994:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 8007996:	e7e6      	b.n	8007966 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 8007998:	697b      	ldr	r3, [r7, #20]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 80079a2:	b590      	push	{r4, r7, lr}
 80079a4:	b091      	sub	sp, #68	; 0x44
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	60f8      	str	r0, [r7, #12]
 80079aa:	60b9      	str	r1, [r7, #8]
 80079ac:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f7ff ffbe 	bl	8007932 <_ZNK12SimpleString5countERKS_>
 80079b6:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 80079b8:	68b9      	ldr	r1, [r7, #8]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f7ff ff82 	bl	80078c4 <_ZNK12SimpleString8endsWithERKS_>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 80079c6:	2300      	movs	r3, #0
 80079c8:	e000      	b.n	80079cc <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 80079ca:	2301      	movs	r3, #1
 80079cc:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 80079ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	4413      	add	r3, r2
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f001 f84e 	bl	8008a78 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f7ff fe68 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 80079e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 80079e4:	2300      	movs	r3, #0
 80079e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80079e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d235      	bcs.n	8007a5c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 80079f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 80079f4:	68b8      	ldr	r0, [r7, #8]
 80079f6:	f7ff fe5c 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 80079fa:	4603      	mov	r3, r0
 80079fc:	4619      	mov	r1, r3
 80079fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007a00:	f7ff fd42 	bl	8007488 <_ZN12SimpleString6StrStrEPKcS1_>
 8007a04:	4603      	mov	r3, r0
 8007a06:	3301      	adds	r3, #1
 8007a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 8007a0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 f8cd 	bl	8008bac <_ZN22SimpleStringCollectionixEj>
 8007a12:	4604      	mov	r4, r0
 8007a14:	f107 031c 	add.w	r3, r7, #28
 8007a18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff fe55 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8007a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	f107 0014 	add.w	r0, r7, #20
 8007a2a:	f107 011c 	add.w	r1, r7, #28
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f000 fb0c 	bl	800804c <_ZNK12SimpleString9subStringEjj>
 8007a34:	f107 0314 	add.w	r3, r7, #20
 8007a38:	4619      	mov	r1, r3
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f7ff feb1 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8007a40:	f107 0314 	add.w	r3, r7, #20
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 f9f8 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8007a4a:	f107 031c 	add.w	r3, r7, #28
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 f9f3 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 8007a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a56:	3301      	adds	r3, #1
 8007a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a5a:	e7c5      	b.n	80079e8 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d015      	beq.n	8007a8e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 8007a62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 f8a1 	bl	8008bac <_ZN22SimpleStringCollectionixEj>
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7ff fe29 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8007a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f7ff fe8f 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8007a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 f9d6 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    }
}
 8007a8e:	bf00      	nop
 8007a90:	3744      	adds	r7, #68	; 0x44
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd90      	pop	{r4, r7, pc}

08007a96 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	70fb      	strb	r3, [r7, #3]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f9a6 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8007aac:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d218      	bcs.n	8007aec <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff fdf9 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	78fa      	ldrb	r2, [r7, #3]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	bf0c      	ite	eq
 8007ace:	2301      	moveq	r3, #1
 8007ad0:	2300      	movne	r3, #0
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d005      	beq.n	8007ae4 <_ZN12SimpleString7replaceEcc+0x4e>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4413      	add	r3, r2
 8007ae0:	78ba      	ldrb	r2, [r7, #2]
 8007ae2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	e7e2      	b.n	8007ab2 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 8007aec:	bf00      	nop
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08e      	sub	sp, #56	; 0x38
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 8007b00:	f107 0310 	add.w	r3, r7, #16
 8007b04:	68b9      	ldr	r1, [r7, #8]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7ff fddf 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8007b0c:	f107 0310 	add.w	r3, r7, #16
 8007b10:	4619      	mov	r1, r3
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f7ff ff0d 	bl	8007932 <_ZNK12SimpleString5countERKS_>
 8007b18:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007b1a:	f107 0310 	add.w	r3, r7, #16
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 f98b 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 8007b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d071      	beq.n	8007c0e <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 f964 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8007b30:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 8007b32:	68b8      	ldr	r0, [r7, #8]
 8007b34:	f7ff fc28 	bl	8007388 <_ZN12SimpleString6StrLenEPKc>
 8007b38:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff fc24 	bl	8007388 <_ZN12SimpleString6StrLenEPKc>
 8007b40:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b46:	fb02 f203 	mul.w	r2, r2, r3
 8007b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4c:	441a      	add	r2, r3
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b52:	fb01 f303 	mul.w	r3, r1, r3
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	3301      	adds	r3, #1
 8007b5a:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d951      	bls.n	8007c06 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 8007b62:	f240 129d 	movw	r2, #413	; 0x19d
 8007b66:	492c      	ldr	r1, [pc, #176]	; (8007c18 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 8007b68:	69f8      	ldr	r0, [r7, #28]
 8007b6a:	f7ff fb33 	bl	80071d4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8007b6e:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 8007b70:	2300      	movs	r3, #0
 8007b72:	637b      	str	r3, [r7, #52]	; 0x34
 8007b74:	2300      	movs	r3, #0
 8007b76:	633b      	str	r3, [r7, #48]	; 0x30
 8007b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d236      	bcs.n	8007bee <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f7ff fd96 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8007b86:	4602      	mov	r2, r0
 8007b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b8a:	4413      	add	r3, r2
 8007b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b8e:	68b9      	ldr	r1, [r7, #8]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff fc16 	bl	80073c2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	bf0c      	ite	eq
 8007b9c:	2301      	moveq	r3, #1
 8007b9e:	2300      	movne	r3, #0
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d011      	beq.n	8007bca <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007baa:	18d0      	adds	r0, r2, r3
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	f7ff fc33 	bl	800741e <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 8007bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 8007bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc4:	4413      	add	r3, r2
 8007bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc8:	e7d6      	b.n	8007b78 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f7ff fd71 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd4:	441a      	add	r2, r3
 8007bd6:	69b9      	ldr	r1, [r7, #24]
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	440b      	add	r3, r1
 8007bdc:	7812      	ldrb	r2, [r2, #0]
 8007bde:	701a      	strb	r2, [r3, #0]
                j++;
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	3301      	adds	r3, #1
 8007be4:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 8007be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be8:	3301      	adds	r3, #1
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 8007bec:	e7c4      	b.n	8007b78 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	69b9      	ldr	r1, [r7, #24]
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f7ff fd1c 	bl	800763c <_ZN12SimpleString19setInternalBufferToEPcj>
 8007c04:	e004      	b.n	8007c10 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f7ff fcca 	bl	80075a0 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 8007c0c:	e000      	b.n	8007c10 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 8007c0e:	bf00      	nop
}
 8007c10:	3738      	adds	r7, #56	; 0x38
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	08016128 	.word	0x08016128

08007c1c <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 8007c1c:	b590      	push	{r4, r7, lr}
 8007c1e:	b089      	sub	sp, #36	; 0x24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 8007c26:	493b      	ldr	r1, [pc, #236]	; (8007d14 <_ZNK12SimpleString9printableEv+0xf8>)
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff fd4e 	bl	80076ca <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 8007c2e:	6838      	ldr	r0, [r7, #0]
 8007c30:	f000 f876 	bl	8007d20 <_ZNK12SimpleString16getPrintableSizeEv>
 8007c34:	4603      	mov	r3, r0
 8007c36:	3301      	adds	r3, #1
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff fcde 	bl	80075fc <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 8007c40:	6838      	ldr	r0, [r7, #0]
 8007c42:	f000 f8d9 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8007c46:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	61bb      	str	r3, [r7, #24]
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d252      	bcs.n	8007cfe <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	4413      	add	r3, r2
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 8007c64:	7cfb      	ldrb	r3, [r7, #19]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 fb43 	bl	80082f2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d012      	beq.n	8007c98 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	18d0      	adds	r0, r2, r3
 8007c7a:	7cfb      	ldrb	r3, [r7, #19]
 8007c7c:	3b07      	subs	r3, #7
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	461a      	mov	r2, r3
 8007c82:	4b25      	ldr	r3, [pc, #148]	; (8007d18 <_ZNK12SimpleString9printableEv+0xfc>)
 8007c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	f7ff fbc7 	bl	800741e <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	3302      	adds	r3, #2
 8007c94:	61fb      	str	r3, [r7, #28]
 8007c96:	e02e      	b.n	8007cf6 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 8007c98:	7cfb      	ldrb	r3, [r7, #19]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 fb15 	bl	80082ca <_ZN12SimpleString9isControlEc>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d01e      	beq.n	8007ce4 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 8007ca6:	7cfa      	ldrb	r2, [r7, #19]
 8007ca8:	f107 0308 	add.w	r3, r7, #8
 8007cac:	491b      	ldr	r1, [pc, #108]	; (8007d1c <_ZNK12SimpleString9printableEv+0x100>)
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 fd50 	bl	8008754 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	18d4      	adds	r4, r2, r3
 8007cbc:	f107 0308 	add.w	r3, r7, #8
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 f88d 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2204      	movs	r2, #4
 8007cca:	4619      	mov	r1, r3
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f7ff fba6 	bl	800741e <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 8007cd8:	f107 0308 	add.w	r3, r7, #8
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 f8ac 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8007ce2:	e008      	b.n	8007cf6 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	4413      	add	r3, r2
 8007cec:	7cfa      	ldrb	r2, [r7, #19]
 8007cee:	701a      	strb	r2, [r3, #0]
            j++;
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	61bb      	str	r3, [r7, #24]
 8007cfc:	e7a8      	b.n	8007c50 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	4413      	add	r3, r2
 8007d06:	2200      	movs	r2, #0
 8007d08:	701a      	strb	r2, [r3, #0]

    return result;
 8007d0a:	bf00      	nop
}
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	3724      	adds	r7, #36	; 0x24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd90      	pop	{r4, r7, pc}
 8007d14:	080161e8 	.word	0x080161e8
 8007d18:	20000068 	.word	0x20000068
 8007d1c:	080161ec 	.word	0x080161ec

08007d20 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f865 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8007d2e:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 8007d34:	2300      	movs	r3, #0
 8007d36:	613b      	str	r3, [r7, #16]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d21e      	bcs.n	8007d7e <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	4413      	add	r3, r2
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 8007d4c:	7afb      	ldrb	r3, [r7, #11]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 facf 	bl	80082f2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	617b      	str	r3, [r7, #20]
 8007d60:	e009      	b.n	8007d76 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 8007d62:	7afb      	ldrb	r3, [r7, #11]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 fab0 	bl	80082ca <_ZN12SimpleString9isControlEc>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	3303      	adds	r3, #3
 8007d74:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	613b      	str	r3, [r7, #16]
 8007d7c:	e7dc      	b.n	8007d38 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 8007d7e:	697b      	ldr	r3, [r7, #20]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 8007d88:	b590      	push	{r4, r7, lr}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7ff fcec 	bl	8007772 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f82c 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8007da0:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 8007da2:	2300      	movs	r3, #0
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d213      	bcs.n	8007dd6 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7ff fc7f 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8007db4:	4602      	mov	r2, r0
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4413      	add	r3, r2
 8007dba:	7819      	ldrb	r1, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	18d4      	adds	r4, r2, r3
 8007dc4:	4608      	mov	r0, r1
 8007dc6:	f7ff fb8a 	bl	80074de <_ZN12SimpleString7ToLowerEc>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	e7e7      	b.n	8007da6 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 8007dd6:	bf00      	nop
}
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd90      	pop	{r4, r7, pc}

08007de0 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
    return getBuffer();
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff fc62 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8007dee:	4603      	mov	r3, r0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7ff fc56 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8007e06:	4603      	mov	r3, r0
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7ff fabd 	bl	8007388 <_ZN12SimpleString6StrLenEPKc>
 8007e0e:	4603      	mov	r3, r0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
    return size() == 0;
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7ff ffe9 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2301      	moveq	r3, #1
 8007e2e:	2300      	movne	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7ff fb90 	bl	8007568 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 8007e52:	b590      	push	{r4, r7, lr}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff ffbf 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8007e62:	4604      	mov	r4, r0
 8007e64:	6838      	ldr	r0, [r7, #0]
 8007e66:	f7ff ffbb 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f7ff fa68 	bl	8007344 <_ZN12SimpleString6StrCmpEPKcS1_>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	bf0c      	ite	eq
 8007e7a:	2301      	moveq	r3, #1
 8007e7c:	2300      	movne	r3, #0
 8007e7e:	b2db      	uxtb	r3, r3
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd90      	pop	{r4, r7, pc}

08007e88 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 8007e88:	b590      	push	{r4, r7, lr}
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 8007e92:	f107 0308 	add.w	r3, r7, #8
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7ff ff75 	bl	8007d88 <_ZNK12SimpleString9lowerCaseEv>
 8007e9e:	f107 0310 	add.w	r3, r7, #16
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7ff ff6f 	bl	8007d88 <_ZNK12SimpleString9lowerCaseEv>
 8007eaa:	f107 0210 	add.w	r2, r7, #16
 8007eae:	f107 0308 	add.w	r3, r7, #8
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7ff ffcc 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	461c      	mov	r4, r3
 8007ebe:	f107 0310 	add.w	r3, r7, #16
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff ffb9 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8007ec8:	f107 0308 	add.w	r3, r7, #8
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7ff ffb4 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8007ed2:	4623      	mov	r3, r4
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	371c      	adds	r7, #28
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd90      	pop	{r4, r7, pc}

08007edc <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
    return !(left == right);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff ffb2 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	f083 0301 	eor.w	r3, r3, #1
 8007ef4:	b2db      	uxtb	r3, r3
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	60f8      	str	r0, [r7, #12]
 8007f06:	60b9      	str	r1, [r7, #8]
 8007f08:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 8007f0a:	68b8      	ldr	r0, [r7, #8]
 8007f0c:	f7ff fbd1 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8007f10:	4603      	mov	r3, r0
 8007f12:	4619      	mov	r1, r3
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7ff fbd8 	bl	80076ca <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff fbc9 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8007f20:	4603      	mov	r3, r0
 8007f22:	4619      	mov	r1, r3
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f000 f817 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
    return t;
 8007f2a:	bf00      	nop
}
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 8007f3e:	6838      	ldr	r0, [r7, #0]
 8007f40:	f7ff fbb7 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8007f44:	4603      	mov	r3, r0
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f805 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
 8007f4e:	4603      	mov	r3, r0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff ff48 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8007f68:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 8007f6a:	6838      	ldr	r0, [r7, #0]
 8007f6c:	f7ff fa0c 	bl	8007388 <_ZN12SimpleString6StrLenEPKc>
 8007f70:	4603      	mov	r3, r0
 8007f72:	3301      	adds	r3, #1
 8007f74:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7ff fb97 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8007f84:	4603      	mov	r3, r0
 8007f86:	68f9      	ldr	r1, [r7, #12]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 f941 	bl	8008210 <_ZN12SimpleString15copyToNewBufferEPKcj>
 8007f8e:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	4413      	add	r3, r2
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff fa3f 	bl	800741e <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	68b9      	ldr	r1, [r7, #8]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff fb49 	bl	800763c <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 8007faa:	687b      	ldr	r3, [r7, #4]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3718      	adds	r7, #24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 8007fb4:	b590      	push	{r4, r7, lr}
 8007fb6:	b08b      	sub	sp, #44	; 0x2c
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f7ff ff18 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8007fc8:	4604      	mov	r4, r0
 8007fca:	68b8      	ldr	r0, [r7, #8]
 8007fcc:	f7ff ff14 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	429c      	cmp	r4, r3
 8007fd4:	bf8c      	ite	hi
 8007fd6:	2301      	movhi	r3, #1
 8007fd8:	2300      	movls	r3, #0
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d006      	beq.n	8007fee <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 8007fe0:	79fb      	ldrb	r3, [r7, #7]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	68f9      	ldr	r1, [r7, #12]
 8007fe6:	68b8      	ldr	r0, [r7, #8]
 8007fe8:	f7ff ffe4 	bl	8007fb4 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 8007fec:	e02b      	b.n	8008046 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 8007fee:	79fb      	ldrb	r3, [r7, #7]
 8007ff0:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 8007ff6:	68b8      	ldr	r0, [r7, #8]
 8007ff8:	f7ff fefe 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f7ff fefa 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8008004:	4603      	mov	r3, r0
 8008006:	1ae2      	subs	r2, r4, r3
 8008008:	f107 0114 	add.w	r1, r7, #20
 800800c:	f107 0320 	add.w	r3, r7, #32
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff fb75 	bl	8007700 <_ZN12SimpleStringC1EPKcj>
 8008016:	f107 0318 	add.w	r3, r7, #24
 800801a:	f107 0120 	add.w	r1, r7, #32
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff ff6c 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8008026:	f107 0318 	add.w	r3, r7, #24
 800802a:	4619      	mov	r1, r3
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f7ff fbb8 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8008032:	f107 0318 	add.w	r3, r7, #24
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff feff 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800803c:	f107 0320 	add.w	r3, r7, #32
 8008040:	4618      	mov	r0, r3
 8008042:	f7ff fefa 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 8008046:	372c      	adds	r7, #44	; 0x2c
 8008048:	46bd      	mov	sp, r7
 800804a:	bd90      	pop	{r4, r7, pc}

0800804c <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
 8008058:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800805a:	68b8      	ldr	r0, [r7, #8]
 800805c:	f7ff fecc 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8008060:	4603      	mov	r3, r0
 8008062:	3b01      	subs	r3, #1
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	429a      	cmp	r2, r3
 8008068:	bf8c      	ite	hi
 800806a:	2301      	movhi	r3, #1
 800806c:	2300      	movls	r3, #0
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b00      	cmp	r3, #0
 8008072:	d004      	beq.n	800807e <_ZNK12SimpleString9subStringEjj+0x32>
 8008074:	4919      	ldr	r1, [pc, #100]	; (80080dc <_ZNK12SimpleString9subStringEjj+0x90>)
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff fb27 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800807c:	e029      	b.n	80080d2 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800807e:	68b8      	ldr	r0, [r7, #8]
 8008080:	f7ff fb17 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8008084:	4602      	mov	r2, r0
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	441a      	add	r2, r3
 800808a:	f107 0310 	add.w	r3, r7, #16
 800808e:	4611      	mov	r1, r2
 8008090:	4618      	mov	r0, r3
 8008092:	f7ff fb1a 	bl	80076ca <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 8008096:	f107 0310 	add.w	r3, r7, #16
 800809a:	4618      	mov	r0, r3
 800809c:	f7ff feac 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 80080a0:	4602      	mov	r2, r0
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	4293      	cmp	r3, r2
 80080a6:	bf34      	ite	cc
 80080a8:	2301      	movcc	r3, #1
 80080aa:	2300      	movcs	r3, #0
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d004      	beq.n	80080bc <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	4413      	add	r3, r2
 80080b8:	2200      	movs	r2, #0
 80080ba:	701a      	strb	r2, [r3, #0]

    return newString;
 80080bc:	f107 0310 	add.w	r3, r7, #16
 80080c0:	4619      	mov	r1, r3
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f7ff fb55 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 80080c8:	f107 0310 	add.w	r3, r7, #16
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff feb4 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	080161e8 	.word	0x080161e8

080080e0 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f04f 33ff 	mov.w	r3, #4294967295
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	68b9      	ldr	r1, [r7, #8]
 80080f6:	f7ff ffa9 	bl	800804c <_ZNK12SimpleString9subStringEjj>
}
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff fad0 	bl	80076b2 <_ZNK12SimpleString9getBufferEv>
 8008112:	4602      	mov	r2, r0
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	4413      	add	r3, r2
 8008118:	781b      	ldrb	r3, [r3, #0]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b082      	sub	sp, #8
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800812e:	78fb      	ldrb	r3, [r7, #3]
 8008130:	461a      	mov	r2, r3
 8008132:	2100      	movs	r1, #0
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f805 	bl	8008144 <_ZNK12SimpleString8findFromEjc>
 800813a:	4603      	mov	r3, r0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f7ff fe50 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8008158:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	617b      	str	r3, [r7, #20]
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	429a      	cmp	r2, r3
 8008164:	d213      	bcs.n	800818e <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 8008166:	6979      	ldr	r1, [r7, #20]
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff ffca 	bl	8008102 <_ZNK12SimpleString2atEj>
 800816e:	4603      	mov	r3, r0
 8008170:	461a      	mov	r2, r3
 8008172:	79fb      	ldrb	r3, [r7, #7]
 8008174:	4293      	cmp	r3, r2
 8008176:	bf0c      	ite	eq
 8008178:	2301      	moveq	r3, #1
 800817a:	2300      	movne	r3, #0
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <_ZNK12SimpleString8findFromEjc+0x42>
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	e005      	b.n	8008192 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	3301      	adds	r3, #1
 800818a:	617b      	str	r3, [r7, #20]
 800818c:	e7e7      	b.n	800815e <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800818e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	4611      	mov	r1, r2
 80081a8:	461a      	mov	r2, r3
 80081aa:	460b      	mov	r3, r1
 80081ac:	71fb      	strb	r3, [r7, #7]
 80081ae:	4613      	mov	r3, r2
 80081b0:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	4619      	mov	r1, r3
 80081b6:	68b8      	ldr	r0, [r7, #8]
 80081b8:	f7ff ffb3 	bl	8008122 <_ZNK12SimpleString4findEc>
 80081bc:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c4:	d104      	bne.n	80081d0 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 80081c6:	4911      	ldr	r1, [pc, #68]	; (800820c <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f7ff fa7e 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 80081ce:	e019      	b.n	8008204 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 80081d0:	79bb      	ldrb	r3, [r7, #6]
 80081d2:	461a      	mov	r2, r3
 80081d4:	6979      	ldr	r1, [r7, #20]
 80081d6:	68b8      	ldr	r0, [r7, #8]
 80081d8:	f7ff ffb4 	bl	8008144 <_ZNK12SimpleString8findFromEjc>
 80081dc:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e4:	d106      	bne.n	80081f4 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	68b9      	ldr	r1, [r7, #8]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff ff77 	bl	80080e0 <_ZNK12SimpleString9subStringEj>
 80081f2:	e007      	b.n	8008204 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	68b9      	ldr	r1, [r7, #8]
 8008200:	f7ff ff24 	bl	800804c <_ZNK12SimpleString9subStringEjj>
}
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	080161e8 	.word	0x080161e8

08008210 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800821a:	f240 2275 	movw	r2, #629	; 0x275
 800821e:	490a      	ldr	r1, [pc, #40]	; (8008248 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 8008220:	6838      	ldr	r0, [r7, #0]
 8008222:	f7fe ffd7 	bl	80071d4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8008226:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	6879      	ldr	r1, [r7, #4]
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f7ff f8f6 	bl	800741e <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	3b01      	subs	r3, #1
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	4413      	add	r3, r2
 800823a:	2200      	movs	r2, #0
 800823c:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800823e:	68fb      	ldr	r3, [r7, #12]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	08016128 	.word	0x08016128

0800824c <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	4603      	mov	r3, r0
 8008254:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 8008256:	79fb      	ldrb	r3, [r7, #7]
 8008258:	2b2f      	cmp	r3, #47	; 0x2f
 800825a:	d904      	bls.n	8008266 <_ZN12SimpleString7isDigitEc+0x1a>
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	2b39      	cmp	r3, #57	; 0x39
 8008260:	d801      	bhi.n	8008266 <_ZN12SimpleString7isDigitEc+0x1a>
 8008262:	2301      	movs	r3, #1
 8008264:	e000      	b.n	8008268 <_ZN12SimpleString7isDigitEc+0x1c>
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	4603      	mov	r3, r0
 800827c:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800827e:	79fb      	ldrb	r3, [r7, #7]
 8008280:	2b20      	cmp	r3, #32
 8008282:	d005      	beq.n	8008290 <_ZN12SimpleString7isSpaceEc+0x1c>
 8008284:	79fb      	ldrb	r3, [r7, #7]
 8008286:	2b08      	cmp	r3, #8
 8008288:	d904      	bls.n	8008294 <_ZN12SimpleString7isSpaceEc+0x20>
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	2b0d      	cmp	r3, #13
 800828e:	d801      	bhi.n	8008294 <_ZN12SimpleString7isSpaceEc+0x20>
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <_ZN12SimpleString7isSpaceEc+0x22>
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	4603      	mov	r3, r0
 80082aa:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	2b40      	cmp	r3, #64	; 0x40
 80082b0:	d904      	bls.n	80082bc <_ZN12SimpleString7isUpperEc+0x1a>
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	2b5a      	cmp	r3, #90	; 0x5a
 80082b6:	d801      	bhi.n	80082bc <_ZN12SimpleString7isUpperEc+0x1a>
 80082b8:	2301      	movs	r3, #1
 80082ba:	e000      	b.n	80082be <_ZN12SimpleString7isUpperEc+0x1c>
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	4603      	mov	r3, r0
 80082d2:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 80082d4:	79fb      	ldrb	r3, [r7, #7]
 80082d6:	2b1f      	cmp	r3, #31
 80082d8:	d902      	bls.n	80082e0 <_ZN12SimpleString9isControlEc+0x16>
 80082da:	79fb      	ldrb	r3, [r7, #7]
 80082dc:	2b7f      	cmp	r3, #127	; 0x7f
 80082de:	d101      	bne.n	80082e4 <_ZN12SimpleString9isControlEc+0x1a>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e000      	b.n	80082e6 <_ZN12SimpleString9isControlEc+0x1c>
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	4603      	mov	r3, r0
 80082fa:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 80082fc:	79fb      	ldrb	r3, [r7, #7]
 80082fe:	2b06      	cmp	r3, #6
 8008300:	d904      	bls.n	800830c <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	2b0d      	cmp	r3, #13
 8008306:	d801      	bhi.n	800830c <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 8008308:	2301      	movs	r3, #1
 800830a:	e000      	b.n	800830e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <_Z10StringFromPKc>:
{
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
}

SimpleString StringFrom(const char *value)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7ff f9cf 	bl	80076ca <_ZN12SimpleStringC1EPKc>
}
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 8008334:	b590      	push	{r4, r7, lr}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800833e:	2400      	movs	r4, #0
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00e      	beq.n	8008364 <_Z25PrintableStringFromOrNullPKc+0x30>
 8008346:	f107 0308 	add.w	r3, r7, #8
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	4618      	mov	r0, r3
 800834e:	f7ff ffe4 	bl	800831a <_Z10StringFromPKc>
 8008352:	2401      	movs	r4, #1
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f107 0208 	add.w	r2, r7, #8
 800835a:	4611      	mov	r1, r2
 800835c:	4618      	mov	r0, r3
 800835e:	f7ff fc5d 	bl	8007c1c <_ZNK12SimpleString9printableEv>
 8008362:	e004      	b.n	800836e <_Z25PrintableStringFromOrNullPKc+0x3a>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4908      	ldr	r1, [pc, #32]	; (8008388 <_Z25PrintableStringFromOrNullPKc+0x54>)
 8008368:	4618      	mov	r0, r3
 800836a:	f7ff ffd6 	bl	800831a <_Z10StringFromPKc>
 800836e:	2c00      	cmp	r4, #0
 8008370:	d004      	beq.n	800837c <_Z25PrintableStringFromOrNullPKc+0x48>
 8008372:	f107 0308 	add.w	r3, r7, #8
 8008376:	4618      	mov	r0, r3
 8008378:	f7ff fd5f 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800837c:	bf00      	nop
}
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	bd90      	pop	{r4, r7, pc}
 8008386:	bf00      	nop
 8008388:	08016208 	.word	0x08016208

0800838c <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	4904      	ldr	r1, [pc, #16]	; (80083ac <_Z10StringFromi+0x20>)
 800839c:	4618      	mov	r0, r3
 800839e:	f000 f9d9 	bl	8008754 <_Z16StringFromFormatPKcz>
}
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	08016210 	.word	0x08016210

080083b0 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	4904      	ldr	r1, [pc, #16]	; (80083d0 <_Z10StringFroml+0x20>)
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 f9c7 	bl	8008754 <_Z16StringFromFormatPKcz>
}
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	08016214 	.word	0x08016214

080083d4 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 80083de:	f107 0308 	add.w	r3, r7, #8
 80083e2:	4910      	ldr	r1, [pc, #64]	; (8008424 <_Z10StringFromPKv+0x50>)
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff f970 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 80083ea:	f107 0310 	add.w	r3, r7, #16
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	4618      	mov	r0, r3
 80083f2:	f000 f945 	bl	8008680 <_Z13HexStringFromPKv>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f107 0210 	add.w	r2, r7, #16
 80083fc:	f107 0108 	add.w	r1, r7, #8
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff fd7c 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8008406:	f107 0310 	add.w	r3, r7, #16
 800840a:	4618      	mov	r0, r3
 800840c:	f7ff fd15 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8008410:	f107 0308 	add.w	r3, r7, #8
 8008414:	4618      	mov	r0, r3
 8008416:	f7ff fd10 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800841a:	bf00      	nop
}
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	08016218 	.word	0x08016218

08008428 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 8008432:	f107 0308 	add.w	r3, r7, #8
 8008436:	4910      	ldr	r1, [pc, #64]	; (8008478 <_Z10StringFromPFvvE+0x50>)
 8008438:	4618      	mov	r0, r3
 800843a:	f7ff f946 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800843e:	f107 0310 	add.w	r3, r7, #16
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	4618      	mov	r0, r3
 8008446:	f000 f92f 	bl	80086a8 <_Z13HexStringFromPFvvE>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f107 0210 	add.w	r2, r7, #16
 8008450:	f107 0108 	add.w	r1, r7, #8
 8008454:	4618      	mov	r0, r3
 8008456:	f7ff fd52 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 800845a:	f107 0310 	add.w	r3, r7, #16
 800845e:	4618      	mov	r0, r3
 8008460:	f7ff fceb 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8008464:	f107 0308 	add.w	r3, r7, #8
 8008468:	4618      	mov	r0, r3
 800846a:	f7ff fce6 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800846e:	bf00      	nop
}
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	08016218 	.word	0x08016218

0800847c <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	4904      	ldr	r1, [pc, #16]	; (800849c <_Z13HexStringFroml+0x20>)
 800848c:	4618      	mov	r0, r3
 800848e:	f000 f961 	bl	8008754 <_Z16StringFromFormatPKcz>
}
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	0801621c 	.word	0x0801621c

080084a0 <_Z13HexStringFroma>:
{
    return StringFromFormat("%x", value);
}

SimpleString HexStringFrom(signed char value)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 80084ac:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4912      	ldr	r1, [pc, #72]	; (80084fc <_Z13HexStringFroma+0x5c>)
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 f94d 	bl	8008754 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 80084ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	da16      	bge.n	80084f0 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7ff fc98 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 80084c8:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	1e9a      	subs	r2, r3, #2
 80084ce:	f107 030c 	add.w	r3, r7, #12
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7ff fe03 	bl	80080e0 <_ZNK12SimpleString9subStringEj>
 80084da:	f107 030c 	add.w	r3, r7, #12
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff f95e 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 80084e6:	f107 030c 	add.w	r3, r7, #12
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7ff fca5 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    }
    return result;
 80084f0:	bf00      	nop
}
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	08016220 	.word	0x08016220

08008500 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	4904      	ldr	r1, [pc, #16]	; (8008520 <_Z13HexStringFromm+0x20>)
 8008510:	4618      	mov	r0, r3
 8008512:	f000 f91f 	bl	8008754 <_Z16StringFromFormatPKcz>
}
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	0801621c 	.word	0x0801621c

08008524 <_Z30BracketsFormattedHexStringFroml>:
{
    return BracketsFormattedHexString(HexStringFrom(value));
}

SimpleString BracketsFormattedHexStringFrom(long value)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800852e:	f107 0308 	add.w	r3, r7, #8
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	4618      	mov	r0, r3
 8008536:	f7ff ffa1 	bl	800847c <_Z13HexStringFroml>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f107 0208 	add.w	r2, r7, #8
 8008540:	4611      	mov	r1, r2
 8008542:	4618      	mov	r0, r3
 8008544:	f000 f846 	bl	80085d4 <_Z26BracketsFormattedHexString12SimpleString>
 8008548:	f107 0308 	add.w	r3, r7, #8
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff fc74 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8008552:	bf00      	nop
}
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 8008566:	f107 0308 	add.w	r3, r7, #8
 800856a:	6839      	ldr	r1, [r7, #0]
 800856c:	4618      	mov	r0, r3
 800856e:	f7ff ffc7 	bl	8008500 <_Z13HexStringFromm>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f107 0208 	add.w	r2, r7, #8
 8008578:	4611      	mov	r1, r2
 800857a:	4618      	mov	r0, r3
 800857c:	f000 f82a 	bl	80085d4 <_Z26BracketsFormattedHexString12SimpleString>
 8008580:	f107 0308 	add.w	r3, r7, #8
 8008584:	4618      	mov	r0, r3
 8008586:	f7ff fc58 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800858a:	bf00      	nop
}
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	460b      	mov	r3, r1
 800859e:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 80085a0:	f107 0308 	add.w	r3, r7, #8
 80085a4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80085a8:	4611      	mov	r1, r2
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff ff78 	bl	80084a0 <_Z13HexStringFroma>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f107 0208 	add.w	r2, r7, #8
 80085b6:	4611      	mov	r1, r2
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f80b 	bl	80085d4 <_Z26BracketsFormattedHexString12SimpleString>
 80085be:	f107 0308 	add.w	r3, r7, #8
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7ff fc39 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 80085c8:	bf00      	nop
}
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
	...

080085d4 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 80085de:	f107 0310 	add.w	r3, r7, #16
 80085e2:	4917      	ldr	r1, [pc, #92]	; (8008640 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7ff f870 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 80085ea:	f107 0308 	add.w	r3, r7, #8
 80085ee:	f107 0110 	add.w	r1, r7, #16
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7ff fc82 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 80085fa:	f107 0318 	add.w	r3, r7, #24
 80085fe:	4911      	ldr	r1, [pc, #68]	; (8008644 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff f862 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f107 0218 	add.w	r2, r7, #24
 800860c:	f107 0108 	add.w	r1, r7, #8
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff fc74 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8008616:	f107 0318 	add.w	r3, r7, #24
 800861a:	4618      	mov	r0, r3
 800861c:	f7ff fc0d 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8008620:	f107 0308 	add.w	r3, r7, #8
 8008624:	4618      	mov	r0, r3
 8008626:	f7ff fc08 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800862a:	f107 0310 	add.w	r3, r7, #16
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff fc03 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8008634:	bf00      	nop
}
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	3720      	adds	r7, #32
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	08016224 	.word	0x08016224
 8008644:	08016228 	.word	0x08016228

08008648 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 8008650:	1d3b      	adds	r3, r7, #4
 8008652:	60fb      	str	r3, [r7, #12]
    return *long_value;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3714      	adds	r7, #20
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800866c:	1d3b      	adds	r3, r7, #4
 800866e:	60fb      	str	r3, [r7, #12]
    return *long_value;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800868a:	6838      	ldr	r0, [r7, #0]
 800868c:	f7ff ffdc 	bl	8008648 <_ZL25convertPointerToLongValuePKv>
 8008690:	4602      	mov	r2, r0
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4903      	ldr	r1, [pc, #12]	; (80086a4 <_Z13HexStringFromPKv+0x24>)
 8008696:	4618      	mov	r0, r3
 8008698:	f000 f85c 	bl	8008754 <_Z16StringFromFormatPKcz>
}
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	0801621c 	.word	0x0801621c

080086a8 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 80086b2:	6838      	ldr	r0, [r7, #0]
 80086b4:	f7ff ffd6 	bl	8008664 <_ZL33convertFunctionPointerToLongValuePFvvE>
 80086b8:	4602      	mov	r2, r0
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4903      	ldr	r1, [pc, #12]	; (80086cc <_Z13HexStringFromPFvvE+0x24>)
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 f848 	bl	8008754 <_Z16StringFromFormatPKcz>
}
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	0801621c 	.word	0x0801621c

080086d0 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af02      	add	r7, sp, #8
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	ed87 0b00 	vstr	d0, [r7]
 80086dc:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 80086de:	4b18      	ldr	r3, [pc, #96]	; (8008740 <_Z10StringFromdi+0x70>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	ed97 0b00 	vldr	d0, [r7]
 80086e6:	4798      	blx	r3
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	bf14      	ite	ne
 80086ee:	2301      	movne	r3, #1
 80086f0:	2300      	moveq	r3, #0
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d004      	beq.n	8008702 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 80086f8:	4912      	ldr	r1, [pc, #72]	; (8008744 <_Z10StringFromdi+0x74>)
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f7fe ffe5 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8008700:	e01a      	b.n	8008738 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 8008702:	4b11      	ldr	r3, [pc, #68]	; (8008748 <_Z10StringFromdi+0x78>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	ed97 0b00 	vldr	d0, [r7]
 800870a:	4798      	blx	r3
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	bf14      	ite	ne
 8008712:	2301      	movne	r3, #1
 8008714:	2300      	moveq	r3, #0
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b00      	cmp	r3, #0
 800871a:	d004      	beq.n	8008726 <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800871c:	490b      	ldr	r1, [pc, #44]	; (800874c <_Z10StringFromdi+0x7c>)
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f7fe ffd3 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8008724:	e008      	b.n	8008738 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800872c:	e9cd 2300 	strd	r2, r3, [sp]
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	4907      	ldr	r1, [pc, #28]	; (8008750 <_Z10StringFromdi+0x80>)
 8008734:	f000 f80e 	bl	8008754 <_Z16StringFromFormatPKcz>
}
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	200000e0 	.word	0x200000e0
 8008744:	0801625c 	.word	0x0801625c
 8008748:	200000e4 	.word	0x200000e4
 800874c:	08016270 	.word	0x08016270
 8008750:	08016280 	.word	0x08016280

08008754 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 8008754:	b40e      	push	{r1, r2, r3}
 8008756:	b580      	push	{r7, lr}
 8008758:	b087      	sub	sp, #28
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800875e:	4910      	ldr	r1, [pc, #64]	; (80087a0 <_Z16StringFromFormatPKcz+0x4c>)
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7fe ffb2 	bl	80076ca <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 8008766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800876a:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800876c:	f107 0310 	add.w	r3, r7, #16
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008774:	4618      	mov	r0, r3
 8008776:	f000 f839 	bl	80087ec <_Z17VStringFromFormatPKcSt9__va_list>
 800877a:	f107 0310 	add.w	r3, r7, #16
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7ff f80e 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8008786:	f107 0310 	add.w	r3, r7, #16
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff fb55 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 8008790:	bf00      	nop
}
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	371c      	adds	r7, #28
 8008796:	46bd      	mov	sp, r7
 8008798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800879c:	b003      	add	sp, #12
 800879e:	4770      	bx	lr
 80087a0:	080161e8 	.word	0x080161e8

080087a4 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	4904      	ldr	r1, [pc, #16]	; (80087c4 <_Z10StringFromj+0x20>)
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7ff ffcd 	bl	8008754 <_Z16StringFromFormatPKcz>
}
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	0801628c 	.word	0x0801628c

080087c8 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	683a      	ldr	r2, [r7, #0]
 80087d6:	4904      	ldr	r1, [pc, #16]	; (80087e8 <_Z10StringFromm+0x20>)
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff ffbb 	bl	8008754 <_Z16StringFromFormatPKcz>
}
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	08016290 	.word	0x08016290

080087ec <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 80087ec:	b590      	push	{r4, r7, lr}
 80087ee:	b0a7      	sub	sp, #156	; 0x9c
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 80087fc:	492e      	ldr	r1, [pc, #184]	; (80088b8 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f7fe ff63 	bl	80076ca <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 8008804:	4b2d      	ldr	r3, [pc, #180]	; (80088bc <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 8008806:	681c      	ldr	r4, [r3, #0]
 8008808:	f107 0014 	add.w	r0, r7, #20
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	2164      	movs	r1, #100	; 0x64
 8008812:	47a0      	blx	r4
 8008814:	4603      	mov	r3, r0
 8008816:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800881a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800881e:	2b63      	cmp	r3, #99	; 0x63
 8008820:	d813      	bhi.n	800884a <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 8008822:	f107 0214 	add.w	r2, r7, #20
 8008826:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800882a:	4611      	mov	r1, r2
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe ff4c 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8008832:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008836:	4619      	mov	r1, r3
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f7fe ffb2 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 800883e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff faf9 	bl	8007e3a <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 8008848:	e031      	b.n	80088ae <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800884a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800884e:	3301      	adds	r3, #1
 8008850:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 8008854:	f240 32c3 	movw	r2, #963	; 0x3c3
 8008858:	4919      	ldr	r1, [pc, #100]	; (80088c0 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800885a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800885e:	f7fe fcb9 	bl	80071d4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8008862:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 8008866:	4b15      	ldr	r3, [pc, #84]	; (80088bc <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 8008868:	681c      	ldr	r4, [r3, #0]
 800886a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008872:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8008876:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 8008878:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800887c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008880:	4618      	mov	r0, r3
 8008882:	f7fe ff22 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8008886:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800888a:	4619      	mov	r1, r3
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7fe ff88 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8008892:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff facf 	bl	8007e3a <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800889c:	f240 33c7 	movw	r3, #967	; 0x3c7
 80088a0:	4a07      	ldr	r2, [pc, #28]	; (80088c0 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 80088a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088a6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80088aa:	f7fe fca7 	bl	80071fc <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 80088ae:	bf00      	nop
}
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	379c      	adds	r7, #156	; 0x9c
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd90      	pop	{r4, r7, pc}
 80088b8:	080161e8 	.word	0x080161e8
 80088bc:	200000ac 	.word	0x200000ac
 80088c0:	08016128 	.word	0x08016128

080088c4 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08a      	sub	sp, #40	; 0x28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
    SimpleString result;
 80088d0:	491f      	ldr	r1, [pc, #124]	; (8008950 <_Z16StringFromBinaryPKhj+0x8c>)
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f7fe fef9 	bl	80076ca <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 80088d8:	2300      	movs	r3, #0
 80088da:	627b      	str	r3, [r7, #36]	; 0x24
 80088dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d219      	bcs.n	8008918 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	4413      	add	r3, r2
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
 80088ee:	f107 0314 	add.w	r3, r7, #20
 80088f2:	4918      	ldr	r1, [pc, #96]	; (8008954 <_Z16StringFromBinaryPKhj+0x90>)
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7ff ff2d 	bl	8008754 <_Z16StringFromFormatPKcz>
 80088fa:	f107 0314 	add.w	r3, r7, #20
 80088fe:	4619      	mov	r1, r3
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f7ff fb17 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 8008906:	f107 0314 	add.w	r3, r7, #20
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff fa95 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	3301      	adds	r3, #1
 8008914:	627b      	str	r3, [r7, #36]	; 0x24
 8008916:	e7e1      	b.n	80088dc <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f7ff fa6d 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 800891e:	4603      	mov	r3, r0
 8008920:	3b01      	subs	r3, #1
 8008922:	f107 001c 	add.w	r0, r7, #28
 8008926:	2200      	movs	r2, #0
 8008928:	68f9      	ldr	r1, [r7, #12]
 800892a:	f7ff fb8f 	bl	800804c <_ZNK12SimpleString9subStringEjj>
 800892e:	f107 031c 	add.w	r3, r7, #28
 8008932:	4619      	mov	r1, r3
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f7fe ff34 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 800893a:	f107 031c 	add.w	r3, r7, #28
 800893e:	4618      	mov	r0, r3
 8008940:	f7ff fa7b 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    return result;
 8008944:	bf00      	nop
}
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	3728      	adds	r7, #40	; 0x28
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	080161e8 	.word	0x080161e8
 8008954:	08016294 	.word	0x08016294

08008958 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d006      	beq.n	8008978 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	68b9      	ldr	r1, [r7, #8]
 8008970:	4618      	mov	r0, r3
 8008972:	f7ff ffa7 	bl	80088c4 <_Z16StringFromBinaryPKhj>
 8008976:	e004      	b.n	8008982 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4904      	ldr	r1, [pc, #16]	; (800898c <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800897c:	4618      	mov	r0, r3
 800897e:	f7ff fccc 	bl	800831a <_Z10StringFromPKc>
}
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	08016208 	.word	0x08016208

08008990 <_Z20StringFromMaskedBitsmmj>:
{
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
}

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800899e:	4925      	ldr	r1, [pc, #148]	; (8008a34 <_Z20StringFromMaskedBitsmmj+0xa4>)
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f7fe fe92 	bl	80076ca <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	d802      	bhi.n	80089b2 <_Z20StringFromMaskedBitsmmj+0x22>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	e000      	b.n	80089b4 <_Z20StringFromMaskedBitsmmj+0x24>
 80089b2:	2320      	movs	r3, #32
 80089b4:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	3b01      	subs	r3, #1
 80089ba:	2201      	movs	r2, #1
 80089bc:	fa02 f303 	lsl.w	r3, r2, r3
 80089c0:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 80089c2:	2300      	movs	r3, #0
 80089c4:	61fb      	str	r3, [r7, #28]
 80089c6:	69fa      	ldr	r2, [r7, #28]
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d22d      	bcs.n	8008a2a <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	4013      	ands	r3, r2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00c      	beq.n	80089f2 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	4013      	ands	r3, r2
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <_Z20StringFromMaskedBitsmmj+0x56>
 80089e2:	4b15      	ldr	r3, [pc, #84]	; (8008a38 <_Z20StringFromMaskedBitsmmj+0xa8>)
 80089e4:	e000      	b.n	80089e8 <_Z20StringFromMaskedBitsmmj+0x58>
 80089e6:	4b15      	ldr	r3, [pc, #84]	; (8008a3c <_Z20StringFromMaskedBitsmmj+0xac>)
 80089e8:	4619      	mov	r1, r3
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f7ff fab4 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
 80089f0:	e003      	b.n	80089fa <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 80089f2:	4913      	ldr	r1, [pc, #76]	; (8008a40 <_Z20StringFromMaskedBitsmmj+0xb0>)
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f7ff faaf 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	f003 0307 	and.w	r3, r3, #7
 8008a00:	2b07      	cmp	r3, #7
 8008a02:	d108      	bne.n	8008a16 <_Z20StringFromMaskedBitsmmj+0x86>
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	69fa      	ldr	r2, [r7, #28]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d003      	beq.n	8008a16 <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 8008a0e:	490d      	ldr	r1, [pc, #52]	; (8008a44 <_Z20StringFromMaskedBitsmmj+0xb4>)
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f7ff faa1 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	005b      	lsls	r3, r3, #1
 8008a20:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	3301      	adds	r3, #1
 8008a26:	61fb      	str	r3, [r7, #28]
 8008a28:	e7cd      	b.n	80089c6 <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 8008a2a:	bf00      	nop
}
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	3720      	adds	r7, #32
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	080161e8 	.word	0x080161e8
 8008a38:	080162c0 	.word	0x080162c0
 8008a3c:	080162c4 	.word	0x080162c4
 8008a40:	080162c8 	.word	0x080162c8
 8008a44:	080162cc 	.word	0x080162cc

08008a48 <_ZN22SimpleStringCollectionC1Ev>:
    }

    return StringFromFormat("%u%s", number, suffix);
}

SimpleStringCollection::SimpleStringCollection()
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	3304      	adds	r3, #4
 8008a54:	4907      	ldr	r1, [pc, #28]	; (8008a74 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe fe37 	bl	80076ca <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]
    size_ = 0;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	60da      	str	r2, [r3, #12]
}
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	080161e8 	.word	0x080161e8

08008a78 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 8008a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d01e      	beq.n	8008ac8 <_ZN22SimpleStringCollection8allocateEj+0x50>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3b04      	subs	r3, #4
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	00db      	lsls	r3, r3, #3
 8008a98:	18d4      	adds	r4, r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	429c      	cmp	r4, r3
 8008aa0:	d004      	beq.n	8008aac <_ZN22SimpleStringCollection8allocateEj+0x34>
 8008aa2:	3c08      	subs	r4, #8
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f7ff f9c8 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8008aaa:	e7f6      	b.n	8008a9a <_ZN22SimpleStringCollection8allocateEj+0x22>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f1a3 0208 	sub.w	r2, r3, #8
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3b04      	subs	r3, #4
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	3301      	adds	r3, #1
 8008abe:	00db      	lsls	r3, r3, #3
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4610      	mov	r0, r2
 8008ac4:	f7fd ff5e 	bl	8006984 <_ZdaPvj>

    size_ = _size;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68dc      	ldr	r4, [r3, #12]
 8008ad2:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8008ad6:	d202      	bcs.n	8008ade <_ZN22SimpleStringCollection8allocateEj+0x66>
 8008ad8:	1c63      	adds	r3, r4, #1
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	e001      	b.n	8008ae2 <_ZN22SimpleStringCollection8allocateEj+0x6a>
 8008ade:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae2:	f240 4227 	movw	r2, #1063	; 0x427
 8008ae6:	4910      	ldr	r1, [pc, #64]	; (8008b28 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fd ff29 	bl	8006940 <_ZnajPKci>
 8008aee:	4605      	mov	r5, r0
 8008af0:	1d2b      	adds	r3, r5, #4
 8008af2:	3b04      	subs	r3, #4
 8008af4:	2208      	movs	r2, #8
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	1d2b      	adds	r3, r5, #4
 8008afa:	601c      	str	r4, [r3, #0]
 8008afc:	f105 0308 	add.w	r3, r5, #8
 8008b00:	1e62      	subs	r2, r4, #1
 8008b02:	4614      	mov	r4, r2
 8008b04:	461e      	mov	r6, r3
 8008b06:	2c00      	cmp	r4, #0
 8008b08:	db06      	blt.n	8008b18 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 8008b0a:	4908      	ldr	r1, [pc, #32]	; (8008b2c <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f7fe fddc 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8008b12:	3608      	adds	r6, #8
 8008b14:	3c01      	subs	r4, #1
 8008b16:	e7f6      	b.n	8008b06 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 8008b18:	f105 0208 	add.w	r2, r5, #8
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	601a      	str	r2, [r3, #0]
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b28:	08016128 	.word	0x08016128
 8008b2c:	080161e8 	.word	0x080161e8

08008b30 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 8008b30:	b590      	push	{r4, r7, lr}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d01e      	beq.n	8008b7e <_ZN22SimpleStringCollectionD1Ev+0x4e>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3b04      	subs	r3, #4
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	00db      	lsls	r3, r3, #3
 8008b4e:	18d4      	adds	r4, r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	429c      	cmp	r4, r3
 8008b56:	d004      	beq.n	8008b62 <_ZN22SimpleStringCollectionD1Ev+0x32>
 8008b58:	3c08      	subs	r4, #8
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f7ff f96d 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8008b60:	e7f6      	b.n	8008b50 <_ZN22SimpleStringCollectionD1Ev+0x20>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f1a3 0208 	sub.w	r2, r3, #8
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	3b04      	subs	r3, #4
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3301      	adds	r3, #1
 8008b74:	00db      	lsls	r3, r3, #3
 8008b76:	4619      	mov	r1, r3
 8008b78:	4610      	mov	r0, r2
 8008b7a:	f7fd ff03 	bl	8006984 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	3304      	adds	r3, #4
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff f959 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd90      	pop	{r4, r7, pc}

08008b92 <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
    return size_;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68db      	ldr	r3, [r3, #12]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
	...

08008bac <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 8008bac:	b590      	push	{r4, r7, lr}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d315      	bcc.n	8008bec <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	1d1c      	adds	r4, r3, #4
 8008bc4:	f107 0308 	add.w	r3, r7, #8
 8008bc8:	490d      	ldr	r1, [pc, #52]	; (8008c00 <_ZN22SimpleStringCollectionixEj+0x54>)
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fe fd7d 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8008bd0:	f107 0308 	add.w	r3, r7, #8
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f7fe fde3 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8008bdc:	f107 0308 	add.w	r3, r7, #8
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7ff f92a 	bl	8007e3a <_ZN12SimpleStringD1Ev>
        return empty_;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	3304      	adds	r3, #4
 8008bea:	e004      	b.n	8008bf6 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	4413      	add	r3, r2
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd90      	pop	{r4, r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	080161e8 	.word	0x080161e8

08008c04 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fc f970 	bl	8004ef4 <_ZN17ConsoleTestOutputC1Ev>
 8008c14:	4a08      	ldr	r2, [pc, #32]	; (8008c38 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	611a      	str	r2, [r3, #16]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3314      	adds	r3, #20
 8008c24:	4905      	ldr	r1, [pc, #20]	; (8008c3c <_ZN18TeamCityTestOutputC1Ev+0x38>)
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe fd4f 	bl	80076ca <_ZN12SimpleStringC1EPKc>
{
}
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	080184ec 	.word	0x080184ec
 8008c3c:	080162e8 	.word	0x080162e8

08008c40 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	4a08      	ldr	r2, [pc, #32]	; (8008c6c <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	3314      	adds	r3, #20
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff f8f1 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fc f95c 	bl	8004f18 <_ZN17ConsoleTestOutputD1Ev>
{
}
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	080184ec 	.word	0x080184ec

08008c70 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
}
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff ffe1 	bl	8008c40 <_ZN18TeamCityTestOutputD1Ev>
 8008c7e:	211c      	movs	r1, #28
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7fd fe4d 	bl	8006920 <_ZdlPvj>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	332c      	adds	r3, #44	; 0x2c
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	492b      	ldr	r1, [pc, #172]	; (8008d54 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 8008caa:	f107 0308 	add.w	r3, r7, #8
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f004 fdf7 	bl	800d8a4 <_ZNK10UtestShell7getNameEv>
 8008cb6:	f107 0308 	add.w	r3, r7, #8
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7ff f890 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f919 	bl	8008efc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8008cca:	f107 0308 	add.w	r3, r7, #8
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7ff f8b3 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    print("']\n");
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	332c      	adds	r3, #44	; 0x2c
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	491e      	ldr	r1, [pc, #120]	; (8008d58 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4798      	blx	r3
    if (!test.willRun()) {
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3318      	adds	r3, #24
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6838      	ldr	r0, [r7, #0]
 8008cee:	4798      	blx	r3
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	f083 0301 	eor.w	r3, r3, #1
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d024      	beq.n	8008d46 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	332c      	adds	r3, #44	; 0x2c
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4915      	ldr	r1, [pc, #84]	; (8008d5c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 8008d0c:	f107 0310 	add.w	r3, r7, #16
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f004 fdc6 	bl	800d8a4 <_ZNK10UtestShell7getNameEv>
 8008d18:	f107 0310 	add.w	r3, r7, #16
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7ff f85f 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8008d22:	4603      	mov	r3, r0
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f8e8 	bl	8008efc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8008d2c:	f107 0310 	add.w	r3, r7, #16
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff f882 	bl	8007e3a <_ZN12SimpleStringD1Ev>
        print("']\n");
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	332c      	adds	r3, #44	; 0x2c
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4905      	ldr	r1, [pc, #20]	; (8008d58 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 8008d42:	4610      	mov	r0, r2
 8008d44:	4798      	blx	r3
    }
    currtest_ = &test;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	683a      	ldr	r2, [r7, #0]
 8008d4a:	611a      	str	r2, [r3, #16]
}
 8008d4c:	bf00      	nop
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	080162ec 	.word	0x080162ec
 8008d58:	0801630c 	.word	0x0801630c
 8008d5c:	08016310 	.word	0x08016310

08008d60 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8008d60:	b5b0      	push	{r4, r5, r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d03b      	beq.n	8008dea <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	332c      	adds	r3, #44	; 0x2c
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	491d      	ldr	r1, [pc, #116]	; (8008df4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 8008d7e:	4610      	mov	r0, r2
 8008d80:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691a      	ldr	r2, [r3, #16]
 8008d86:	f107 0308 	add.w	r3, r7, #8
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f004 fd89 	bl	800d8a4 <_ZNK10UtestShell7getNameEv>
 8008d92:	f107 0308 	add.w	r3, r7, #8
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7ff f822 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f8ab 	bl	8008efc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8008da6:	f107 0308 	add.w	r3, r7, #8
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7ff f845 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    print("' duration='");
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	332c      	adds	r3, #44	; 0x2c
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	490f      	ldr	r1, [pc, #60]	; (8008df8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 8008dc0:	687d      	ldr	r5, [r7, #4]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3334      	adds	r3, #52	; 0x34
 8008dc8:	681c      	ldr	r4, [r3, #0]
 8008dca:	6838      	ldr	r0, [r7, #0]
 8008dcc:	f004 fa0a 	bl	800d1e4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	47a0      	blx	r4
    print("']\n");
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	332c      	adds	r3, #44	; 0x2c
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4906      	ldr	r1, [pc, #24]	; (8008dfc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 8008de4:	4610      	mov	r0, r2
 8008de6:	4798      	blx	r3
 8008de8:	e000      	b.n	8008dec <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 8008dea:	bf00      	nop
}
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bdb0      	pop	{r4, r5, r7, pc}
 8008df2:	bf00      	nop
 8008df4:	08016330 	.word	0x08016330
 8008df8:	08016350 	.word	0x08016350
 8008dfc:	0801630c 	.word	0x0801630c

08008e00 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 8008e00:	b590      	push	{r4, r7, lr}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f103 0414 	add.w	r4, r3, #20
 8008e10:	f107 0308 	add.w	r3, r7, #8
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f004 fd53 	bl	800d8c2 <_ZNK10UtestShell8getGroupEv>
 8008e1c:	f107 0308 	add.w	r3, r7, #8
 8008e20:	4619      	mov	r1, r3
 8008e22:	4620      	mov	r0, r4
 8008e24:	f7fe fcbd 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8008e28:	f107 0308 	add.w	r3, r7, #8
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7ff f804 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	332c      	adds	r3, #44	; 0x2c
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	490c      	ldr	r1, [pc, #48]	; (8008e70 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 8008e3e:	4610      	mov	r0, r2
 8008e40:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	3314      	adds	r3, #20
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fe ffca 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f853 	bl	8008efc <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	332c      	adds	r3, #44	; 0x2c
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4904      	ldr	r1, [pc, #16]	; (8008e74 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 8008e62:	4610      	mov	r0, r2
 8008e64:	4798      	blx	r3
}
 8008e66:	bf00      	nop
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd90      	pop	{r4, r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	08016360 	.word	0x08016360
 8008e74:	0801630c 	.word	0x0801630c

08008e78 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8008e78:	b590      	push	{r4, r7, lr}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f103 0414 	add.w	r4, r3, #20
 8008e88:	f107 0308 	add.w	r3, r7, #8
 8008e8c:	4918      	ldr	r1, [pc, #96]	; (8008ef0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fe fc1b 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8008e94:	f107 0308 	add.w	r3, r7, #8
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f7fe ffd9 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	461c      	mov	r4, r3
 8008ea4:	f107 0308 	add.w	r3, r7, #8
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fe ffc6 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8008eae:	2c00      	cmp	r4, #0
 8008eb0:	d11a      	bne.n	8008ee8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	332c      	adds	r3, #44	; 0x2c
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	490d      	ldr	r1, [pc, #52]	; (8008ef4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3314      	adds	r3, #20
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fe ff8a 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f813 	bl	8008efc <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	332c      	adds	r3, #44	; 0x2c
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4905      	ldr	r1, [pc, #20]	; (8008ef8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	4798      	blx	r3
 8008ee6:	e000      	b.n	8008eea <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 8008ee8:	bf00      	nop
}
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd90      	pop	{r4, r7, pc}
 8008ef0:	080162e8 	.word	0x080162e8
 8008ef4:	08016384 	.word	0x08016384
 8008ef8:	0801630c 	.word	0x0801630c

08008efc <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
    while (*s) {
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d03f      	beq.n	8008f8e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	2b27      	cmp	r3, #39	; 0x27
 8008f14:	d00b      	beq.n	8008f2e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	2b7c      	cmp	r3, #124	; 0x7c
 8008f1c:	d007      	beq.n	8008f2e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b5b      	cmp	r3, #91	; 0x5b
 8008f24:	d003      	beq.n	8008f2e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b5d      	cmp	r3, #93	; 0x5d
 8008f2c:	d107      	bne.n	8008f3e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 8008f2e:	237c      	movs	r3, #124	; 0x7c
 8008f30:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73bb      	strb	r3, [r7, #14]
 8008f3c:	e01a      	b.n	8008f74 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	2b0d      	cmp	r3, #13
 8008f44:	d106      	bne.n	8008f54 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 8008f46:	237c      	movs	r3, #124	; 0x7c
 8008f48:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 8008f4a:	2372      	movs	r3, #114	; 0x72
 8008f4c:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73bb      	strb	r3, [r7, #14]
 8008f52:	e00f      	b.n	8008f74 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	2b0a      	cmp	r3, #10
 8008f5a:	d106      	bne.n	8008f6a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 8008f5c:	237c      	movs	r3, #124	; 0x7c
 8008f5e:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 8008f60:	236e      	movs	r3, #110	; 0x6e
 8008f62:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	73bb      	strb	r3, [r7, #14]
 8008f68:	e004      	b.n	8008f74 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3328      	adds	r3, #40	; 0x28
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f107 010c 	add.w	r1, r7, #12
 8008f82:	4610      	mov	r0, r2
 8008f84:	4798      	blx	r3
        s++;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	603b      	str	r3, [r7, #0]
    while (*s) {
 8008f8c:	e7bb      	b.n	8008f06 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 8008f8e:	bf00      	nop
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
	...

08008f98 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 8008f98:	b5b0      	push	{r4, r5, r7, lr}
 8008f9a:	b08a      	sub	sp, #40	; 0x28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	332c      	adds	r3, #44	; 0x2c
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4968      	ldr	r1, [pc, #416]	; (8009150 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 8008fae:	4610      	mov	r0, r2
 8008fb0:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3310      	adds	r3, #16
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f107 0208 	add.w	r2, r7, #8
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	4798      	blx	r3
 8008fc4:	f107 0308 	add.w	r3, r7, #8
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fe ff09 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff ff92 	bl	8008efc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8008fd8:	f107 0308 	add.w	r3, r7, #8
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fe ff2c 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    print("' message='");
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	332c      	adds	r3, #44	; 0x2c
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4959      	ldr	r1, [pc, #356]	; (8009154 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 8008fee:	4610      	mov	r0, r2
 8008ff0:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 8008ff2:	6838      	ldr	r0, [r7, #0]
 8008ff4:	f000 fa15 	bl	8009422 <_ZNK11TestFailure17isOutsideTestFileEv>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d105      	bne.n	800900a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 8008ffe:	6838      	ldr	r0, [r7, #0]
 8009000:	f000 fa21 	bl	8009446 <_ZNK11TestFailure18isInHelperFunctionEv>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800900a:	2301      	movs	r3, #1
 800900c:	e000      	b.n	8009010 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800900e:	2300      	movs	r3, #0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d042      	beq.n	800909a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	332c      	adds	r3, #44	; 0x2c
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	494e      	ldr	r1, [pc, #312]	; (8009158 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 8009020:	4610      	mov	r0, r2
 8009022:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 8009024:	687d      	ldr	r5, [r7, #4]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	332c      	adds	r3, #44	; 0x2c
 800902c:	681c      	ldr	r4, [r3, #0]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	331c      	adds	r3, #28
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f107 0210 	add.w	r2, r7, #16
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	4610      	mov	r0, r2
 800903e:	4798      	blx	r3
 8009040:	f107 0310 	add.w	r3, r7, #16
 8009044:	4618      	mov	r0, r3
 8009046:	f7fe fecb 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 800904a:	4603      	mov	r3, r0
 800904c:	4619      	mov	r1, r3
 800904e:	4628      	mov	r0, r5
 8009050:	47a0      	blx	r4
 8009052:	f107 0310 	add.w	r3, r7, #16
 8009056:	4618      	mov	r0, r3
 8009058:	f7fe feef 	bl	8007e3a <_ZN12SimpleStringD1Ev>
        print(":");
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	332c      	adds	r3, #44	; 0x2c
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	493d      	ldr	r1, [pc, #244]	; (800915c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 8009068:	4610      	mov	r0, r2
 800906a:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800906c:	687d      	ldr	r5, [r7, #4]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3334      	adds	r3, #52	; 0x34
 8009074:	681c      	ldr	r4, [r3, #0]
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3320      	adds	r3, #32
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6838      	ldr	r0, [r7, #0]
 8009080:	4798      	blx	r3
 8009082:	4603      	mov	r3, r0
 8009084:	4619      	mov	r1, r3
 8009086:	4628      	mov	r0, r5
 8009088:	47a0      	blx	r4
        print("): ");
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	332c      	adds	r3, #44	; 0x2c
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4932      	ldr	r1, [pc, #200]	; (8009160 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 8009096:	4610      	mov	r0, r2
 8009098:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3308      	adds	r3, #8
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f107 0218 	add.w	r2, r7, #24
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	4610      	mov	r0, r2
 80090aa:	4798      	blx	r3
 80090ac:	f107 0318 	add.w	r3, r7, #24
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fe fe95 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 80090b6:	4603      	mov	r3, r0
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7ff ff1e 	bl	8008efc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80090c0:	f107 0318 	add.w	r3, r7, #24
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fe feb8 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    print(":");
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	332c      	adds	r3, #44	; 0x2c
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4921      	ldr	r1, [pc, #132]	; (800915c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 80090d6:	4610      	mov	r0, r2
 80090d8:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 80090da:	687d      	ldr	r5, [r7, #4]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3334      	adds	r3, #52	; 0x34
 80090e2:	681c      	ldr	r4, [r3, #0]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3314      	adds	r3, #20
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6838      	ldr	r0, [r7, #0]
 80090ee:	4798      	blx	r3
 80090f0:	4603      	mov	r3, r0
 80090f2:	4619      	mov	r1, r3
 80090f4:	4628      	mov	r0, r5
 80090f6:	47a0      	blx	r4

    print("' details='");
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	332c      	adds	r3, #44	; 0x2c
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4918      	ldr	r1, [pc, #96]	; (8009164 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 8009104:	4610      	mov	r0, r2
 8009106:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3318      	adds	r3, #24
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f107 0220 	add.w	r2, r7, #32
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	4610      	mov	r0, r2
 8009118:	4798      	blx	r3
 800911a:	f107 0320 	add.w	r3, r7, #32
 800911e:	4618      	mov	r0, r3
 8009120:	f7fe fe5e 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8009124:	4603      	mov	r3, r0
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7ff fee7 	bl	8008efc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800912e:	f107 0320 	add.w	r3, r7, #32
 8009132:	4618      	mov	r0, r3
 8009134:	f7fe fe81 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    print("']\n");
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	332c      	adds	r3, #44	; 0x2c
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4909      	ldr	r1, [pc, #36]	; (8009168 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 8009144:	4610      	mov	r0, r2
 8009146:	4798      	blx	r3
}
 8009148:	bf00      	nop
 800914a:	3728      	adds	r7, #40	; 0x28
 800914c:	46bd      	mov	sp, r7
 800914e:	bdb0      	pop	{r4, r5, r7, pc}
 8009150:	080163a8 	.word	0x080163a8
 8009154:	080163c8 	.word	0x080163c8
 8009158:	080163d4 	.word	0x080163d4
 800915c:	080163e4 	.word	0x080163e4
 8009160:	080163e8 	.word	0x080163e8
 8009164:	080163ec 	.word	0x080163ec
 8009168:	0801630c 	.word	0x0801630c

0800916c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 8009178:	4a1a      	ldr	r2, [pc, #104]	; (80091e4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3314      	adds	r3, #20
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	3204      	adds	r2, #4
 800918a:	68b9      	ldr	r1, [r7, #8]
 800918c:	4610      	mov	r0, r2
 800918e:	4798      	blx	r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	330c      	adds	r3, #12
 8009194:	68b9      	ldr	r1, [r7, #8]
 8009196:	4618      	mov	r0, r3
 8009198:	f004 fb84 	bl	800d8a4 <_ZNK10UtestShell7getNameEv>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	3314      	adds	r3, #20
 80091a0:	68b9      	ldr	r1, [r7, #8]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f004 fc3e 	bl	800da24 <_ZNK10UtestShell7getFileEv>
 80091a8:	68b8      	ldr	r0, [r7, #8]
 80091aa:	f004 fc4a 	bl	800da42 <_ZNK10UtestShell13getLineNumberEv>
 80091ae:	4602      	mov	r2, r0
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	61da      	str	r2, [r3, #28]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	3320      	adds	r3, #32
 80091b8:	68b9      	ldr	r1, [r7, #8]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f004 fc32 	bl	800da24 <_ZNK10UtestShell7getFileEv>
 80091c0:	68b8      	ldr	r0, [r7, #8]
 80091c2:	f004 fc3e 	bl	800da42 <_ZNK10UtestShell13getLineNumberEv>
 80091c6:	4602      	mov	r2, r0
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	629a      	str	r2, [r3, #40]	; 0x28
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	332c      	adds	r3, #44	; 0x2c
 80091d0:	6879      	ldr	r1, [r7, #4]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fe facd 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
{
}
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	080187b8 	.word	0x080187b8

080091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 80091f6:	4a19      	ldr	r2, [pc, #100]	; (800925c <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3314      	adds	r3, #20
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	3204      	adds	r2, #4
 8009208:	68b9      	ldr	r1, [r7, #8]
 800920a:	4610      	mov	r0, r2
 800920c:	4798      	blx	r3
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	330c      	adds	r3, #12
 8009212:	68b9      	ldr	r1, [r7, #8]
 8009214:	4618      	mov	r0, r3
 8009216:	f004 fb45 	bl	800d8a4 <_ZNK10UtestShell7getNameEv>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	3314      	adds	r3, #20
 800921e:	6879      	ldr	r1, [r7, #4]
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe fa52 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	61da      	str	r2, [r3, #28]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3320      	adds	r3, #32
 8009230:	68b9      	ldr	r1, [r7, #8]
 8009232:	4618      	mov	r0, r3
 8009234:	f004 fbf6 	bl	800da24 <_ZNK10UtestShell7getFileEv>
 8009238:	68b8      	ldr	r0, [r7, #8]
 800923a:	f004 fc02 	bl	800da42 <_ZNK10UtestShell13getLineNumberEv>
 800923e:	4602      	mov	r2, r0
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	629a      	str	r2, [r3, #40]	; 0x28
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	332c      	adds	r3, #44	; 0x2c
 8009248:	4905      	ldr	r1, [pc, #20]	; (8009260 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe fa3d 	bl	80076ca <_ZN12SimpleStringC1EPKc>
{
}
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	080187b8 	.word	0x080187b8
 8009260:	080163f8 	.word	0x080163f8

08009264 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800926e:	4a1e      	ldr	r2, [pc, #120]	; (80092e8 <_ZN11TestFailureC1ERKS_+0x84>)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	1d1a      	adds	r2, r3, #4
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	3304      	adds	r3, #4
 800927c:	4619      	mov	r1, r3
 800927e:	4610      	mov	r0, r2
 8009280:	f7fe fa77 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f103 020c 	add.w	r2, r3, #12
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	330c      	adds	r3, #12
 800928e:	4619      	mov	r1, r3
 8009290:	4610      	mov	r0, r2
 8009292:	f7fe fa6e 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f103 0214 	add.w	r2, r3, #20
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	3314      	adds	r3, #20
 80092a0:	4619      	mov	r1, r3
 80092a2:	4610      	mov	r0, r2
 80092a4:	f7fe fa65 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	69da      	ldr	r2, [r3, #28]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	61da      	str	r2, [r3, #28]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f103 0220 	add.w	r2, r3, #32
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	3320      	adds	r3, #32
 80092ba:	4619      	mov	r1, r3
 80092bc:	4610      	mov	r0, r2
 80092be:	f7fe fa58 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	629a      	str	r2, [r3, #40]	; 0x28
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	332c      	adds	r3, #44	; 0x2c
 80092d4:	4619      	mov	r1, r3
 80092d6:	4610      	mov	r0, r2
 80092d8:	f7fe fa4b 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
{
}
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	080187b8 	.word	0x080187b8

080092ec <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	4a10      	ldr	r2, [pc, #64]	; (8009338 <_ZN11TestFailureD1Ev+0x4c>)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	332c      	adds	r3, #44	; 0x2c
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fe fd9b 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	3320      	adds	r3, #32
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe fd96 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3314      	adds	r3, #20
 8009312:	4618      	mov	r0, r3
 8009314:	f7fe fd91 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	330c      	adds	r3, #12
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe fd8c 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	3304      	adds	r3, #4
 8009326:	4618      	mov	r0, r3
 8009328:	f7fe fd87 	bl	8007e3a <_ZN12SimpleStringD1Ev>
{
}
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4618      	mov	r0, r3
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	080187b8 	.word	0x080187b8

0800933c <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
}
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff ffd1 	bl	80092ec <_ZN11TestFailureD1Ev>
 800934a:	2134      	movs	r1, #52	; 0x34
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f7fd fae7 	bl	8006920 <_ZdlPvj>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4618      	mov	r0, r3
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
    return fileName_;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	3314      	adds	r3, #20
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7fe fa00 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
}
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	6039      	str	r1, [r7, #0]
    return testFileName_;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	3320      	adds	r3, #32
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7fe f9f1 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
}
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
    return testName_;
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7fe f9e2 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
}
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b082      	sub	sp, #8
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	330c      	adds	r3, #12
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7fe f9d3 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
}
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	69db      	ldr	r3, [r3, #28]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
    return message_;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	332c      	adds	r3, #44	; 0x2c
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7fe f9ac 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
}
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b082      	sub	sp, #8
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f103 0220 	add.w	r2, r3, #32
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3314      	adds	r3, #20
 8009434:	4619      	mov	r1, r3
 8009436:	4610      	mov	r0, r2
 8009438:	f7fe fd50 	bl	8007edc <_ZneRK12SimpleStringS1_>
 800943c:	4603      	mov	r3, r0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 8009446:	b480      	push	{r7}
 8009448:	b083      	sub	sp, #12
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	69da      	ldr	r2, [r3, #28]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009456:	429a      	cmp	r2, r3
 8009458:	bf34      	ite	cc
 800945a:	2301      	movcc	r3, #1
 800945c:	2300      	movcs	r3, #0
 800945e:	b2db      	uxtb	r3, r3
}
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800946c:	b590      	push	{r4, r7, lr}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
 8009478:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7fe fcb0 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8009480:	4604      	mov	r4, r0
 8009482:	6838      	ldr	r0, [r7, #0]
 8009484:	f7fe fcac 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8009488:	4603      	mov	r3, r0
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	4622      	mov	r2, r4
 800948e:	4903      	ldr	r1, [pc, #12]	; (800949c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 8009490:	f7ff f960 	bl	8008754 <_Z16StringFromFormatPKcz>
}
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	bd90      	pop	{r4, r7, pc}
 800949c:	08016404 	.word	0x08016404

080094a0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 80094a0:	b590      	push	{r4, r7, lr}
 80094a2:	b097      	sub	sp, #92	; 0x5c
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
 80094ac:	603b      	str	r3, [r7, #0]
    SimpleString result;
 80094ae:	494c      	ldr	r1, [pc, #304]	; (80095e0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f7fe f90a 	bl	80076ca <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 80094b6:	2314      	movs	r3, #20
 80094b8:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 80094ba:	230a      	movs	r3, #10
 80094bc:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 80094be:	f107 0320 	add.w	r3, r7, #32
 80094c2:	220a      	movs	r2, #10
 80094c4:	4947      	ldr	r1, [pc, #284]	; (80095e4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fe f91a 	bl	8007700 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 80094cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094d0:	f107 0120 	add.w	r1, r7, #32
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fe fd11 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 80094dc:	f107 0318 	add.w	r3, r7, #24
 80094e0:	f107 0220 	add.w	r2, r7, #32
 80094e4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fe fd08 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 80094ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fe fca1 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 80094f8:	f107 0310 	add.w	r3, r7, #16
 80094fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80094fe:	493a      	ldr	r1, [pc, #232]	; (80095e8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff f927 	bl	8008754 <_Z16StringFromFormatPKcz>

    result += "\n";
 8009506:	4939      	ldr	r1, [pc, #228]	; (80095ec <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7fe fd25 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800950e:	f107 0310 	add.w	r3, r7, #16
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe fc64 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8009518:	4604      	mov	r4, r0
 800951a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800951e:	f107 0118 	add.w	r1, r7, #24
 8009522:	2314      	movs	r3, #20
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	f7fe fd91 	bl	800804c <_ZNK12SimpleString9subStringEjj>
 800952a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fc56 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8009534:	4603      	mov	r3, r0
 8009536:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800953a:	4622      	mov	r2, r4
 800953c:	492c      	ldr	r1, [pc, #176]	; (80095f0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800953e:	f7ff f909 	bl	8008754 <_Z16StringFromFormatPKcz>
 8009542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009546:	4619      	mov	r1, r3
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f7fe fcf3 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800954e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe fc71 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8009558:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800955c:	4618      	mov	r0, r3
 800955e:	f7fe fc6c 	bl	8007e3a <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 8009562:	f107 0310 	add.w	r3, r7, #16
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe fc46 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 800956c:	4603      	mov	r3, r0
 800956e:	f103 020a 	add.w	r2, r3, #10
 8009572:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009576:	491b      	ldr	r1, [pc, #108]	; (80095e4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 8009578:	4618      	mov	r0, r3
 800957a:	f7fe f8c1 	bl	8007700 <_ZN12SimpleStringC1EPKcj>
 800957e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009582:	4618      	mov	r0, r3
 8009584:	f7fe fc2c 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8009588:	4602      	mov	r2, r0
 800958a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800958e:	4919      	ldr	r1, [pc, #100]	; (80095f4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 8009590:	4618      	mov	r0, r3
 8009592:	f7ff f8df 	bl	8008754 <_Z16StringFromFormatPKcz>
 8009596:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800959a:	4619      	mov	r1, r3
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f7fe fcc9 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 80095a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fe fc47 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 80095ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fe fc42 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    return result;
 80095b6:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 80095b8:	f107 0310 	add.w	r3, r7, #16
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe fc3c 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 80095c2:	f107 0318 	add.w	r3, r7, #24
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fe fc37 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 80095cc:	f107 0320 	add.w	r3, r7, #32
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fe fc32 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    return result;
 80095d6:	bf00      	nop
}
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	375c      	adds	r7, #92	; 0x5c
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd90      	pop	{r4, r7, pc}
 80095e0:	08016424 	.word	0x08016424
 80095e4:	08016428 	.word	0x08016428
 80095e8:	0801642c 	.word	0x0801642c
 80095ec:	08016454 	.word	0x08016454
 80095f0:	08016458 	.word	0x08016458
 80095f4:	08016460 	.word	0x08016460

080095f8 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 80095f8:	b590      	push	{r4, r7, lr}
 80095fa:	b087      	sub	sp, #28
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 8009604:	491a      	ldr	r1, [pc, #104]	; (8009670 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f7fe f85f 	bl	80076ca <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7fe fc03 	bl	8007e18 <_ZNK12SimpleString7isEmptyEv>
 8009612:	4603      	mov	r3, r0
 8009614:	f083 0301 	eor.w	r3, r3, #1
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	d022      	beq.n	8009664 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800961e:	f107 0310 	add.w	r3, r7, #16
 8009622:	4914      	ldr	r1, [pc, #80]	; (8009674 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 8009624:	4618      	mov	r0, r3
 8009626:	f7fe f850 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800962a:	f107 0310 	add.w	r3, r7, #16
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7fe f90e 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 8009636:	4603      	mov	r3, r0
 8009638:	f083 0301 	eor.w	r3, r3, #1
 800963c:	b2dc      	uxtb	r4, r3
 800963e:	f107 0310 	add.w	r3, r7, #16
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe fbf9 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8009648:	2c00      	cmp	r4, #0
 800964a:	d003      	beq.n	8009654 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800964c:	490a      	ldr	r1, [pc, #40]	; (8009678 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f7fe fc82 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 8009654:	6879      	ldr	r1, [r7, #4]
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f7fe fc6c 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800965c:	4907      	ldr	r1, [pc, #28]	; (800967c <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f7fe fc7a 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 8009664:	bf00      	nop
}
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	371c      	adds	r7, #28
 800966a:	46bd      	mov	sp, r7
 800966c:	bd90      	pop	{r4, r7, pc}
 800966e:	bf00      	nop
 8009670:	08016424 	.word	0x08016424
 8009674:	08016468 	.word	0x08016468
 8009678:	08016474 	.word	0x08016474
 800967c:	08016480 	.word	0x08016480

08009680 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8009680:	b590      	push	{r4, r7, lr}
 8009682:	b089      	sub	sp, #36	; 0x24
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
 800968c:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	68b9      	ldr	r1, [r7, #8]
 8009696:	f7ff fda7 	bl	80091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800969a:	4a19      	ldr	r2, [pc, #100]	; (8009700 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80096a6:	68f9      	ldr	r1, [r7, #12]
 80096a8:	f107 0310 	add.w	r3, r7, #16
 80096ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff ffa2 	bl	80095f8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80096b4:	f107 0310 	add.w	r3, r7, #16
 80096b8:	4619      	mov	r1, r3
 80096ba:	4620      	mov	r0, r4
 80096bc:	f7fe f871 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 80096c0:	f107 0310 	add.w	r3, r7, #16
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fe fbb8 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80096d0:	68f9      	ldr	r1, [r7, #12]
 80096d2:	f107 0018 	add.w	r0, r7, #24
 80096d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096da:	f7ff fec7 	bl	800946c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80096de:	f107 0318 	add.w	r3, r7, #24
 80096e2:	4619      	mov	r1, r3
 80096e4:	4620      	mov	r0, r4
 80096e6:	f7fe fc25 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 80096ea:	f107 0318 	add.w	r3, r7, #24
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fba3 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	4618      	mov	r0, r3
 80096f8:	3724      	adds	r7, #36	; 0x24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd90      	pop	{r4, r7, pc}
 80096fe:	bf00      	nop
 8009700:	0801878c 	.word	0x0801878c

08009704 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 8009704:	b5b0      	push	{r4, r5, r7, lr}
 8009706:	b094      	sub	sp, #80	; 0x50
 8009708:	af00      	add	r7, sp, #0
 800970a:	6278      	str	r0, [r7, #36]	; 0x24
 800970c:	6239      	str	r1, [r7, #32]
 800970e:	61fa      	str	r2, [r7, #28]
 8009710:	61bb      	str	r3, [r7, #24]
 8009712:	ed87 0b04 	vstr	d0, [r7, #16]
 8009716:	ed87 1b02 	vstr	d1, [r7, #8]
 800971a:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800971e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	69fa      	ldr	r2, [r7, #28]
 8009724:	6a39      	ldr	r1, [r7, #32]
 8009726:	f7ff fd5f 	bl	80091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800972a:	4a4a      	ldr	r2, [pc, #296]	; (8009854 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800973c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff ff5a 	bl	80095f8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009748:	4619      	mov	r1, r3
 800974a:	4620      	mov	r0, r4
 800974c:	f7fe f829 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8009750:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009754:	4618      	mov	r0, r3
 8009756:	f7fe fb70 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009760:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8009762:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009766:	2107      	movs	r1, #7
 8009768:	ed97 0b04 	vldr	d0, [r7, #16]
 800976c:	4618      	mov	r0, r3
 800976e:	f7fe ffaf 	bl	80086d0 <_Z10StringFromdi>
 8009772:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009776:	2107      	movs	r1, #7
 8009778:	ed97 0b02 	vldr	d0, [r7, #8]
 800977c:	4618      	mov	r0, r3
 800977e:	f7fe ffa7 	bl	80086d0 <_Z10StringFromdi>
 8009782:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009786:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800978a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800978e:	4629      	mov	r1, r5
 8009790:	f7ff fe6c 	bl	800946c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009794:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009798:	4619      	mov	r1, r3
 800979a:	4620      	mov	r0, r4
 800979c:	f7fe fbca 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 80097a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7fe fb48 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 80097aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe fb43 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 80097b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fe fb3e 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 80097be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c0:	332c      	adds	r3, #44	; 0x2c
 80097c2:	4925      	ldr	r1, [pc, #148]	; (8009858 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fe fbc7 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 80097ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097cc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80097d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80097d4:	2107      	movs	r1, #7
 80097d6:	ed97 0b00 	vldr	d0, [r7]
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fe ff78 	bl	80086d0 <_Z10StringFromdi>
 80097e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80097e4:	4619      	mov	r1, r3
 80097e6:	4620      	mov	r0, r4
 80097e8:	f7fe fba4 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 80097ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe fb22 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    message_ += ">";
 80097f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f8:	332c      	adds	r3, #44	; 0x2c
 80097fa:	4918      	ldr	r1, [pc, #96]	; (800985c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe fbab 	bl	8007f58 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 8009802:	4b17      	ldr	r3, [pc, #92]	; (8009860 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	ed97 0b04 	vldr	d0, [r7, #16]
 800980a:	4798      	blx	r3
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10f      	bne.n	8009832 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 8009812:	4b13      	ldr	r3, [pc, #76]	; (8009860 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	ed97 0b02 	vldr	d0, [r7, #8]
 800981a:	4798      	blx	r3
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d107      	bne.n	8009832 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 8009822:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	ed97 0b00 	vldr	d0, [r7]
 800982a:	4798      	blx	r3
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 8009832:	2301      	movs	r3, #1
 8009834:	e000      	b.n	8009838 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 8009836:	2300      	movs	r3, #0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d005      	beq.n	8009848 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	332c      	adds	r3, #44	; 0x2c
 8009840:	4908      	ldr	r1, [pc, #32]	; (8009864 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 8009842:	4618      	mov	r0, r3
 8009844:	f7fe fb88 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
}
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	4618      	mov	r0, r3
 800984c:	3750      	adds	r7, #80	; 0x50
 800984e:	46bd      	mov	sp, r7
 8009850:	bdb0      	pop	{r4, r5, r7, pc}
 8009852:	bf00      	nop
 8009854:	08018760 	.word	0x08018760
 8009858:	08016484 	.word	0x08016484
 800985c:	0801649c 	.word	0x0801649c
 8009860:	200000e0 	.word	0x200000e0
 8009864:	080164a0 	.word	0x080164a0

08009868 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8009868:	b590      	push	{r4, r7, lr}
 800986a:	b093      	sub	sp, #76	; 0x4c
 800986c:	af02      	add	r7, sp, #8
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	68b9      	ldr	r1, [r7, #8]
 800987e:	f7ff fcb3 	bl	80091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009882:	4a4f      	ldr	r2, [pc, #316]	; (80099c0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800988e:	68f9      	ldr	r1, [r7, #12]
 8009890:	f107 0320 	add.w	r3, r7, #32
 8009894:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009896:	4618      	mov	r0, r3
 8009898:	f7ff feae 	bl	80095f8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800989c:	f107 0320 	add.w	r3, r7, #32
 80098a0:	4619      	mov	r1, r3
 80098a2:	4620      	mov	r0, r4
 80098a4:	f7fd ff7d 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 80098a8:	f107 0320 	add.w	r3, r7, #32
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fe fac4 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 80098b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80098b4:	f7fe fa94 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 80098b8:	4602      	mov	r2, r0
 80098ba:	f107 0318 	add.w	r3, r7, #24
 80098be:	4611      	mov	r1, r2
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fe fd37 	bl	8008334 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 80098c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80098c8:	f7fe fa8a 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 80098cc:	4602      	mov	r2, r0
 80098ce:	f107 0310 	add.w	r3, r7, #16
 80098d2:	4611      	mov	r1, r2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fe fd2d 	bl	8008334 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80098e0:	68f9      	ldr	r1, [r7, #12]
 80098e2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80098e6:	f107 0310 	add.w	r3, r7, #16
 80098ea:	f107 0218 	add.w	r2, r7, #24
 80098ee:	f7ff fdbd 	bl	800946c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80098f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098f6:	4619      	mov	r1, r3
 80098f8:	4620      	mov	r0, r4
 80098fa:	f7fe fb1b 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 80098fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009902:	4618      	mov	r0, r3
 8009904:	f7fe fa99 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 8009908:	2300      	movs	r3, #0
 800990a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800990c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800990e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009910:	f7fe fbf7 	bl	8008102 <_ZNK12SimpleString2atEj>
 8009914:	4603      	mov	r3, r0
 8009916:	461c      	mov	r4, r3
 8009918:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800991a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800991c:	f7fe fbf1 	bl	8008102 <_ZNK12SimpleString2atEj>
 8009920:	4603      	mov	r3, r0
 8009922:	429c      	cmp	r4, r3
 8009924:	bf0c      	ite	eq
 8009926:	2301      	moveq	r3, #1
 8009928:	2300      	movne	r3, #0
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b00      	cmp	r3, #0
 800992e:	d003      	beq.n	8009938 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 8009930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009932:	3301      	adds	r3, #1
 8009934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009936:	e7e9      	b.n	800990c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8009938:	2300      	movs	r3, #0
 800993a:	63bb      	str	r3, [r7, #56]	; 0x38
 800993c:	f107 0310 	add.w	r3, r7, #16
 8009940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009942:	4618      	mov	r0, r3
 8009944:	f7fe fbdd 	bl	8008102 <_ZNK12SimpleString2atEj>
 8009948:	4603      	mov	r3, r0
 800994a:	461c      	mov	r4, r3
 800994c:	f107 0318 	add.w	r3, r7, #24
 8009950:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe fbd5 	bl	8008102 <_ZNK12SimpleString2atEj>
 8009958:	4603      	mov	r3, r0
 800995a:	429c      	cmp	r4, r3
 800995c:	bf0c      	ite	eq
 800995e:	2301      	moveq	r3, #1
 8009960:	2300      	movne	r3, #0
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d003      	beq.n	8009970 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 8009968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996a:	3301      	adds	r3, #1
 800996c:	63bb      	str	r3, [r7, #56]	; 0x38
 800996e:	e7e5      	b.n	800993c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009976:	68f9      	ldr	r1, [r7, #12]
 8009978:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800997c:	f107 0210 	add.w	r2, r7, #16
 8009980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009986:	f7ff fd8b 	bl	80094a0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800998a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800998e:	4619      	mov	r1, r3
 8009990:	4620      	mov	r0, r4
 8009992:	f7fe facf 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 8009996:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe fa4d 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 80099a0:	f107 0310 	add.w	r3, r7, #16
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fe fa48 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 80099aa:	f107 0318 	add.w	r3, r7, #24
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fe fa43 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	4618      	mov	r0, r3
 80099b8:	3744      	adds	r7, #68	; 0x44
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd90      	pop	{r4, r7, pc}
 80099be:	bf00      	nop
 80099c0:	08018734 	.word	0x08018734

080099c4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 80099c4:	b590      	push	{r4, r7, lr}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	68b9      	ldr	r1, [r7, #8]
 80099da:	f7ff fc05 	bl	80091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80099de:	4a1a      	ldr	r2, [pc, #104]	; (8009a48 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80099ea:	68f9      	ldr	r1, [r7, #12]
 80099ec:	f107 0310 	add.w	r3, r7, #16
 80099f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7ff fe00 	bl	80095f8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80099f8:	f107 0310 	add.w	r3, r7, #16
 80099fc:	4619      	mov	r1, r3
 80099fe:	4620      	mov	r0, r4
 8009a00:	f7fd fecf 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8009a04:	f107 0310 	add.w	r3, r7, #16
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fe fa16 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	332c      	adds	r3, #44	; 0x2c
 8009a12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fe fa8d 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	332c      	adds	r3, #44	; 0x2c
 8009a1e:	490b      	ldr	r1, [pc, #44]	; (8009a4c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fe fa99 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	332c      	adds	r3, #44	; 0x2c
 8009a2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fe fa81 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	332c      	adds	r3, #44	; 0x2c
 8009a36:	4906      	ldr	r1, [pc, #24]	; (8009a50 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fe fa8d 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
}
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	4618      	mov	r0, r3
 8009a42:	371c      	adds	r7, #28
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd90      	pop	{r4, r7, pc}
 8009a48:	08018708 	.word	0x08018708
 8009a4c:	080164c4 	.word	0x080164c4
 8009a50:	080164c8 	.word	0x080164c8

08009a54 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8009a54:	b5b0      	push	{r4, r5, r7, lr}
 8009a56:	b088      	sub	sp, #32
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	68b9      	ldr	r1, [r7, #8]
 8009a6a:	f7ff fbbd 	bl	80091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009a6e:	4a1c      	ldr	r2, [pc, #112]	; (8009ae0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009a7a:	68f9      	ldr	r1, [r7, #12]
 8009a7c:	f107 0310 	add.w	r3, r7, #16
 8009a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7ff fdb8 	bl	80095f8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009a88:	f107 0310 	add.w	r3, r7, #16
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f7fd fe87 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8009a94:	f107 0310 	add.w	r3, r7, #16
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fe f9ce 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009aa4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009aa6:	f7fe f99b 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8009aaa:	4605      	mov	r5, r0
 8009aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aae:	f7fe f997 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	f107 0018 	add.w	r0, r7, #24
 8009ab8:	462a      	mov	r2, r5
 8009aba:	490a      	ldr	r1, [pc, #40]	; (8009ae4 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 8009abc:	f7fe fe4a 	bl	8008754 <_Z16StringFromFormatPKcz>
 8009ac0:	f107 0318 	add.w	r3, r7, #24
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f7fe fa34 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 8009acc:	f107 0318 	add.w	r3, r7, #24
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fe f9b2 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3720      	adds	r7, #32
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bdb0      	pop	{r4, r5, r7, pc}
 8009ae0:	080186dc 	.word	0x080186dc
 8009ae4:	080164d4 	.word	0x080164d4

08009ae8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 8009ae8:	b590      	push	{r4, r7, lr}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
 8009af4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	68b9      	ldr	r1, [r7, #8]
 8009afe:	f7ff fb73 	bl	80091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009b02:	4a1a      	ldr	r2, [pc, #104]	; (8009b6c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009b0e:	68f9      	ldr	r1, [r7, #12]
 8009b10:	f107 0310 	add.w	r3, r7, #16
 8009b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff fd6e 	bl	80095f8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009b1c:	f107 0310 	add.w	r3, r7, #16
 8009b20:	4619      	mov	r1, r3
 8009b22:	4620      	mov	r0, r4
 8009b24:	f7fd fe3d 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8009b28:	f107 0310 	add.w	r3, r7, #16
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fe f984 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	332c      	adds	r3, #44	; 0x2c
 8009b36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7fe f9fb 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	332c      	adds	r3, #44	; 0x2c
 8009b42:	490b      	ldr	r1, [pc, #44]	; (8009b70 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fe fa07 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	332c      	adds	r3, #44	; 0x2c
 8009b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fe f9ef 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	332c      	adds	r3, #44	; 0x2c
 8009b5a:	4906      	ldr	r1, [pc, #24]	; (8009b74 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7fe f9fb 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
}
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	4618      	mov	r0, r3
 8009b66:	371c      	adds	r7, #28
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd90      	pop	{r4, r7, pc}
 8009b6c:	080186b0 	.word	0x080186b0
 8009b70:	080164c4 	.word	0x080164c4
 8009b74:	080164c8 	.word	0x080164c8

08009b78 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
 8009b84:	603b      	str	r3, [r7, #0]
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	68b9      	ldr	r1, [r7, #8]
 8009b8e:	f7ff fb2b 	bl	80091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009b92:	4a07      	ldr	r2, [pc, #28]	; (8009bb0 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	332c      	adds	r3, #44	; 0x2c
 8009b9c:	69b9      	ldr	r1, [r7, #24]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fd fdff 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
}
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	080184c0 	.word	0x080184c0

08009bb4 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 8009bb4:	b590      	push	{r4, r7, lr}
 8009bb6:	b09d      	sub	sp, #116	; 0x74
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
 8009bc0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	68b9      	ldr	r1, [r7, #8]
 8009bca:	f7ff fb0d 	bl	80091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009bce:	4a5d      	ldr	r2, [pc, #372]	; (8009d44 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009bda:	68f9      	ldr	r1, [r7, #12]
 8009bdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009be0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7ff fd07 	bl	80095f8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009bea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009bee:	4619      	mov	r1, r3
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f7fd fdd6 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8009bf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fe f91d 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 8009c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c04:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe fbd1 	bl	80083b0 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 8009c0e:	f107 0320 	add.w	r3, r7, #32
 8009c12:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fe fbca 	bl	80083b0 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8009c1c:	f107 0120 	add.w	r1, r7, #32
 8009c20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c24:	2220      	movs	r2, #32
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fe f9c4 	bl	8007fb4 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009c2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009c30:	4945      	ldr	r1, [pc, #276]	; (8009d48 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fd fd49 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8009c38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009c3c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009c40:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe f95a 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8009c4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009c4e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe fc66 	bl	8008524 <_Z30BracketsFormattedHexStringFroml>
 8009c58:	f107 0318 	add.w	r3, r7, #24
 8009c5c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009c60:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fe f94a 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8009c6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fe f8e3 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8009c74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fe f8de 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8009c7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fe f8d9 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8009c88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009c8c:	492e      	ldr	r1, [pc, #184]	; (8009d48 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fd fd1b 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8009c94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009c98:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009c9c:	f107 0120 	add.w	r1, r7, #32
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fe f92c 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8009ca6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009caa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe fc38 	bl	8008524 <_Z30BracketsFormattedHexStringFroml>
 8009cb4:	f107 0310 	add.w	r3, r7, #16
 8009cb8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009cbc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fe f91c 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8009cc6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fe f8b5 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8009cd0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fe f8b0 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8009cda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fe f8ab 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009cea:	68f9      	ldr	r1, [r7, #12]
 8009cec:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8009cf0:	f107 0318 	add.w	r3, r7, #24
 8009cf4:	f107 0210 	add.w	r2, r7, #16
 8009cf8:	f7ff fbb8 	bl	800946c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009cfc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009d00:	4619      	mov	r1, r3
 8009d02:	4620      	mov	r0, r4
 8009d04:	f7fe f916 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 8009d08:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fe f894 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8009d12:	f107 0310 	add.w	r3, r7, #16
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe f88f 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009d1c:	f107 0318 	add.w	r3, r7, #24
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7fe f88a 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 8009d26:	f107 0320 	add.w	r3, r7, #32
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe f885 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 8009d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7fe f880 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3774      	adds	r7, #116	; 0x74
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd90      	pop	{r4, r7, pc}
 8009d44:	08018684 	.word	0x08018684
 8009d48:	08016428 	.word	0x08016428

08009d4c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 8009d4c:	b590      	push	{r4, r7, lr}
 8009d4e:	b09d      	sub	sp, #116	; 0x74
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	68b9      	ldr	r1, [r7, #8]
 8009d62:	f7ff fa41 	bl	80091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009d66:	4a5d      	ldr	r2, [pc, #372]	; (8009edc <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009d72:	68f9      	ldr	r1, [r7, #12]
 8009d74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d78:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7ff fc3b 	bl	80095f8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009d82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d86:	4619      	mov	r1, r3
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f7fd fd0a 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8009d8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fe f851 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 8009d98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d9c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fe fd11 	bl	80087c8 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 8009da6:	f107 0320 	add.w	r3, r7, #32
 8009daa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fe fd0a 	bl	80087c8 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8009db4:	f107 0120 	add.w	r1, r7, #32
 8009db8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009dbc:	2220      	movs	r2, #32
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fe f8f8 	bl	8007fb4 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009dc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009dc8:	4945      	ldr	r1, [pc, #276]	; (8009ee0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fd fc7d 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8009dd0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009dd4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009dd8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7fe f88e 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8009de2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009de6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fe fbb6 	bl	800855c <_Z30BracketsFormattedHexStringFromm>
 8009df0:	f107 0318 	add.w	r3, r7, #24
 8009df4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009df8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fe f87e 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8009e02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fe f817 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8009e0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fe f812 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8009e16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7fe f80d 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8009e20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009e24:	492e      	ldr	r1, [pc, #184]	; (8009ee0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7fd fc4f 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8009e2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009e30:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009e34:	f107 0120 	add.w	r1, r7, #32
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7fe f860 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8009e3e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009e42:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fe fb88 	bl	800855c <_Z30BracketsFormattedHexStringFromm>
 8009e4c:	f107 0310 	add.w	r3, r7, #16
 8009e50:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009e54:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fe f850 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8009e5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fd ffe9 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8009e68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fd ffe4 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8009e72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7fd ffdf 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009e82:	68f9      	ldr	r1, [r7, #12]
 8009e84:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8009e88:	f107 0318 	add.w	r3, r7, #24
 8009e8c:	f107 0210 	add.w	r2, r7, #16
 8009e90:	f7ff faec 	bl	800946c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009e94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009e98:	4619      	mov	r1, r3
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f7fe f84a 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 8009ea0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fd ffc8 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8009eaa:	f107 0310 	add.w	r3, r7, #16
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fd ffc3 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009eb4:	f107 0318 	add.w	r3, r7, #24
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fd ffbe 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 8009ebe:	f107 0320 	add.w	r3, r7, #32
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fd ffb9 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 8009ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fd ffb4 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3774      	adds	r7, #116	; 0x74
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd90      	pop	{r4, r7, pc}
 8009edc:	08018658 	.word	0x08018658
 8009ee0:	08016428 	.word	0x08016428

08009ee4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 8009ee4:	b590      	push	{r4, r7, lr}
 8009ee6:	b09d      	sub	sp, #116	; 0x74
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
 8009ef0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	68b9      	ldr	r1, [r7, #8]
 8009efa:	f7ff f975 	bl	80091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009efe:	4a5f      	ldr	r2, [pc, #380]	; (800a07c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009f0a:	68f9      	ldr	r1, [r7, #12]
 8009f0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f10:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff fb6f 	bl	80095f8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009f1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f1e:	4619      	mov	r1, r3
 8009f20:	4620      	mov	r0, r4
 8009f22:	f7fd fc3e 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8009f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fd ff85 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 8009f30:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8009f34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f38:	4611      	mov	r1, r2
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fe fa26 	bl	800838c <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 8009f40:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8009f44:	f107 0320 	add.w	r3, r7, #32
 8009f48:	4611      	mov	r1, r2
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fe fa1e 	bl	800838c <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8009f50:	f107 0120 	add.w	r1, r7, #32
 8009f54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f58:	2220      	movs	r2, #32
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fe f82a 	bl	8007fb4 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009f60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009f64:	4946      	ldr	r1, [pc, #280]	; (800a080 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fd fbaf 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8009f6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009f70:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009f74:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fd ffc0 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8009f7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f82:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8009f86:	4611      	mov	r1, r2
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fe fb03 	bl	8008594 <_Z30BracketsFormattedHexStringFroma>
 8009f8e:	f107 0318 	add.w	r3, r7, #24
 8009f92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f96:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fd ffaf 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8009fa0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7fd ff48 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8009faa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fd ff43 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8009fb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fd ff3e 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8009fbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009fc2:	492f      	ldr	r1, [pc, #188]	; (800a080 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7fd fb80 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8009fca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009fce:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009fd2:	f107 0120 	add.w	r1, r7, #32
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fd ff91 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8009fdc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009fe0:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe fad4 	bl	8008594 <_Z30BracketsFormattedHexStringFroma>
 8009fec:	f107 0310 	add.w	r3, r7, #16
 8009ff0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009ff4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7fd ff80 	bl	8007efe <_ZNK12SimpleStringplERKS_>
 8009ffe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a002:	4618      	mov	r0, r3
 800a004:	f7fd ff19 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800a008:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fd ff14 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800a012:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a016:	4618      	mov	r0, r3
 800a018:	f7fd ff0f 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a022:	68f9      	ldr	r1, [r7, #12]
 800a024:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800a028:	f107 0318 	add.w	r3, r7, #24
 800a02c:	f107 0210 	add.w	r2, r7, #16
 800a030:	f7ff fa1c 	bl	800946c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a034:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a038:	4619      	mov	r1, r3
 800a03a:	4620      	mov	r0, r4
 800a03c:	f7fd ff7a 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800a040:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a044:	4618      	mov	r0, r3
 800a046:	f7fd fef8 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800a04a:	f107 0310 	add.w	r3, r7, #16
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fd fef3 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800a054:	f107 0318 	add.w	r3, r7, #24
 800a058:	4618      	mov	r0, r3
 800a05a:	f7fd feee 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800a05e:	f107 0320 	add.w	r3, r7, #32
 800a062:	4618      	mov	r0, r3
 800a064:	f7fd fee9 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800a068:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fd fee4 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	4618      	mov	r0, r3
 800a076:	3774      	adds	r7, #116	; 0x74
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd90      	pop	{r4, r7, pc}
 800a07c:	0801862c 	.word	0x0801862c
 800a080:	08016428 	.word	0x08016428

0800a084 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800a084:	b590      	push	{r4, r7, lr}
 800a086:	b093      	sub	sp, #76	; 0x4c
 800a088:	af02      	add	r7, sp, #8
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
 800a090:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	68b9      	ldr	r1, [r7, #8]
 800a09a:	f7ff f8a5 	bl	80091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a09e:	4a4a      	ldr	r2, [pc, #296]	; (800a1c8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a0aa:	68f9      	ldr	r1, [r7, #12]
 800a0ac:	f107 0320 	add.w	r3, r7, #32
 800a0b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7ff faa0 	bl	80095f8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a0b8:	f107 0320 	add.w	r3, r7, #32
 800a0bc:	4619      	mov	r1, r3
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f7fd fb6f 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 800a0c4:	f107 0320 	add.w	r3, r7, #32
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7fd feb6 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800a0ce:	f107 0318 	add.w	r3, r7, #24
 800a0d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7fe f92d 	bl	8008334 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800a0da:	f107 0310 	add.w	r3, r7, #16
 800a0de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7fe f927 	bl	8008334 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a0ec:	68f9      	ldr	r1, [r7, #12]
 800a0ee:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800a0f2:	f107 0310 	add.w	r3, r7, #16
 800a0f6:	f107 0218 	add.w	r2, r7, #24
 800a0fa:	f7ff f9b7 	bl	800946c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a0fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a102:	4619      	mov	r1, r3
 800a104:	4620      	mov	r0, r4
 800a106:	f7fd ff15 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800a10a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fd fe93 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800a114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a116:	2b00      	cmp	r3, #0
 800a118:	d046      	beq.n	800a1a8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800a11a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d043      	beq.n	800a1a8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800a120:	2300      	movs	r3, #0
 800a122:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a124:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a128:	4413      	add	r3, r2
 800a12a:	781a      	ldrb	r2, [r3, #0]
 800a12c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a12e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a130:	440b      	add	r3, r1
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	429a      	cmp	r2, r3
 800a136:	d103      	bne.n	800a140 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800a138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a13a:	3301      	adds	r3, #1
 800a13c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a13e:	e7f1      	b.n	800a124 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800a140:	2300      	movs	r3, #0
 800a142:	63bb      	str	r3, [r7, #56]	; 0x38
 800a144:	f107 0310 	add.w	r3, r7, #16
 800a148:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fd ffd9 	bl	8008102 <_ZNK12SimpleString2atEj>
 800a150:	4603      	mov	r3, r0
 800a152:	461c      	mov	r4, r3
 800a154:	f107 0318 	add.w	r3, r7, #24
 800a158:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fd ffd1 	bl	8008102 <_ZNK12SimpleString2atEj>
 800a160:	4603      	mov	r3, r0
 800a162:	429c      	cmp	r4, r3
 800a164:	bf0c      	ite	eq
 800a166:	2301      	moveq	r3, #1
 800a168:	2300      	movne	r3, #0
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d003      	beq.n	800a178 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a172:	3301      	adds	r3, #1
 800a174:	63bb      	str	r3, [r7, #56]	; 0x38
 800a176:	e7e5      	b.n	800a144 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a17e:	68f9      	ldr	r1, [r7, #12]
 800a180:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800a184:	f107 0210 	add.w	r2, r7, #16
 800a188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18e:	f7ff f987 	bl	80094a0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800a192:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a196:	4619      	mov	r1, r3
 800a198:	4620      	mov	r0, r4
 800a19a:	f7fd fecb 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800a19e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fd fe49 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800a1a8:	f107 0310 	add.w	r3, r7, #16
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fd fe44 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800a1b2:	f107 0318 	add.w	r3, r7, #24
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fd fe3f 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    }
}
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3744      	adds	r7, #68	; 0x44
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd90      	pop	{r4, r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	08018600 	.word	0x08018600

0800a1cc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800a1cc:	b590      	push	{r4, r7, lr}
 800a1ce:	b093      	sub	sp, #76	; 0x4c
 800a1d0:	af02      	add	r7, sp, #8
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	68b9      	ldr	r1, [r7, #8]
 800a1e2:	f7ff f801 	bl	80091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a1e6:	4a55      	ldr	r2, [pc, #340]	; (800a33c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a1f2:	68f9      	ldr	r1, [r7, #12]
 800a1f4:	f107 0320 	add.w	r3, r7, #32
 800a1f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7ff f9fc 	bl	80095f8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a200:	f107 0320 	add.w	r3, r7, #32
 800a204:	4619      	mov	r1, r3
 800a206:	4620      	mov	r0, r4
 800a208:	f7fd facb 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 800a20c:	f107 0320 	add.w	r3, r7, #32
 800a210:	4618      	mov	r0, r3
 800a212:	f7fd fe12 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800a216:	f107 0318 	add.w	r3, r7, #24
 800a21a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fe f889 	bl	8008334 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800a222:	f107 0310 	add.w	r3, r7, #16
 800a226:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fe f883 	bl	8008334 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a234:	68f9      	ldr	r1, [r7, #12]
 800a236:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800a23a:	f107 0310 	add.w	r3, r7, #16
 800a23e:	f107 0218 	add.w	r2, r7, #24
 800a242:	f7ff f913 	bl	800946c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a24a:	4619      	mov	r1, r3
 800a24c:	4620      	mov	r0, r4
 800a24e:	f7fd fe71 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800a252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a256:	4618      	mov	r0, r3
 800a258:	f7fd fdef 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800a25c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d05c      	beq.n	800a31c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800a262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a264:	2b00      	cmp	r3, #0
 800a266:	d059      	beq.n	800a31c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800a268:	2300      	movs	r3, #0
 800a26a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a26c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a270:	4413      	add	r3, r2
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	4618      	mov	r0, r3
 800a276:	f7fd f932 	bl	80074de <_ZN12SimpleString7ToLowerEc>
 800a27a:	4603      	mov	r3, r0
 800a27c:	461c      	mov	r4, r3
 800a27e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a282:	4413      	add	r3, r2
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	4618      	mov	r0, r3
 800a288:	f7fd f929 	bl	80074de <_ZN12SimpleString7ToLowerEc>
 800a28c:	4603      	mov	r3, r0
 800a28e:	429c      	cmp	r4, r3
 800a290:	bf0c      	ite	eq
 800a292:	2301      	moveq	r3, #1
 800a294:	2300      	movne	r3, #0
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d003      	beq.n	800a2a4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800a29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a29e:	3301      	adds	r3, #1
 800a2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2a2:	e7e3      	b.n	800a26c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800a2a8:	f107 0310 	add.w	r3, r7, #16
 800a2ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fd ff27 	bl	8008102 <_ZNK12SimpleString2atEj>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fd f911 	bl	80074de <_ZN12SimpleString7ToLowerEc>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	461c      	mov	r4, r3
 800a2c0:	f107 0318 	add.w	r3, r7, #24
 800a2c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fd ff1b 	bl	8008102 <_ZNK12SimpleString2atEj>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fd f905 	bl	80074de <_ZN12SimpleString7ToLowerEc>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	429c      	cmp	r4, r3
 800a2d8:	bf0c      	ite	eq
 800a2da:	2301      	moveq	r3, #1
 800a2dc:	2300      	movne	r3, #0
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d003      	beq.n	800a2ec <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2ea:	e7dd      	b.n	800a2a8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a2f2:	68f9      	ldr	r1, [r7, #12]
 800a2f4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800a2f8:	f107 0210 	add.w	r2, r7, #16
 800a2fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a302:	f7ff f8cd 	bl	80094a0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800a306:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a30a:	4619      	mov	r1, r3
 800a30c:	4620      	mov	r0, r4
 800a30e:	f7fd fe11 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800a312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a316:	4618      	mov	r0, r3
 800a318:	f7fd fd8f 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800a31c:	f107 0310 	add.w	r3, r7, #16
 800a320:	4618      	mov	r0, r3
 800a322:	f7fd fd8a 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800a326:	f107 0318 	add.w	r3, r7, #24
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fd fd85 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    }
}
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	4618      	mov	r0, r3
 800a334:	3744      	adds	r7, #68	; 0x44
 800a336:	46bd      	mov	sp, r7
 800a338:	bd90      	pop	{r4, r7, pc}
 800a33a:	bf00      	nop
 800a33c:	080185d4 	.word	0x080185d4

0800a340 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800a340:	b5b0      	push	{r4, r5, r7, lr}
 800a342:	b092      	sub	sp, #72	; 0x48
 800a344:	af02      	add	r7, sp, #8
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	68b9      	ldr	r1, [r7, #8]
 800a356:	f7fe ff47 	bl	80091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a35a:	4a40      	ldr	r2, [pc, #256]	; (800a45c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a366:	68f9      	ldr	r1, [r7, #12]
 800a368:	f107 031c 	add.w	r3, r7, #28
 800a36c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff f942 	bl	80095f8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a374:	f107 031c 	add.w	r3, r7, #28
 800a378:	4619      	mov	r1, r3
 800a37a:	4620      	mov	r0, r4
 800a37c:	f7fd fa11 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 800a380:	f107 031c 	add.w	r3, r7, #28
 800a384:	4618      	mov	r0, r3
 800a386:	f7fd fd58 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800a38a:	f107 0314 	add.w	r3, r7, #20
 800a38e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a390:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a392:	4618      	mov	r0, r3
 800a394:	f7fe fae0 	bl	8008958 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a39e:	68fd      	ldr	r5, [r7, #12]
 800a3a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fe fad5 	bl	8008958 <_Z22StringFromBinaryOrNullPKhj>
 800a3ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a3b2:	f107 0314 	add.w	r3, r7, #20
 800a3b6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	f7ff f856 	bl	800946c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a3c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f7fd fdb4 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800a3cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7fd fd32 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800a3d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fd fd2d 	bl	8007e3a <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800a3e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d02f      	beq.n	800a446 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800a3e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d02c      	beq.n	800a446 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f4:	4413      	add	r3, r2
 800a3f6:	781a      	ldrb	r2, [r3, #0]
 800a3f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3fc:	440b      	add	r3, r1
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	429a      	cmp	r2, r3
 800a402:	d103      	bne.n	800a40c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800a404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a406:	3301      	adds	r3, #1
 800a408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a40a:	e7f1      	b.n	800a3f0 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a412:	68f9      	ldr	r1, [r7, #12]
 800a414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a416:	4613      	mov	r3, r2
 800a418:	005b      	lsls	r3, r3, #1
 800a41a:	4413      	add	r3, r2
 800a41c:	1c5d      	adds	r5, r3, #1
 800a41e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800a422:	f107 0214 	add.w	r2, r7, #20
 800a426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	462b      	mov	r3, r5
 800a42c:	f7ff f838 	bl	80094a0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800a430:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a434:	4619      	mov	r1, r3
 800a436:	4620      	mov	r0, r4
 800a438:	f7fd fd7c 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800a43c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a440:	4618      	mov	r0, r3
 800a442:	f7fd fcfa 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800a446:	f107 0314 	add.w	r3, r7, #20
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fd fcf5 	bl	8007e3a <_ZN12SimpleStringD1Ev>
	}
}
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	4618      	mov	r0, r3
 800a454:	3740      	adds	r7, #64	; 0x40
 800a456:	46bd      	mov	sp, r7
 800a458:	bdb0      	pop	{r4, r5, r7, pc}
 800a45a:	bf00      	nop
 800a45c:	080185a8 	.word	0x080185a8

0800a460 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800a460:	b5b0      	push	{r4, r5, r7, lr}
 800a462:	b08c      	sub	sp, #48	; 0x30
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
 800a46c:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	68b9      	ldr	r1, [r7, #8]
 800a476:	f7fe feb7 	bl	80091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a47a:	4a26      	ldr	r2, [pc, #152]	; (800a514 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a486:	68f9      	ldr	r1, [r7, #12]
 800a488:	f107 0310 	add.w	r3, r7, #16
 800a48c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a48e:	4618      	mov	r0, r3
 800a490:	f7ff f8b2 	bl	80095f8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a494:	f107 0310 	add.w	r3, r7, #16
 800a498:	4619      	mov	r1, r3
 800a49a:	4620      	mov	r0, r4
 800a49c:	f7fd f981 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 800a4a0:	f107 0310 	add.w	r3, r7, #16
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fd fcc8 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a4b0:	68fd      	ldr	r5, [r7, #12]
 800a4b2:	f107 0020 	add.w	r0, r7, #32
 800a4b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4bc:	f7fe fa68 	bl	8008990 <_Z20StringFromMaskedBitsmmj>
 800a4c0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800a4c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a4ca:	f7fe fa61 	bl	8008990 <_Z20StringFromMaskedBitsmmj>
 800a4ce:	f107 0018 	add.w	r0, r7, #24
 800a4d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a4d6:	f107 0220 	add.w	r2, r7, #32
 800a4da:	4629      	mov	r1, r5
 800a4dc:	f7fe ffc6 	bl	800946c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a4e0:	f107 0318 	add.w	r3, r7, #24
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f7fd fd24 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800a4ec:	f107 0318 	add.w	r3, r7, #24
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7fd fca2 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800a4f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fd fc9d 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800a500:	f107 0320 	add.w	r3, r7, #32
 800a504:	4618      	mov	r0, r3
 800a506:	f7fd fc98 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	4618      	mov	r0, r3
 800a50e:	3730      	adds	r7, #48	; 0x30
 800a510:	46bd      	mov	sp, r7
 800a512:	bdb0      	pop	{r4, r5, r7, pc}
 800a514:	0801857c 	.word	0x0801857c

0800a518 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800a518:	b590      	push	{r4, r7, lr}
 800a51a:	b089      	sub	sp, #36	; 0x24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
 800a524:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	68b9      	ldr	r1, [r7, #8]
 800a52e:	f7fe fe5b 	bl	80091e8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a532:	4a1a      	ldr	r2, [pc, #104]	; (800a59c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a53e:	68f9      	ldr	r1, [r7, #12]
 800a540:	f107 0310 	add.w	r3, r7, #16
 800a544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a546:	4618      	mov	r0, r3
 800a548:	f7ff f856 	bl	80095f8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a54c:	f107 0310 	add.w	r3, r7, #16
 800a550:	4619      	mov	r1, r3
 800a552:	4620      	mov	r0, r4
 800a554:	f7fd f925 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 800a558:	f107 0310 	add.w	r3, r7, #16
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7fd fc6c 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a56a:	f7fd fc39 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 800a56e:	4602      	mov	r2, r0
 800a570:	f107 0318 	add.w	r3, r7, #24
 800a574:	490a      	ldr	r1, [pc, #40]	; (800a5a0 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe f8ec 	bl	8008754 <_Z16StringFromFormatPKcz>
 800a57c:	f107 0318 	add.w	r3, r7, #24
 800a580:	4619      	mov	r1, r3
 800a582:	4620      	mov	r0, r4
 800a584:	f7fd fcd6 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800a588:	f107 0318 	add.w	r3, r7, #24
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fd fc54 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	4618      	mov	r0, r3
 800a596:	3724      	adds	r7, #36	; 0x24
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd90      	pop	{r4, r7, pc}
 800a59c:	08018550 	.word	0x08018550
 800a5a0:	080164f8 	.word	0x080164f8

0800a5a4 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	4a05      	ldr	r2, [pc, #20]	; (800a5c4 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fe fe99 	bl	80092ec <_ZN11TestFailureD1Ev>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	08018550 	.word	0x08018550

0800a5c8 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7ff ffe7 	bl	800a5a4 <_ZN25FeatureUnsupportedFailureD1Ev>
 800a5d6:	2134      	movs	r1, #52	; 0x34
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7fc f9a1 	bl	8006920 <_ZdlPvj>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	4a05      	ldr	r2, [pc, #20]	; (800a608 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	601a      	str	r2, [r3, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fe fe77 	bl	80092ec <_ZN11TestFailureD1Ev>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4618      	mov	r0, r3
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	0801857c 	.word	0x0801857c

0800a60c <_ZN16BitsEqualFailureD0Ev>:
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f7ff ffe7 	bl	800a5e8 <_ZN16BitsEqualFailureD1Ev>
 800a61a:	2134      	movs	r1, #52	; 0x34
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f7fc f97f 	bl	8006920 <_ZdlPvj>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4618      	mov	r0, r3
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	4a05      	ldr	r2, [pc, #20]	; (800a64c <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	601a      	str	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7fe fe55 	bl	80092ec <_ZN11TestFailureD1Ev>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	080185a8 	.word	0x080185a8

0800a650 <_ZN18BinaryEqualFailureD0Ev>:
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7ff ffe7 	bl	800a62c <_ZN18BinaryEqualFailureD1Ev>
 800a65e:	2134      	movs	r1, #52	; 0x34
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7fc f95d 	bl	8006920 <_ZdlPvj>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4618      	mov	r0, r3
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	4a05      	ldr	r2, [pc, #20]	; (800a690 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4618      	mov	r0, r3
 800a682:	f7fe fe33 	bl	80092ec <_ZN11TestFailureD1Ev>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4618      	mov	r0, r3
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	080185d4 	.word	0x080185d4

0800a694 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7ff ffe7 	bl	800a670 <_ZN24StringEqualNoCaseFailureD1Ev>
 800a6a2:	2134      	movs	r1, #52	; 0x34
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7fc f93b 	bl	8006920 <_ZdlPvj>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	4a05      	ldr	r2, [pc, #20]	; (800a6d4 <_ZN18StringEqualFailureD1Ev+0x20>)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	601a      	str	r2, [r3, #0]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fe fe11 	bl	80092ec <_ZN11TestFailureD1Ev>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	08018600 	.word	0x08018600

0800a6d8 <_ZN18StringEqualFailureD0Ev>:
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7ff ffe7 	bl	800a6b4 <_ZN18StringEqualFailureD1Ev>
 800a6e6:	2134      	movs	r1, #52	; 0x34
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7fc f919 	bl	8006920 <_ZdlPvj>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	4a05      	ldr	r2, [pc, #20]	; (800a718 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	601a      	str	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fe fdef 	bl	80092ec <_ZN11TestFailureD1Ev>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4618      	mov	r0, r3
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	0801862c 	.word	0x0801862c

0800a71c <_ZN23SignedBytesEqualFailureD0Ev>:
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7ff ffe7 	bl	800a6f8 <_ZN23SignedBytesEqualFailureD1Ev>
 800a72a:	2134      	movs	r1, #52	; 0x34
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7fc f8f7 	bl	8006920 <_ZdlPvj>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4618      	mov	r0, r3
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	4a05      	ldr	r2, [pc, #20]	; (800a75c <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	601a      	str	r2, [r3, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fe fdcd 	bl	80092ec <_ZN11TestFailureD1Ev>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4618      	mov	r0, r3
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	08018658 	.word	0x08018658

0800a760 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f7ff ffe7 	bl	800a73c <_ZN25UnsignedLongsEqualFailureD1Ev>
 800a76e:	2134      	movs	r1, #52	; 0x34
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f7fc f8d5 	bl	8006920 <_ZdlPvj>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4618      	mov	r0, r3
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	4a05      	ldr	r2, [pc, #20]	; (800a7a0 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	4618      	mov	r0, r3
 800a792:	f7fe fdab 	bl	80092ec <_ZN11TestFailureD1Ev>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4618      	mov	r0, r3
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	08018684 	.word	0x08018684

0800a7a4 <_ZN17LongsEqualFailureD0Ev>:
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7ff ffe7 	bl	800a780 <_ZN17LongsEqualFailureD1Ev>
 800a7b2:	2134      	movs	r1, #52	; 0x34
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7fc f8b3 	bl	8006920 <_ZdlPvj>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	4a05      	ldr	r2, [pc, #20]	; (800a7e4 <_ZN12CheckFailureD1Ev+0x20>)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	601a      	str	r2, [r3, #0]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7fe fd89 	bl	80092ec <_ZN11TestFailureD1Ev>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	080186b0 	.word	0x080186b0

0800a7e8 <_ZN12CheckFailureD0Ev>:
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7ff ffe7 	bl	800a7c4 <_ZN12CheckFailureD1Ev>
 800a7f6:	2134      	movs	r1, #52	; 0x34
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f7fc f891 	bl	8006920 <_ZdlPvj>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4618      	mov	r0, r3
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	4a05      	ldr	r2, [pc, #20]	; (800a828 <_ZN15ContainsFailureD1Ev+0x20>)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	601a      	str	r2, [r3, #0]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fe fd67 	bl	80092ec <_ZN11TestFailureD1Ev>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4618      	mov	r0, r3
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	080186dc 	.word	0x080186dc

0800a82c <_ZN15ContainsFailureD0Ev>:
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f7ff ffe7 	bl	800a808 <_ZN15ContainsFailureD1Ev>
 800a83a:	2134      	movs	r1, #52	; 0x34
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f7fc f86f 	bl	8006920 <_ZdlPvj>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4618      	mov	r0, r3
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	4a05      	ldr	r2, [pc, #20]	; (800a86c <_ZN17ComparisonFailureD1Ev+0x20>)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	601a      	str	r2, [r3, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fe fd45 	bl	80092ec <_ZN11TestFailureD1Ev>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4618      	mov	r0, r3
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	08018708 	.word	0x08018708

0800a870 <_ZN17ComparisonFailureD0Ev>:
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f7ff ffe7 	bl	800a84c <_ZN17ComparisonFailureD1Ev>
 800a87e:	2134      	movs	r1, #52	; 0x34
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f7fc f84d 	bl	8006920 <_ZdlPvj>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	4a05      	ldr	r2, [pc, #20]	; (800a8b0 <_ZN17CheckEqualFailureD1Ev+0x20>)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	601a      	str	r2, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7fe fd23 	bl	80092ec <_ZN11TestFailureD1Ev>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	08018734 	.word	0x08018734

0800a8b4 <_ZN17CheckEqualFailureD0Ev>:
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f7ff ffe7 	bl	800a890 <_ZN17CheckEqualFailureD1Ev>
 800a8c2:	2134      	movs	r1, #52	; 0x34
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f7fc f82b 	bl	8006920 <_ZdlPvj>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	4a05      	ldr	r2, [pc, #20]	; (800a8f4 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	601a      	str	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fe fd01 	bl	80092ec <_ZN11TestFailureD1Ev>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	08018760 	.word	0x08018760

0800a8f8 <_ZN19DoublesEqualFailureD0Ev>:
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f7ff ffe7 	bl	800a8d4 <_ZN19DoublesEqualFailureD1Ev>
 800a906:	2134      	movs	r1, #52	; 0x34
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7fc f809 	bl	8006920 <_ZdlPvj>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4618      	mov	r0, r3
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	4a05      	ldr	r2, [pc, #20]	; (800a938 <_ZN13EqualsFailureD1Ev+0x20>)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	601a      	str	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4618      	mov	r0, r3
 800a92a:	f7fe fcdf 	bl	80092ec <_ZN11TestFailureD1Ev>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4618      	mov	r0, r3
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	0801878c 	.word	0x0801878c

0800a93c <_ZN13EqualsFailureD0Ev>:
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7ff ffe7 	bl	800a918 <_ZN13EqualsFailureD1Ev>
 800a94a:	2134      	movs	r1, #52	; 0x34
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f7fb ffe7 	bl	8006920 <_ZdlPvj>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4618      	mov	r0, r3
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800a95c:	b5b0      	push	{r4, r5, r7, lr}
 800a95e:	b086      	sub	sp, #24
 800a960:	af02      	add	r7, sp, #8
 800a962:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800a964:	4b0d      	ldr	r3, [pc, #52]	; (800a99c <_ZL13checkedMallocj+0x40>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	4798      	blx	r3
 800a96c:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10e      	bne.n	800a992 <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800a974:	f004 f96c 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 800a978:	4604      	mov	r4, r0
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	3368      	adds	r3, #104	; 0x68
 800a97e:	681d      	ldr	r5, [r3, #0]
 800a980:	f004 f976 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a984:	4603      	mov	r3, r0
 800a986:	9300      	str	r3, [sp, #0]
 800a988:	2325      	movs	r3, #37	; 0x25
 800a98a:	4a05      	ldr	r2, [pc, #20]	; (800a9a0 <_ZL13checkedMallocj+0x44>)
 800a98c:	4905      	ldr	r1, [pc, #20]	; (800a9a4 <_ZL13checkedMallocj+0x48>)
 800a98e:	4620      	mov	r0, r4
 800a990:	47a8      	blx	r5
    return mem;
 800a992:	68fb      	ldr	r3, [r7, #12]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bdb0      	pop	{r4, r5, r7, pc}
 800a99c:	200000c4 	.word	0x200000c4
 800a9a0:	0801656c 	.word	0x0801656c
 800a9a4:	0801658c 	.word	0x0801658c

0800a9a8 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800a9ac:	4b04      	ldr	r3, [pc, #16]	; (800a9c0 <_Z22getCurrentNewAllocatorv+0x18>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d101      	bne.n	800a9b8 <_Z22getCurrentNewAllocatorv+0x10>
 800a9b4:	f000 f806 	bl	800a9c4 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800a9b8:	4b01      	ldr	r3, [pc, #4]	; (800a9c0 <_Z22getCurrentNewAllocatorv+0x18>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	2000058c 	.word	0x2000058c

0800a9c4 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800a9c8:	f000 f810 	bl	800a9ec <_Z19defaultNewAllocatorv>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	4a02      	ldr	r2, [pc, #8]	; (800a9d8 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800a9d0:	6013      	str	r3, [r2, #0]
}
 800a9d2:	bf00      	nop
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	2000058c 	.word	0x2000058c

0800a9dc <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	4801      	ldr	r0, [pc, #4]	; (800a9e8 <__tcf_0+0xc>)
 800a9e2:	f000 f909 	bl	800abf8 <_ZN19TestMemoryAllocatorD1Ev>
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	20000598 	.word	0x20000598

0800a9ec <_Z19defaultNewAllocatorv>:
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800a9f0:	4b13      	ldr	r3, [pc, #76]	; (800aa40 <_Z19defaultNewAllocatorv+0x54>)
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	f3bf 8f5b 	dmb	ish
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	bf0c      	ite	eq
 800aa02:	2301      	moveq	r3, #1
 800aa04:	2300      	movne	r3, #0
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d016      	beq.n	800aa3a <_Z19defaultNewAllocatorv+0x4e>
 800aa0c:	480c      	ldr	r0, [pc, #48]	; (800aa40 <_Z19defaultNewAllocatorv+0x54>)
 800aa0e:	f007 faf3 	bl	8011ff8 <__cxa_guard_acquire>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	bf14      	ite	ne
 800aa18:	2301      	movne	r3, #1
 800aa1a:	2300      	moveq	r3, #0
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00b      	beq.n	800aa3a <_Z19defaultNewAllocatorv+0x4e>
 800aa22:	4b08      	ldr	r3, [pc, #32]	; (800aa44 <_Z19defaultNewAllocatorv+0x58>)
 800aa24:	4a08      	ldr	r2, [pc, #32]	; (800aa48 <_Z19defaultNewAllocatorv+0x5c>)
 800aa26:	4909      	ldr	r1, [pc, #36]	; (800aa4c <_Z19defaultNewAllocatorv+0x60>)
 800aa28:	4809      	ldr	r0, [pc, #36]	; (800aa50 <_Z19defaultNewAllocatorv+0x64>)
 800aa2a:	f000 f8c5 	bl	800abb8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800aa2e:	4804      	ldr	r0, [pc, #16]	; (800aa40 <_Z19defaultNewAllocatorv+0x54>)
 800aa30:	f007 faee 	bl	8012010 <__cxa_guard_release>
 800aa34:	4807      	ldr	r0, [pc, #28]	; (800aa54 <_Z19defaultNewAllocatorv+0x68>)
 800aa36:	f007 fb12 	bl	801205e <atexit>
    return &allocator;
 800aa3a:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <_Z19defaultNewAllocatorv+0x64>)
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	200005ac 	.word	0x200005ac
 800aa44:	080165ac 	.word	0x080165ac
 800aa48:	080165b4 	.word	0x080165b4
 800aa4c:	080165b8 	.word	0x080165b8
 800aa50:	20000598 	.word	0x20000598
 800aa54:	0800a9dd 	.word	0x0800a9dd

0800aa58 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800aa5c:	4b04      	ldr	r3, [pc, #16]	; (800aa70 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d101      	bne.n	800aa68 <_Z27getCurrentNewArrayAllocatorv+0x10>
 800aa64:	f000 f806 	bl	800aa74 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800aa68:	4b01      	ldr	r3, [pc, #4]	; (800aa70 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	20000590 	.word	0x20000590

0800aa74 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800aa78:	f000 f810 	bl	800aa9c <_Z24defaultNewArrayAllocatorv>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	4a02      	ldr	r2, [pc, #8]	; (800aa88 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800aa80:	6013      	str	r3, [r2, #0]
}
 800aa82:	bf00      	nop
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20000590 	.word	0x20000590

0800aa8c <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	4801      	ldr	r0, [pc, #4]	; (800aa98 <__tcf_1+0xc>)
 800aa92:	f000 f8b1 	bl	800abf8 <_ZN19TestMemoryAllocatorD1Ev>
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	200005b0 	.word	0x200005b0

0800aa9c <_Z24defaultNewArrayAllocatorv>:
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800aaa0:	4b13      	ldr	r3, [pc, #76]	; (800aaf0 <_Z24defaultNewArrayAllocatorv+0x54>)
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	f3bf 8f5b 	dmb	ish
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	f003 0301 	and.w	r3, r3, #1
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	bf0c      	ite	eq
 800aab2:	2301      	moveq	r3, #1
 800aab4:	2300      	movne	r3, #0
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d016      	beq.n	800aaea <_Z24defaultNewArrayAllocatorv+0x4e>
 800aabc:	480c      	ldr	r0, [pc, #48]	; (800aaf0 <_Z24defaultNewArrayAllocatorv+0x54>)
 800aabe:	f007 fa9b 	bl	8011ff8 <__cxa_guard_acquire>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	bf14      	ite	ne
 800aac8:	2301      	movne	r3, #1
 800aaca:	2300      	moveq	r3, #0
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00b      	beq.n	800aaea <_Z24defaultNewArrayAllocatorv+0x4e>
 800aad2:	4b08      	ldr	r3, [pc, #32]	; (800aaf4 <_Z24defaultNewArrayAllocatorv+0x58>)
 800aad4:	4a08      	ldr	r2, [pc, #32]	; (800aaf8 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800aad6:	4909      	ldr	r1, [pc, #36]	; (800aafc <_Z24defaultNewArrayAllocatorv+0x60>)
 800aad8:	4809      	ldr	r0, [pc, #36]	; (800ab00 <_Z24defaultNewArrayAllocatorv+0x64>)
 800aada:	f000 f86d 	bl	800abb8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800aade:	4804      	ldr	r0, [pc, #16]	; (800aaf0 <_Z24defaultNewArrayAllocatorv+0x54>)
 800aae0:	f007 fa96 	bl	8012010 <__cxa_guard_release>
 800aae4:	4807      	ldr	r0, [pc, #28]	; (800ab04 <_Z24defaultNewArrayAllocatorv+0x68>)
 800aae6:	f007 faba 	bl	801205e <atexit>
    return &allocator;
 800aaea:	4b05      	ldr	r3, [pc, #20]	; (800ab00 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	200005c4 	.word	0x200005c4
 800aaf4:	080165d0 	.word	0x080165d0
 800aaf8:	080165dc 	.word	0x080165dc
 800aafc:	080165e4 	.word	0x080165e4
 800ab00:	200005b0 	.word	0x200005b0
 800ab04:	0800aa8d 	.word	0x0800aa8d

0800ab08 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800ab0c:	4b04      	ldr	r3, [pc, #16]	; (800ab20 <_Z25getCurrentMallocAllocatorv+0x18>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d101      	bne.n	800ab18 <_Z25getCurrentMallocAllocatorv+0x10>
 800ab14:	f000 f806 	bl	800ab24 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800ab18:	4b01      	ldr	r3, [pc, #4]	; (800ab20 <_Z25getCurrentMallocAllocatorv+0x18>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	20000594 	.word	0x20000594

0800ab24 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800ab28:	f000 f810 	bl	800ab4c <_Z22defaultMallocAllocatorv>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	4a02      	ldr	r2, [pc, #8]	; (800ab38 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800ab30:	6013      	str	r3, [r2, #0]
}
 800ab32:	bf00      	nop
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	20000594 	.word	0x20000594

0800ab3c <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	4801      	ldr	r0, [pc, #4]	; (800ab48 <__tcf_2+0xc>)
 800ab42:	f000 f859 	bl	800abf8 <_ZN19TestMemoryAllocatorD1Ev>
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	200005c8 	.word	0x200005c8

0800ab4c <_Z22defaultMallocAllocatorv>:
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800ab50:	4b13      	ldr	r3, [pc, #76]	; (800aba0 <_Z22defaultMallocAllocatorv+0x54>)
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	f3bf 8f5b 	dmb	ish
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	bf0c      	ite	eq
 800ab62:	2301      	moveq	r3, #1
 800ab64:	2300      	movne	r3, #0
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d016      	beq.n	800ab9a <_Z22defaultMallocAllocatorv+0x4e>
 800ab6c:	480c      	ldr	r0, [pc, #48]	; (800aba0 <_Z22defaultMallocAllocatorv+0x54>)
 800ab6e:	f007 fa43 	bl	8011ff8 <__cxa_guard_acquire>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	bf14      	ite	ne
 800ab78:	2301      	movne	r3, #1
 800ab7a:	2300      	moveq	r3, #0
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00b      	beq.n	800ab9a <_Z22defaultMallocAllocatorv+0x4e>
 800ab82:	4b08      	ldr	r3, [pc, #32]	; (800aba4 <_Z22defaultMallocAllocatorv+0x58>)
 800ab84:	4a08      	ldr	r2, [pc, #32]	; (800aba8 <_Z22defaultMallocAllocatorv+0x5c>)
 800ab86:	4909      	ldr	r1, [pc, #36]	; (800abac <_Z22defaultMallocAllocatorv+0x60>)
 800ab88:	4809      	ldr	r0, [pc, #36]	; (800abb0 <_Z22defaultMallocAllocatorv+0x64>)
 800ab8a:	f000 f815 	bl	800abb8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800ab8e:	4804      	ldr	r0, [pc, #16]	; (800aba0 <_Z22defaultMallocAllocatorv+0x54>)
 800ab90:	f007 fa3e 	bl	8012010 <__cxa_guard_release>
 800ab94:	4807      	ldr	r0, [pc, #28]	; (800abb4 <_Z22defaultMallocAllocatorv+0x68>)
 800ab96:	f007 fa62 	bl	801205e <atexit>
    return &allocator;
 800ab9a:	4b05      	ldr	r3, [pc, #20]	; (800abb0 <_Z22defaultMallocAllocatorv+0x64>)
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	200005dc 	.word	0x200005dc
 800aba4:	08016600 	.word	0x08016600
 800aba8:	08016608 	.word	0x08016608
 800abac:	08016610 	.word	0x08016610
 800abb0:	200005c8 	.word	0x200005c8
 800abb4:	0800ab3d 	.word	0x0800ab3d

0800abb8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
 800abc4:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800abc6:	4a0b      	ldr	r2, [pc, #44]	; (800abf4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	601a      	str	r2, [r3, #0]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	605a      	str	r2, [r3, #4]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	609a      	str	r2, [r3, #8]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	60da      	str	r2, [r3, #12]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	741a      	strb	r2, [r3, #16]
{
}
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4618      	mov	r0, r3
 800abe8:	3714      	adds	r7, #20
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	08018818 	.word	0x08018818

0800abf8 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	4a06      	ldr	r2, [pc, #24]	; (800ac1c <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	741a      	strb	r2, [r3, #16]
}
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	370c      	adds	r7, #12
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	08018818 	.word	0x08018818

0800ac20 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
}
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7ff ffe5 	bl	800abf8 <_ZN19TestMemoryAllocatorD1Ev>
 800ac2e:	2114      	movs	r1, #20
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7fb fe75 	bl	8006920 <_ZdlPvj>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	7c1b      	ldrb	r3, [r3, #16]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800ac58:	b590      	push	{r4, r7, lr}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	3310      	adds	r3, #16
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	4798      	blx	r3
 800ac6e:	4604      	mov	r4, r0
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	3310      	adds	r3, #16
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	6838      	ldr	r0, [r7, #0]
 800ac7a:	4798      	blx	r3
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	4619      	mov	r1, r3
 800ac80:	4620      	mov	r0, r4
 800ac82:	f7fc fb5f 	bl	8007344 <_ZN12SimpleString6StrCmpEPKcS1_>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	bf0c      	ite	eq
 800ac8c:	2301      	moveq	r3, #1
 800ac8e:	2300      	movne	r3, #0
 800ac90:	b2db      	uxtb	r3, r3
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd90      	pop	{r4, r7, pc}
	...

0800ac9c <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800ac9c:	b590      	push	{r4, r7, lr}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3308      	adds	r3, #8
 800acac:	681c      	ldr	r4, [r3, #0]
 800acae:	2301      	movs	r3, #1
 800acb0:	4a04      	ldr	r2, [pc, #16]	; (800acc4 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800acb2:	6839      	ldr	r1, [r7, #0]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	47a0      	blx	r4
 800acb8:	4603      	mov	r3, r0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd90      	pop	{r4, r7, pc}
 800acc2:	bf00      	nop
 800acc4:	0801662c 	.word	0x0801662c

0800acc8 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800acc8:	b590      	push	{r4, r7, lr}
 800acca:	b085      	sub	sp, #20
 800accc:	af02      	add	r7, sp, #8
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	330c      	adds	r3, #12
 800acd8:	681c      	ldr	r4, [r3, #0]
 800acda:	2301      	movs	r3, #1
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	4b04      	ldr	r3, [pc, #16]	; (800acf0 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	6839      	ldr	r1, [r7, #0]
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	47a0      	blx	r4
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	bd90      	pop	{r4, r7, pc}
 800acf0:	0801662c 	.word	0x0801662c

0800acf4 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800ad02:	68b8      	ldr	r0, [r7, #8]
 800ad04:	f7ff fe2a 	bl	800a95c <_ZL13checkedMallocj>
 800ad08:	4603      	mov	r3, r0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
	...

0800ad14 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
 800ad20:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800ad22:	4b04      	ldr	r3, [pc, #16]	; (800ad34 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68b8      	ldr	r0, [r7, #8]
 800ad28:	4798      	blx	r3
}
 800ad2a:	bf00      	nop
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	200000cc 	.word	0x200000cc

0800ad38 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
    return name_;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	685b      	ldr	r3, [r3, #4]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	689b      	ldr	r3, [r3, #8]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
    return free_name_;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	68db      	ldr	r3, [r3, #12]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
    return this;
 800ad88:	687b      	ldr	r3, [r7, #4]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	370c      	adds	r7, #12
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr
	...

0800ad98 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	4a05      	ldr	r2, [pc, #20]	; (800adb8 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	601a      	str	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7ff ff25 	bl	800abf8 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4618      	mov	r0, r3
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	080187e4 	.word	0x080187e4

0800adbc <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
}
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f7ff ffe7 	bl	800ad98 <_ZN20NullUnknownAllocatorD1Ev>
 800adca:	2114      	movs	r1, #20
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f7fb fda7 	bl	8006920 <_ZdlPvj>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4618      	mov	r0, r3
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800addc:	b480      	push	{r7}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3714      	adds	r7, #20
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
 800ae04:	603b      	str	r3, [r7, #0]
}
 800ae06:	bf00      	nop
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
	...

0800ae14 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	4b06      	ldr	r3, [pc, #24]	; (800ae38 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800ae20:	4a05      	ldr	r2, [pc, #20]	; (800ae38 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800ae22:	4906      	ldr	r1, [pc, #24]	; (800ae3c <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800ae24:	f7ff fec8 	bl	800abb8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800ae28:	4a05      	ldr	r2, [pc, #20]	; (800ae40 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	601a      	str	r2, [r3, #0]
{
}
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	08016660 	.word	0x08016660
 800ae3c:	08016668 	.word	0x08016668
 800ae40:	080187e4 	.word	0x080187e4

0800ae44 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800ae44:	b580      	push	{r7, lr}
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	4801      	ldr	r0, [pc, #4]	; (800ae50 <__tcf_3+0xc>)
 800ae4a:	f7ff ffa5 	bl	800ad98 <_ZN20NullUnknownAllocatorD1Ev>
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	200005e0 	.word	0x200005e0

0800ae54 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800ae58:	4b12      	ldr	r3, [pc, #72]	; (800aea4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	f3bf 8f5b 	dmb	ish
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	f003 0301 	and.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	bf0c      	ite	eq
 800ae6a:	2301      	moveq	r3, #1
 800ae6c:	2300      	movne	r3, #0
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d013      	beq.n	800ae9c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800ae74:	480b      	ldr	r0, [pc, #44]	; (800aea4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800ae76:	f007 f8bf 	bl	8011ff8 <__cxa_guard_acquire>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	bf14      	ite	ne
 800ae80:	2301      	movne	r3, #1
 800ae82:	2300      	moveq	r3, #0
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d008      	beq.n	800ae9c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800ae8a:	4807      	ldr	r0, [pc, #28]	; (800aea8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800ae8c:	f7ff ffc2 	bl	800ae14 <_ZN20NullUnknownAllocatorC1Ev>
 800ae90:	4804      	ldr	r0, [pc, #16]	; (800aea4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800ae92:	f007 f8bd 	bl	8012010 <__cxa_guard_release>
 800ae96:	4805      	ldr	r0, [pc, #20]	; (800aeac <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800ae98:	f007 f8e1 	bl	801205e <atexit>
    return &allocator;
 800ae9c:	4b02      	ldr	r3, [pc, #8]	; (800aea8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	200005f4 	.word	0x200005f4
 800aea8:	200005e0 	.word	0x200005e0
 800aeac:	0800ae45 	.word	0x0800ae45

0800aeb0 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
        return testCount_;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	689b      	ldr	r3, [r3, #8]
    }
 800aebc:	4618      	mov	r0, r3
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	699b      	ldr	r3, [r3, #24]
    }
 800aed4:	4618      	mov	r0, r3
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800aee4:	4b05      	ldr	r3, [pc, #20]	; (800aefc <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d103      	bne.n	800aef4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800aeec:	f004 fa38 	bl	800f360 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800aef0:	4603      	mov	r3, r0
 800aef2:	e001      	b.n	800aef8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800aef4:	4b01      	ldr	r3, [pc, #4]	; (800aefc <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800aef6:	781b      	ldrb	r3, [r3, #0]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	20000084 	.word	0x20000084

0800af00 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800af08:	4a0a      	ldr	r2, [pc, #40]	; (800af34 <_ZN10TestOutputC1Ev+0x34>)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	601a      	str	r2, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	605a      	str	r2, [r3, #4]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	721a      	strb	r2, [r3, #8]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	725a      	strb	r2, [r3, #9]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a05      	ldr	r2, [pc, #20]	; (800af38 <_ZN10TestOutputC1Ev+0x38>)
 800af24:	60da      	str	r2, [r3, #12]
{
}
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4618      	mov	r0, r3
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr
 800af34:	0801891c 	.word	0x0801891c
 800af38:	08016a68 	.word	0x08016a68

0800af3c <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	4a04      	ldr	r2, [pc, #16]	; (800af58 <_ZN10TestOutputD1Ev+0x1c>)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	601a      	str	r2, [r3, #0]
{
}
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4618      	mov	r0, r3
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr
 800af58:	0801891c 	.word	0x0801891c

0800af5c <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	460b      	mov	r3, r1
 800af66:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	78fa      	ldrb	r2, [r7, #3]
 800af6c:	721a      	strb	r2, [r3, #8]
}
 800af6e:	bf00      	nop
 800af70:	370c      	adds	r7, #12
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800af7a:	b480      	push	{r7}
 800af7c:	b083      	sub	sp, #12
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
    color_ = true;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2201      	movs	r2, #1
 800af86:	725a      	strb	r2, [r3, #9]
}
 800af88:	bf00      	nop
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3328      	adds	r3, #40	; 0x28
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	4798      	blx	r3
}
 800afac:	bf00      	nop
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800afb4:	b590      	push	{r4, r7, lr}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	332c      	adds	r3, #44	; 0x2c
 800afc4:	681c      	ldr	r4, [r3, #0]
 800afc6:	f107 0308 	add.w	r3, r7, #8
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fd f9ef 	bl	80083b0 <_Z10StringFroml>
 800afd2:	f107 0308 	add.w	r3, r7, #8
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fc ff02 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 800afdc:	4603      	mov	r3, r0
 800afde:	4619      	mov	r1, r3
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	47a0      	blx	r4
 800afe4:	f107 0308 	add.w	r3, r7, #8
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fc ff26 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800afee:	bf00      	nop
 800aff0:	3714      	adds	r7, #20
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd90      	pop	{r4, r7, pc}

0800aff6 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800aff6:	b590      	push	{r4, r7, lr}
 800aff8:	b085      	sub	sp, #20
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
 800affe:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	332c      	adds	r3, #44	; 0x2c
 800b006:	681c      	ldr	r4, [r3, #0]
 800b008:	f107 0308 	add.w	r3, r7, #8
 800b00c:	6839      	ldr	r1, [r7, #0]
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fd fbc8 	bl	80087a4 <_Z10StringFromj>
 800b014:	f107 0308 	add.w	r3, r7, #8
 800b018:	4618      	mov	r0, r3
 800b01a:	f7fc fee1 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 800b01e:	4603      	mov	r3, r0
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	47a0      	blx	r4
 800b026:	f107 0308 	add.w	r3, r7, #8
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fc ff05 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800b030:	bf00      	nop
 800b032:	3714      	adds	r7, #20
 800b034:	46bd      	mov	sp, r7
 800b036:	bd90      	pop	{r4, r7, pc}

0800b038 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800b038:	b590      	push	{r4, r7, lr}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	332c      	adds	r3, #44	; 0x2c
 800b04a:	681c      	ldr	r4, [r3, #0]
 800b04c:	f107 0310 	add.w	r3, r7, #16
 800b050:	2106      	movs	r1, #6
 800b052:	ed97 0b00 	vldr	d0, [r7]
 800b056:	4618      	mov	r0, r3
 800b058:	f7fd fb3a 	bl	80086d0 <_Z10StringFromdi>
 800b05c:	f107 0310 	add.w	r3, r7, #16
 800b060:	4618      	mov	r0, r3
 800b062:	f7fc febd 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 800b066:	4603      	mov	r3, r0
 800b068:	4619      	mov	r1, r3
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	47a0      	blx	r4
 800b06e:	f107 0310 	add.w	r3, r7, #16
 800b072:	4618      	mov	r0, r3
 800b074:	f7fc fee1 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800b078:	bf00      	nop
 800b07a:	371c      	adds	r7, #28
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd90      	pop	{r4, r7, pc}

0800b080 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
    p.print(s);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	332c      	adds	r3, #44	; 0x2c
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	4798      	blx	r3
    return p;
 800b098:	687b      	ldr	r3, [r7, #4]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
	...

0800b0a4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800b0a4:	b590      	push	{r4, r7, lr}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	7a1b      	ldrb	r3, [r3, #8]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d01a      	beq.n	800b0ec <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	332c      	adds	r3, #44	; 0x2c
 800b0bc:	681c      	ldr	r4, [r3, #0]
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	3314      	adds	r3, #20
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f107 0208 	add.w	r2, r7, #8
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	4798      	blx	r3
 800b0d0:	f107 0308 	add.w	r3, r7, #8
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fc fe83 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	4619      	mov	r1, r3
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	47a0      	blx	r4
 800b0e2:	f107 0308 	add.w	r3, r7, #8
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fc fea7 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	3318      	adds	r3, #24
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6838      	ldr	r0, [r7, #0]
 800b0f6:	4798      	blx	r3
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d007      	beq.n	800b10e <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3344      	adds	r3, #68	; 0x44
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4907      	ldr	r1, [pc, #28]	; (800b124 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800b10c:	e006      	b.n	800b11c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	3344      	adds	r3, #68	; 0x44
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4904      	ldr	r1, [pc, #16]	; (800b128 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	4798      	blx	r3
}
 800b11c:	bf00      	nop
 800b11e:	3714      	adds	r7, #20
 800b120:	46bd      	mov	sp, r7
 800b122:	bd90      	pop	{r4, r7, pc}
 800b124:	08016a68 	.word	0x08016a68
 800b128:	08016a6c 	.word	0x08016a6c

0800b12c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800b12c:	b590      	push	{r4, r7, lr}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	7a1b      	ldrb	r3, [r3, #8]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d019      	beq.n	800b172 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	332c      	adds	r3, #44	; 0x2c
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4910      	ldr	r1, [pc, #64]	; (800b188 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	3334      	adds	r3, #52	; 0x34
 800b152:	681c      	ldr	r4, [r3, #0]
 800b154:	6838      	ldr	r0, [r7, #0]
 800b156:	f002 f845 	bl	800d1e4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800b15a:	4603      	mov	r3, r0
 800b15c:	4619      	mov	r1, r3
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	47a0      	blx	r4
        print(" ms\n");
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	332c      	adds	r3, #44	; 0x2c
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4908      	ldr	r1, [pc, #32]	; (800b18c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800b170:	e005      	b.n	800b17e <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3358      	adds	r3, #88	; 0x58
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	4798      	blx	r3
}
 800b17e:	bf00      	nop
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	bd90      	pop	{r4, r7, pc}
 800b186:	bf00      	nop
 800b188:	08016a70 	.word	0x08016a70
 800b18c:	08016a74 	.word	0x08016a74

0800b190 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	332c      	adds	r3, #44	; 0x2c
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	68d2      	ldr	r2, [r2, #12]
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	1c5a      	adds	r2, r3, #1
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	605a      	str	r2, [r3, #4]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	685a      	ldr	r2, [r3, #4]
 800b1b8:	4b0d      	ldr	r3, [pc, #52]	; (800b1f0 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800b1ba:	fb83 1302 	smull	r1, r3, r3, r2
 800b1be:	1119      	asrs	r1, r3, #4
 800b1c0:	17d3      	asrs	r3, r2, #31
 800b1c2:	1acb      	subs	r3, r1, r3
 800b1c4:	2132      	movs	r1, #50	; 0x32
 800b1c6:	fb01 f303 	mul.w	r3, r1, r3
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	bf0c      	ite	eq
 800b1d0:	2301      	moveq	r3, #1
 800b1d2:	2300      	movne	r3, #0
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d006      	beq.n	800b1e8 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	332c      	adds	r3, #44	; 0x2c
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4904      	ldr	r1, [pc, #16]	; (800b1f4 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	4798      	blx	r3
}
 800b1e8:	bf00      	nop
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	51eb851f 	.word	0x51eb851f
 800b1f4:	08016a7c 	.word	0x08016a7c

0800b1f8 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	683a      	ldr	r2, [r7, #0]
 800b206:	60da      	str	r2, [r3, #12]
}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
}
 800b232:	bf00      	nop
 800b234:	370c      	adds	r7, #12
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800b23e:	b480      	push	{r7}
 800b240:	b083      	sub	sp, #12
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	6039      	str	r1, [r7, #0]
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800b254:	b590      	push	{r4, r7, lr}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
    print("\n");
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	332c      	adds	r3, #44	; 0x2c
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	496f      	ldr	r1, [pc, #444]	; (800b424 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800b26c:	6838      	ldr	r0, [r7, #0]
 800b26e:	f7f9 fe25 	bl	8004ebc <_ZNK10TestResult9isFailureEv>
 800b272:	4603      	mov	r3, r0
 800b274:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800b276:	6838      	ldr	r0, [r7, #0]
 800b278:	f7f9 fe14 	bl	8004ea4 <_ZNK10TestResult15getFailureCountEv>
 800b27c:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800b27e:	7bfb      	ldrb	r3, [r7, #15]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d02b      	beq.n	800b2dc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	7a5b      	ldrb	r3, [r3, #9]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d006      	beq.n	800b29a <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	332c      	adds	r3, #44	; 0x2c
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4964      	ldr	r1, [pc, #400]	; (800b428 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	4798      	blx	r3
        }
        print("Errors (");
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	332c      	adds	r3, #44	; 0x2c
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4962      	ldr	r1, [pc, #392]	; (800b42c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	4798      	blx	r3
        if (failureCount > 0) {
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00e      	beq.n	800b2cc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3334      	adds	r3, #52	; 0x34
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68b9      	ldr	r1, [r7, #8]
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	4798      	blx	r3
            print(" failures, ");
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	332c      	adds	r3, #44	; 0x2c
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	495a      	ldr	r1, [pc, #360]	; (800b430 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	4798      	blx	r3
 800b2ca:	e019      	b.n	800b300 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	332c      	adds	r3, #44	; 0x2c
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4957      	ldr	r1, [pc, #348]	; (800b434 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	4798      	blx	r3
 800b2da:	e011      	b.n	800b300 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	7a5b      	ldrb	r3, [r3, #9]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d006      	beq.n	800b2f2 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	332c      	adds	r3, #44	; 0x2c
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4952      	ldr	r1, [pc, #328]	; (800b438 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	4798      	blx	r3
        }
        print("OK (");
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	332c      	adds	r3, #44	; 0x2c
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4950      	ldr	r1, [pc, #320]	; (800b43c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	4798      	blx	r3
    }
    print(result.getTestCount());
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	3334      	adds	r3, #52	; 0x34
 800b306:	681c      	ldr	r4, [r3, #0]
 800b308:	6838      	ldr	r0, [r7, #0]
 800b30a:	f7ff fdd1 	bl	800aeb0 <_ZNK10TestResult12getTestCountEv>
 800b30e:	4603      	mov	r3, r0
 800b310:	4619      	mov	r1, r3
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	47a0      	blx	r4
    print(" tests, ");
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	332c      	adds	r3, #44	; 0x2c
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4948      	ldr	r1, [pc, #288]	; (800b440 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	4798      	blx	r3
    print(result.getRunCount());
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3334      	adds	r3, #52	; 0x34
 800b32a:	681c      	ldr	r4, [r3, #0]
 800b32c:	6838      	ldr	r0, [r7, #0]
 800b32e:	f7f9 fda1 	bl	8004e74 <_ZNK10TestResult11getRunCountEv>
 800b332:	4603      	mov	r3, r0
 800b334:	4619      	mov	r1, r3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	47a0      	blx	r4
    print(" ran, ");
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	332c      	adds	r3, #44	; 0x2c
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4940      	ldr	r1, [pc, #256]	; (800b444 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	4798      	blx	r3
    print(result.getCheckCount());
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	3334      	adds	r3, #52	; 0x34
 800b34e:	681c      	ldr	r4, [r3, #0]
 800b350:	6838      	ldr	r0, [r7, #0]
 800b352:	f7fa f9fb 	bl	800574c <_ZNK10TestResult13getCheckCountEv>
 800b356:	4603      	mov	r3, r0
 800b358:	4619      	mov	r1, r3
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	47a0      	blx	r4
    print(" checks, ");
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	332c      	adds	r3, #44	; 0x2c
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4938      	ldr	r1, [pc, #224]	; (800b448 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	4798      	blx	r3
    print(result.getIgnoredCount());
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3334      	adds	r3, #52	; 0x34
 800b372:	681c      	ldr	r4, [r3, #0]
 800b374:	6838      	ldr	r0, [r7, #0]
 800b376:	f7f9 fd89 	bl	8004e8c <_ZNK10TestResult15getIgnoredCountEv>
 800b37a:	4603      	mov	r3, r0
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	47a0      	blx	r4
    print(" ignored, ");
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	332c      	adds	r3, #44	; 0x2c
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4930      	ldr	r1, [pc, #192]	; (800b44c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3334      	adds	r3, #52	; 0x34
 800b396:	681c      	ldr	r4, [r3, #0]
 800b398:	6838      	ldr	r0, [r7, #0]
 800b39a:	f7ff fd95 	bl	800aec8 <_ZNK10TestResult19getFilteredOutCountEv>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	47a0      	blx	r4
    print(" filtered out, ");
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	332c      	adds	r3, #44	; 0x2c
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4928      	ldr	r1, [pc, #160]	; (800b450 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3334      	adds	r3, #52	; 0x34
 800b3ba:	681c      	ldr	r4, [r3, #0]
 800b3bc:	6838      	ldr	r0, [r7, #0]
 800b3be:	f001 ff05 	bl	800d1cc <_ZNK10TestResult21getTotalExecutionTimeEv>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	47a0      	blx	r4
    print(" ms)");
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	332c      	adds	r3, #44	; 0x2c
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4920      	ldr	r1, [pc, #128]	; (800b454 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	4798      	blx	r3
    if (color_) {
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	7a5b      	ldrb	r3, [r3, #9]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d006      	beq.n	800b3ee <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	332c      	adds	r3, #44	; 0x2c
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	491b      	ldr	r1, [pc, #108]	; (800b458 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d009      	beq.n	800b408 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d106      	bne.n	800b408 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	332c      	adds	r3, #44	; 0x2c
 800b400:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800b402:	4916      	ldr	r1, [pc, #88]	; (800b45c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	4798      	blx	r3
    }
    print("\n\n");
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	332c      	adds	r3, #44	; 0x2c
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4913      	ldr	r1, [pc, #76]	; (800b460 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	4798      	blx	r3

    dotCount_ = 0;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	605a      	str	r2, [r3, #4]
}
 800b41c:	bf00      	nop
 800b41e:	3714      	adds	r7, #20
 800b420:	46bd      	mov	sp, r7
 800b422:	bd90      	pop	{r4, r7, pc}
 800b424:	08016a7c 	.word	0x08016a7c
 800b428:	08016a80 	.word	0x08016a80
 800b42c:	08016a88 	.word	0x08016a88
 800b430:	08016a94 	.word	0x08016a94
 800b434:	08016aa0 	.word	0x08016aa0
 800b438:	08016ab0 	.word	0x08016ab0
 800b43c:	08016ab8 	.word	0x08016ab8
 800b440:	08016ac0 	.word	0x08016ac0
 800b444:	08016acc 	.word	0x08016acc
 800b448:	08016ad4 	.word	0x08016ad4
 800b44c:	08016ae0 	.word	0x08016ae0
 800b450:	08016aec 	.word	0x08016aec
 800b454:	08016afc 	.word	0x08016afc
 800b458:	08016b04 	.word	0x08016b04
 800b45c:	08016b08 	.word	0x08016b08
 800b460:	08016bac 	.word	0x08016bac

0800b464 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d922      	bls.n	800b4bc <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	332c      	adds	r3, #44	; 0x2c
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4911      	ldr	r1, [pc, #68]	; (800b4c4 <_ZN10TestOutput12printTestRunEjj+0x60>)
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	4798      	blx	r3
        print(number);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	3334      	adds	r3, #52	; 0x34
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	68b9      	ldr	r1, [r7, #8]
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	4798      	blx	r3
        print(" of ");
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	332c      	adds	r3, #44	; 0x2c
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	490b      	ldr	r1, [pc, #44]	; (800b4c8 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	4798      	blx	r3
        print(total);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3334      	adds	r3, #52	; 0x34
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	6879      	ldr	r1, [r7, #4]
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	4798      	blx	r3
        print("\n");
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	332c      	adds	r3, #44	; 0x2c
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4905      	ldr	r1, [pc, #20]	; (800b4cc <_ZN10TestOutput12printTestRunEjj+0x68>)
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	4798      	blx	r3
    }
}
 800b4bc:	bf00      	nop
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	08016bb0 	.word	0x08016bb0
 800b4c8:	08016bbc 	.word	0x08016bbc
 800b4cc:	08016a7c 	.word	0x08016a7c

0800b4d0 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800b4da:	6838      	ldr	r0, [r7, #0]
 800b4dc:	f7fd ffa1 	bl	8009422 <_ZNK11TestFailure17isOutsideTestFileEv>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d105      	bne.n	800b4f2 <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800b4e6:	6838      	ldr	r0, [r7, #0]
 800b4e8:	f7fd ffad 	bl	8009446 <_ZNK11TestFailure18isInHelperFunctionEv>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d001      	beq.n	800b4f6 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e000      	b.n	800b4f8 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d004      	beq.n	800b506 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800b4fc:	6839      	ldr	r1, [r7, #0]
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f81d 	bl	800b53e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800b504:	e003      	b.n	800b50e <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800b506:	6839      	ldr	r1, [r7, #0]
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 f86b 	bl	800b5e4 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3318      	adds	r3, #24
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f107 0208 	add.w	r2, r7, #8
 800b51a:	6839      	ldr	r1, [r7, #0]
 800b51c:	4610      	mov	r0, r2
 800b51e:	4798      	blx	r3
 800b520:	f107 0308 	add.w	r3, r7, #8
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f8b2 	bl	800b690 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800b52c:	f107 0308 	add.w	r3, r7, #8
 800b530:	4618      	mov	r0, r3
 800b532:	f7fc fc82 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800b536:	bf00      	nop
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b088      	sub	sp, #32
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
 800b546:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	331c      	adds	r3, #28
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f107 0208 	add.w	r2, r7, #8
 800b554:	6839      	ldr	r1, [r7, #0]
 800b556:	4610      	mov	r0, r2
 800b558:	4798      	blx	r3
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	3320      	adds	r3, #32
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	6838      	ldr	r0, [r7, #0]
 800b564:	4798      	blx	r3
 800b566:	4602      	mov	r2, r0
 800b568:	f107 0308 	add.w	r3, r7, #8
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f8be 	bl	800b6f0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800b574:	f107 0308 	add.w	r3, r7, #8
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fc fc5e 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	330c      	adds	r3, #12
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f107 0210 	add.w	r2, r7, #16
 800b58a:	6839      	ldr	r1, [r7, #0]
 800b58c:	4610      	mov	r0, r2
 800b58e:	4798      	blx	r3
 800b590:	f107 0310 	add.w	r3, r7, #16
 800b594:	4619      	mov	r1, r3
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f85c 	bl	800b654 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800b59c:	f107 0310 	add.w	r3, r7, #16
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fc fc4a 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	3308      	adds	r3, #8
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f107 0218 	add.w	r2, r7, #24
 800b5b2:	6839      	ldr	r1, [r7, #0]
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	4798      	blx	r3
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3314      	adds	r3, #20
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	6838      	ldr	r0, [r7, #0]
 800b5c2:	4798      	blx	r3
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	f107 0318 	add.w	r3, r7, #24
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f88f 	bl	800b6f0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800b5d2:	f107 0318 	add.w	r3, r7, #24
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fc fc2f 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800b5dc:	bf00      	nop
 800b5de:	3720      	adds	r7, #32
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b086      	sub	sp, #24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	3308      	adds	r3, #8
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f107 0208 	add.w	r2, r7, #8
 800b5fa:	6839      	ldr	r1, [r7, #0]
 800b5fc:	4610      	mov	r0, r2
 800b5fe:	4798      	blx	r3
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	3314      	adds	r3, #20
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6838      	ldr	r0, [r7, #0]
 800b60a:	4798      	blx	r3
 800b60c:	4602      	mov	r2, r0
 800b60e:	f107 0308 	add.w	r3, r7, #8
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f86b 	bl	800b6f0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800b61a:	f107 0308 	add.w	r3, r7, #8
 800b61e:	4618      	mov	r0, r3
 800b620:	f7fc fc0b 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	330c      	adds	r3, #12
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f107 0210 	add.w	r2, r7, #16
 800b630:	6839      	ldr	r1, [r7, #0]
 800b632:	4610      	mov	r0, r2
 800b634:	4798      	blx	r3
 800b636:	f107 0310 	add.w	r3, r7, #16
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f809 	bl	800b654 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800b642:	f107 0310 	add.w	r3, r7, #16
 800b646:	4618      	mov	r0, r3
 800b648:	f7fc fbf7 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800b64c:	bf00      	nop
 800b64e:	3718      	adds	r7, #24
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800b654:	b590      	push	{r4, r7, lr}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	332c      	adds	r3, #44	; 0x2c
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4909      	ldr	r1, [pc, #36]	; (800b68c <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	4798      	blx	r3
    print(testName.asCharString());
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	332c      	adds	r3, #44	; 0x2c
 800b672:	681c      	ldr	r4, [r3, #0]
 800b674:	6838      	ldr	r0, [r7, #0]
 800b676:	f7fc fbb3 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 800b67a:	4603      	mov	r3, r0
 800b67c:	4619      	mov	r1, r3
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	47a0      	blx	r4
}
 800b682:	bf00      	nop
 800b684:	370c      	adds	r7, #12
 800b686:	46bd      	mov	sp, r7
 800b688:	bd90      	pop	{r4, r7, pc}
 800b68a:	bf00      	nop
 800b68c:	08016bc4 	.word	0x08016bc4

0800b690 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800b690:	b590      	push	{r4, r7, lr}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
    print("\n");
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	332c      	adds	r3, #44	; 0x2c
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4910      	ldr	r1, [pc, #64]	; (800b6e4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	4798      	blx	r3
    print("\t");
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	332c      	adds	r3, #44	; 0x2c
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	490d      	ldr	r1, [pc, #52]	; (800b6e8 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	4798      	blx	r3
    print(reason.asCharString());
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	332c      	adds	r3, #44	; 0x2c
 800b6bc:	681c      	ldr	r4, [r3, #0]
 800b6be:	6838      	ldr	r0, [r7, #0]
 800b6c0:	f7fc fb8e 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	47a0      	blx	r4
    print("\n\n");
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	332c      	adds	r3, #44	; 0x2c
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4905      	ldr	r1, [pc, #20]	; (800b6ec <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	4798      	blx	r3
}
 800b6da:	bf00      	nop
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd90      	pop	{r4, r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	08016a7c 	.word	0x08016a7c
 800b6e8:	08016bd4 	.word	0x08016bd4
 800b6ec:	08016bac 	.word	0x08016bac

0800b6f0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800b6f0:	b590      	push	{r4, r7, lr}
 800b6f2:	b089      	sub	sp, #36	; 0x24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800b6fc:	f7ff fbf0 	bl	800aee0 <_ZN10TestOutput21getWorkingEnvironmentEv>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	bf0c      	ite	eq
 800b706:	2301      	moveq	r3, #1
 800b708:	2300      	movne	r3, #0
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d015      	beq.n	800b73c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	3354      	adds	r3, #84	; 0x54
 800b716:	681c      	ldr	r4, [r3, #0]
 800b718:	f107 0310 	add.w	r3, r7, #16
 800b71c:	68b9      	ldr	r1, [r7, #8]
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fc f827 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
 800b724:	f107 0310 	add.w	r3, r7, #16
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	4619      	mov	r1, r3
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	47a0      	blx	r4
 800b730:	f107 0310 	add.w	r3, r7, #16
 800b734:	4618      	mov	r0, r3
 800b736:	f7fc fb80 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800b73a:	e014      	b.n	800b766 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3350      	adds	r3, #80	; 0x50
 800b742:	681c      	ldr	r4, [r3, #0]
 800b744:	f107 0318 	add.w	r3, r7, #24
 800b748:	68b9      	ldr	r1, [r7, #8]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fc f811 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
 800b750:	f107 0318 	add.w	r3, r7, #24
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	4619      	mov	r1, r3
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	47a0      	blx	r4
 800b75c:	f107 0318 	add.w	r3, r7, #24
 800b760:	4618      	mov	r0, r3
 800b762:	f7fc fb6a 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800b766:	bf00      	nop
 800b768:	3724      	adds	r7, #36	; 0x24
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd90      	pop	{r4, r7, pc}
	...

0800b770 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800b770:	b590      	push	{r4, r7, lr}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
    print("\n");
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	332c      	adds	r3, #44	; 0x2c
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4916      	ldr	r1, [pc, #88]	; (800b7e0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800b786:	68f8      	ldr	r0, [r7, #12]
 800b788:	4798      	blx	r3
    print(file.asCharString());
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	332c      	adds	r3, #44	; 0x2c
 800b790:	681c      	ldr	r4, [r3, #0]
 800b792:	68b8      	ldr	r0, [r7, #8]
 800b794:	f7fc fb24 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 800b798:	4603      	mov	r3, r0
 800b79a:	4619      	mov	r1, r3
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	47a0      	blx	r4
    print(":");
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	332c      	adds	r3, #44	; 0x2c
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	490e      	ldr	r1, [pc, #56]	; (800b7e4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	4798      	blx	r3
    print(lineNumber);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3334      	adds	r3, #52	; 0x34
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	6879      	ldr	r1, [r7, #4]
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	4798      	blx	r3
    print(":");
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	332c      	adds	r3, #44	; 0x2c
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4907      	ldr	r1, [pc, #28]	; (800b7e4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	4798      	blx	r3
    print(" error:");
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	332c      	adds	r3, #44	; 0x2c
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4905      	ldr	r1, [pc, #20]	; (800b7e8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	4798      	blx	r3
}
 800b7d8:	bf00      	nop
 800b7da:	3714      	adds	r7, #20
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd90      	pop	{r4, r7, pc}
 800b7e0:	08016a7c 	.word	0x08016a7c
 800b7e4:	08016bd8 	.word	0x08016bd8
 800b7e8:	08016bdc 	.word	0x08016bdc

0800b7ec <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800b7ec:	b590      	push	{r4, r7, lr}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
    print("\n");
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	332c      	adds	r3, #44	; 0x2c
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4916      	ldr	r1, [pc, #88]	; (800b85c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	4798      	blx	r3
    print(file.asCharString());
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	332c      	adds	r3, #44	; 0x2c
 800b80c:	681c      	ldr	r4, [r3, #0]
 800b80e:	68b8      	ldr	r0, [r7, #8]
 800b810:	f7fc fae6 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 800b814:	4603      	mov	r3, r0
 800b816:	4619      	mov	r1, r3
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	47a0      	blx	r4
    print("(");
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	332c      	adds	r3, #44	; 0x2c
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	490e      	ldr	r1, [pc, #56]	; (800b860 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	4798      	blx	r3
    print(lineNumber);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	3334      	adds	r3, #52	; 0x34
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6879      	ldr	r1, [r7, #4]
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	4798      	blx	r3
    print("):");
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	332c      	adds	r3, #44	; 0x2c
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4908      	ldr	r1, [pc, #32]	; (800b864 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	4798      	blx	r3
    print(" error:");
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	332c      	adds	r3, #44	; 0x2c
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4906      	ldr	r1, [pc, #24]	; (800b868 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	4798      	blx	r3
}
 800b854:	bf00      	nop
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd90      	pop	{r4, r7, pc}
 800b85c:	08016a7c 	.word	0x08016a7c
 800b860:	08016be4 	.word	0x08016be4
 800b864:	08016be8 	.word	0x08016be8
 800b868:	08016bdc 	.word	0x08016bdc

0800b86c <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	7a1b      	ldrb	r3, [r3, #8]
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d106      	bne.n	800b88c <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3328      	adds	r3, #40	; 0x28
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6839      	ldr	r1, [r7, #0]
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	4798      	blx	r3
}
 800b88c:	bf00      	nop
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
    while (*s) {
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d009      	beq.n	800b8ba <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800b8a6:	4b0a      	ldr	r3, [pc, #40]	; (800b8d0 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	683a      	ldr	r2, [r7, #0]
 800b8ac:	7812      	ldrb	r2, [r2, #0]
 800b8ae:	4610      	mov	r0, r2
 800b8b0:	4798      	blx	r3
        s++;
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	603b      	str	r3, [r7, #0]
    while (*s) {
 800b8b8:	e7f1      	b.n	800b89e <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	334c      	adds	r3, #76	; 0x4c
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	4798      	blx	r3
}
 800b8c6:	bf00      	nop
 800b8c8:	3708      	adds	r7, #8
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	200000bc 	.word	0x200000bc

0800b8d4 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800b8dc:	4b03      	ldr	r3, [pc, #12]	; (800b8ec <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4798      	blx	r3
}
 800b8e2:	bf00      	nop
 800b8e4:	3708      	adds	r7, #8
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	200000c0 	.word	0x200000c0

0800b8f0 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7ff fb00 	bl	800af00 <_ZN10TestOutputC1Ev>
 800b900:	4a06      	ldr	r2, [pc, #24]	; (800b91c <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	601a      	str	r2, [r3, #0]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	611a      	str	r2, [r3, #16]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	615a      	str	r2, [r3, #20]
{
}
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4618      	mov	r0, r3
 800b916:	3708      	adds	r7, #8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	0801884c 	.word	0x0801884c

0800b920 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	4a0e      	ldr	r2, [pc, #56]	; (800b964 <_ZN19CompositeTestOutputD1Ev+0x44>)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d004      	beq.n	800b940 <_ZN19CompositeTestOutputD1Ev+0x20>
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	3204      	adds	r2, #4
 800b93a:	6812      	ldr	r2, [r2, #0]
 800b93c:	4618      	mov	r0, r3
 800b93e:	4790      	blx	r2
  delete outputTwo_;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	695b      	ldr	r3, [r3, #20]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d004      	beq.n	800b952 <_ZN19CompositeTestOutputD1Ev+0x32>
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	3204      	adds	r2, #4
 800b94c:	6812      	ldr	r2, [r2, #0]
 800b94e:	4618      	mov	r0, r3
 800b950:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4618      	mov	r0, r3
 800b956:	f7ff faf1 	bl	800af3c <_ZN10TestOutputD1Ev>
}
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4618      	mov	r0, r3
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	0801884c 	.word	0x0801884c

0800b968 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
}
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7ff ffd5 	bl	800b920 <_ZN19CompositeTestOutputD1Ev>
 800b976:	2118      	movs	r1, #24
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f7fa ffd1 	bl	8006920 <_ZdlPvj>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4618      	mov	r0, r3
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d004      	beq.n	800b9a4 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	3204      	adds	r2, #4
 800b99e:	6812      	ldr	r2, [r2, #0]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	4790      	blx	r2
  outputOne_ = output;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	611a      	str	r2, [r3, #16]
}
 800b9aa:	bf00      	nop
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b082      	sub	sp, #8
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	695b      	ldr	r3, [r3, #20]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d004      	beq.n	800b9ce <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	3204      	adds	r2, #4
 800b9c8:	6812      	ldr	r2, [r2, #0]
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	4790      	blx	r2
  outputTwo_ = output;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	615a      	str	r2, [r3, #20]
}
 800b9d4:	bf00      	nop
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d008      	beq.n	800b9fe <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	691a      	ldr	r2, [r3, #16]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	691b      	ldr	r3, [r3, #16]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	3308      	adds	r3, #8
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4610      	mov	r0, r2
 800b9fc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	695b      	ldr	r3, [r3, #20]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d008      	beq.n	800ba18 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	695a      	ldr	r2, [r3, #20]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	695b      	ldr	r3, [r3, #20]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	3308      	adds	r3, #8
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4610      	mov	r0, r2
 800ba16:	4798      	blx	r3
}
 800ba18:	bf00      	nop
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d009      	beq.n	800ba46 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	691a      	ldr	r2, [r3, #16]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	691b      	ldr	r3, [r3, #16]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	330c      	adds	r3, #12
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	4610      	mov	r0, r2
 800ba44:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d009      	beq.n	800ba62 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	695a      	ldr	r2, [r3, #20]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	330c      	adds	r3, #12
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	6839      	ldr	r1, [r7, #0]
 800ba5e:	4610      	mov	r0, r2
 800ba60:	4798      	blx	r3
}
 800ba62:	bf00      	nop
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b082      	sub	sp, #8
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	691b      	ldr	r3, [r3, #16]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d009      	beq.n	800ba90 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	691a      	ldr	r2, [r3, #16]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	691b      	ldr	r3, [r3, #16]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3310      	adds	r3, #16
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	6839      	ldr	r1, [r7, #0]
 800ba8c:	4610      	mov	r0, r2
 800ba8e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	695b      	ldr	r3, [r3, #20]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d009      	beq.n	800baac <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	695a      	ldr	r2, [r3, #20]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	695b      	ldr	r3, [r3, #20]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3310      	adds	r3, #16
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	6839      	ldr	r1, [r7, #0]
 800baa8:	4610      	mov	r0, r2
 800baaa:	4798      	blx	r3
}
 800baac:	bf00      	nop
 800baae:	3708      	adds	r7, #8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d009      	beq.n	800bada <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	691a      	ldr	r2, [r3, #16]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	3314      	adds	r3, #20
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	6839      	ldr	r1, [r7, #0]
 800bad6:	4610      	mov	r0, r2
 800bad8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	695b      	ldr	r3, [r3, #20]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d009      	beq.n	800baf6 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	695a      	ldr	r2, [r3, #20]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	695b      	ldr	r3, [r3, #20]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	3314      	adds	r3, #20
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	6839      	ldr	r1, [r7, #0]
 800baf2:	4610      	mov	r0, r2
 800baf4:	4798      	blx	r3
}
 800baf6:	bf00      	nop
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b082      	sub	sp, #8
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	691b      	ldr	r3, [r3, #16]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d009      	beq.n	800bb24 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	691a      	ldr	r2, [r3, #16]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	691b      	ldr	r3, [r3, #16]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3318      	adds	r3, #24
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	4610      	mov	r0, r2
 800bb22:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	695b      	ldr	r3, [r3, #20]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d009      	beq.n	800bb40 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	695a      	ldr	r2, [r3, #20]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	695b      	ldr	r3, [r3, #20]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	3318      	adds	r3, #24
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	6839      	ldr	r1, [r7, #0]
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	4798      	blx	r3
}
 800bb40:	bf00      	nop
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d009      	beq.n	800bb6e <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	691a      	ldr	r2, [r3, #16]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	331c      	adds	r3, #28
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	4610      	mov	r0, r2
 800bb6c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	695b      	ldr	r3, [r3, #20]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d009      	beq.n	800bb8a <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	695a      	ldr	r2, [r3, #20]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	695b      	ldr	r3, [r3, #20]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	331c      	adds	r3, #28
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	6839      	ldr	r1, [r7, #0]
 800bb86:	4610      	mov	r0, r2
 800bb88:	4798      	blx	r3
}
 800bb8a:	bf00      	nop
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b082      	sub	sp, #8
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d009      	beq.n	800bbba <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	691a      	ldr	r2, [r3, #16]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	3320      	adds	r3, #32
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	78f9      	ldrb	r1, [r7, #3]
 800bbb6:	4610      	mov	r0, r2
 800bbb8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	695b      	ldr	r3, [r3, #20]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d009      	beq.n	800bbd6 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	695a      	ldr	r2, [r3, #20]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	3320      	adds	r3, #32
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	78f9      	ldrb	r1, [r7, #3]
 800bbd2:	4610      	mov	r0, r2
 800bbd4:	4798      	blx	r3
}
 800bbd6:	bf00      	nop
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d008      	beq.n	800bc00 <_ZN19CompositeTestOutput5colorEv+0x22>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	691a      	ldr	r2, [r3, #16]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	3324      	adds	r3, #36	; 0x24
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	695b      	ldr	r3, [r3, #20]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d008      	beq.n	800bc1a <_ZN19CompositeTestOutput5colorEv+0x3c>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	695a      	ldr	r2, [r3, #20]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	695b      	ldr	r3, [r3, #20]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3324      	adds	r3, #36	; 0x24
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4610      	mov	r0, r2
 800bc18:	4798      	blx	r3
}
 800bc1a:	bf00      	nop
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b082      	sub	sp, #8
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	691b      	ldr	r3, [r3, #16]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d009      	beq.n	800bc48 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	691a      	ldr	r2, [r3, #16]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3328      	adds	r3, #40	; 0x28
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	6839      	ldr	r1, [r7, #0]
 800bc44:	4610      	mov	r0, r2
 800bc46:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	695b      	ldr	r3, [r3, #20]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d009      	beq.n	800bc64 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	695a      	ldr	r2, [r3, #20]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	695b      	ldr	r3, [r3, #20]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	3328      	adds	r3, #40	; 0x28
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	4610      	mov	r0, r2
 800bc62:	4798      	blx	r3
}
 800bc64:	bf00      	nop
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d009      	beq.n	800bc92 <_ZN19CompositeTestOutput5printEPKc+0x26>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	691a      	ldr	r2, [r3, #16]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	332c      	adds	r3, #44	; 0x2c
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6839      	ldr	r1, [r7, #0]
 800bc8e:	4610      	mov	r0, r2
 800bc90:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d009      	beq.n	800bcae <_ZN19CompositeTestOutput5printEPKc+0x42>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	695a      	ldr	r2, [r3, #20]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	695b      	ldr	r3, [r3, #20]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	332c      	adds	r3, #44	; 0x2c
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	4610      	mov	r0, r2
 800bcac:	4798      	blx	r3
}
 800bcae:	bf00      	nop
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b082      	sub	sp, #8
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
 800bcbe:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	691b      	ldr	r3, [r3, #16]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d009      	beq.n	800bcdc <_ZN19CompositeTestOutput5printEl+0x26>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	691a      	ldr	r2, [r3, #16]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	691b      	ldr	r3, [r3, #16]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	3330      	adds	r3, #48	; 0x30
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	6839      	ldr	r1, [r7, #0]
 800bcd8:	4610      	mov	r0, r2
 800bcda:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	695b      	ldr	r3, [r3, #20]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d009      	beq.n	800bcf8 <_ZN19CompositeTestOutput5printEl+0x42>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	695a      	ldr	r2, [r3, #20]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	695b      	ldr	r3, [r3, #20]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	3330      	adds	r3, #48	; 0x30
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	6839      	ldr	r1, [r7, #0]
 800bcf4:	4610      	mov	r0, r2
 800bcf6:	4798      	blx	r3
}
 800bcf8:	bf00      	nop
 800bcfa:	3708      	adds	r7, #8
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	691b      	ldr	r3, [r3, #16]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d009      	beq.n	800bd26 <_ZN19CompositeTestOutput5printEj+0x26>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	691a      	ldr	r2, [r3, #16]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	3334      	adds	r3, #52	; 0x34
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	4610      	mov	r0, r2
 800bd24:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	695b      	ldr	r3, [r3, #20]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d009      	beq.n	800bd42 <_ZN19CompositeTestOutput5printEj+0x42>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	695a      	ldr	r2, [r3, #20]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	695b      	ldr	r3, [r3, #20]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	3334      	adds	r3, #52	; 0x34
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	6839      	ldr	r1, [r7, #0]
 800bd3e:	4610      	mov	r0, r2
 800bd40:	4798      	blx	r3
}
 800bd42:	bf00      	nop
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b084      	sub	sp, #16
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	60f8      	str	r0, [r7, #12]
 800bd52:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00a      	beq.n	800bd74 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	691a      	ldr	r2, [r3, #16]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	3338      	adds	r3, #56	; 0x38
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	ed97 0b00 	vldr	d0, [r7]
 800bd70:	4610      	mov	r0, r2
 800bd72:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	695b      	ldr	r3, [r3, #20]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00a      	beq.n	800bd92 <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	695a      	ldr	r2, [r3, #20]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	695b      	ldr	r3, [r3, #20]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	3338      	adds	r3, #56	; 0x38
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	ed97 0b00 	vldr	d0, [r7]
 800bd8e:	4610      	mov	r0, r2
 800bd90:	4798      	blx	r3
}
 800bd92:	bf00      	nop
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b082      	sub	sp, #8
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d009      	beq.n	800bdc0 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	691a      	ldr	r2, [r3, #16]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	333c      	adds	r3, #60	; 0x3c
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	6839      	ldr	r1, [r7, #0]
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	695b      	ldr	r3, [r3, #20]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d009      	beq.n	800bddc <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	695a      	ldr	r2, [r3, #20]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	695b      	ldr	r3, [r3, #20]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	333c      	adds	r3, #60	; 0x3c
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	6839      	ldr	r1, [r7, #0]
 800bdd8:	4610      	mov	r0, r2
 800bdda:	4798      	blx	r3
}
 800bddc:	bf00      	nop
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d009      	beq.n	800be0a <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	691a      	ldr	r2, [r3, #16]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	3344      	adds	r3, #68	; 0x44
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	6839      	ldr	r1, [r7, #0]
 800be06:	4610      	mov	r0, r2
 800be08:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	695b      	ldr	r3, [r3, #20]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d009      	beq.n	800be26 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	695a      	ldr	r2, [r3, #20]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	695b      	ldr	r3, [r3, #20]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	3344      	adds	r3, #68	; 0x44
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	4610      	mov	r0, r2
 800be24:	4798      	blx	r3
}
 800be26:	bf00      	nop
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b082      	sub	sp, #8
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d008      	beq.n	800be50 <_ZN19CompositeTestOutput5flushEv+0x22>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	691a      	ldr	r2, [r3, #16]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	334c      	adds	r3, #76	; 0x4c
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4610      	mov	r0, r2
 800be4e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	695b      	ldr	r3, [r3, #20]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d008      	beq.n	800be6a <_ZN19CompositeTestOutput5flushEv+0x3c>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	695a      	ldr	r2, [r3, #20]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	695b      	ldr	r3, [r3, #20]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	334c      	adds	r3, #76	; 0x4c
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4610      	mov	r0, r2
 800be68:	4798      	blx	r3
}
 800be6a:	bf00      	nop
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}

0800be72 <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800be72:	b480      	push	{r7}
 800be74:	b085      	sub	sp, #20
 800be76:	af00      	add	r7, sp, #0
 800be78:	60f8      	str	r0, [r7, #12]
 800be7a:	60b9      	str	r1, [r7, #8]
 800be7c:	607a      	str	r2, [r7, #4]
    }
 800be7e:	bf00      	nop
 800be80:	3714      	adds	r7, #20
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr

0800be8a <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800be8a:	b480      	push	{r7}
 800be8c:	b085      	sub	sp, #20
 800be8e:	af00      	add	r7, sp, #0
 800be90:	60f8      	str	r0, [r7, #12]
 800be92:	60b9      	str	r1, [r7, #8]
 800be94:	607a      	str	r2, [r7, #4]
    }
 800be96:	bf00      	nop
 800be98:	3714      	adds	r7, #20
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
	...

0800bea4 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800beae:	4a0b      	ldr	r2, [pc, #44]	; (800bedc <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	601a      	str	r2, [r3, #0]
 800beb4:	f000 f9ce 	bl	800c254 <_ZN14NullTestPlugin8instanceEv>
 800beb8:	4602      	mov	r2, r0
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	605a      	str	r2, [r3, #4]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	3308      	adds	r3, #8
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7fb fc54 	bl	8007772 <_ZN12SimpleStringC1ERKS_>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2201      	movs	r2, #1
 800bece:	741a      	strb	r2, [r3, #16]
{
}
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4618      	mov	r0, r3
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	08018a08 	.word	0x08018a08

0800bee0 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800beea:	4a0a      	ldr	r2, [pc, #40]	; (800bf14 <_ZN10TestPluginC1EPS_+0x34>)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	601a      	str	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	605a      	str	r2, [r3, #4]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	3308      	adds	r3, #8
 800befa:	4907      	ldr	r1, [pc, #28]	; (800bf18 <_ZN10TestPluginC1EPS_+0x38>)
 800befc:	4618      	mov	r0, r3
 800befe:	f7fb fbe4 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2201      	movs	r2, #1
 800bf06:	741a      	strb	r2, [r3, #16]
{
}
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	08018a08 	.word	0x08018a08
 800bf18:	08016bec 	.word	0x08016bec

0800bf1c <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	4a06      	ldr	r2, [pc, #24]	; (800bf40 <_ZN10TestPluginD1Ev+0x24>)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	601a      	str	r2, [r3, #0]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	3308      	adds	r3, #8
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fb ff83 	bl	8007e3a <_ZN12SimpleStringD1Ev>
{
}
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4618      	mov	r0, r3
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	08018a08 	.word	0x08018a08

0800bf44 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
}
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f7ff ffe5 	bl	800bf1c <_ZN10TestPluginD1Ev>
 800bf52:	2114      	movs	r1, #20
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7fa fce3 	bl	8006920 <_ZdlPvj>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3708      	adds	r7, #8
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	605a      	str	r2, [r3, #4]
    return this;
 800bf74:	687b      	ldr	r3, [r7, #4]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	370c      	adds	r7, #12
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b084      	sub	sp, #16
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	60f8      	str	r0, [r7, #12]
 800bf8a:	60b9      	str	r1, [r7, #8]
 800bf8c:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	7c1b      	ldrb	r3, [r3, #16]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d007      	beq.n	800bfa6 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3308      	adds	r3, #8
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	68b9      	ldr	r1, [r7, #8]
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6858      	ldr	r0, [r3, #4]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	3314      	adds	r3, #20
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	68b9      	ldr	r1, [r7, #8]
 800bfb8:	4798      	blx	r3
}
 800bfba:	bf00      	nop
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b084      	sub	sp, #16
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	60f8      	str	r0, [r7, #12]
 800bfca:	60b9      	str	r1, [r7, #8]
 800bfcc:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6858      	ldr	r0, [r3, #4]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3318      	adds	r3, #24
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	68b9      	ldr	r1, [r7, #8]
 800bfe0:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	7c1b      	ldrb	r3, [r3, #16]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d007      	beq.n	800bffa <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	330c      	adds	r3, #12
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	68b9      	ldr	r1, [r7, #8]
 800bff6:	68f8      	ldr	r0, [r7, #12]
 800bff8:	4798      	blx	r3
}
 800bffa:	bf00      	nop
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800c002:	b590      	push	{r4, r7, lr}
 800c004:	b085      	sub	sp, #20
 800c006:	af00      	add	r7, sp, #0
 800c008:	60f8      	str	r0, [r7, #12]
 800c00a:	60b9      	str	r1, [r7, #8]
 800c00c:	607a      	str	r2, [r7, #4]
 800c00e:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	331c      	adds	r3, #28
 800c016:	681c      	ldr	r4, [r3, #0]
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	68b9      	ldr	r1, [r7, #8]
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	47a0      	blx	r4
 800c022:	4603      	mov	r3, r0
}
 800c024:	4618      	mov	r0, r3
 800c026:	3714      	adds	r7, #20
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd90      	pop	{r4, r7, pc}

0800c02c <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800c02c:	b590      	push	{r4, r7, lr}
 800c02e:	b085      	sub	sp, #20
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	607a      	str	r2, [r7, #4]
 800c038:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	3310      	adds	r3, #16
 800c040:	681c      	ldr	r4, [r3, #0]
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	68b9      	ldr	r1, [r7, #8]
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	47a0      	blx	r4
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d001      	beq.n	800c056 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800c052:	2301      	movs	r3, #1
 800c054:	e011      	b.n	800c07a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00c      	beq.n	800c078 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6858      	ldr	r0, [r3, #4]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	331c      	adds	r3, #28
 800c06a:	681c      	ldr	r4, [r3, #0]
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	68b9      	ldr	r1, [r7, #8]
 800c072:	47a0      	blx	r4
 800c074:	4603      	mov	r3, r0
 800c076:	e000      	b.n	800c07a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd90      	pop	{r4, r7, pc}

0800c082 <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800c082:	b480      	push	{r7}
 800c084:	b083      	sub	sp, #12
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
    return name_;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	3308      	adds	r3, #8
}
 800c08e:	4618      	mov	r0, r3
 800c090:	370c      	adds	r7, #12
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b082      	sub	sp, #8
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
 800c0a2:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	3308      	adds	r3, #8
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6838      	ldr	r0, [r7, #0]
 800c0ac:	f7fb fed1 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	e00d      	b.n	800c0d6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d007      	beq.n	800c0d2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	6839      	ldr	r1, [r7, #0]
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7ff ffe6 	bl	800c09a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	e001      	b.n	800c0d6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	685b      	ldr	r3, [r3, #4]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800c0de:	b480      	push	{r7}
 800c0e0:	b083      	sub	sp, #12
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
    return next_;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	685b      	ldr	r3, [r3, #4]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	370c      	adds	r7, #12
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b084      	sub	sp, #16
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
 800c0fe:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800c100:	2300      	movs	r3, #0
 800c102:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00e      	beq.n	800c12a <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	4618      	mov	r0, r3
 800c112:	f7ff ffb6 	bl	800c082 <_ZN10TestPlugin7getNameEv>
 800c116:	4603      	mov	r3, r0
 800c118:	6839      	ldr	r1, [r7, #0]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fb fe99 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800c126:	2301      	movs	r3, #1
 800c128:	e000      	b.n	800c12c <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800c12a:	2300      	movs	r3, #0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d007      	beq.n	800c140 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	685a      	ldr	r2, [r3, #4]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800c140:	68fb      	ldr	r3, [r7, #12]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 800c14a:	b480      	push	{r7}
 800c14c:	b083      	sub	sp, #12
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	741a      	strb	r2, [r3, #16]
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2201      	movs	r2, #1
 800c170:	741a      	strb	r2, [r3, #16]
}
 800c172:	bf00      	nop
 800c174:	370c      	adds	r7, #12
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 800c17e:	b480      	push	{r7}
 800c180:	b083      	sub	sp, #12
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
    return enabled_;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	7c1b      	ldrb	r3, [r3, #16]
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	370c      	adds	r7, #12
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr
	...

0800c198 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6839      	ldr	r1, [r7, #0]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7ff fe7c 	bl	800bea4 <_ZN10TestPluginC1ERK12SimpleString>
 800c1ac:	4a05      	ldr	r2, [pc, #20]	; (800c1c4 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 800c1b2:	4b05      	ldr	r3, [pc, #20]	; (800c1c8 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	601a      	str	r2, [r3, #0]
}
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	080189c4 	.word	0x080189c4
 800c1c8:	200005f8 	.word	0x200005f8

0800c1cc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b087      	sub	sp, #28
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800c1d8:	4b0e      	ldr	r3, [pc, #56]	; (800c214 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	617b      	str	r3, [r7, #20]
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	db0d      	blt.n	800c202 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 800c1e6:	4a0c      	ldr	r2, [pc, #48]	; (800c218 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c1ee:	490a      	ldr	r1, [pc, #40]	; (800c218 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	00db      	lsls	r3, r3, #3
 800c1f4:	440b      	add	r3, r1
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	3b01      	subs	r3, #1
 800c1fe:	617b      	str	r3, [r7, #20]
 800c200:	e7ee      	b.n	800c1e0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 800c202:	4b04      	ldr	r3, [pc, #16]	; (800c214 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800c204:	2200      	movs	r2, #0
 800c206:	601a      	str	r2, [r3, #0]
}
 800c208:	bf00      	nop
 800c20a:	371c      	adds	r7, #28
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr
 800c214:	200005f8 	.word	0x200005f8
 800c218:	200005fc 	.word	0x200005fc

0800c21c <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2100      	movs	r1, #0
 800c228:	4618      	mov	r0, r3
 800c22a:	f7ff fe59 	bl	800bee0 <_ZN10TestPluginC1EPS_>
 800c22e:	4a04      	ldr	r2, [pc, #16]	; (800c240 <_ZN14NullTestPluginC1Ev+0x24>)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	601a      	str	r2, [r3, #0]
{
}
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4618      	mov	r0, r3
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	08018980 	.word	0x08018980

0800c244 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 800c244:	b580      	push	{r7, lr}
 800c246:	af00      	add	r7, sp, #0
 800c248:	4801      	ldr	r0, [pc, #4]	; (800c250 <__tcf_0+0xc>)
 800c24a:	f000 f849 	bl	800c2e0 <_ZN14NullTestPluginD1Ev>
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	200006fc 	.word	0x200006fc

0800c254 <_ZN14NullTestPlugin8instanceEv>:
{
 800c254:	b580      	push	{r7, lr}
 800c256:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 800c258:	4b12      	ldr	r3, [pc, #72]	; (800c2a4 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	f3bf 8f5b 	dmb	ish
 800c260:	b2db      	uxtb	r3, r3
 800c262:	f003 0301 	and.w	r3, r3, #1
 800c266:	2b00      	cmp	r3, #0
 800c268:	bf0c      	ite	eq
 800c26a:	2301      	moveq	r3, #1
 800c26c:	2300      	movne	r3, #0
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b00      	cmp	r3, #0
 800c272:	d013      	beq.n	800c29c <_ZN14NullTestPlugin8instanceEv+0x48>
 800c274:	480b      	ldr	r0, [pc, #44]	; (800c2a4 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800c276:	f005 febf 	bl	8011ff8 <__cxa_guard_acquire>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	bf14      	ite	ne
 800c280:	2301      	movne	r3, #1
 800c282:	2300      	moveq	r3, #0
 800c284:	b2db      	uxtb	r3, r3
 800c286:	2b00      	cmp	r3, #0
 800c288:	d008      	beq.n	800c29c <_ZN14NullTestPlugin8instanceEv+0x48>
 800c28a:	4807      	ldr	r0, [pc, #28]	; (800c2a8 <_ZN14NullTestPlugin8instanceEv+0x54>)
 800c28c:	f7ff ffc6 	bl	800c21c <_ZN14NullTestPluginC1Ev>
 800c290:	4804      	ldr	r0, [pc, #16]	; (800c2a4 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800c292:	f005 febd 	bl	8012010 <__cxa_guard_release>
 800c296:	4805      	ldr	r0, [pc, #20]	; (800c2ac <_ZN14NullTestPlugin8instanceEv+0x58>)
 800c298:	f005 fee1 	bl	801205e <atexit>
    return &_instance;
 800c29c:	4b02      	ldr	r3, [pc, #8]	; (800c2a8 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	20000710 	.word	0x20000710
 800c2a8:	200006fc 	.word	0x200006fc
 800c2ac:	0800c245 	.word	0x0800c245

0800c2b0 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
}
 800c2bc:	bf00      	nop
 800c2be:	3714      	adds	r7, #20
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
}
 800c2d4:	bf00      	nop
 800c2d6:	3714      	adds	r7, #20
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr

0800c2e0 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	4a05      	ldr	r2, [pc, #20]	; (800c300 <_ZN14NullTestPluginD1Ev+0x20>)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	601a      	str	r2, [r3, #0]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7ff fe13 	bl	800bf1c <_ZN10TestPluginD1Ev>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3708      	adds	r7, #8
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	08018980 	.word	0x08018980

0800c304 <_ZN14NullTestPluginD0Ev>:
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f7ff ffe7 	bl	800c2e0 <_ZN14NullTestPluginD1Ev>
 800c312:	2114      	movs	r1, #20
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f7fa fb03 	bl	8006920 <_ZdlPvj>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4618      	mov	r0, r3
 800c31e:	3708      	adds	r7, #8
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 800c324:	b580      	push	{r7, lr}
 800c326:	b082      	sub	sp, #8
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 800c32c:	4a0f      	ldr	r2, [pc, #60]	; (800c36c <_ZN12TestRegistryC1Ev+0x48>)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	601a      	str	r2, [r3, #0]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	605a      	str	r2, [r3, #4]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	609a      	str	r2, [r3, #8]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	60da      	str	r2, [r3, #12]
 800c344:	f7ff ff86 	bl	800c254 <_ZN14NullTestPlugin8instanceEv>
 800c348:	4602      	mov	r2, r0
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	611a      	str	r2, [r3, #16]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	751a      	strb	r2, [r3, #20]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	619a      	str	r2, [r3, #24]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	771a      	strb	r2, [r3, #28]
{
}
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4618      	mov	r0, r3
 800c364:	3708      	adds	r7, #8
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	08018a4c 	.word	0x08018a4c

0800c370 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	4a04      	ldr	r2, [pc, #16]	; (800c38c <_ZN12TestRegistryD1Ev+0x1c>)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	601a      	str	r2, [r3, #0]
{
}
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4618      	mov	r0, r3
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr
 800c38c:	08018a4c 	.word	0x08018a4c

0800c390 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
}
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f7ff ffe9 	bl	800c370 <_ZN12TestRegistryD1Ev>
 800c39e:	2120      	movs	r1, #32
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f7fa fabd 	bl	8006920 <_ZdlPvj>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	3308      	adds	r3, #8
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	6852      	ldr	r2, [r2, #4]
 800c3c6:	4611      	mov	r1, r2
 800c3c8:	6838      	ldr	r0, [r7, #0]
 800c3ca:	4798      	blx	r3
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	605a      	str	r2, [r3, #4]
}
 800c3d2:	bf00      	nop
 800c3d4:	3708      	adds	r7, #8
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b084      	sub	sp, #16
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
 800c3e2:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	3308      	adds	r3, #8
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	6838      	ldr	r0, [r7, #0]
 800c3f2:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	60bb      	str	r3, [r7, #8]
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d05c      	beq.n	800c4ba <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	7d1b      	ldrb	r3, [r3, #20]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d005      	beq.n	800c414 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	3380      	adds	r3, #128	; 0x80
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	68b8      	ldr	r0, [r7, #8]
 800c412:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	7f1b      	ldrb	r3, [r3, #28]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d005      	beq.n	800c428 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	3384      	adds	r3, #132	; 0x84
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68b8      	ldr	r0, [r7, #8]
 800c426:	4798      	blx	r3

        if (groupStart) {
 800c428:	7bfb      	ldrb	r3, [r7, #15]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d008      	beq.n	800c440 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3310      	adds	r3, #16
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	68b9      	ldr	r1, [r7, #8]
 800c438:	6838      	ldr	r0, [r7, #0]
 800c43a:	4798      	blx	r3
            groupStart = false;
 800c43c:	2300      	movs	r3, #0
 800c43e:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	3320      	adds	r3, #32
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	6838      	ldr	r0, [r7, #0]
 800c44a:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 800c44c:	683a      	ldr	r2, [r7, #0]
 800c44e:	68b9      	ldr	r1, [r7, #8]
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fb79 	bl	800cb48 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d016      	beq.n	800c48a <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	3318      	adds	r3, #24
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68b9      	ldr	r1, [r7, #8]
 800c466:	6838      	ldr	r0, [r7, #0]
 800c468:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	3390      	adds	r3, #144	; 0x90
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	6911      	ldr	r1, [r2, #16]
 800c476:	683a      	ldr	r2, [r7, #0]
 800c478:	68b8      	ldr	r0, [r7, #8]
 800c47a:	4798      	blx	r3
            result.currentTestEnded(test);
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	331c      	adds	r3, #28
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	68b9      	ldr	r1, [r7, #8]
 800c486:	6838      	ldr	r0, [r7, #0]
 800c488:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 800c48a:	68b9      	ldr	r1, [r7, #8]
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f000 fa5b 	bl	800c948 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 800c492:	4603      	mov	r3, r0
 800c494:	2b00      	cmp	r3, #0
 800c496:	d008      	beq.n	800c4aa <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 800c498:	2301      	movs	r3, #1
 800c49a:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	3314      	adds	r3, #20
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68b9      	ldr	r1, [r7, #8]
 800c4a6:	6838      	ldr	r0, [r7, #0]
 800c4a8:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	330c      	adds	r3, #12
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	68b8      	ldr	r0, [r7, #8]
 800c4b4:	4798      	blx	r3
 800c4b6:	60b8      	str	r0, [r7, #8]
 800c4b8:	e79f      	b.n	800c3fa <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	330c      	adds	r3, #12
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	6838      	ldr	r0, [r7, #0]
 800c4c4:	4798      	blx	r3
    currentRepetition_++;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	699b      	ldr	r3, [r3, #24]
 800c4ca:	1c5a      	adds	r2, r3, #1
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	619a      	str	r2, [r3, #24]
}
 800c4d0:	bf00      	nop
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 800c4d8:	b590      	push	{r4, r7, lr}
 800c4da:	b08f      	sub	sp, #60	; 0x3c
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 800c4e2:	f107 0314 	add.w	r3, r7, #20
 800c4e6:	4953      	ldr	r1, [pc, #332]	; (800c634 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7fb f8ee 	bl	80076ca <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	637b      	str	r3, [r7, #52]	; 0x34
 800c4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d04d      	beq.n	800c596 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 800c4fa:	f107 030c 	add.w	r3, r7, #12
 800c4fe:	494d      	ldr	r1, [pc, #308]	; (800c634 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800c500:	4618      	mov	r0, r3
 800c502:	f7fb f8e2 	bl	80076ca <_ZN12SimpleStringC1EPKc>
        gname += "#";
 800c506:	f107 030c 	add.w	r3, r7, #12
 800c50a:	494b      	ldr	r1, [pc, #300]	; (800c638 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7fb fd23 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 800c512:	f107 031c 	add.w	r3, r7, #28
 800c516:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c518:	4618      	mov	r0, r3
 800c51a:	f001 f9d2 	bl	800d8c2 <_ZNK10UtestShell8getGroupEv>
 800c51e:	f107 021c 	add.w	r2, r7, #28
 800c522:	f107 030c 	add.w	r3, r7, #12
 800c526:	4611      	mov	r1, r2
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fb fd03 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800c52e:	f107 031c 	add.w	r3, r7, #28
 800c532:	4618      	mov	r0, r3
 800c534:	f7fb fc81 	bl	8007e3a <_ZN12SimpleStringD1Ev>
        gname += "#";
 800c538:	f107 030c 	add.w	r3, r7, #12
 800c53c:	493e      	ldr	r1, [pc, #248]	; (800c638 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800c53e:	4618      	mov	r0, r3
 800c540:	f7fb fd0a 	bl	8007f58 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 800c544:	f107 020c 	add.w	r2, r7, #12
 800c548:	f107 0314 	add.w	r3, r7, #20
 800c54c:	4611      	mov	r1, r2
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fb f939 	bl	80077c6 <_ZNK12SimpleString8containsERKS_>
 800c554:	4603      	mov	r3, r0
 800c556:	f083 0301 	eor.w	r3, r3, #1
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00d      	beq.n	800c57c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 800c560:	f107 020c 	add.w	r2, r7, #12
 800c564:	f107 0314 	add.w	r3, r7, #20
 800c568:	4611      	mov	r1, r2
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fb fce2 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 800c570:	f107 0314 	add.w	r3, r7, #20
 800c574:	4931      	ldr	r1, [pc, #196]	; (800c63c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800c576:	4618      	mov	r0, r3
 800c578:	f7fb fcee 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 800c57c:	f107 030c 	add.w	r3, r7, #12
 800c580:	4618      	mov	r0, r3
 800c582:	f7fb fc5a 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	330c      	adds	r3, #12
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c590:	4798      	blx	r3
 800c592:	6378      	str	r0, [r7, #52]	; 0x34
 800c594:	e7ae      	b.n	800c4f4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 800c596:	f107 0314 	add.w	r3, r7, #20
 800c59a:	4a26      	ldr	r2, [pc, #152]	; (800c634 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800c59c:	4926      	ldr	r1, [pc, #152]	; (800c638 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7fb faa8 	bl	8007af4 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 800c5a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5a8:	4924      	ldr	r1, [pc, #144]	; (800c63c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7fb f88d 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800c5b0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c5b4:	f107 0314 	add.w	r3, r7, #20
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fb f982 	bl	80078c4 <_ZNK12SimpleString8endsWithERKS_>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	461c      	mov	r4, r3
 800c5c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7fb fc36 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800c5ce:	2c00      	cmp	r4, #0
 800c5d0:	d01a      	beq.n	800c608 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 800c5d2:	f107 0314 	add.w	r3, r7, #20
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7fb fc0e 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800c5e4:	f107 0114 	add.w	r1, r7, #20
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f7fb fd2f 	bl	800804c <_ZNK12SimpleString9subStringEjj>
 800c5ee:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c5f2:	f107 0314 	add.w	r3, r7, #20
 800c5f6:	4611      	mov	r1, r2
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7fb f8d2 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 800c5fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c602:	4618      	mov	r0, r3
 800c604:	f7fb fc19 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	3338      	adds	r3, #56	; 0x38
 800c60e:	681c      	ldr	r4, [r3, #0]
 800c610:	f107 0314 	add.w	r3, r7, #20
 800c614:	4618      	mov	r0, r3
 800c616:	f7fb fbe3 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 800c61a:	4603      	mov	r3, r0
 800c61c:	4619      	mov	r1, r3
 800c61e:	6838      	ldr	r0, [r7, #0]
 800c620:	47a0      	blx	r4
    SimpleString groupList;
 800c622:	f107 0314 	add.w	r3, r7, #20
 800c626:	4618      	mov	r0, r3
 800c628:	f7fb fc07 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800c62c:	bf00      	nop
 800c62e:	373c      	adds	r7, #60	; 0x3c
 800c630:	46bd      	mov	sp, r7
 800c632:	bd90      	pop	{r4, r7, pc}
 800c634:	08016c3c 	.word	0x08016c3c
 800c638:	08016c40 	.word	0x08016c40
 800c63c:	08016c44 	.word	0x08016c44

0800c640 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 800c640:	b590      	push	{r4, r7, lr}
 800c642:	b091      	sub	sp, #68	; 0x44
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 800c64a:	f107 0314 	add.w	r3, r7, #20
 800c64e:	4964      	ldr	r1, [pc, #400]	; (800c7e0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800c650:	4618      	mov	r0, r3
 800c652:	f7fb f83a 	bl	80076ca <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d06e      	beq.n	800c740 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 800c662:	683a      	ldr	r2, [r7, #0]
 800c664:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 fa6e 	bl	800cb48 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d05e      	beq.n	800c730 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 800c672:	f107 030c 	add.w	r3, r7, #12
 800c676:	495a      	ldr	r1, [pc, #360]	; (800c7e0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800c678:	4618      	mov	r0, r3
 800c67a:	f7fb f826 	bl	80076ca <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 800c67e:	f107 030c 	add.w	r3, r7, #12
 800c682:	4958      	ldr	r1, [pc, #352]	; (800c7e4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800c684:	4618      	mov	r0, r3
 800c686:	f7fb fc67 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 800c68a:	f107 031c 	add.w	r3, r7, #28
 800c68e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c690:	4618      	mov	r0, r3
 800c692:	f001 f916 	bl	800d8c2 <_ZNK10UtestShell8getGroupEv>
 800c696:	f107 021c 	add.w	r2, r7, #28
 800c69a:	f107 030c 	add.w	r3, r7, #12
 800c69e:	4611      	mov	r1, r2
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7fb fc47 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800c6a6:	f107 031c 	add.w	r3, r7, #28
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7fb fbc5 	bl	8007e3a <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 800c6b0:	f107 030c 	add.w	r3, r7, #12
 800c6b4:	494c      	ldr	r1, [pc, #304]	; (800c7e8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fb fc4e 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 800c6bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f001 f8ee 	bl	800d8a4 <_ZNK10UtestShell7getNameEv>
 800c6c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c6cc:	f107 030c 	add.w	r3, r7, #12
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7fb fc2e 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800c6d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7fb fbac 	bl	8007e3a <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 800c6e2:	f107 030c 	add.w	r3, r7, #12
 800c6e6:	493f      	ldr	r1, [pc, #252]	; (800c7e4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7fb fc35 	bl	8007f58 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 800c6ee:	f107 020c 	add.w	r2, r7, #12
 800c6f2:	f107 0314 	add.w	r3, r7, #20
 800c6f6:	4611      	mov	r1, r2
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7fb f864 	bl	80077c6 <_ZNK12SimpleString8containsERKS_>
 800c6fe:	4603      	mov	r3, r0
 800c700:	f083 0301 	eor.w	r3, r3, #1
 800c704:	b2db      	uxtb	r3, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00d      	beq.n	800c726 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 800c70a:	f107 020c 	add.w	r2, r7, #12
 800c70e:	f107 0314 	add.w	r3, r7, #20
 800c712:	4611      	mov	r1, r2
 800c714:	4618      	mov	r0, r3
 800c716:	f7fb fc0d 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 800c71a:	f107 0314 	add.w	r3, r7, #20
 800c71e:	4933      	ldr	r1, [pc, #204]	; (800c7ec <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800c720:	4618      	mov	r0, r3
 800c722:	f7fb fc19 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 800c726:	f107 030c 	add.w	r3, r7, #12
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fb fb85 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	330c      	adds	r3, #12
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c73a:	4798      	blx	r3
 800c73c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c73e:	e78d      	b.n	800c65c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 800c740:	f107 0314 	add.w	r3, r7, #20
 800c744:	4a26      	ldr	r2, [pc, #152]	; (800c7e0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800c746:	4927      	ldr	r1, [pc, #156]	; (800c7e4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800c748:	4618      	mov	r0, r3
 800c74a:	f7fb f9d3 	bl	8007af4 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 800c74e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c752:	4926      	ldr	r1, [pc, #152]	; (800c7ec <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800c754:	4618      	mov	r0, r3
 800c756:	f7fa ffb8 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800c75a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c75e:	f107 0314 	add.w	r3, r7, #20
 800c762:	4611      	mov	r1, r2
 800c764:	4618      	mov	r0, r3
 800c766:	f7fb f8ad 	bl	80078c4 <_ZNK12SimpleString8endsWithERKS_>
 800c76a:	4603      	mov	r3, r0
 800c76c:	461c      	mov	r4, r3
 800c76e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c772:	4618      	mov	r0, r3
 800c774:	f7fb fb61 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800c778:	2c00      	cmp	r4, #0
 800c77a:	d01a      	beq.n	800c7b2 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 800c77c:	f107 0314 	add.w	r3, r7, #20
 800c780:	4618      	mov	r0, r3
 800c782:	f7fb fb39 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 800c786:	4603      	mov	r3, r0
 800c788:	3b01      	subs	r3, #1
 800c78a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c78e:	f107 0114 	add.w	r1, r7, #20
 800c792:	2200      	movs	r2, #0
 800c794:	f7fb fc5a 	bl	800804c <_ZNK12SimpleString9subStringEjj>
 800c798:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c79c:	f107 0314 	add.w	r3, r7, #20
 800c7a0:	4611      	mov	r1, r2
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fa fffd 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 800c7a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7fb fb44 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	3338      	adds	r3, #56	; 0x38
 800c7b8:	681c      	ldr	r4, [r3, #0]
 800c7ba:	f107 0314 	add.w	r3, r7, #20
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7fb fb0e 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	6838      	ldr	r0, [r7, #0]
 800c7ca:	47a0      	blx	r4
    SimpleString groupAndNameList;
 800c7cc:	f107 0314 	add.w	r3, r7, #20
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7fb fb32 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800c7d6:	bf00      	nop
 800c7d8:	3744      	adds	r7, #68	; 0x44
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd90      	pop	{r4, r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	08016c3c 	.word	0x08016c3c
 800c7e4:	08016c40 	.word	0x08016c40
 800c7e8:	08016c48 	.word	0x08016c48
 800c7ec:	08016c44 	.word	0x08016c44

0800c7f0 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 800c7f0:	b590      	push	{r4, r7, lr}
 800c7f2:	b091      	sub	sp, #68	; 0x44
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 800c7fa:	f107 0314 	add.w	r3, r7, #20
 800c7fe:	494f      	ldr	r1, [pc, #316]	; (800c93c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800c800:	4618      	mov	r0, r3
 800c802:	f7fa ff62 	bl	80076ca <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d07d      	beq.n	800c90e <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 800c812:	f107 030c 	add.w	r3, r7, #12
 800c816:	4949      	ldr	r1, [pc, #292]	; (800c93c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fa ff56 	bl	80076ca <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 800c81e:	f107 031c 	add.w	r3, r7, #28
 800c822:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c824:	4618      	mov	r0, r3
 800c826:	f001 f84c 	bl	800d8c2 <_ZNK10UtestShell8getGroupEv>
 800c82a:	f107 021c 	add.w	r2, r7, #28
 800c82e:	f107 030c 	add.w	r3, r7, #12
 800c832:	4611      	mov	r1, r2
 800c834:	4618      	mov	r0, r3
 800c836:	f7fb fb7d 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800c83a:	f107 031c 	add.w	r3, r7, #28
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fb fafb 	bl	8007e3a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800c844:	f107 030c 	add.w	r3, r7, #12
 800c848:	493d      	ldr	r1, [pc, #244]	; (800c940 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7fb fb84 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 800c850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c854:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c856:	4618      	mov	r0, r3
 800c858:	f001 f824 	bl	800d8a4 <_ZNK10UtestShell7getNameEv>
 800c85c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c860:	f107 030c 	add.w	r3, r7, #12
 800c864:	4611      	mov	r1, r2
 800c866:	4618      	mov	r0, r3
 800c868:	f7fb fb64 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800c86c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c870:	4618      	mov	r0, r3
 800c872:	f7fb fae2 	bl	8007e3a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800c876:	f107 030c 	add.w	r3, r7, #12
 800c87a:	4931      	ldr	r1, [pc, #196]	; (800c940 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fb fb6b 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 800c882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c886:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c888:	4618      	mov	r0, r3
 800c88a:	f001 f8cb 	bl	800da24 <_ZNK10UtestShell7getFileEv>
 800c88e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c892:	f107 030c 	add.w	r3, r7, #12
 800c896:	4611      	mov	r1, r2
 800c898:	4618      	mov	r0, r3
 800c89a:	f7fb fb4b 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800c89e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fb fac9 	bl	8007e3a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800c8a8:	f107 030c 	add.w	r3, r7, #12
 800c8ac:	4924      	ldr	r1, [pc, #144]	; (800c940 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7fb fb52 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 800c8b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c8b6:	f001 f8c4 	bl	800da42 <_ZNK10UtestShell13getLineNumberEv>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	461a      	mov	r2, r3
 800c8be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c8c2:	4920      	ldr	r1, [pc, #128]	; (800c944 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fb ff45 	bl	8008754 <_Z16StringFromFormatPKcz>
 800c8ca:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c8ce:	f107 030c 	add.w	r3, r7, #12
 800c8d2:	4611      	mov	r1, r2
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7fb fb2d 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800c8da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fb faab 	bl	8007e3a <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 800c8e4:	f107 020c 	add.w	r2, r7, #12
 800c8e8:	f107 0314 	add.w	r3, r7, #20
 800c8ec:	4611      	mov	r1, r2
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7fb fb20 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 800c8f4:	f107 030c 	add.w	r3, r7, #12
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7fb fa9e 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	330c      	adds	r3, #12
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c908:	4798      	blx	r3
 800c90a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c90c:	e77e      	b.n	800c80c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	3338      	adds	r3, #56	; 0x38
 800c914:	681c      	ldr	r4, [r3, #0]
 800c916:	f107 0314 	add.w	r3, r7, #20
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fb fa60 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 800c920:	4603      	mov	r3, r0
 800c922:	4619      	mov	r1, r3
 800c924:	6838      	ldr	r0, [r7, #0]
 800c926:	47a0      	blx	r4
    SimpleString testLocations;
 800c928:	f107 0314 	add.w	r3, r7, #20
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7fb fa84 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800c932:	bf00      	nop
 800c934:	3744      	adds	r7, #68	; 0x44
 800c936:	46bd      	mov	sp, r7
 800c938:	bd90      	pop	{r4, r7, pc}
 800c93a:	bf00      	nop
 800c93c:	08016c3c 	.word	0x08016c3c
 800c940:	08016c48 	.word	0x08016c48
 800c944:	08016c4c 	.word	0x08016c4c

0800c948 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 800c948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c94a:	b087      	sub	sp, #28
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 800c952:	2400      	movs	r4, #0
 800c954:	2500      	movs	r5, #0
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d028      	beq.n	800c9ae <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	330c      	adds	r3, #12
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	6838      	ldr	r0, [r7, #0]
 800c966:	4798      	blx	r3
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d01f      	beq.n	800c9ae <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800c96e:	f107 0308 	add.w	r3, r7, #8
 800c972:	6839      	ldr	r1, [r7, #0]
 800c974:	4618      	mov	r0, r3
 800c976:	f000 ffa4 	bl	800d8c2 <_ZNK10UtestShell8getGroupEv>
 800c97a:	2401      	movs	r4, #1
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	330c      	adds	r3, #12
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	6838      	ldr	r0, [r7, #0]
 800c986:	4798      	blx	r3
 800c988:	4602      	mov	r2, r0
 800c98a:	f107 0310 	add.w	r3, r7, #16
 800c98e:	4611      	mov	r1, r2
 800c990:	4618      	mov	r0, r3
 800c992:	f000 ff96 	bl	800d8c2 <_ZNK10UtestShell8getGroupEv>
 800c996:	2501      	movs	r5, #1
 800c998:	f107 0210 	add.w	r2, r7, #16
 800c99c:	f107 0308 	add.w	r3, r7, #8
 800c9a0:	4611      	mov	r1, r2
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fb fa9a 	bl	8007edc <_ZneRK12SimpleStringS1_>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d001      	beq.n	800c9b2 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 800c9ae:	2601      	movs	r6, #1
 800c9b0:	e000      	b.n	800c9b4 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 800c9b2:	2600      	movs	r6, #0
 800c9b4:	2d00      	cmp	r5, #0
 800c9b6:	d004      	beq.n	800c9c2 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 800c9b8:	f107 0310 	add.w	r3, r7, #16
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7fb fa3c 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800c9c2:	2c00      	cmp	r4, #0
 800c9c4:	d004      	beq.n	800c9d0 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 800c9c6:	f107 0308 	add.w	r3, r7, #8
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7fb fa35 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800c9d0:	4633      	mov	r3, r6
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	371c      	adds	r7, #28
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c9da <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b082      	sub	sp, #8
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d00a      	beq.n	800ca00 <_ZN12TestRegistry10countTestsEv+0x26>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	3310      	adds	r3, #16
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	4798      	blx	r3
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	e000      	b.n	800ca02 <_ZN12TestRegistry10countTestsEv+0x28>
 800ca00:	2300      	movs	r3, #0
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3708      	adds	r7, #8
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
	...

0800ca0c <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	4801      	ldr	r0, [pc, #4]	; (800ca18 <__tcf_0+0xc>)
 800ca12:	f7ff fcad 	bl	800c370 <_ZN12TestRegistryD1Ev>
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	20000718 	.word	0x20000718

0800ca1c <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 800ca20:	4b15      	ldr	r3, [pc, #84]	; (800ca78 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	f3bf 8f5b 	dmb	ish
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	f003 0301 	and.w	r3, r3, #1
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	bf0c      	ite	eq
 800ca32:	2301      	moveq	r3, #1
 800ca34:	2300      	movne	r3, #0
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d013      	beq.n	800ca64 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800ca3c:	480e      	ldr	r0, [pc, #56]	; (800ca78 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800ca3e:	f005 fadb 	bl	8011ff8 <__cxa_guard_acquire>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	bf14      	ite	ne
 800ca48:	2301      	movne	r3, #1
 800ca4a:	2300      	moveq	r3, #0
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d008      	beq.n	800ca64 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800ca52:	480a      	ldr	r0, [pc, #40]	; (800ca7c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 800ca54:	f7ff fc66 	bl	800c324 <_ZN12TestRegistryC1Ev>
 800ca58:	4807      	ldr	r0, [pc, #28]	; (800ca78 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800ca5a:	f005 fad9 	bl	8012010 <__cxa_guard_release>
 800ca5e:	4808      	ldr	r0, [pc, #32]	; (800ca80 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 800ca60:	f005 fafd 	bl	801205e <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 800ca64:	4b07      	ldr	r3, [pc, #28]	; (800ca84 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d002      	beq.n	800ca72 <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 800ca6c:	4b05      	ldr	r3, [pc, #20]	; (800ca84 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	e000      	b.n	800ca74 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 800ca72:	4b02      	ldr	r3, [pc, #8]	; (800ca7c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	20000738 	.word	0x20000738
 800ca7c:	20000718 	.word	0x20000718
 800ca80:	0800ca0d 	.word	0x0800ca0d
 800ca84:	20000714 	.word	0x20000714

0800ca88 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 800ca92:	4a04      	ldr	r2, [pc, #16]	; (800caa4 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	6013      	str	r3, [r2, #0]
}
 800ca98:	bf00      	nop
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr
 800caa4:	20000714 	.word	0x20000714

0800caa8 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d00a      	beq.n	800cace <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	685a      	ldr	r2, [r3, #4]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	330c      	adds	r3, #12
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4610      	mov	r0, r2
 800cac8:	4798      	blx	r3
 800caca:	4603      	mov	r3, r0
 800cacc:	e000      	b.n	800cad0 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 800cace:	2300      	movs	r3, #0
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	6053      	str	r3, [r2, #4]

}
 800cad4:	bf00      	nop
 800cad6:	3708      	adds	r7, #8
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	609a      	str	r2, [r3, #8]
}
 800caec:	bf00      	nop
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	683a      	ldr	r2, [r7, #0]
 800cb06:	60da      	str	r2, [r3, #12]
}
 800cb08:	bf00      	nop
 800cb0a:	370c      	adds	r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	771a      	strb	r2, [r3, #28]
}
 800cb22:	bf00      	nop
 800cb24:	370c      	adds	r7, #12
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr

0800cb2e <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b083      	sub	sp, #12
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2201      	movs	r2, #1
 800cb3a:	751a      	strb	r2, [r3, #20]
}
 800cb3c:	bf00      	nop
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	68d9      	ldr	r1, [r3, #12]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	68b8      	ldr	r0, [r7, #8]
 800cb60:	f000 ffaa 	bl	800dab8 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d001      	beq.n	800cb6e <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e006      	b.n	800cb7c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	332c      	adds	r3, #44	; 0x2c
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	4798      	blx	r3
        return false;
 800cb7a:	2300      	movs	r3, #0
    }
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3710      	adds	r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 800cb8c:	f7ff fb62 	bl	800c254 <_ZN14NullTestPlugin8instanceEv>
 800cb90:	4602      	mov	r2, r0
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	611a      	str	r2, [r3, #16]
}
 800cb96:	bf00      	nop
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}

0800cb9e <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b082      	sub	sp, #8
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
 800cba6:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	3324      	adds	r3, #36	; 0x24
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	6912      	ldr	r2, [r2, #16]
 800cbb4:	4611      	mov	r1, r2
 800cbb6:	6838      	ldr	r0, [r7, #0]
 800cbb8:	4798      	blx	r3
 800cbba:	4602      	mov	r2, r0
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	611a      	str	r2, [r3, #16]
}
 800cbc0:	bf00      	nop
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	691b      	ldr	r3, [r3, #16]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	691b      	ldr	r3, [r3, #16]
 800cbee:	6839      	ldr	r1, [r7, #0]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7ff fa52 	bl	800c09a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800cbf6:	4603      	mov	r3, r0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	691a      	ldr	r2, [r3, #16]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	691b      	ldr	r3, [r3, #16]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	3328      	adds	r3, #40	; 0x28
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	6839      	ldr	r1, [r7, #0]
 800cc1a:	4610      	mov	r0, r2
 800cc1c:	4798      	blx	r3
 800cc1e:	4602      	mov	r2, r0
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	691b      	ldr	r3, [r3, #16]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	bf0c      	ite	eq
 800cc28:	2301      	moveq	r3, #1
 800cc2a:	2300      	movne	r3, #0
 800cc2c:	b2db      	uxtb	r3, r3
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00b      	beq.n	800cc4a <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	691a      	ldr	r2, [r3, #16]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	691b      	ldr	r3, [r3, #16]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	332c      	adds	r3, #44	; 0x2c
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4610      	mov	r0, r2
 800cc42:	4798      	blx	r3
 800cc44:	4602      	mov	r2, r0
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	691b      	ldr	r3, [r3, #16]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7ff fa17 	bl	800c082 <_ZN10TestPlugin7getNameEv>
 800cc54:	4603      	mov	r3, r0
 800cc56:	6839      	ldr	r1, [r7, #0]
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fb f8fa 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d00b      	beq.n	800cc7c <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	691a      	ldr	r2, [r3, #16]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	691b      	ldr	r3, [r3, #16]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	332c      	adds	r3, #44	; 0x2c
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4610      	mov	r0, r2
 800cc74:	4798      	blx	r3
 800cc76:	4602      	mov	r2, r0
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	691a      	ldr	r2, [r3, #16]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	691b      	ldr	r3, [r3, #16]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	3328      	adds	r3, #40	; 0x28
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	4798      	blx	r3
}
 800cc90:	bf00      	nop
 800cc92:	3708      	adds	r7, #8
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
    int count = 0;
 800cca0:	2300      	movs	r3, #0
 800cca2:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	60bb      	str	r3, [r7, #8]
 800ccaa:	f7ff fad3 	bl	800c254 <_ZN14NullTestPlugin8instanceEv>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	bf14      	ite	ne
 800ccb6:	2301      	movne	r3, #1
 800ccb8:	2300      	moveq	r3, #0
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00a      	beq.n	800ccd6 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	332c      	adds	r3, #44	; 0x2c
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	68b8      	ldr	r0, [r7, #8]
 800ccd0:	4798      	blx	r3
 800ccd2:	60b8      	str	r0, [r7, #8]
 800ccd4:	e7e9      	b.n	800ccaa <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 800cce0:	b480      	push	{r7}
 800cce2:	b083      	sub	sp, #12
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
    return tests_;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	685b      	ldr	r3, [r3, #4]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	334c      	adds	r3, #76	; 0x4c
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	4798      	blx	r3
 800cd0e:	4602      	mov	r2, r0
 800cd10:	f107 0308 	add.w	r3, r7, #8
 800cd14:	4611      	mov	r1, r2
 800cd16:	4618      	mov	r0, r3
 800cd18:	f002 f8e6 	bl	800eee8 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 800cd1c:	f107 0308 	add.w	r3, r7, #8
 800cd20:	6839      	ldr	r1, [r7, #0]
 800cd22:	4618      	mov	r0, r3
 800cd24:	f002 f96e 	bl	800f004 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 800cd28:	f107 0308 	add.w	r3, r7, #8
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f002 fa01 	bl	800f134 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800cd32:	4602      	mov	r2, r0
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800cd38:	f107 0308 	add.w	r3, r7, #8
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f002 f927 	bl	800ef90 <_ZN22UtestShellPointerArrayD1Ev>
}
 800cd42:	bf00      	nop
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b084      	sub	sp, #16
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	334c      	adds	r3, #76	; 0x4c
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	4798      	blx	r3
 800cd5e:	4602      	mov	r2, r0
 800cd60:	f107 0308 	add.w	r3, r7, #8
 800cd64:	4611      	mov	r1, r2
 800cd66:	4618      	mov	r0, r3
 800cd68:	f002 f8be 	bl	800eee8 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 800cd6c:	f107 0308 	add.w	r3, r7, #8
 800cd70:	4618      	mov	r0, r3
 800cd72:	f002 f983 	bl	800f07c <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 800cd76:	f107 0308 	add.w	r3, r7, #8
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f002 f9da 	bl	800f134 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800cd80:	4602      	mov	r2, r0
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800cd86:	f107 0308 	add.w	r3, r7, #8
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f002 f900 	bl	800ef90 <_ZN22UtestShellPointerArrayD1Ev>
}
 800cd90:	bf00      	nop
 800cd92:	3710      	adds	r7, #16
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00b      	beq.n	800cdc6 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	330c      	adds	r3, #12
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	4798      	blx	r3
 800cdba:	4602      	mov	r2, r0
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d001      	beq.n	800cdc6 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e000      	b.n	800cdc8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d007      	beq.n	800cddc <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	330c      	adds	r3, #12
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	4798      	blx	r3
 800cdd8:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 800cdda:	e7e5      	b.n	800cda8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 800cddc:	68fb      	ldr	r3, [r7, #12]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 800cde6:	b590      	push	{r4, r7, lr}
 800cde8:	b087      	sub	sp, #28
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
 800cdee:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	617b      	str	r3, [r7, #20]
    while (current) {
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d01e      	beq.n	800ce3a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 800cdfc:	f107 030c 	add.w	r3, r7, #12
 800ce00:	6979      	ldr	r1, [r7, #20]
 800ce02:	4618      	mov	r0, r3
 800ce04:	f000 fd4e 	bl	800d8a4 <_ZNK10UtestShell7getNameEv>
 800ce08:	f107 030c 	add.w	r3, r7, #12
 800ce0c:	6839      	ldr	r1, [r7, #0]
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7fb f81f 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800ce14:	4603      	mov	r3, r0
 800ce16:	461c      	mov	r4, r3
 800ce18:	f107 030c 	add.w	r3, r7, #12
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fb f80c 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800ce22:	2c00      	cmp	r4, #0
 800ce24:	d001      	beq.n	800ce2a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	e008      	b.n	800ce3c <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	330c      	adds	r3, #12
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	6978      	ldr	r0, [r7, #20]
 800ce34:	4798      	blx	r3
 800ce36:	6178      	str	r0, [r7, #20]
    while (current) {
 800ce38:	e7dd      	b.n	800cdf6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	371c      	adds	r7, #28
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd90      	pop	{r4, r7, pc}

0800ce44 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 800ce44:	b590      	push	{r4, r7, lr}
 800ce46:	b087      	sub	sp, #28
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	617b      	str	r3, [r7, #20]
    while (current) {
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d01e      	beq.n	800ce98 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 800ce5a:	f107 030c 	add.w	r3, r7, #12
 800ce5e:	6979      	ldr	r1, [r7, #20]
 800ce60:	4618      	mov	r0, r3
 800ce62:	f000 fd2e 	bl	800d8c2 <_ZNK10UtestShell8getGroupEv>
 800ce66:	f107 030c 	add.w	r3, r7, #12
 800ce6a:	6839      	ldr	r1, [r7, #0]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fa fff0 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800ce72:	4603      	mov	r3, r0
 800ce74:	461c      	mov	r4, r3
 800ce76:	f107 030c 	add.w	r3, r7, #12
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fa ffdd 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800ce80:	2c00      	cmp	r4, #0
 800ce82:	d001      	beq.n	800ce88 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	e008      	b.n	800ce9a <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	330c      	adds	r3, #12
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	6978      	ldr	r0, [r7, #20]
 800ce92:	4798      	blx	r3
 800ce94:	6178      	str	r0, [r7, #20]
    while (current) {
 800ce96:	e7dd      	b.n	800ce54 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	371c      	adds	r7, #28
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd90      	pop	{r4, r7, pc}
	...

0800cea4 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 800ceae:	4a18      	ldr	r2, [pc, #96]	; (800cf10 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	601a      	str	r2, [r3, #0]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	683a      	ldr	r2, [r7, #0]
 800ceb8:	605a      	str	r2, [r3, #4]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	609a      	str	r2, [r3, #8]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	60da      	str	r2, [r3, #12]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	611a      	str	r2, [r3, #16]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	615a      	str	r2, [r3, #20]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	619a      	str	r2, [r3, #24]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	61da      	str	r2, [r3, #28]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	621a      	str	r2, [r3, #32]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	625a      	str	r2, [r3, #36]	; 0x24
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	629a      	str	r2, [r3, #40]	; 0x28
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	62da      	str	r2, [r3, #44]	; 0x2c
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	631a      	str	r2, [r3, #48]	; 0x30
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	4618      	mov	r0, r3
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr
 800cf10:	08018ab8 	.word	0x08018ab8

0800cf14 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	4a04      	ldr	r2, [pc, #16]	; (800cf30 <_ZN10TestResultD1Ev+0x1c>)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	601a      	str	r2, [r3, #0]
{
}
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	4618      	mov	r0, r3
 800cf26:	370c      	adds	r7, #12
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr
 800cf30:	08018ab8 	.word	0x08018ab8

0800cf34 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
}
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f7ff ffe9 	bl	800cf14 <_ZN10TestResultD1Ev>
 800cf42:	2138      	movs	r1, #56	; 0x38
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f7f9 fceb 	bl	8006920 <_ZdlPvj>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	685a      	ldr	r2, [r3, #4]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	3318      	adds	r3, #24
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	6839      	ldr	r1, [r7, #0]
 800cf6e:	4610      	mov	r0, r2
 800cf70:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800cf72:	4b05      	ldr	r3, [pc, #20]	; (800cf88 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4798      	blx	r3
 800cf78:	4603      	mov	r3, r0
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cf80:	bf00      	nop
 800cf82:	3708      	adds	r7, #8
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	200000a4 	.word	0x200000a4

0800cf8c <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 800cf96:	4b0c      	ldr	r3, [pc, #48]	; (800cfc8 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4798      	blx	r3
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa4:	1ad2      	subs	r2, r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	685a      	ldr	r2, [r3, #4]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	331c      	adds	r3, #28
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	6879      	ldr	r1, [r7, #4]
 800cfba:	4610      	mov	r0, r2
 800cfbc:	4798      	blx	r3
}
 800cfbe:	bf00      	nop
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	200000a4 	.word	0x200000a4

0800cfcc <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	685a      	ldr	r2, [r3, #4]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	3310      	adds	r3, #16
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6839      	ldr	r1, [r7, #0]
 800cfe6:	4610      	mov	r0, r2
 800cfe8:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800cfea:	4b05      	ldr	r3, [pc, #20]	; (800d000 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4798      	blx	r3
 800cff0:	4603      	mov	r3, r0
 800cff2:	461a      	mov	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800cff8:	bf00      	nop
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	200000a4 	.word	0x200000a4

0800d004 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
    output_.print(text);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	685a      	ldr	r2, [r3, #4]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	332c      	adds	r3, #44	; 0x2c
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	6839      	ldr	r1, [r7, #0]
 800d01e:	4610      	mov	r0, r2
 800d020:	4798      	blx	r3
}
 800d022:	bf00      	nop
 800d024:	3708      	adds	r7, #8
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b082      	sub	sp, #8
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	685a      	ldr	r2, [r3, #4]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	3348      	adds	r3, #72	; 0x48
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	6839      	ldr	r1, [r7, #0]
 800d044:	4610      	mov	r0, r2
 800d046:	4798      	blx	r3
}
 800d048:	bf00      	nop
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 800d05a:	4b0c      	ldr	r3, [pc, #48]	; (800d08c <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4798      	blx	r3
 800d060:	4603      	mov	r3, r0
 800d062:	461a      	mov	r2, r3
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d068:	1ad2      	subs	r2, r2, r3
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	685a      	ldr	r2, [r3, #4]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	3314      	adds	r3, #20
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	6879      	ldr	r1, [r7, #4]
 800d07e:	4610      	mov	r0, r2
 800d080:	4798      	blx	r3

}
 800d082:	bf00      	nop
 800d084:	3708      	adds	r7, #8
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	200000a4 	.word	0x200000a4

0800d090 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	685a      	ldr	r2, [r3, #4]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	333c      	adds	r3, #60	; 0x3c
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	6839      	ldr	r1, [r7, #0]
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	4798      	blx	r3
    failureCount_++;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	695b      	ldr	r3, [r3, #20]
 800d0b2:	1c5a      	adds	r2, r3, #1
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	615a      	str	r2, [r3, #20]
}
 800d0b8:	bf00      	nop
 800d0ba:	3708      	adds	r7, #8
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
    testCount_++;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	689b      	ldr	r3, [r3, #8]
 800d0cc:	1c5a      	adds	r2, r3, #1
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	609a      	str	r2, [r3, #8]
}
 800d0d2:	bf00      	nop
 800d0d4:	370c      	adds	r7, #12
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr

0800d0de <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 800d0de:	b480      	push	{r7}
 800d0e0:	b083      	sub	sp, #12
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
    runCount_++;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	1c5a      	adds	r2, r3, #1
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	60da      	str	r2, [r3, #12]
}
 800d0f0:	bf00      	nop
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr

0800d0fc <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
    checkCount_++;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	691b      	ldr	r3, [r3, #16]
 800d108:	1c5a      	adds	r2, r3, #1
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	611a      	str	r2, [r3, #16]
}
 800d10e:	bf00      	nop
 800d110:	370c      	adds	r7, #12
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr

0800d11a <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 800d11a:	b480      	push	{r7}
 800d11c:	b083      	sub	sp, #12
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	699b      	ldr	r3, [r3, #24]
 800d126:	1c5a      	adds	r2, r3, #1
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	619a      	str	r2, [r3, #24]
}
 800d12c:	bf00      	nop
 800d12e:	370c      	adds	r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	69db      	ldr	r3, [r3, #28]
 800d144:	1c5a      	adds	r2, r3, #1
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	61da      	str	r2, [r3, #28]
}
 800d14a:	bf00      	nop
 800d14c:	370c      	adds	r7, #12
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr
	...

0800d158 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800d160:	4b09      	ldr	r3, [pc, #36]	; (800d188 <_ZN10TestResult12testsStartedEv+0x30>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4798      	blx	r3
 800d166:	4603      	mov	r3, r0
 800d168:	461a      	mov	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	3308      	adds	r3, #8
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4610      	mov	r0, r2
 800d17e:	4798      	blx	r3
}
 800d180:	bf00      	nop
 800d182:	3708      	adds	r7, #8
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	200000a4 	.word	0x200000a4

0800d18c <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 800d194:	4b0c      	ldr	r3, [pc, #48]	; (800d1c8 <_ZN10TestResult10testsEndedEv+0x3c>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4798      	blx	r3
 800d19a:	4603      	mov	r3, r0
 800d19c:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	1ad2      	subs	r2, r2, r3
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	685a      	ldr	r2, [r3, #4]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	330c      	adds	r3, #12
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	6879      	ldr	r1, [r7, #4]
 800d1ba:	4610      	mov	r0, r2
 800d1bc:	4798      	blx	r3
}
 800d1be:	bf00      	nop
 800d1c0:	3710      	adds	r7, #16
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	200000a4 	.word	0x200000a4

0800d1cc <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6a1b      	ldr	r3, [r3, #32]
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800d208:	4618      	mov	r0, r3
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr

0800d214 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 800d214:	b590      	push	{r4, r7, lr}
 800d216:	b087      	sub	sp, #28
 800d218:	af00      	add	r7, sp, #0
 800d21a:	ed87 0b04 	vstr	d0, [r7, #16]
 800d21e:	ed87 1b02 	vstr	d1, [r7, #8]
 800d222:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 800d226:	4b2c      	ldr	r3, [pc, #176]	; (800d2d8 <_Z13doubles_equalddd+0xc4>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	ed97 0b04 	vldr	d0, [r7, #16]
 800d22e:	4798      	blx	r3
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d10f      	bne.n	800d256 <_Z13doubles_equalddd+0x42>
 800d236:	4b28      	ldr	r3, [pc, #160]	; (800d2d8 <_Z13doubles_equalddd+0xc4>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	ed97 0b02 	vldr	d0, [r7, #8]
 800d23e:	4798      	blx	r3
 800d240:	4603      	mov	r3, r0
 800d242:	2b00      	cmp	r3, #0
 800d244:	d107      	bne.n	800d256 <_Z13doubles_equalddd+0x42>
 800d246:	4b24      	ldr	r3, [pc, #144]	; (800d2d8 <_Z13doubles_equalddd+0xc4>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	ed97 0b00 	vldr	d0, [r7]
 800d24e:	4798      	blx	r3
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d001      	beq.n	800d25a <_Z13doubles_equalddd+0x46>
 800d256:	2301      	movs	r3, #1
 800d258:	e000      	b.n	800d25c <_Z13doubles_equalddd+0x48>
 800d25a:	2300      	movs	r3, #0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d001      	beq.n	800d264 <_Z13doubles_equalddd+0x50>
        return false;
 800d260:	2300      	movs	r3, #0
 800d262:	e035      	b.n	800d2d0 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 800d264:	4b1d      	ldr	r3, [pc, #116]	; (800d2dc <_Z13doubles_equalddd+0xc8>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	ed97 0b04 	vldr	d0, [r7, #16]
 800d26c:	4798      	blx	r3
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d009      	beq.n	800d288 <_Z13doubles_equalddd+0x74>
 800d274:	4b19      	ldr	r3, [pc, #100]	; (800d2dc <_Z13doubles_equalddd+0xc8>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	ed97 0b02 	vldr	d0, [r7, #8]
 800d27c:	4798      	blx	r3
 800d27e:	4603      	mov	r3, r0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d001      	beq.n	800d288 <_Z13doubles_equalddd+0x74>
 800d284:	2301      	movs	r3, #1
 800d286:	e000      	b.n	800d28a <_Z13doubles_equalddd+0x76>
 800d288:	2300      	movs	r3, #0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d001      	beq.n	800d292 <_Z13doubles_equalddd+0x7e>
    {
        return true;
 800d28e:	2301      	movs	r3, #1
 800d290:	e01e      	b.n	800d2d0 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 800d292:	4b13      	ldr	r3, [pc, #76]	; (800d2e0 <_Z13doubles_equalddd+0xcc>)
 800d294:	681c      	ldr	r4, [r3, #0]
 800d296:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d29a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d29e:	f7f3 f833 	bl	8000308 <__aeabi_dsub>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	ec43 2b17 	vmov	d7, r2, r3
 800d2aa:	eeb0 0a47 	vmov.f32	s0, s14
 800d2ae:	eef0 0a67 	vmov.f32	s1, s15
 800d2b2:	47a0      	blx	r4
 800d2b4:	ec53 2b10 	vmov	r2, r3, d0
 800d2b8:	2101      	movs	r1, #1
 800d2ba:	460c      	mov	r4, r1
 800d2bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d2c0:	f7f3 fa4e 	bl	8000760 <__aeabi_dcmpge>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d101      	bne.n	800d2ce <_Z13doubles_equalddd+0xba>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	461c      	mov	r4, r3
 800d2ce:	b2e3      	uxtb	r3, r4
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	371c      	adds	r7, #28
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd90      	pop	{r4, r7, pc}
 800d2d8:	200000e0 	.word	0x200000e0
 800d2dc:	200000e4 	.word	0x200000e4
 800d2e0:	200000d4 	.word	0x200000d4

0800d2e4 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	332c      	adds	r3, #44	; 0x2c
    }
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
    {
 800d304:	4a0a      	ldr	r2, [pc, #40]	; (800d330 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	332c      	adds	r3, #44	; 0x2c
 800d30e:	4618      	mov	r0, r3
 800d310:	f7ff fe00 	bl	800cf14 <_ZN10TestResultD1Ev>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	331c      	adds	r3, #28
 800d318:	4618      	mov	r0, r3
 800d31a:	f7f7 fdfd 	bl	8004f18 <_ZN17ConsoleTestOutputD1Ev>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4618      	mov	r0, r3
 800d322:	f000 f943 	bl	800d5ac <_ZN10UtestShellD1Ev>
    }
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	4618      	mov	r0, r3
 800d32a:	3708      	adds	r7, #8
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	08018b00 	.word	0x08018b00

0800d334 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
    }
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7ff ffdd 	bl	800d2fc <_ZN22OutsideTestRunnerUTestD1Ev>
 800d342:	2164      	movs	r1, #100	; 0x64
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7f9 faeb 	bl	8006920 <_ZdlPvj>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4618      	mov	r0, r3
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af02      	add	r7, sp, #8
 800d35a:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	2300      	movs	r3, #0
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	4b0d      	ldr	r3, [pc, #52]	; (800d398 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 800d364:	4a0d      	ldr	r2, [pc, #52]	; (800d39c <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 800d366:	490e      	ldr	r1, [pc, #56]	; (800d3a0 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 800d368:	f000 f8f8 	bl	800d55c <_ZN10UtestShellC1EPKcS1_S1_j>
 800d36c:	4a0d      	ldr	r2, [pc, #52]	; (800d3a4 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	601a      	str	r2, [r3, #0]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	331c      	adds	r3, #28
 800d376:	4618      	mov	r0, r3
 800d378:	f7f7 fdbc 	bl	8004ef4 <_ZN17ConsoleTestOutputC1Ev>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	331c      	adds	r3, #28
 800d386:	4619      	mov	r1, r3
 800d388:	4610      	mov	r0, r2
 800d38a:	f7ff fd8b 	bl	800cea4 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	4618      	mov	r0, r3
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	08016c50 	.word	0x08016c50
 800d39c:	08016c60 	.word	0x08016c60
 800d3a0:	08016ca0 	.word	0x08016ca0
 800d3a4:	08018b00 	.word	0x08018b00

0800d3a8 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	4801      	ldr	r0, [pc, #4]	; (800d3b4 <__tcf_0+0xc>)
 800d3ae:	f7ff ffa5 	bl	800d2fc <_ZN22OutsideTestRunnerUTestD1Ev>
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	2000073c 	.word	0x2000073c

0800d3b8 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 800d3bc:	4b12      	ldr	r3, [pc, #72]	; (800d408 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	f3bf 8f5b 	dmb	ish
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	f003 0301 	and.w	r3, r3, #1
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	bf0c      	ite	eq
 800d3ce:	2301      	moveq	r3, #1
 800d3d0:	2300      	movne	r3, #0
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d013      	beq.n	800d400 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800d3d8:	480b      	ldr	r0, [pc, #44]	; (800d408 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800d3da:	f004 fe0d 	bl	8011ff8 <__cxa_guard_acquire>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	bf14      	ite	ne
 800d3e4:	2301      	movne	r3, #1
 800d3e6:	2300      	moveq	r3, #0
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d008      	beq.n	800d400 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800d3ee:	4807      	ldr	r0, [pc, #28]	; (800d40c <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 800d3f0:	f7ff ffb0 	bl	800d354 <_ZN22OutsideTestRunnerUTestC1Ev>
 800d3f4:	4804      	ldr	r0, [pc, #16]	; (800d408 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800d3f6:	f004 fe0b 	bl	8012010 <__cxa_guard_release>
 800d3fa:	4805      	ldr	r0, [pc, #20]	; (800d410 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 800d3fc:	f004 fe2f 	bl	801205e <atexit>
    return instance_;
 800d400:	4b02      	ldr	r3, [pc, #8]	; (800d40c <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 800d402:	4618      	mov	r0, r3
 800d404:	bd80      	pop	{r7, pc}
 800d406:	bf00      	nop
 800d408:	200007a0 	.word	0x200007a0
 800d40c:	2000073c 	.word	0x2000073c
 800d410:	0800d3a9 	.word	0x0800d3a9

0800d414 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	330c      	adds	r3, #12
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	4798      	blx	r3
    }
 800d428:	bf00      	nop
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	3314      	adds	r3, #20
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	4798      	blx	r3
    }
 800d444:	bf00      	nop
 800d446:	3708      	adds	r7, #8
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	3310      	adds	r3, #16
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	4798      	blx	r3
    }
 800d460:	bf00      	nop
 800d462:	3708      	adds	r7, #8
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 800d468:	b480      	push	{r7}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	60b9      	str	r1, [r7, #8]
 800d472:	607a      	str	r2, [r7, #4]
 800d474:	603b      	str	r3, [r7, #0]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	68ba      	ldr	r2, [r7, #8]
 800d47a:	601a      	str	r2, [r3, #0]
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	605a      	str	r2, [r3, #4]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	683a      	ldr	r2, [r7, #0]
 800d486:	609a      	str	r2, [r3, #8]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	4618      	mov	r0, r3
 800d48c:	3714      	adds	r7, #20
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr

0800d496 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 800d496:	b580      	push	{r7, lr}
 800d498:	b086      	sub	sp, #24
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	689b      	ldr	r3, [r3, #8]
 800d4b2:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	3394      	adds	r3, #148	; 0x94
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	68ba      	ldr	r2, [r7, #8]
 800d4be:	68f9      	ldr	r1, [r7, #12]
 800d4c0:	6938      	ldr	r0, [r7, #16]
 800d4c2:	4798      	blx	r3
    }
 800d4c4:	bf00      	nop
 800d4c6:	3718      	adds	r7, #24
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b086      	sub	sp, #24
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	689b      	ldr	r3, [r3, #8]
 800d4e8:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 800d4ea:	4b05      	ldr	r3, [pc, #20]	; (800d500 <helperDoRunOneTestSeperateProcess+0x34>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	68ba      	ldr	r2, [r7, #8]
 800d4f0:	68f9      	ldr	r1, [r7, #12]
 800d4f2:	6938      	ldr	r0, [r7, #16]
 800d4f4:	4798      	blx	r3
    }
 800d4f6:	bf00      	nop
 800d4f8:	3718      	adds	r7, #24
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	20000098 	.word	0x20000098

0800d504 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800d50c:	4a0f      	ldr	r2, [pc, #60]	; (800d54c <_ZN10UtestShellC1Ev+0x48>)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	601a      	str	r2, [r3, #0]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	4a0e      	ldr	r2, [pc, #56]	; (800d550 <_ZN10UtestShellC1Ev+0x4c>)
 800d516:	605a      	str	r2, [r3, #4]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4a0e      	ldr	r2, [pc, #56]	; (800d554 <_ZN10UtestShellC1Ev+0x50>)
 800d51c:	609a      	str	r2, [r3, #8]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4a0d      	ldr	r2, [pc, #52]	; (800d558 <_ZN10UtestShellC1Ev+0x54>)
 800d522:	60da      	str	r2, [r3, #12]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	611a      	str	r2, [r3, #16]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	615a      	str	r2, [r3, #20]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	761a      	strb	r2, [r3, #24]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2200      	movs	r2, #0
 800d53a:	765a      	strb	r2, [r3, #25]
{
}
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	4618      	mov	r0, r3
 800d540:	370c      	adds	r7, #12
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	08018bc0 	.word	0x08018bc0
 800d550:	08016cec 	.word	0x08016cec
 800d554:	08016d00 	.word	0x08016d00
 800d558:	08016d10 	.word	0x08016d10

0800d55c <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 800d55c:	b480      	push	{r7}
 800d55e:	b085      	sub	sp, #20
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]
 800d568:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800d56a:	4a0f      	ldr	r2, [pc, #60]	; (800d5a8 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	601a      	str	r2, [r3, #0]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	68ba      	ldr	r2, [r7, #8]
 800d574:	605a      	str	r2, [r3, #4]
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	609a      	str	r2, [r3, #8]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	683a      	ldr	r2, [r7, #0]
 800d580:	60da      	str	r2, [r3, #12]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	69ba      	ldr	r2, [r7, #24]
 800d586:	611a      	str	r2, [r3, #16]
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2200      	movs	r2, #0
 800d58c:	615a      	str	r2, [r3, #20]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2200      	movs	r2, #0
 800d592:	761a      	strb	r2, [r3, #24]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2200      	movs	r2, #0
 800d598:	765a      	strb	r2, [r3, #25]
{
}
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	4618      	mov	r0, r3
 800d59e:	3714      	adds	r7, #20
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr
 800d5a8:	08018bc0 	.word	0x08018bc0

0800d5ac <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	4a04      	ldr	r2, [pc, #16]	; (800d5c8 <_ZN10UtestShellD1Ev+0x1c>)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	601a      	str	r2, [r3, #0]
{
}
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	370c      	adds	r7, #12
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr
 800d5c8:	08018bc0 	.word	0x08018bc0

0800d5cc <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
}
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f7ff ffe9 	bl	800d5ac <_ZN10UtestShellD1Ev>
 800d5da:	211c      	movs	r1, #28
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f7f9 f99f 	bl	8006920 <_ZdlPvj>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3708      	adds	r7, #8
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b082      	sub	sp, #8
 800d5f0:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	3310      	adds	r3, #16
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	4798      	blx	r3
}
 800d602:	bf00      	nop
 800d604:	3708      	adds	r7, #8
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
	...

0800d60c <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 800d610:	4b02      	ldr	r3, [pc, #8]	; (800d61c <_ZN10UtestShell5crashEv+0x10>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4798      	blx	r3
}
 800d616:	bf00      	nop
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	20000094 	.word	0x20000094

0800d620 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b088      	sub	sp, #32
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2200      	movs	r2, #0
 800d630:	765a      	strb	r2, [r3, #25]
    result.countRun();
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	3324      	adds	r3, #36	; 0x24
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 800d63e:	f107 0014 	add.w	r0, r7, #20
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	68ba      	ldr	r2, [r7, #8]
 800d646:	68f9      	ldr	r1, [r7, #12]
 800d648:	f7ff ff0e 	bl	800d468 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	337c      	adds	r3, #124	; 0x7c
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	4798      	blx	r3
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d007      	beq.n	800d66e <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 800d65e:	4b09      	ldr	r3, [pc, #36]	; (800d684 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f107 0214 	add.w	r2, r7, #20
 800d666:	4611      	mov	r1, r2
 800d668:	4807      	ldr	r0, [pc, #28]	; (800d688 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 800d66a:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 800d66c:	e006      	b.n	800d67c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 800d66e:	4b05      	ldr	r3, [pc, #20]	; (800d684 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f107 0214 	add.w	r2, r7, #20
 800d676:	4611      	mov	r1, r2
 800d678:	4804      	ldr	r0, [pc, #16]	; (800d68c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 800d67a:	4798      	blx	r3
}
 800d67c:	bf00      	nop
 800d67e:	3720      	adds	r7, #32
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	200000a0 	.word	0x200000a0
 800d688:	0800d4cd 	.word	0x0800d4cd
 800d68c:	0800d497 	.word	0x0800d497

0800d690 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 800d690:	b590      	push	{r4, r7, lr}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
    return new Utest();
 800d698:	22d3      	movs	r2, #211	; 0xd3
 800d69a:	4906      	ldr	r1, [pc, #24]	; (800d6b4 <_ZN10UtestShell10createTestEv+0x24>)
 800d69c:	2004      	movs	r0, #4
 800d69e:	f7f9 f92b 	bl	80068f8 <_ZnwjPKci>
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	f001 fafd 	bl	800eca4 <_ZN5UtestC1Ev>
 800d6aa:	4623      	mov	r3, r4
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	370c      	adds	r7, #12
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd90      	pop	{r4, r7, pc}
 800d6b4:	08016d20 	.word	0x08016d20

0800d6b8 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	6039      	str	r1, [r7, #0]
    delete test;
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d004      	beq.n	800d6d2 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	3204      	adds	r2, #4
 800d6cc:	6812      	ldr	r2, [r2, #0]
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	4790      	blx	r2
}
 800d6d2:	bf00      	nop
 800d6d4:	3708      	adds	r7, #8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
	...

0800d6dc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b088      	sub	sp, #32
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	333c      	adds	r3, #60	; 0x3c
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4940      	ldr	r1, [pc, #256]	; (800d7f4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	3314      	adds	r3, #20
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	68f9      	ldr	r1, [r7, #12]
 800d702:	68b8      	ldr	r0, [r7, #8]
 800d704:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	333c      	adds	r3, #60	; 0x3c
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	493a      	ldr	r1, [pc, #232]	; (800d7f8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 800d714:	f001 fa9c 	bl	800ec50 <_ZN10UtestShell10getCurrentEv>
 800d718:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 800d71a:	68f8      	ldr	r0, [r7, #12]
 800d71c:	f001 fa7e 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800d720:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 800d722:	6879      	ldr	r1, [r7, #4]
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f001 fa59 	bl	800ebdc <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 800d72a:	68f9      	ldr	r1, [r7, #12]
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f001 fa65 	bl	800ebfc <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	333c      	adds	r3, #60	; 0x3c
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4930      	ldr	r1, [pc, #192]	; (800d7fc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	4798      	blx	r3
    Utest* testToRun = createTest();
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	3388      	adds	r3, #136	; 0x88
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	4798      	blx	r3
 800d74c:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	333c      	adds	r3, #60	; 0x3c
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	492a      	ldr	r1, [pc, #168]	; (800d800 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	333c      	adds	r3, #60	; 0x3c
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4927      	ldr	r1, [pc, #156]	; (800d804 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	4798      	blx	r3
    testToRun->run();
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	3308      	adds	r3, #8
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	6978      	ldr	r0, [r7, #20]
 800d774:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	333c      	adds	r3, #60	; 0x3c
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4922      	ldr	r1, [pc, #136]	; (800d808 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 800d784:	69f9      	ldr	r1, [r7, #28]
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	f001 fa38 	bl	800ebfc <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 800d78c:	69b9      	ldr	r1, [r7, #24]
 800d78e:	68f8      	ldr	r0, [r7, #12]
 800d790:	f001 fa24 	bl	800ebdc <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	333c      	adds	r3, #60	; 0x3c
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	491b      	ldr	r1, [pc, #108]	; (800d80c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	4798      	blx	r3
    destroyTest(testToRun);
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	338c      	adds	r3, #140	; 0x8c
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	6979      	ldr	r1, [r7, #20]
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	333c      	adds	r3, #60	; 0x3c
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4915      	ldr	r1, [pc, #84]	; (800d810 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	333c      	adds	r3, #60	; 0x3c
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4913      	ldr	r1, [pc, #76]	; (800d814 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	3318      	adds	r3, #24
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	68f9      	ldr	r1, [r7, #12]
 800d7d8:	68b8      	ldr	r0, [r7, #8]
 800d7da:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	333c      	adds	r3, #60	; 0x3c
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	490c      	ldr	r1, [pc, #48]	; (800d818 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	4798      	blx	r3
}
 800d7ea:	bf00      	nop
 800d7ec:	3720      	adds	r7, #32
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	08016d34 	.word	0x08016d34
 800d7f8:	08016d58 	.word	0x08016d58
 800d7fc:	08016d78 	.word	0x08016d78
 800d800:	08016d94 	.word	0x08016d94
 800d804:	08016db0 	.word	0x08016db0
 800d808:	08016dcc 	.word	0x08016dcc
 800d80c:	08016de4 	.word	0x08016de4
 800d810:	08016e00 	.word	0x08016e00
 800d814:	08016e1c 	.word	0x08016e1c
 800d818:	08016e40 	.word	0x08016e40

0800d81c <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
    return next_;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	695b      	ldr	r3, [r3, #20]
}
 800d828:	4618      	mov	r0, r3
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
    next_ = test;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	683a      	ldr	r2, [r7, #0]
 800d842:	615a      	str	r2, [r3, #20]
    return this;
 800d844:	687b      	ldr	r3, [r7, #4]
}
 800d846:	4618      	mov	r0, r3
 800d848:	370c      	adds	r7, #12
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr

0800d852 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 800d852:	b580      	push	{r7, lr}
 800d854:	b082      	sub	sp, #8
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	695b      	ldr	r3, [r3, #20]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00b      	beq.n	800d87a <_ZN10UtestShell10countTestsEv+0x28>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	695a      	ldr	r2, [r3, #20]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	695b      	ldr	r3, [r3, #20]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	3310      	adds	r3, #16
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4610      	mov	r0, r2
 800d872:	4798      	blx	r3
 800d874:	4603      	mov	r3, r0
 800d876:	3301      	adds	r3, #1
 800d878:	e000      	b.n	800d87c <_ZN10UtestShell10countTestsEv+0x2a>
 800d87a:	2301      	movs	r3, #1
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3708      	adds	r7, #8
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b082      	sub	sp, #8
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
    return "TEST";
 800d88e:	4904      	ldr	r1, [pc, #16]	; (800d8a0 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7f9 ff1a 	bl	80076ca <_ZN12SimpleStringC1EPKc>
}
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	3708      	adds	r7, #8
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	08016e64 	.word	0x08016e64

0800d8a4 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7f9 ff08 	bl	80076ca <_ZN12SimpleStringC1EPKc>
}
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	3708      	adds	r7, #8
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}

0800d8c2 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	b082      	sub	sp, #8
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
 800d8ca:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f7f9 fef9 	bl	80076ca <_ZN12SimpleStringC1EPKc>
}
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	3708      	adds	r7, #8
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	33a0      	adds	r3, #160	; 0xa0
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	6839      	ldr	r1, [r7, #0]
 800d8f6:	4610      	mov	r0, r2
 800d8f8:	4798      	blx	r3
    formattedName += "(";
 800d8fa:	490e      	ldr	r1, [pc, #56]	; (800d934 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f7fa fb2b 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	4619      	mov	r1, r3
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7fa fb25 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 800d90e:	490a      	ldr	r1, [pc, #40]	; (800d938 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f7fa fb21 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	4619      	mov	r1, r3
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7fa fb1b 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 800d922:	4906      	ldr	r1, [pc, #24]	; (800d93c <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f7fa fb17 	bl	8007f58 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 800d92a:	bf00      	nop
}
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	08016e6c 	.word	0x08016e6c
 800d938:	08016e70 	.word	0x08016e70
 800d93c:	08016e74 	.word	0x08016e74

0800d940 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	7e5b      	ldrb	r3, [r3, #25]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	370c      	adds	r7, #12
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <_ZNK10UtestShell7willRunEv>:
{
    getTestResult()->countCheck();
}

bool UtestShell::willRun() const
{
 800d958:	b480      	push	{r7}
 800d95a:	b083      	sub	sp, #12
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
    return true;
 800d960:	2301      	movs	r3, #1
}
 800d962:	4618      	mov	r0, r3
 800d964:	370c      	adds	r7, #12
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr

0800d96e <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 800d96e:	b480      	push	{r7}
 800d970:	b083      	sub	sp, #12
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	7e1b      	ldrb	r3, [r3, #24]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	370c      	adds	r7, #12
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 800d986:	b480      	push	{r7}
 800d988:	b083      	sub	sp, #12
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2201      	movs	r2, #1
 800d992:	761a      	strb	r2, [r3, #24]
}
 800d994:	bf00      	nop
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b083      	sub	sp, #12
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]

}
 800d9a8:	bf00      	nop
 800d9aa:	370c      	adds	r7, #12
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	683a      	ldr	r2, [r7, #0]
 800d9c2:	60da      	str	r2, [r3, #12]
}
 800d9c4:	bf00      	nop
 800d9c6:	370c      	adds	r7, #12
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	683a      	ldr	r2, [r7, #0]
 800d9de:	611a      	str	r2, [r3, #16]
}
 800d9e0:	bf00      	nop
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	683a      	ldr	r2, [r7, #0]
 800d9fa:	605a      	str	r2, [r3, #4]
}
 800d9fc:	bf00      	nop
 800d9fe:	370c      	adds	r7, #12
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
    name_ = testName;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	683a      	ldr	r2, [r7, #0]
 800da16:	609a      	str	r2, [r3, #8]
}
 800da18:	bf00      	nop
 800da1a:	370c      	adds	r7, #12
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr

0800da24 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	4619      	mov	r1, r3
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f7f9 fe48 	bl	80076ca <_ZN12SimpleStringC1EPKc>
}
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 800da42:	b480      	push	{r7}
 800da44:	b083      	sub	sp, #12
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	691b      	ldr	r3, [r3, #16]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	370c      	adds	r7, #12
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr

0800da5a <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 800da5a:	b590      	push	{r4, r7, lr}
 800da5c:	b087      	sub	sp, #28
 800da5e:	af00      	add	r7, sp, #0
 800da60:	60f8      	str	r0, [r7, #12]
 800da62:	60b9      	str	r1, [r7, #8]
 800da64:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d101      	bne.n	800da70 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 800da6c:	2301      	movs	r3, #1
 800da6e:	e01f      	b.n	800dab0 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d01b      	beq.n	800daae <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 800da76:	f107 0310 	add.w	r3, r7, #16
 800da7a:	68b9      	ldr	r1, [r7, #8]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7f9 fe24 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800da82:	f107 0310 	add.w	r3, r7, #16
 800da86:	4619      	mov	r1, r3
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f004 fa88 	bl	8011f9e <_ZNK10TestFilter5matchERK12SimpleString>
 800da8e:	4603      	mov	r3, r0
 800da90:	461c      	mov	r4, r3
 800da92:	f107 0310 	add.w	r3, r7, #16
 800da96:	4618      	mov	r0, r3
 800da98:	f7fa f9cf 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800da9c:	2c00      	cmp	r4, #0
 800da9e:	d001      	beq.n	800daa4 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 800daa0:	2301      	movs	r3, #1
 800daa2:	e005      	b.n	800dab0 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f004 fa54 	bl	8011f52 <_ZNK10TestFilter7getNextEv>
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	e7e0      	b.n	800da70 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	371c      	adds	r7, #28
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd90      	pop	{r4, r7, pc}

0800dab8 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	68ba      	ldr	r2, [r7, #8]
 800daca:	4619      	mov	r1, r3
 800dacc:	68f8      	ldr	r0, [r7, #12]
 800dace:	f7ff ffc4 	bl	800da5a <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d00b      	beq.n	800daf0 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	689b      	ldr	r3, [r3, #8]
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	4619      	mov	r1, r3
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f7ff ffba 	bl	800da5a <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800daec:	2301      	movs	r3, #1
 800daee:	e000      	b.n	800daf2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 800daf0:	2300      	movs	r3, #0
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}

0800dafa <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 800dafa:	b590      	push	{r4, r7, lr}
 800dafc:	b083      	sub	sp, #12
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
 800db02:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	339c      	adds	r3, #156	; 0x9c
 800db0a:	681c      	ldr	r4, [r3, #0]
 800db0c:	f001 f8b0 	bl	800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800db10:	4603      	mov	r3, r0
 800db12:	461a      	mov	r2, r3
 800db14:	6839      	ldr	r1, [r7, #0]
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 800db1a:	bf00      	nop
 800db1c:	370c      	adds	r7, #12
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd90      	pop	{r4, r7, pc}

0800db22 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 800db22:	b580      	push	{r7, lr}
 800db24:	b084      	sub	sp, #16
 800db26:	af00      	add	r7, sp, #0
 800db28:	60f8      	str	r0, [r7, #12]
 800db2a:	60b9      	str	r1, [r7, #8]
 800db2c:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2201      	movs	r2, #1
 800db32:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f001 f871 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800db3a:	4603      	mov	r3, r0
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	3234      	adds	r2, #52	; 0x34
 800db40:	6812      	ldr	r2, [r2, #0]
 800db42:	68b9      	ldr	r1, [r7, #8]
 800db44:	4618      	mov	r0, r3
 800db46:	4790      	blx	r2
    terminator.exitCurrentTest();
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800db52:	bf00      	nop
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b082      	sub	sp, #8
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
 800db62:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	6838      	ldr	r0, [r7, #0]
 800db6c:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800db6e:	bf00      	nop
 800db70:	3708      	adds	r7, #8
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800db76:	b590      	push	{r4, r7, lr}
 800db78:	b09d      	sub	sp, #116	; 0x74
 800db7a:	af04      	add	r7, sp, #16
 800db7c:	60f8      	str	r0, [r7, #12]
 800db7e:	607a      	str	r2, [r7, #4]
 800db80:	603b      	str	r3, [r7, #0]
 800db82:	460b      	mov	r3, r1
 800db84:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f001 f848 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800db8c:	4603      	mov	r3, r0
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	3228      	adds	r2, #40	; 0x28
 800db92:	6812      	ldr	r2, [r2, #0]
 800db94:	4618      	mov	r0, r3
 800db96:	4790      	blx	r2
    if (!condition)
 800db98:	7afb      	ldrb	r3, [r7, #11]
 800db9a:	f083 0301 	eor.w	r3, r3, #1
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d03f      	beq.n	800dc24 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	339c      	adds	r3, #156	; 0x9c
 800dbaa:	681c      	ldr	r4, [r3, #0]
 800dbac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dbb0:	6879      	ldr	r1, [r7, #4]
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7f9 fd89 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800dbb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dbbc:	6839      	ldr	r1, [r7, #0]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7f9 fd83 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800dbc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dbc8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7f9 fd7d 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800dbd0:	f107 0014 	add.w	r0, r7, #20
 800dbd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dbd8:	9302      	str	r3, [sp, #8]
 800dbda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dbde:	9301      	str	r3, [sp, #4]
 800dbe0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbe8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dbea:	68f9      	ldr	r1, [r7, #12]
 800dbec:	f7fb ff7c 	bl	8009ae8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800dbf0:	f107 0314 	add.w	r3, r7, #20
 800dbf4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	47a0      	blx	r4
 800dbfc:	f107 0314 	add.w	r3, r7, #20
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7fc fddf 	bl	800a7c4 <_ZN12CheckFailureD1Ev>
 800dc06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fa f915 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800dc10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7fa f910 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800dc1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7fa f90b 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800dc24:	bf00      	nop
 800dc26:	3764      	adds	r7, #100	; 0x64
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd90      	pop	{r4, r7, pc}

0800dc2c <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800dc2c:	b590      	push	{r4, r7, lr}
 800dc2e:	b097      	sub	sp, #92	; 0x5c
 800dc30:	af02      	add	r7, sp, #8
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	607a      	str	r2, [r7, #4]
 800dc38:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	f000 ffee 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800dc40:	4603      	mov	r3, r0
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	3228      	adds	r2, #40	; 0x28
 800dc46:	6812      	ldr	r2, [r2, #0]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	339c      	adds	r3, #156	; 0x9c
 800dc52:	681c      	ldr	r4, [r3, #0]
 800dc54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc58:	68b9      	ldr	r1, [r7, #8]
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7f9 fd35 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800dc60:	f107 0014 	add.w	r0, r7, #20
 800dc64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc68:	9300      	str	r3, [sp, #0]
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	68f9      	ldr	r1, [r7, #12]
 800dc70:	f7fb ff82 	bl	8009b78 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800dc74:	f107 0314 	add.w	r3, r7, #20
 800dc78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	68f8      	ldr	r0, [r7, #12]
 800dc7e:	47a0      	blx	r4
 800dc80:	f107 0314 	add.w	r3, r7, #20
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7f9 fa0f 	bl	80070a8 <_ZN11FailFailureD1Ev>
 800dc8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7fa f8d3 	bl	8007e3a <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 800dc94:	bf00      	nop
 800dc96:	3754      	adds	r7, #84	; 0x54
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd90      	pop	{r4, r7, pc}

0800dc9c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800dc9c:	b590      	push	{r4, r7, lr}
 800dc9e:	b0a7      	sub	sp, #156	; 0x9c
 800dca0:	af04      	add	r7, sp, #16
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	607a      	str	r2, [r7, #4]
 800dca8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f000 ffb6 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	3228      	adds	r2, #40	; 0x28
 800dcb6:	6812      	ldr	r2, [r2, #0]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d102      	bne.n	800dcc8 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d068      	beq.n	800dd9a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d002      	beq.n	800dcd4 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d12a      	bne.n	800dd2a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	339c      	adds	r3, #156	; 0x9c
 800dcda:	681c      	ldr	r4, [r3, #0]
 800dcdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dce0:	6839      	ldr	r1, [r7, #0]
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7f9 fcf1 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800dce8:	f107 0010 	add.w	r0, r7, #16
 800dcec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dcf0:	9302      	str	r3, [sp, #8]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	9301      	str	r3, [sp, #4]
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	9300      	str	r3, [sp, #0]
 800dcfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dcfe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800dd02:	68f9      	ldr	r1, [r7, #12]
 800dd04:	f7fc f9be 	bl	800a084 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800dd08:	f107 0310 	add.w	r3, r7, #16
 800dd0c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800dd10:	4619      	mov	r1, r3
 800dd12:	68f8      	ldr	r0, [r7, #12]
 800dd14:	47a0      	blx	r4
 800dd16:	f107 0310 	add.w	r3, r7, #16
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7fc fcca 	bl	800a6b4 <_ZN18StringEqualFailureD1Ev>
 800dd20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7fa f888 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 800dd2a:	6879      	ldr	r1, [r7, #4]
 800dd2c:	68b8      	ldr	r0, [r7, #8]
 800dd2e:	f7f9 fb09 	bl	8007344 <_ZN12SimpleString6StrCmpEPKcS1_>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	bf14      	ite	ne
 800dd38:	2301      	movne	r3, #1
 800dd3a:	2300      	moveq	r3, #0
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d02c      	beq.n	800dd9c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	339c      	adds	r3, #156	; 0x9c
 800dd48:	681c      	ldr	r4, [r3, #0]
 800dd4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800dd4e:	6839      	ldr	r1, [r7, #0]
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7f9 fcba 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800dd56:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800dd5a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800dd5e:	9302      	str	r3, [sp, #8]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	9301      	str	r3, [sp, #4]
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dd6c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800dd70:	68f9      	ldr	r1, [r7, #12]
 800dd72:	f7fc f987 	bl	800a084 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800dd76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd7a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800dd7e:	4619      	mov	r1, r3
 800dd80:	68f8      	ldr	r0, [r7, #12]
 800dd82:	47a0      	blx	r4
 800dd84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7fc fc93 	bl	800a6b4 <_ZN18StringEqualFailureD1Ev>
 800dd8e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7fa f851 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800dd98:	e000      	b.n	800dd9c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800dd9a:	bf00      	nop
}
 800dd9c:	378c      	adds	r7, #140	; 0x8c
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd90      	pop	{r4, r7, pc}

0800dda2 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800dda2:	b590      	push	{r4, r7, lr}
 800dda4:	b0a7      	sub	sp, #156	; 0x9c
 800dda6:	af04      	add	r7, sp, #16
 800dda8:	60f8      	str	r0, [r7, #12]
 800ddaa:	60b9      	str	r1, [r7, #8]
 800ddac:	607a      	str	r2, [r7, #4]
 800ddae:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	f000 ff33 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	3228      	adds	r2, #40	; 0x28
 800ddbc:	6812      	ldr	r2, [r2, #0]
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d102      	bne.n	800ddce <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d06b      	beq.n	800dea6 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d002      	beq.n	800ddda <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d12b      	bne.n	800de32 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	339c      	adds	r3, #156	; 0x9c
 800dde0:	681c      	ldr	r4, [r3, #0]
 800dde2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dde6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7f9 fc6d 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800ddf0:	f107 0010 	add.w	r0, r7, #16
 800ddf4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ddf8:	9302      	str	r3, [sp, #8]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	9301      	str	r3, [sp, #4]
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800de06:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800de0a:	68f9      	ldr	r1, [r7, #12]
 800de0c:	f7fc f93a 	bl	800a084 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800de10:	f107 0310 	add.w	r3, r7, #16
 800de14:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800de18:	4619      	mov	r1, r3
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	47a0      	blx	r4
 800de1e:	f107 0310 	add.w	r3, r7, #16
 800de22:	4618      	mov	r0, r3
 800de24:	f7fc fc46 	bl	800a6b4 <_ZN18StringEqualFailureD1Ev>
 800de28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7fa f804 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 800de32:	683a      	ldr	r2, [r7, #0]
 800de34:	6879      	ldr	r1, [r7, #4]
 800de36:	68b8      	ldr	r0, [r7, #8]
 800de38:	f7f9 fac3 	bl	80073c2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800de3c:	4603      	mov	r3, r0
 800de3e:	2b00      	cmp	r3, #0
 800de40:	bf14      	ite	ne
 800de42:	2301      	movne	r3, #1
 800de44:	2300      	moveq	r3, #0
 800de46:	b2db      	uxtb	r3, r3
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d02d      	beq.n	800dea8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	339c      	adds	r3, #156	; 0x9c
 800de52:	681c      	ldr	r4, [r3, #0]
 800de54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800de58:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7f9 fc34 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800de62:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800de66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800de6a:	9302      	str	r3, [sp, #8]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	9301      	str	r3, [sp, #4]
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800de78:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800de7c:	68f9      	ldr	r1, [r7, #12]
 800de7e:	f7fc f901 	bl	800a084 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800de82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800de86:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800de8a:	4619      	mov	r1, r3
 800de8c:	68f8      	ldr	r0, [r7, #12]
 800de8e:	47a0      	blx	r4
 800de90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800de94:	4618      	mov	r0, r3
 800de96:	f7fc fc0d 	bl	800a6b4 <_ZN18StringEqualFailureD1Ev>
 800de9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7f9 ffcb 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800dea4:	e000      	b.n	800dea8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800dea6:	bf00      	nop
}
 800dea8:	378c      	adds	r7, #140	; 0x8c
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd90      	pop	{r4, r7, pc}

0800deae <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800deae:	b590      	push	{r4, r7, lr}
 800deb0:	b0ab      	sub	sp, #172	; 0xac
 800deb2:	af04      	add	r7, sp, #16
 800deb4:	60f8      	str	r0, [r7, #12]
 800deb6:	60b9      	str	r1, [r7, #8]
 800deb8:	607a      	str	r2, [r7, #4]
 800deba:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800debc:	68f8      	ldr	r0, [r7, #12]
 800debe:	f000 fead 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800dec2:	4603      	mov	r3, r0
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	3228      	adds	r2, #40	; 0x28
 800dec8:	6812      	ldr	r2, [r2, #0]
 800deca:	4618      	mov	r0, r3
 800decc:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d102      	bne.n	800deda <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d07c      	beq.n	800dfd4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d002      	beq.n	800dee6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d128      	bne.n	800df38 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	3398      	adds	r3, #152	; 0x98
 800deec:	681c      	ldr	r4, [r3, #0]
 800deee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	4618      	mov	r0, r3
 800def6:	f7f9 fbe8 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800defa:	f107 0010 	add.w	r0, r7, #16
 800defe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800df02:	9302      	str	r3, [sp, #8]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	9301      	str	r3, [sp, #4]
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	9300      	str	r3, [sp, #0]
 800df0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800df10:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800df14:	68f9      	ldr	r1, [r7, #12]
 800df16:	f7fc f959 	bl	800a1cc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800df1a:	f107 0310 	add.w	r3, r7, #16
 800df1e:	4619      	mov	r1, r3
 800df20:	68f8      	ldr	r0, [r7, #12]
 800df22:	47a0      	blx	r4
 800df24:	f107 0310 	add.w	r3, r7, #16
 800df28:	4618      	mov	r0, r3
 800df2a:	f7fc fba1 	bl	800a670 <_ZN24StringEqualNoCaseFailureD1Ev>
 800df2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800df32:	4618      	mov	r0, r3
 800df34:	f7f9 ff81 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 800df38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df3c:	68b9      	ldr	r1, [r7, #8]
 800df3e:	4618      	mov	r0, r3
 800df40:	f7f9 fbc3 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800df44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800df48:	6879      	ldr	r1, [r7, #4]
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7f9 fbbd 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800df50:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800df54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df58:	4611      	mov	r1, r2
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7f9 ff94 	bl	8007e88 <_ZNK12SimpleString12equalsNoCaseERKS_>
 800df60:	4603      	mov	r3, r0
 800df62:	f083 0301 	eor.w	r3, r3, #1
 800df66:	b2dc      	uxtb	r4, r3
 800df68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7f9 ff64 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800df72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df76:	4618      	mov	r0, r3
 800df78:	f7f9 ff5f 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800df7c:	2c00      	cmp	r4, #0
 800df7e:	d02a      	beq.n	800dfd6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	3398      	adds	r3, #152	; 0x98
 800df86:	681c      	ldr	r4, [r3, #0]
 800df88:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800df8c:	6839      	ldr	r1, [r7, #0]
 800df8e:	4618      	mov	r0, r3
 800df90:	f7f9 fb9b 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800df94:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800df98:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800df9c:	9302      	str	r3, [sp, #8]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	9301      	str	r3, [sp, #4]
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	9300      	str	r3, [sp, #0]
 800dfa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dfaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dfae:	68f9      	ldr	r1, [r7, #12]
 800dfb0:	f7fc f90c 	bl	800a1cc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800dfb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800dfb8:	4619      	mov	r1, r3
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	47a0      	blx	r4
 800dfbe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7fc fb54 	bl	800a670 <_ZN24StringEqualNoCaseFailureD1Ev>
 800dfc8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7f9 ff34 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800dfd2:	e000      	b.n	800dfd6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800dfd4:	bf00      	nop
}
 800dfd6:	379c      	adds	r7, #156	; 0x9c
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd90      	pop	{r4, r7, pc}

0800dfdc <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800dfdc:	b590      	push	{r4, r7, lr}
 800dfde:	b0b3      	sub	sp, #204	; 0xcc
 800dfe0:	af04      	add	r7, sp, #16
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
 800dfe8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800dfea:	68f8      	ldr	r0, [r7, #12]
 800dfec:	f000 fe16 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800dff0:	4603      	mov	r3, r0
 800dff2:	681a      	ldr	r2, [r3, #0]
 800dff4:	3228      	adds	r2, #40	; 0x28
 800dff6:	6812      	ldr	r2, [r2, #0]
 800dff8:	4618      	mov	r0, r3
 800dffa:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d103      	bne.n	800e00a <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	2b00      	cmp	r3, #0
 800e006:	f000 80ad 	beq.w	800e164 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d002      	beq.n	800e016 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d140      	bne.n	800e098 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	3398      	adds	r3, #152	; 0x98
 800e01c:	681c      	ldr	r4, [r3, #0]
 800e01e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e022:	68b9      	ldr	r1, [r7, #8]
 800e024:	4618      	mov	r0, r3
 800e026:	f7f9 fb50 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e02a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e02e:	6879      	ldr	r1, [r7, #4]
 800e030:	4618      	mov	r0, r3
 800e032:	f7f9 fb4a 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e036:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e03a:	6839      	ldr	r1, [r7, #0]
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7f9 fb44 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e042:	f107 0010 	add.w	r0, r7, #16
 800e046:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e04a:	9302      	str	r3, [sp, #8]
 800e04c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e050:	9301      	str	r3, [sp, #4]
 800e052:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e05c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e060:	68f9      	ldr	r1, [r7, #12]
 800e062:	f7fb fcf7 	bl	8009a54 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e066:	f107 0310 	add.w	r3, r7, #16
 800e06a:	4619      	mov	r1, r3
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	47a0      	blx	r4
 800e070:	f107 0310 	add.w	r3, r7, #16
 800e074:	4618      	mov	r0, r3
 800e076:	f7fc fbc7 	bl	800a808 <_ZN15ContainsFailureD1Ev>
 800e07a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e07e:	4618      	mov	r0, r3
 800e080:	f7f9 fedb 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e084:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e088:	4618      	mov	r0, r3
 800e08a:	f7f9 fed6 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e08e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e092:	4618      	mov	r0, r3
 800e094:	f7f9 fed1 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 800e098:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e09c:	6879      	ldr	r1, [r7, #4]
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7f9 fb13 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e0a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e0a8:	68b9      	ldr	r1, [r7, #8]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7f9 fb0d 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e0b0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800e0b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e0b8:	4611      	mov	r1, r2
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7f9 fb83 	bl	80077c6 <_ZNK12SimpleString8containsERKS_>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	f083 0301 	eor.w	r3, r3, #1
 800e0c6:	b2dc      	uxtb	r4, r3
 800e0c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7f9 feb4 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e0d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7f9 feaf 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e0dc:	2c00      	cmp	r4, #0
 800e0de:	d042      	beq.n	800e166 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	3398      	adds	r3, #152	; 0x98
 800e0e6:	681c      	ldr	r4, [r3, #0]
 800e0e8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e0ec:	68b9      	ldr	r1, [r7, #8]
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7f9 faeb 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e0f4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e0f8:	6879      	ldr	r1, [r7, #4]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7f9 fae5 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e100:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e104:	6839      	ldr	r1, [r7, #0]
 800e106:	4618      	mov	r0, r3
 800e108:	f7f9 fadf 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e10c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800e110:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e114:	9302      	str	r3, [sp, #8]
 800e116:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e11a:	9301      	str	r3, [sp, #4]
 800e11c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e126:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e12a:	68f9      	ldr	r1, [r7, #12]
 800e12c:	f7fb fc92 	bl	8009a54 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e130:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e134:	4619      	mov	r1, r3
 800e136:	68f8      	ldr	r0, [r7, #12]
 800e138:	47a0      	blx	r4
 800e13a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e13e:	4618      	mov	r0, r3
 800e140:	f7fc fb62 	bl	800a808 <_ZN15ContainsFailureD1Ev>
 800e144:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e148:	4618      	mov	r0, r3
 800e14a:	f7f9 fe76 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e14e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e152:	4618      	mov	r0, r3
 800e154:	f7f9 fe71 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e158:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7f9 fe6c 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e162:	e000      	b.n	800e166 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e164:	bf00      	nop
}
 800e166:	37bc      	adds	r7, #188	; 0xbc
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd90      	pop	{r4, r7, pc}

0800e16c <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800e16c:	b590      	push	{r4, r7, lr}
 800e16e:	b0b3      	sub	sp, #204	; 0xcc
 800e170:	af04      	add	r7, sp, #16
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	607a      	str	r2, [r7, #4]
 800e178:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e17a:	68f8      	ldr	r0, [r7, #12]
 800e17c:	f000 fd4e 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800e180:	4603      	mov	r3, r0
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	3228      	adds	r2, #40	; 0x28
 800e186:	6812      	ldr	r2, [r2, #0]
 800e188:	4618      	mov	r0, r3
 800e18a:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d103      	bne.n	800e19a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	2b00      	cmp	r3, #0
 800e196:	f000 80ad 	beq.w	800e2f4 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d002      	beq.n	800e1a6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d140      	bne.n	800e228 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	3398      	adds	r3, #152	; 0x98
 800e1ac:	681c      	ldr	r4, [r3, #0]
 800e1ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e1b2:	68b9      	ldr	r1, [r7, #8]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7f9 fa88 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e1ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e1be:	6879      	ldr	r1, [r7, #4]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7f9 fa82 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e1c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e1ca:	6839      	ldr	r1, [r7, #0]
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7f9 fa7c 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e1d2:	f107 0010 	add.w	r0, r7, #16
 800e1d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e1da:	9302      	str	r3, [sp, #8]
 800e1dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e1e0:	9301      	str	r3, [sp, #4]
 800e1e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e1ec:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e1f0:	68f9      	ldr	r1, [r7, #12]
 800e1f2:	f7fb fc2f 	bl	8009a54 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e1f6:	f107 0310 	add.w	r3, r7, #16
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	47a0      	blx	r4
 800e200:	f107 0310 	add.w	r3, r7, #16
 800e204:	4618      	mov	r0, r3
 800e206:	f7fc faff 	bl	800a808 <_ZN15ContainsFailureD1Ev>
 800e20a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e20e:	4618      	mov	r0, r3
 800e210:	f7f9 fe13 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e214:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e218:	4618      	mov	r0, r3
 800e21a:	f7f9 fe0e 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e21e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e222:	4618      	mov	r0, r3
 800e224:	f7f9 fe09 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 800e228:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e22c:	6879      	ldr	r1, [r7, #4]
 800e22e:	4618      	mov	r0, r3
 800e230:	f7f9 fa4b 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e234:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e238:	68b9      	ldr	r1, [r7, #8]
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7f9 fa45 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e240:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800e244:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e248:	4611      	mov	r1, r2
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7f9 fad6 	bl	80077fc <_ZNK12SimpleString14containsNoCaseERKS_>
 800e250:	4603      	mov	r3, r0
 800e252:	f083 0301 	eor.w	r3, r3, #1
 800e256:	b2dc      	uxtb	r4, r3
 800e258:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7f9 fdec 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e262:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e266:	4618      	mov	r0, r3
 800e268:	f7f9 fde7 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e26c:	2c00      	cmp	r4, #0
 800e26e:	d042      	beq.n	800e2f6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	3398      	adds	r3, #152	; 0x98
 800e276:	681c      	ldr	r4, [r3, #0]
 800e278:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e27c:	68b9      	ldr	r1, [r7, #8]
 800e27e:	4618      	mov	r0, r3
 800e280:	f7f9 fa23 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e284:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e288:	6879      	ldr	r1, [r7, #4]
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7f9 fa1d 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e290:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e294:	6839      	ldr	r1, [r7, #0]
 800e296:	4618      	mov	r0, r3
 800e298:	f7f9 fa17 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e29c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800e2a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e2a4:	9302      	str	r3, [sp, #8]
 800e2a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e2aa:	9301      	str	r3, [sp, #4]
 800e2ac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e2b0:	9300      	str	r3, [sp, #0]
 800e2b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e2b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e2ba:	68f9      	ldr	r1, [r7, #12]
 800e2bc:	f7fb fbca 	bl	8009a54 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e2c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	47a0      	blx	r4
 800e2ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fc fa9a 	bl	800a808 <_ZN15ContainsFailureD1Ev>
 800e2d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7f9 fdae 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e2de:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7f9 fda9 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e2e8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7f9 fda4 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e2f2:	e000      	b.n	800e2f6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e2f4:	bf00      	nop
}
 800e2f6:	37bc      	adds	r7, #188	; 0xbc
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd90      	pop	{r4, r7, pc}

0800e2fc <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e2fc:	b590      	push	{r4, r7, lr}
 800e2fe:	b099      	sub	sp, #100	; 0x64
 800e300:	af04      	add	r7, sp, #16
 800e302:	60f8      	str	r0, [r7, #12]
 800e304:	60b9      	str	r1, [r7, #8]
 800e306:	607a      	str	r2, [r7, #4]
 800e308:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e30a:	68f8      	ldr	r0, [r7, #12]
 800e30c:	f000 fc86 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800e310:	4603      	mov	r3, r0
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	3228      	adds	r2, #40	; 0x28
 800e316:	6812      	ldr	r2, [r2, #0]
 800e318:	4618      	mov	r0, r3
 800e31a:	4790      	blx	r2
    if (expected != actual)
 800e31c:	68ba      	ldr	r2, [r7, #8]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	429a      	cmp	r2, r3
 800e322:	d027      	beq.n	800e374 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	339c      	adds	r3, #156	; 0x9c
 800e32a:	681c      	ldr	r4, [r3, #0]
 800e32c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e330:	6839      	ldr	r1, [r7, #0]
 800e332:	4618      	mov	r0, r3
 800e334:	f7f9 f9c9 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e338:	f107 0014 	add.w	r0, r7, #20
 800e33c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e340:	9302      	str	r3, [sp, #8]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	9301      	str	r3, [sp, #4]
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	9300      	str	r3, [sp, #0]
 800e34a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e34c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e34e:	68f9      	ldr	r1, [r7, #12]
 800e350:	f7fb fc30 	bl	8009bb4 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 800e354:	f107 0314 	add.w	r3, r7, #20
 800e358:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e35a:	4619      	mov	r1, r3
 800e35c:	68f8      	ldr	r0, [r7, #12]
 800e35e:	47a0      	blx	r4
 800e360:	f107 0314 	add.w	r3, r7, #20
 800e364:	4618      	mov	r0, r3
 800e366:	f7fc fa0b 	bl	800a780 <_ZN17LongsEqualFailureD1Ev>
 800e36a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e36e:	4618      	mov	r0, r3
 800e370:	f7f9 fd63 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800e374:	bf00      	nop
 800e376:	3754      	adds	r7, #84	; 0x54
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd90      	pop	{r4, r7, pc}

0800e37c <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e37c:	b590      	push	{r4, r7, lr}
 800e37e:	b099      	sub	sp, #100	; 0x64
 800e380:	af04      	add	r7, sp, #16
 800e382:	60f8      	str	r0, [r7, #12]
 800e384:	60b9      	str	r1, [r7, #8]
 800e386:	607a      	str	r2, [r7, #4]
 800e388:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e38a:	68f8      	ldr	r0, [r7, #12]
 800e38c:	f000 fc46 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800e390:	4603      	mov	r3, r0
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	3228      	adds	r2, #40	; 0x28
 800e396:	6812      	ldr	r2, [r2, #0]
 800e398:	4618      	mov	r0, r3
 800e39a:	4790      	blx	r2
    if (expected != actual)
 800e39c:	68ba      	ldr	r2, [r7, #8]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d027      	beq.n	800e3f4 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	339c      	adds	r3, #156	; 0x9c
 800e3aa:	681c      	ldr	r4, [r3, #0]
 800e3ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e3b0:	6839      	ldr	r1, [r7, #0]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7f9 f989 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e3b8:	f107 0014 	add.w	r0, r7, #20
 800e3bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e3c0:	9302      	str	r3, [sp, #8]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	9301      	str	r3, [sp, #4]
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	9300      	str	r3, [sp, #0]
 800e3ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e3ce:	68f9      	ldr	r1, [r7, #12]
 800e3d0:	f7fb fcbc 	bl	8009d4c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 800e3d4:	f107 0314 	add.w	r3, r7, #20
 800e3d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e3da:	4619      	mov	r1, r3
 800e3dc:	68f8      	ldr	r0, [r7, #12]
 800e3de:	47a0      	blx	r4
 800e3e0:	f107 0314 	add.w	r3, r7, #20
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fc f9a9 	bl	800a73c <_ZN25UnsignedLongsEqualFailureD1Ev>
 800e3ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7f9 fd23 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800e3f4:	bf00      	nop
 800e3f6:	3754      	adds	r7, #84	; 0x54
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd90      	pop	{r4, r7, pc}

0800e3fc <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e3fc:	b082      	sub	sp, #8
 800e3fe:	b590      	push	{r4, r7, lr}
 800e400:	b099      	sub	sp, #100	; 0x64
 800e402:	af02      	add	r7, sp, #8
 800e404:	60f8      	str	r0, [r7, #12]
 800e406:	1d38      	adds	r0, r7, #4
 800e408:	e880 0006 	stmia.w	r0, {r1, r2}
 800e40c:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f000 fc04 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800e414:	4603      	mov	r3, r0
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	3228      	adds	r2, #40	; 0x28
 800e41a:	6812      	ldr	r2, [r2, #0]
 800e41c:	4618      	mov	r0, r3
 800e41e:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	339c      	adds	r3, #156	; 0x9c
 800e426:	681c      	ldr	r4, [r3, #0]
 800e428:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e42c:	4919      	ldr	r1, [pc, #100]	; (800e494 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 800e42e:	4618      	mov	r0, r3
 800e430:	f7f9 f94b 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e434:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e438:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7f9 f945 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e440:	f107 0014 	add.w	r0, r7, #20
 800e444:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e448:	9301      	str	r3, [sp, #4]
 800e44a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e452:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e454:	68f9      	ldr	r1, [r7, #12]
 800e456:	f7fc f85f 	bl	800a518 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 800e45a:	f107 0314 	add.w	r3, r7, #20
 800e45e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e462:	4619      	mov	r1, r3
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	47a0      	blx	r4
 800e468:	f107 0314 	add.w	r3, r7, #20
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fc f899 	bl	800a5a4 <_ZN25FeatureUnsupportedFailureD1Ev>
 800e472:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e476:	4618      	mov	r0, r3
 800e478:	f7f9 fcdf 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e47c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e480:	4618      	mov	r0, r3
 800e482:	f7f9 fcda 	bl	8007e3a <_ZN12SimpleStringD1Ev>
#endif
}
 800e486:	bf00      	nop
 800e488:	375c      	adds	r7, #92	; 0x5c
 800e48a:	46bd      	mov	sp, r7
 800e48c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800e490:	b002      	add	sp, #8
 800e492:	4770      	bx	lr
 800e494:	08016e78 	.word	0x08016e78

0800e498 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e498:	b082      	sub	sp, #8
 800e49a:	b590      	push	{r4, r7, lr}
 800e49c:	b099      	sub	sp, #100	; 0x64
 800e49e:	af02      	add	r7, sp, #8
 800e4a0:	60f8      	str	r0, [r7, #12]
 800e4a2:	1d38      	adds	r0, r7, #4
 800e4a4:	e880 0006 	stmia.w	r0, {r1, r2}
 800e4a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f000 fbb6 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	3228      	adds	r2, #40	; 0x28
 800e4b6:	6812      	ldr	r2, [r2, #0]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	339c      	adds	r3, #156	; 0x9c
 800e4c2:	681c      	ldr	r4, [r3, #0]
 800e4c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e4c8:	4919      	ldr	r1, [pc, #100]	; (800e530 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7f9 f8fd 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e4d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e4d4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7f9 f8f7 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e4dc:	f107 0014 	add.w	r0, r7, #20
 800e4e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e4e4:	9301      	str	r3, [sp, #4]
 800e4e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e4ea:	9300      	str	r3, [sp, #0]
 800e4ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e4ee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e4f0:	68f9      	ldr	r1, [r7, #12]
 800e4f2:	f7fc f811 	bl	800a518 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 800e4f6:	f107 0314 	add.w	r3, r7, #20
 800e4fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e4fe:	4619      	mov	r1, r3
 800e500:	68f8      	ldr	r0, [r7, #12]
 800e502:	47a0      	blx	r4
 800e504:	f107 0314 	add.w	r3, r7, #20
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fc f84b 	bl	800a5a4 <_ZN25FeatureUnsupportedFailureD1Ev>
 800e50e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e512:	4618      	mov	r0, r3
 800e514:	f7f9 fc91 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e518:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7f9 fc8c 	bl	8007e3a <_ZN12SimpleStringD1Ev>
#endif
}
 800e522:	bf00      	nop
 800e524:	375c      	adds	r7, #92	; 0x5c
 800e526:	46bd      	mov	sp, r7
 800e528:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800e52c:	b002      	add	sp, #8
 800e52e:	4770      	bx	lr
 800e530:	08016e78 	.word	0x08016e78

0800e534 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e534:	b590      	push	{r4, r7, lr}
 800e536:	b099      	sub	sp, #100	; 0x64
 800e538:	af04      	add	r7, sp, #16
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	607b      	str	r3, [r7, #4]
 800e53e:	460b      	mov	r3, r1
 800e540:	72fb      	strb	r3, [r7, #11]
 800e542:	4613      	mov	r3, r2
 800e544:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	f000 fb68 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800e54c:	4603      	mov	r3, r0
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	3228      	adds	r2, #40	; 0x28
 800e552:	6812      	ldr	r2, [r2, #0]
 800e554:	4618      	mov	r0, r3
 800e556:	4790      	blx	r2
    if (expected != actual)
 800e558:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800e55c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800e560:	429a      	cmp	r2, r3
 800e562:	d029      	beq.n	800e5b8 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	339c      	adds	r3, #156	; 0x9c
 800e56a:	681c      	ldr	r4, [r3, #0]
 800e56c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e570:	6879      	ldr	r1, [r7, #4]
 800e572:	4618      	mov	r0, r3
 800e574:	f7f9 f8a9 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e578:	f107 0014 	add.w	r0, r7, #20
 800e57c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e580:	9302      	str	r3, [sp, #8]
 800e582:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800e586:	9301      	str	r3, [sp, #4]
 800e588:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e58c:	9300      	str	r3, [sp, #0]
 800e58e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e592:	68f9      	ldr	r1, [r7, #12]
 800e594:	f7fb fca6 	bl	8009ee4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 800e598:	f107 0314 	add.w	r3, r7, #20
 800e59c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e59e:	4619      	mov	r1, r3
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	47a0      	blx	r4
 800e5a4:	f107 0314 	add.w	r3, r7, #20
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7fc f8a5 	bl	800a6f8 <_ZN23SignedBytesEqualFailureD1Ev>
 800e5ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7f9 fc41 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800e5b8:	bf00      	nop
 800e5ba:	3754      	adds	r7, #84	; 0x54
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd90      	pop	{r4, r7, pc}

0800e5c0 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e5c0:	b590      	push	{r4, r7, lr}
 800e5c2:	b09d      	sub	sp, #116	; 0x74
 800e5c4:	af04      	add	r7, sp, #16
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	607a      	str	r2, [r7, #4]
 800e5cc:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f000 fb24 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	681a      	ldr	r2, [r3, #0]
 800e5d8:	3228      	adds	r2, #40	; 0x28
 800e5da:	6812      	ldr	r2, [r2, #0]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	4790      	blx	r2
    if (expected != actual)
 800e5e0:	68ba      	ldr	r2, [r7, #8]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d03f      	beq.n	800e668 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	339c      	adds	r3, #156	; 0x9c
 800e5ee:	681c      	ldr	r4, [r3, #0]
 800e5f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e5f4:	68b9      	ldr	r1, [r7, #8]
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7f9 feec 	bl	80083d4 <_Z10StringFromPKv>
 800e5fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e600:	6879      	ldr	r1, [r7, #4]
 800e602:	4618      	mov	r0, r3
 800e604:	f7f9 fee6 	bl	80083d4 <_Z10StringFromPKv>
 800e608:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e60c:	6839      	ldr	r1, [r7, #0]
 800e60e:	4618      	mov	r0, r3
 800e610:	f7f9 f85b 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e614:	f107 0014 	add.w	r0, r7, #20
 800e618:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e61c:	9302      	str	r3, [sp, #8]
 800e61e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e622:	9301      	str	r3, [sp, #4]
 800e624:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e628:	9300      	str	r3, [sp, #0]
 800e62a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e62c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e62e:	68f9      	ldr	r1, [r7, #12]
 800e630:	f7fb f826 	bl	8009680 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e634:	f107 0314 	add.w	r3, r7, #20
 800e638:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e63a:	4619      	mov	r1, r3
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	47a0      	blx	r4
 800e640:	f107 0314 	add.w	r3, r7, #20
 800e644:	4618      	mov	r0, r3
 800e646:	f7fc f967 	bl	800a918 <_ZN13EqualsFailureD1Ev>
 800e64a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e64e:	4618      	mov	r0, r3
 800e650:	f7f9 fbf3 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e654:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e658:	4618      	mov	r0, r3
 800e65a:	f7f9 fbee 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e65e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e662:	4618      	mov	r0, r3
 800e664:	f7f9 fbe9 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800e668:	bf00      	nop
 800e66a:	3764      	adds	r7, #100	; 0x64
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd90      	pop	{r4, r7, pc}

0800e670 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e670:	b590      	push	{r4, r7, lr}
 800e672:	b09d      	sub	sp, #116	; 0x74
 800e674:	af04      	add	r7, sp, #16
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	607a      	str	r2, [r7, #4]
 800e67c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e67e:	68f8      	ldr	r0, [r7, #12]
 800e680:	f000 facc 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800e684:	4603      	mov	r3, r0
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	3228      	adds	r2, #40	; 0x28
 800e68a:	6812      	ldr	r2, [r2, #0]
 800e68c:	4618      	mov	r0, r3
 800e68e:	4790      	blx	r2
    if (expected != actual)
 800e690:	68ba      	ldr	r2, [r7, #8]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	429a      	cmp	r2, r3
 800e696:	d03f      	beq.n	800e718 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	339c      	adds	r3, #156	; 0x9c
 800e69e:	681c      	ldr	r4, [r3, #0]
 800e6a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e6a4:	68b9      	ldr	r1, [r7, #8]
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7f9 febe 	bl	8008428 <_Z10StringFromPFvvE>
 800e6ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e6b0:	6879      	ldr	r1, [r7, #4]
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7f9 feb8 	bl	8008428 <_Z10StringFromPFvvE>
 800e6b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e6bc:	6839      	ldr	r1, [r7, #0]
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7f9 f803 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e6c4:	f107 0014 	add.w	r0, r7, #20
 800e6c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e6cc:	9302      	str	r3, [sp, #8]
 800e6ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e6d2:	9301      	str	r3, [sp, #4]
 800e6d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e6d8:	9300      	str	r3, [sp, #0]
 800e6da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e6dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e6de:	68f9      	ldr	r1, [r7, #12]
 800e6e0:	f7fa ffce 	bl	8009680 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e6e4:	f107 0314 	add.w	r3, r7, #20
 800e6e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	68f8      	ldr	r0, [r7, #12]
 800e6ee:	47a0      	blx	r4
 800e6f0:	f107 0314 	add.w	r3, r7, #20
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7fc f90f 	bl	800a918 <_ZN13EqualsFailureD1Ev>
 800e6fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7f9 fb9b 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e704:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e708:	4618      	mov	r0, r3
 800e70a:	f7f9 fb96 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e70e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e712:	4618      	mov	r0, r3
 800e714:	f7f9 fb91 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800e718:	bf00      	nop
 800e71a:	3764      	adds	r7, #100	; 0x64
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd90      	pop	{r4, r7, pc}

0800e720 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e720:	b590      	push	{r4, r7, lr}
 800e722:	b09d      	sub	sp, #116	; 0x74
 800e724:	af02      	add	r7, sp, #8
 800e726:	6278      	str	r0, [r7, #36]	; 0x24
 800e728:	ed87 0b06 	vstr	d0, [r7, #24]
 800e72c:	ed87 1b04 	vstr	d1, [r7, #16]
 800e730:	ed87 2b02 	vstr	d2, [r7, #8]
 800e734:	6239      	str	r1, [r7, #32]
 800e736:	607a      	str	r2, [r7, #4]
 800e738:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e73a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e73c:	f000 fa6e 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800e740:	4603      	mov	r3, r0
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	3228      	adds	r2, #40	; 0x28
 800e746:	6812      	ldr	r2, [r2, #0]
 800e748:	4618      	mov	r0, r3
 800e74a:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 800e74c:	ed97 2b02 	vldr	d2, [r7, #8]
 800e750:	ed97 1b04 	vldr	d1, [r7, #16]
 800e754:	ed97 0b06 	vldr	d0, [r7, #24]
 800e758:	f7fe fd5c 	bl	800d214 <_Z13doubles_equalddd>
 800e75c:	4603      	mov	r3, r0
 800e75e:	f083 0301 	eor.w	r3, r3, #1
 800e762:	b2db      	uxtb	r3, r3
 800e764:	2b00      	cmp	r3, #0
 800e766:	d029      	beq.n	800e7bc <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 800e768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	339c      	adds	r3, #156	; 0x9c
 800e76e:	681c      	ldr	r4, [r3, #0]
 800e770:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e774:	6a39      	ldr	r1, [r7, #32]
 800e776:	4618      	mov	r0, r3
 800e778:	f7f8 ffa7 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e77c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800e780:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e784:	9300      	str	r3, [sp, #0]
 800e786:	ed97 2b02 	vldr	d2, [r7, #8]
 800e78a:	ed97 1b04 	vldr	d1, [r7, #16]
 800e78e:	ed97 0b06 	vldr	d0, [r7, #24]
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e798:	f7fa ffb4 	bl	8009704 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 800e79c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e7a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7a6:	47a0      	blx	r4
 800e7a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fc f891 	bl	800a8d4 <_ZN19DoublesEqualFailureD1Ev>
 800e7b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7f9 fb3f 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800e7bc:	bf00      	nop
 800e7be:	376c      	adds	r7, #108	; 0x6c
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd90      	pop	{r4, r7, pc}

0800e7c4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e7c4:	b590      	push	{r4, r7, lr}
 800e7c6:	b0a7      	sub	sp, #156	; 0x9c
 800e7c8:	af04      	add	r7, sp, #16
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	607a      	str	r2, [r7, #4]
 800e7d0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e7d2:	68f8      	ldr	r0, [r7, #12]
 800e7d4:	f000 fa22 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	3228      	adds	r2, #40	; 0x28
 800e7de:	6812      	ldr	r2, [r2, #0]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	4790      	blx	r2
	if (length == 0) return;
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d075      	beq.n	800e8d6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d102      	bne.n	800e7f6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d071      	beq.n	800e8da <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d002      	beq.n	800e802 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d12d      	bne.n	800e85e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	339c      	adds	r3, #156	; 0x9c
 800e808:	681c      	ldr	r4, [r3, #0]
 800e80a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e80e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800e812:	4618      	mov	r0, r3
 800e814:	f7f8 ff59 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e818:	f107 0010 	add.w	r0, r7, #16
 800e81c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e820:	9303      	str	r3, [sp, #12]
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	9302      	str	r3, [sp, #8]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	9301      	str	r3, [sp, #4]
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e832:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e836:	68f9      	ldr	r1, [r7, #12]
 800e838:	f7fb fd82 	bl	800a340 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 800e83c:	f107 0310 	add.w	r3, r7, #16
 800e840:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e844:	4619      	mov	r1, r3
 800e846:	68f8      	ldr	r0, [r7, #12]
 800e848:	47a0      	blx	r4
 800e84a:	f107 0310 	add.w	r3, r7, #16
 800e84e:	4618      	mov	r0, r3
 800e850:	f7fb feec 	bl	800a62c <_ZN18BinaryEqualFailureD1Ev>
 800e854:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e858:	4618      	mov	r0, r3
 800e85a:	f7f9 faee 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 800e85e:	683a      	ldr	r2, [r7, #0]
 800e860:	6879      	ldr	r1, [r7, #4]
 800e862:	68b8      	ldr	r0, [r7, #8]
 800e864:	f7f8 fe50 	bl	8007508 <_ZN12SimpleString6MemCmpEPKvS1_j>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	bf14      	ite	ne
 800e86e:	2301      	movne	r3, #1
 800e870:	2300      	moveq	r3, #0
 800e872:	b2db      	uxtb	r3, r3
 800e874:	2b00      	cmp	r3, #0
 800e876:	d031      	beq.n	800e8dc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	339c      	adds	r3, #156	; 0x9c
 800e87e:	681c      	ldr	r4, [r3, #0]
 800e880:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e884:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800e888:	4618      	mov	r0, r3
 800e88a:	f7f8 ff1e 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e88e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800e892:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e896:	9303      	str	r3, [sp, #12]
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	9302      	str	r3, [sp, #8]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	9301      	str	r3, [sp, #4]
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	9300      	str	r3, [sp, #0]
 800e8a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e8a8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e8ac:	68f9      	ldr	r1, [r7, #12]
 800e8ae:	f7fb fd47 	bl	800a340 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 800e8b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e8b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	47a0      	blx	r4
 800e8c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7fb feb1 	bl	800a62c <_ZN18BinaryEqualFailureD1Ev>
 800e8ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7f9 fab3 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800e8d4:	e002      	b.n	800e8dc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 800e8d6:	bf00      	nop
 800e8d8:	e000      	b.n	800e8dc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e8da:	bf00      	nop
}
 800e8dc:	378c      	adds	r7, #140	; 0x8c
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd90      	pop	{r4, r7, pc}

0800e8e2 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e8e2:	b590      	push	{r4, r7, lr}
 800e8e4:	b09b      	sub	sp, #108	; 0x6c
 800e8e6:	af06      	add	r7, sp, #24
 800e8e8:	60f8      	str	r0, [r7, #12]
 800e8ea:	60b9      	str	r1, [r7, #8]
 800e8ec:	607a      	str	r2, [r7, #4]
 800e8ee:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e8f0:	68f8      	ldr	r0, [r7, #12]
 800e8f2:	f000 f993 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	3228      	adds	r2, #40	; 0x28
 800e8fc:	6812      	ldr	r2, [r2, #0]
 800e8fe:	4618      	mov	r0, r3
 800e900:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 800e902:	68ba      	ldr	r2, [r7, #8]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	405a      	eors	r2, r3
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	4013      	ands	r3, r2
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d02b      	beq.n	800e968 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	339c      	adds	r3, #156	; 0x9c
 800e916:	681c      	ldr	r4, [r3, #0]
 800e918:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e91c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e91e:	4618      	mov	r0, r3
 800e920:	f7f8 fed3 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e924:	f107 0014 	add.w	r0, r7, #20
 800e928:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e92c:	9304      	str	r3, [sp, #16]
 800e92e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e930:	9303      	str	r3, [sp, #12]
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	9302      	str	r3, [sp, #8]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	9301      	str	r3, [sp, #4]
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e940:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e942:	68f9      	ldr	r1, [r7, #12]
 800e944:	f7fb fd8c 	bl	800a460 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 800e948:	f107 0314 	add.w	r3, r7, #20
 800e94c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e94e:	4619      	mov	r1, r3
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	47a0      	blx	r4
 800e954:	f107 0314 	add.w	r3, r7, #20
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fb fe45 	bl	800a5e8 <_ZN16BitsEqualFailureD1Ev>
 800e95e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e962:	4618      	mov	r0, r3
 800e964:	f7f9 fa69 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800e968:	bf00      	nop
 800e96a:	3754      	adds	r7, #84	; 0x54
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd90      	pop	{r4, r7, pc}

0800e970 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 800e970:	b590      	push	{r4, r7, lr}
 800e972:	b09d      	sub	sp, #116	; 0x74
 800e974:	af04      	add	r7, sp, #16
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	607a      	str	r2, [r7, #4]
 800e97a:	603b      	str	r3, [r7, #0]
 800e97c:	460b      	mov	r3, r1
 800e97e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f000 f94b 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800e986:	4603      	mov	r3, r0
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	3228      	adds	r2, #40	; 0x28
 800e98c:	6812      	ldr	r2, [r2, #0]
 800e98e:	4618      	mov	r0, r3
 800e990:	4790      	blx	r2
    if (failed)
 800e992:	7afb      	ldrb	r3, [r7, #11]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d03f      	beq.n	800ea18 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	339c      	adds	r3, #156	; 0x9c
 800e99e:	681c      	ldr	r4, [r3, #0]
 800e9a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e9a4:	6879      	ldr	r1, [r7, #4]
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7f8 fe8f 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e9ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e9b0:	6839      	ldr	r1, [r7, #0]
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7f8 fe89 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e9b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e9bc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7f8 fe83 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800e9c4:	f107 0014 	add.w	r0, r7, #20
 800e9c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e9cc:	9302      	str	r3, [sp, #8]
 800e9ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e9d2:	9301      	str	r3, [sp, #4]
 800e9d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e9d8:	9300      	str	r3, [sp, #0]
 800e9da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e9de:	68f9      	ldr	r1, [r7, #12]
 800e9e0:	f7fa ff42 	bl	8009868 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e9e4:	f107 0314 	add.w	r3, r7, #20
 800e9e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	47a0      	blx	r4
 800e9f0:	f107 0314 	add.w	r3, r7, #20
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7fb ff4b 	bl	800a890 <_ZN17CheckEqualFailureD1Ev>
 800e9fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7f9 fa1b 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800ea04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7f9 fa16 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800ea0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7f9 fa11 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800ea18:	bf00      	nop
 800ea1a:	3764      	adds	r7, #100	; 0x64
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd90      	pop	{r4, r7, pc}

0800ea20 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 800ea20:	b590      	push	{r4, r7, lr}
 800ea22:	b09d      	sub	sp, #116	; 0x74
 800ea24:	af04      	add	r7, sp, #16
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	607a      	str	r2, [r7, #4]
 800ea2a:	603b      	str	r3, [r7, #0]
 800ea2c:	460b      	mov	r3, r1
 800ea2e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800ea30:	68f8      	ldr	r0, [r7, #12]
 800ea32:	f000 f8f3 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800ea36:	4603      	mov	r3, r0
 800ea38:	681a      	ldr	r2, [r3, #0]
 800ea3a:	3228      	adds	r2, #40	; 0x28
 800ea3c:	6812      	ldr	r2, [r2, #0]
 800ea3e:	4618      	mov	r0, r3
 800ea40:	4790      	blx	r2
    if (!comparison)
 800ea42:	7afb      	ldrb	r3, [r7, #11]
 800ea44:	f083 0301 	eor.w	r3, r3, #1
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d03f      	beq.n	800eace <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	339c      	adds	r3, #156	; 0x9c
 800ea54:	681c      	ldr	r4, [r3, #0]
 800ea56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ea5a:	6879      	ldr	r1, [r7, #4]
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7f8 fe34 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800ea62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ea66:	6839      	ldr	r1, [r7, #0]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7f8 fe2e 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800ea6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ea72:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7f8 fe28 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800ea7a:	f107 0014 	add.w	r0, r7, #20
 800ea7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ea82:	9302      	str	r3, [sp, #8]
 800ea84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ea88:	9301      	str	r3, [sp, #4]
 800ea8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ea94:	68f9      	ldr	r1, [r7, #12]
 800ea96:	f7fa ff95 	bl	80099c4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800ea9a:	f107 0314 	add.w	r3, r7, #20
 800ea9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	68f8      	ldr	r0, [r7, #12]
 800eaa4:	47a0      	blx	r4
 800eaa6:	f107 0314 	add.w	r3, r7, #20
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fb fece 	bl	800a84c <_ZN17ComparisonFailureD1Ev>
 800eab0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7f9 f9c0 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800eaba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7f9 f9bb 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800eac4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eac8:	4618      	mov	r0, r3
 800eaca:	f7f9 f9b6 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800eace:	bf00      	nop
 800ead0:	3764      	adds	r7, #100	; 0x64
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd90      	pop	{r4, r7, pc}
	...

0800ead8 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 800ead8:	b5b0      	push	{r4, r5, r7, lr}
 800eada:	b088      	sub	sp, #32
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	607a      	str	r2, [r7, #4]
 800eae4:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 800eae6:	f107 0310 	add.w	r3, r7, #16
 800eaea:	4924      	ldr	r1, [pc, #144]	; (800eb7c <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7f8 fdec 	bl	80076ca <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 800eaf2:	f107 0310 	add.w	r3, r7, #16
 800eaf6:	6879      	ldr	r1, [r7, #4]
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7f9 fa2d 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 800eafe:	f107 0310 	add.w	r3, r7, #16
 800eb02:	491f      	ldr	r1, [pc, #124]	; (800eb80 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7f9 fa27 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 800eb0a:	f107 0318 	add.w	r3, r7, #24
 800eb0e:	6839      	ldr	r1, [r7, #0]
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7f9 fe47 	bl	80087a4 <_Z10StringFromj>
 800eb16:	f107 0218 	add.w	r2, r7, #24
 800eb1a:	f107 0310 	add.w	r3, r7, #16
 800eb1e:	4611      	mov	r1, r2
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7f9 fa07 	bl	8007f34 <_ZN12SimpleStringpLERKS_>
 800eb26:	f107 0318 	add.w	r3, r7, #24
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7f9 f985 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 800eb30:	f107 0310 	add.w	r3, r7, #16
 800eb34:	4913      	ldr	r1, [pc, #76]	; (800eb84 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7f9 fa0e 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 800eb3c:	f107 0310 	add.w	r3, r7, #16
 800eb40:	68b9      	ldr	r1, [r7, #8]
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7f9 fa08 	bl	8007f58 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 800eb48:	68f8      	ldr	r0, [r7, #12]
 800eb4a:	f000 f867 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800eb4e:	4604      	mov	r4, r0
 800eb50:	6823      	ldr	r3, [r4, #0]
 800eb52:	3338      	adds	r3, #56	; 0x38
 800eb54:	681d      	ldr	r5, [r3, #0]
 800eb56:	f107 0310 	add.w	r3, r7, #16
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7f9 f940 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 800eb60:	4603      	mov	r3, r0
 800eb62:	4619      	mov	r1, r3
 800eb64:	4620      	mov	r0, r4
 800eb66:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 800eb68:	f107 0310 	add.w	r3, r7, #16
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7f9 f964 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800eb72:	bf00      	nop
 800eb74:	3720      	adds	r7, #32
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bdb0      	pop	{r4, r5, r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	08016e90 	.word	0x08016e90
 800eb80:	08016e94 	.word	0x08016e94
 800eb84:	08016e98 	.word	0x08016e98

0800eb88 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 800eb88:	b590      	push	{r4, r7, lr}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
 800eb94:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	3370      	adds	r3, #112	; 0x70
 800eb9c:	681c      	ldr	r4, [r3, #0]
 800eb9e:	68b8      	ldr	r0, [r7, #8]
 800eba0:	f7f9 f91e 	bl	8007de0 <_ZNK12SimpleString12asCharStringEv>
 800eba4:	4601      	mov	r1, r0
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	68f8      	ldr	r0, [r7, #12]
 800ebac:	47a0      	blx	r4
}
 800ebae:	bf00      	nop
 800ebb0:	3714      	adds	r7, #20
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd90      	pop	{r4, r7, pc}

0800ebb6 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 800ebb6:	b580      	push	{r7, lr}
 800ebb8:	b082      	sub	sp, #8
 800ebba:	af00      	add	r7, sp, #0
 800ebbc:	6078      	str	r0, [r7, #4]
 800ebbe:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f000 f82b 	bl	800ec1c <_ZN10UtestShell13getTestResultEv>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	681a      	ldr	r2, [r3, #0]
 800ebca:	323c      	adds	r2, #60	; 0x3c
 800ebcc:	6812      	ldr	r2, [r2, #0]
 800ebce:	6839      	ldr	r1, [r7, #0]
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	4790      	blx	r2
}
 800ebd4:	bf00      	nop
 800ebd6:	3708      	adds	r7, #8
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 800ebe6:	4a04      	ldr	r2, [pc, #16]	; (800ebf8 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	6013      	str	r3, [r2, #0]
}
 800ebec:	bf00      	nop
 800ebee:	370c      	adds	r7, #12
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr
 800ebf8:	200007a4 	.word	0x200007a4

0800ebfc <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 800ec06:	4a04      	ldr	r2, [pc, #16]	; (800ec18 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	6013      	str	r3, [r2, #0]
}
 800ec0c:	bf00      	nop
 800ec0e:	370c      	adds	r7, #12
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr
 800ec18:	200007a8 	.word	0x200007a8

0800ec1c <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 800ec24:	4b09      	ldr	r3, [pc, #36]	; (800ec4c <_ZN10UtestShell13getTestResultEv+0x30>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d109      	bne.n	800ec40 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 800ec2c:	f7fe fbc4 	bl	800d3b8 <_ZN22OutsideTestRunnerUTest8instanceEv>
 800ec30:	4603      	mov	r3, r0
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	32a4      	adds	r2, #164	; 0xa4
 800ec36:	6812      	ldr	r2, [r2, #0]
 800ec38:	4618      	mov	r0, r3
 800ec3a:	4790      	blx	r2
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	e001      	b.n	800ec44 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 800ec40:	4b02      	ldr	r3, [pc, #8]	; (800ec4c <_ZN10UtestShell13getTestResultEv+0x30>)
 800ec42:	681b      	ldr	r3, [r3, #0]
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	200007a4 	.word	0x200007a4

0800ec50 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 800ec54:	4b05      	ldr	r3, [pc, #20]	; (800ec6c <_ZN10UtestShell10getCurrentEv+0x1c>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d103      	bne.n	800ec64 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 800ec5c:	f7fe fbac 	bl	800d3b8 <_ZN22OutsideTestRunnerUTest8instanceEv>
 800ec60:	4603      	mov	r3, r0
 800ec62:	e001      	b.n	800ec68 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 800ec64:	4b01      	ldr	r3, [pc, #4]	; (800ec6c <_ZN10UtestShell10getCurrentEv+0x1c>)
 800ec66:	681b      	ldr	r3, [r3, #0]
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	200007a8 	.word	0x200007a8

0800ec70 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 800ec70:	b480      	push	{r7}
 800ec72:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 800ec74:	4b03      	ldr	r3, [pc, #12]	; (800ec84 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 800ec76:	681b      	ldr	r3, [r3, #0]
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec80:	4770      	bx	lr
 800ec82:	bf00      	nop
 800ec84:	20000090 	.word	0x20000090

0800ec88 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 800ec88:	b480      	push	{r7}
 800ec8a:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 800ec8c:	4b03      	ldr	r3, [pc, #12]	; (800ec9c <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 800ec8e:	4a04      	ldr	r2, [pc, #16]	; (800eca0 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 800ec90:	601a      	str	r2, [r3, #0]
}
 800ec92:	bf00      	nop
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr
 800ec9c:	20000090 	.word	0x20000090
 800eca0:	2000008c 	.word	0x2000008c

0800eca4 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	4a04      	ldr	r2, [pc, #16]	; (800ecc0 <_ZN5UtestC1Ev+0x1c>)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	601a      	str	r2, [r3, #0]
{
}
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	370c      	adds	r7, #12
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr
 800ecc0:	08018cbc 	.word	0x08018cbc

0800ecc4 <_ZN5UtestD1Ev>:

Utest::~Utest()
 800ecc4:	b480      	push	{r7}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	4a04      	ldr	r2, [pc, #16]	; (800ece0 <_ZN5UtestD1Ev+0x1c>)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	601a      	str	r2, [r3, #0]
{
}
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	370c      	adds	r7, #12
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr
 800ece0:	08018cbc 	.word	0x08018cbc

0800ece4 <_ZN5UtestD0Ev>:
Utest::~Utest()
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
}
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f7ff ffe9 	bl	800ecc4 <_ZN5UtestD1Ev>
 800ecf2:	2104      	movs	r1, #4
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f7f7 fe13 	bl	8006920 <_ZdlPvj>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3708      	adds	r7, #8
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 800ed0c:	4b0d      	ldr	r3, [pc, #52]	; (800ed44 <_ZN5Utest3runEv+0x40>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	6879      	ldr	r1, [r7, #4]
 800ed12:	480d      	ldr	r0, [pc, #52]	; (800ed48 <_ZN5Utest3runEv+0x44>)
 800ed14:	4798      	blx	r3
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	bf14      	ite	ne
 800ed1c:	2301      	movne	r3, #1
 800ed1e:	2300      	moveq	r3, #0
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d004      	beq.n	800ed30 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 800ed26:	4b07      	ldr	r3, [pc, #28]	; (800ed44 <_ZN5Utest3runEv+0x40>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	6879      	ldr	r1, [r7, #4]
 800ed2c:	4807      	ldr	r0, [pc, #28]	; (800ed4c <_ZN5Utest3runEv+0x48>)
 800ed2e:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 800ed30:	4b04      	ldr	r3, [pc, #16]	; (800ed44 <_ZN5Utest3runEv+0x40>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	6879      	ldr	r1, [r7, #4]
 800ed36:	4806      	ldr	r0, [pc, #24]	; (800ed50 <_ZN5Utest3runEv+0x4c>)
 800ed38:	4798      	blx	r3
}
 800ed3a:	bf00      	nop
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	200000a0 	.word	0x200000a0
 800ed48:	0800d415 	.word	0x0800d415
 800ed4c:	0800d431 	.word	0x0800d431
 800ed50:	0800d44d 	.word	0x0800d44d

0800ed54 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 800ed54:	b480      	push	{r7}
 800ed56:	b083      	sub	sp, #12
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
}
 800ed5c:	bf00      	nop
 800ed5e:	370c      	adds	r7, #12
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr

0800ed68 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b083      	sub	sp, #12
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
}
 800ed70:	bf00      	nop
 800ed72:	370c      	adds	r7, #12
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b083      	sub	sp, #12
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
}
 800ed84:	bf00      	nop
 800ed86:	370c      	adds	r7, #12
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 800ed90:	b480      	push	{r7}
 800ed92:	b083      	sub	sp, #12
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	4a04      	ldr	r2, [pc, #16]	; (800edac <_ZN14TestTerminatorD1Ev+0x1c>)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	601a      	str	r2, [r3, #0]
{
}
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	4618      	mov	r0, r3
 800eda2:	370c      	adds	r7, #12
 800eda4:	46bd      	mov	sp, r7
 800eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edaa:	4770      	bx	lr
 800edac:	08018ca8 	.word	0x08018ca8

0800edb0 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 800edb8:	2300      	movs	r3, #0
 800edba:	60fb      	str	r3, [r7, #12]
 800edbc:	f107 030c 	add.w	r3, r7, #12
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7f7 ff6f 	bl	8006ca4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800edc6:	f107 030c 	add.w	r3, r7, #12
 800edca:	4618      	mov	r0, r3
 800edcc:	f000 f82c 	bl	800ee28 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 800edd0:	f107 030c 	add.w	r3, r7, #12
 800edd4:	4618      	mov	r0, r3
 800edd6:	f000 f835 	bl	800ee44 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 800edda:	bf00      	nop
 800eddc:	3710      	adds	r7, #16
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
	...

0800ede4 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	4a05      	ldr	r2, [pc, #20]	; (800ee04 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	601a      	str	r2, [r3, #0]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7ff ffcb 	bl	800ed90 <_ZN14TestTerminatorD1Ev>
{
}
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	4618      	mov	r0, r3
 800edfe:	3708      	adds	r7, #8
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	08018c94 	.word	0x08018c94

0800ee08 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
}
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f7ff ffe7 	bl	800ede4 <_ZN20NormalTestTerminatorD1Ev>
 800ee16:	2104      	movs	r1, #4
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f7f7 fd81 	bl	8006920 <_ZdlPvj>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	4618      	mov	r0, r3
 800ee22:	3708      	adds	r7, #8
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 800ee30:	4b03      	ldr	r3, [pc, #12]	; (800ee40 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800ee36:	bf00      	nop
 800ee38:	3708      	adds	r7, #8
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	2000009c 	.word	0x2000009c

0800ee44 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	4a05      	ldr	r2, [pc, #20]	; (800ee64 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	601a      	str	r2, [r3, #0]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7ff ff9b 	bl	800ed90 <_ZN14TestTerminatorD1Ev>
{
}
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3708      	adds	r7, #8
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	08018c80 	.word	0x08018c80

0800ee68 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
}
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f7ff ffe7 	bl	800ee44 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800ee76:	2104      	movs	r1, #4
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7f7 fd51 	bl	8006920 <_ZdlPvj>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	4618      	mov	r0, r3
 800ee82:	3708      	adds	r7, #8
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 800ee90:	f7fe fbbc 	bl	800d60c <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7ff ff8a 	bl	800edb0 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 800ee9c:	bf00      	nop
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	4a05      	ldr	r2, [pc, #20]	; (800eec4 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	601a      	str	r2, [r3, #0]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7ff ff95 	bl	800ede4 <_ZN20NormalTestTerminatorD1Ev>
{
}
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4618      	mov	r0, r3
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}
 800eec4:	08018c6c 	.word	0x08018c6c

0800eec8 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
}
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f7ff ffe7 	bl	800eea4 <_ZN22CrashingTestTerminatorD1Ev>
 800eed6:	2104      	movs	r1, #4
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f7f7 fd21 	bl	8006920 <_ZdlPvj>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	4618      	mov	r0, r3
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}

0800eee8 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2200      	movs	r2, #0
 800eef6:	601a      	str	r2, [r3, #0]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2200      	movs	r2, #0
 800eefc:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d007      	beq.n	800ef14 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	3310      	adds	r3, #16
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	6838      	ldr	r0, [r7, #0]
 800ef0e:	4798      	blx	r3
 800ef10:	4603      	mov	r3, r0
 800ef12:	e000      	b.n	800ef16 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 800ef14:	2300      	movs	r3, #0
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d02d      	beq.n	800ef7e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d201      	bcs.n	800ef32 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 800ef2e:	009b      	lsls	r3, r3, #2
 800ef30:	e001      	b.n	800ef36 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 800ef32:	f04f 33ff 	mov.w	r3, #4294967295
 800ef36:	f240 3237 	movw	r2, #823	; 0x337
 800ef3a:	4914      	ldr	r1, [pc, #80]	; (800ef8c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7f7 fcff 	bl	8006940 <_ZnajPKci>
 800ef42:	4602      	mov	r2, r0
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	60bb      	str	r3, [r7, #8]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	68ba      	ldr	r2, [r7, #8]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d212      	bcs.n	800ef80 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681a      	ldr	r2, [r3, #0]
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	009b      	lsls	r3, r3, #2
 800ef62:	4413      	add	r3, r2
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	330c      	adds	r3, #12
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	68f8      	ldr	r0, [r7, #12]
 800ef72:	4798      	blx	r3
 800ef74:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	60bb      	str	r3, [r7, #8]
 800ef7c:	e7e8      	b.n	800ef50 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 800ef7e:	bf00      	nop
    }
}
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	4618      	mov	r0, r3
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	08016d20 	.word	0x08016d20

0800ef90 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d004      	beq.n	800efaa <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7f7 fcdf 	bl	8006968 <_ZdaPv>
}
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4618      	mov	r0, r3
 800efae:	3708      	adds	r7, #8
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 800efb4:	b480      	push	{r7}
 800efb6:	b087      	sub	sp, #28
 800efb8:	af00      	add	r7, sp, #0
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	60b9      	str	r1, [r7, #8]
 800efbe:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681a      	ldr	r2, [r3, #0]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	4413      	add	r3, r2
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	009b      	lsls	r3, r3, #2
 800efd6:	4413      	add	r3, r2
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	009b      	lsls	r3, r3, #2
 800efe4:	4413      	add	r3, r2
 800efe6:	697a      	ldr	r2, [r7, #20]
 800efe8:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	4413      	add	r3, r2
 800eff4:	693a      	ldr	r2, [r7, #16]
 800eff6:	601a      	str	r2, [r3, #0]
}
 800eff8:	bf00      	nop
 800effa:	371c      	adds	r7, #28
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr

0800f004 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d028      	beq.n	800f068 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 800f016:	4b17      	ldr	r3, [pc, #92]	; (800f074 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	6838      	ldr	r0, [r7, #0]
 800f01c:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	3b01      	subs	r3, #1
 800f024:	60fb      	str	r3, [r7, #12]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d019      	beq.n	800f060 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d01b      	beq.n	800f06c <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 800f034:	4b10      	ldr	r3, [pc, #64]	; (800f078 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	4798      	blx	r3
 800f03a:	4603      	mov	r3, r0
 800f03c:	461a      	mov	r2, r3
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	3301      	adds	r3, #1
 800f042:	fbb2 f1f3 	udiv	r1, r2, r3
 800f046:	fb03 f301 	mul.w	r3, r3, r1
 800f04a:	1ad3      	subs	r3, r2, r3
 800f04c:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 800f04e:	68ba      	ldr	r2, [r7, #8]
 800f050:	68f9      	ldr	r1, [r7, #12]
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f7ff ffae 	bl	800efb4 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	3b01      	subs	r3, #1
 800f05c:	60fb      	str	r3, [r7, #12]
 800f05e:	e7e2      	b.n	800f026 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f000 f834 	bl	800f0ce <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 800f066:	e002      	b.n	800f06e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 800f068:	bf00      	nop
 800f06a:	e000      	b.n	800f06e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 800f06c:	bf00      	nop
}
 800f06e:	3710      	adds	r7, #16
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}
 800f074:	200000d8 	.word	0x200000d8
 800f078:	200000dc 	.word	0x200000dc

0800f07c <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b086      	sub	sp, #24
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d01c      	beq.n	800f0c6 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	085b      	lsrs	r3, r3, #1
 800f092:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 800f094:	2300      	movs	r3, #0
 800f096:	617b      	str	r3, [r7, #20]
 800f098:	697a      	ldr	r2, [r7, #20]
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d20e      	bcs.n	800f0be <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	685a      	ldr	r2, [r3, #4]
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	1ad3      	subs	r3, r2, r3
 800f0a8:	3b01      	subs	r3, #1
 800f0aa:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 800f0ac:	68fa      	ldr	r2, [r7, #12]
 800f0ae:	6979      	ldr	r1, [r7, #20]
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f7ff ff7f 	bl	800efb4 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	3301      	adds	r3, #1
 800f0ba:	617b      	str	r3, [r7, #20]
 800f0bc:	e7ec      	b.n	800f098 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f000 f805 	bl	800f0ce <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 800f0c4:	e000      	b.n	800f0c8 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 800f0c6:	bf00      	nop
}
 800f0c8:	3718      	adds	r7, #24
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 800f0ce:	b580      	push	{r7, lr}
 800f0d0:	b084      	sub	sp, #16
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800f0da:	2300      	movs	r3, #0
 800f0dc:	60bb      	str	r3, [r7, #8]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	68ba      	ldr	r2, [r7, #8]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d221      	bcs.n	800f12c <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6859      	ldr	r1, [r3, #4]
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	1acb      	subs	r3, r1, r3
 800f0f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f0f8:	3b01      	subs	r3, #1
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	4413      	add	r3, r2
 800f0fe:	6818      	ldr	r0, [r3, #0]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681a      	ldr	r2, [r3, #0]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6859      	ldr	r1, [r3, #4]
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	1acb      	subs	r3, r1, r3
 800f10c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f110:	3b01      	subs	r3, #1
 800f112:	009b      	lsls	r3, r3, #2
 800f114:	4413      	add	r3, r2
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	3308      	adds	r3, #8
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	68f9      	ldr	r1, [r7, #12]
 800f120:	4798      	blx	r3
 800f122:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	3301      	adds	r3, #1
 800f128:	60bb      	str	r3, [r7, #8]
 800f12a:	e7d8      	b.n	800f0de <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 800f12c:	bf00      	nop
 800f12e:	3710      	adds	r7, #16
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
    return get(0);
 800f13c:	2100      	movs	r1, #0
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f000 f805 	bl	800f14e <_ZNK22UtestShellPointerArray3getEj>
 800f144:	4603      	mov	r3, r0
}
 800f146:	4618      	mov	r0, r3
 800f148:	3708      	adds	r7, #8
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}

0800f14e <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 800f14e:	b480      	push	{r7}
 800f150:	b083      	sub	sp, #12
 800f152:	af00      	add	r7, sp, #0
 800f154:	6078      	str	r0, [r7, #4]
 800f156:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	683a      	ldr	r2, [r7, #0]
 800f15e:	429a      	cmp	r2, r3
 800f160:	d301      	bcc.n	800f166 <_ZNK22UtestShellPointerArray3getEj+0x18>
 800f162:	2300      	movs	r3, #0
 800f164:	e005      	b.n	800f172 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	4413      	add	r3, r2
 800f170:	681b      	ldr	r3, [r3, #0]
}
 800f172:	4618      	mov	r0, r3
 800f174:	370c      	adds	r7, #12
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr
	...

0800f180 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	60b9      	str	r1, [r7, #8]
 800f18a:	607a      	str	r2, [r7, #4]
 800f18c:	603b      	str	r3, [r7, #0]
 800f18e:	4a10      	ldr	r2, [pc, #64]	; (800f1d0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 800f194:	6879      	ldr	r1, [r7, #4]
 800f196:	68b8      	ldr	r0, [r7, #8]
 800f198:	f7fe fc28 	bl	800d9ec <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 800f19c:	6839      	ldr	r1, [r7, #0]
 800f19e:	68b8      	ldr	r0, [r7, #8]
 800f1a0:	f7fe fc32 	bl	800da08 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 800f1a4:	69b9      	ldr	r1, [r7, #24]
 800f1a6:	68b8      	ldr	r0, [r7, #8]
 800f1a8:	f7fe fc04 	bl	800d9b4 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 800f1ac:	69f9      	ldr	r1, [r7, #28]
 800f1ae:	68b8      	ldr	r0, [r7, #8]
 800f1b0:	f7fe fc0e 	bl	800d9d0 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 800f1b4:	f7fd fc32 	bl	800ca1c <_ZN12TestRegistry18getCurrentRegistryEv>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	681a      	ldr	r2, [r3, #0]
 800f1bc:	3208      	adds	r2, #8
 800f1be:	6812      	ldr	r2, [r2, #0]
 800f1c0:	68b9      	ldr	r1, [r7, #8]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	4790      	blx	r2
}
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3710      	adds	r7, #16
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}
 800f1d0:	08018bb0 	.word	0x08018bb0

0800f1d4 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 800f1d4:	b480      	push	{r7}
 800f1d6:	b083      	sub	sp, #12
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	4a04      	ldr	r2, [pc, #16]	; (800f1f0 <_ZN13TestInstallerD1Ev+0x1c>)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	601a      	str	r2, [r3, #0]
{
}
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	370c      	adds	r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr
 800f1f0:	08018bb0 	.word	0x08018bb0

0800f1f4 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
}
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f7ff ffe9 	bl	800f1d4 <_ZN13TestInstallerD1Ev>
 800f202:	2104      	movs	r1, #4
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f7f7 fb8b 	bl	8006920 <_ZdlPvj>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4618      	mov	r0, r3
 800f20e:	3708      	adds	r7, #8
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10a      	bne.n	800f23a <_Z41__static_initialization_and_destruction_0ii+0x26>
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d105      	bne.n	800f23a <_Z41__static_initialization_and_destruction_0ii+0x26>
 800f22e:	4805      	ldr	r0, [pc, #20]	; (800f244 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800f230:	f7ff fe38 	bl	800eea4 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 800f234:	4804      	ldr	r0, [pc, #16]	; (800f248 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800f236:	f7ff fdd5 	bl	800ede4 <_ZN20NormalTestTerminatorD1Ev>
}
 800f23a:	bf00      	nop
 800f23c:	3708      	adds	r7, #8
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	2000008c 	.word	0x2000008c
 800f248:	20000088 	.word	0x20000088

0800f24c <_GLOBAL__sub_I__Z13doubles_equalddd>:
 800f24c:	b580      	push	{r7, lr}
 800f24e:	af00      	add	r7, sp, #0
 800f250:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f254:	2001      	movs	r0, #1
 800f256:	f7ff ffdd 	bl	800f214 <_Z41__static_initialization_and_destruction_0ii>
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <_GLOBAL__sub_D__Z13doubles_equalddd>:
 800f25c:	b580      	push	{r7, lr}
 800f25e:	af00      	add	r7, sp, #0
 800f260:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f264:	2000      	movs	r0, #0
 800f266:	f7ff ffd5 	bl	800f214 <_Z41__static_initialization_and_destruction_0ii>
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 800f26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f26e:	b083      	sub	sp, #12
 800f270:	af00      	add	r7, sp, #0
 800f272:	ed87 0b00 	vstr	d0, [r7]
 800f276:	683c      	ldr	r4, [r7, #0]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800f27e:	2301      	movs	r3, #1
 800f280:	461e      	mov	r6, r3
 800f282:	f04f 32ff 	mov.w	r2, #4294967295
 800f286:	4b10      	ldr	r3, [pc, #64]	; (800f2c8 <_ZSt5isinfd+0x5c>)
 800f288:	4620      	mov	r0, r4
 800f28a:	4629      	mov	r1, r5
 800f28c:	f7f1 fa7c 	bl	8000788 <__aeabi_dcmpun>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d10b      	bne.n	800f2ae <_ZSt5isinfd+0x42>
 800f296:	f04f 32ff 	mov.w	r2, #4294967295
 800f29a:	4b0b      	ldr	r3, [pc, #44]	; (800f2c8 <_ZSt5isinfd+0x5c>)
 800f29c:	4620      	mov	r0, r4
 800f29e:	4629      	mov	r1, r5
 800f2a0:	f7f1 fa54 	bl	800074c <__aeabi_dcmple>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d101      	bne.n	800f2ae <_ZSt5isinfd+0x42>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	461e      	mov	r6, r3
 800f2ae:	b2f3      	uxtb	r3, r6
 800f2b0:	f083 0301 	eor.w	r3, r3, #1
 800f2b4:	b2db      	uxtb	r3, r3
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	bf14      	ite	ne
 800f2ba:	2301      	movne	r3, #1
 800f2bc:	2300      	moveq	r3, #0
 800f2be:	b2db      	uxtb	r3, r3
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	370c      	adds	r7, #12
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2c8:	7fefffff 	.word	0x7fefffff

0800f2cc <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 800f2cc:	b590      	push	{r4, r7, lr}
 800f2ce:	b083      	sub	sp, #12
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	ed87 0b00 	vstr	d0, [r7]
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	461c      	mov	r4, r3
 800f2da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2de:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f2e2:	f7f1 fa51 	bl	8000788 <__aeabi_dcmpun>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d101      	bne.n	800f2f0 <_ZSt5isnand+0x24>
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	461c      	mov	r4, r3
 800f2f0:	b2e3      	uxtb	r3, r4
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	bf14      	ite	ne
 800f2f6:	2301      	movne	r3, #1
 800f2f8:	2300      	moveq	r3, #0
 800f2fa:	b2db      	uxtb	r3, r3
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	370c      	adds	r7, #12
 800f300:	46bd      	mov	sp, r7
 800f302:	bd90      	pop	{r4, r7, pc}

0800f304 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 800f304:	b590      	push	{r4, r7, lr}
 800f306:	b095      	sub	sp, #84	; 0x54
 800f308:	af00      	add	r7, sp, #0
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	3334      	adds	r3, #52	; 0x34
 800f316:	681c      	ldr	r4, [r3, #0]
 800f318:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f31c:	490f      	ldr	r1, [pc, #60]	; (800f35c <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 800f31e:	4618      	mov	r0, r3
 800f320:	f7f8 f9d3 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800f324:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f328:	f107 0314 	add.w	r3, r7, #20
 800f32c:	68f9      	ldr	r1, [r7, #12]
 800f32e:	4618      	mov	r0, r3
 800f330:	f7f9 ff1c 	bl	800916c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800f334:	f107 0314 	add.w	r3, r7, #20
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	47a0      	blx	r4
 800f33e:	f107 0314 	add.w	r3, r7, #20
 800f342:	4618      	mov	r0, r3
 800f344:	f7f9 ffd2 	bl	80092ec <_ZN11TestFailureD1Ev>
 800f348:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7f8 fd74 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 800f352:	bf00      	nop
 800f354:	3754      	adds	r7, #84	; 0x54
 800f356:	46bd      	mov	sp, r7
 800f358:	bd90      	pop	{r4, r7, pc}
 800f35a:	bf00      	nop
 800f35c:	08016ea8 	.word	0x08016ea8

0800f360 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 800f360:	b480      	push	{r7}
 800f362:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 800f364:	2301      	movs	r3, #1
}
 800f366:	4618      	mov	r0, r3
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr

0800f370 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b082      	sub	sp, #8
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 800f37a:	4b13      	ldr	r3, [pc, #76]	; (800f3c8 <PlatformSpecificSetJmpImplementation+0x58>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	225c      	movs	r2, #92	; 0x5c
 800f380:	fb02 f303 	mul.w	r3, r2, r3
 800f384:	4a11      	ldr	r2, [pc, #68]	; (800f3cc <PlatformSpecificSetJmpImplementation+0x5c>)
 800f386:	4413      	add	r3, r2
 800f388:	4618      	mov	r0, r3
 800f38a:	f7f0 ff49 	bl	8000220 <setjmp>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	bf0c      	ite	eq
 800f394:	2301      	moveq	r3, #1
 800f396:	2300      	movne	r3, #0
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d00e      	beq.n	800f3bc <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 800f39e:	4b0a      	ldr	r3, [pc, #40]	; (800f3c8 <PlatformSpecificSetJmpImplementation+0x58>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	3301      	adds	r3, #1
 800f3a4:	4a08      	ldr	r2, [pc, #32]	; (800f3c8 <PlatformSpecificSetJmpImplementation+0x58>)
 800f3a6:	6013      	str	r3, [r2, #0]
        function(data);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6838      	ldr	r0, [r7, #0]
 800f3ac:	4798      	blx	r3
        jmp_buf_index--;
 800f3ae:	4b06      	ldr	r3, [pc, #24]	; (800f3c8 <PlatformSpecificSetJmpImplementation+0x58>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	4a04      	ldr	r2, [pc, #16]	; (800f3c8 <PlatformSpecificSetJmpImplementation+0x58>)
 800f3b6:	6013      	str	r3, [r2, #0]
        return 1;
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e000      	b.n	800f3be <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 800f3bc:	2300      	movs	r3, #0
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3708      	adds	r7, #8
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	20000b44 	.word	0x20000b44
 800f3cc:	200007ac 	.word	0x200007ac

0800f3d0 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 800f3d4:	4b07      	ldr	r3, [pc, #28]	; (800f3f4 <PlatformSpecificLongJmpImplementation+0x24>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	3b01      	subs	r3, #1
 800f3da:	4a06      	ldr	r2, [pc, #24]	; (800f3f4 <PlatformSpecificLongJmpImplementation+0x24>)
 800f3dc:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 800f3de:	4b05      	ldr	r3, [pc, #20]	; (800f3f4 <PlatformSpecificLongJmpImplementation+0x24>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	225c      	movs	r2, #92	; 0x5c
 800f3e4:	fb02 f303 	mul.w	r3, r2, r3
 800f3e8:	4a03      	ldr	r2, [pc, #12]	; (800f3f8 <PlatformSpecificLongJmpImplementation+0x28>)
 800f3ea:	4413      	add	r3, r2
 800f3ec:	2101      	movs	r1, #1
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7f0 ff1c 	bl	800022c <longjmp>
 800f3f4:	20000b44 	.word	0x20000b44
 800f3f8:	200007ac 	.word	0x200007ac

0800f3fc <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 800f400:	2300      	movs	r3, #0
#endif
}
 800f402:	4618      	mov	r0, r3
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr

0800f40c <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 800f412:	2000      	movs	r0, #0
 800f414:	f004 fbee 	bl	8013bf4 <time>
 800f418:	4602      	mov	r2, r0
 800f41a:	460b      	mov	r3, r1
 800f41c:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 800f420:	463b      	mov	r3, r7
 800f422:	4618      	mov	r0, r3
 800f424:	f003 fa6c 	bl	8012900 <localtime>
 800f428:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	4a04      	ldr	r2, [pc, #16]	; (800f440 <TimeStringImplementation+0x34>)
 800f42e:	2150      	movs	r1, #80	; 0x50
 800f430:	4804      	ldr	r0, [pc, #16]	; (800f444 <TimeStringImplementation+0x38>)
 800f432:	f004 fb4d 	bl	8013ad0 <strftime>
    return dateTime;
 800f436:	4b03      	ldr	r3, [pc, #12]	; (800f444 <TimeStringImplementation+0x38>)
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3710      	adds	r7, #16
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	08016ee4 	.word	0x08016ee4
 800f444:	20000b48 	.word	0x20000b48

0800f448 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 800f452:	6839      	ldr	r1, [r7, #0]
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f003 f889 	bl	801256c <fopen>
 800f45a:	4603      	mov	r3, r0
#endif
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3708      	adds	r7, #8
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 800f46e:	6839      	ldr	r1, [r7, #0]
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f003 f8e9 	bl	8012648 <fputs>
}
 800f476:	bf00      	nop
 800f478:	3708      	adds	r7, #8
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}

0800f47e <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 800f47e:	b580      	push	{r7, lr}
 800f480:	b082      	sub	sp, #8
 800f482:	af00      	add	r7, sp, #0
 800f484:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f002 fe6a 	bl	8012160 <fclose>
}
 800f48c:	bf00      	nop
 800f48e:	3708      	adds	r7, #8
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 800f494:	b580      	push	{r7, lr}
 800f496:	af00      	add	r7, sp, #0
  fflush(stdout);
 800f498:	4b03      	ldr	r3, [pc, #12]	; (800f4a8 <PlatformSpecificFlushImplementation+0x14>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	689b      	ldr	r3, [r3, #8]
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f002 ff28 	bl	80122f4 <fflush>
}
 800f4a4:	bf00      	nop
 800f4a6:	bd80      	pop	{r7, pc}
 800f4a8:	20000100 	.word	0x20000100

0800f4ac <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 800f4b6:	ed97 0b00 	vldr	d0, [r7]
 800f4ba:	f7ff ff07 	bl	800f2cc <_ZSt5isnand>
 800f4be:	4603      	mov	r3, r0
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 800f4d2:	ed97 0b00 	vldr	d0, [r7]
 800f4d6:	f7ff fec9 	bl	800f26c <_ZSt5isinfd>
 800f4da:	4603      	mov	r3, r0
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3708      	adds	r7, #8
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 800f4e8:	2300      	movs	r3, #0
#endif

}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f2:	4770      	bx	lr

0800f4f4 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b083      	sub	sp, #12
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
}
 800f4fc:	bf00      	nop
 800f4fe:	370c      	adds	r7, #12
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr

0800f508 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 800f508:	b480      	push	{r7}
 800f50a:	b083      	sub	sp, #12
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
}
 800f510:	bf00      	nop
 800f512:	370c      	adds	r7, #12
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr

0800f51c <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b083      	sub	sp, #12
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
}
 800f524:	bf00      	nop
 800f526:	370c      	adds	r7, #12
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr

0800f530 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	60f8      	str	r0, [r7, #12]
 800f538:	60b9      	str	r1, [r7, #8]
 800f53a:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 800f53c:	4a25      	ldr	r2, [pc, #148]	; (800f5d4 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	601a      	str	r2, [r3, #0]
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	68ba      	ldr	r2, [r7, #8]
 800f546:	605a      	str	r2, [r3, #4]
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	609a      	str	r2, [r3, #8]
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2200      	movs	r2, #0
 800f552:	731a      	strb	r2, [r3, #12]
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2200      	movs	r2, #0
 800f558:	735a      	strb	r2, [r3, #13]
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2200      	movs	r2, #0
 800f55e:	739a      	strb	r2, [r3, #14]
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2200      	movs	r2, #0
 800f564:	73da      	strb	r2, [r3, #15]
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2200      	movs	r2, #0
 800f56a:	741a      	strb	r2, [r3, #16]
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2200      	movs	r2, #0
 800f570:	745a      	strb	r2, [r3, #17]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2200      	movs	r2, #0
 800f576:	749a      	strb	r2, [r3, #18]
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2200      	movs	r2, #0
 800f57c:	74da      	strb	r2, [r3, #19]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	2200      	movs	r2, #0
 800f582:	751a      	strb	r2, [r3, #20]
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	2200      	movs	r2, #0
 800f588:	755a      	strb	r2, [r3, #21]
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2200      	movs	r2, #0
 800f58e:	759a      	strb	r2, [r3, #22]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2200      	movs	r2, #0
 800f594:	75da      	strb	r2, [r3, #23]
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	2200      	movs	r2, #0
 800f59a:	761a      	strb	r2, [r3, #24]
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2201      	movs	r2, #1
 800f5a0:	61da      	str	r2, [r3, #28]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	621a      	str	r2, [r3, #32]
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	625a      	str	r2, [r3, #36]	; 0x24
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	629a      	str	r2, [r3, #40]	; 0x28
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	3330      	adds	r3, #48	; 0x30
 800f5c0:	4905      	ldr	r1, [pc, #20]	; (800f5d8 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7f8 f881 	bl	80076ca <_ZN12SimpleStringC1EPKc>
{
}
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop
 800f5d4:	08018cdc 	.word	0x08018cdc
 800f5d8:	08016ef8 	.word	0x08016ef8

0800f5dc <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b082      	sub	sp, #8
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7f8 fc27 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
	...

0800f5f8 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 800f5f8:	b590      	push	{r4, r7, lr}
 800f5fa:	b085      	sub	sp, #20
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	4a20      	ldr	r2, [pc, #128]	; (800f684 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d015      	beq.n	800f63a <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f612:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f618:	4618      	mov	r0, r3
 800f61a:	f002 fc9a 	bl	8011f52 <_ZNK10TestFilter7getNextEv>
 800f61e:	4602      	mov	r2, r0
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 800f624:	68fc      	ldr	r4, [r7, #12]
 800f626:	2c00      	cmp	r4, #0
 800f628:	d0ed      	beq.n	800f606 <_ZN20CommandLineArgumentsD1Ev+0xe>
 800f62a:	4620      	mov	r0, r4
 800f62c:	f7ff ffd6 	bl	800f5dc <_ZN10TestFilterD1Ev>
 800f630:	2110      	movs	r1, #16
 800f632:	4620      	mov	r0, r4
 800f634:	f7f7 f974 	bl	8006920 <_ZdlPvj>
    while(groupFilters_) {
 800f638:	e7e5      	b.n	800f606 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d015      	beq.n	800f66e <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f646:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f64c:	4618      	mov	r0, r3
 800f64e:	f002 fc80 	bl	8011f52 <_ZNK10TestFilter7getNextEv>
 800f652:	4602      	mov	r2, r0
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 800f658:	68bc      	ldr	r4, [r7, #8]
 800f65a:	2c00      	cmp	r4, #0
 800f65c:	d0ed      	beq.n	800f63a <_ZN20CommandLineArgumentsD1Ev+0x42>
 800f65e:	4620      	mov	r0, r4
 800f660:	f7ff ffbc 	bl	800f5dc <_ZN10TestFilterD1Ev>
 800f664:	2110      	movs	r1, #16
 800f666:	4620      	mov	r0, r4
 800f668:	f7f7 f95a 	bl	8006920 <_ZdlPvj>
    while(nameFilters_) {
 800f66c:	e7e5      	b.n	800f63a <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	3330      	adds	r3, #48	; 0x30
 800f672:	4618      	mov	r0, r3
 800f674:	f7f8 fbe1 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    }
}
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4618      	mov	r0, r3
 800f67c:	3714      	adds	r7, #20
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd90      	pop	{r4, r7, pc}
 800f682:	bf00      	nop
 800f684:	08018cdc 	.word	0x08018cdc

0800f688 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
}
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f7ff ffb1 	bl	800f5f8 <_ZN20CommandLineArgumentsD1Ev>
 800f696:	2138      	movs	r1, #56	; 0x38
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f7f7 f941 	bl	8006920 <_ZdlPvj>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3708      	adds	r7, #8
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}

0800f6a8 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 800f6a8:	b5b0      	push	{r4, r5, r7, lr}
 800f6aa:	b0be      	sub	sp, #248	; 0xf8
 800f6ac:	af02      	add	r7, sp, #8
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	6039      	str	r1, [r7, #0]
 800f6b2:	2400      	movs	r4, #0
    bool correctParameters = true;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	613b      	str	r3, [r7, #16]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	685a      	ldr	r2, [r3, #4]
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	f340 83a4 	ble.w	800fe12 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	689a      	ldr	r2, [r3, #8]
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	4413      	add	r3, r2
 800f6d4:	681a      	ldr	r2, [r3, #0]
 800f6d6:	f107 0308 	add.w	r3, r7, #8
 800f6da:	4611      	mov	r1, r2
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7f7 fff4 	bl	80076ca <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 800f6e2:	f107 0314 	add.w	r3, r7, #20
 800f6e6:	49c8      	ldr	r1, [pc, #800]	; (800fa08 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7f7 ffee 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800f6ee:	f107 0214 	add.w	r2, r7, #20
 800f6f2:	f107 0308 	add.w	r3, r7, #8
 800f6f6:	4611      	mov	r1, r2
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7f8 fbaa 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800f6fe:	4603      	mov	r3, r0
 800f700:	461d      	mov	r5, r3
 800f702:	f107 0314 	add.w	r3, r7, #20
 800f706:	4618      	mov	r0, r3
 800f708:	f7f8 fb97 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800f70c:	2d00      	cmp	r5, #0
 800f70e:	d006      	beq.n	800f71e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2201      	movs	r2, #1
 800f714:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 800f716:	2300      	movs	r3, #0
 800f718:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800f71c:	e366      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 800f71e:	f107 031c 	add.w	r3, r7, #28
 800f722:	49ba      	ldr	r1, [pc, #744]	; (800fa0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 800f724:	4618      	mov	r0, r3
 800f726:	f7f7 ffd0 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800f72a:	f107 021c 	add.w	r2, r7, #28
 800f72e:	f107 0308 	add.w	r3, r7, #8
 800f732:	4611      	mov	r1, r2
 800f734:	4618      	mov	r0, r3
 800f736:	f7f8 fb8c 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800f73a:	4603      	mov	r3, r0
 800f73c:	461d      	mov	r5, r3
 800f73e:	f107 031c 	add.w	r3, r7, #28
 800f742:	4618      	mov	r0, r3
 800f744:	f7f8 fb79 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800f748:	2d00      	cmp	r5, #0
 800f74a:	d003      	beq.n	800f754 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2201      	movs	r2, #1
 800f750:	735a      	strb	r2, [r3, #13]
 800f752:	e34b      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 800f754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f758:	49ad      	ldr	r1, [pc, #692]	; (800fa10 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7f7 ffb5 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800f760:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f764:	f107 0308 	add.w	r3, r7, #8
 800f768:	4611      	mov	r1, r2
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7f8 fb71 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800f770:	4603      	mov	r3, r0
 800f772:	461d      	mov	r5, r3
 800f774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f778:	4618      	mov	r0, r3
 800f77a:	f7f8 fb5e 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800f77e:	2d00      	cmp	r5, #0
 800f780:	d003      	beq.n	800f78a <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2201      	movs	r2, #1
 800f786:	739a      	strb	r2, [r3, #14]
 800f788:	e330      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 800f78a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f78e:	49a1      	ldr	r1, [pc, #644]	; (800fa14 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 800f790:	4618      	mov	r0, r3
 800f792:	f7f7 ff9a 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800f796:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f79a:	f107 0308 	add.w	r3, r7, #8
 800f79e:	4611      	mov	r1, r2
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7f8 fb56 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	461d      	mov	r5, r3
 800f7aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7f8 fb43 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800f7b4:	2d00      	cmp	r5, #0
 800f7b6:	d003      	beq.n	800f7c0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	73da      	strb	r2, [r3, #15]
 800f7be:	e315      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 800f7c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f7c4:	4994      	ldr	r1, [pc, #592]	; (800fa18 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7f7 ff7f 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800f7cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f7d0:	f107 0308 	add.w	r3, r7, #8
 800f7d4:	4611      	mov	r1, r2
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7f8 fb3b 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	461d      	mov	r5, r3
 800f7e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7f8 fb28 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800f7ea:	2d00      	cmp	r5, #0
 800f7ec:	d003      	beq.n	800f7f6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	741a      	strb	r2, [r3, #16]
 800f7f4:	e2fa      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 800f7f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f7fa:	4988      	ldr	r1, [pc, #544]	; (800fa1c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7f7 ff64 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800f802:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800f806:	f107 0308 	add.w	r3, r7, #8
 800f80a:	4611      	mov	r1, r2
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7f8 fb20 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800f812:	4603      	mov	r3, r0
 800f814:	461d      	mov	r5, r3
 800f816:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7f8 fb0d 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800f820:	2d00      	cmp	r5, #0
 800f822:	d003      	beq.n	800f82c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2201      	movs	r2, #1
 800f828:	755a      	strb	r2, [r3, #21]
 800f82a:	e2df      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 800f82c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f830:	497b      	ldr	r1, [pc, #492]	; (800fa20 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 800f832:	4618      	mov	r0, r3
 800f834:	f7f7 ff49 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800f838:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f83c:	f107 0308 	add.w	r3, r7, #8
 800f840:	4611      	mov	r1, r2
 800f842:	4618      	mov	r0, r3
 800f844:	f7f8 fb05 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800f848:	4603      	mov	r3, r0
 800f84a:	461d      	mov	r5, r3
 800f84c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f850:	4618      	mov	r0, r3
 800f852:	f7f8 faf2 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800f856:	2d00      	cmp	r5, #0
 800f858:	d003      	beq.n	800f862 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2201      	movs	r2, #1
 800f85e:	745a      	strb	r2, [r3, #17]
 800f860:	e2c4      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 800f862:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800f866:	496f      	ldr	r1, [pc, #444]	; (800fa24 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 800f868:	4618      	mov	r0, r3
 800f86a:	f7f7 ff2e 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800f86e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f872:	f107 0308 	add.w	r3, r7, #8
 800f876:	4611      	mov	r1, r2
 800f878:	4618      	mov	r0, r3
 800f87a:	f7f8 faea 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800f87e:	4603      	mov	r3, r0
 800f880:	461d      	mov	r5, r3
 800f882:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800f886:	4618      	mov	r0, r3
 800f888:	f7f8 fad7 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800f88c:	2d00      	cmp	r5, #0
 800f88e:	d003      	beq.n	800f898 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2201      	movs	r2, #1
 800f894:	749a      	strb	r2, [r3, #18]
 800f896:	e2a9      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 800f898:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f89c:	4962      	ldr	r1, [pc, #392]	; (800fa28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7f7 ff13 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800f8a4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800f8a8:	f107 0308 	add.w	r3, r7, #8
 800f8ac:	4611      	mov	r1, r2
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7f8 facf 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	461d      	mov	r5, r3
 800f8b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7f8 fabc 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800f8c2:	2d00      	cmp	r5, #0
 800f8c4:	d003      	beq.n	800f8ce <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2201      	movs	r2, #1
 800f8ca:	74da      	strb	r2, [r3, #19]
 800f8cc:	e28e      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 800f8ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f8d2:	4956      	ldr	r1, [pc, #344]	; (800fa2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7f7 fef8 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800f8da:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800f8de:	f107 0308 	add.w	r3, r7, #8
 800f8e2:	4611      	mov	r1, r2
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7f8 fab4 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	461d      	mov	r5, r3
 800f8ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7f8 faa1 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800f8f8:	2d00      	cmp	r5, #0
 800f8fa:	d003      	beq.n	800f904 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2201      	movs	r2, #1
 800f900:	751a      	strb	r2, [r3, #20]
 800f902:	e273      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 800f904:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f908:	4949      	ldr	r1, [pc, #292]	; (800fa30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7f7 fedd 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800f910:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800f914:	f107 0308 	add.w	r3, r7, #8
 800f918:	4611      	mov	r1, r2
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7f8 fa99 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 800f920:	4603      	mov	r3, r0
 800f922:	461d      	mov	r5, r3
 800f924:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f928:	4618      	mov	r0, r3
 800f92a:	f7f8 fa86 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800f92e:	2d00      	cmp	r5, #0
 800f930:	d003      	beq.n	800f93a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2201      	movs	r2, #1
 800f936:	759a      	strb	r2, [r3, #22]
 800f938:	e258      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 800f93a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f93e:	493d      	ldr	r1, [pc, #244]	; (800fa34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 800f940:	4618      	mov	r0, r3
 800f942:	f7f7 fec2 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800f946:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800f94a:	f107 0308 	add.w	r3, r7, #8
 800f94e:	4611      	mov	r1, r2
 800f950:	4618      	mov	r0, r3
 800f952:	f7f7 ff7e 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800f956:	4603      	mov	r3, r0
 800f958:	461d      	mov	r5, r3
 800f95a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f95e:	4618      	mov	r0, r3
 800f960:	f7f8 fa6b 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800f964:	2d00      	cmp	r5, #0
 800f966:	d009      	beq.n	800f97c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6859      	ldr	r1, [r3, #4]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	689a      	ldr	r2, [r3, #8]
 800f970:	f107 0310 	add.w	r3, r7, #16
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f000 fb33 	bl	800ffe0 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 800f97a:	e237      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 800f97c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f980:	492d      	ldr	r1, [pc, #180]	; (800fa38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 800f982:	4618      	mov	r0, r3
 800f984:	f7f7 fea1 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800f988:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800f98c:	f107 0308 	add.w	r3, r7, #8
 800f990:	4611      	mov	r1, r2
 800f992:	4618      	mov	r0, r3
 800f994:	f7f7 ff5d 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800f998:	4603      	mov	r3, r0
 800f99a:	461d      	mov	r5, r3
 800f99c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7f8 fa4a 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800f9a6:	2d00      	cmp	r5, #0
 800f9a8:	d009      	beq.n	800f9be <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6859      	ldr	r1, [r3, #4]
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	689a      	ldr	r2, [r3, #8]
 800f9b2:	f107 0310 	add.w	r3, r7, #16
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 fc40 	bl	801023c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 800f9bc:	e216      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 800f9be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f9c2:	491e      	ldr	r1, [pc, #120]	; (800fa3c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7f7 fe80 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800f9ca:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800f9ce:	f107 0308 	add.w	r3, r7, #8
 800f9d2:	4611      	mov	r1, r2
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f7f7 ff3c 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	461d      	mov	r5, r3
 800f9de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7f8 fa29 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800f9e8:	2d00      	cmp	r5, #0
 800f9ea:	d029      	beq.n	800fa40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6859      	ldr	r1, [r3, #4]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	689a      	ldr	r2, [r3, #8]
 800f9f4:	f107 0310 	add.w	r3, r7, #16
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f000 fc61 	bl	80102c0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800fa04:	e1f2      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 800fa06:	bf00      	nop
 800fa08:	08016efc 	.word	0x08016efc
 800fa0c:	08016f00 	.word	0x08016f00
 800fa10:	08016f04 	.word	0x08016f04
 800fa14:	08016f08 	.word	0x08016f08
 800fa18:	08016f0c 	.word	0x08016f0c
 800fa1c:	08016f10 	.word	0x08016f10
 800fa20:	08016f14 	.word	0x08016f14
 800fa24:	08016f18 	.word	0x08016f18
 800fa28:	08016f1c 	.word	0x08016f1c
 800fa2c:	08016f20 	.word	0x08016f20
 800fa30:	08016f24 	.word	0x08016f24
 800fa34:	08016f28 	.word	0x08016f28
 800fa38:	08016f2c 	.word	0x08016f2c
 800fa3c:	08016f30 	.word	0x08016f30
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 800fa40:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800fa44:	49b9      	ldr	r1, [pc, #740]	; (800fd2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7f7 fe3f 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800fa4c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800fa50:	f107 0308 	add.w	r3, r7, #8
 800fa54:	4611      	mov	r1, r2
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7f7 fefb 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	461d      	mov	r5, r3
 800fa60:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7f8 f9e8 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800fa6a:	2d00      	cmp	r5, #0
 800fa6c:	d009      	beq.n	800fa82 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6859      	ldr	r1, [r3, #4]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	689a      	ldr	r2, [r3, #8]
 800fa76:	f107 0310 	add.w	r3, r7, #16
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f000 fccc 	bl	8010418 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 800fa80:	e1b4      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 800fa82:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800fa86:	49aa      	ldr	r1, [pc, #680]	; (800fd30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7f7 fe1e 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800fa8e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800fa92:	f107 0308 	add.w	r3, r7, #8
 800fa96:	4611      	mov	r1, r2
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7f7 feda 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	461d      	mov	r5, r3
 800faa2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7f8 f9c7 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800faac:	2d00      	cmp	r5, #0
 800faae:	d009      	beq.n	800fac4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6859      	ldr	r1, [r3, #4]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	689a      	ldr	r2, [r3, #8]
 800fab8:	f107 0310 	add.w	r3, r7, #16
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 fcf1 	bl	80104a4 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 800fac2:	e193      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 800fac4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800fac8:	499a      	ldr	r1, [pc, #616]	; (800fd34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 800faca:	4618      	mov	r0, r3
 800facc:	f7f7 fdfd 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800fad0:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800fad4:	f107 0308 	add.w	r3, r7, #8
 800fad8:	4611      	mov	r1, r2
 800fada:	4618      	mov	r0, r3
 800fadc:	f7f7 feb9 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800fae0:	4603      	mov	r3, r0
 800fae2:	461d      	mov	r5, r3
 800fae4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800fae8:	4618      	mov	r0, r3
 800faea:	f7f8 f9a6 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800faee:	2d00      	cmp	r5, #0
 800faf0:	d009      	beq.n	800fb06 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6859      	ldr	r1, [r3, #4]
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	689a      	ldr	r2, [r3, #8]
 800fafa:	f107 0310 	add.w	r3, r7, #16
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 fd16 	bl	8010530 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 800fb04:	e172      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 800fb06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800fb0a:	498b      	ldr	r1, [pc, #556]	; (800fd38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7f7 fddc 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800fb12:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800fb16:	f107 0308 	add.w	r3, r7, #8
 800fb1a:	4611      	mov	r1, r2
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7f7 fe98 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800fb22:	4603      	mov	r3, r0
 800fb24:	461d      	mov	r5, r3
 800fb26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7f8 f985 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800fb30:	2d00      	cmp	r5, #0
 800fb32:	d009      	beq.n	800fb48 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6859      	ldr	r1, [r3, #4]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	689a      	ldr	r2, [r3, #8]
 800fb3c:	f107 0310 	add.w	r3, r7, #16
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f000 fd3d 	bl	80105c0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 800fb46:	e151      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 800fb48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fb4c:	497b      	ldr	r1, [pc, #492]	; (800fd3c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7f7 fdbb 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800fb54:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800fb58:	f107 0308 	add.w	r3, r7, #8
 800fb5c:	4611      	mov	r1, r2
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7f7 fe77 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800fb64:	4603      	mov	r3, r0
 800fb66:	461d      	mov	r5, r3
 800fb68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7f8 f964 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800fb72:	2d00      	cmp	r5, #0
 800fb74:	d009      	beq.n	800fb8a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6859      	ldr	r1, [r3, #4]
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	689a      	ldr	r2, [r3, #8]
 800fb7e:	f107 0310 	add.w	r3, r7, #16
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 fd5e 	bl	8010644 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 800fb88:	e130      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 800fb8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800fb8e:	496c      	ldr	r1, [pc, #432]	; (800fd40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7f7 fd9a 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800fb96:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800fb9a:	f107 0308 	add.w	r3, r7, #8
 800fb9e:	4611      	mov	r1, r2
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7f7 fe56 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800fba6:	4603      	mov	r3, r0
 800fba8:	461d      	mov	r5, r3
 800fbaa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7f8 f943 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800fbb4:	2d00      	cmp	r5, #0
 800fbb6:	d009      	beq.n	800fbcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6859      	ldr	r1, [r3, #4]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	689a      	ldr	r2, [r3, #8]
 800fbc0:	f107 0310 	add.w	r3, r7, #16
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f000 fd83 	bl	80106d0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 800fbca:	e10f      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 800fbcc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800fbd0:	495c      	ldr	r1, [pc, #368]	; (800fd44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7f7 fd79 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800fbd8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800fbdc:	f107 0308 	add.w	r3, r7, #8
 800fbe0:	4611      	mov	r1, r2
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f7f7 fe35 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	461d      	mov	r5, r3
 800fbec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7f8 f922 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800fbf6:	2d00      	cmp	r5, #0
 800fbf8:	d009      	beq.n	800fc0e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6859      	ldr	r1, [r3, #4]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	689a      	ldr	r2, [r3, #8]
 800fc02:	f107 0310 	add.w	r3, r7, #16
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f000 fda8 	bl	801075c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 800fc0c:	e0ee      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 800fc0e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800fc12:	494d      	ldr	r1, [pc, #308]	; (800fd48 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7f7 fd58 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800fc1a:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800fc1e:	f107 0308 	add.w	r3, r7, #8
 800fc22:	4611      	mov	r1, r2
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7f7 fe14 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	461d      	mov	r5, r3
 800fc2e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7f8 f901 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800fc38:	2d00      	cmp	r5, #0
 800fc3a:	d00c      	beq.n	800fc56 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6859      	ldr	r1, [r3, #4]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	689a      	ldr	r2, [r3, #8]
 800fc44:	f107 0310 	add.w	r3, r7, #16
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f000 fa29 	bl	80100a0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800fc54:	e0ca      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 800fc56:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800fc5a:	493c      	ldr	r1, [pc, #240]	; (800fd4c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7f7 fd34 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800fc62:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800fc66:	f107 0308 	add.w	r3, r7, #8
 800fc6a:	4611      	mov	r1, r2
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7f7 fdf0 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800fc72:	4603      	mov	r3, r0
 800fc74:	461d      	mov	r5, r3
 800fc76:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7f8 f8dd 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800fc80:	2d00      	cmp	r5, #0
 800fc82:	d00b      	beq.n	800fc9c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6859      	ldr	r1, [r3, #4]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	689a      	ldr	r2, [r3, #8]
 800fc8c:	f107 0310 	add.w	r3, r7, #16
 800fc90:	482e      	ldr	r0, [pc, #184]	; (800fd4c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 800fc92:	9000      	str	r0, [sp, #0]
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f000 fda9 	bl	80107ec <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 800fc9a:	e0a7      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 800fc9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800fca0:	492b      	ldr	r1, [pc, #172]	; (800fd50 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7f7 fd11 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800fca8:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800fcac:	f107 0308 	add.w	r3, r7, #8
 800fcb0:	4611      	mov	r1, r2
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7f7 fdcd 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	461d      	mov	r5, r3
 800fcbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7f8 f8ba 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800fcc6:	2d00      	cmp	r5, #0
 800fcc8:	d00b      	beq.n	800fce2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6859      	ldr	r1, [r3, #4]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	689a      	ldr	r2, [r3, #8]
 800fcd2:	f107 0310 	add.w	r3, r7, #16
 800fcd6:	481e      	ldr	r0, [pc, #120]	; (800fd50 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 800fcd8:	9000      	str	r0, [sp, #0]
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 fd86 	bl	80107ec <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 800fce0:	e084      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 800fce2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800fce6:	491b      	ldr	r1, [pc, #108]	; (800fd54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7f7 fcee 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800fcee:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800fcf2:	f107 0308 	add.w	r3, r7, #8
 800fcf6:	4611      	mov	r1, r2
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7f7 fdaa 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	461d      	mov	r5, r3
 800fd02:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7f8 f897 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800fd0c:	2d00      	cmp	r5, #0
 800fd0e:	d023      	beq.n	800fd58 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6859      	ldr	r1, [r3, #4]
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	689a      	ldr	r2, [r3, #8]
 800fd18:	f107 0310 	add.w	r3, r7, #16
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f000 fe3b 	bl	8010998 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 800fd22:	4603      	mov	r3, r0
 800fd24:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800fd28:	e060      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 800fd2a:	bf00      	nop
 800fd2c:	08016f34 	.word	0x08016f34
 800fd30:	08016f38 	.word	0x08016f38
 800fd34:	08016f3c 	.word	0x08016f3c
 800fd38:	08016f44 	.word	0x08016f44
 800fd3c:	08016f48 	.word	0x08016f48
 800fd40:	08016f4c 	.word	0x08016f4c
 800fd44:	08016f50 	.word	0x08016f50
 800fd48:	08016f58 	.word	0x08016f58
 800fd4c:	08016f5c 	.word	0x08016f5c
 800fd50:	08016f64 	.word	0x08016f64
 800fd54:	08016f74 	.word	0x08016f74
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 800fd58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800fd5c:	4930      	ldr	r1, [pc, #192]	; (800fe20 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7f7 fcb3 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800fd64:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800fd68:	f107 0308 	add.w	r3, r7, #8
 800fd6c:	4611      	mov	r1, r2
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7f7 fd6f 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800fd74:	4603      	mov	r3, r0
 800fd76:	461d      	mov	r5, r3
 800fd78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7f8 f85c 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800fd82:	2d00      	cmp	r5, #0
 800fd84:	d00e      	beq.n	800fda4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	331c      	adds	r3, #28
 800fd8c:	681d      	ldr	r5, [r3, #0]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6859      	ldr	r1, [r3, #4]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	689a      	ldr	r2, [r3, #8]
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	6838      	ldr	r0, [r7, #0]
 800fd9a:	47a8      	blx	r5
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800fda2:	e023      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 800fda4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800fda8:	491e      	ldr	r1, [pc, #120]	; (800fe24 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7f7 fc8d 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 800fdb0:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800fdb4:	f107 0308 	add.w	r3, r7, #8
 800fdb8:	4611      	mov	r1, r2
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7f7 fd49 	bl	8007852 <_ZNK12SimpleString10startsWithERKS_>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	461d      	mov	r5, r3
 800fdc4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7f8 f836 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800fdce:	2d00      	cmp	r5, #0
 800fdd0:	d009      	beq.n	800fde6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6859      	ldr	r1, [r3, #4]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	689a      	ldr	r2, [r3, #8]
 800fdda:	f107 0310 	add.w	r3, r7, #16
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f000 fd98 	bl	8010914 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 800fde4:	e002      	b.n	800fdec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 800fde6:	2300      	movs	r3, #0
 800fde8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 800fdec:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d102      	bne.n	800fdfa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 800fdf4:	2400      	movs	r4, #0
 800fdf6:	2500      	movs	r5, #0
 800fdf8:	e000      	b.n	800fdfc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 800fdfa:	2501      	movs	r5, #1
 800fdfc:	f107 0308 	add.w	r3, r7, #8
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7f8 f81a 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 800fe06:	2d01      	cmp	r5, #1
 800fe08:	d104      	bne.n	800fe14 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 800fe0a:	693b      	ldr	r3, [r7, #16]
 800fe0c:	3301      	adds	r3, #1
 800fe0e:	613b      	str	r3, [r7, #16]
 800fe10:	e455      	b.n	800f6be <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 800fe12:	2401      	movs	r4, #1
 800fe14:	4623      	mov	r3, r4
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	37f0      	adds	r7, #240	; 0xf0
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bdb0      	pop	{r4, r5, r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	08016f0c 	.word	0x08016f0c
 800fe24:	08016f78 	.word	0x08016f78

0800fe28 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b083      	sub	sp, #12
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 800fe30:	4b03      	ldr	r3, [pc, #12]	; (800fe40 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	370c      	adds	r7, #12
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr
 800fe3e:	bf00      	nop
 800fe40:	08016f7c 	.word	0x08016f7c

0800fe44 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 800fe4c:	4b03      	ldr	r3, [pc, #12]	; (800fe5c <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	370c      	adds	r7, #12
 800fe52:	46bd      	mov	sp, r7
 800fe54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe58:	4770      	bx	lr
 800fe5a:	bf00      	nop
 800fe5c:	080170ac 	.word	0x080170ac

0800fe60 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 800fe60:	b480      	push	{r7}
 800fe62:	b083      	sub	sp, #12
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
    return needHelp_;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	7b1b      	ldrb	r3, [r3, #12]
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	370c      	adds	r7, #12
 800fe70:	46bd      	mov	sp, r7
 800fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe76:	4770      	bx	lr

0800fe78 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
    return verbose_;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	7b5b      	ldrb	r3, [r3, #13]
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	370c      	adds	r7, #12
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr

0800fe90 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	7b9b      	ldrb	r3, [r3, #14]
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	370c      	adds	r7, #12
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr

0800fea8 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
    return color_;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	7bdb      	ldrb	r3, [r3, #15]
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	370c      	adds	r7, #12
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr

0800fec0 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 800fec0:	b480      	push	{r7}
 800fec2:	b083      	sub	sp, #12
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	7c5b      	ldrb	r3, [r3, #17]
}
 800fecc:	4618      	mov	r0, r3
 800fece:	370c      	adds	r7, #12
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr

0800fed8 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	7c9b      	ldrb	r3, [r3, #18]
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr

0800fef0 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	7cdb      	ldrb	r3, [r3, #19]
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	370c      	adds	r7, #12
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr

0800ff08 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b083      	sub	sp, #12
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	7d1b      	ldrb	r3, [r3, #20]
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	370c      	adds	r7, #12
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 800ff20:	b480      	push	{r7}
 800ff22:	b083      	sub	sp, #12
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	7c1b      	ldrb	r3, [r3, #16]
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b083      	sub	sp, #12
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
    return repeat_;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	69db      	ldr	r3, [r3, #28]
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	370c      	adds	r7, #12
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4e:	4770      	bx	lr

0800ff50 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
    return reversing_;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	7d5b      	ldrb	r3, [r3, #21]
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	370c      	adds	r7, #12
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr

0800ff68 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b083      	sub	sp, #12
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	7d9b      	ldrb	r3, [r3, #22]
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	370c      	adds	r7, #12
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr

0800ff80 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 800ff80:	b480      	push	{r7}
 800ff82:	b083      	sub	sp, #12
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
    return shuffling_;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	7ddb      	ldrb	r3, [r3, #23]
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	370c      	adds	r7, #12
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr

0800ff98 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b083      	sub	sp, #12
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6a1b      	ldr	r3, [r3, #32]
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	370c      	adds	r7, #12
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffae:	4770      	bx	lr

0800ffb0 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	370c      	adds	r7, #12
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr

0800ffc8 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b083      	sub	sp, #12
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	370c      	adds	r7, #12
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffde:	4770      	bx	lr

0800ffe0 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b086      	sub	sp, #24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
 800ffec:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	2200      	movs	r2, #0
 800fff2:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	009b      	lsls	r3, r3, #2
 800fffa:	687a      	ldr	r2, [r7, #4]
 800fffc:	4413      	add	r3, r2
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	f107 0310 	add.w	r3, r7, #16
 8010004:	4611      	mov	r1, r2
 8010006:	4618      	mov	r0, r3
 8010008:	f7f7 fb5f 	bl	80076ca <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 801000c:	f107 0310 	add.w	r3, r7, #16
 8010010:	4618      	mov	r0, r3
 8010012:	f7f7 fef1 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 8010016:	4603      	mov	r3, r0
 8010018:	2b02      	cmp	r3, #2
 801001a:	bf8c      	ite	hi
 801001c:	2301      	movhi	r3, #1
 801001e:	2300      	movls	r3, #0
 8010020:	b2db      	uxtb	r3, r3
 8010022:	2b00      	cmp	r3, #0
 8010024:	d00e      	beq.n	8010044 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	009b      	lsls	r3, r3, #2
 801002c:	687a      	ldr	r2, [r7, #4]
 801002e:	4413      	add	r3, r2
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	3302      	adds	r3, #2
 8010034:	4618      	mov	r0, r3
 8010036:	f7f7 f944 	bl	80072c2 <_ZN12SimpleString4AtoIEPKc>
 801003a:	4603      	mov	r3, r0
 801003c:	461a      	mov	r2, r3
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	61da      	str	r2, [r3, #28]
 8010042:	e01c      	b.n	801007e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	3301      	adds	r3, #1
 801004a:	68ba      	ldr	r2, [r7, #8]
 801004c:	429a      	cmp	r2, r3
 801004e:	dd16      	ble.n	801007e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	3301      	adds	r3, #1
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	687a      	ldr	r2, [r7, #4]
 801005a:	4413      	add	r3, r2
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	4618      	mov	r0, r3
 8010060:	f7f7 f92f 	bl	80072c2 <_ZN12SimpleString4AtoIEPKc>
 8010064:	4603      	mov	r3, r0
 8010066:	461a      	mov	r2, r3
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	69db      	ldr	r3, [r3, #28]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d004      	beq.n	801007e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	1c5a      	adds	r2, r3, #1
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	69db      	ldr	r3, [r3, #28]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d102      	bne.n	801008c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2202      	movs	r2, #2
 801008a:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 801008c:	f107 0310 	add.w	r3, r7, #16
 8010090:	4618      	mov	r0, r3
 8010092:	f7f7 fed2 	bl	8007e3a <_ZN12SimpleStringD1Ev>

}
 8010096:	bf00      	nop
 8010098:	3718      	adds	r7, #24
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
	...

080100a0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 80100a0:	b590      	push	{r4, r7, lr}
 80100a2:	b089      	sub	sp, #36	; 0x24
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	60f8      	str	r0, [r7, #12]
 80100a8:	60b9      	str	r1, [r7, #8]
 80100aa:	607a      	str	r2, [r7, #4]
 80100ac:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	2201      	movs	r2, #1
 80100b2:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 80100b4:	4b34      	ldr	r3, [pc, #208]	; (8010188 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	4798      	blx	r3
 80100ba:	4603      	mov	r3, r0
 80100bc:	461a      	mov	r2, r3
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	6a1b      	ldr	r3, [r3, #32]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d104      	bne.n	80100d4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	6a1b      	ldr	r3, [r3, #32]
 80100ce:	1c5a      	adds	r2, r3, #1
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	009b      	lsls	r3, r3, #2
 80100da:	687a      	ldr	r2, [r7, #4]
 80100dc:	4413      	add	r3, r2
 80100de:	681a      	ldr	r2, [r3, #0]
 80100e0:	f107 0314 	add.w	r3, r7, #20
 80100e4:	4611      	mov	r1, r2
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7f7 faef 	bl	80076ca <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 80100ec:	f107 0314 	add.w	r3, r7, #20
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7f7 fe81 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 80100f6:	4603      	mov	r3, r0
 80100f8:	2b02      	cmp	r3, #2
 80100fa:	bf8c      	ite	hi
 80100fc:	2301      	movhi	r3, #1
 80100fe:	2300      	movls	r3, #0
 8010100:	b2db      	uxtb	r3, r3
 8010102:	2b00      	cmp	r3, #0
 8010104:	d010      	beq.n	8010128 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2201      	movs	r2, #1
 801010a:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	009b      	lsls	r3, r3, #2
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	4413      	add	r3, r2
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	3302      	adds	r3, #2
 801011a:	4618      	mov	r0, r3
 801011c:	f7f7 f898 	bl	8007250 <_ZN12SimpleString4AtoUEPKc>
 8010120:	4602      	mov	r2, r0
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	621a      	str	r2, [r3, #32]
 8010126:	e01e      	b.n	8010166 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	3301      	adds	r3, #1
 801012e:	68ba      	ldr	r2, [r7, #8]
 8010130:	429a      	cmp	r2, r3
 8010132:	dd18      	ble.n	8010166 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	3301      	adds	r3, #1
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	4413      	add	r3, r2
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	4618      	mov	r0, r3
 8010144:	f7f7 f884 	bl	8007250 <_ZN12SimpleString4AtoUEPKc>
 8010148:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 801014a:	69fb      	ldr	r3, [r7, #28]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d00a      	beq.n	8010166 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2201      	movs	r2, #1
 8010154:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	69fa      	ldr	r2, [r7, #28]
 801015a:	621a      	str	r2, [r3, #32]
            i++;
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	1c5a      	adds	r2, r3, #1
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	6a1b      	ldr	r3, [r3, #32]
 801016a:	2b00      	cmp	r3, #0
 801016c:	bf14      	ite	ne
 801016e:	2301      	movne	r3, #1
 8010170:	2300      	moveq	r3, #0
 8010172:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8010174:	f107 0314 	add.w	r3, r7, #20
 8010178:	4618      	mov	r0, r3
 801017a:	f7f7 fe5e 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 801017e:	4623      	mov	r3, r4
}
 8010180:	4618      	mov	r0, r3
 8010182:	3724      	adds	r7, #36	; 0x24
 8010184:	46bd      	mov	sp, r7
 8010186:	bd90      	pop	{r4, r7, pc}
 8010188:	200000a4 	.word	0x200000a4

0801018c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b088      	sub	sp, #32
 8010190:	af00      	add	r7, sp, #0
 8010192:	60f8      	str	r0, [r7, #12]
 8010194:	60b9      	str	r1, [r7, #8]
 8010196:	607a      	str	r2, [r7, #4]
 8010198:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 801019a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801019c:	f7f7 fe2c 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 80101a0:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 80101a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	009b      	lsls	r3, r3, #2
 80101a8:	683a      	ldr	r2, [r7, #0]
 80101aa:	4413      	add	r3, r2
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	f107 0314 	add.w	r3, r7, #20
 80101b2:	4611      	mov	r1, r2
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7f7 fa88 	bl	80076ca <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 80101ba:	f107 0314 	add.w	r3, r7, #20
 80101be:	4618      	mov	r0, r3
 80101c0:	f7f7 fe1a 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 80101c4:	4602      	mov	r2, r0
 80101c6:	69fb      	ldr	r3, [r7, #28]
 80101c8:	4293      	cmp	r3, r2
 80101ca:	bf34      	ite	cc
 80101cc:	2301      	movcc	r3, #1
 80101ce:	2300      	movcs	r3, #0
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d00c      	beq.n	80101f0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 80101d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	009b      	lsls	r3, r3, #2
 80101dc:	683a      	ldr	r2, [r7, #0]
 80101de:	4413      	add	r3, r2
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	69fb      	ldr	r3, [r7, #28]
 80101e4:	4413      	add	r3, r2
 80101e6:	4619      	mov	r1, r3
 80101e8:	68f8      	ldr	r0, [r7, #12]
 80101ea:	f7f7 fa6e 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 80101ee:	e019      	b.n	8010224 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 80101f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	3301      	adds	r3, #1
 80101f6:	687a      	ldr	r2, [r7, #4]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	dd0f      	ble.n	801021c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 80101fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	1c5a      	adds	r2, r3, #1
 8010202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010204:	601a      	str	r2, [r3, #0]
 8010206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	683a      	ldr	r2, [r7, #0]
 801020e:	4413      	add	r3, r2
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	4619      	mov	r1, r3
 8010214:	68f8      	ldr	r0, [r7, #12]
 8010216:	f7f7 fa58 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 801021a:	e003      	b.n	8010224 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 801021c:	4906      	ldr	r1, [pc, #24]	; (8010238 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 801021e:	68f8      	ldr	r0, [r7, #12]
 8010220:	f7f7 fa53 	bl	80076ca <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8010224:	f107 0314 	add.w	r3, r7, #20
 8010228:	4618      	mov	r0, r3
 801022a:	f7f7 fe06 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 801022e:	68f8      	ldr	r0, [r7, #12]
 8010230:	3720      	adds	r7, #32
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	08016ef8 	.word	0x08016ef8

0801023c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 801023c:	b5b0      	push	{r4, r5, r7, lr}
 801023e:	b08c      	sub	sp, #48	; 0x30
 8010240:	af02      	add	r7, sp, #8
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	607a      	str	r2, [r7, #4]
 8010248:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 801024a:	f107 031c 	add.w	r3, r7, #28
 801024e:	491a      	ldr	r1, [pc, #104]	; (80102b8 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8010250:	4618      	mov	r0, r3
 8010252:	f7f7 fa3a 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8010256:	f107 0014 	add.w	r0, r7, #20
 801025a:	f107 031c 	add.w	r3, r7, #28
 801025e:	9301      	str	r3, [sp, #4]
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	9300      	str	r3, [sp, #0]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	68ba      	ldr	r2, [r7, #8]
 8010268:	68f9      	ldr	r1, [r7, #12]
 801026a:	f7ff ff8f 	bl	801018c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801026e:	f107 0514 	add.w	r5, r7, #20
 8010272:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010276:	4911      	ldr	r1, [pc, #68]	; (80102bc <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8010278:	2010      	movs	r0, #16
 801027a:	f7f6 fb3d 	bl	80068f8 <_ZnwjPKci>
 801027e:	4604      	mov	r4, r0
 8010280:	4629      	mov	r1, r5
 8010282:	4620      	mov	r0, r4
 8010284:	f001 fe36 	bl	8011ef4 <_ZN10TestFilterC1ERK12SimpleString>
 8010288:	627c      	str	r4, [r7, #36]	; 0x24
 801028a:	f107 0314 	add.w	r3, r7, #20
 801028e:	4618      	mov	r0, r3
 8010290:	f7f7 fdd3 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8010294:	f107 031c 	add.w	r3, r7, #28
 8010298:	4618      	mov	r0, r3
 801029a:	f7f7 fdce 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102a2:	4619      	mov	r1, r3
 80102a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102a6:	f001 fe45 	bl	8011f34 <_ZN10TestFilter3addEPS_>
 80102aa:	4602      	mov	r2, r0
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	625a      	str	r2, [r3, #36]	; 0x24
}
 80102b0:	bf00      	nop
 80102b2:	3728      	adds	r7, #40	; 0x28
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bdb0      	pop	{r4, r5, r7, pc}
 80102b8:	08016f2c 	.word	0x08016f2c
 80102bc:	080178c0 	.word	0x080178c0

080102c0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 80102c0:	b5b0      	push	{r4, r5, r7, lr}
 80102c2:	b092      	sub	sp, #72	; 0x48
 80102c4:	af02      	add	r7, sp, #8
 80102c6:	60f8      	str	r0, [r7, #12]
 80102c8:	60b9      	str	r1, [r7, #8]
 80102ca:	607a      	str	r2, [r7, #4]
 80102cc:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80102ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80102d2:	494e      	ldr	r1, [pc, #312]	; (801040c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7f7 f9f8 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 80102da:	f107 0020 	add.w	r0, r7, #32
 80102de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80102e2:	9301      	str	r3, [sp, #4]
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	9300      	str	r3, [sp, #0]
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	68ba      	ldr	r2, [r7, #8]
 80102ec:	68f9      	ldr	r1, [r7, #12]
 80102ee:	f7ff ff4d 	bl	801018c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80102f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7f7 fd9f 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 80102fc:	f107 0310 	add.w	r3, r7, #16
 8010300:	4618      	mov	r0, r3
 8010302:	f7f8 fba1 	bl	8008a48 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8010306:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801030a:	4941      	ldr	r1, [pc, #260]	; (8010410 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 801030c:	4618      	mov	r0, r3
 801030e:	f7f7 f9dc 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8010312:	f107 0210 	add.w	r2, r7, #16
 8010316:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801031a:	f107 0320 	add.w	r3, r7, #32
 801031e:	4618      	mov	r0, r3
 8010320:	f7f7 fb3f 	bl	80079a2 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8010324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010328:	4618      	mov	r0, r3
 801032a:	f7f7 fd86 	bl	8007e3a <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 801032e:	f107 0310 	add.w	r3, r7, #16
 8010332:	4618      	mov	r0, r3
 8010334:	f7f8 fc2d 	bl	8008b92 <_ZNK22SimpleStringCollection4sizeEv>
 8010338:	4603      	mov	r3, r0
 801033a:	2b02      	cmp	r3, #2
 801033c:	bf14      	ite	ne
 801033e:	2301      	movne	r3, #1
 8010340:	2300      	moveq	r3, #0
 8010342:	b2db      	uxtb	r3, r3
 8010344:	2b00      	cmp	r3, #0
 8010346:	d001      	beq.n	801034c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8010348:	2400      	movs	r4, #0
 801034a:	e04f      	b.n	80103ec <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 801034c:	f107 0310 	add.w	r3, r7, #16
 8010350:	2100      	movs	r1, #0
 8010352:	4618      	mov	r0, r3
 8010354:	f7f8 fc2a 	bl	8008bac <_ZN22SimpleStringCollectionixEj>
 8010358:	4604      	mov	r4, r0
 801035a:	f107 0310 	add.w	r3, r7, #16
 801035e:	2100      	movs	r1, #0
 8010360:	4618      	mov	r0, r3
 8010362:	f7f8 fc23 	bl	8008bac <_ZN22SimpleStringCollectionixEj>
 8010366:	4603      	mov	r3, r0
 8010368:	4618      	mov	r0, r3
 801036a:	f7f7 fd45 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 801036e:	4603      	mov	r3, r0
 8010370:	3b01      	subs	r3, #1
 8010372:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8010376:	2200      	movs	r2, #0
 8010378:	4621      	mov	r1, r4
 801037a:	f7f7 fe67 	bl	800804c <_ZNK12SimpleString9subStringEjj>
 801037e:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8010382:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8010386:	4923      	ldr	r1, [pc, #140]	; (8010414 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8010388:	2010      	movs	r0, #16
 801038a:	f7f6 fab5 	bl	80068f8 <_ZnwjPKci>
 801038e:	4604      	mov	r4, r0
 8010390:	4629      	mov	r1, r5
 8010392:	4620      	mov	r0, r4
 8010394:	f001 fdae 	bl	8011ef4 <_ZN10TestFilterC1ERK12SimpleString>
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801039c:	4619      	mov	r1, r3
 801039e:	4620      	mov	r0, r4
 80103a0:	f001 fdc8 	bl	8011f34 <_ZN10TestFilter3addEPS_>
 80103a4:	4602      	mov	r2, r0
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	625a      	str	r2, [r3, #36]	; 0x24
 80103aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7f7 fd43 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 80103b4:	f107 0310 	add.w	r3, r7, #16
 80103b8:	2101      	movs	r1, #1
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7f8 fbf6 	bl	8008bac <_ZN22SimpleStringCollectionixEj>
 80103c0:	4605      	mov	r5, r0
 80103c2:	f240 121f 	movw	r2, #287	; 0x11f
 80103c6:	4913      	ldr	r1, [pc, #76]	; (8010414 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80103c8:	2010      	movs	r0, #16
 80103ca:	f7f6 fa95 	bl	80068f8 <_ZnwjPKci>
 80103ce:	4604      	mov	r4, r0
 80103d0:	4629      	mov	r1, r5
 80103d2:	4620      	mov	r0, r4
 80103d4:	f001 fd8e 	bl	8011ef4 <_ZN10TestFilterC1ERK12SimpleString>
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103dc:	4619      	mov	r1, r3
 80103de:	4620      	mov	r0, r4
 80103e0:	f001 fda8 	bl	8011f34 <_ZN10TestFilter3addEPS_>
 80103e4:	4602      	mov	r2, r0
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80103ea:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 80103ec:	f107 0310 	add.w	r3, r7, #16
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7f8 fb9d 	bl	8008b30 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80103f6:	f107 0320 	add.w	r3, r7, #32
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7f7 fd1d 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8010400:	4623      	mov	r3, r4
}
 8010402:	4618      	mov	r0, r3
 8010404:	3740      	adds	r7, #64	; 0x40
 8010406:	46bd      	mov	sp, r7
 8010408:	bdb0      	pop	{r4, r5, r7, pc}
 801040a:	bf00      	nop
 801040c:	08016f30 	.word	0x08016f30
 8010410:	080178e0 	.word	0x080178e0
 8010414:	080178c0 	.word	0x080178c0

08010418 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8010418:	b5b0      	push	{r4, r5, r7, lr}
 801041a:	b08c      	sub	sp, #48	; 0x30
 801041c:	af02      	add	r7, sp, #8
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	60b9      	str	r1, [r7, #8]
 8010422:	607a      	str	r2, [r7, #4]
 8010424:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8010426:	f107 031c 	add.w	r3, r7, #28
 801042a:	491c      	ldr	r1, [pc, #112]	; (801049c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 801042c:	4618      	mov	r0, r3
 801042e:	f7f7 f94c 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8010432:	f107 0014 	add.w	r0, r7, #20
 8010436:	f107 031c 	add.w	r3, r7, #28
 801043a:	9301      	str	r3, [sp, #4]
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	9300      	str	r3, [sp, #0]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	68ba      	ldr	r2, [r7, #8]
 8010444:	68f9      	ldr	r1, [r7, #12]
 8010446:	f7ff fea1 	bl	801018c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801044a:	f107 0514 	add.w	r5, r7, #20
 801044e:	f240 1225 	movw	r2, #293	; 0x125
 8010452:	4913      	ldr	r1, [pc, #76]	; (80104a0 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8010454:	2010      	movs	r0, #16
 8010456:	f7f6 fa4f 	bl	80068f8 <_ZnwjPKci>
 801045a:	4604      	mov	r4, r0
 801045c:	4629      	mov	r1, r5
 801045e:	4620      	mov	r0, r4
 8010460:	f001 fd48 	bl	8011ef4 <_ZN10TestFilterC1ERK12SimpleString>
 8010464:	627c      	str	r4, [r7, #36]	; 0x24
 8010466:	f107 0314 	add.w	r3, r7, #20
 801046a:	4618      	mov	r0, r3
 801046c:	f7f7 fce5 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8010470:	f107 031c 	add.w	r3, r7, #28
 8010474:	4618      	mov	r0, r3
 8010476:	f7f7 fce0 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 801047a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801047c:	f001 fd75 	bl	8011f6a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010484:	4619      	mov	r1, r3
 8010486:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010488:	f001 fd54 	bl	8011f34 <_ZN10TestFilter3addEPS_>
 801048c:	4602      	mov	r2, r0
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010492:	bf00      	nop
 8010494:	3728      	adds	r7, #40	; 0x28
 8010496:	46bd      	mov	sp, r7
 8010498:	bdb0      	pop	{r4, r5, r7, pc}
 801049a:	bf00      	nop
 801049c:	08016f34 	.word	0x08016f34
 80104a0:	080178c0 	.word	0x080178c0

080104a4 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 80104a4:	b5b0      	push	{r4, r5, r7, lr}
 80104a6:	b08c      	sub	sp, #48	; 0x30
 80104a8:	af02      	add	r7, sp, #8
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
 80104b0:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 80104b2:	f107 031c 	add.w	r3, r7, #28
 80104b6:	491c      	ldr	r1, [pc, #112]	; (8010528 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7f7 f906 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 80104be:	f107 0014 	add.w	r0, r7, #20
 80104c2:	f107 031c 	add.w	r3, r7, #28
 80104c6:	9301      	str	r3, [sp, #4]
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	9300      	str	r3, [sp, #0]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	68ba      	ldr	r2, [r7, #8]
 80104d0:	68f9      	ldr	r1, [r7, #12]
 80104d2:	f7ff fe5b 	bl	801018c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80104d6:	f107 0514 	add.w	r5, r7, #20
 80104da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80104de:	4913      	ldr	r1, [pc, #76]	; (801052c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 80104e0:	2010      	movs	r0, #16
 80104e2:	f7f6 fa09 	bl	80068f8 <_ZnwjPKci>
 80104e6:	4604      	mov	r4, r0
 80104e8:	4629      	mov	r1, r5
 80104ea:	4620      	mov	r0, r4
 80104ec:	f001 fd02 	bl	8011ef4 <_ZN10TestFilterC1ERK12SimpleString>
 80104f0:	627c      	str	r4, [r7, #36]	; 0x24
 80104f2:	f107 0314 	add.w	r3, r7, #20
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7f7 fc9f 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 80104fc:	f107 031c 	add.w	r3, r7, #28
 8010500:	4618      	mov	r0, r3
 8010502:	f7f7 fc9a 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8010506:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010508:	f001 fd3c 	bl	8011f84 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010510:	4619      	mov	r1, r3
 8010512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010514:	f001 fd0e 	bl	8011f34 <_ZN10TestFilter3addEPS_>
 8010518:	4602      	mov	r2, r0
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	625a      	str	r2, [r3, #36]	; 0x24
}
 801051e:	bf00      	nop
 8010520:	3728      	adds	r7, #40	; 0x28
 8010522:	46bd      	mov	sp, r7
 8010524:	bdb0      	pop	{r4, r5, r7, pc}
 8010526:	bf00      	nop
 8010528:	08016f38 	.word	0x08016f38
 801052c:	080178c0 	.word	0x080178c0

08010530 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8010530:	b5b0      	push	{r4, r5, r7, lr}
 8010532:	b08c      	sub	sp, #48	; 0x30
 8010534:	af02      	add	r7, sp, #8
 8010536:	60f8      	str	r0, [r7, #12]
 8010538:	60b9      	str	r1, [r7, #8]
 801053a:	607a      	str	r2, [r7, #4]
 801053c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 801053e:	f107 031c 	add.w	r3, r7, #28
 8010542:	491d      	ldr	r1, [pc, #116]	; (80105b8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8010544:	4618      	mov	r0, r3
 8010546:	f7f7 f8c0 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 801054a:	f107 0014 	add.w	r0, r7, #20
 801054e:	f107 031c 	add.w	r3, r7, #28
 8010552:	9301      	str	r3, [sp, #4]
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	9300      	str	r3, [sp, #0]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	68ba      	ldr	r2, [r7, #8]
 801055c:	68f9      	ldr	r1, [r7, #12]
 801055e:	f7ff fe15 	bl	801018c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010562:	f107 0514 	add.w	r5, r7, #20
 8010566:	f240 1233 	movw	r2, #307	; 0x133
 801056a:	4914      	ldr	r1, [pc, #80]	; (80105bc <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 801056c:	2010      	movs	r0, #16
 801056e:	f7f6 f9c3 	bl	80068f8 <_ZnwjPKci>
 8010572:	4604      	mov	r4, r0
 8010574:	4629      	mov	r1, r5
 8010576:	4620      	mov	r0, r4
 8010578:	f001 fcbc 	bl	8011ef4 <_ZN10TestFilterC1ERK12SimpleString>
 801057c:	627c      	str	r4, [r7, #36]	; 0x24
 801057e:	f107 0314 	add.w	r3, r7, #20
 8010582:	4618      	mov	r0, r3
 8010584:	f7f7 fc59 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8010588:	f107 031c 	add.w	r3, r7, #28
 801058c:	4618      	mov	r0, r3
 801058e:	f7f7 fc54 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8010592:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010594:	f001 fce9 	bl	8011f6a <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8010598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801059a:	f001 fcf3 	bl	8011f84 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a2:	4619      	mov	r1, r3
 80105a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80105a6:	f001 fcc5 	bl	8011f34 <_ZN10TestFilter3addEPS_>
 80105aa:	4602      	mov	r2, r0
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	625a      	str	r2, [r3, #36]	; 0x24
}
 80105b0:	bf00      	nop
 80105b2:	3728      	adds	r7, #40	; 0x28
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bdb0      	pop	{r4, r5, r7, pc}
 80105b8:	08016f3c 	.word	0x08016f3c
 80105bc:	080178c0 	.word	0x080178c0

080105c0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 80105c0:	b5b0      	push	{r4, r5, r7, lr}
 80105c2:	b08c      	sub	sp, #48	; 0x30
 80105c4:	af02      	add	r7, sp, #8
 80105c6:	60f8      	str	r0, [r7, #12]
 80105c8:	60b9      	str	r1, [r7, #8]
 80105ca:	607a      	str	r2, [r7, #4]
 80105cc:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 80105ce:	f107 031c 	add.w	r3, r7, #28
 80105d2:	491a      	ldr	r1, [pc, #104]	; (801063c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 80105d4:	4618      	mov	r0, r3
 80105d6:	f7f7 f878 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 80105da:	f107 0014 	add.w	r0, r7, #20
 80105de:	f107 031c 	add.w	r3, r7, #28
 80105e2:	9301      	str	r3, [sp, #4]
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	9300      	str	r3, [sp, #0]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	68ba      	ldr	r2, [r7, #8]
 80105ec:	68f9      	ldr	r1, [r7, #12]
 80105ee:	f7ff fdcd 	bl	801018c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80105f2:	f107 0514 	add.w	r5, r7, #20
 80105f6:	f240 123b 	movw	r2, #315	; 0x13b
 80105fa:	4911      	ldr	r1, [pc, #68]	; (8010640 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 80105fc:	2010      	movs	r0, #16
 80105fe:	f7f6 f97b 	bl	80068f8 <_ZnwjPKci>
 8010602:	4604      	mov	r4, r0
 8010604:	4629      	mov	r1, r5
 8010606:	4620      	mov	r0, r4
 8010608:	f001 fc74 	bl	8011ef4 <_ZN10TestFilterC1ERK12SimpleString>
 801060c:	627c      	str	r4, [r7, #36]	; 0x24
 801060e:	f107 0314 	add.w	r3, r7, #20
 8010612:	4618      	mov	r0, r3
 8010614:	f7f7 fc11 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8010618:	f107 031c 	add.w	r3, r7, #28
 801061c:	4618      	mov	r0, r3
 801061e:	f7f7 fc0c 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010626:	4619      	mov	r1, r3
 8010628:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801062a:	f001 fc83 	bl	8011f34 <_ZN10TestFilter3addEPS_>
 801062e:	4602      	mov	r2, r0
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010634:	bf00      	nop
 8010636:	3728      	adds	r7, #40	; 0x28
 8010638:	46bd      	mov	sp, r7
 801063a:	bdb0      	pop	{r4, r5, r7, pc}
 801063c:	08016f44 	.word	0x08016f44
 8010640:	080178c0 	.word	0x080178c0

08010644 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8010644:	b5b0      	push	{r4, r5, r7, lr}
 8010646:	b08c      	sub	sp, #48	; 0x30
 8010648:	af02      	add	r7, sp, #8
 801064a:	60f8      	str	r0, [r7, #12]
 801064c:	60b9      	str	r1, [r7, #8]
 801064e:	607a      	str	r2, [r7, #4]
 8010650:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8010652:	f107 031c 	add.w	r3, r7, #28
 8010656:	491c      	ldr	r1, [pc, #112]	; (80106c8 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8010658:	4618      	mov	r0, r3
 801065a:	f7f7 f836 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 801065e:	f107 0014 	add.w	r0, r7, #20
 8010662:	f107 031c 	add.w	r3, r7, #28
 8010666:	9301      	str	r3, [sp, #4]
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	9300      	str	r3, [sp, #0]
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	68ba      	ldr	r2, [r7, #8]
 8010670:	68f9      	ldr	r1, [r7, #12]
 8010672:	f7ff fd8b 	bl	801018c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010676:	f107 0514 	add.w	r5, r7, #20
 801067a:	f240 1241 	movw	r2, #321	; 0x141
 801067e:	4913      	ldr	r1, [pc, #76]	; (80106cc <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8010680:	2010      	movs	r0, #16
 8010682:	f7f6 f939 	bl	80068f8 <_ZnwjPKci>
 8010686:	4604      	mov	r4, r0
 8010688:	4629      	mov	r1, r5
 801068a:	4620      	mov	r0, r4
 801068c:	f001 fc32 	bl	8011ef4 <_ZN10TestFilterC1ERK12SimpleString>
 8010690:	627c      	str	r4, [r7, #36]	; 0x24
 8010692:	f107 0314 	add.w	r3, r7, #20
 8010696:	4618      	mov	r0, r3
 8010698:	f7f7 fbcf 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 801069c:	f107 031c 	add.w	r3, r7, #28
 80106a0:	4618      	mov	r0, r3
 80106a2:	f7f7 fbca 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 80106a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106a8:	f001 fc5f 	bl	8011f6a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106b0:	4619      	mov	r1, r3
 80106b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106b4:	f001 fc3e 	bl	8011f34 <_ZN10TestFilter3addEPS_>
 80106b8:	4602      	mov	r2, r0
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80106be:	bf00      	nop
 80106c0:	3728      	adds	r7, #40	; 0x28
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bdb0      	pop	{r4, r5, r7, pc}
 80106c6:	bf00      	nop
 80106c8:	08016f48 	.word	0x08016f48
 80106cc:	080178c0 	.word	0x080178c0

080106d0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 80106d0:	b5b0      	push	{r4, r5, r7, lr}
 80106d2:	b08c      	sub	sp, #48	; 0x30
 80106d4:	af02      	add	r7, sp, #8
 80106d6:	60f8      	str	r0, [r7, #12]
 80106d8:	60b9      	str	r1, [r7, #8]
 80106da:	607a      	str	r2, [r7, #4]
 80106dc:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 80106de:	f107 031c 	add.w	r3, r7, #28
 80106e2:	491c      	ldr	r1, [pc, #112]	; (8010754 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7f6 fff0 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 80106ea:	f107 0014 	add.w	r0, r7, #20
 80106ee:	f107 031c 	add.w	r3, r7, #28
 80106f2:	9301      	str	r3, [sp, #4]
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	9300      	str	r3, [sp, #0]
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	68ba      	ldr	r2, [r7, #8]
 80106fc:	68f9      	ldr	r1, [r7, #12]
 80106fe:	f7ff fd45 	bl	801018c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010702:	f107 0514 	add.w	r5, r7, #20
 8010706:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801070a:	4913      	ldr	r1, [pc, #76]	; (8010758 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 801070c:	2010      	movs	r0, #16
 801070e:	f7f6 f8f3 	bl	80068f8 <_ZnwjPKci>
 8010712:	4604      	mov	r4, r0
 8010714:	4629      	mov	r1, r5
 8010716:	4620      	mov	r0, r4
 8010718:	f001 fbec 	bl	8011ef4 <_ZN10TestFilterC1ERK12SimpleString>
 801071c:	627c      	str	r4, [r7, #36]	; 0x24
 801071e:	f107 0314 	add.w	r3, r7, #20
 8010722:	4618      	mov	r0, r3
 8010724:	f7f7 fb89 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8010728:	f107 031c 	add.w	r3, r7, #28
 801072c:	4618      	mov	r0, r3
 801072e:	f7f7 fb84 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8010732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010734:	f001 fc26 	bl	8011f84 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801073c:	4619      	mov	r1, r3
 801073e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010740:	f001 fbf8 	bl	8011f34 <_ZN10TestFilter3addEPS_>
 8010744:	4602      	mov	r2, r0
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	629a      	str	r2, [r3, #40]	; 0x28
}
 801074a:	bf00      	nop
 801074c:	3728      	adds	r7, #40	; 0x28
 801074e:	46bd      	mov	sp, r7
 8010750:	bdb0      	pop	{r4, r5, r7, pc}
 8010752:	bf00      	nop
 8010754:	08016f4c 	.word	0x08016f4c
 8010758:	080178c0 	.word	0x080178c0

0801075c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 801075c:	b5b0      	push	{r4, r5, r7, lr}
 801075e:	b08c      	sub	sp, #48	; 0x30
 8010760:	af02      	add	r7, sp, #8
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	607a      	str	r2, [r7, #4]
 8010768:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 801076a:	f107 031c 	add.w	r3, r7, #28
 801076e:	491d      	ldr	r1, [pc, #116]	; (80107e4 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8010770:	4618      	mov	r0, r3
 8010772:	f7f6 ffaa 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8010776:	f107 0014 	add.w	r0, r7, #20
 801077a:	f107 031c 	add.w	r3, r7, #28
 801077e:	9301      	str	r3, [sp, #4]
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	68ba      	ldr	r2, [r7, #8]
 8010788:	68f9      	ldr	r1, [r7, #12]
 801078a:	f7ff fcff 	bl	801018c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801078e:	f107 0514 	add.w	r5, r7, #20
 8010792:	f240 124f 	movw	r2, #335	; 0x14f
 8010796:	4914      	ldr	r1, [pc, #80]	; (80107e8 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8010798:	2010      	movs	r0, #16
 801079a:	f7f6 f8ad 	bl	80068f8 <_ZnwjPKci>
 801079e:	4604      	mov	r4, r0
 80107a0:	4629      	mov	r1, r5
 80107a2:	4620      	mov	r0, r4
 80107a4:	f001 fba6 	bl	8011ef4 <_ZN10TestFilterC1ERK12SimpleString>
 80107a8:	627c      	str	r4, [r7, #36]	; 0x24
 80107aa:	f107 0314 	add.w	r3, r7, #20
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7f7 fb43 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 80107b4:	f107 031c 	add.w	r3, r7, #28
 80107b8:	4618      	mov	r0, r3
 80107ba:	f7f7 fb3e 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80107be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107c0:	f001 fbe0 	bl	8011f84 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 80107c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107c6:	f001 fbd0 	bl	8011f6a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ce:	4619      	mov	r1, r3
 80107d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107d2:	f001 fbaf 	bl	8011f34 <_ZN10TestFilter3addEPS_>
 80107d6:	4602      	mov	r2, r0
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80107dc:	bf00      	nop
 80107de:	3728      	adds	r7, #40	; 0x28
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bdb0      	pop	{r4, r5, r7, pc}
 80107e4:	08016f50 	.word	0x08016f50
 80107e8:	080178c0 	.word	0x080178c0

080107ec <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 80107ec:	b5b0      	push	{r4, r5, r7, lr}
 80107ee:	b092      	sub	sp, #72	; 0x48
 80107f0:	af02      	add	r7, sp, #8
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	607a      	str	r2, [r7, #4]
 80107f8:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80107fa:	f107 0320 	add.w	r3, r7, #32
 80107fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010800:	4618      	mov	r0, r3
 8010802:	f7f6 ff62 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8010806:	f107 0018 	add.w	r0, r7, #24
 801080a:	f107 0320 	add.w	r3, r7, #32
 801080e:	9301      	str	r3, [sp, #4]
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	9300      	str	r3, [sp, #0]
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	68ba      	ldr	r2, [r7, #8]
 8010818:	68f9      	ldr	r1, [r7, #12]
 801081a:	f7ff fcb7 	bl	801018c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801081e:	f107 0320 	add.w	r3, r7, #32
 8010822:	4618      	mov	r0, r3
 8010824:	f7f7 fb09 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8010828:	f107 0010 	add.w	r0, r7, #16
 801082c:	f107 0118 	add.w	r1, r7, #24
 8010830:	2329      	movs	r3, #41	; 0x29
 8010832:	222c      	movs	r2, #44	; 0x2c
 8010834:	f7f7 fcb2 	bl	800819c <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8010838:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801083c:	f107 0110 	add.w	r1, r7, #16
 8010840:	2202      	movs	r2, #2
 8010842:	4618      	mov	r0, r3
 8010844:	f7f7 fc4c 	bl	80080e0 <_ZNK12SimpleString9subStringEj>
 8010848:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801084c:	f107 0310 	add.w	r3, r7, #16
 8010850:	4611      	mov	r1, r2
 8010852:	4618      	mov	r0, r3
 8010854:	f7f6 ffa5 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
 8010858:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801085c:	4618      	mov	r0, r3
 801085e:	f7f7 faec 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8010862:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8010866:	492a      	ldr	r1, [pc, #168]	; (8010910 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8010868:	2010      	movs	r0, #16
 801086a:	f7f6 f845 	bl	80068f8 <_ZnwjPKci>
 801086e:	4604      	mov	r4, r0
 8010870:	f107 0310 	add.w	r3, r7, #16
 8010874:	4619      	mov	r1, r3
 8010876:	4620      	mov	r0, r4
 8010878:	f001 fb3c 	bl	8011ef4 <_ZN10TestFilterC1ERK12SimpleString>
 801087c:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 801087e:	f107 0318 	add.w	r3, r7, #24
 8010882:	2100      	movs	r1, #0
 8010884:	4618      	mov	r0, r3
 8010886:	f7f7 fc3c 	bl	8008102 <_ZNK12SimpleString2atEj>
 801088a:	4603      	mov	r3, r0
 801088c:	461a      	mov	r2, r3
 801088e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010892:	f107 0118 	add.w	r1, r7, #24
 8010896:	232c      	movs	r3, #44	; 0x2c
 8010898:	f7f7 fc80 	bl	800819c <_ZNK12SimpleString17subStringFromTillEcc>
 801089c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80108a0:	f240 125b 	movw	r2, #347	; 0x15b
 80108a4:	491a      	ldr	r1, [pc, #104]	; (8010910 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 80108a6:	2010      	movs	r0, #16
 80108a8:	f7f6 f826 	bl	80068f8 <_ZnwjPKci>
 80108ac:	4604      	mov	r4, r0
 80108ae:	4629      	mov	r1, r5
 80108b0:	4620      	mov	r0, r4
 80108b2:	f001 fb1f 	bl	8011ef4 <_ZN10TestFilterC1ERK12SimpleString>
 80108b6:	63bc      	str	r4, [r7, #56]	; 0x38
 80108b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80108bc:	4618      	mov	r0, r3
 80108be:	f7f7 fabc 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 80108c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80108c4:	f001 fb51 	bl	8011f6a <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 80108c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80108ca:	f001 fb4e 	bl	8011f6a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d2:	4619      	mov	r1, r3
 80108d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80108d6:	f001 fb2d 	bl	8011f34 <_ZN10TestFilter3addEPS_>
 80108da:	4602      	mov	r2, r0
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108e4:	4619      	mov	r1, r3
 80108e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80108e8:	f001 fb24 	bl	8011f34 <_ZN10TestFilter3addEPS_>
 80108ec:	4602      	mov	r2, r0
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80108f2:	f107 0310 	add.w	r3, r7, #16
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7f7 fa9f 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80108fc:	f107 0318 	add.w	r3, r7, #24
 8010900:	4618      	mov	r0, r3
 8010902:	f7f7 fa9a 	bl	8007e3a <_ZN12SimpleStringD1Ev>
}
 8010906:	bf00      	nop
 8010908:	3740      	adds	r7, #64	; 0x40
 801090a:	46bd      	mov	sp, r7
 801090c:	bdb0      	pop	{r4, r5, r7, pc}
 801090e:	bf00      	nop
 8010910:	080178c0 	.word	0x080178c0

08010914 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8010914:	b590      	push	{r4, r7, lr}
 8010916:	b08b      	sub	sp, #44	; 0x2c
 8010918:	af02      	add	r7, sp, #8
 801091a:	60f8      	str	r0, [r7, #12]
 801091c:	60b9      	str	r1, [r7, #8]
 801091e:	607a      	str	r2, [r7, #4]
 8010920:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8010922:	f107 0318 	add.w	r3, r7, #24
 8010926:	491b      	ldr	r1, [pc, #108]	; (8010994 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8010928:	4618      	mov	r0, r3
 801092a:	f7f6 fece 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 801092e:	f107 0010 	add.w	r0, r7, #16
 8010932:	f107 0318 	add.w	r3, r7, #24
 8010936:	9301      	str	r3, [sp, #4]
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	9300      	str	r3, [sp, #0]
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	68ba      	ldr	r2, [r7, #8]
 8010940:	68f9      	ldr	r1, [r7, #12]
 8010942:	f7ff fc23 	bl	801018c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010946:	f107 0318 	add.w	r3, r7, #24
 801094a:	4618      	mov	r0, r3
 801094c:	f7f7 fa75 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8010950:	f107 0310 	add.w	r3, r7, #16
 8010954:	4618      	mov	r0, r3
 8010956:	f7f7 fa4f 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 801095a:	4603      	mov	r3, r0
 801095c:	2b00      	cmp	r3, #0
 801095e:	bf0c      	ite	eq
 8010960:	2301      	moveq	r3, #1
 8010962:	2300      	movne	r3, #0
 8010964:	b2db      	uxtb	r3, r3
 8010966:	2b00      	cmp	r3, #0
 8010968:	d001      	beq.n	801096e <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 801096a:	2400      	movs	r4, #0
 801096c:	e008      	b.n	8010980 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	3330      	adds	r3, #48	; 0x30
 8010972:	f107 0210 	add.w	r2, r7, #16
 8010976:	4611      	mov	r1, r2
 8010978:	4618      	mov	r0, r3
 801097a:	f7f6 ff12 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 801097e:	2401      	movs	r4, #1
 8010980:	f107 0310 	add.w	r3, r7, #16
 8010984:	4618      	mov	r0, r3
 8010986:	f7f7 fa58 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 801098a:	2c01      	cmp	r4, #1
}
 801098c:	3724      	adds	r7, #36	; 0x24
 801098e:	46bd      	mov	sp, r7
 8010990:	bd90      	pop	{r4, r7, pc}
 8010992:	bf00      	nop
 8010994:	08016f78 	.word	0x08016f78

08010998 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8010998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801099a:	b093      	sub	sp, #76	; 0x4c
 801099c:	af02      	add	r7, sp, #8
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	607a      	str	r2, [r7, #4]
 80109a4:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80109a6:	f107 0318 	add.w	r3, r7, #24
 80109aa:	4953      	ldr	r1, [pc, #332]	; (8010af8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7f6 fe8c 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 80109b2:	f107 0010 	add.w	r0, r7, #16
 80109b6:	f107 0318 	add.w	r3, r7, #24
 80109ba:	9301      	str	r3, [sp, #4]
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	9300      	str	r3, [sp, #0]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	68ba      	ldr	r2, [r7, #8]
 80109c4:	68f9      	ldr	r1, [r7, #12]
 80109c6:	f7ff fbe1 	bl	801018c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80109ca:	f107 0318 	add.w	r3, r7, #24
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7f7 fa33 	bl	8007e3a <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 80109d4:	f107 0310 	add.w	r3, r7, #16
 80109d8:	4618      	mov	r0, r3
 80109da:	f7f7 fa0d 	bl	8007df8 <_ZNK12SimpleString4sizeEv>
 80109de:	4603      	mov	r3, r0
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	bf0c      	ite	eq
 80109e4:	2301      	moveq	r3, #1
 80109e6:	2300      	movne	r3, #0
 80109e8:	b2db      	uxtb	r3, r3
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d001      	beq.n	80109f2 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 80109ee:	2400      	movs	r4, #0
 80109f0:	e078      	b.n	8010ae4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 80109f2:	2500      	movs	r5, #0
 80109f4:	f107 0320 	add.w	r3, r7, #32
 80109f8:	4940      	ldr	r1, [pc, #256]	; (8010afc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7f6 fe65 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8010a00:	2601      	movs	r6, #1
 8010a02:	f107 0220 	add.w	r2, r7, #32
 8010a06:	f107 0310 	add.w	r3, r7, #16
 8010a0a:	4611      	mov	r1, r2
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7f7 fa20 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 8010a12:	4603      	mov	r3, r0
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d111      	bne.n	8010a3c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8010a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a1c:	4938      	ldr	r1, [pc, #224]	; (8010b00 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f7f6 fe53 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8010a24:	2501      	movs	r5, #1
 8010a26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a2a:	f107 0310 	add.w	r3, r7, #16
 8010a2e:	4611      	mov	r1, r2
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7f7 fa0e 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d001      	beq.n	8010a40 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8010a3c:	2401      	movs	r4, #1
 8010a3e:	e000      	b.n	8010a42 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8010a40:	2400      	movs	r4, #0
 8010a42:	2d00      	cmp	r5, #0
 8010a44:	d004      	beq.n	8010a50 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8010a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7f7 f9f5 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8010a50:	2e00      	cmp	r6, #0
 8010a52:	d004      	beq.n	8010a5e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8010a54:	f107 0320 	add.w	r3, r7, #32
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f7f7 f9ee 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8010a5e:	2c00      	cmp	r4, #0
 8010a60:	d005      	beq.n	8010a6e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	2200      	movs	r2, #0
 8010a66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8010a6a:	2401      	movs	r4, #1
 8010a6c:	e03a      	b.n	8010ae4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8010a6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010a72:	4924      	ldr	r1, [pc, #144]	; (8010b04 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8010a74:	4618      	mov	r0, r3
 8010a76:	f7f6 fe28 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8010a7a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010a7e:	f107 0310 	add.w	r3, r7, #16
 8010a82:	4611      	mov	r1, r2
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7f7 f9e4 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	461c      	mov	r4, r3
 8010a8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7f7 f9d1 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8010a98:	2c00      	cmp	r4, #0
 8010a9a:	d005      	beq.n	8010aa8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	2201      	movs	r2, #1
 8010aa0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8010aa4:	2401      	movs	r4, #1
 8010aa6:	e01d      	b.n	8010ae4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8010aa8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010aac:	4916      	ldr	r1, [pc, #88]	; (8010b08 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7f6 fe0b 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8010ab4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010ab8:	f107 0310 	add.w	r3, r7, #16
 8010abc:	4611      	mov	r1, r2
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7f7 f9c7 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	461c      	mov	r4, r3
 8010ac8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7f7 f9b4 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8010ad2:	2c00      	cmp	r4, #0
 8010ad4:	d005      	beq.n	8010ae2 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2202      	movs	r2, #2
 8010ada:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8010ade:	2401      	movs	r4, #1
 8010ae0:	e000      	b.n	8010ae4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8010ae2:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8010ae4:	f107 0310 	add.w	r3, r7, #16
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7f7 f9a6 	bl	8007e3a <_ZN12SimpleStringD1Ev>
 8010aee:	4623      	mov	r3, r4
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	3744      	adds	r7, #68	; 0x44
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010af8:	08016f74 	.word	0x08016f74
 8010afc:	080178e4 	.word	0x080178e4
 8010b00:	080178ec 	.word	0x080178ec
 8010b04:	080178f4 	.word	0x080178f4
 8010b08:	080178fc 	.word	0x080178fc

08010b0c <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b083      	sub	sp, #12
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	bf0c      	ite	eq
 8010b1e:	2301      	moveq	r3, #1
 8010b20:	2300      	movne	r3, #0
 8010b22:	b2db      	uxtb	r3, r3
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	370c      	adds	r7, #12
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2e:	4770      	bx	lr

08010b30 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8010b30:	b480      	push	{r7}
 8010b32:	b083      	sub	sp, #12
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010b3e:	2b02      	cmp	r3, #2
 8010b40:	bf0c      	ite	eq
 8010b42:	2301      	moveq	r3, #1
 8010b44:	2300      	movne	r3, #0
 8010b46:	b2db      	uxtb	r3, r3
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	370c      	adds	r7, #12
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr

08010b54 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8010b54:	b480      	push	{r7}
 8010b56:	b083      	sub	sp, #12
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
    return packageName_;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	3330      	adds	r3, #48	; 0x30
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	370c      	adds	r7, #12
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr

08010b6c <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8010b6c:	b480      	push	{r7}
 8010b6e:	b083      	sub	sp, #12
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2200      	movs	r2, #0
 8010b78:	601a      	str	r2, [r3, #0]
    {}
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	370c      	adds	r7, #12
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr

08010b88 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8010b88:	b480      	push	{r7}
 8010b8a:	b083      	sub	sp, #12
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b96:	2200      	movs	r2, #0
 8010b98:	601a      	str	r2, [r3, #0]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ba0:	3304      	adds	r3, #4
 8010ba2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8010ba6:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2200      	movs	r2, #0
 8010bac:	701a      	strb	r2, [r3, #0]
}
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	370c      	adds	r7, #12
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bba:	4770      	bx	lr

08010bbc <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	b083      	sub	sp, #12
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bca:	2200      	movs	r2, #0
 8010bcc:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	701a      	strb	r2, [r3, #0]
}
 8010bd4:	bf00      	nop
 8010bd6:	370c      	adds	r7, #12
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bde:	4770      	bx	lr

08010be0 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8010be0:	b40e      	push	{r1, r2, r3}
 8010be2:	b590      	push	{r4, r7, lr}
 8010be4:	b086      	sub	sp, #24
 8010be6:	af00      	add	r7, sp, #0
 8010be8:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bf0:	3304      	adds	r3, #4
 8010bf2:	681a      	ldr	r2, [r3, #0]
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	1ad3      	subs	r3, r2, r3
 8010bfe:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d032      	beq.n	8010c6c <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8010c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010c0a:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8010c0c:	4b1b      	ldr	r3, [pc, #108]	; (8010c7c <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8010c0e:	681c      	ldr	r4, [r3, #0]
 8010c10:	687a      	ldr	r2, [r7, #4]
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	18d0      	adds	r0, r2, r3
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	1c59      	adds	r1, r3, #1
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c24:	47a0      	blx	r4
 8010c26:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	dd09      	ble.n	8010c42 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	693b      	ldr	r3, [r7, #16]
 8010c38:	441a      	add	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c40:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c48:	681a      	ldr	r2, [r3, #0]
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c50:	3304      	adds	r3, #4
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	429a      	cmp	r2, r3
 8010c56:	d90a      	bls.n	8010c6e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c5e:	3304      	adds	r3, #4
 8010c60:	681a      	ldr	r2, [r3, #0]
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c68:	601a      	str	r2, [r3, #0]
 8010c6a:	e000      	b.n	8010c6e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8010c6c:	bf00      	nop
    va_end(arguments);
}
 8010c6e:	3718      	adds	r7, #24
 8010c70:	46bd      	mov	sp, r7
 8010c72:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8010c76:	b003      	add	sp, #12
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop
 8010c7c:	200000ac 	.word	0x200000ac

08010c80 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b08c      	sub	sp, #48	; 0x30
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	60f8      	str	r0, [r7, #12]
 8010c88:	60b9      	str	r1, [r7, #8]
 8010c8a:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8010c90:	2310      	movs	r3, #16
 8010c92:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8010c94:	2300      	movs	r3, #0
 8010c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8010c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d273      	bcs.n	8010d88 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8010ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ca2:	493b      	ldr	r1, [pc, #236]	; (8010d90 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8010ca4:	68f8      	ldr	r0, [r7, #12]
 8010ca6:	f7ff ff9b 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8010caa:	687a      	ldr	r2, [r7, #4]
 8010cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cae:	1ad3      	subs	r3, r2, r3
 8010cb0:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8010cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb4:	2b10      	cmp	r3, #16
 8010cb6:	d901      	bls.n	8010cbc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8010cb8:	2310      	movs	r3, #16
 8010cba:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8010cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbe:	f1c3 0310 	rsb	r3, r3, #16
 8010cc2:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d215      	bcs.n	8010cfc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8010cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd4:	4413      	add	r3, r2
 8010cd6:	69fa      	ldr	r2, [r7, #28]
 8010cd8:	4413      	add	r3, r2
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	461a      	mov	r2, r3
 8010cde:	492d      	ldr	r1, [pc, #180]	; (8010d94 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8010ce0:	68f8      	ldr	r0, [r7, #12]
 8010ce2:	f7ff ff7d 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8010ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce8:	2b07      	cmp	r3, #7
 8010cea:	d103      	bne.n	8010cf4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8010cec:	492a      	ldr	r1, [pc, #168]	; (8010d98 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8010cee:	68f8      	ldr	r0, [r7, #12]
 8010cf0:	f7ff ff76 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8010cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cfa:	e7e5      	b.n	8010cc8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d207      	bcs.n	8010d18 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8010d08:	4924      	ldr	r1, [pc, #144]	; (8010d9c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8010d0a:	68f8      	ldr	r0, [r7, #12]
 8010d0c:	f7ff ff68 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8010d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d12:	3301      	adds	r3, #1
 8010d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d16:	e7f3      	b.n	8010d00 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	2b08      	cmp	r3, #8
 8010d1c:	d903      	bls.n	8010d26 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8010d1e:	491e      	ldr	r1, [pc, #120]	; (8010d98 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8010d20:	68f8      	ldr	r0, [r7, #12]
 8010d22:	f7ff ff5d 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8010d26:	491e      	ldr	r1, [pc, #120]	; (8010da0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8010d28:	68f8      	ldr	r0, [r7, #12]
 8010d2a:	f7ff ff59 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8010d2e:	2300      	movs	r3, #0
 8010d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d36:	429a      	cmp	r2, r3
 8010d38:	d21d      	bcs.n	8010d76 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8010d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3e:	4413      	add	r3, r2
 8010d40:	69fa      	ldr	r2, [r7, #28]
 8010d42:	4413      	add	r3, r2
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8010d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010d4e:	2b1f      	cmp	r3, #31
 8010d50:	d903      	bls.n	8010d5a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8010d52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010d56:	2b7e      	cmp	r3, #126	; 0x7e
 8010d58:	d902      	bls.n	8010d60 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8010d5a:	232e      	movs	r3, #46	; 0x2e
 8010d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8010d60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010d64:	461a      	mov	r2, r3
 8010d66:	490f      	ldr	r1, [pc, #60]	; (8010da4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8010d68:	68f8      	ldr	r0, [r7, #12]
 8010d6a:	f7ff ff39 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8010d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d70:	3301      	adds	r3, #1
 8010d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d74:	e7dd      	b.n	8010d32 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8010d76:	490c      	ldr	r1, [pc, #48]	; (8010da8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8010d78:	68f8      	ldr	r0, [r7, #12]
 8010d7a:	f7ff ff31 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8010d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d82:	4413      	add	r3, r2
 8010d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 8010d86:	e787      	b.n	8010c98 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8010d88:	bf00      	nop
 8010d8a:	3730      	adds	r7, #48	; 0x30
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}
 8010d90:	08017914 	.word	0x08017914
 8010d94:	08017920 	.word	0x08017920
 8010d98:	08017928 	.word	0x08017928
 8010d9c:	0801792c 	.word	0x0801792c
 8010da0:	08017930 	.word	0x08017930
 8010da4:	08017934 	.word	0x08017934
 8010da8:	08017938 	.word	0x08017938

08010dac <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8010dac:	b480      	push	{r7}
 8010dae:	b083      	sub	sp, #12
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
    return buffer_;
 8010db4:	687b      	ldr	r3, [r7, #4]
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	370c      	adds	r7, #12
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc0:	4770      	bx	lr

08010dc2 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8010dc2:	b480      	push	{r7}
 8010dc4:	b083      	sub	sp, #12
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	6078      	str	r0, [r7, #4]
 8010dca:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010dd2:	3304      	adds	r3, #4
 8010dd4:	683a      	ldr	r2, [r7, #0]
 8010dd6:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010dde:	3304      	adds	r3, #4
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010de6:	d306      	bcc.n	8010df6 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010dee:	3304      	adds	r3, #4
 8010df0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8010df4:	601a      	str	r2, [r3, #0]
}
 8010df6:	bf00      	nop
 8010df8:	370c      	adds	r7, #12
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e00:	4770      	bx	lr

08010e02 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8010e02:	b480      	push	{r7}
 8010e04:	b083      	sub	sp, #12
 8010e06:	af00      	add	r7, sp, #0
 8010e08:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e10:	3304      	adds	r3, #4
 8010e12:	f640 72ff 	movw	r2, #4095	; 0xfff
 8010e16:	601a      	str	r2, [r3, #0]
}
 8010e18:	bf00      	nop
 8010e1a:	370c      	adds	r7, #12
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e22:	4770      	bx	lr

08010e24 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8010e24:	b480      	push	{r7}
 8010e26:	b083      	sub	sp, #12
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e32:	681a      	ldr	r2, [r3, #0]
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e3a:	3304      	adds	r3, #4
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	bf2c      	ite	cs
 8010e42:	2301      	movcs	r3, #1
 8010e44:	2300      	movcc	r3, #0
 8010e46:	b2db      	uxtb	r3, r3
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	370c      	adds	r7, #12
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr

08010e54 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	601a      	str	r2, [r3, #0]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2200      	movs	r2, #0
 8010e66:	711a      	strb	r2, [r3, #4]
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	3308      	adds	r3, #8
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7ff fe8b 	bl	8010b88 <_ZN18SimpleStringBufferC1Ev>
{
}
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	4618      	mov	r0, r3
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8010e7c:	b5b0      	push	{r4, r5, r7, lr}
 8010e7e:	b086      	sub	sp, #24
 8010e80:	af02      	add	r7, sp, #8
 8010e82:	60f8      	str	r0, [r7, #12]
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	607a      	str	r2, [r7, #4]
 8010e88:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	f103 0408 	add.w	r4, r3, #8
 8010e90:	687d      	ldr	r5, [r7, #4]
 8010e92:	6a3b      	ldr	r3, [r7, #32]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	3314      	adds	r3, #20
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	6a38      	ldr	r0, [r7, #32]
 8010e9c:	4798      	blx	r3
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	9301      	str	r3, [sp, #4]
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	9300      	str	r3, [sp, #0]
 8010ea6:	462b      	mov	r3, r5
 8010ea8:	68ba      	ldr	r2, [r7, #8]
 8010eaa:	4904      	ldr	r1, [pc, #16]	; (8010ebc <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8010eac:	4620      	mov	r0, r4
 8010eae:	f7ff fe97 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8010eb2:	bf00      	nop
 8010eb4:	3710      	adds	r7, #16
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8010eba:	bf00      	nop
 8010ebc:	0801793c 	.word	0x0801793c

08010ec0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8010ec0:	b5b0      	push	{r4, r5, r7, lr}
 8010ec2:	b086      	sub	sp, #24
 8010ec4:	af02      	add	r7, sp, #8
 8010ec6:	60f8      	str	r0, [r7, #12]
 8010ec8:	60b9      	str	r1, [r7, #8]
 8010eca:	607a      	str	r2, [r7, #4]
 8010ecc:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	f103 0408 	add.w	r4, r3, #8
 8010ed4:	687d      	ldr	r5, [r7, #4]
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	3318      	adds	r3, #24
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	6838      	ldr	r0, [r7, #0]
 8010ee0:	4798      	blx	r3
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	9300      	str	r3, [sp, #0]
 8010ee6:	462b      	mov	r3, r5
 8010ee8:	68ba      	ldr	r2, [r7, #8]
 8010eea:	4904      	ldr	r1, [pc, #16]	; (8010efc <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8010eec:	4620      	mov	r0, r4
 8010eee:	f7ff fe77 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8010ef2:	bf00      	nop
 8010ef4:	3710      	adds	r7, #16
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8010efa:	bf00      	nop
 8010efc:	08017974 	.word	0x08017974

08010f00 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	3308      	adds	r3, #8
 8010f0c:	4903      	ldr	r1, [pc, #12]	; (8010f1c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7ff fe66 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8010f14:	bf00      	nop
 8010f16:	3708      	adds	r7, #8
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	080179a4 	.word	0x080179a4

08010f20 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b084      	sub	sp, #16
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2200      	movs	r2, #0
 8010f32:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8010f34:	2367      	movs	r3, #103	; 0x67
 8010f36:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f203 1311 	addw	r3, r3, #273	; 0x111
 8010f3e:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f103 0208 	add.w	r2, r3, #8
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	4610      	mov	r0, r2
 8010f50:	f7ff ff37 	bl	8010dc2 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8010f54:	bf00      	nop
 8010f56:	3710      	adds	r7, #16
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}

08010f5c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8010f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f5e:	b089      	sub	sp, #36	; 0x24
 8010f60:	af04      	add	r7, sp, #16
 8010f62:	60f8      	str	r0, [r7, #12]
 8010f64:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d102      	bne.n	8010f74 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8010f6e:	68f8      	ldr	r0, [r7, #12]
 8010f70:	f000 f882 	bl	8011078 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	1c5a      	adds	r2, r3, #1
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	f103 0508 	add.w	r5, r3, #8
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8010f96:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	695a      	ldr	r2, [r3, #20]
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	695b      	ldr	r3, [r3, #20]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	3314      	adds	r3, #20
 8010fa4:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8010fa6:	4610      	mov	r0, r2
 8010fa8:	4798      	blx	r3
 8010faa:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8010fb0:	9303      	str	r3, [sp, #12]
 8010fb2:	9202      	str	r2, [sp, #8]
 8010fb4:	683a      	ldr	r2, [r7, #0]
 8010fb6:	9201      	str	r2, [sp, #4]
 8010fb8:	9400      	str	r4, [sp, #0]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	4632      	mov	r2, r6
 8010fbe:	4915      	ldr	r1, [pc, #84]	; (8011014 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8010fc0:	4628      	mov	r0, r5
 8010fc2:	f7ff fe0d 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	f103 0008 	add.w	r0, r3, #8
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	6899      	ldr	r1, [r3, #8]
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	f7ff fe53 	bl	8010c80 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	695a      	ldr	r2, [r3, #20]
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	695b      	ldr	r3, [r3, #20]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	3314      	adds	r3, #20
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	4610      	mov	r0, r2
 8010fea:	4798      	blx	r3
 8010fec:	4603      	mov	r3, r0
 8010fee:	490a      	ldr	r1, [pc, #40]	; (8011018 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f7f6 f9a7 	bl	8007344 <_ZN12SimpleString6StrCmpEPKcS1_>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	bf0c      	ite	eq
 8010ffc:	2301      	moveq	r3, #1
 8010ffe:	2300      	movne	r3, #0
 8011000:	b2db      	uxtb	r3, r3
 8011002:	2b00      	cmp	r3, #0
 8011004:	d002      	beq.n	801100c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	2201      	movs	r2, #1
 801100a:	711a      	strb	r2, [r3, #4]
}
 801100c:	bf00      	nop
 801100e:	3714      	adds	r7, #20
 8011010:	46bd      	mov	sp, r7
 8011012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011014:	080179c4 	.word	0x080179c4
 8011018:	08017a24 	.word	0x08017a24

0801101c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b084      	sub	sp, #16
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d103      	bne.n	8011034 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f7ff ff67 	bl	8010f00 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8011032:	e01e      	b.n	8011072 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	3308      	adds	r3, #8
 8011038:	4618      	mov	r0, r3
 801103a:	f7ff fef3 	bl	8010e24 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 801103e:	4603      	mov	r3, r0
 8011040:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	3308      	adds	r3, #8
 8011046:	4618      	mov	r0, r3
 8011048:	f7ff fedb 	bl	8010e02 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 801104c:	7bfb      	ldrb	r3, [r7, #15]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d002      	beq.n	8011058 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f000 f820 	bl	8011098 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	4619      	mov	r1, r3
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 f82a 	bl	80110b8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	791b      	ldrb	r3, [r3, #4]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d002      	beq.n	8011072 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f000 f839 	bl	80110e4 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8011072:	3710      	adds	r7, #16
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	3308      	adds	r3, #8
 8011084:	4903      	ldr	r1, [pc, #12]	; (8011094 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8011086:	4618      	mov	r0, r3
 8011088:	f7ff fdaa 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801108c:	bf00      	nop
 801108e:	3708      	adds	r7, #8
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	08017a2c 	.word	0x08017a2c

08011098 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b082      	sub	sp, #8
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	3308      	adds	r3, #8
 80110a4:	4903      	ldr	r1, [pc, #12]	; (80110b4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7ff fd9a 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80110ac:	bf00      	nop
 80110ae:	3708      	adds	r7, #8
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	08017a44 	.word	0x08017a44

080110b8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b082      	sub	sp, #8
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
 80110c0:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f103 0008 	add.w	r0, r3, #8
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	4a04      	ldr	r2, [pc, #16]	; (80110dc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 80110cc:	4904      	ldr	r1, [pc, #16]	; (80110e0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 80110ce:	f7ff fd87 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80110d2:	bf00      	nop
 80110d4:	3708      	adds	r7, #8
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	08017a8c 	.word	0x08017a8c
 80110e0:	08017aa4 	.word	0x08017aa4

080110e4 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	3308      	adds	r3, #8
 80110f0:	4903      	ldr	r1, [pc, #12]	; (8011100 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7ff fd74 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80110f8:	bf00      	nop
 80110fa:	3708      	adds	r7, #8
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}
 8011100:	08017aac 	.word	0x08017aac

08011104 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b08a      	sub	sp, #40	; 0x28
 8011108:	af06      	add	r7, sp, #24
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	607a      	str	r2, [r7, #4]
 8011110:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 8011112:	f7f9 fe9f 	bl	800ae54 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8011116:	4602      	mov	r2, r0
 8011118:	69bb      	ldr	r3, [r7, #24]
 801111a:	9305      	str	r3, [sp, #20]
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	9304      	str	r3, [sp, #16]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	9303      	str	r3, [sp, #12]
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	9302      	str	r3, [sp, #8]
 8011128:	9201      	str	r2, [sp, #4]
 801112a:	2300      	movs	r3, #0
 801112c:	9300      	str	r3, [sp, #0]
 801112e:	2300      	movs	r3, #0
 8011130:	4a04      	ldr	r2, [pc, #16]	; (8011144 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8011132:	4905      	ldr	r1, [pc, #20]	; (8011148 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8011134:	68f8      	ldr	r0, [r7, #12]
 8011136:	f000 f855 	bl	80111e4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801113a:	bf00      	nop
 801113c:	3710      	adds	r7, #16
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	08017908 	.word	0x08017908
 8011148:	08017bc0 	.word	0x08017bc0

0801114c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 801114c:	b590      	push	{r4, r7, lr}
 801114e:	b08b      	sub	sp, #44	; 0x2c
 8011150:	af06      	add	r7, sp, #24
 8011152:	60f8      	str	r0, [r7, #12]
 8011154:	60b9      	str	r1, [r7, #8]
 8011156:	607a      	str	r2, [r7, #4]
 8011158:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	68d8      	ldr	r0, [r3, #12]
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	691c      	ldr	r4, [r3, #16]
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	68ba      	ldr	r2, [r7, #8]
 8011168:	6952      	ldr	r2, [r2, #20]
 801116a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801116c:	9105      	str	r1, [sp, #20]
 801116e:	6a39      	ldr	r1, [r7, #32]
 8011170:	9104      	str	r1, [sp, #16]
 8011172:	6839      	ldr	r1, [r7, #0]
 8011174:	9103      	str	r1, [sp, #12]
 8011176:	6879      	ldr	r1, [r7, #4]
 8011178:	9102      	str	r1, [sp, #8]
 801117a:	9201      	str	r2, [sp, #4]
 801117c:	9300      	str	r3, [sp, #0]
 801117e:	4623      	mov	r3, r4
 8011180:	4602      	mov	r2, r0
 8011182:	4904      	ldr	r1, [pc, #16]	; (8011194 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8011184:	68f8      	ldr	r0, [r7, #12]
 8011186:	f000 f82d 	bl	80111e4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801118a:	bf00      	nop
 801118c:	3714      	adds	r7, #20
 801118e:	46bd      	mov	sp, r7
 8011190:	bd90      	pop	{r4, r7, pc}
 8011192:	bf00      	nop
 8011194:	08017be4 	.word	0x08017be4

08011198 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8011198:	b590      	push	{r4, r7, lr}
 801119a:	b08b      	sub	sp, #44	; 0x2c
 801119c:	af06      	add	r7, sp, #24
 801119e:	60f8      	str	r0, [r7, #12]
 80111a0:	60b9      	str	r1, [r7, #8]
 80111a2:	607a      	str	r2, [r7, #4]
 80111a4:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	68d8      	ldr	r0, [r3, #12]
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	691c      	ldr	r4, [r3, #16]
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	68ba      	ldr	r2, [r7, #8]
 80111b4:	6952      	ldr	r2, [r2, #20]
 80111b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80111b8:	9105      	str	r1, [sp, #20]
 80111ba:	6a39      	ldr	r1, [r7, #32]
 80111bc:	9104      	str	r1, [sp, #16]
 80111be:	6839      	ldr	r1, [r7, #0]
 80111c0:	9103      	str	r1, [sp, #12]
 80111c2:	6879      	ldr	r1, [r7, #4]
 80111c4:	9102      	str	r1, [sp, #8]
 80111c6:	9201      	str	r2, [sp, #4]
 80111c8:	9300      	str	r3, [sp, #0]
 80111ca:	4623      	mov	r3, r4
 80111cc:	4602      	mov	r2, r0
 80111ce:	4904      	ldr	r1, [pc, #16]	; (80111e0 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80111d0:	68f8      	ldr	r0, [r7, #12]
 80111d2:	f000 f807 	bl	80111e4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80111d6:	bf00      	nop
 80111d8:	3714      	adds	r7, #20
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd90      	pop	{r4, r7, pc}
 80111de:	bf00      	nop
 80111e0:	08017c0c 	.word	0x08017c0c

080111e4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80111e4:	b590      	push	{r4, r7, lr}
 80111e6:	b087      	sub	sp, #28
 80111e8:	af02      	add	r7, sp, #8
 80111ea:	60f8      	str	r0, [r7, #12]
 80111ec:	60b9      	str	r1, [r7, #8]
 80111ee:	607a      	str	r2, [r7, #4]
 80111f0:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	3308      	adds	r3, #8
 80111f6:	68ba      	ldr	r2, [r7, #8]
 80111f8:	4910      	ldr	r1, [pc, #64]	; (801123c <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7ff fcf0 	bl	8010be0 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8011200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011202:	9300      	str	r3, [sp, #0]
 8011204:	6a3b      	ldr	r3, [r7, #32]
 8011206:	683a      	ldr	r2, [r7, #0]
 8011208:	6879      	ldr	r1, [r7, #4]
 801120a:	68f8      	ldr	r0, [r7, #12]
 801120c:	f7ff fe36 	bl	8010e7c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8011210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011216:	68f8      	ldr	r0, [r7, #12]
 8011218:	f7ff fe52 	bl	8010ec0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 801121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	3308      	adds	r3, #8
 8011222:	681c      	ldr	r4, [r3, #0]
 8011224:	68f8      	ldr	r0, [r7, #12]
 8011226:	f000 f80b 	bl	8011240 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 801122a:	4603      	mov	r3, r0
 801122c:	4619      	mov	r1, r3
 801122e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011230:	47a0      	blx	r4
}
 8011232:	bf00      	nop
 8011234:	3714      	adds	r7, #20
 8011236:	46bd      	mov	sp, r7
 8011238:	bd90      	pop	{r4, r7, pc}
 801123a:	bf00      	nop
 801123c:	08017c38 	.word	0x08017c38

08011240 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	3308      	adds	r3, #8
 801124c:	4618      	mov	r0, r3
 801124e:	f7ff fdad 	bl	8010dac <_ZN18SimpleStringBuffer8toStringEv>
 8011252:	4603      	mov	r3, r0
}
 8011254:	4618      	mov	r0, r3
 8011256:	3708      	adds	r7, #8
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}

0801125c <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b082      	sub	sp, #8
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	3308      	adds	r3, #8
 8011268:	4618      	mov	r0, r3
 801126a:	f7ff fca7 	bl	8010bbc <_ZN18SimpleStringBuffer5clearEv>
}
 801126e:	bf00      	nop
 8011270:	3708      	adds	r7, #8
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}

08011276 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8011276:	b480      	push	{r7}
 8011278:	b085      	sub	sp, #20
 801127a:	af00      	add	r7, sp, #0
 801127c:	60f8      	str	r0, [r7, #12]
 801127e:	60b9      	str	r1, [r7, #8]
 8011280:	607a      	str	r2, [r7, #4]
 8011282:	603b      	str	r3, [r7, #0]
    number_ = number;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	687a      	ldr	r2, [r7, #4]
 8011288:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	68ba      	ldr	r2, [r7, #8]
 801128e:	609a      	str	r2, [r3, #8]
    size_ = size;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	683a      	ldr	r2, [r7, #0]
 8011294:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	69ba      	ldr	r2, [r7, #24]
 801129a:	615a      	str	r2, [r3, #20]
    period_ = period;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	7f3a      	ldrb	r2, [r7, #28]
 80112a0:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80112a8:	765a      	strb	r2, [r3, #25]
    file_ = file;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112ae:	60da      	str	r2, [r3, #12]
    line_ = line;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112b4:	611a      	str	r2, [r3, #16]
}
 80112b6:	bf00      	nop
 80112b8:	3714      	adds	r7, #20
 80112ba:	46bd      	mov	sp, r7
 80112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c0:	4770      	bx	lr

080112c2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80112c2:	b480      	push	{r7}
 80112c4:	b085      	sub	sp, #20
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	60f8      	str	r0, [r7, #12]
 80112ca:	60b9      	str	r1, [r7, #8]
 80112cc:	4613      	mov	r3, r2
 80112ce:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 80112d0:	79fb      	ldrb	r3, [r7, #7]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d00b      	beq.n	80112ee <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	7e1b      	ldrb	r3, [r3, #24]
 80112da:	79fa      	ldrb	r2, [r7, #7]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d006      	beq.n	80112ee <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	7e1b      	ldrb	r3, [r3, #24]
 80112e4:	2b01      	cmp	r3, #1
 80112e6:	d004      	beq.n	80112f2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80112e8:	79fb      	ldrb	r3, [r7, #7]
 80112ea:	2b02      	cmp	r3, #2
 80112ec:	d101      	bne.n	80112f2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80112ee:	2301      	movs	r3, #1
 80112f0:	e000      	b.n	80112f4 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 80112f2:	2300      	movs	r3, #0
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3714      	adds	r7, #20
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr

08011300 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8011300:	b480      	push	{r7}
 8011302:	b083      	sub	sp, #12
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
 8011308:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681a      	ldr	r2, [r3, #0]
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	61da      	str	r2, [r3, #28]
    head_ = node;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	683a      	ldr	r2, [r7, #0]
 8011316:	601a      	str	r2, [r3, #0]
}
 8011318:	bf00      	nop
 801131a:	370c      	adds	r7, #12
 801131c:	46bd      	mov	sp, r7
 801131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011322:	4770      	bx	lr

08011324 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8011324:	b480      	push	{r7}
 8011326:	b085      	sub	sp, #20
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8011334:	2300      	movs	r3, #0
 8011336:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d019      	beq.n	8011372 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	689b      	ldr	r3, [r3, #8]
 8011342:	683a      	ldr	r2, [r7, #0]
 8011344:	429a      	cmp	r2, r3
 8011346:	d10e      	bne.n	8011366 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d005      	beq.n	801135a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	69da      	ldr	r2, [r3, #28]
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	61da      	str	r2, [r3, #28]
                return cur;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	e00c      	b.n	8011374 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	69da      	ldr	r2, [r3, #28]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	601a      	str	r2, [r3, #0]
                return cur;
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	e006      	b.n	8011374 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	69db      	ldr	r3, [r3, #28]
 801136e:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8011370:	e7e2      	b.n	8011338 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8011372:	2300      	movs	r3, #0
}
 8011374:	4618      	mov	r0, r3
 8011376:	3714      	adds	r7, #20
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr

08011380 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8011380:	b480      	push	{r7}
 8011382:	b085      	sub	sp, #20
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d00a      	beq.n	80113ac <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	689b      	ldr	r3, [r3, #8]
 801139a:	683a      	ldr	r2, [r7, #0]
 801139c:	429a      	cmp	r2, r3
 801139e:	d101      	bne.n	80113a4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	e004      	b.n	80113ae <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	69db      	ldr	r3, [r3, #28]
 80113a8:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80113aa:	e7f1      	b.n	8011390 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 80113ac:	2300      	movs	r3, #0
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3714      	adds	r7, #20
 80113b2:	46bd      	mov	sp, r7
 80113b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b8:	4770      	bx	lr

080113ba <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b086      	sub	sp, #24
 80113be:	af00      	add	r7, sp, #0
 80113c0:	60f8      	str	r0, [r7, #12]
 80113c2:	60b9      	str	r1, [r7, #8]
 80113c4:	4613      	mov	r3, r2
 80113c6:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	617b      	str	r3, [r7, #20]
 80113cc:	697b      	ldr	r3, [r7, #20]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d00e      	beq.n	80113f0 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 80113d2:	79fb      	ldrb	r3, [r7, #7]
 80113d4:	461a      	mov	r2, r3
 80113d6:	6979      	ldr	r1, [r7, #20]
 80113d8:	68f8      	ldr	r0, [r7, #12]
 80113da:	f7ff ff72 	bl	80112c2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80113de:	4603      	mov	r3, r0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d001      	beq.n	80113e8 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	e004      	b.n	80113f2 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	69db      	ldr	r3, [r3, #28]
 80113ec:	617b      	str	r3, [r7, #20]
 80113ee:	e7ed      	b.n	80113cc <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 80113f0:	2300      	movs	r3, #0
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3718      	adds	r7, #24
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}

080113fa <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 80113fa:	b580      	push	{r7, lr}
 80113fc:	b082      	sub	sp, #8
 80113fe:	af00      	add	r7, sp, #0
 8011400:	6078      	str	r0, [r7, #4]
 8011402:	460b      	mov	r3, r1
 8011404:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	78fa      	ldrb	r2, [r7, #3]
 801140c:	4619      	mov	r1, r3
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f7ff ffd3 	bl	80113ba <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8011414:	4603      	mov	r3, r0
}
 8011416:	4618      	mov	r0, r3
 8011418:	3708      	adds	r7, #8
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}

0801141e <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 801141e:	b580      	push	{r7, lr}
 8011420:	b084      	sub	sp, #16
 8011422:	af00      	add	r7, sp, #0
 8011424:	60f8      	str	r0, [r7, #12]
 8011426:	60b9      	str	r1, [r7, #8]
 8011428:	4613      	mov	r3, r2
 801142a:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	69db      	ldr	r3, [r3, #28]
 8011430:	79fa      	ldrb	r2, [r7, #7]
 8011432:	4619      	mov	r1, r3
 8011434:	68f8      	ldr	r0, [r7, #12]
 8011436:	f7ff ffc0 	bl	80113ba <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801143a:	4603      	mov	r3, r0
}
 801143c:	4618      	mov	r0, r3
 801143e:	3710      	adds	r7, #16
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}

08011444 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b084      	sub	sp, #16
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
 801144c:	460b      	mov	r3, r1
 801144e:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8011450:	2300      	movs	r3, #0
 8011452:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	60bb      	str	r3, [r7, #8]
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d00f      	beq.n	8011480 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8011460:	78fb      	ldrb	r3, [r7, #3]
 8011462:	461a      	mov	r2, r3
 8011464:	68b9      	ldr	r1, [r7, #8]
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f7ff ff2b 	bl	80112c2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801146c:	4603      	mov	r3, r0
 801146e:	2b00      	cmp	r3, #0
 8011470:	d002      	beq.n	8011478 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	3301      	adds	r3, #1
 8011476:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	69db      	ldr	r3, [r3, #28]
 801147c:	60bb      	str	r3, [r7, #8]
 801147e:	e7ec      	b.n	801145a <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8011480:	68fb      	ldr	r3, [r7, #12]
}
 8011482:	4618      	mov	r0, r3
 8011484:	3710      	adds	r7, #16
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
	...

0801148c <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 801148c:	b480      	push	{r7}
 801148e:	b083      	sub	sp, #12
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
 8011494:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8011496:	6839      	ldr	r1, [r7, #0]
 8011498:	4b09      	ldr	r3, [pc, #36]	; (80114c0 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 801149a:	fba3 2301 	umull	r2, r3, r3, r1
 801149e:	1aca      	subs	r2, r1, r3
 80114a0:	0852      	lsrs	r2, r2, #1
 80114a2:	4413      	add	r3, r2
 80114a4:	099a      	lsrs	r2, r3, #6
 80114a6:	4613      	mov	r3, r2
 80114a8:	00db      	lsls	r3, r3, #3
 80114aa:	4413      	add	r3, r2
 80114ac:	00db      	lsls	r3, r3, #3
 80114ae:	4413      	add	r3, r2
 80114b0:	1aca      	subs	r2, r1, r3
 80114b2:	4613      	mov	r3, r2
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	370c      	adds	r7, #12
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr
 80114c0:	c0e07039 	.word	0xc0e07039

080114c4 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b082      	sub	sp, #8
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
 80114cc:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	689b      	ldr	r3, [r3, #8]
 80114d2:	4619      	mov	r1, r3
 80114d4:	6878      	ldr	r0, [r7, #4]
 80114d6:	f7ff ffd9 	bl	801148c <_ZN23MemoryLeakDetectorTable4hashEPc>
 80114da:	4603      	mov	r3, r0
 80114dc:	009b      	lsls	r3, r3, #2
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	4413      	add	r3, r2
 80114e2:	6839      	ldr	r1, [r7, #0]
 80114e4:	4618      	mov	r0, r3
 80114e6:	f7ff ff0b 	bl	8011300 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 80114ea:	bf00      	nop
 80114ec:	3708      	adds	r7, #8
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}

080114f2 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 80114f2:	b580      	push	{r7, lr}
 80114f4:	b082      	sub	sp, #8
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	6078      	str	r0, [r7, #4]
 80114fa:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 80114fc:	6839      	ldr	r1, [r7, #0]
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f7ff ffc4 	bl	801148c <_ZN23MemoryLeakDetectorTable4hashEPc>
 8011504:	4603      	mov	r3, r0
 8011506:	009b      	lsls	r3, r3, #2
 8011508:	687a      	ldr	r2, [r7, #4]
 801150a:	4413      	add	r3, r2
 801150c:	6839      	ldr	r1, [r7, #0]
 801150e:	4618      	mov	r0, r3
 8011510:	f7ff ff08 	bl	8011324 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8011514:	4603      	mov	r3, r0
}
 8011516:	4618      	mov	r0, r3
 8011518:	3708      	adds	r7, #8
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}

0801151e <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 801151e:	b580      	push	{r7, lr}
 8011520:	b082      	sub	sp, #8
 8011522:	af00      	add	r7, sp, #0
 8011524:	6078      	str	r0, [r7, #4]
 8011526:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8011528:	6839      	ldr	r1, [r7, #0]
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f7ff ffae 	bl	801148c <_ZN23MemoryLeakDetectorTable4hashEPc>
 8011530:	4603      	mov	r3, r0
 8011532:	009b      	lsls	r3, r3, #2
 8011534:	687a      	ldr	r2, [r7, #4]
 8011536:	4413      	add	r3, r2
 8011538:	6839      	ldr	r1, [r7, #0]
 801153a:	4618      	mov	r0, r3
 801153c:	f7ff ff20 	bl	8011380 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8011540:	4603      	mov	r3, r0
}
 8011542:	4618      	mov	r0, r3
 8011544:	3708      	adds	r7, #8
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}

0801154a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 801154a:	b580      	push	{r7, lr}
 801154c:	b084      	sub	sp, #16
 801154e:	af00      	add	r7, sp, #0
 8011550:	6078      	str	r0, [r7, #4]
 8011552:	460b      	mov	r3, r1
 8011554:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8011556:	2300      	movs	r3, #0
 8011558:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801155a:	2300      	movs	r3, #0
 801155c:	60bb      	str	r3, [r7, #8]
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	2b48      	cmp	r3, #72	; 0x48
 8011562:	dc10      	bgt.n	8011586 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	687a      	ldr	r2, [r7, #4]
 801156a:	4413      	add	r3, r2
 801156c:	78fa      	ldrb	r2, [r7, #3]
 801156e:	4611      	mov	r1, r2
 8011570:	4618      	mov	r0, r3
 8011572:	f7ff ff67 	bl	8011444 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8011576:	4602      	mov	r2, r0
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	4413      	add	r3, r2
 801157c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	3301      	adds	r3, #1
 8011582:	60bb      	str	r3, [r7, #8]
 8011584:	e7eb      	b.n	801155e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8011586:	68fb      	ldr	r3, [r7, #12]
}
 8011588:	4618      	mov	r0, r3
 801158a:	3710      	adds	r7, #16
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	460b      	mov	r3, r1
 801159a:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 801159c:	2300      	movs	r3, #0
 801159e:	60fb      	str	r3, [r7, #12]
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2b48      	cmp	r3, #72	; 0x48
 80115a4:	dc12      	bgt.n	80115cc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	009b      	lsls	r3, r3, #2
 80115aa:	687a      	ldr	r2, [r7, #4]
 80115ac:	4413      	add	r3, r2
 80115ae:	78fa      	ldrb	r2, [r7, #3]
 80115b0:	4611      	mov	r1, r2
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7ff ff21 	bl	80113fa <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80115b8:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d001      	beq.n	80115c4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	e004      	b.n	80115ce <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	3301      	adds	r3, #1
 80115c8:	60fb      	str	r3, [r7, #12]
 80115ca:	e7e9      	b.n	80115a0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 80115cc:	2300      	movs	r3, #0
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3710      	adds	r7, #16
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}

080115d6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 80115d6:	b580      	push	{r7, lr}
 80115d8:	b086      	sub	sp, #24
 80115da:	af00      	add	r7, sp, #0
 80115dc:	60f8      	str	r0, [r7, #12]
 80115de:	60b9      	str	r1, [r7, #8]
 80115e0:	4613      	mov	r3, r2
 80115e2:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	689b      	ldr	r3, [r3, #8]
 80115e8:	4619      	mov	r1, r3
 80115ea:	68f8      	ldr	r0, [r7, #12]
 80115ec:	f7ff ff4e 	bl	801148c <_ZN23MemoryLeakDetectorTable4hashEPc>
 80115f0:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	009b      	lsls	r3, r3, #2
 80115f6:	68fa      	ldr	r2, [r7, #12]
 80115f8:	4413      	add	r3, r2
 80115fa:	79fa      	ldrb	r2, [r7, #7]
 80115fc:	68b9      	ldr	r1, [r7, #8]
 80115fe:	4618      	mov	r0, r3
 8011600:	f7ff ff0d 	bl	801141e <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8011604:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8011606:	693b      	ldr	r3, [r7, #16]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d001      	beq.n	8011610 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	e019      	b.n	8011644 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	3301      	adds	r3, #1
 8011614:	617b      	str	r3, [r7, #20]
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	2b48      	cmp	r3, #72	; 0x48
 801161a:	d812      	bhi.n	8011642 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	009b      	lsls	r3, r3, #2
 8011620:	68fa      	ldr	r2, [r7, #12]
 8011622:	4413      	add	r3, r2
 8011624:	79fa      	ldrb	r2, [r7, #7]
 8011626:	4611      	mov	r1, r2
 8011628:	4618      	mov	r0, r3
 801162a:	f7ff fee6 	bl	80113fa <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 801162e:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8011630:	693b      	ldr	r3, [r7, #16]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d001      	beq.n	801163a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8011636:	693b      	ldr	r3, [r7, #16]
 8011638:	e004      	b.n	8011644 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	3301      	adds	r3, #1
 801163e:	617b      	str	r3, [r7, #20]
 8011640:	e7e9      	b.n	8011616 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8011642:	2300      	movs	r3, #0
}
 8011644:	4618      	mov	r0, r3
 8011646:	3718      	adds	r7, #24
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}

0801164c <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 801164c:	b5b0      	push	{r4, r5, r7, lr}
 801164e:	b082      	sub	sp, #8
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2448      	movs	r4, #72	; 0x48
 8011658:	461d      	mov	r5, r3
 801165a:	2c00      	cmp	r4, #0
 801165c:	db05      	blt.n	801166a <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 801165e:	4628      	mov	r0, r5
 8011660:	f7ff fa84 	bl	8010b6c <_ZN22MemoryLeakDetectorListC1Ev>
 8011664:	3504      	adds	r5, #4
 8011666:	3c01      	subs	r4, #1
 8011668:	e7f7      	b.n	801165a <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	4618      	mov	r0, r3
 801166e:	3708      	adds	r7, #8
 8011670:	46bd      	mov	sp, r7
 8011672:	bdb0      	pop	{r4, r5, r7, pc}

08011674 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8011674:	b590      	push	{r4, r7, lr}
 8011676:	b083      	sub	sp, #12
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	6039      	str	r1, [r7, #0]
 801167e:	4a1d      	ldr	r2, [pc, #116]	; (80116f4 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	601a      	str	r2, [r3, #0]
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	330c      	adds	r3, #12
 8011688:	4618      	mov	r0, r3
 801168a:	f7ff fbe3 	bl	8010e54 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011694:	331c      	adds	r3, #28
 8011696:	4618      	mov	r0, r3
 8011698:	f7ff ffd8 	bl	801164c <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80116a2:	2201      	movs	r2, #1
 80116a4:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80116ac:	3304      	adds	r3, #4
 80116ae:	2201      	movs	r2, #1
 80116b0:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2201      	movs	r2, #1
 80116b6:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80116be:	3308      	adds	r3, #8
 80116c0:	2200      	movs	r2, #0
 80116c2:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	683a      	ldr	r2, [r7, #0]
 80116c8:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 80116ca:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80116ce:	490a      	ldr	r1, [pc, #40]	; (80116f8 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 80116d0:	2004      	movs	r0, #4
 80116d2:	f7f5 f911 	bl	80068f8 <_ZnwjPKci>
 80116d6:	4604      	mov	r4, r0
 80116d8:	4620      	mov	r0, r4
 80116da:	f7f5 fd07 	bl	80070ec <_ZN11SimpleMutexC1Ev>
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80116e4:	330c      	adds	r3, #12
 80116e6:	601c      	str	r4, [r3, #0]
}
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	4618      	mov	r0, r3
 80116ec:	370c      	adds	r7, #12
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd90      	pop	{r4, r7, pc}
 80116f2:	bf00      	nop
 80116f4:	08018cf0 	.word	0x08018cf0
 80116f8:	08017c3c 	.word	0x08017c3c

080116fc <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 80116fc:	b590      	push	{r4, r7, lr}
 80116fe:	b083      	sub	sp, #12
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
 8011704:	4a0e      	ldr	r2, [pc, #56]	; (8011740 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011710:	330c      	adds	r3, #12
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d00d      	beq.n	8011734 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801171e:	330c      	adds	r3, #12
 8011720:	681c      	ldr	r4, [r3, #0]
 8011722:	2c00      	cmp	r4, #0
 8011724:	d006      	beq.n	8011734 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8011726:	4620      	mov	r0, r4
 8011728:	f7f5 fcf2 	bl	8007110 <_ZN11SimpleMutexD1Ev>
 801172c:	2104      	movs	r1, #4
 801172e:	4620      	mov	r0, r4
 8011730:	f7f5 f8f6 	bl	8006920 <_ZdlPvj>
    }
}
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	4618      	mov	r0, r3
 8011738:	370c      	adds	r7, #12
 801173a:	46bd      	mov	sp, r7
 801173c:	bd90      	pop	{r4, r7, pc}
 801173e:	bf00      	nop
 8011740:	08018cf0 	.word	0x08018cf0

08011744 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8011744:	b580      	push	{r7, lr}
 8011746:	b082      	sub	sp, #8
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
}
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f7ff ffd5 	bl	80116fc <_ZN18MemoryLeakDetectorD1Ev>
 8011752:	f241 1150 	movw	r1, #4432	; 0x1150
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f7f5 f8e2 	bl	8006920 <_ZdlPvj>
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	4618      	mov	r0, r3
 8011760:	3708      	adds	r7, #8
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}

08011766 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8011766:	b580      	push	{r7, lr}
 8011768:	b082      	sub	sp, #8
 801176a:	af00      	add	r7, sp, #0
 801176c:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	330c      	adds	r3, #12
 8011772:	4618      	mov	r0, r3
 8011774:	f7ff fd72 	bl	801125c <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2203      	movs	r2, #3
 801177c:	721a      	strb	r2, [r3, #8]
}
 801177e:	bf00      	nop
 8011780:	3708      	adds	r7, #8
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}

08011786 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8011786:	b480      	push	{r7}
 8011788:	b083      	sub	sp, #12
 801178a:	af00      	add	r7, sp, #0
 801178c:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2202      	movs	r2, #2
 8011792:	721a      	strb	r2, [r3, #8]
}
 8011794:	bf00      	nop
 8011796:	370c      	adds	r7, #12
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr

080117a0 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 80117a0:	b480      	push	{r7}
 80117a2:	b083      	sub	sp, #12
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2202      	movs	r2, #2
 80117ac:	721a      	strb	r2, [r3, #8]
}
 80117ae:	bf00      	nop
 80117b0:	370c      	adds	r7, #12
 80117b2:	46bd      	mov	sp, r7
 80117b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b8:	4770      	bx	lr

080117ba <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 80117ba:	b480      	push	{r7}
 80117bc:	b083      	sub	sp, #12
 80117be:	af00      	add	r7, sp, #0
 80117c0:	6078      	str	r0, [r7, #4]
    return mutex_;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80117c8:	330c      	adds	r3, #12
 80117ca:	681b      	ldr	r3, [r3, #0]
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	370c      	adds	r7, #12
 80117d0:	46bd      	mov	sp, r7
 80117d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d6:	4770      	bx	lr

080117d8 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 80117d8:	b480      	push	{r7}
 80117da:	b083      	sub	sp, #12
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f023 0303 	bic.w	r3, r3, #3
 80117e6:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	370c      	adds	r7, #12
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr

080117f4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b082      	sub	sp, #8
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	3303      	adds	r3, #3
 8011802:	4618      	mov	r0, r3
 8011804:	f7ff ffe8 	bl	80117d8 <_ZL31calculateVoidPointerAlignedSizej>
 8011808:	4603      	mov	r3, r0
}
 801180a:	4618      	mov	r0, r3
 801180c:	3708      	adds	r7, #8
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}

08011812 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8011812:	b580      	push	{r7, lr}
 8011814:	b084      	sub	sp, #16
 8011816:	af00      	add	r7, sp, #0
 8011818:	60f8      	str	r0, [r7, #12]
 801181a:	60b9      	str	r1, [r7, #8]
 801181c:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 801181e:	6879      	ldr	r1, [r7, #4]
 8011820:	68f8      	ldr	r0, [r7, #12]
 8011822:	f7ff ffe7 	bl	80117f4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8011826:	4602      	mov	r2, r0
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	4413      	add	r3, r2
}
 801182c:	4618      	mov	r0, r3
 801182e:	3710      	adds	r7, #16
 8011830:	46bd      	mov	sp, r7
 8011832:	bd80      	pop	{r7, pc}

08011834 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b08a      	sub	sp, #40	; 0x28
 8011838:	af06      	add	r7, sp, #24
 801183a:	60f8      	str	r0, [r7, #12]
 801183c:	60b9      	str	r1, [r7, #8]
 801183e:	607a      	str	r2, [r7, #4]
 8011840:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011848:	3304      	adds	r3, #4
 801184a:	681a      	ldr	r2, [r3, #0]
 801184c:	1c51      	adds	r1, r2, #1
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011854:	3304      	adds	r3, #4
 8011856:	6019      	str	r1, [r3, #0]
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	7a19      	ldrb	r1, [r3, #8]
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011862:	3308      	adds	r3, #8
 8011864:	781b      	ldrb	r3, [r3, #0]
 8011866:	6a38      	ldr	r0, [r7, #32]
 8011868:	9004      	str	r0, [sp, #16]
 801186a:	69f8      	ldr	r0, [r7, #28]
 801186c:	9003      	str	r0, [sp, #12]
 801186e:	9302      	str	r3, [sp, #8]
 8011870:	9101      	str	r1, [sp, #4]
 8011872:	69bb      	ldr	r3, [r7, #24]
 8011874:	9300      	str	r3, [sp, #0]
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	6879      	ldr	r1, [r7, #4]
 801187a:	68b8      	ldr	r0, [r7, #8]
 801187c:	f7ff fcfb 	bl	8011276 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	689a      	ldr	r2, [r3, #8]
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	4413      	add	r3, r2
 801188a:	4619      	mov	r1, r3
 801188c:	68f8      	ldr	r0, [r7, #12]
 801188e:	f000 f861 	bl	8011954 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011898:	331c      	adds	r3, #28
 801189a:	68b9      	ldr	r1, [r7, #8]
 801189c:	4618      	mov	r0, r3
 801189e:	f7ff fe11 	bl	80114c4 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 80118a2:	bf00      	nop
 80118a4:	3710      	adds	r7, #16
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}

080118aa <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80118aa:	b580      	push	{r7, lr}
 80118ac:	b08a      	sub	sp, #40	; 0x28
 80118ae:	af04      	add	r7, sp, #16
 80118b0:	60f8      	str	r0, [r7, #12]
 80118b2:	60b9      	str	r1, [r7, #8]
 80118b4:	607a      	str	r2, [r7, #4]
 80118b6:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80118b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80118bc:	9302      	str	r3, [sp, #8]
 80118be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c0:	9301      	str	r3, [sp, #4]
 80118c2:	6a3b      	ldr	r3, [r7, #32]
 80118c4:	9300      	str	r3, [sp, #0]
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	687a      	ldr	r2, [r7, #4]
 80118ca:	68b9      	ldr	r1, [r7, #8]
 80118cc:	68f8      	ldr	r0, [r7, #12]
 80118ce:	f000 f96f 	bl	8011bb0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 80118d2:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 80118d4:	697b      	ldr	r3, [r7, #20]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d101      	bne.n	80118de <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 80118da:	2300      	movs	r3, #0
 80118dc:	e017      	b.n	801190e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 80118de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80118e2:	9300      	str	r3, [sp, #0]
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	683a      	ldr	r2, [r7, #0]
 80118e8:	68b9      	ldr	r1, [r7, #8]
 80118ea:	68f8      	ldr	r0, [r7, #12]
 80118ec:	f000 f98a 	bl	8011c04 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80118f0:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 80118f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f4:	9302      	str	r3, [sp, #8]
 80118f6:	6a3b      	ldr	r3, [r7, #32]
 80118f8:	9301      	str	r3, [sp, #4]
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	9300      	str	r3, [sp, #0]
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	697a      	ldr	r2, [r7, #20]
 8011902:	6939      	ldr	r1, [r7, #16]
 8011904:	68f8      	ldr	r0, [r7, #12]
 8011906:	f7ff ff95 	bl	8011834 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 801190a:	693b      	ldr	r3, [r7, #16]
 801190c:	689b      	ldr	r3, [r3, #8]
}
 801190e:	4618      	mov	r0, r3
 8011910:	3718      	adds	r7, #24
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}
	...

08011918 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b084      	sub	sp, #16
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011928:	331c      	adds	r3, #28
 801192a:	6839      	ldr	r1, [r7, #0]
 801192c:	4618      	mov	r0, r3
 801192e:	f7ff fdf6 	bl	801151e <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8011932:	60f8      	str	r0, [r7, #12]
  if (node)
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d006      	beq.n	8011948 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 801193a:	4b05      	ldr	r3, [pc, #20]	; (8011950 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	68fa      	ldr	r2, [r7, #12]
 8011940:	6812      	ldr	r2, [r2, #0]
 8011942:	21cd      	movs	r1, #205	; 0xcd
 8011944:	6838      	ldr	r0, [r7, #0]
 8011946:	4798      	blx	r3
#endif
}
 8011948:	bf00      	nop
 801194a:	3710      	adds	r7, #16
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}
 8011950:	200000d0 	.word	0x200000d0

08011954 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8011954:	b480      	push	{r7}
 8011956:	b085      	sub	sp, #20
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
 801195c:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801195e:	2300      	movs	r3, #0
 8011960:	60fb      	str	r3, [r7, #12]
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	2b02      	cmp	r3, #2
 8011966:	d812      	bhi.n	801198e <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8011968:	68f9      	ldr	r1, [r7, #12]
 801196a:	4b0c      	ldr	r3, [pc, #48]	; (801199c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 801196c:	fba3 2301 	umull	r2, r3, r3, r1
 8011970:	085a      	lsrs	r2, r3, #1
 8011972:	4613      	mov	r3, r2
 8011974:	005b      	lsls	r3, r3, #1
 8011976:	4413      	add	r3, r2
 8011978:	1aca      	subs	r2, r1, r3
 801197a:	6839      	ldr	r1, [r7, #0]
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	440b      	add	r3, r1
 8011980:	4907      	ldr	r1, [pc, #28]	; (80119a0 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8011982:	5c8a      	ldrb	r2, [r1, r2]
 8011984:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	3301      	adds	r3, #1
 801198a:	60fb      	str	r3, [r7, #12]
 801198c:	e7e9      	b.n	8011962 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 801198e:	bf00      	nop
 8011990:	3714      	adds	r7, #20
 8011992:	46bd      	mov	sp, r7
 8011994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011998:	4770      	bx	lr
 801199a:	bf00      	nop
 801199c:	aaaaaaab 	.word	0xaaaaaaab
 80119a0:	08018ce4 	.word	0x08018ce4

080119a4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 80119a4:	b480      	push	{r7}
 80119a6:	b085      	sub	sp, #20
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80119ae:	2300      	movs	r3, #0
 80119b0:	60fb      	str	r3, [r7, #12]
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	2b02      	cmp	r3, #2
 80119b6:	d816      	bhi.n	80119e6 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 80119b8:	683a      	ldr	r2, [r7, #0]
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	4413      	add	r3, r2
 80119be:	7818      	ldrb	r0, [r3, #0]
 80119c0:	68f9      	ldr	r1, [r7, #12]
 80119c2:	4b0c      	ldr	r3, [pc, #48]	; (80119f4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 80119c4:	fba3 2301 	umull	r2, r3, r3, r1
 80119c8:	085a      	lsrs	r2, r3, #1
 80119ca:	4613      	mov	r3, r2
 80119cc:	005b      	lsls	r3, r3, #1
 80119ce:	4413      	add	r3, r2
 80119d0:	1aca      	subs	r2, r1, r3
 80119d2:	4b09      	ldr	r3, [pc, #36]	; (80119f8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 80119d4:	5c9b      	ldrb	r3, [r3, r2]
 80119d6:	4298      	cmp	r0, r3
 80119d8:	d001      	beq.n	80119de <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 80119da:	2300      	movs	r3, #0
 80119dc:	e004      	b.n	80119e8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	3301      	adds	r3, #1
 80119e2:	60fb      	str	r3, [r7, #12]
 80119e4:	e7e5      	b.n	80119b2 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 80119e6:	2301      	movs	r3, #1
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3714      	adds	r7, #20
 80119ec:	46bd      	mov	sp, r7
 80119ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f2:	4770      	bx	lr
 80119f4:	aaaaaaab 	.word	0xaaaaaaab
 80119f8:	08018ce4 	.word	0x08018ce4

080119fc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b084      	sub	sp, #16
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	60f8      	str	r0, [r7, #12]
 8011a04:	60b9      	str	r1, [r7, #8]
 8011a06:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8011a08:	68ba      	ldr	r2, [r7, #8]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	429a      	cmp	r2, r3
 8011a0e:	d101      	bne.n	8011a14 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8011a10:	2301      	movs	r3, #1
 8011a12:	e013      	b.n	8011a3c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011a1a:	781b      	ldrb	r3, [r3, #0]
 8011a1c:	f083 0301 	eor.w	r3, r3, #1
 8011a20:	b2db      	uxtb	r3, r3
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d001      	beq.n	8011a2a <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8011a26:	2301      	movs	r3, #1
 8011a28:	e008      	b.n	8011a3c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	331c      	adds	r3, #28
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	68b9      	ldr	r1, [r7, #8]
 8011a34:	6878      	ldr	r0, [r7, #4]
 8011a36:	4798      	blx	r3
 8011a38:	4603      	mov	r3, r0
 8011a3a:	bf00      	nop
}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	3710      	adds	r7, #16
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}

08011a44 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8011a44:	b590      	push	{r4, r7, lr}
 8011a46:	b087      	sub	sp, #28
 8011a48:	af02      	add	r7, sp, #8
 8011a4a:	60f8      	str	r0, [r7, #12]
 8011a4c:	60b9      	str	r1, [r7, #8]
 8011a4e:	607a      	str	r2, [r7, #4]
 8011a50:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	695a      	ldr	r2, [r3, #20]
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	695b      	ldr	r3, [r3, #20]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	3328      	adds	r3, #40	; 0x28
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4610      	mov	r0, r2
 8011a62:	4798      	blx	r3
 8011a64:	4604      	mov	r4, r0
 8011a66:	6a3b      	ldr	r3, [r7, #32]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	3328      	adds	r3, #40	; 0x28
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	6a38      	ldr	r0, [r7, #32]
 8011a70:	4798      	blx	r3
 8011a72:	4603      	mov	r3, r0
 8011a74:	461a      	mov	r2, r3
 8011a76:	4621      	mov	r1, r4
 8011a78:	68f8      	ldr	r0, [r7, #12]
 8011a7a:	f7ff ffbf 	bl	80119fc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	f083 0301 	eor.w	r3, r3, #1
 8011a84:	b2db      	uxtb	r3, r3
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d014      	beq.n	8011ab4 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	f103 040c 	add.w	r4, r3, #12
 8011a90:	6a3b      	ldr	r3, [r7, #32]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	3328      	adds	r3, #40	; 0x28
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	6a38      	ldr	r0, [r7, #32]
 8011a9a:	4798      	blx	r3
 8011a9c:	4602      	mov	r2, r0
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	685b      	ldr	r3, [r3, #4]
 8011aa2:	9301      	str	r3, [sp, #4]
 8011aa4:	9200      	str	r2, [sp, #0]
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	687a      	ldr	r2, [r7, #4]
 8011aaa:	68b9      	ldr	r1, [r7, #8]
 8011aac:	4620      	mov	r0, r4
 8011aae:	f7ff fb4d 	bl	801114c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8011ab2:	e02e      	b.n	8011b12 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	689a      	ldr	r2, [r3, #8]
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	4413      	add	r3, r2
 8011abe:	4619      	mov	r1, r3
 8011ac0:	68f8      	ldr	r0, [r7, #12]
 8011ac2:	f7ff ff6f 	bl	80119a4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	f083 0301 	eor.w	r3, r3, #1
 8011acc:	b2db      	uxtb	r3, r3
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d014      	beq.n	8011afc <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	f103 040c 	add.w	r4, r3, #12
 8011ad8:	6a3b      	ldr	r3, [r7, #32]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	3328      	adds	r3, #40	; 0x28
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	6a38      	ldr	r0, [r7, #32]
 8011ae2:	4798      	blx	r3
 8011ae4:	4602      	mov	r2, r0
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	685b      	ldr	r3, [r3, #4]
 8011aea:	9301      	str	r3, [sp, #4]
 8011aec:	9200      	str	r2, [sp, #0]
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	687a      	ldr	r2, [r7, #4]
 8011af2:	68b9      	ldr	r1, [r7, #8]
 8011af4:	4620      	mov	r0, r4
 8011af6:	f7ff fb4f 	bl	8011198 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8011afa:	e00a      	b.n	8011b12 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8011afc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d006      	beq.n	8011b12 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8011b04:	6a3b      	ldr	r3, [r7, #32]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	3324      	adds	r3, #36	; 0x24
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	68b9      	ldr	r1, [r7, #8]
 8011b0e:	6a38      	ldr	r0, [r7, #32]
 8011b10:	4798      	blx	r3
}
 8011b12:	bf00      	nop
 8011b14:	3714      	adds	r7, #20
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd90      	pop	{r4, r7, pc}
	...

08011b1c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b086      	sub	sp, #24
 8011b20:	af02      	add	r7, sp, #8
 8011b22:	60f8      	str	r0, [r7, #12]
 8011b24:	60b9      	str	r1, [r7, #8]
 8011b26:	607a      	str	r2, [r7, #4]
 8011b28:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8011b2a:	4b08      	ldr	r3, [pc, #32]	; (8011b4c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8011b2c:	681a      	ldr	r2, [r3, #0]
 8011b2e:	78fb      	ldrb	r3, [r7, #3]
 8011b30:	9301      	str	r3, [sp, #4]
 8011b32:	2300      	movs	r3, #0
 8011b34:	9300      	str	r3, [sp, #0]
 8011b36:	4613      	mov	r3, r2
 8011b38:	687a      	ldr	r2, [r7, #4]
 8011b3a:	68b9      	ldr	r1, [r7, #8]
 8011b3c:	68f8      	ldr	r0, [r7, #12]
 8011b3e:	f000 f87f 	bl	8011c40 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8011b42:	4603      	mov	r3, r0
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3710      	adds	r7, #16
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	200000f8 	.word	0x200000f8

08011b50 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8011b50:	b590      	push	{r4, r7, lr}
 8011b52:	b085      	sub	sp, #20
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	60f8      	str	r0, [r7, #12]
 8011b58:	60b9      	str	r1, [r7, #8]
 8011b5a:	607a      	str	r2, [r7, #4]
 8011b5c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8011b5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d00e      	beq.n	8011b84 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	3308      	adds	r3, #8
 8011b6c:	681c      	ldr	r4, [r3, #0]
 8011b6e:	6879      	ldr	r1, [r7, #4]
 8011b70:	68f8      	ldr	r0, [r7, #12]
 8011b72:	f7ff fe3f 	bl	80117f4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8011b76:	4601      	mov	r1, r0
 8011b78:	6a3b      	ldr	r3, [r7, #32]
 8011b7a:	683a      	ldr	r2, [r7, #0]
 8011b7c:	68b8      	ldr	r0, [r7, #8]
 8011b7e:	47a0      	blx	r4
 8011b80:	4603      	mov	r3, r0
 8011b82:	e010      	b.n	8011ba6 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	3308      	adds	r3, #8
 8011b8a:	681c      	ldr	r4, [r3, #0]
 8011b8c:	6879      	ldr	r1, [r7, #4]
 8011b8e:	68f8      	ldr	r0, [r7, #12]
 8011b90:	f7ff fe30 	bl	80117f4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8011b94:	4603      	mov	r3, r0
 8011b96:	f103 0120 	add.w	r1, r3, #32
 8011b9a:	6a3b      	ldr	r3, [r7, #32]
 8011b9c:	683a      	ldr	r2, [r7, #0]
 8011b9e:	68b8      	ldr	r0, [r7, #8]
 8011ba0:	47a0      	blx	r4
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	bf00      	nop
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3714      	adds	r7, #20
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd90      	pop	{r4, r7, pc}
	...

08011bb0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8011bb0:	b590      	push	{r4, r7, lr}
 8011bb2:	b085      	sub	sp, #20
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	60f8      	str	r0, [r7, #12]
 8011bb8:	60b9      	str	r1, [r7, #8]
 8011bba:	607a      	str	r2, [r7, #4]
 8011bbc:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8011bbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d00b      	beq.n	8011bde <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8011bc6:	4b0e      	ldr	r3, [pc, #56]	; (8011c00 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8011bc8:	681c      	ldr	r4, [r3, #0]
 8011bca:	6839      	ldr	r1, [r7, #0]
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f7ff fe11 	bl	80117f4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	47a0      	blx	r4
 8011bda:	4603      	mov	r3, r0
 8011bdc:	e00c      	b.n	8011bf8 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8011bde:	4b08      	ldr	r3, [pc, #32]	; (8011c00 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8011be0:	681c      	ldr	r4, [r3, #0]
 8011be2:	6839      	ldr	r1, [r7, #0]
 8011be4:	68f8      	ldr	r0, [r7, #12]
 8011be6:	f7ff fe05 	bl	80117f4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8011bea:	4603      	mov	r3, r0
 8011bec:	3320      	adds	r3, #32
 8011bee:	4619      	mov	r1, r3
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	47a0      	blx	r4
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	bf00      	nop
}
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3714      	adds	r7, #20
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd90      	pop	{r4, r7, pc}
 8011c00:	200000c8 	.word	0x200000c8

08011c04 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b084      	sub	sp, #16
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	60f8      	str	r0, [r7, #12]
 8011c0c:	60b9      	str	r1, [r7, #8]
 8011c0e:	607a      	str	r2, [r7, #4]
 8011c10:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8011c12:	7e3b      	ldrb	r3, [r7, #24]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d008      	beq.n	8011c2a <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	3320      	adds	r3, #32
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	2120      	movs	r1, #32
 8011c22:	68b8      	ldr	r0, [r7, #8]
 8011c24:	4798      	blx	r3
 8011c26:	4603      	mov	r3, r0
 8011c28:	e006      	b.n	8011c38 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	6839      	ldr	r1, [r7, #0]
 8011c2e:	68f8      	ldr	r0, [r7, #12]
 8011c30:	f7ff fdef 	bl	8011812 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8011c34:	4603      	mov	r3, r0
 8011c36:	bf00      	nop
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3710      	adds	r7, #16
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}

08011c40 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b08a      	sub	sp, #40	; 0x28
 8011c44:	af04      	add	r7, sp, #16
 8011c46:	60f8      	str	r0, [r7, #12]
 8011c48:	60b9      	str	r1, [r7, #8]
 8011c4a:	607a      	str	r2, [r7, #4]
 8011c4c:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8011c4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011c52:	9301      	str	r3, [sp, #4]
 8011c54:	6a3b      	ldr	r3, [r7, #32]
 8011c56:	9300      	str	r3, [sp, #0]
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	687a      	ldr	r2, [r7, #4]
 8011c5c:	68b9      	ldr	r1, [r7, #8]
 8011c5e:	68f8      	ldr	r0, [r7, #12]
 8011c60:	f7ff ff76 	bl	8011b50 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8011c64:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d101      	bne.n	8011c70 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	e017      	b.n	8011ca0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8011c70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011c74:	9300      	str	r3, [sp, #0]
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	687a      	ldr	r2, [r7, #4]
 8011c7a:	68b9      	ldr	r1, [r7, #8]
 8011c7c:	68f8      	ldr	r0, [r7, #12]
 8011c7e:	f7ff ffc1 	bl	8011c04 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8011c82:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8011c84:	6a3b      	ldr	r3, [r7, #32]
 8011c86:	9302      	str	r3, [sp, #8]
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	9301      	str	r3, [sp, #4]
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	9300      	str	r3, [sp, #0]
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	697a      	ldr	r2, [r7, #20]
 8011c94:	6939      	ldr	r1, [r7, #16]
 8011c96:	68f8      	ldr	r0, [r7, #12]
 8011c98:	f7ff fdcc 	bl	8011834 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	689b      	ldr	r3, [r3, #8]
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	3718      	adds	r7, #24
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}

08011ca8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8011ca8:	b590      	push	{r4, r7, lr}
 8011caa:	b089      	sub	sp, #36	; 0x24
 8011cac:	af02      	add	r7, sp, #8
 8011cae:	60f8      	str	r0, [r7, #12]
 8011cb0:	60b9      	str	r1, [r7, #8]
 8011cb2:	607a      	str	r2, [r7, #4]
 8011cb4:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d03a      	beq.n	8011d32 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011cc2:	331c      	adds	r3, #28
 8011cc4:	6879      	ldr	r1, [r7, #4]
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f7ff fc13 	bl	80114f2 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8011ccc:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8011cce:	697b      	ldr	r3, [r7, #20]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d10b      	bne.n	8011cec <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	f103 000c 	add.w	r0, r3, #12
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	685b      	ldr	r3, [r3, #4]
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ce4:	6839      	ldr	r1, [r7, #0]
 8011ce6:	f7ff fa0d 	bl	8011104 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8011cea:	e023      	b.n	8011d34 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8011cec:	68b8      	ldr	r0, [r7, #8]
 8011cee:	f7f8 ffa7 	bl	800ac40 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	f083 0301 	eor.w	r3, r3, #1
 8011cf8:	b2db      	uxtb	r3, r3
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d01a      	beq.n	8011d34 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8011d04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011d08:	9301      	str	r3, [sp, #4]
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	9300      	str	r3, [sp, #0]
 8011d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d10:	683a      	ldr	r2, [r7, #0]
 8011d12:	6979      	ldr	r1, [r7, #20]
 8011d14:	68f8      	ldr	r0, [r7, #12]
 8011d16:	f7ff fe95 	bl	8011a44 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	330c      	adds	r3, #12
 8011d20:	681c      	ldr	r4, [r3, #0]
 8011d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d24:	9300      	str	r3, [sp, #0]
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	693a      	ldr	r2, [r7, #16]
 8011d2a:	6879      	ldr	r1, [r7, #4]
 8011d2c:	68b8      	ldr	r0, [r7, #8]
 8011d2e:	47a0      	blx	r4
 8011d30:	e000      	b.n	8011d34 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8011d32:	bf00      	nop
    }
}
 8011d34:	371c      	adds	r7, #28
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd90      	pop	{r4, r7, pc}
	...

08011d3c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b086      	sub	sp, #24
 8011d40:	af02      	add	r7, sp, #8
 8011d42:	60f8      	str	r0, [r7, #12]
 8011d44:	60b9      	str	r1, [r7, #8]
 8011d46:	607a      	str	r2, [r7, #4]
 8011d48:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8011d4a:	4b08      	ldr	r3, [pc, #32]	; (8011d6c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8011d4c:	681a      	ldr	r2, [r3, #0]
 8011d4e:	78fb      	ldrb	r3, [r7, #3]
 8011d50:	9301      	str	r3, [sp, #4]
 8011d52:	2300      	movs	r3, #0
 8011d54:	9300      	str	r3, [sp, #0]
 8011d56:	4613      	mov	r3, r2
 8011d58:	687a      	ldr	r2, [r7, #4]
 8011d5a:	68b9      	ldr	r1, [r7, #8]
 8011d5c:	68f8      	ldr	r0, [r7, #12]
 8011d5e:	f7ff ffa3 	bl	8011ca8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8011d62:	bf00      	nop
 8011d64:	3710      	adds	r7, #16
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}
 8011d6a:	bf00      	nop
 8011d6c:	200000f8 	.word	0x200000f8

08011d70 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b08a      	sub	sp, #40	; 0x28
 8011d74:	af04      	add	r7, sp, #16
 8011d76:	60f8      	str	r0, [r7, #12]
 8011d78:	60b9      	str	r1, [r7, #8]
 8011d7a:	607a      	str	r2, [r7, #4]
 8011d7c:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d023      	beq.n	8011dcc <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d8a:	331c      	adds	r3, #28
 8011d8c:	6879      	ldr	r1, [r7, #4]
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7ff fbaf 	bl	80114f2 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8011d94:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d10c      	bne.n	8011db6 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	f103 000c 	add.w	r0, r3, #12
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	9300      	str	r3, [sp, #0]
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dac:	6a39      	ldr	r1, [r7, #32]
 8011dae:	f7ff f9a9 	bl	8011104 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8011db2:	2300      	movs	r3, #0
 8011db4:	e019      	b.n	8011dea <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8011db6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011dba:	9301      	str	r3, [sp, #4]
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	9300      	str	r3, [sp, #0]
 8011dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc2:	6a3a      	ldr	r2, [r7, #32]
 8011dc4:	6979      	ldr	r1, [r7, #20]
 8011dc6:	68f8      	ldr	r0, [r7, #12]
 8011dc8:	f7ff fe3c 	bl	8011a44 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8011dcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011dd0:	9302      	str	r3, [sp, #8]
 8011dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd4:	9301      	str	r3, [sp, #4]
 8011dd6:	6a3b      	ldr	r3, [r7, #32]
 8011dd8:	9300      	str	r3, [sp, #0]
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	687a      	ldr	r2, [r7, #4]
 8011dde:	68b9      	ldr	r1, [r7, #8]
 8011de0:	68f8      	ldr	r0, [r7, #12]
 8011de2:	f7ff fd62 	bl	80118aa <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8011de6:	4603      	mov	r3, r0
 8011de8:	bf00      	nop
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3718      	adds	r7, #24
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}

08011df2 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8011df2:	b580      	push	{r7, lr}
 8011df4:	b084      	sub	sp, #16
 8011df6:	af00      	add	r7, sp, #0
 8011df8:	6078      	str	r0, [r7, #4]
 8011dfa:	460b      	mov	r3, r1
 8011dfc:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e04:	331c      	adds	r3, #28
 8011e06:	78fa      	ldrb	r2, [r7, #3]
 8011e08:	4611      	mov	r1, r2
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f7ff fbc0 	bl	8011590 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8011e10:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	330c      	adds	r3, #12
 8011e16:	4618      	mov	r0, r3
 8011e18:	f7ff f882 	bl	8010f20 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d010      	beq.n	8011e44 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	330c      	adds	r3, #12
 8011e26:	68f9      	ldr	r1, [r7, #12]
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7ff f897 	bl	8010f5c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e34:	331c      	adds	r3, #28
 8011e36:	78fa      	ldrb	r2, [r7, #3]
 8011e38:	68f9      	ldr	r1, [r7, #12]
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7ff fbcb 	bl	80115d6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8011e40:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8011e42:	e7eb      	b.n	8011e1c <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	330c      	adds	r3, #12
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f7ff f8e7 	bl	801101c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8011e4e:	bf00      	nop
 8011e50:	3710      	adds	r7, #16
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}

08011e56 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8011e56:	b580      	push	{r7, lr}
 8011e58:	b082      	sub	sp, #8
 8011e5a:	af00      	add	r7, sp, #0
 8011e5c:	6078      	str	r0, [r7, #4]
 8011e5e:	460b      	mov	r3, r1
 8011e60:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8011e62:	78fb      	ldrb	r3, [r7, #3]
 8011e64:	4619      	mov	r1, r3
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f7ff ffc3 	bl	8011df2 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	330c      	adds	r3, #12
 8011e70:	4618      	mov	r0, r3
 8011e72:	f7ff f9e5 	bl	8011240 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8011e76:	4603      	mov	r3, r0
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	3708      	adds	r7, #8
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}

08011e80 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b084      	sub	sp, #16
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e8e:	331c      	adds	r3, #28
 8011e90:	2103      	movs	r1, #3
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7ff fb7c 	bl	8011590 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8011e98:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d011      	beq.n	8011ec4 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	7e1b      	ldrb	r3, [r3, #24]
 8011ea4:	2b03      	cmp	r3, #3
 8011ea6:	d102      	bne.n	8011eae <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	2202      	movs	r2, #2
 8011eac:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011eb4:	331c      	adds	r3, #28
 8011eb6:	2203      	movs	r2, #3
 8011eb8:	68f9      	ldr	r1, [r7, #12]
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7ff fb8b 	bl	80115d6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8011ec0:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8011ec2:	e7ea      	b.n	8011e9a <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8011ec4:	bf00      	nop
 8011ec6:	3710      	adds	r7, #16
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}

08011ecc <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b082      	sub	sp, #8
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	460b      	mov	r3, r1
 8011ed6:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ede:	331c      	adds	r3, #28
 8011ee0:	78fa      	ldrb	r2, [r7, #3]
 8011ee2:	4611      	mov	r1, r2
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7ff fb30 	bl	801154a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8011eea:	4603      	mov	r3, r0
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3708      	adds	r7, #8
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}

08011ef4 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b082      	sub	sp, #8
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	6039      	str	r1, [r7, #0]
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	490b      	ldr	r1, [pc, #44]	; (8011f30 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7f5 fbe1 	bl	80076ca <_ZN12SimpleStringC1EPKc>
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	721a      	strb	r2, [r3, #8]
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2200      	movs	r2, #0
 8011f12:	725a      	strb	r2, [r3, #9]
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2200      	movs	r2, #0
 8011f18:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6839      	ldr	r1, [r7, #0]
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7f5 fc3f 	bl	80077a2 <_ZN12SimpleStringaSERKS_>
}
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	4618      	mov	r0, r3
 8011f28:	3708      	adds	r7, #8
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
 8011f2e:	bf00      	nop
 8011f30:	08017c5c 	.word	0x08017c5c

08011f34 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 8011f34:	b480      	push	{r7}
 8011f36:	b083      	sub	sp, #12
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
 8011f3c:	6039      	str	r1, [r7, #0]
    next_ = filter;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	683a      	ldr	r2, [r7, #0]
 8011f42:	60da      	str	r2, [r3, #12]
    return this;
 8011f44:	687b      	ldr	r3, [r7, #4]
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	370c      	adds	r7, #12
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f50:	4770      	bx	lr

08011f52 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 8011f52:	b480      	push	{r7}
 8011f54:	b083      	sub	sp, #12
 8011f56:	af00      	add	r7, sp, #0
 8011f58:	6078      	str	r0, [r7, #4]
    return next_;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	68db      	ldr	r3, [r3, #12]
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	370c      	adds	r7, #12
 8011f62:	46bd      	mov	sp, r7
 8011f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f68:	4770      	bx	lr

08011f6a <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 8011f6a:	b480      	push	{r7}
 8011f6c:	b083      	sub	sp, #12
 8011f6e:	af00      	add	r7, sp, #0
 8011f70:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2201      	movs	r2, #1
 8011f76:	721a      	strb	r2, [r3, #8]
}
 8011f78:	bf00      	nop
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr

08011f84 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 8011f84:	b480      	push	{r7}
 8011f86:	b083      	sub	sp, #12
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2201      	movs	r2, #1
 8011f90:	725a      	strb	r2, [r3, #9]
}
 8011f92:	bf00      	nop
 8011f94:	370c      	adds	r7, #12
 8011f96:	46bd      	mov	sp, r7
 8011f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9c:	4770      	bx	lr

08011f9e <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 8011f9e:	b580      	push	{r7, lr}
 8011fa0:	b084      	sub	sp, #16
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	6078      	str	r0, [r7, #4]
 8011fa6:	6039      	str	r1, [r7, #0]
    bool matches = false;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	7a1b      	ldrb	r3, [r3, #8]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d007      	beq.n	8011fc4 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	6838      	ldr	r0, [r7, #0]
 8011fba:	f7f5 ff4a 	bl	8007e52 <_ZeqRK12SimpleStringS1_>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	73fb      	strb	r3, [r7, #15]
 8011fc2:	e006      	b.n	8011fd2 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	4619      	mov	r1, r3
 8011fc8:	6838      	ldr	r0, [r7, #0]
 8011fca:	f7f5 fbfc 	bl	80077c6 <_ZNK12SimpleString8containsERKS_>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	7a5b      	ldrb	r3, [r3, #9]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d004      	beq.n	8011fe4 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 8011fda:	7bfb      	ldrb	r3, [r7, #15]
 8011fdc:	f083 0301 	eor.w	r3, r3, #1
 8011fe0:	b2db      	uxtb	r3, r3
 8011fe2:	e005      	b.n	8011ff0 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 8011fe4:	7bfb      	ldrb	r3, [r7, #15]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	bf14      	ite	ne
 8011fea:	2301      	movne	r3, #1
 8011fec:	2300      	moveq	r3, #0
 8011fee:	b2db      	uxtb	r3, r3
}
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	3710      	adds	r7, #16
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}

08011ff8 <__cxa_guard_acquire>:
 8011ff8:	6803      	ldr	r3, [r0, #0]
 8011ffa:	07db      	lsls	r3, r3, #31
 8011ffc:	d406      	bmi.n	801200c <__cxa_guard_acquire+0x14>
 8011ffe:	7843      	ldrb	r3, [r0, #1]
 8012000:	b103      	cbz	r3, 8012004 <__cxa_guard_acquire+0xc>
 8012002:	deff      	udf	#255	; 0xff
 8012004:	2301      	movs	r3, #1
 8012006:	7043      	strb	r3, [r0, #1]
 8012008:	4618      	mov	r0, r3
 801200a:	4770      	bx	lr
 801200c:	2000      	movs	r0, #0
 801200e:	4770      	bx	lr

08012010 <__cxa_guard_release>:
 8012010:	2301      	movs	r3, #1
 8012012:	6003      	str	r3, [r0, #0]
 8012014:	4770      	bx	lr

08012016 <__cxa_pure_virtual>:
 8012016:	b508      	push	{r3, lr}
 8012018:	f000 f80c 	bl	8012034 <_ZSt9terminatev>

0801201c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801201c:	b508      	push	{r3, lr}
 801201e:	4780      	blx	r0
 8012020:	f000 f816 	bl	8012050 <abort>

08012024 <_ZSt13get_terminatev>:
 8012024:	4b02      	ldr	r3, [pc, #8]	; (8012030 <_ZSt13get_terminatev+0xc>)
 8012026:	6818      	ldr	r0, [r3, #0]
 8012028:	f3bf 8f5b 	dmb	ish
 801202c:	4770      	bx	lr
 801202e:	bf00      	nop
 8012030:	200000fc 	.word	0x200000fc

08012034 <_ZSt9terminatev>:
 8012034:	b508      	push	{r3, lr}
 8012036:	f7ff fff5 	bl	8012024 <_ZSt13get_terminatev>
 801203a:	f7ff ffef 	bl	801201c <_ZN10__cxxabiv111__terminateEPFvvE>

0801203e <fabs>:
 801203e:	ec51 0b10 	vmov	r0, r1, d0
 8012042:	ee10 2a10 	vmov	r2, s0
 8012046:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801204a:	ec43 2b10 	vmov	d0, r2, r3
 801204e:	4770      	bx	lr

08012050 <abort>:
 8012050:	b508      	push	{r3, lr}
 8012052:	2006      	movs	r0, #6
 8012054:	f000 ff88 	bl	8012f68 <raise>
 8012058:	2001      	movs	r0, #1
 801205a:	f7ee fe92 	bl	8000d82 <_exit>

0801205e <atexit>:
 801205e:	2300      	movs	r3, #0
 8012060:	4601      	mov	r1, r0
 8012062:	461a      	mov	r2, r3
 8012064:	4618      	mov	r0, r3
 8012066:	f002 b921 	b.w	80142ac <__register_exitproc>
	...

0801206c <calloc>:
 801206c:	4b02      	ldr	r3, [pc, #8]	; (8012078 <calloc+0xc>)
 801206e:	460a      	mov	r2, r1
 8012070:	4601      	mov	r1, r0
 8012072:	6818      	ldr	r0, [r3, #0]
 8012074:	f000 bde8 	b.w	8012c48 <_calloc_r>
 8012078:	20000100 	.word	0x20000100

0801207c <__errno>:
 801207c:	4b01      	ldr	r3, [pc, #4]	; (8012084 <__errno+0x8>)
 801207e:	6818      	ldr	r0, [r3, #0]
 8012080:	4770      	bx	lr
 8012082:	bf00      	nop
 8012084:	20000100 	.word	0x20000100

08012088 <_fclose_r>:
 8012088:	b570      	push	{r4, r5, r6, lr}
 801208a:	4605      	mov	r5, r0
 801208c:	460c      	mov	r4, r1
 801208e:	b911      	cbnz	r1, 8012096 <_fclose_r+0xe>
 8012090:	2600      	movs	r6, #0
 8012092:	4630      	mov	r0, r6
 8012094:	bd70      	pop	{r4, r5, r6, pc}
 8012096:	b118      	cbz	r0, 80120a0 <_fclose_r+0x18>
 8012098:	6983      	ldr	r3, [r0, #24]
 801209a:	b90b      	cbnz	r3, 80120a0 <_fclose_r+0x18>
 801209c:	f000 f994 	bl	80123c8 <__sinit>
 80120a0:	4b2c      	ldr	r3, [pc, #176]	; (8012154 <_fclose_r+0xcc>)
 80120a2:	429c      	cmp	r4, r3
 80120a4:	d114      	bne.n	80120d0 <_fclose_r+0x48>
 80120a6:	686c      	ldr	r4, [r5, #4]
 80120a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80120aa:	07d8      	lsls	r0, r3, #31
 80120ac:	d405      	bmi.n	80120ba <_fclose_r+0x32>
 80120ae:	89a3      	ldrh	r3, [r4, #12]
 80120b0:	0599      	lsls	r1, r3, #22
 80120b2:	d402      	bmi.n	80120ba <_fclose_r+0x32>
 80120b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80120b6:	f000 fd3a 	bl	8012b2e <__retarget_lock_acquire_recursive>
 80120ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120be:	b98b      	cbnz	r3, 80120e4 <_fclose_r+0x5c>
 80120c0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80120c2:	f016 0601 	ands.w	r6, r6, #1
 80120c6:	d1e3      	bne.n	8012090 <_fclose_r+0x8>
 80120c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80120ca:	f000 fd32 	bl	8012b32 <__retarget_lock_release_recursive>
 80120ce:	e7e0      	b.n	8012092 <_fclose_r+0xa>
 80120d0:	4b21      	ldr	r3, [pc, #132]	; (8012158 <_fclose_r+0xd0>)
 80120d2:	429c      	cmp	r4, r3
 80120d4:	d101      	bne.n	80120da <_fclose_r+0x52>
 80120d6:	68ac      	ldr	r4, [r5, #8]
 80120d8:	e7e6      	b.n	80120a8 <_fclose_r+0x20>
 80120da:	4b20      	ldr	r3, [pc, #128]	; (801215c <_fclose_r+0xd4>)
 80120dc:	429c      	cmp	r4, r3
 80120de:	bf08      	it	eq
 80120e0:	68ec      	ldreq	r4, [r5, #12]
 80120e2:	e7e1      	b.n	80120a8 <_fclose_r+0x20>
 80120e4:	4621      	mov	r1, r4
 80120e6:	4628      	mov	r0, r5
 80120e8:	f000 f842 	bl	8012170 <__sflush_r>
 80120ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80120ee:	4606      	mov	r6, r0
 80120f0:	b133      	cbz	r3, 8012100 <_fclose_r+0x78>
 80120f2:	6a21      	ldr	r1, [r4, #32]
 80120f4:	4628      	mov	r0, r5
 80120f6:	4798      	blx	r3
 80120f8:	2800      	cmp	r0, #0
 80120fa:	bfb8      	it	lt
 80120fc:	f04f 36ff 	movlt.w	r6, #4294967295
 8012100:	89a3      	ldrh	r3, [r4, #12]
 8012102:	061a      	lsls	r2, r3, #24
 8012104:	d503      	bpl.n	801210e <_fclose_r+0x86>
 8012106:	6921      	ldr	r1, [r4, #16]
 8012108:	4628      	mov	r0, r5
 801210a:	f000 fdad 	bl	8012c68 <_free_r>
 801210e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012110:	b141      	cbz	r1, 8012124 <_fclose_r+0x9c>
 8012112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012116:	4299      	cmp	r1, r3
 8012118:	d002      	beq.n	8012120 <_fclose_r+0x98>
 801211a:	4628      	mov	r0, r5
 801211c:	f000 fda4 	bl	8012c68 <_free_r>
 8012120:	2300      	movs	r3, #0
 8012122:	6363      	str	r3, [r4, #52]	; 0x34
 8012124:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012126:	b121      	cbz	r1, 8012132 <_fclose_r+0xaa>
 8012128:	4628      	mov	r0, r5
 801212a:	f000 fd9d 	bl	8012c68 <_free_r>
 801212e:	2300      	movs	r3, #0
 8012130:	64a3      	str	r3, [r4, #72]	; 0x48
 8012132:	f000 f931 	bl	8012398 <__sfp_lock_acquire>
 8012136:	2300      	movs	r3, #0
 8012138:	81a3      	strh	r3, [r4, #12]
 801213a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801213c:	07db      	lsls	r3, r3, #31
 801213e:	d402      	bmi.n	8012146 <_fclose_r+0xbe>
 8012140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012142:	f000 fcf6 	bl	8012b32 <__retarget_lock_release_recursive>
 8012146:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012148:	f000 fcef 	bl	8012b2a <__retarget_lock_close_recursive>
 801214c:	f000 f92a 	bl	80123a4 <__sfp_lock_release>
 8012150:	e79f      	b.n	8012092 <_fclose_r+0xa>
 8012152:	bf00      	nop
 8012154:	08018d18 	.word	0x08018d18
 8012158:	08018d38 	.word	0x08018d38
 801215c:	08018cf8 	.word	0x08018cf8

08012160 <fclose>:
 8012160:	4b02      	ldr	r3, [pc, #8]	; (801216c <fclose+0xc>)
 8012162:	4601      	mov	r1, r0
 8012164:	6818      	ldr	r0, [r3, #0]
 8012166:	f7ff bf8f 	b.w	8012088 <_fclose_r>
 801216a:	bf00      	nop
 801216c:	20000100 	.word	0x20000100

08012170 <__sflush_r>:
 8012170:	898a      	ldrh	r2, [r1, #12]
 8012172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012176:	4605      	mov	r5, r0
 8012178:	0710      	lsls	r0, r2, #28
 801217a:	460c      	mov	r4, r1
 801217c:	d458      	bmi.n	8012230 <__sflush_r+0xc0>
 801217e:	684b      	ldr	r3, [r1, #4]
 8012180:	2b00      	cmp	r3, #0
 8012182:	dc05      	bgt.n	8012190 <__sflush_r+0x20>
 8012184:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012186:	2b00      	cmp	r3, #0
 8012188:	dc02      	bgt.n	8012190 <__sflush_r+0x20>
 801218a:	2000      	movs	r0, #0
 801218c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012192:	2e00      	cmp	r6, #0
 8012194:	d0f9      	beq.n	801218a <__sflush_r+0x1a>
 8012196:	2300      	movs	r3, #0
 8012198:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801219c:	682f      	ldr	r7, [r5, #0]
 801219e:	602b      	str	r3, [r5, #0]
 80121a0:	d032      	beq.n	8012208 <__sflush_r+0x98>
 80121a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80121a4:	89a3      	ldrh	r3, [r4, #12]
 80121a6:	075a      	lsls	r2, r3, #29
 80121a8:	d505      	bpl.n	80121b6 <__sflush_r+0x46>
 80121aa:	6863      	ldr	r3, [r4, #4]
 80121ac:	1ac0      	subs	r0, r0, r3
 80121ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80121b0:	b10b      	cbz	r3, 80121b6 <__sflush_r+0x46>
 80121b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80121b4:	1ac0      	subs	r0, r0, r3
 80121b6:	2300      	movs	r3, #0
 80121b8:	4602      	mov	r2, r0
 80121ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80121bc:	6a21      	ldr	r1, [r4, #32]
 80121be:	4628      	mov	r0, r5
 80121c0:	47b0      	blx	r6
 80121c2:	1c43      	adds	r3, r0, #1
 80121c4:	89a3      	ldrh	r3, [r4, #12]
 80121c6:	d106      	bne.n	80121d6 <__sflush_r+0x66>
 80121c8:	6829      	ldr	r1, [r5, #0]
 80121ca:	291d      	cmp	r1, #29
 80121cc:	d82c      	bhi.n	8012228 <__sflush_r+0xb8>
 80121ce:	4a2a      	ldr	r2, [pc, #168]	; (8012278 <__sflush_r+0x108>)
 80121d0:	40ca      	lsrs	r2, r1
 80121d2:	07d6      	lsls	r6, r2, #31
 80121d4:	d528      	bpl.n	8012228 <__sflush_r+0xb8>
 80121d6:	2200      	movs	r2, #0
 80121d8:	6062      	str	r2, [r4, #4]
 80121da:	04d9      	lsls	r1, r3, #19
 80121dc:	6922      	ldr	r2, [r4, #16]
 80121de:	6022      	str	r2, [r4, #0]
 80121e0:	d504      	bpl.n	80121ec <__sflush_r+0x7c>
 80121e2:	1c42      	adds	r2, r0, #1
 80121e4:	d101      	bne.n	80121ea <__sflush_r+0x7a>
 80121e6:	682b      	ldr	r3, [r5, #0]
 80121e8:	b903      	cbnz	r3, 80121ec <__sflush_r+0x7c>
 80121ea:	6560      	str	r0, [r4, #84]	; 0x54
 80121ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121ee:	602f      	str	r7, [r5, #0]
 80121f0:	2900      	cmp	r1, #0
 80121f2:	d0ca      	beq.n	801218a <__sflush_r+0x1a>
 80121f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121f8:	4299      	cmp	r1, r3
 80121fa:	d002      	beq.n	8012202 <__sflush_r+0x92>
 80121fc:	4628      	mov	r0, r5
 80121fe:	f000 fd33 	bl	8012c68 <_free_r>
 8012202:	2000      	movs	r0, #0
 8012204:	6360      	str	r0, [r4, #52]	; 0x34
 8012206:	e7c1      	b.n	801218c <__sflush_r+0x1c>
 8012208:	6a21      	ldr	r1, [r4, #32]
 801220a:	2301      	movs	r3, #1
 801220c:	4628      	mov	r0, r5
 801220e:	47b0      	blx	r6
 8012210:	1c41      	adds	r1, r0, #1
 8012212:	d1c7      	bne.n	80121a4 <__sflush_r+0x34>
 8012214:	682b      	ldr	r3, [r5, #0]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d0c4      	beq.n	80121a4 <__sflush_r+0x34>
 801221a:	2b1d      	cmp	r3, #29
 801221c:	d001      	beq.n	8012222 <__sflush_r+0xb2>
 801221e:	2b16      	cmp	r3, #22
 8012220:	d101      	bne.n	8012226 <__sflush_r+0xb6>
 8012222:	602f      	str	r7, [r5, #0]
 8012224:	e7b1      	b.n	801218a <__sflush_r+0x1a>
 8012226:	89a3      	ldrh	r3, [r4, #12]
 8012228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801222c:	81a3      	strh	r3, [r4, #12]
 801222e:	e7ad      	b.n	801218c <__sflush_r+0x1c>
 8012230:	690f      	ldr	r7, [r1, #16]
 8012232:	2f00      	cmp	r7, #0
 8012234:	d0a9      	beq.n	801218a <__sflush_r+0x1a>
 8012236:	0793      	lsls	r3, r2, #30
 8012238:	680e      	ldr	r6, [r1, #0]
 801223a:	bf08      	it	eq
 801223c:	694b      	ldreq	r3, [r1, #20]
 801223e:	600f      	str	r7, [r1, #0]
 8012240:	bf18      	it	ne
 8012242:	2300      	movne	r3, #0
 8012244:	eba6 0807 	sub.w	r8, r6, r7
 8012248:	608b      	str	r3, [r1, #8]
 801224a:	f1b8 0f00 	cmp.w	r8, #0
 801224e:	dd9c      	ble.n	801218a <__sflush_r+0x1a>
 8012250:	6a21      	ldr	r1, [r4, #32]
 8012252:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012254:	4643      	mov	r3, r8
 8012256:	463a      	mov	r2, r7
 8012258:	4628      	mov	r0, r5
 801225a:	47b0      	blx	r6
 801225c:	2800      	cmp	r0, #0
 801225e:	dc06      	bgt.n	801226e <__sflush_r+0xfe>
 8012260:	89a3      	ldrh	r3, [r4, #12]
 8012262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012266:	81a3      	strh	r3, [r4, #12]
 8012268:	f04f 30ff 	mov.w	r0, #4294967295
 801226c:	e78e      	b.n	801218c <__sflush_r+0x1c>
 801226e:	4407      	add	r7, r0
 8012270:	eba8 0800 	sub.w	r8, r8, r0
 8012274:	e7e9      	b.n	801224a <__sflush_r+0xda>
 8012276:	bf00      	nop
 8012278:	20400001 	.word	0x20400001

0801227c <_fflush_r>:
 801227c:	b538      	push	{r3, r4, r5, lr}
 801227e:	690b      	ldr	r3, [r1, #16]
 8012280:	4605      	mov	r5, r0
 8012282:	460c      	mov	r4, r1
 8012284:	b913      	cbnz	r3, 801228c <_fflush_r+0x10>
 8012286:	2500      	movs	r5, #0
 8012288:	4628      	mov	r0, r5
 801228a:	bd38      	pop	{r3, r4, r5, pc}
 801228c:	b118      	cbz	r0, 8012296 <_fflush_r+0x1a>
 801228e:	6983      	ldr	r3, [r0, #24]
 8012290:	b90b      	cbnz	r3, 8012296 <_fflush_r+0x1a>
 8012292:	f000 f899 	bl	80123c8 <__sinit>
 8012296:	4b14      	ldr	r3, [pc, #80]	; (80122e8 <_fflush_r+0x6c>)
 8012298:	429c      	cmp	r4, r3
 801229a:	d11b      	bne.n	80122d4 <_fflush_r+0x58>
 801229c:	686c      	ldr	r4, [r5, #4]
 801229e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d0ef      	beq.n	8012286 <_fflush_r+0xa>
 80122a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80122a8:	07d0      	lsls	r0, r2, #31
 80122aa:	d404      	bmi.n	80122b6 <_fflush_r+0x3a>
 80122ac:	0599      	lsls	r1, r3, #22
 80122ae:	d402      	bmi.n	80122b6 <_fflush_r+0x3a>
 80122b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122b2:	f000 fc3c 	bl	8012b2e <__retarget_lock_acquire_recursive>
 80122b6:	4628      	mov	r0, r5
 80122b8:	4621      	mov	r1, r4
 80122ba:	f7ff ff59 	bl	8012170 <__sflush_r>
 80122be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80122c0:	07da      	lsls	r2, r3, #31
 80122c2:	4605      	mov	r5, r0
 80122c4:	d4e0      	bmi.n	8012288 <_fflush_r+0xc>
 80122c6:	89a3      	ldrh	r3, [r4, #12]
 80122c8:	059b      	lsls	r3, r3, #22
 80122ca:	d4dd      	bmi.n	8012288 <_fflush_r+0xc>
 80122cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122ce:	f000 fc30 	bl	8012b32 <__retarget_lock_release_recursive>
 80122d2:	e7d9      	b.n	8012288 <_fflush_r+0xc>
 80122d4:	4b05      	ldr	r3, [pc, #20]	; (80122ec <_fflush_r+0x70>)
 80122d6:	429c      	cmp	r4, r3
 80122d8:	d101      	bne.n	80122de <_fflush_r+0x62>
 80122da:	68ac      	ldr	r4, [r5, #8]
 80122dc:	e7df      	b.n	801229e <_fflush_r+0x22>
 80122de:	4b04      	ldr	r3, [pc, #16]	; (80122f0 <_fflush_r+0x74>)
 80122e0:	429c      	cmp	r4, r3
 80122e2:	bf08      	it	eq
 80122e4:	68ec      	ldreq	r4, [r5, #12]
 80122e6:	e7da      	b.n	801229e <_fflush_r+0x22>
 80122e8:	08018d18 	.word	0x08018d18
 80122ec:	08018d38 	.word	0x08018d38
 80122f0:	08018cf8 	.word	0x08018cf8

080122f4 <fflush>:
 80122f4:	4601      	mov	r1, r0
 80122f6:	b920      	cbnz	r0, 8012302 <fflush+0xe>
 80122f8:	4b04      	ldr	r3, [pc, #16]	; (801230c <fflush+0x18>)
 80122fa:	4905      	ldr	r1, [pc, #20]	; (8012310 <fflush+0x1c>)
 80122fc:	6818      	ldr	r0, [r3, #0]
 80122fe:	f000 babb 	b.w	8012878 <_fwalk_reent>
 8012302:	4b04      	ldr	r3, [pc, #16]	; (8012314 <fflush+0x20>)
 8012304:	6818      	ldr	r0, [r3, #0]
 8012306:	f7ff bfb9 	b.w	801227c <_fflush_r>
 801230a:	bf00      	nop
 801230c:	08018d58 	.word	0x08018d58
 8012310:	0801227d 	.word	0x0801227d
 8012314:	20000100 	.word	0x20000100

08012318 <std>:
 8012318:	2300      	movs	r3, #0
 801231a:	b510      	push	{r4, lr}
 801231c:	4604      	mov	r4, r0
 801231e:	e9c0 3300 	strd	r3, r3, [r0]
 8012322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012326:	6083      	str	r3, [r0, #8]
 8012328:	8181      	strh	r1, [r0, #12]
 801232a:	6643      	str	r3, [r0, #100]	; 0x64
 801232c:	81c2      	strh	r2, [r0, #14]
 801232e:	6183      	str	r3, [r0, #24]
 8012330:	4619      	mov	r1, r3
 8012332:	2208      	movs	r2, #8
 8012334:	305c      	adds	r0, #92	; 0x5c
 8012336:	f000 fc7f 	bl	8012c38 <memset>
 801233a:	4b05      	ldr	r3, [pc, #20]	; (8012350 <std+0x38>)
 801233c:	6263      	str	r3, [r4, #36]	; 0x24
 801233e:	4b05      	ldr	r3, [pc, #20]	; (8012354 <std+0x3c>)
 8012340:	62a3      	str	r3, [r4, #40]	; 0x28
 8012342:	4b05      	ldr	r3, [pc, #20]	; (8012358 <std+0x40>)
 8012344:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012346:	4b05      	ldr	r3, [pc, #20]	; (801235c <std+0x44>)
 8012348:	6224      	str	r4, [r4, #32]
 801234a:	6323      	str	r3, [r4, #48]	; 0x30
 801234c:	bd10      	pop	{r4, pc}
 801234e:	bf00      	nop
 8012350:	08012fa1 	.word	0x08012fa1
 8012354:	08012fc7 	.word	0x08012fc7
 8012358:	08012fff 	.word	0x08012fff
 801235c:	08013023 	.word	0x08013023

08012360 <_cleanup_r>:
 8012360:	4901      	ldr	r1, [pc, #4]	; (8012368 <_cleanup_r+0x8>)
 8012362:	f000 ba89 	b.w	8012878 <_fwalk_reent>
 8012366:	bf00      	nop
 8012368:	0801227d 	.word	0x0801227d

0801236c <__sfmoreglue>:
 801236c:	b570      	push	{r4, r5, r6, lr}
 801236e:	1e4a      	subs	r2, r1, #1
 8012370:	2568      	movs	r5, #104	; 0x68
 8012372:	4355      	muls	r5, r2
 8012374:	460e      	mov	r6, r1
 8012376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801237a:	f000 fcc5 	bl	8012d08 <_malloc_r>
 801237e:	4604      	mov	r4, r0
 8012380:	b140      	cbz	r0, 8012394 <__sfmoreglue+0x28>
 8012382:	2100      	movs	r1, #0
 8012384:	e9c0 1600 	strd	r1, r6, [r0]
 8012388:	300c      	adds	r0, #12
 801238a:	60a0      	str	r0, [r4, #8]
 801238c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012390:	f000 fc52 	bl	8012c38 <memset>
 8012394:	4620      	mov	r0, r4
 8012396:	bd70      	pop	{r4, r5, r6, pc}

08012398 <__sfp_lock_acquire>:
 8012398:	4801      	ldr	r0, [pc, #4]	; (80123a0 <__sfp_lock_acquire+0x8>)
 801239a:	f000 bbc8 	b.w	8012b2e <__retarget_lock_acquire_recursive>
 801239e:	bf00      	nop
 80123a0:	20000c60 	.word	0x20000c60

080123a4 <__sfp_lock_release>:
 80123a4:	4801      	ldr	r0, [pc, #4]	; (80123ac <__sfp_lock_release+0x8>)
 80123a6:	f000 bbc4 	b.w	8012b32 <__retarget_lock_release_recursive>
 80123aa:	bf00      	nop
 80123ac:	20000c60 	.word	0x20000c60

080123b0 <__sinit_lock_acquire>:
 80123b0:	4801      	ldr	r0, [pc, #4]	; (80123b8 <__sinit_lock_acquire+0x8>)
 80123b2:	f000 bbbc 	b.w	8012b2e <__retarget_lock_acquire_recursive>
 80123b6:	bf00      	nop
 80123b8:	20000c5b 	.word	0x20000c5b

080123bc <__sinit_lock_release>:
 80123bc:	4801      	ldr	r0, [pc, #4]	; (80123c4 <__sinit_lock_release+0x8>)
 80123be:	f000 bbb8 	b.w	8012b32 <__retarget_lock_release_recursive>
 80123c2:	bf00      	nop
 80123c4:	20000c5b 	.word	0x20000c5b

080123c8 <__sinit>:
 80123c8:	b510      	push	{r4, lr}
 80123ca:	4604      	mov	r4, r0
 80123cc:	f7ff fff0 	bl	80123b0 <__sinit_lock_acquire>
 80123d0:	69a3      	ldr	r3, [r4, #24]
 80123d2:	b11b      	cbz	r3, 80123dc <__sinit+0x14>
 80123d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123d8:	f7ff bff0 	b.w	80123bc <__sinit_lock_release>
 80123dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80123e0:	6523      	str	r3, [r4, #80]	; 0x50
 80123e2:	4b13      	ldr	r3, [pc, #76]	; (8012430 <__sinit+0x68>)
 80123e4:	4a13      	ldr	r2, [pc, #76]	; (8012434 <__sinit+0x6c>)
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80123ea:	42a3      	cmp	r3, r4
 80123ec:	bf04      	itt	eq
 80123ee:	2301      	moveq	r3, #1
 80123f0:	61a3      	streq	r3, [r4, #24]
 80123f2:	4620      	mov	r0, r4
 80123f4:	f000 f820 	bl	8012438 <__sfp>
 80123f8:	6060      	str	r0, [r4, #4]
 80123fa:	4620      	mov	r0, r4
 80123fc:	f000 f81c 	bl	8012438 <__sfp>
 8012400:	60a0      	str	r0, [r4, #8]
 8012402:	4620      	mov	r0, r4
 8012404:	f000 f818 	bl	8012438 <__sfp>
 8012408:	2200      	movs	r2, #0
 801240a:	60e0      	str	r0, [r4, #12]
 801240c:	2104      	movs	r1, #4
 801240e:	6860      	ldr	r0, [r4, #4]
 8012410:	f7ff ff82 	bl	8012318 <std>
 8012414:	68a0      	ldr	r0, [r4, #8]
 8012416:	2201      	movs	r2, #1
 8012418:	2109      	movs	r1, #9
 801241a:	f7ff ff7d 	bl	8012318 <std>
 801241e:	68e0      	ldr	r0, [r4, #12]
 8012420:	2202      	movs	r2, #2
 8012422:	2112      	movs	r1, #18
 8012424:	f7ff ff78 	bl	8012318 <std>
 8012428:	2301      	movs	r3, #1
 801242a:	61a3      	str	r3, [r4, #24]
 801242c:	e7d2      	b.n	80123d4 <__sinit+0xc>
 801242e:	bf00      	nop
 8012430:	08018d58 	.word	0x08018d58
 8012434:	08012361 	.word	0x08012361

08012438 <__sfp>:
 8012438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801243a:	4607      	mov	r7, r0
 801243c:	f7ff ffac 	bl	8012398 <__sfp_lock_acquire>
 8012440:	4b1e      	ldr	r3, [pc, #120]	; (80124bc <__sfp+0x84>)
 8012442:	681e      	ldr	r6, [r3, #0]
 8012444:	69b3      	ldr	r3, [r6, #24]
 8012446:	b913      	cbnz	r3, 801244e <__sfp+0x16>
 8012448:	4630      	mov	r0, r6
 801244a:	f7ff ffbd 	bl	80123c8 <__sinit>
 801244e:	3648      	adds	r6, #72	; 0x48
 8012450:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012454:	3b01      	subs	r3, #1
 8012456:	d503      	bpl.n	8012460 <__sfp+0x28>
 8012458:	6833      	ldr	r3, [r6, #0]
 801245a:	b30b      	cbz	r3, 80124a0 <__sfp+0x68>
 801245c:	6836      	ldr	r6, [r6, #0]
 801245e:	e7f7      	b.n	8012450 <__sfp+0x18>
 8012460:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012464:	b9d5      	cbnz	r5, 801249c <__sfp+0x64>
 8012466:	4b16      	ldr	r3, [pc, #88]	; (80124c0 <__sfp+0x88>)
 8012468:	60e3      	str	r3, [r4, #12]
 801246a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801246e:	6665      	str	r5, [r4, #100]	; 0x64
 8012470:	f000 fb5a 	bl	8012b28 <__retarget_lock_init_recursive>
 8012474:	f7ff ff96 	bl	80123a4 <__sfp_lock_release>
 8012478:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801247c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012480:	6025      	str	r5, [r4, #0]
 8012482:	61a5      	str	r5, [r4, #24]
 8012484:	2208      	movs	r2, #8
 8012486:	4629      	mov	r1, r5
 8012488:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801248c:	f000 fbd4 	bl	8012c38 <memset>
 8012490:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012494:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012498:	4620      	mov	r0, r4
 801249a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801249c:	3468      	adds	r4, #104	; 0x68
 801249e:	e7d9      	b.n	8012454 <__sfp+0x1c>
 80124a0:	2104      	movs	r1, #4
 80124a2:	4638      	mov	r0, r7
 80124a4:	f7ff ff62 	bl	801236c <__sfmoreglue>
 80124a8:	4604      	mov	r4, r0
 80124aa:	6030      	str	r0, [r6, #0]
 80124ac:	2800      	cmp	r0, #0
 80124ae:	d1d5      	bne.n	801245c <__sfp+0x24>
 80124b0:	f7ff ff78 	bl	80123a4 <__sfp_lock_release>
 80124b4:	230c      	movs	r3, #12
 80124b6:	603b      	str	r3, [r7, #0]
 80124b8:	e7ee      	b.n	8012498 <__sfp+0x60>
 80124ba:	bf00      	nop
 80124bc:	08018d58 	.word	0x08018d58
 80124c0:	ffff0001 	.word	0xffff0001

080124c4 <_fopen_r>:
 80124c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124c6:	460f      	mov	r7, r1
 80124c8:	4611      	mov	r1, r2
 80124ca:	aa01      	add	r2, sp, #4
 80124cc:	4605      	mov	r5, r0
 80124ce:	f001 ff81 	bl	80143d4 <__sflags>
 80124d2:	4606      	mov	r6, r0
 80124d4:	b918      	cbnz	r0, 80124de <_fopen_r+0x1a>
 80124d6:	2400      	movs	r4, #0
 80124d8:	4620      	mov	r0, r4
 80124da:	b003      	add	sp, #12
 80124dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124de:	4628      	mov	r0, r5
 80124e0:	f7ff ffaa 	bl	8012438 <__sfp>
 80124e4:	4604      	mov	r4, r0
 80124e6:	2800      	cmp	r0, #0
 80124e8:	d0f5      	beq.n	80124d6 <_fopen_r+0x12>
 80124ea:	4639      	mov	r1, r7
 80124ec:	9a01      	ldr	r2, [sp, #4]
 80124ee:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 80124f2:	4628      	mov	r0, r5
 80124f4:	f000 fc62 	bl	8012dbc <_open_r>
 80124f8:	1e07      	subs	r7, r0, #0
 80124fa:	da09      	bge.n	8012510 <_fopen_r+0x4c>
 80124fc:	2500      	movs	r5, #0
 80124fe:	f7ff ff4b 	bl	8012398 <__sfp_lock_acquire>
 8012502:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012504:	81a5      	strh	r5, [r4, #12]
 8012506:	f000 fb10 	bl	8012b2a <__retarget_lock_close_recursive>
 801250a:	f7ff ff4b 	bl	80123a4 <__sfp_lock_release>
 801250e:	e7e2      	b.n	80124d6 <_fopen_r+0x12>
 8012510:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012512:	07db      	lsls	r3, r3, #31
 8012514:	d405      	bmi.n	8012522 <_fopen_r+0x5e>
 8012516:	89a3      	ldrh	r3, [r4, #12]
 8012518:	0598      	lsls	r0, r3, #22
 801251a:	d402      	bmi.n	8012522 <_fopen_r+0x5e>
 801251c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801251e:	f000 fb06 	bl	8012b2e <__retarget_lock_acquire_recursive>
 8012522:	4b0e      	ldr	r3, [pc, #56]	; (801255c <_fopen_r+0x98>)
 8012524:	6263      	str	r3, [r4, #36]	; 0x24
 8012526:	4b0e      	ldr	r3, [pc, #56]	; (8012560 <_fopen_r+0x9c>)
 8012528:	62a3      	str	r3, [r4, #40]	; 0x28
 801252a:	4b0e      	ldr	r3, [pc, #56]	; (8012564 <_fopen_r+0xa0>)
 801252c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801252e:	05f1      	lsls	r1, r6, #23
 8012530:	4b0d      	ldr	r3, [pc, #52]	; (8012568 <_fopen_r+0xa4>)
 8012532:	81e7      	strh	r7, [r4, #14]
 8012534:	81a6      	strh	r6, [r4, #12]
 8012536:	6224      	str	r4, [r4, #32]
 8012538:	6323      	str	r3, [r4, #48]	; 0x30
 801253a:	d505      	bpl.n	8012548 <_fopen_r+0x84>
 801253c:	2302      	movs	r3, #2
 801253e:	2200      	movs	r2, #0
 8012540:	4621      	mov	r1, r4
 8012542:	4628      	mov	r0, r5
 8012544:	f000 f888 	bl	8012658 <_fseek_r>
 8012548:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801254a:	07da      	lsls	r2, r3, #31
 801254c:	d4c4      	bmi.n	80124d8 <_fopen_r+0x14>
 801254e:	89a3      	ldrh	r3, [r4, #12]
 8012550:	059b      	lsls	r3, r3, #22
 8012552:	d4c1      	bmi.n	80124d8 <_fopen_r+0x14>
 8012554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012556:	f000 faec 	bl	8012b32 <__retarget_lock_release_recursive>
 801255a:	e7bd      	b.n	80124d8 <_fopen_r+0x14>
 801255c:	08012fa1 	.word	0x08012fa1
 8012560:	08012fc7 	.word	0x08012fc7
 8012564:	08012fff 	.word	0x08012fff
 8012568:	08013023 	.word	0x08013023

0801256c <fopen>:
 801256c:	4b02      	ldr	r3, [pc, #8]	; (8012578 <fopen+0xc>)
 801256e:	460a      	mov	r2, r1
 8012570:	4601      	mov	r1, r0
 8012572:	6818      	ldr	r0, [r3, #0]
 8012574:	f7ff bfa6 	b.w	80124c4 <_fopen_r>
 8012578:	20000100 	.word	0x20000100

0801257c <_fputs_r>:
 801257c:	b570      	push	{r4, r5, r6, lr}
 801257e:	460e      	mov	r6, r1
 8012580:	4614      	mov	r4, r2
 8012582:	4605      	mov	r5, r0
 8012584:	b118      	cbz	r0, 801258e <_fputs_r+0x12>
 8012586:	6983      	ldr	r3, [r0, #24]
 8012588:	b90b      	cbnz	r3, 801258e <_fputs_r+0x12>
 801258a:	f7ff ff1d 	bl	80123c8 <__sinit>
 801258e:	4b2b      	ldr	r3, [pc, #172]	; (801263c <_fputs_r+0xc0>)
 8012590:	429c      	cmp	r4, r3
 8012592:	d11e      	bne.n	80125d2 <_fputs_r+0x56>
 8012594:	686c      	ldr	r4, [r5, #4]
 8012596:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012598:	07da      	lsls	r2, r3, #31
 801259a:	d405      	bmi.n	80125a8 <_fputs_r+0x2c>
 801259c:	89a3      	ldrh	r3, [r4, #12]
 801259e:	059b      	lsls	r3, r3, #22
 80125a0:	d402      	bmi.n	80125a8 <_fputs_r+0x2c>
 80125a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80125a4:	f000 fac3 	bl	8012b2e <__retarget_lock_acquire_recursive>
 80125a8:	89a3      	ldrh	r3, [r4, #12]
 80125aa:	0718      	lsls	r0, r3, #28
 80125ac:	d51b      	bpl.n	80125e6 <_fputs_r+0x6a>
 80125ae:	6923      	ldr	r3, [r4, #16]
 80125b0:	b1cb      	cbz	r3, 80125e6 <_fputs_r+0x6a>
 80125b2:	3e01      	subs	r6, #1
 80125b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80125b8:	bb39      	cbnz	r1, 801260a <_fputs_r+0x8e>
 80125ba:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80125bc:	f015 0501 	ands.w	r5, r5, #1
 80125c0:	d139      	bne.n	8012636 <_fputs_r+0xba>
 80125c2:	89a3      	ldrh	r3, [r4, #12]
 80125c4:	0599      	lsls	r1, r3, #22
 80125c6:	d402      	bmi.n	80125ce <_fputs_r+0x52>
 80125c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80125ca:	f000 fab2 	bl	8012b32 <__retarget_lock_release_recursive>
 80125ce:	4628      	mov	r0, r5
 80125d0:	bd70      	pop	{r4, r5, r6, pc}
 80125d2:	4b1b      	ldr	r3, [pc, #108]	; (8012640 <_fputs_r+0xc4>)
 80125d4:	429c      	cmp	r4, r3
 80125d6:	d101      	bne.n	80125dc <_fputs_r+0x60>
 80125d8:	68ac      	ldr	r4, [r5, #8]
 80125da:	e7dc      	b.n	8012596 <_fputs_r+0x1a>
 80125dc:	4b19      	ldr	r3, [pc, #100]	; (8012644 <_fputs_r+0xc8>)
 80125de:	429c      	cmp	r4, r3
 80125e0:	bf08      	it	eq
 80125e2:	68ec      	ldreq	r4, [r5, #12]
 80125e4:	e7d7      	b.n	8012596 <_fputs_r+0x1a>
 80125e6:	4621      	mov	r1, r4
 80125e8:	4628      	mov	r0, r5
 80125ea:	f001 fdf1 	bl	80141d0 <__swsetup_r>
 80125ee:	2800      	cmp	r0, #0
 80125f0:	d0df      	beq.n	80125b2 <_fputs_r+0x36>
 80125f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80125f4:	07da      	lsls	r2, r3, #31
 80125f6:	d405      	bmi.n	8012604 <_fputs_r+0x88>
 80125f8:	89a3      	ldrh	r3, [r4, #12]
 80125fa:	059b      	lsls	r3, r3, #22
 80125fc:	d402      	bmi.n	8012604 <_fputs_r+0x88>
 80125fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012600:	f000 fa97 	bl	8012b32 <__retarget_lock_release_recursive>
 8012604:	f04f 35ff 	mov.w	r5, #4294967295
 8012608:	e7e1      	b.n	80125ce <_fputs_r+0x52>
 801260a:	68a3      	ldr	r3, [r4, #8]
 801260c:	3b01      	subs	r3, #1
 801260e:	2b00      	cmp	r3, #0
 8012610:	60a3      	str	r3, [r4, #8]
 8012612:	da04      	bge.n	801261e <_fputs_r+0xa2>
 8012614:	69a2      	ldr	r2, [r4, #24]
 8012616:	4293      	cmp	r3, r2
 8012618:	db06      	blt.n	8012628 <_fputs_r+0xac>
 801261a:	290a      	cmp	r1, #10
 801261c:	d004      	beq.n	8012628 <_fputs_r+0xac>
 801261e:	6823      	ldr	r3, [r4, #0]
 8012620:	1c5a      	adds	r2, r3, #1
 8012622:	6022      	str	r2, [r4, #0]
 8012624:	7019      	strb	r1, [r3, #0]
 8012626:	e7c5      	b.n	80125b4 <_fputs_r+0x38>
 8012628:	4622      	mov	r2, r4
 801262a:	4628      	mov	r0, r5
 801262c:	f001 fd6c 	bl	8014108 <__swbuf_r>
 8012630:	3001      	adds	r0, #1
 8012632:	d1bf      	bne.n	80125b4 <_fputs_r+0x38>
 8012634:	e7dd      	b.n	80125f2 <_fputs_r+0x76>
 8012636:	460d      	mov	r5, r1
 8012638:	e7c9      	b.n	80125ce <_fputs_r+0x52>
 801263a:	bf00      	nop
 801263c:	08018d18 	.word	0x08018d18
 8012640:	08018d38 	.word	0x08018d38
 8012644:	08018cf8 	.word	0x08018cf8

08012648 <fputs>:
 8012648:	4b02      	ldr	r3, [pc, #8]	; (8012654 <fputs+0xc>)
 801264a:	460a      	mov	r2, r1
 801264c:	4601      	mov	r1, r0
 801264e:	6818      	ldr	r0, [r3, #0]
 8012650:	f7ff bf94 	b.w	801257c <_fputs_r>
 8012654:	20000100 	.word	0x20000100

08012658 <_fseek_r>:
 8012658:	f000 b800 	b.w	801265c <_fseeko_r>

0801265c <_fseeko_r>:
 801265c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012660:	460c      	mov	r4, r1
 8012662:	4617      	mov	r7, r2
 8012664:	461e      	mov	r6, r3
 8012666:	4605      	mov	r5, r0
 8012668:	b118      	cbz	r0, 8012672 <_fseeko_r+0x16>
 801266a:	6983      	ldr	r3, [r0, #24]
 801266c:	b90b      	cbnz	r3, 8012672 <_fseeko_r+0x16>
 801266e:	f7ff feab 	bl	80123c8 <__sinit>
 8012672:	4b44      	ldr	r3, [pc, #272]	; (8012784 <_fseeko_r+0x128>)
 8012674:	429c      	cmp	r4, r3
 8012676:	d122      	bne.n	80126be <_fseeko_r+0x62>
 8012678:	686c      	ldr	r4, [r5, #4]
 801267a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801267c:	07d9      	lsls	r1, r3, #31
 801267e:	d405      	bmi.n	801268c <_fseeko_r+0x30>
 8012680:	89a3      	ldrh	r3, [r4, #12]
 8012682:	059a      	lsls	r2, r3, #22
 8012684:	d402      	bmi.n	801268c <_fseeko_r+0x30>
 8012686:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012688:	f000 fa51 	bl	8012b2e <__retarget_lock_acquire_recursive>
 801268c:	89a3      	ldrh	r3, [r4, #12]
 801268e:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8012692:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8012696:	d103      	bne.n	80126a0 <_fseeko_r+0x44>
 8012698:	4621      	mov	r1, r4
 801269a:	4628      	mov	r0, r5
 801269c:	f7ff fdee 	bl	801227c <_fflush_r>
 80126a0:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80126a4:	f1b8 0f00 	cmp.w	r8, #0
 80126a8:	d113      	bne.n	80126d2 <_fseeko_r+0x76>
 80126aa:	231d      	movs	r3, #29
 80126ac:	602b      	str	r3, [r5, #0]
 80126ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126b0:	07d9      	lsls	r1, r3, #31
 80126b2:	d55d      	bpl.n	8012770 <_fseeko_r+0x114>
 80126b4:	f04f 36ff 	mov.w	r6, #4294967295
 80126b8:	4630      	mov	r0, r6
 80126ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126be:	4b32      	ldr	r3, [pc, #200]	; (8012788 <_fseeko_r+0x12c>)
 80126c0:	429c      	cmp	r4, r3
 80126c2:	d101      	bne.n	80126c8 <_fseeko_r+0x6c>
 80126c4:	68ac      	ldr	r4, [r5, #8]
 80126c6:	e7d8      	b.n	801267a <_fseeko_r+0x1e>
 80126c8:	4b30      	ldr	r3, [pc, #192]	; (801278c <_fseeko_r+0x130>)
 80126ca:	429c      	cmp	r4, r3
 80126cc:	bf08      	it	eq
 80126ce:	68ec      	ldreq	r4, [r5, #12]
 80126d0:	e7d3      	b.n	801267a <_fseeko_r+0x1e>
 80126d2:	2e01      	cmp	r6, #1
 80126d4:	d036      	beq.n	8012744 <_fseeko_r+0xe8>
 80126d6:	f036 0302 	bics.w	r3, r6, #2
 80126da:	d147      	bne.n	801276c <_fseeko_r+0x110>
 80126dc:	6923      	ldr	r3, [r4, #16]
 80126de:	b91b      	cbnz	r3, 80126e8 <_fseeko_r+0x8c>
 80126e0:	4621      	mov	r1, r4
 80126e2:	4628      	mov	r0, r5
 80126e4:	f000 fa4a 	bl	8012b7c <__smakebuf_r>
 80126e8:	4621      	mov	r1, r4
 80126ea:	4628      	mov	r0, r5
 80126ec:	f7ff fdc6 	bl	801227c <_fflush_r>
 80126f0:	2800      	cmp	r0, #0
 80126f2:	d1dc      	bne.n	80126ae <_fseeko_r+0x52>
 80126f4:	6a21      	ldr	r1, [r4, #32]
 80126f6:	4633      	mov	r3, r6
 80126f8:	463a      	mov	r2, r7
 80126fa:	4628      	mov	r0, r5
 80126fc:	47c0      	blx	r8
 80126fe:	3001      	adds	r0, #1
 8012700:	d0d5      	beq.n	80126ae <_fseeko_r+0x52>
 8012702:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012704:	b141      	cbz	r1, 8012718 <_fseeko_r+0xbc>
 8012706:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801270a:	4299      	cmp	r1, r3
 801270c:	d002      	beq.n	8012714 <_fseeko_r+0xb8>
 801270e:	4628      	mov	r0, r5
 8012710:	f000 faaa 	bl	8012c68 <_free_r>
 8012714:	2300      	movs	r3, #0
 8012716:	6363      	str	r3, [r4, #52]	; 0x34
 8012718:	6923      	ldr	r3, [r4, #16]
 801271a:	6023      	str	r3, [r4, #0]
 801271c:	89a3      	ldrh	r3, [r4, #12]
 801271e:	2500      	movs	r5, #0
 8012720:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8012724:	6065      	str	r5, [r4, #4]
 8012726:	81a3      	strh	r3, [r4, #12]
 8012728:	2208      	movs	r2, #8
 801272a:	4629      	mov	r1, r5
 801272c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012730:	f000 fa82 	bl	8012c38 <memset>
 8012734:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8012736:	f016 0601 	ands.w	r6, r6, #1
 801273a:	d120      	bne.n	801277e <_fseeko_r+0x122>
 801273c:	89a3      	ldrh	r3, [r4, #12]
 801273e:	059b      	lsls	r3, r3, #22
 8012740:	d4ba      	bmi.n	80126b8 <_fseeko_r+0x5c>
 8012742:	e00c      	b.n	801275e <_fseeko_r+0x102>
 8012744:	4621      	mov	r1, r4
 8012746:	4628      	mov	r0, r5
 8012748:	f000 f822 	bl	8012790 <_ftello_r>
 801274c:	1c43      	adds	r3, r0, #1
 801274e:	4606      	mov	r6, r0
 8012750:	d109      	bne.n	8012766 <_fseeko_r+0x10a>
 8012752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012754:	07dd      	lsls	r5, r3, #31
 8012756:	d4ad      	bmi.n	80126b4 <_fseeko_r+0x58>
 8012758:	89a3      	ldrh	r3, [r4, #12]
 801275a:	0598      	lsls	r0, r3, #22
 801275c:	d4aa      	bmi.n	80126b4 <_fseeko_r+0x58>
 801275e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012760:	f000 f9e7 	bl	8012b32 <__retarget_lock_release_recursive>
 8012764:	e7a8      	b.n	80126b8 <_fseeko_r+0x5c>
 8012766:	4407      	add	r7, r0
 8012768:	2600      	movs	r6, #0
 801276a:	e7b7      	b.n	80126dc <_fseeko_r+0x80>
 801276c:	2316      	movs	r3, #22
 801276e:	e79d      	b.n	80126ac <_fseeko_r+0x50>
 8012770:	89a3      	ldrh	r3, [r4, #12]
 8012772:	059a      	lsls	r2, r3, #22
 8012774:	d49e      	bmi.n	80126b4 <_fseeko_r+0x58>
 8012776:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012778:	f000 f9db 	bl	8012b32 <__retarget_lock_release_recursive>
 801277c:	e79a      	b.n	80126b4 <_fseeko_r+0x58>
 801277e:	462e      	mov	r6, r5
 8012780:	e79a      	b.n	80126b8 <_fseeko_r+0x5c>
 8012782:	bf00      	nop
 8012784:	08018d18 	.word	0x08018d18
 8012788:	08018d38 	.word	0x08018d38
 801278c:	08018cf8 	.word	0x08018cf8

08012790 <_ftello_r>:
 8012790:	b570      	push	{r4, r5, r6, lr}
 8012792:	460c      	mov	r4, r1
 8012794:	4605      	mov	r5, r0
 8012796:	b118      	cbz	r0, 80127a0 <_ftello_r+0x10>
 8012798:	6983      	ldr	r3, [r0, #24]
 801279a:	b90b      	cbnz	r3, 80127a0 <_ftello_r+0x10>
 801279c:	f7ff fe14 	bl	80123c8 <__sinit>
 80127a0:	4b32      	ldr	r3, [pc, #200]	; (801286c <_ftello_r+0xdc>)
 80127a2:	429c      	cmp	r4, r3
 80127a4:	d114      	bne.n	80127d0 <_ftello_r+0x40>
 80127a6:	686c      	ldr	r4, [r5, #4]
 80127a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127aa:	07da      	lsls	r2, r3, #31
 80127ac:	d405      	bmi.n	80127ba <_ftello_r+0x2a>
 80127ae:	89a3      	ldrh	r3, [r4, #12]
 80127b0:	059b      	lsls	r3, r3, #22
 80127b2:	d402      	bmi.n	80127ba <_ftello_r+0x2a>
 80127b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127b6:	f000 f9ba 	bl	8012b2e <__retarget_lock_acquire_recursive>
 80127ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127bc:	b9ce      	cbnz	r6, 80127f2 <_ftello_r+0x62>
 80127be:	231d      	movs	r3, #29
 80127c0:	602b      	str	r3, [r5, #0]
 80127c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127c4:	07de      	lsls	r6, r3, #31
 80127c6:	d50d      	bpl.n	80127e4 <_ftello_r+0x54>
 80127c8:	f04f 35ff 	mov.w	r5, #4294967295
 80127cc:	4628      	mov	r0, r5
 80127ce:	bd70      	pop	{r4, r5, r6, pc}
 80127d0:	4b27      	ldr	r3, [pc, #156]	; (8012870 <_ftello_r+0xe0>)
 80127d2:	429c      	cmp	r4, r3
 80127d4:	d101      	bne.n	80127da <_ftello_r+0x4a>
 80127d6:	68ac      	ldr	r4, [r5, #8]
 80127d8:	e7e6      	b.n	80127a8 <_ftello_r+0x18>
 80127da:	4b26      	ldr	r3, [pc, #152]	; (8012874 <_ftello_r+0xe4>)
 80127dc:	429c      	cmp	r4, r3
 80127de:	bf08      	it	eq
 80127e0:	68ec      	ldreq	r4, [r5, #12]
 80127e2:	e7e1      	b.n	80127a8 <_ftello_r+0x18>
 80127e4:	89a3      	ldrh	r3, [r4, #12]
 80127e6:	059d      	lsls	r5, r3, #22
 80127e8:	d4ee      	bmi.n	80127c8 <_ftello_r+0x38>
 80127ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127ec:	f000 f9a1 	bl	8012b32 <__retarget_lock_release_recursive>
 80127f0:	e7ea      	b.n	80127c8 <_ftello_r+0x38>
 80127f2:	89a2      	ldrh	r2, [r4, #12]
 80127f4:	f002 030c 	and.w	r3, r2, #12
 80127f8:	2b08      	cmp	r3, #8
 80127fa:	d119      	bne.n	8012830 <_ftello_r+0xa0>
 80127fc:	6823      	ldr	r3, [r4, #0]
 80127fe:	b1bb      	cbz	r3, 8012830 <_ftello_r+0xa0>
 8012800:	6921      	ldr	r1, [r4, #16]
 8012802:	1a5b      	subs	r3, r3, r1
 8012804:	2b00      	cmp	r3, #0
 8012806:	dd13      	ble.n	8012830 <_ftello_r+0xa0>
 8012808:	05d0      	lsls	r0, r2, #23
 801280a:	d511      	bpl.n	8012830 <_ftello_r+0xa0>
 801280c:	2302      	movs	r3, #2
 801280e:	2200      	movs	r2, #0
 8012810:	6a21      	ldr	r1, [r4, #32]
 8012812:	4628      	mov	r0, r5
 8012814:	47b0      	blx	r6
 8012816:	1c41      	adds	r1, r0, #1
 8012818:	4605      	mov	r5, r0
 801281a:	d10d      	bne.n	8012838 <_ftello_r+0xa8>
 801281c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801281e:	07da      	lsls	r2, r3, #31
 8012820:	d4d2      	bmi.n	80127c8 <_ftello_r+0x38>
 8012822:	89a3      	ldrh	r3, [r4, #12]
 8012824:	059b      	lsls	r3, r3, #22
 8012826:	d4cf      	bmi.n	80127c8 <_ftello_r+0x38>
 8012828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801282a:	f000 f982 	bl	8012b32 <__retarget_lock_release_recursive>
 801282e:	e7cd      	b.n	80127cc <_ftello_r+0x3c>
 8012830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012834:	d00f      	beq.n	8012856 <_ftello_r+0xc6>
 8012836:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8012838:	89a2      	ldrh	r2, [r4, #12]
 801283a:	0756      	lsls	r6, r2, #29
 801283c:	d50d      	bpl.n	801285a <_ftello_r+0xca>
 801283e:	6863      	ldr	r3, [r4, #4]
 8012840:	1aed      	subs	r5, r5, r3
 8012842:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012844:	b10b      	cbz	r3, 801284a <_ftello_r+0xba>
 8012846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012848:	1aed      	subs	r5, r5, r3
 801284a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801284c:	07d9      	lsls	r1, r3, #31
 801284e:	d4bd      	bmi.n	80127cc <_ftello_r+0x3c>
 8012850:	0593      	lsls	r3, r2, #22
 8012852:	d4bb      	bmi.n	80127cc <_ftello_r+0x3c>
 8012854:	e7e8      	b.n	8012828 <_ftello_r+0x98>
 8012856:	2301      	movs	r3, #1
 8012858:	e7da      	b.n	8012810 <_ftello_r+0x80>
 801285a:	0710      	lsls	r0, r2, #28
 801285c:	d5f5      	bpl.n	801284a <_ftello_r+0xba>
 801285e:	6823      	ldr	r3, [r4, #0]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d0f2      	beq.n	801284a <_ftello_r+0xba>
 8012864:	6921      	ldr	r1, [r4, #16]
 8012866:	1a5b      	subs	r3, r3, r1
 8012868:	441d      	add	r5, r3
 801286a:	e7ee      	b.n	801284a <_ftello_r+0xba>
 801286c:	08018d18 	.word	0x08018d18
 8012870:	08018d38 	.word	0x08018d38
 8012874:	08018cf8 	.word	0x08018cf8

08012878 <_fwalk_reent>:
 8012878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801287c:	4606      	mov	r6, r0
 801287e:	4688      	mov	r8, r1
 8012880:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012884:	2700      	movs	r7, #0
 8012886:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801288a:	f1b9 0901 	subs.w	r9, r9, #1
 801288e:	d505      	bpl.n	801289c <_fwalk_reent+0x24>
 8012890:	6824      	ldr	r4, [r4, #0]
 8012892:	2c00      	cmp	r4, #0
 8012894:	d1f7      	bne.n	8012886 <_fwalk_reent+0xe>
 8012896:	4638      	mov	r0, r7
 8012898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801289c:	89ab      	ldrh	r3, [r5, #12]
 801289e:	2b01      	cmp	r3, #1
 80128a0:	d907      	bls.n	80128b2 <_fwalk_reent+0x3a>
 80128a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80128a6:	3301      	adds	r3, #1
 80128a8:	d003      	beq.n	80128b2 <_fwalk_reent+0x3a>
 80128aa:	4629      	mov	r1, r5
 80128ac:	4630      	mov	r0, r6
 80128ae:	47c0      	blx	r8
 80128b0:	4307      	orrs	r7, r0
 80128b2:	3568      	adds	r5, #104	; 0x68
 80128b4:	e7e9      	b.n	801288a <_fwalk_reent+0x12>
	...

080128b8 <__libc_init_array>:
 80128b8:	b570      	push	{r4, r5, r6, lr}
 80128ba:	4d0d      	ldr	r5, [pc, #52]	; (80128f0 <__libc_init_array+0x38>)
 80128bc:	4c0d      	ldr	r4, [pc, #52]	; (80128f4 <__libc_init_array+0x3c>)
 80128be:	1b64      	subs	r4, r4, r5
 80128c0:	10a4      	asrs	r4, r4, #2
 80128c2:	2600      	movs	r6, #0
 80128c4:	42a6      	cmp	r6, r4
 80128c6:	d109      	bne.n	80128dc <__libc_init_array+0x24>
 80128c8:	4d0b      	ldr	r5, [pc, #44]	; (80128f8 <__libc_init_array+0x40>)
 80128ca:	4c0c      	ldr	r4, [pc, #48]	; (80128fc <__libc_init_array+0x44>)
 80128cc:	f003 f8c8 	bl	8015a60 <_init>
 80128d0:	1b64      	subs	r4, r4, r5
 80128d2:	10a4      	asrs	r4, r4, #2
 80128d4:	2600      	movs	r6, #0
 80128d6:	42a6      	cmp	r6, r4
 80128d8:	d105      	bne.n	80128e6 <__libc_init_array+0x2e>
 80128da:	bd70      	pop	{r4, r5, r6, pc}
 80128dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80128e0:	4798      	blx	r3
 80128e2:	3601      	adds	r6, #1
 80128e4:	e7ee      	b.n	80128c4 <__libc_init_array+0xc>
 80128e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80128ea:	4798      	blx	r3
 80128ec:	3601      	adds	r6, #1
 80128ee:	e7f2      	b.n	80128d6 <__libc_init_array+0x1e>
 80128f0:	080192f0 	.word	0x080192f0
 80128f4:	080192f0 	.word	0x080192f0
 80128f8:	080192f0 	.word	0x080192f0
 80128fc:	080192fc 	.word	0x080192fc

08012900 <localtime>:
 8012900:	b538      	push	{r3, r4, r5, lr}
 8012902:	4b0b      	ldr	r3, [pc, #44]	; (8012930 <localtime+0x30>)
 8012904:	681d      	ldr	r5, [r3, #0]
 8012906:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8012908:	4604      	mov	r4, r0
 801290a:	b953      	cbnz	r3, 8012922 <localtime+0x22>
 801290c:	2024      	movs	r0, #36	; 0x24
 801290e:	f000 f975 	bl	8012bfc <malloc>
 8012912:	4602      	mov	r2, r0
 8012914:	63e8      	str	r0, [r5, #60]	; 0x3c
 8012916:	b920      	cbnz	r0, 8012922 <localtime+0x22>
 8012918:	4b06      	ldr	r3, [pc, #24]	; (8012934 <localtime+0x34>)
 801291a:	4807      	ldr	r0, [pc, #28]	; (8012938 <localtime+0x38>)
 801291c:	2132      	movs	r1, #50	; 0x32
 801291e:	f001 fd2b 	bl	8014378 <__assert_func>
 8012922:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8012924:	4620      	mov	r0, r4
 8012926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801292a:	f000 b807 	b.w	801293c <localtime_r>
 801292e:	bf00      	nop
 8012930:	20000100 	.word	0x20000100
 8012934:	08018d5c 	.word	0x08018d5c
 8012938:	08018d73 	.word	0x08018d73

0801293c <localtime_r>:
 801293c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012940:	4607      	mov	r7, r0
 8012942:	9101      	str	r1, [sp, #4]
 8012944:	f001 fdf4 	bl	8014530 <__gettzinfo>
 8012948:	9901      	ldr	r1, [sp, #4]
 801294a:	4680      	mov	r8, r0
 801294c:	4638      	mov	r0, r7
 801294e:	f001 fdf3 	bl	8014538 <gmtime_r>
 8012952:	6943      	ldr	r3, [r0, #20]
 8012954:	079a      	lsls	r2, r3, #30
 8012956:	4604      	mov	r4, r0
 8012958:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801295c:	d105      	bne.n	801296a <localtime_r+0x2e>
 801295e:	2264      	movs	r2, #100	; 0x64
 8012960:	fb96 f3f2 	sdiv	r3, r6, r2
 8012964:	fb02 6313 	mls	r3, r2, r3, r6
 8012968:	bb7b      	cbnz	r3, 80129ca <localtime_r+0x8e>
 801296a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801296e:	fb96 f5f3 	sdiv	r5, r6, r3
 8012972:	fb03 6515 	mls	r5, r3, r5, r6
 8012976:	fab5 f585 	clz	r5, r5
 801297a:	096d      	lsrs	r5, r5, #5
 801297c:	4b68      	ldr	r3, [pc, #416]	; (8012b20 <localtime_r+0x1e4>)
 801297e:	2230      	movs	r2, #48	; 0x30
 8012980:	fb02 3505 	mla	r5, r2, r5, r3
 8012984:	f001 f9f8 	bl	8013d78 <__tz_lock>
 8012988:	f001 fa02 	bl	8013d90 <_tzset_unlocked>
 801298c:	4b65      	ldr	r3, [pc, #404]	; (8012b24 <localtime_r+0x1e8>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	b353      	cbz	r3, 80129e8 <localtime_r+0xac>
 8012992:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012996:	42b3      	cmp	r3, r6
 8012998:	d119      	bne.n	80129ce <localtime_r+0x92>
 801299a:	f8d8 1000 	ldr.w	r1, [r8]
 801299e:	e9d7 6700 	ldrd	r6, r7, [r7]
 80129a2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80129a6:	b9d1      	cbnz	r1, 80129de <localtime_r+0xa2>
 80129a8:	4296      	cmp	r6, r2
 80129aa:	eb77 0303 	sbcs.w	r3, r7, r3
 80129ae:	da23      	bge.n	80129f8 <localtime_r+0xbc>
 80129b0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80129b4:	4296      	cmp	r6, r2
 80129b6:	eb77 0303 	sbcs.w	r3, r7, r3
 80129ba:	bfb4      	ite	lt
 80129bc:	2301      	movlt	r3, #1
 80129be:	2300      	movge	r3, #0
 80129c0:	6223      	str	r3, [r4, #32]
 80129c2:	db1b      	blt.n	80129fc <localtime_r+0xc0>
 80129c4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80129c8:	e01a      	b.n	8012a00 <localtime_r+0xc4>
 80129ca:	2501      	movs	r5, #1
 80129cc:	e7d6      	b.n	801297c <localtime_r+0x40>
 80129ce:	4630      	mov	r0, r6
 80129d0:	f001 f92a 	bl	8013c28 <__tzcalc_limits>
 80129d4:	2800      	cmp	r0, #0
 80129d6:	d1e0      	bne.n	801299a <localtime_r+0x5e>
 80129d8:	f04f 33ff 	mov.w	r3, #4294967295
 80129dc:	e004      	b.n	80129e8 <localtime_r+0xac>
 80129de:	4296      	cmp	r6, r2
 80129e0:	eb77 0303 	sbcs.w	r3, r7, r3
 80129e4:	da02      	bge.n	80129ec <localtime_r+0xb0>
 80129e6:	2300      	movs	r3, #0
 80129e8:	6223      	str	r3, [r4, #32]
 80129ea:	e7eb      	b.n	80129c4 <localtime_r+0x88>
 80129ec:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80129f0:	4296      	cmp	r6, r2
 80129f2:	eb77 0303 	sbcs.w	r3, r7, r3
 80129f6:	daf6      	bge.n	80129e6 <localtime_r+0xaa>
 80129f8:	2301      	movs	r3, #1
 80129fa:	6223      	str	r3, [r4, #32]
 80129fc:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8012a00:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8012a04:	203c      	movs	r0, #60	; 0x3c
 8012a06:	fb91 f6f3 	sdiv	r6, r1, r3
 8012a0a:	fb03 1316 	mls	r3, r3, r6, r1
 8012a0e:	6861      	ldr	r1, [r4, #4]
 8012a10:	fb93 f2f0 	sdiv	r2, r3, r0
 8012a14:	fb00 3012 	mls	r0, r0, r2, r3
 8012a18:	6823      	ldr	r3, [r4, #0]
 8012a1a:	1a89      	subs	r1, r1, r2
 8012a1c:	68a2      	ldr	r2, [r4, #8]
 8012a1e:	6061      	str	r1, [r4, #4]
 8012a20:	1a1b      	subs	r3, r3, r0
 8012a22:	1b92      	subs	r2, r2, r6
 8012a24:	2b3b      	cmp	r3, #59	; 0x3b
 8012a26:	6023      	str	r3, [r4, #0]
 8012a28:	60a2      	str	r2, [r4, #8]
 8012a2a:	dd35      	ble.n	8012a98 <localtime_r+0x15c>
 8012a2c:	3101      	adds	r1, #1
 8012a2e:	6061      	str	r1, [r4, #4]
 8012a30:	3b3c      	subs	r3, #60	; 0x3c
 8012a32:	6023      	str	r3, [r4, #0]
 8012a34:	6863      	ldr	r3, [r4, #4]
 8012a36:	2b3b      	cmp	r3, #59	; 0x3b
 8012a38:	dd34      	ble.n	8012aa4 <localtime_r+0x168>
 8012a3a:	3201      	adds	r2, #1
 8012a3c:	60a2      	str	r2, [r4, #8]
 8012a3e:	3b3c      	subs	r3, #60	; 0x3c
 8012a40:	6063      	str	r3, [r4, #4]
 8012a42:	68a3      	ldr	r3, [r4, #8]
 8012a44:	2b17      	cmp	r3, #23
 8012a46:	dd33      	ble.n	8012ab0 <localtime_r+0x174>
 8012a48:	69e2      	ldr	r2, [r4, #28]
 8012a4a:	3201      	adds	r2, #1
 8012a4c:	61e2      	str	r2, [r4, #28]
 8012a4e:	69a2      	ldr	r2, [r4, #24]
 8012a50:	3201      	adds	r2, #1
 8012a52:	2a06      	cmp	r2, #6
 8012a54:	bfc8      	it	gt
 8012a56:	2200      	movgt	r2, #0
 8012a58:	61a2      	str	r2, [r4, #24]
 8012a5a:	68e2      	ldr	r2, [r4, #12]
 8012a5c:	3b18      	subs	r3, #24
 8012a5e:	3201      	adds	r2, #1
 8012a60:	60a3      	str	r3, [r4, #8]
 8012a62:	6923      	ldr	r3, [r4, #16]
 8012a64:	60e2      	str	r2, [r4, #12]
 8012a66:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8012a6a:	428a      	cmp	r2, r1
 8012a6c:	dd0e      	ble.n	8012a8c <localtime_r+0x150>
 8012a6e:	2b0b      	cmp	r3, #11
 8012a70:	eba2 0201 	sub.w	r2, r2, r1
 8012a74:	60e2      	str	r2, [r4, #12]
 8012a76:	f103 0201 	add.w	r2, r3, #1
 8012a7a:	bf09      	itett	eq
 8012a7c:	6963      	ldreq	r3, [r4, #20]
 8012a7e:	6122      	strne	r2, [r4, #16]
 8012a80:	2200      	moveq	r2, #0
 8012a82:	3301      	addeq	r3, #1
 8012a84:	bf02      	ittt	eq
 8012a86:	6122      	streq	r2, [r4, #16]
 8012a88:	6163      	streq	r3, [r4, #20]
 8012a8a:	61e2      	streq	r2, [r4, #28]
 8012a8c:	f001 f97a 	bl	8013d84 <__tz_unlock>
 8012a90:	4620      	mov	r0, r4
 8012a92:	b002      	add	sp, #8
 8012a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	dacb      	bge.n	8012a34 <localtime_r+0xf8>
 8012a9c:	3901      	subs	r1, #1
 8012a9e:	6061      	str	r1, [r4, #4]
 8012aa0:	333c      	adds	r3, #60	; 0x3c
 8012aa2:	e7c6      	b.n	8012a32 <localtime_r+0xf6>
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	dacc      	bge.n	8012a42 <localtime_r+0x106>
 8012aa8:	3a01      	subs	r2, #1
 8012aaa:	60a2      	str	r2, [r4, #8]
 8012aac:	333c      	adds	r3, #60	; 0x3c
 8012aae:	e7c7      	b.n	8012a40 <localtime_r+0x104>
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	daeb      	bge.n	8012a8c <localtime_r+0x150>
 8012ab4:	69e2      	ldr	r2, [r4, #28]
 8012ab6:	3a01      	subs	r2, #1
 8012ab8:	61e2      	str	r2, [r4, #28]
 8012aba:	69a2      	ldr	r2, [r4, #24]
 8012abc:	3a01      	subs	r2, #1
 8012abe:	bf48      	it	mi
 8012ac0:	2206      	movmi	r2, #6
 8012ac2:	61a2      	str	r2, [r4, #24]
 8012ac4:	68e2      	ldr	r2, [r4, #12]
 8012ac6:	3318      	adds	r3, #24
 8012ac8:	3a01      	subs	r2, #1
 8012aca:	60e2      	str	r2, [r4, #12]
 8012acc:	60a3      	str	r3, [r4, #8]
 8012ace:	2a00      	cmp	r2, #0
 8012ad0:	d1dc      	bne.n	8012a8c <localtime_r+0x150>
 8012ad2:	6923      	ldr	r3, [r4, #16]
 8012ad4:	3b01      	subs	r3, #1
 8012ad6:	d405      	bmi.n	8012ae4 <localtime_r+0x1a8>
 8012ad8:	6123      	str	r3, [r4, #16]
 8012ada:	6923      	ldr	r3, [r4, #16]
 8012adc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8012ae0:	60e3      	str	r3, [r4, #12]
 8012ae2:	e7d3      	b.n	8012a8c <localtime_r+0x150>
 8012ae4:	230b      	movs	r3, #11
 8012ae6:	6123      	str	r3, [r4, #16]
 8012ae8:	6963      	ldr	r3, [r4, #20]
 8012aea:	1e5a      	subs	r2, r3, #1
 8012aec:	6162      	str	r2, [r4, #20]
 8012aee:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8012af2:	0793      	lsls	r3, r2, #30
 8012af4:	d105      	bne.n	8012b02 <localtime_r+0x1c6>
 8012af6:	2164      	movs	r1, #100	; 0x64
 8012af8:	fb92 f3f1 	sdiv	r3, r2, r1
 8012afc:	fb01 2313 	mls	r3, r1, r3, r2
 8012b00:	b963      	cbnz	r3, 8012b1c <localtime_r+0x1e0>
 8012b02:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012b06:	fb92 f3f1 	sdiv	r3, r2, r1
 8012b0a:	fb01 2313 	mls	r3, r1, r3, r2
 8012b0e:	fab3 f383 	clz	r3, r3
 8012b12:	095b      	lsrs	r3, r3, #5
 8012b14:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8012b18:	61e3      	str	r3, [r4, #28]
 8012b1a:	e7de      	b.n	8012ada <localtime_r+0x19e>
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	e7f9      	b.n	8012b14 <localtime_r+0x1d8>
 8012b20:	08018dd4 	.word	0x08018dd4
 8012b24:	20000bbc 	.word	0x20000bbc

08012b28 <__retarget_lock_init_recursive>:
 8012b28:	4770      	bx	lr

08012b2a <__retarget_lock_close_recursive>:
 8012b2a:	4770      	bx	lr

08012b2c <__retarget_lock_acquire>:
 8012b2c:	4770      	bx	lr

08012b2e <__retarget_lock_acquire_recursive>:
 8012b2e:	4770      	bx	lr

08012b30 <__retarget_lock_release>:
 8012b30:	4770      	bx	lr

08012b32 <__retarget_lock_release_recursive>:
 8012b32:	4770      	bx	lr

08012b34 <__swhatbuf_r>:
 8012b34:	b570      	push	{r4, r5, r6, lr}
 8012b36:	460e      	mov	r6, r1
 8012b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b3c:	2900      	cmp	r1, #0
 8012b3e:	b096      	sub	sp, #88	; 0x58
 8012b40:	4614      	mov	r4, r2
 8012b42:	461d      	mov	r5, r3
 8012b44:	da07      	bge.n	8012b56 <__swhatbuf_r+0x22>
 8012b46:	2300      	movs	r3, #0
 8012b48:	602b      	str	r3, [r5, #0]
 8012b4a:	89b3      	ldrh	r3, [r6, #12]
 8012b4c:	061a      	lsls	r2, r3, #24
 8012b4e:	d410      	bmi.n	8012b72 <__swhatbuf_r+0x3e>
 8012b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012b54:	e00e      	b.n	8012b74 <__swhatbuf_r+0x40>
 8012b56:	466a      	mov	r2, sp
 8012b58:	f001 fc84 	bl	8014464 <_fstat_r>
 8012b5c:	2800      	cmp	r0, #0
 8012b5e:	dbf2      	blt.n	8012b46 <__swhatbuf_r+0x12>
 8012b60:	9a01      	ldr	r2, [sp, #4]
 8012b62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012b66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012b6a:	425a      	negs	r2, r3
 8012b6c:	415a      	adcs	r2, r3
 8012b6e:	602a      	str	r2, [r5, #0]
 8012b70:	e7ee      	b.n	8012b50 <__swhatbuf_r+0x1c>
 8012b72:	2340      	movs	r3, #64	; 0x40
 8012b74:	2000      	movs	r0, #0
 8012b76:	6023      	str	r3, [r4, #0]
 8012b78:	b016      	add	sp, #88	; 0x58
 8012b7a:	bd70      	pop	{r4, r5, r6, pc}

08012b7c <__smakebuf_r>:
 8012b7c:	898b      	ldrh	r3, [r1, #12]
 8012b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b80:	079d      	lsls	r5, r3, #30
 8012b82:	4606      	mov	r6, r0
 8012b84:	460c      	mov	r4, r1
 8012b86:	d507      	bpl.n	8012b98 <__smakebuf_r+0x1c>
 8012b88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012b8c:	6023      	str	r3, [r4, #0]
 8012b8e:	6123      	str	r3, [r4, #16]
 8012b90:	2301      	movs	r3, #1
 8012b92:	6163      	str	r3, [r4, #20]
 8012b94:	b002      	add	sp, #8
 8012b96:	bd70      	pop	{r4, r5, r6, pc}
 8012b98:	ab01      	add	r3, sp, #4
 8012b9a:	466a      	mov	r2, sp
 8012b9c:	f7ff ffca 	bl	8012b34 <__swhatbuf_r>
 8012ba0:	9900      	ldr	r1, [sp, #0]
 8012ba2:	4605      	mov	r5, r0
 8012ba4:	4630      	mov	r0, r6
 8012ba6:	f000 f8af 	bl	8012d08 <_malloc_r>
 8012baa:	b948      	cbnz	r0, 8012bc0 <__smakebuf_r+0x44>
 8012bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bb0:	059a      	lsls	r2, r3, #22
 8012bb2:	d4ef      	bmi.n	8012b94 <__smakebuf_r+0x18>
 8012bb4:	f023 0303 	bic.w	r3, r3, #3
 8012bb8:	f043 0302 	orr.w	r3, r3, #2
 8012bbc:	81a3      	strh	r3, [r4, #12]
 8012bbe:	e7e3      	b.n	8012b88 <__smakebuf_r+0xc>
 8012bc0:	4b0d      	ldr	r3, [pc, #52]	; (8012bf8 <__smakebuf_r+0x7c>)
 8012bc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8012bc4:	89a3      	ldrh	r3, [r4, #12]
 8012bc6:	6020      	str	r0, [r4, #0]
 8012bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bcc:	81a3      	strh	r3, [r4, #12]
 8012bce:	9b00      	ldr	r3, [sp, #0]
 8012bd0:	6163      	str	r3, [r4, #20]
 8012bd2:	9b01      	ldr	r3, [sp, #4]
 8012bd4:	6120      	str	r0, [r4, #16]
 8012bd6:	b15b      	cbz	r3, 8012bf0 <__smakebuf_r+0x74>
 8012bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bdc:	4630      	mov	r0, r6
 8012bde:	f001 fd5b 	bl	8014698 <_isatty_r>
 8012be2:	b128      	cbz	r0, 8012bf0 <__smakebuf_r+0x74>
 8012be4:	89a3      	ldrh	r3, [r4, #12]
 8012be6:	f023 0303 	bic.w	r3, r3, #3
 8012bea:	f043 0301 	orr.w	r3, r3, #1
 8012bee:	81a3      	strh	r3, [r4, #12]
 8012bf0:	89a0      	ldrh	r0, [r4, #12]
 8012bf2:	4305      	orrs	r5, r0
 8012bf4:	81a5      	strh	r5, [r4, #12]
 8012bf6:	e7cd      	b.n	8012b94 <__smakebuf_r+0x18>
 8012bf8:	08012361 	.word	0x08012361

08012bfc <malloc>:
 8012bfc:	4b02      	ldr	r3, [pc, #8]	; (8012c08 <malloc+0xc>)
 8012bfe:	4601      	mov	r1, r0
 8012c00:	6818      	ldr	r0, [r3, #0]
 8012c02:	f000 b881 	b.w	8012d08 <_malloc_r>
 8012c06:	bf00      	nop
 8012c08:	20000100 	.word	0x20000100

08012c0c <free>:
 8012c0c:	4b02      	ldr	r3, [pc, #8]	; (8012c18 <free+0xc>)
 8012c0e:	4601      	mov	r1, r0
 8012c10:	6818      	ldr	r0, [r3, #0]
 8012c12:	f000 b829 	b.w	8012c68 <_free_r>
 8012c16:	bf00      	nop
 8012c18:	20000100 	.word	0x20000100

08012c1c <memcpy>:
 8012c1c:	440a      	add	r2, r1
 8012c1e:	4291      	cmp	r1, r2
 8012c20:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c24:	d100      	bne.n	8012c28 <memcpy+0xc>
 8012c26:	4770      	bx	lr
 8012c28:	b510      	push	{r4, lr}
 8012c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c32:	4291      	cmp	r1, r2
 8012c34:	d1f9      	bne.n	8012c2a <memcpy+0xe>
 8012c36:	bd10      	pop	{r4, pc}

08012c38 <memset>:
 8012c38:	4402      	add	r2, r0
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	4293      	cmp	r3, r2
 8012c3e:	d100      	bne.n	8012c42 <memset+0xa>
 8012c40:	4770      	bx	lr
 8012c42:	f803 1b01 	strb.w	r1, [r3], #1
 8012c46:	e7f9      	b.n	8012c3c <memset+0x4>

08012c48 <_calloc_r>:
 8012c48:	b513      	push	{r0, r1, r4, lr}
 8012c4a:	434a      	muls	r2, r1
 8012c4c:	4611      	mov	r1, r2
 8012c4e:	9201      	str	r2, [sp, #4]
 8012c50:	f000 f85a 	bl	8012d08 <_malloc_r>
 8012c54:	4604      	mov	r4, r0
 8012c56:	b118      	cbz	r0, 8012c60 <_calloc_r+0x18>
 8012c58:	9a01      	ldr	r2, [sp, #4]
 8012c5a:	2100      	movs	r1, #0
 8012c5c:	f7ff ffec 	bl	8012c38 <memset>
 8012c60:	4620      	mov	r0, r4
 8012c62:	b002      	add	sp, #8
 8012c64:	bd10      	pop	{r4, pc}
	...

08012c68 <_free_r>:
 8012c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c6a:	2900      	cmp	r1, #0
 8012c6c:	d048      	beq.n	8012d00 <_free_r+0x98>
 8012c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c72:	9001      	str	r0, [sp, #4]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	f1a1 0404 	sub.w	r4, r1, #4
 8012c7a:	bfb8      	it	lt
 8012c7c:	18e4      	addlt	r4, r4, r3
 8012c7e:	f001 fd43 	bl	8014708 <__malloc_lock>
 8012c82:	4a20      	ldr	r2, [pc, #128]	; (8012d04 <_free_r+0x9c>)
 8012c84:	9801      	ldr	r0, [sp, #4]
 8012c86:	6813      	ldr	r3, [r2, #0]
 8012c88:	4615      	mov	r5, r2
 8012c8a:	b933      	cbnz	r3, 8012c9a <_free_r+0x32>
 8012c8c:	6063      	str	r3, [r4, #4]
 8012c8e:	6014      	str	r4, [r2, #0]
 8012c90:	b003      	add	sp, #12
 8012c92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c96:	f001 bd3d 	b.w	8014714 <__malloc_unlock>
 8012c9a:	42a3      	cmp	r3, r4
 8012c9c:	d90b      	bls.n	8012cb6 <_free_r+0x4e>
 8012c9e:	6821      	ldr	r1, [r4, #0]
 8012ca0:	1862      	adds	r2, r4, r1
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	bf04      	itt	eq
 8012ca6:	681a      	ldreq	r2, [r3, #0]
 8012ca8:	685b      	ldreq	r3, [r3, #4]
 8012caa:	6063      	str	r3, [r4, #4]
 8012cac:	bf04      	itt	eq
 8012cae:	1852      	addeq	r2, r2, r1
 8012cb0:	6022      	streq	r2, [r4, #0]
 8012cb2:	602c      	str	r4, [r5, #0]
 8012cb4:	e7ec      	b.n	8012c90 <_free_r+0x28>
 8012cb6:	461a      	mov	r2, r3
 8012cb8:	685b      	ldr	r3, [r3, #4]
 8012cba:	b10b      	cbz	r3, 8012cc0 <_free_r+0x58>
 8012cbc:	42a3      	cmp	r3, r4
 8012cbe:	d9fa      	bls.n	8012cb6 <_free_r+0x4e>
 8012cc0:	6811      	ldr	r1, [r2, #0]
 8012cc2:	1855      	adds	r5, r2, r1
 8012cc4:	42a5      	cmp	r5, r4
 8012cc6:	d10b      	bne.n	8012ce0 <_free_r+0x78>
 8012cc8:	6824      	ldr	r4, [r4, #0]
 8012cca:	4421      	add	r1, r4
 8012ccc:	1854      	adds	r4, r2, r1
 8012cce:	42a3      	cmp	r3, r4
 8012cd0:	6011      	str	r1, [r2, #0]
 8012cd2:	d1dd      	bne.n	8012c90 <_free_r+0x28>
 8012cd4:	681c      	ldr	r4, [r3, #0]
 8012cd6:	685b      	ldr	r3, [r3, #4]
 8012cd8:	6053      	str	r3, [r2, #4]
 8012cda:	4421      	add	r1, r4
 8012cdc:	6011      	str	r1, [r2, #0]
 8012cde:	e7d7      	b.n	8012c90 <_free_r+0x28>
 8012ce0:	d902      	bls.n	8012ce8 <_free_r+0x80>
 8012ce2:	230c      	movs	r3, #12
 8012ce4:	6003      	str	r3, [r0, #0]
 8012ce6:	e7d3      	b.n	8012c90 <_free_r+0x28>
 8012ce8:	6825      	ldr	r5, [r4, #0]
 8012cea:	1961      	adds	r1, r4, r5
 8012cec:	428b      	cmp	r3, r1
 8012cee:	bf04      	itt	eq
 8012cf0:	6819      	ldreq	r1, [r3, #0]
 8012cf2:	685b      	ldreq	r3, [r3, #4]
 8012cf4:	6063      	str	r3, [r4, #4]
 8012cf6:	bf04      	itt	eq
 8012cf8:	1949      	addeq	r1, r1, r5
 8012cfa:	6021      	streq	r1, [r4, #0]
 8012cfc:	6054      	str	r4, [r2, #4]
 8012cfe:	e7c7      	b.n	8012c90 <_free_r+0x28>
 8012d00:	b003      	add	sp, #12
 8012d02:	bd30      	pop	{r4, r5, pc}
 8012d04:	20000b98 	.word	0x20000b98

08012d08 <_malloc_r>:
 8012d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d0a:	1ccd      	adds	r5, r1, #3
 8012d0c:	f025 0503 	bic.w	r5, r5, #3
 8012d10:	3508      	adds	r5, #8
 8012d12:	2d0c      	cmp	r5, #12
 8012d14:	bf38      	it	cc
 8012d16:	250c      	movcc	r5, #12
 8012d18:	2d00      	cmp	r5, #0
 8012d1a:	4606      	mov	r6, r0
 8012d1c:	db01      	blt.n	8012d22 <_malloc_r+0x1a>
 8012d1e:	42a9      	cmp	r1, r5
 8012d20:	d903      	bls.n	8012d2a <_malloc_r+0x22>
 8012d22:	230c      	movs	r3, #12
 8012d24:	6033      	str	r3, [r6, #0]
 8012d26:	2000      	movs	r0, #0
 8012d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d2a:	f001 fced 	bl	8014708 <__malloc_lock>
 8012d2e:	4921      	ldr	r1, [pc, #132]	; (8012db4 <_malloc_r+0xac>)
 8012d30:	680a      	ldr	r2, [r1, #0]
 8012d32:	4614      	mov	r4, r2
 8012d34:	b99c      	cbnz	r4, 8012d5e <_malloc_r+0x56>
 8012d36:	4f20      	ldr	r7, [pc, #128]	; (8012db8 <_malloc_r+0xb0>)
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	b923      	cbnz	r3, 8012d46 <_malloc_r+0x3e>
 8012d3c:	4621      	mov	r1, r4
 8012d3e:	4630      	mov	r0, r6
 8012d40:	f000 f8da 	bl	8012ef8 <_sbrk_r>
 8012d44:	6038      	str	r0, [r7, #0]
 8012d46:	4629      	mov	r1, r5
 8012d48:	4630      	mov	r0, r6
 8012d4a:	f000 f8d5 	bl	8012ef8 <_sbrk_r>
 8012d4e:	1c43      	adds	r3, r0, #1
 8012d50:	d123      	bne.n	8012d9a <_malloc_r+0x92>
 8012d52:	230c      	movs	r3, #12
 8012d54:	6033      	str	r3, [r6, #0]
 8012d56:	4630      	mov	r0, r6
 8012d58:	f001 fcdc 	bl	8014714 <__malloc_unlock>
 8012d5c:	e7e3      	b.n	8012d26 <_malloc_r+0x1e>
 8012d5e:	6823      	ldr	r3, [r4, #0]
 8012d60:	1b5b      	subs	r3, r3, r5
 8012d62:	d417      	bmi.n	8012d94 <_malloc_r+0x8c>
 8012d64:	2b0b      	cmp	r3, #11
 8012d66:	d903      	bls.n	8012d70 <_malloc_r+0x68>
 8012d68:	6023      	str	r3, [r4, #0]
 8012d6a:	441c      	add	r4, r3
 8012d6c:	6025      	str	r5, [r4, #0]
 8012d6e:	e004      	b.n	8012d7a <_malloc_r+0x72>
 8012d70:	6863      	ldr	r3, [r4, #4]
 8012d72:	42a2      	cmp	r2, r4
 8012d74:	bf0c      	ite	eq
 8012d76:	600b      	streq	r3, [r1, #0]
 8012d78:	6053      	strne	r3, [r2, #4]
 8012d7a:	4630      	mov	r0, r6
 8012d7c:	f001 fcca 	bl	8014714 <__malloc_unlock>
 8012d80:	f104 000b 	add.w	r0, r4, #11
 8012d84:	1d23      	adds	r3, r4, #4
 8012d86:	f020 0007 	bic.w	r0, r0, #7
 8012d8a:	1ac2      	subs	r2, r0, r3
 8012d8c:	d0cc      	beq.n	8012d28 <_malloc_r+0x20>
 8012d8e:	1a1b      	subs	r3, r3, r0
 8012d90:	50a3      	str	r3, [r4, r2]
 8012d92:	e7c9      	b.n	8012d28 <_malloc_r+0x20>
 8012d94:	4622      	mov	r2, r4
 8012d96:	6864      	ldr	r4, [r4, #4]
 8012d98:	e7cc      	b.n	8012d34 <_malloc_r+0x2c>
 8012d9a:	1cc4      	adds	r4, r0, #3
 8012d9c:	f024 0403 	bic.w	r4, r4, #3
 8012da0:	42a0      	cmp	r0, r4
 8012da2:	d0e3      	beq.n	8012d6c <_malloc_r+0x64>
 8012da4:	1a21      	subs	r1, r4, r0
 8012da6:	4630      	mov	r0, r6
 8012da8:	f000 f8a6 	bl	8012ef8 <_sbrk_r>
 8012dac:	3001      	adds	r0, #1
 8012dae:	d1dd      	bne.n	8012d6c <_malloc_r+0x64>
 8012db0:	e7cf      	b.n	8012d52 <_malloc_r+0x4a>
 8012db2:	bf00      	nop
 8012db4:	20000b98 	.word	0x20000b98
 8012db8:	20000b9c 	.word	0x20000b9c

08012dbc <_open_r>:
 8012dbc:	b538      	push	{r3, r4, r5, lr}
 8012dbe:	4d07      	ldr	r5, [pc, #28]	; (8012ddc <_open_r+0x20>)
 8012dc0:	4604      	mov	r4, r0
 8012dc2:	4608      	mov	r0, r1
 8012dc4:	4611      	mov	r1, r2
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	602a      	str	r2, [r5, #0]
 8012dca:	461a      	mov	r2, r3
 8012dcc:	f7ee f850 	bl	8000e70 <_open>
 8012dd0:	1c43      	adds	r3, r0, #1
 8012dd2:	d102      	bne.n	8012dda <_open_r+0x1e>
 8012dd4:	682b      	ldr	r3, [r5, #0]
 8012dd6:	b103      	cbz	r3, 8012dda <_open_r+0x1e>
 8012dd8:	6023      	str	r3, [r4, #0]
 8012dda:	bd38      	pop	{r3, r4, r5, pc}
 8012ddc:	20000c64 	.word	0x20000c64

08012de0 <putchar>:
 8012de0:	4b09      	ldr	r3, [pc, #36]	; (8012e08 <putchar+0x28>)
 8012de2:	b513      	push	{r0, r1, r4, lr}
 8012de4:	681c      	ldr	r4, [r3, #0]
 8012de6:	4601      	mov	r1, r0
 8012de8:	b134      	cbz	r4, 8012df8 <putchar+0x18>
 8012dea:	69a3      	ldr	r3, [r4, #24]
 8012dec:	b923      	cbnz	r3, 8012df8 <putchar+0x18>
 8012dee:	9001      	str	r0, [sp, #4]
 8012df0:	4620      	mov	r0, r4
 8012df2:	f7ff fae9 	bl	80123c8 <__sinit>
 8012df6:	9901      	ldr	r1, [sp, #4]
 8012df8:	68a2      	ldr	r2, [r4, #8]
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	b002      	add	sp, #8
 8012dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e02:	f002 b8fd 	b.w	8015000 <_putc_r>
 8012e06:	bf00      	nop
 8012e08:	20000100 	.word	0x20000100

08012e0c <srand>:
 8012e0c:	b538      	push	{r3, r4, r5, lr}
 8012e0e:	4b10      	ldr	r3, [pc, #64]	; (8012e50 <srand+0x44>)
 8012e10:	681d      	ldr	r5, [r3, #0]
 8012e12:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012e14:	4604      	mov	r4, r0
 8012e16:	b9b3      	cbnz	r3, 8012e46 <srand+0x3a>
 8012e18:	2018      	movs	r0, #24
 8012e1a:	f7ff feef 	bl	8012bfc <malloc>
 8012e1e:	4602      	mov	r2, r0
 8012e20:	63a8      	str	r0, [r5, #56]	; 0x38
 8012e22:	b920      	cbnz	r0, 8012e2e <srand+0x22>
 8012e24:	4b0b      	ldr	r3, [pc, #44]	; (8012e54 <srand+0x48>)
 8012e26:	480c      	ldr	r0, [pc, #48]	; (8012e58 <srand+0x4c>)
 8012e28:	2142      	movs	r1, #66	; 0x42
 8012e2a:	f001 faa5 	bl	8014378 <__assert_func>
 8012e2e:	490b      	ldr	r1, [pc, #44]	; (8012e5c <srand+0x50>)
 8012e30:	4b0b      	ldr	r3, [pc, #44]	; (8012e60 <srand+0x54>)
 8012e32:	e9c0 1300 	strd	r1, r3, [r0]
 8012e36:	4b0b      	ldr	r3, [pc, #44]	; (8012e64 <srand+0x58>)
 8012e38:	6083      	str	r3, [r0, #8]
 8012e3a:	230b      	movs	r3, #11
 8012e3c:	8183      	strh	r3, [r0, #12]
 8012e3e:	2100      	movs	r1, #0
 8012e40:	2001      	movs	r0, #1
 8012e42:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012e46:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012e48:	2200      	movs	r2, #0
 8012e4a:	611c      	str	r4, [r3, #16]
 8012e4c:	615a      	str	r2, [r3, #20]
 8012e4e:	bd38      	pop	{r3, r4, r5, pc}
 8012e50:	20000100 	.word	0x20000100
 8012e54:	08018d5c 	.word	0x08018d5c
 8012e58:	08018e34 	.word	0x08018e34
 8012e5c:	abcd330e 	.word	0xabcd330e
 8012e60:	e66d1234 	.word	0xe66d1234
 8012e64:	0005deec 	.word	0x0005deec

08012e68 <rand>:
 8012e68:	4b17      	ldr	r3, [pc, #92]	; (8012ec8 <rand+0x60>)
 8012e6a:	b510      	push	{r4, lr}
 8012e6c:	681c      	ldr	r4, [r3, #0]
 8012e6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012e70:	b9b3      	cbnz	r3, 8012ea0 <rand+0x38>
 8012e72:	2018      	movs	r0, #24
 8012e74:	f7ff fec2 	bl	8012bfc <malloc>
 8012e78:	63a0      	str	r0, [r4, #56]	; 0x38
 8012e7a:	b928      	cbnz	r0, 8012e88 <rand+0x20>
 8012e7c:	4602      	mov	r2, r0
 8012e7e:	4b13      	ldr	r3, [pc, #76]	; (8012ecc <rand+0x64>)
 8012e80:	4813      	ldr	r0, [pc, #76]	; (8012ed0 <rand+0x68>)
 8012e82:	214e      	movs	r1, #78	; 0x4e
 8012e84:	f001 fa78 	bl	8014378 <__assert_func>
 8012e88:	4a12      	ldr	r2, [pc, #72]	; (8012ed4 <rand+0x6c>)
 8012e8a:	4b13      	ldr	r3, [pc, #76]	; (8012ed8 <rand+0x70>)
 8012e8c:	e9c0 2300 	strd	r2, r3, [r0]
 8012e90:	4b12      	ldr	r3, [pc, #72]	; (8012edc <rand+0x74>)
 8012e92:	6083      	str	r3, [r0, #8]
 8012e94:	230b      	movs	r3, #11
 8012e96:	8183      	strh	r3, [r0, #12]
 8012e98:	2201      	movs	r2, #1
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012ea0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012ea2:	480f      	ldr	r0, [pc, #60]	; (8012ee0 <rand+0x78>)
 8012ea4:	690a      	ldr	r2, [r1, #16]
 8012ea6:	694b      	ldr	r3, [r1, #20]
 8012ea8:	4c0e      	ldr	r4, [pc, #56]	; (8012ee4 <rand+0x7c>)
 8012eaa:	4350      	muls	r0, r2
 8012eac:	fb04 0003 	mla	r0, r4, r3, r0
 8012eb0:	fba2 3404 	umull	r3, r4, r2, r4
 8012eb4:	1c5a      	adds	r2, r3, #1
 8012eb6:	4404      	add	r4, r0
 8012eb8:	f144 0000 	adc.w	r0, r4, #0
 8012ebc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8012ec0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012ec4:	bd10      	pop	{r4, pc}
 8012ec6:	bf00      	nop
 8012ec8:	20000100 	.word	0x20000100
 8012ecc:	08018d5c 	.word	0x08018d5c
 8012ed0:	08018e34 	.word	0x08018e34
 8012ed4:	abcd330e 	.word	0xabcd330e
 8012ed8:	e66d1234 	.word	0xe66d1234
 8012edc:	0005deec 	.word	0x0005deec
 8012ee0:	5851f42d 	.word	0x5851f42d
 8012ee4:	4c957f2d 	.word	0x4c957f2d

08012ee8 <realloc>:
 8012ee8:	4b02      	ldr	r3, [pc, #8]	; (8012ef4 <realloc+0xc>)
 8012eea:	460a      	mov	r2, r1
 8012eec:	4601      	mov	r1, r0
 8012eee:	6818      	ldr	r0, [r3, #0]
 8012ef0:	f001 bc16 	b.w	8014720 <_realloc_r>
 8012ef4:	20000100 	.word	0x20000100

08012ef8 <_sbrk_r>:
 8012ef8:	b538      	push	{r3, r4, r5, lr}
 8012efa:	4d06      	ldr	r5, [pc, #24]	; (8012f14 <_sbrk_r+0x1c>)
 8012efc:	2300      	movs	r3, #0
 8012efe:	4604      	mov	r4, r0
 8012f00:	4608      	mov	r0, r1
 8012f02:	602b      	str	r3, [r5, #0]
 8012f04:	f7ed ffc2 	bl	8000e8c <_sbrk>
 8012f08:	1c43      	adds	r3, r0, #1
 8012f0a:	d102      	bne.n	8012f12 <_sbrk_r+0x1a>
 8012f0c:	682b      	ldr	r3, [r5, #0]
 8012f0e:	b103      	cbz	r3, 8012f12 <_sbrk_r+0x1a>
 8012f10:	6023      	str	r3, [r4, #0]
 8012f12:	bd38      	pop	{r3, r4, r5, pc}
 8012f14:	20000c64 	.word	0x20000c64

08012f18 <_raise_r>:
 8012f18:	291f      	cmp	r1, #31
 8012f1a:	b538      	push	{r3, r4, r5, lr}
 8012f1c:	4604      	mov	r4, r0
 8012f1e:	460d      	mov	r5, r1
 8012f20:	d904      	bls.n	8012f2c <_raise_r+0x14>
 8012f22:	2316      	movs	r3, #22
 8012f24:	6003      	str	r3, [r0, #0]
 8012f26:	f04f 30ff 	mov.w	r0, #4294967295
 8012f2a:	bd38      	pop	{r3, r4, r5, pc}
 8012f2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012f2e:	b112      	cbz	r2, 8012f36 <_raise_r+0x1e>
 8012f30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f34:	b94b      	cbnz	r3, 8012f4a <_raise_r+0x32>
 8012f36:	4620      	mov	r0, r4
 8012f38:	f000 f830 	bl	8012f9c <_getpid_r>
 8012f3c:	462a      	mov	r2, r5
 8012f3e:	4601      	mov	r1, r0
 8012f40:	4620      	mov	r0, r4
 8012f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f46:	f000 b817 	b.w	8012f78 <_kill_r>
 8012f4a:	2b01      	cmp	r3, #1
 8012f4c:	d00a      	beq.n	8012f64 <_raise_r+0x4c>
 8012f4e:	1c59      	adds	r1, r3, #1
 8012f50:	d103      	bne.n	8012f5a <_raise_r+0x42>
 8012f52:	2316      	movs	r3, #22
 8012f54:	6003      	str	r3, [r0, #0]
 8012f56:	2001      	movs	r0, #1
 8012f58:	e7e7      	b.n	8012f2a <_raise_r+0x12>
 8012f5a:	2400      	movs	r4, #0
 8012f5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012f60:	4628      	mov	r0, r5
 8012f62:	4798      	blx	r3
 8012f64:	2000      	movs	r0, #0
 8012f66:	e7e0      	b.n	8012f2a <_raise_r+0x12>

08012f68 <raise>:
 8012f68:	4b02      	ldr	r3, [pc, #8]	; (8012f74 <raise+0xc>)
 8012f6a:	4601      	mov	r1, r0
 8012f6c:	6818      	ldr	r0, [r3, #0]
 8012f6e:	f7ff bfd3 	b.w	8012f18 <_raise_r>
 8012f72:	bf00      	nop
 8012f74:	20000100 	.word	0x20000100

08012f78 <_kill_r>:
 8012f78:	b538      	push	{r3, r4, r5, lr}
 8012f7a:	4d07      	ldr	r5, [pc, #28]	; (8012f98 <_kill_r+0x20>)
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	4604      	mov	r4, r0
 8012f80:	4608      	mov	r0, r1
 8012f82:	4611      	mov	r1, r2
 8012f84:	602b      	str	r3, [r5, #0]
 8012f86:	f7ed feec 	bl	8000d62 <_kill>
 8012f8a:	1c43      	adds	r3, r0, #1
 8012f8c:	d102      	bne.n	8012f94 <_kill_r+0x1c>
 8012f8e:	682b      	ldr	r3, [r5, #0]
 8012f90:	b103      	cbz	r3, 8012f94 <_kill_r+0x1c>
 8012f92:	6023      	str	r3, [r4, #0]
 8012f94:	bd38      	pop	{r3, r4, r5, pc}
 8012f96:	bf00      	nop
 8012f98:	20000c64 	.word	0x20000c64

08012f9c <_getpid_r>:
 8012f9c:	f7ed bed9 	b.w	8000d52 <_getpid>

08012fa0 <__sread>:
 8012fa0:	b510      	push	{r4, lr}
 8012fa2:	460c      	mov	r4, r1
 8012fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fa8:	f002 f872 	bl	8015090 <_read_r>
 8012fac:	2800      	cmp	r0, #0
 8012fae:	bfab      	itete	ge
 8012fb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8012fb4:	181b      	addge	r3, r3, r0
 8012fb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012fba:	bfac      	ite	ge
 8012fbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8012fbe:	81a3      	strhlt	r3, [r4, #12]
 8012fc0:	bd10      	pop	{r4, pc}

08012fc2 <__seofread>:
 8012fc2:	2000      	movs	r0, #0
 8012fc4:	4770      	bx	lr

08012fc6 <__swrite>:
 8012fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fca:	461f      	mov	r7, r3
 8012fcc:	898b      	ldrh	r3, [r1, #12]
 8012fce:	05db      	lsls	r3, r3, #23
 8012fd0:	4605      	mov	r5, r0
 8012fd2:	460c      	mov	r4, r1
 8012fd4:	4616      	mov	r6, r2
 8012fd6:	d505      	bpl.n	8012fe4 <__swrite+0x1e>
 8012fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fdc:	2302      	movs	r3, #2
 8012fde:	2200      	movs	r2, #0
 8012fe0:	f001 fb6e 	bl	80146c0 <_lseek_r>
 8012fe4:	89a3      	ldrh	r3, [r4, #12]
 8012fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012fee:	81a3      	strh	r3, [r4, #12]
 8012ff0:	4632      	mov	r2, r6
 8012ff2:	463b      	mov	r3, r7
 8012ff4:	4628      	mov	r0, r5
 8012ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ffa:	f001 b8d7 	b.w	80141ac <_write_r>

08012ffe <__sseek>:
 8012ffe:	b510      	push	{r4, lr}
 8013000:	460c      	mov	r4, r1
 8013002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013006:	f001 fb5b 	bl	80146c0 <_lseek_r>
 801300a:	1c43      	adds	r3, r0, #1
 801300c:	89a3      	ldrh	r3, [r4, #12]
 801300e:	bf15      	itete	ne
 8013010:	6560      	strne	r0, [r4, #84]	; 0x54
 8013012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801301a:	81a3      	strheq	r3, [r4, #12]
 801301c:	bf18      	it	ne
 801301e:	81a3      	strhne	r3, [r4, #12]
 8013020:	bd10      	pop	{r4, pc}

08013022 <__sclose>:
 8013022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013026:	f001 b9c5 	b.w	80143b4 <_close_r>
	...

0801302c <iso_year_adjust>:
 801302c:	6941      	ldr	r1, [r0, #20]
 801302e:	2900      	cmp	r1, #0
 8013030:	f240 736c 	movw	r3, #1900	; 0x76c
 8013034:	bfa8      	it	ge
 8013036:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 801303a:	18ca      	adds	r2, r1, r3
 801303c:	078b      	lsls	r3, r1, #30
 801303e:	d105      	bne.n	801304c <iso_year_adjust+0x20>
 8013040:	2164      	movs	r1, #100	; 0x64
 8013042:	fb92 f3f1 	sdiv	r3, r2, r1
 8013046:	fb01 2313 	mls	r3, r1, r3, r2
 801304a:	b9db      	cbnz	r3, 8013084 <iso_year_adjust+0x58>
 801304c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8013050:	fb92 f3f1 	sdiv	r3, r2, r1
 8013054:	fb01 2313 	mls	r3, r1, r3, r2
 8013058:	fab3 f383 	clz	r3, r3
 801305c:	095b      	lsrs	r3, r3, #5
 801305e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8013062:	0040      	lsls	r0, r0, #1
 8013064:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8013068:	4418      	add	r0, r3
 801306a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801306e:	4298      	cmp	r0, r3
 8013070:	d03a      	beq.n	80130e8 <iso_year_adjust+0xbc>
 8013072:	dc21      	bgt.n	80130b8 <iso_year_adjust+0x8c>
 8013074:	2801      	cmp	r0, #1
 8013076:	dc1a      	bgt.n	80130ae <iso_year_adjust+0x82>
 8013078:	2800      	cmp	r0, #0
 801307a:	bfb4      	ite	lt
 801307c:	2000      	movlt	r0, #0
 801307e:	f04f 30ff 	movge.w	r0, #4294967295
 8013082:	4770      	bx	lr
 8013084:	2301      	movs	r3, #1
 8013086:	e7ea      	b.n	801305e <iso_year_adjust+0x32>
 8013088:	2817      	cmp	r0, #23
 801308a:	d813      	bhi.n	80130b4 <iso_year_adjust+0x88>
 801308c:	e8df f000 	tbb	[pc, r0]
 8013090:	0c0c0c0c 	.word	0x0c0c0c0c
 8013094:	0c0c1212 	.word	0x0c0c1212
 8013098:	12121212 	.word	0x12121212
 801309c:	12121212 	.word	0x12121212
 80130a0:	0c0c1212 	.word	0x0c0c1212
 80130a4:	0c0c1212 	.word	0x0c0c1212
 80130a8:	f04f 30ff 	mov.w	r0, #4294967295
 80130ac:	4770      	bx	lr
 80130ae:	380a      	subs	r0, #10
 80130b0:	2817      	cmp	r0, #23
 80130b2:	d9e9      	bls.n	8013088 <iso_year_adjust+0x5c>
 80130b4:	2000      	movs	r0, #0
 80130b6:	4770      	bx	lr
 80130b8:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80130bc:	4298      	cmp	r0, r3
 80130be:	dc06      	bgt.n	80130ce <iso_year_adjust+0xa2>
 80130c0:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80130c4:	4298      	cmp	r0, r3
 80130c6:	bfd4      	ite	le
 80130c8:	2000      	movle	r0, #0
 80130ca:	2001      	movgt	r0, #1
 80130cc:	4770      	bx	lr
 80130ce:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80130d2:	3802      	subs	r0, #2
 80130d4:	2815      	cmp	r0, #21
 80130d6:	d8ed      	bhi.n	80130b4 <iso_year_adjust+0x88>
 80130d8:	2301      	movs	r3, #1
 80130da:	4083      	lsls	r3, r0
 80130dc:	4803      	ldr	r0, [pc, #12]	; (80130ec <iso_year_adjust+0xc0>)
 80130de:	4018      	ands	r0, r3
 80130e0:	3800      	subs	r0, #0
 80130e2:	bf18      	it	ne
 80130e4:	2001      	movne	r0, #1
 80130e6:	4770      	bx	lr
 80130e8:	2001      	movs	r0, #1
 80130ea:	4770      	bx	lr
 80130ec:	002a001f 	.word	0x002a001f

080130f0 <__strftime>:
 80130f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f4:	b091      	sub	sp, #68	; 0x44
 80130f6:	461d      	mov	r5, r3
 80130f8:	2300      	movs	r3, #0
 80130fa:	4681      	mov	r9, r0
 80130fc:	4688      	mov	r8, r1
 80130fe:	9304      	str	r3, [sp, #16]
 8013100:	461c      	mov	r4, r3
 8013102:	7813      	ldrb	r3, [r2, #0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	f000 84d1 	beq.w	8013aac <__strftime+0x9bc>
 801310a:	2b25      	cmp	r3, #37	; 0x25
 801310c:	d11b      	bne.n	8013146 <__strftime+0x56>
 801310e:	7857      	ldrb	r7, [r2, #1]
 8013110:	2f30      	cmp	r7, #48	; 0x30
 8013112:	d024      	beq.n	801315e <__strftime+0x6e>
 8013114:	2f2b      	cmp	r7, #43	; 0x2b
 8013116:	d022      	beq.n	801315e <__strftime+0x6e>
 8013118:	f102 0b01 	add.w	fp, r2, #1
 801311c:	2700      	movs	r7, #0
 801311e:	f89b 3000 	ldrb.w	r3, [fp]
 8013122:	3b31      	subs	r3, #49	; 0x31
 8013124:	2b08      	cmp	r3, #8
 8013126:	d81d      	bhi.n	8013164 <__strftime+0x74>
 8013128:	4658      	mov	r0, fp
 801312a:	220a      	movs	r2, #10
 801312c:	a908      	add	r1, sp, #32
 801312e:	f000 fd57 	bl	8013be0 <strtoul>
 8013132:	f8dd b020 	ldr.w	fp, [sp, #32]
 8013136:	4606      	mov	r6, r0
 8013138:	f89b 3000 	ldrb.w	r3, [fp]
 801313c:	2b45      	cmp	r3, #69	; 0x45
 801313e:	d113      	bne.n	8013168 <__strftime+0x78>
 8013140:	f10b 0b01 	add.w	fp, fp, #1
 8013144:	e012      	b.n	801316c <__strftime+0x7c>
 8013146:	f108 31ff 	add.w	r1, r8, #4294967295
 801314a:	42a1      	cmp	r1, r4
 801314c:	d802      	bhi.n	8013154 <__strftime+0x64>
 801314e:	2400      	movs	r4, #0
 8013150:	f000 bcb2 	b.w	8013ab8 <__strftime+0x9c8>
 8013154:	f809 3004 	strb.w	r3, [r9, r4]
 8013158:	3201      	adds	r2, #1
 801315a:	3401      	adds	r4, #1
 801315c:	e7d1      	b.n	8013102 <__strftime+0x12>
 801315e:	f102 0b02 	add.w	fp, r2, #2
 8013162:	e7dc      	b.n	801311e <__strftime+0x2e>
 8013164:	2600      	movs	r6, #0
 8013166:	e7e7      	b.n	8013138 <__strftime+0x48>
 8013168:	2b4f      	cmp	r3, #79	; 0x4f
 801316a:	d0e9      	beq.n	8013140 <__strftime+0x50>
 801316c:	f89b 0000 	ldrb.w	r0, [fp]
 8013170:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8013174:	2b55      	cmp	r3, #85	; 0x55
 8013176:	d8ea      	bhi.n	801314e <__strftime+0x5e>
 8013178:	a201      	add	r2, pc, #4	; (adr r2, 8013180 <__strftime+0x90>)
 801317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801317e:	bf00      	nop
 8013180:	08013a9f 	.word	0x08013a9f
 8013184:	0801314f 	.word	0x0801314f
 8013188:	0801314f 	.word	0x0801314f
 801318c:	0801314f 	.word	0x0801314f
 8013190:	0801314f 	.word	0x0801314f
 8013194:	0801314f 	.word	0x0801314f
 8013198:	0801314f 	.word	0x0801314f
 801319c:	0801314f 	.word	0x0801314f
 80131a0:	0801314f 	.word	0x0801314f
 80131a4:	0801314f 	.word	0x0801314f
 80131a8:	0801314f 	.word	0x0801314f
 80131ac:	0801314f 	.word	0x0801314f
 80131b0:	0801314f 	.word	0x0801314f
 80131b4:	0801314f 	.word	0x0801314f
 80131b8:	0801314f 	.word	0x0801314f
 80131bc:	0801314f 	.word	0x0801314f
 80131c0:	0801314f 	.word	0x0801314f
 80131c4:	0801314f 	.word	0x0801314f
 80131c8:	0801314f 	.word	0x0801314f
 80131cc:	0801314f 	.word	0x0801314f
 80131d0:	0801314f 	.word	0x0801314f
 80131d4:	0801314f 	.word	0x0801314f
 80131d8:	0801314f 	.word	0x0801314f
 80131dc:	0801314f 	.word	0x0801314f
 80131e0:	0801314f 	.word	0x0801314f
 80131e4:	0801314f 	.word	0x0801314f
 80131e8:	0801314f 	.word	0x0801314f
 80131ec:	0801314f 	.word	0x0801314f
 80131f0:	08013317 	.word	0x08013317
 80131f4:	08013371 	.word	0x08013371
 80131f8:	080133e7 	.word	0x080133e7
 80131fc:	08013481 	.word	0x08013481
 8013200:	0801314f 	.word	0x0801314f
 8013204:	080134cd 	.word	0x080134cd
 8013208:	080135ad 	.word	0x080135ad
 801320c:	080136af 	.word	0x080136af
 8013210:	080136bd 	.word	0x080136bd
 8013214:	0801314f 	.word	0x0801314f
 8013218:	0801314f 	.word	0x0801314f
 801321c:	0801314f 	.word	0x0801314f
 8013220:	080136ed 	.word	0x080136ed
 8013224:	0801314f 	.word	0x0801314f
 8013228:	0801314f 	.word	0x0801314f
 801322c:	08013705 	.word	0x08013705
 8013230:	0801314f 	.word	0x0801314f
 8013234:	08013753 	.word	0x08013753
 8013238:	08013869 	.word	0x08013869
 801323c:	0801387b 	.word	0x0801387b
 8013240:	080138d3 	.word	0x080138d3
 8013244:	080138e3 	.word	0x080138e3
 8013248:	08013959 	.word	0x08013959
 801324c:	080133df 	.word	0x080133df
 8013250:	0801398d 	.word	0x0801398d
 8013254:	08013a4b 	.word	0x08013a4b
 8013258:	0801314f 	.word	0x0801314f
 801325c:	0801314f 	.word	0x0801314f
 8013260:	0801314f 	.word	0x0801314f
 8013264:	0801314f 	.word	0x0801314f
 8013268:	0801314f 	.word	0x0801314f
 801326c:	0801314f 	.word	0x0801314f
 8013270:	080132d9 	.word	0x080132d9
 8013274:	08013345 	.word	0x08013345
 8013278:	0801339f 	.word	0x0801339f
 801327c:	08013459 	.word	0x08013459
 8013280:	08013459 	.word	0x08013459
 8013284:	0801314f 	.word	0x0801314f
 8013288:	08013515 	.word	0x08013515
 801328c:	08013345 	.word	0x08013345
 8013290:	0801314f 	.word	0x0801314f
 8013294:	080136df 	.word	0x080136df
 8013298:	080136af 	.word	0x080136af
 801329c:	080136bd 	.word	0x080136bd
 80132a0:	080136e7 	.word	0x080136e7
 80132a4:	080136f1 	.word	0x080136f1
 80132a8:	0801314f 	.word	0x0801314f
 80132ac:	08013705 	.word	0x08013705
 80132b0:	0801314f 	.word	0x0801314f
 80132b4:	080133cf 	.word	0x080133cf
 80132b8:	08013769 	.word	0x08013769
 80132bc:	0801386d 	.word	0x0801386d
 80132c0:	080138b5 	.word	0x080138b5
 80132c4:	0801314f 	.word	0x0801314f
 80132c8:	08013949 	.word	0x08013949
 80132cc:	080133d7 	.word	0x080133d7
 80132d0:	08013971 	.word	0x08013971
 80132d4:	080139dd 	.word	0x080139dd
 80132d8:	69ab      	ldr	r3, [r5, #24]
 80132da:	4aa7      	ldr	r2, [pc, #668]	; (8013578 <__strftime+0x488>)
 80132dc:	3318      	adds	r3, #24
 80132de:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80132e2:	4630      	mov	r0, r6
 80132e4:	f7ec ffaa 	bl	800023c <strlen>
 80132e8:	3e01      	subs	r6, #1
 80132ea:	4420      	add	r0, r4
 80132ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80132f0:	42a0      	cmp	r0, r4
 80132f2:	d107      	bne.n	8013304 <__strftime+0x214>
 80132f4:	f89b 3000 	ldrb.w	r3, [fp]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	f000 83d7 	beq.w	8013aac <__strftime+0x9bc>
 80132fe:	f10b 0201 	add.w	r2, fp, #1
 8013302:	e6fe      	b.n	8013102 <__strftime+0x12>
 8013304:	42a3      	cmp	r3, r4
 8013306:	f67f af22 	bls.w	801314e <__strftime+0x5e>
 801330a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801330e:	f809 2004 	strb.w	r2, [r9, r4]
 8013312:	3401      	adds	r4, #1
 8013314:	e7ec      	b.n	80132f0 <__strftime+0x200>
 8013316:	69aa      	ldr	r2, [r5, #24]
 8013318:	4b97      	ldr	r3, [pc, #604]	; (8013578 <__strftime+0x488>)
 801331a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801331e:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8013320:	4630      	mov	r0, r6
 8013322:	f7ec ff8b 	bl	800023c <strlen>
 8013326:	3e01      	subs	r6, #1
 8013328:	4420      	add	r0, r4
 801332a:	f108 33ff 	add.w	r3, r8, #4294967295
 801332e:	42a0      	cmp	r0, r4
 8013330:	d0e0      	beq.n	80132f4 <__strftime+0x204>
 8013332:	42a3      	cmp	r3, r4
 8013334:	f67f af0b 	bls.w	801314e <__strftime+0x5e>
 8013338:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801333c:	f809 2004 	strb.w	r2, [r9, r4]
 8013340:	3401      	adds	r4, #1
 8013342:	e7f4      	b.n	801332e <__strftime+0x23e>
 8013344:	4b8c      	ldr	r3, [pc, #560]	; (8013578 <__strftime+0x488>)
 8013346:	692a      	ldr	r2, [r5, #16]
 8013348:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801334c:	4630      	mov	r0, r6
 801334e:	f7ec ff75 	bl	800023c <strlen>
 8013352:	3e01      	subs	r6, #1
 8013354:	4420      	add	r0, r4
 8013356:	f108 33ff 	add.w	r3, r8, #4294967295
 801335a:	42a0      	cmp	r0, r4
 801335c:	d0ca      	beq.n	80132f4 <__strftime+0x204>
 801335e:	42a3      	cmp	r3, r4
 8013360:	f67f aef5 	bls.w	801314e <__strftime+0x5e>
 8013364:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8013368:	f809 2004 	strb.w	r2, [r9, r4]
 801336c:	3401      	adds	r4, #1
 801336e:	e7f4      	b.n	801335a <__strftime+0x26a>
 8013370:	692b      	ldr	r3, [r5, #16]
 8013372:	4a81      	ldr	r2, [pc, #516]	; (8013578 <__strftime+0x488>)
 8013374:	330c      	adds	r3, #12
 8013376:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801337a:	4630      	mov	r0, r6
 801337c:	f7ec ff5e 	bl	800023c <strlen>
 8013380:	3e01      	subs	r6, #1
 8013382:	4420      	add	r0, r4
 8013384:	f108 33ff 	add.w	r3, r8, #4294967295
 8013388:	42a0      	cmp	r0, r4
 801338a:	d0b3      	beq.n	80132f4 <__strftime+0x204>
 801338c:	42a3      	cmp	r3, r4
 801338e:	f67f aede 	bls.w	801314e <__strftime+0x5e>
 8013392:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8013396:	f809 2004 	strb.w	r2, [r9, r4]
 801339a:	3401      	adds	r4, #1
 801339c:	e7f4      	b.n	8013388 <__strftime+0x298>
 801339e:	4b76      	ldr	r3, [pc, #472]	; (8013578 <__strftime+0x488>)
 80133a0:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80133a4:	4630      	mov	r0, r6
 80133a6:	f7ec ff49 	bl	800023c <strlen>
 80133aa:	7833      	ldrb	r3, [r6, #0]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d0a1      	beq.n	80132f4 <__strftime+0x204>
 80133b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80133b2:	9300      	str	r3, [sp, #0]
 80133b4:	4632      	mov	r2, r6
 80133b6:	462b      	mov	r3, r5
 80133b8:	eba8 0104 	sub.w	r1, r8, r4
 80133bc:	eb09 0004 	add.w	r0, r9, r4
 80133c0:	f7ff fe96 	bl	80130f0 <__strftime>
 80133c4:	2800      	cmp	r0, #0
 80133c6:	f77f aec2 	ble.w	801314e <__strftime+0x5e>
 80133ca:	4404      	add	r4, r0
 80133cc:	e792      	b.n	80132f4 <__strftime+0x204>
 80133ce:	4b6a      	ldr	r3, [pc, #424]	; (8013578 <__strftime+0x488>)
 80133d0:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 80133d4:	e7e6      	b.n	80133a4 <__strftime+0x2b4>
 80133d6:	4b68      	ldr	r3, [pc, #416]	; (8013578 <__strftime+0x488>)
 80133d8:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 80133dc:	e7e2      	b.n	80133a4 <__strftime+0x2b4>
 80133de:	4b66      	ldr	r3, [pc, #408]	; (8013578 <__strftime+0x488>)
 80133e0:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 80133e4:	e7de      	b.n	80133a4 <__strftime+0x2b4>
 80133e6:	4965      	ldr	r1, [pc, #404]	; (801357c <__strftime+0x48c>)
 80133e8:	f8d5 a014 	ldr.w	sl, [r5, #20]
 80133ec:	458a      	cmp	sl, r1
 80133ee:	bfac      	ite	ge
 80133f0:	2100      	movge	r1, #0
 80133f2:	2101      	movlt	r1, #1
 80133f4:	f1ba 0f00 	cmp.w	sl, #0
 80133f8:	db0e      	blt.n	8013418 <__strftime+0x328>
 80133fa:	2064      	movs	r0, #100	; 0x64
 80133fc:	fb9a f0f0 	sdiv	r0, sl, r0
 8013400:	3013      	adds	r0, #19
 8013402:	b19f      	cbz	r7, 801342c <__strftime+0x33c>
 8013404:	2863      	cmp	r0, #99	; 0x63
 8013406:	dd25      	ble.n	8013454 <__strftime+0x364>
 8013408:	4a5d      	ldr	r2, [pc, #372]	; (8013580 <__strftime+0x490>)
 801340a:	4b5e      	ldr	r3, [pc, #376]	; (8013584 <__strftime+0x494>)
 801340c:	2f2b      	cmp	r7, #43	; 0x2b
 801340e:	bf14      	ite	ne
 8013410:	4617      	movne	r7, r2
 8013412:	461f      	moveq	r7, r3
 8013414:	4a5c      	ldr	r2, [pc, #368]	; (8013588 <__strftime+0x498>)
 8013416:	e00b      	b.n	8013430 <__strftime+0x340>
 8013418:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 801341c:	9105      	str	r1, [sp, #20]
 801341e:	f000 ffa7 	bl	8014370 <abs>
 8013422:	2364      	movs	r3, #100	; 0x64
 8013424:	9905      	ldr	r1, [sp, #20]
 8013426:	fb90 f0f3 	sdiv	r0, r0, r3
 801342a:	e7ea      	b.n	8013402 <__strftime+0x312>
 801342c:	4f54      	ldr	r7, [pc, #336]	; (8013580 <__strftime+0x490>)
 801342e:	4a57      	ldr	r2, [pc, #348]	; (801358c <__strftime+0x49c>)
 8013430:	4b57      	ldr	r3, [pc, #348]	; (8013590 <__strftime+0x4a0>)
 8013432:	9001      	str	r0, [sp, #4]
 8013434:	2e02      	cmp	r6, #2
 8013436:	bf2c      	ite	cs
 8013438:	ebc1 0606 	rsbcs	r6, r1, r6
 801343c:	f1c1 0602 	rsbcc	r6, r1, #2
 8013440:	494e      	ldr	r1, [pc, #312]	; (801357c <__strftime+0x48c>)
 8013442:	9600      	str	r6, [sp, #0]
 8013444:	458a      	cmp	sl, r1
 8013446:	bfa8      	it	ge
 8013448:	463b      	movge	r3, r7
 801344a:	eba8 0104 	sub.w	r1, r8, r4
 801344e:	eb09 0004 	add.w	r0, r9, r4
 8013452:	e02a      	b.n	80134aa <__strftime+0x3ba>
 8013454:	4f4a      	ldr	r7, [pc, #296]	; (8013580 <__strftime+0x490>)
 8013456:	e7dd      	b.n	8013414 <__strftime+0x324>
 8013458:	494e      	ldr	r1, [pc, #312]	; (8013594 <__strftime+0x4a4>)
 801345a:	4a4f      	ldr	r2, [pc, #316]	; (8013598 <__strftime+0x4a8>)
 801345c:	68eb      	ldr	r3, [r5, #12]
 801345e:	2864      	cmp	r0, #100	; 0x64
 8013460:	bf08      	it	eq
 8013462:	460a      	moveq	r2, r1
 8013464:	eba8 0104 	sub.w	r1, r8, r4
 8013468:	eb09 0004 	add.w	r0, r9, r4
 801346c:	f001 fe22 	bl	80150b4 <sniprintf>
 8013470:	2800      	cmp	r0, #0
 8013472:	f6ff ae6c 	blt.w	801314e <__strftime+0x5e>
 8013476:	4404      	add	r4, r0
 8013478:	45a0      	cmp	r8, r4
 801347a:	f63f af3b 	bhi.w	80132f4 <__strftime+0x204>
 801347e:	e666      	b.n	801314e <__strftime+0x5e>
 8013480:	6968      	ldr	r0, [r5, #20]
 8013482:	692b      	ldr	r3, [r5, #16]
 8013484:	68ef      	ldr	r7, [r5, #12]
 8013486:	2800      	cmp	r0, #0
 8013488:	eb09 0604 	add.w	r6, r9, r4
 801348c:	eba8 0104 	sub.w	r1, r8, r4
 8013490:	f103 0301 	add.w	r3, r3, #1
 8013494:	db0c      	blt.n	80134b0 <__strftime+0x3c0>
 8013496:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801349a:	fb90 f2fc 	sdiv	r2, r0, ip
 801349e:	fb0c 0212 	mls	r2, ip, r2, r0
 80134a2:	e9cd 7200 	strd	r7, r2, [sp]
 80134a6:	4a3d      	ldr	r2, [pc, #244]	; (801359c <__strftime+0x4ac>)
 80134a8:	4630      	mov	r0, r6
 80134aa:	f001 fe03 	bl	80150b4 <sniprintf>
 80134ae:	e7df      	b.n	8013470 <__strftime+0x380>
 80134b0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80134b4:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80134b8:	f000 ff5a 	bl	8014370 <abs>
 80134bc:	2264      	movs	r2, #100	; 0x64
 80134be:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 80134c2:	fb90 fcf2 	sdiv	ip, r0, r2
 80134c6:	fb0c 0212 	mls	r2, ip, r2, r0
 80134ca:	e7ea      	b.n	80134a2 <__strftime+0x3b2>
 80134cc:	2325      	movs	r3, #37	; 0x25
 80134ce:	f88d 3020 	strb.w	r3, [sp, #32]
 80134d2:	b187      	cbz	r7, 80134f6 <__strftime+0x406>
 80134d4:	2e06      	cmp	r6, #6
 80134d6:	bf38      	it	cc
 80134d8:	2606      	movcc	r6, #6
 80134da:	1fb3      	subs	r3, r6, #6
 80134dc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80134e0:	d10c      	bne.n	80134fc <__strftime+0x40c>
 80134e2:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80134e6:	492e      	ldr	r1, [pc, #184]	; (80135a0 <__strftime+0x4b0>)
 80134e8:	f001 fe44 	bl	8015174 <strcpy>
 80134ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80134ee:	9300      	str	r3, [sp, #0]
 80134f0:	aa08      	add	r2, sp, #32
 80134f2:	462b      	mov	r3, r5
 80134f4:	e760      	b.n	80133b8 <__strftime+0x2c8>
 80134f6:	272b      	movs	r7, #43	; 0x2b
 80134f8:	260a      	movs	r6, #10
 80134fa:	e7ee      	b.n	80134da <__strftime+0x3ea>
 80134fc:	4a29      	ldr	r2, [pc, #164]	; (80135a4 <__strftime+0x4b4>)
 80134fe:	211e      	movs	r1, #30
 8013500:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8013504:	f001 fdd6 	bl	80150b4 <sniprintf>
 8013508:	2800      	cmp	r0, #0
 801350a:	ddea      	ble.n	80134e2 <__strftime+0x3f2>
 801350c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8013510:	4418      	add	r0, r3
 8013512:	e7e8      	b.n	80134e6 <__strftime+0x3f6>
 8013514:	4628      	mov	r0, r5
 8013516:	f7ff fd89 	bl	801302c <iso_year_adjust>
 801351a:	4606      	mov	r6, r0
 801351c:	6968      	ldr	r0, [r5, #20]
 801351e:	2800      	cmp	r0, #0
 8013520:	db11      	blt.n	8013546 <__strftime+0x456>
 8013522:	2264      	movs	r2, #100	; 0x64
 8013524:	fb90 f3f2 	sdiv	r3, r0, r2
 8013528:	fb02 0313 	mls	r3, r2, r3, r0
 801352c:	441e      	add	r6, r3
 801352e:	2364      	movs	r3, #100	; 0x64
 8013530:	fb96 f0f3 	sdiv	r0, r6, r3
 8013534:	fb03 6610 	mls	r6, r3, r0, r6
 8013538:	441e      	add	r6, r3
 801353a:	fbb6 f2f3 	udiv	r2, r6, r3
 801353e:	fb03 6312 	mls	r3, r3, r2, r6
 8013542:	4a14      	ldr	r2, [pc, #80]	; (8013594 <__strftime+0x4a4>)
 8013544:	e78e      	b.n	8013464 <__strftime+0x374>
 8013546:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801354a:	f000 ff11 	bl	8014370 <abs>
 801354e:	2364      	movs	r3, #100	; 0x64
 8013550:	2e00      	cmp	r6, #0
 8013552:	fb90 f2f3 	sdiv	r2, r0, r3
 8013556:	fb02 0313 	mls	r3, r2, r3, r0
 801355a:	da05      	bge.n	8013568 <__strftime+0x478>
 801355c:	6969      	ldr	r1, [r5, #20]
 801355e:	4a12      	ldr	r2, [pc, #72]	; (80135a8 <__strftime+0x4b8>)
 8013560:	4291      	cmp	r1, r2
 8013562:	bfb8      	it	lt
 8013564:	2601      	movlt	r6, #1
 8013566:	e7e1      	b.n	801352c <__strftime+0x43c>
 8013568:	d0e0      	beq.n	801352c <__strftime+0x43c>
 801356a:	6969      	ldr	r1, [r5, #20]
 801356c:	4a03      	ldr	r2, [pc, #12]	; (801357c <__strftime+0x48c>)
 801356e:	4291      	cmp	r1, r2
 8013570:	bfb8      	it	lt
 8013572:	f04f 36ff 	movlt.w	r6, #4294967295
 8013576:	e7d9      	b.n	801352c <__strftime+0x43c>
 8013578:	08019018 	.word	0x08019018
 801357c:	fffff894 	.word	0xfffff894
 8013580:	0801918b 	.word	0x0801918b
 8013584:	08018ea2 	.word	0x08018ea2
 8013588:	08018e9a 	.word	0x08018e9a
 801358c:	08018e93 	.word	0x08018e93
 8013590:	080192cb 	.word	0x080192cb
 8013594:	08018eb2 	.word	0x08018eb2
 8013598:	08018ea4 	.word	0x08018ea4
 801359c:	08018ea8 	.word	0x08018ea8
 80135a0:	08018ebb 	.word	0x08018ebb
 80135a4:	08018eb7 	.word	0x08018eb7
 80135a8:	fffff895 	.word	0xfffff895
 80135ac:	4bb6      	ldr	r3, [pc, #728]	; (8013888 <__strftime+0x798>)
 80135ae:	6969      	ldr	r1, [r5, #20]
 80135b0:	4299      	cmp	r1, r3
 80135b2:	bfac      	ite	ge
 80135b4:	2300      	movge	r3, #0
 80135b6:	2301      	movlt	r3, #1
 80135b8:	4628      	mov	r0, r5
 80135ba:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80135be:	f7ff fd35 	bl	801302c <iso_year_adjust>
 80135c2:	9906      	ldr	r1, [sp, #24]
 80135c4:	2900      	cmp	r1, #0
 80135c6:	4682      	mov	sl, r0
 80135c8:	db27      	blt.n	801361a <__strftime+0x52a>
 80135ca:	2264      	movs	r2, #100	; 0x64
 80135cc:	fb91 f2f2 	sdiv	r2, r1, r2
 80135d0:	3213      	adds	r2, #19
 80135d2:	6968      	ldr	r0, [r5, #20]
 80135d4:	2800      	cmp	r0, #0
 80135d6:	db2b      	blt.n	8013630 <__strftime+0x540>
 80135d8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80135dc:	fb90 fefc 	sdiv	lr, r0, ip
 80135e0:	fb0c 001e 	mls	r0, ip, lr, r0
 80135e4:	f1ba 0f00 	cmp.w	sl, #0
 80135e8:	da31      	bge.n	801364e <__strftime+0x55e>
 80135ea:	6969      	ldr	r1, [r5, #20]
 80135ec:	4ba7      	ldr	r3, [pc, #668]	; (801388c <__strftime+0x79c>)
 80135ee:	4299      	cmp	r1, r3
 80135f0:	db38      	blt.n	8013664 <__strftime+0x574>
 80135f2:	eb0a 0300 	add.w	r3, sl, r0
 80135f6:	1c59      	adds	r1, r3, #1
 80135f8:	d139      	bne.n	801366e <__strftime+0x57e>
 80135fa:	3a01      	subs	r2, #1
 80135fc:	2363      	movs	r3, #99	; 0x63
 80135fe:	2064      	movs	r0, #100	; 0x64
 8013600:	fb00 3202 	mla	r2, r0, r2, r3
 8013604:	9b05      	ldr	r3, [sp, #20]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d036      	beq.n	8013678 <__strftime+0x588>
 801360a:	232d      	movs	r3, #45	; 0x2d
 801360c:	f88d 3020 	strb.w	r3, [sp, #32]
 8013610:	b106      	cbz	r6, 8013614 <__strftime+0x524>
 8013612:	3e01      	subs	r6, #1
 8013614:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8013618:	e038      	b.n	801368c <__strftime+0x59c>
 801361a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801361e:	9106      	str	r1, [sp, #24]
 8013620:	f000 fea6 	bl	8014370 <abs>
 8013624:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8013628:	9906      	ldr	r1, [sp, #24]
 801362a:	fb90 f2fc 	sdiv	r2, r0, ip
 801362e:	e7d0      	b.n	80135d2 <__strftime+0x4e2>
 8013630:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8013634:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8013638:	f000 fe9a 	bl	8014370 <abs>
 801363c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8013640:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013644:	fb90 fefc 	sdiv	lr, r0, ip
 8013648:	fb0e 001c 	mls	r0, lr, ip, r0
 801364c:	e7ca      	b.n	80135e4 <__strftime+0x4f4>
 801364e:	d0d0      	beq.n	80135f2 <__strftime+0x502>
 8013650:	4b8d      	ldr	r3, [pc, #564]	; (8013888 <__strftime+0x798>)
 8013652:	4299      	cmp	r1, r3
 8013654:	bfb4      	ite	lt
 8013656:	2301      	movlt	r3, #1
 8013658:	2300      	movge	r3, #0
 801365a:	9305      	str	r3, [sp, #20]
 801365c:	bfb8      	it	lt
 801365e:	f04f 3aff 	movlt.w	sl, #4294967295
 8013662:	e7c6      	b.n	80135f2 <__strftime+0x502>
 8013664:	f04f 0a01 	mov.w	sl, #1
 8013668:	f8cd a014 	str.w	sl, [sp, #20]
 801366c:	e7c1      	b.n	80135f2 <__strftime+0x502>
 801366e:	2b64      	cmp	r3, #100	; 0x64
 8013670:	bf04      	itt	eq
 8013672:	3201      	addeq	r2, #1
 8013674:	2300      	moveq	r3, #0
 8013676:	e7c2      	b.n	80135fe <__strftime+0x50e>
 8013678:	2f2b      	cmp	r7, #43	; 0x2b
 801367a:	d106      	bne.n	801368a <__strftime+0x59a>
 801367c:	f242 730f 	movw	r3, #9999	; 0x270f
 8013680:	429a      	cmp	r2, r3
 8013682:	d902      	bls.n	801368a <__strftime+0x59a>
 8013684:	f88d 7020 	strb.w	r7, [sp, #32]
 8013688:	e7c2      	b.n	8013610 <__strftime+0x520>
 801368a:	ab08      	add	r3, sp, #32
 801368c:	2125      	movs	r1, #37	; 0x25
 801368e:	7019      	strb	r1, [r3, #0]
 8013690:	b94f      	cbnz	r7, 80136a6 <__strftime+0x5b6>
 8013692:	1c58      	adds	r0, r3, #1
 8013694:	497e      	ldr	r1, [pc, #504]	; (8013890 <__strftime+0x7a0>)
 8013696:	9205      	str	r2, [sp, #20]
 8013698:	f001 fd6c 	bl	8015174 <strcpy>
 801369c:	9a05      	ldr	r2, [sp, #20]
 801369e:	9200      	str	r2, [sp, #0]
 80136a0:	4633      	mov	r3, r6
 80136a2:	aa08      	add	r2, sp, #32
 80136a4:	e059      	b.n	801375a <__strftime+0x66a>
 80136a6:	2130      	movs	r1, #48	; 0x30
 80136a8:	1c98      	adds	r0, r3, #2
 80136aa:	7059      	strb	r1, [r3, #1]
 80136ac:	e7f2      	b.n	8013694 <__strftime+0x5a4>
 80136ae:	4979      	ldr	r1, [pc, #484]	; (8013894 <__strftime+0x7a4>)
 80136b0:	4a79      	ldr	r2, [pc, #484]	; (8013898 <__strftime+0x7a8>)
 80136b2:	68ab      	ldr	r3, [r5, #8]
 80136b4:	286b      	cmp	r0, #107	; 0x6b
 80136b6:	bf08      	it	eq
 80136b8:	460a      	moveq	r2, r1
 80136ba:	e6d3      	b.n	8013464 <__strftime+0x374>
 80136bc:	68ab      	ldr	r3, [r5, #8]
 80136be:	b163      	cbz	r3, 80136da <__strftime+0x5ea>
 80136c0:	2b0c      	cmp	r3, #12
 80136c2:	d004      	beq.n	80136ce <__strftime+0x5de>
 80136c4:	210c      	movs	r1, #12
 80136c6:	fb93 f2f1 	sdiv	r2, r3, r1
 80136ca:	fb01 3312 	mls	r3, r1, r2, r3
 80136ce:	4972      	ldr	r1, [pc, #456]	; (8013898 <__strftime+0x7a8>)
 80136d0:	4a70      	ldr	r2, [pc, #448]	; (8013894 <__strftime+0x7a4>)
 80136d2:	2849      	cmp	r0, #73	; 0x49
 80136d4:	bf08      	it	eq
 80136d6:	460a      	moveq	r2, r1
 80136d8:	e6c4      	b.n	8013464 <__strftime+0x374>
 80136da:	230c      	movs	r3, #12
 80136dc:	e7f7      	b.n	80136ce <__strftime+0x5de>
 80136de:	69eb      	ldr	r3, [r5, #28]
 80136e0:	4a6e      	ldr	r2, [pc, #440]	; (801389c <__strftime+0x7ac>)
 80136e2:	3301      	adds	r3, #1
 80136e4:	e6be      	b.n	8013464 <__strftime+0x374>
 80136e6:	692b      	ldr	r3, [r5, #16]
 80136e8:	3301      	adds	r3, #1
 80136ea:	e72a      	b.n	8013542 <__strftime+0x452>
 80136ec:	686b      	ldr	r3, [r5, #4]
 80136ee:	e728      	b.n	8013542 <__strftime+0x452>
 80136f0:	f108 33ff 	add.w	r3, r8, #4294967295
 80136f4:	42a3      	cmp	r3, r4
 80136f6:	f67f ad2a 	bls.w	801314e <__strftime+0x5e>
 80136fa:	230a      	movs	r3, #10
 80136fc:	f809 3004 	strb.w	r3, [r9, r4]
 8013700:	3401      	adds	r4, #1
 8013702:	e5f7      	b.n	80132f4 <__strftime+0x204>
 8013704:	68ab      	ldr	r3, [r5, #8]
 8013706:	2b0b      	cmp	r3, #11
 8013708:	bfcc      	ite	gt
 801370a:	22a4      	movgt	r2, #164	; 0xa4
 801370c:	22a0      	movle	r2, #160	; 0xa0
 801370e:	4b64      	ldr	r3, [pc, #400]	; (80138a0 <__strftime+0x7b0>)
 8013710:	4413      	add	r3, r2
 8013712:	685e      	ldr	r6, [r3, #4]
 8013714:	4630      	mov	r0, r6
 8013716:	f7ec fd91 	bl	800023c <strlen>
 801371a:	1e72      	subs	r2, r6, #1
 801371c:	4420      	add	r0, r4
 801371e:	f108 36ff 	add.w	r6, r8, #4294967295
 8013722:	42a0      	cmp	r0, r4
 8013724:	f43f ade6 	beq.w	80132f4 <__strftime+0x204>
 8013728:	42a6      	cmp	r6, r4
 801372a:	f67f ad10 	bls.w	801314e <__strftime+0x5e>
 801372e:	f89b 1000 	ldrb.w	r1, [fp]
 8013732:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013736:	2950      	cmp	r1, #80	; 0x50
 8013738:	d107      	bne.n	801374a <__strftime+0x65a>
 801373a:	495a      	ldr	r1, [pc, #360]	; (80138a4 <__strftime+0x7b4>)
 801373c:	5cc9      	ldrb	r1, [r1, r3]
 801373e:	f001 0103 	and.w	r1, r1, #3
 8013742:	2901      	cmp	r1, #1
 8013744:	bf08      	it	eq
 8013746:	3320      	addeq	r3, #32
 8013748:	b2db      	uxtb	r3, r3
 801374a:	f809 3004 	strb.w	r3, [r9, r4]
 801374e:	3401      	adds	r4, #1
 8013750:	e7e7      	b.n	8013722 <__strftime+0x632>
 8013752:	686b      	ldr	r3, [r5, #4]
 8013754:	9300      	str	r3, [sp, #0]
 8013756:	4a54      	ldr	r2, [pc, #336]	; (80138a8 <__strftime+0x7b8>)
 8013758:	68ab      	ldr	r3, [r5, #8]
 801375a:	eba8 0104 	sub.w	r1, r8, r4
 801375e:	eb09 0004 	add.w	r0, r9, r4
 8013762:	f001 fca7 	bl	80150b4 <sniprintf>
 8013766:	e683      	b.n	8013470 <__strftime+0x380>
 8013768:	6a2b      	ldr	r3, [r5, #32]
 801376a:	2b00      	cmp	r3, #0
 801376c:	db79      	blt.n	8013862 <__strftime+0x772>
 801376e:	f000 fb03 	bl	8013d78 <__tz_lock>
 8013772:	9b04      	ldr	r3, [sp, #16]
 8013774:	b90b      	cbnz	r3, 801377a <__strftime+0x68a>
 8013776:	f000 fb0b 	bl	8013d90 <_tzset_unlocked>
 801377a:	f000 fed9 	bl	8014530 <__gettzinfo>
 801377e:	6a2b      	ldr	r3, [r5, #32]
 8013780:	2b00      	cmp	r3, #0
 8013782:	bfcc      	ite	gt
 8013784:	2350      	movgt	r3, #80	; 0x50
 8013786:	2328      	movle	r3, #40	; 0x28
 8013788:	58c3      	ldr	r3, [r0, r3]
 801378a:	f1c3 0a00 	rsb	sl, r3, #0
 801378e:	f000 faf9 	bl	8013d84 <__tz_unlock>
 8013792:	2301      	movs	r3, #1
 8013794:	9304      	str	r3, [sp, #16]
 8013796:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801379a:	4662      	mov	r2, ip
 801379c:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 80137a0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80137a4:	9602      	str	r6, [sp, #8]
 80137a6:	f143 36ff 	adc.w	r6, r3, #4294967295
 80137aa:	9603      	str	r6, [sp, #12]
 80137ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80137b0:	2e00      	cmp	r6, #0
 80137b2:	f177 0600 	sbcs.w	r6, r7, #0
 80137b6:	eba8 0104 	sub.w	r1, r8, r4
 80137ba:	eb09 0004 	add.w	r0, r9, r4
 80137be:	da05      	bge.n	80137cc <__strftime+0x6dc>
 80137c0:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 80137c4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80137c8:	9602      	str	r6, [sp, #8]
 80137ca:	9303      	str	r3, [sp, #12]
 80137cc:	9b02      	ldr	r3, [sp, #8]
 80137ce:	089e      	lsrs	r6, r3, #2
 80137d0:	9b03      	ldr	r3, [sp, #12]
 80137d2:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 80137d6:	f10c 32ff 	add.w	r2, ip, #4294967295
 80137da:	109f      	asrs	r7, r3, #2
 80137dc:	2364      	movs	r3, #100	; 0x64
 80137de:	fb92 f3f3 	sdiv	r3, r2, r3
 80137e2:	1af6      	subs	r6, r6, r3
 80137e4:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 80137e8:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80137ec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80137f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80137f4:	18f6      	adds	r6, r6, r3
 80137f6:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80137fa:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80137fe:	f240 136d 	movw	r3, #365	; 0x16d
 8013802:	fb03 fc0c 	mul.w	ip, r3, ip
 8013806:	69eb      	ldr	r3, [r5, #28]
 8013808:	eb16 060c 	adds.w	r6, r6, ip
 801380c:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8013810:	18f6      	adds	r6, r6, r3
 8013812:	f04f 0c18 	mov.w	ip, #24
 8013816:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801381a:	fba6 230c 	umull	r2, r3, r6, ip
 801381e:	68ae      	ldr	r6, [r5, #8]
 8013820:	fb0c 3307 	mla	r3, ip, r7, r3
 8013824:	1992      	adds	r2, r2, r6
 8013826:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 801382a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801382e:	fba2 670c 	umull	r6, r7, r2, ip
 8013832:	fb0c 7703 	mla	r7, ip, r3, r7
 8013836:	686b      	ldr	r3, [r5, #4]
 8013838:	18f6      	adds	r6, r6, r3
 801383a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801383e:	fba6 230c 	umull	r2, r3, r6, ip
 8013842:	682e      	ldr	r6, [r5, #0]
 8013844:	fb0c 3307 	mla	r3, ip, r7, r3
 8013848:	1992      	adds	r2, r2, r6
 801384a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801384e:	ebb2 020a 	subs.w	r2, r2, sl
 8013852:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8013856:	e9cd 2300 	strd	r2, r3, [sp]
 801385a:	4a14      	ldr	r2, [pc, #80]	; (80138ac <__strftime+0x7bc>)
 801385c:	f001 fc2a 	bl	80150b4 <sniprintf>
 8013860:	e606      	b.n	8013470 <__strftime+0x380>
 8013862:	f04f 0a00 	mov.w	sl, #0
 8013866:	e796      	b.n	8013796 <__strftime+0x6a6>
 8013868:	682b      	ldr	r3, [r5, #0]
 801386a:	e66a      	b.n	8013542 <__strftime+0x452>
 801386c:	f108 33ff 	add.w	r3, r8, #4294967295
 8013870:	42a3      	cmp	r3, r4
 8013872:	f67f ac6c 	bls.w	801314e <__strftime+0x5e>
 8013876:	2309      	movs	r3, #9
 8013878:	e740      	b.n	80136fc <__strftime+0x60c>
 801387a:	682b      	ldr	r3, [r5, #0]
 801387c:	9301      	str	r3, [sp, #4]
 801387e:	686b      	ldr	r3, [r5, #4]
 8013880:	9300      	str	r3, [sp, #0]
 8013882:	4a0b      	ldr	r2, [pc, #44]	; (80138b0 <__strftime+0x7c0>)
 8013884:	68ab      	ldr	r3, [r5, #8]
 8013886:	e5e0      	b.n	801344a <__strftime+0x35a>
 8013888:	fffff894 	.word	0xfffff894
 801388c:	fffff895 	.word	0xfffff895
 8013890:	08018ec3 	.word	0x08018ec3
 8013894:	08018ea4 	.word	0x08018ea4
 8013898:	08018eb2 	.word	0x08018eb2
 801389c:	08018ec7 	.word	0x08018ec7
 80138a0:	08019018 	.word	0x08019018
 80138a4:	0801918d 	.word	0x0801918d
 80138a8:	08018ed6 	.word	0x08018ed6
 80138ac:	08018ecc 	.word	0x08018ecc
 80138b0:	08018ed1 	.word	0x08018ed1
 80138b4:	f108 33ff 	add.w	r3, r8, #4294967295
 80138b8:	42a3      	cmp	r3, r4
 80138ba:	f67f ac48 	bls.w	801314e <__strftime+0x5e>
 80138be:	69ab      	ldr	r3, [r5, #24]
 80138c0:	eb09 0204 	add.w	r2, r9, r4
 80138c4:	3401      	adds	r4, #1
 80138c6:	b913      	cbnz	r3, 80138ce <__strftime+0x7de>
 80138c8:	2337      	movs	r3, #55	; 0x37
 80138ca:	7013      	strb	r3, [r2, #0]
 80138cc:	e512      	b.n	80132f4 <__strftime+0x204>
 80138ce:	3330      	adds	r3, #48	; 0x30
 80138d0:	e7fb      	b.n	80138ca <__strftime+0x7da>
 80138d2:	69eb      	ldr	r3, [r5, #28]
 80138d4:	69aa      	ldr	r2, [r5, #24]
 80138d6:	3307      	adds	r3, #7
 80138d8:	1a9b      	subs	r3, r3, r2
 80138da:	2207      	movs	r2, #7
 80138dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80138e0:	e62f      	b.n	8013542 <__strftime+0x452>
 80138e2:	4628      	mov	r0, r5
 80138e4:	f7ff fba2 	bl	801302c <iso_year_adjust>
 80138e8:	69aa      	ldr	r2, [r5, #24]
 80138ea:	b132      	cbz	r2, 80138fa <__strftime+0x80a>
 80138ec:	3a01      	subs	r2, #1
 80138ee:	2800      	cmp	r0, #0
 80138f0:	dc28      	bgt.n	8013944 <__strftime+0x854>
 80138f2:	69eb      	ldr	r3, [r5, #28]
 80138f4:	d103      	bne.n	80138fe <__strftime+0x80e>
 80138f6:	330a      	adds	r3, #10
 80138f8:	e7ee      	b.n	80138d8 <__strftime+0x7e8>
 80138fa:	2206      	movs	r2, #6
 80138fc:	e7f7      	b.n	80138ee <__strftime+0x7fe>
 80138fe:	6968      	ldr	r0, [r5, #20]
 8013900:	2800      	cmp	r0, #0
 8013902:	eba2 0303 	sub.w	r3, r2, r3
 8013906:	f240 726b 	movw	r2, #1899	; 0x76b
 801390a:	bfa8      	it	ge
 801390c:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8013910:	4410      	add	r0, r2
 8013912:	0782      	lsls	r2, r0, #30
 8013914:	d105      	bne.n	8013922 <__strftime+0x832>
 8013916:	2264      	movs	r2, #100	; 0x64
 8013918:	fb90 f1f2 	sdiv	r1, r0, r2
 801391c:	fb02 0111 	mls	r1, r2, r1, r0
 8013920:	b971      	cbnz	r1, 8013940 <__strftime+0x850>
 8013922:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8013926:	fb90 f2f1 	sdiv	r2, r0, r1
 801392a:	fb01 0212 	mls	r2, r1, r2, r0
 801392e:	fab2 f282 	clz	r2, r2
 8013932:	0952      	lsrs	r2, r2, #5
 8013934:	1a9a      	subs	r2, r3, r2
 8013936:	2a05      	cmp	r2, #5
 8013938:	bfb4      	ite	lt
 801393a:	2335      	movlt	r3, #53	; 0x35
 801393c:	2334      	movge	r3, #52	; 0x34
 801393e:	e600      	b.n	8013542 <__strftime+0x452>
 8013940:	2201      	movs	r2, #1
 8013942:	e7f7      	b.n	8013934 <__strftime+0x844>
 8013944:	2301      	movs	r3, #1
 8013946:	e5fc      	b.n	8013542 <__strftime+0x452>
 8013948:	f108 33ff 	add.w	r3, r8, #4294967295
 801394c:	42a3      	cmp	r3, r4
 801394e:	f67f abfe 	bls.w	801314e <__strftime+0x5e>
 8013952:	69ab      	ldr	r3, [r5, #24]
 8013954:	3330      	adds	r3, #48	; 0x30
 8013956:	e6d1      	b.n	80136fc <__strftime+0x60c>
 8013958:	69ab      	ldr	r3, [r5, #24]
 801395a:	b13b      	cbz	r3, 801396c <__strftime+0x87c>
 801395c:	3b01      	subs	r3, #1
 801395e:	69ea      	ldr	r2, [r5, #28]
 8013960:	3207      	adds	r2, #7
 8013962:	1ad2      	subs	r2, r2, r3
 8013964:	2307      	movs	r3, #7
 8013966:	fb92 f3f3 	sdiv	r3, r2, r3
 801396a:	e5ea      	b.n	8013542 <__strftime+0x452>
 801396c:	2306      	movs	r3, #6
 801396e:	e7f6      	b.n	801395e <__strftime+0x86e>
 8013970:	6968      	ldr	r0, [r5, #20]
 8013972:	2800      	cmp	r0, #0
 8013974:	db05      	blt.n	8013982 <__strftime+0x892>
 8013976:	2264      	movs	r2, #100	; 0x64
 8013978:	fb90 f3f2 	sdiv	r3, r0, r2
 801397c:	fb03 0312 	mls	r3, r3, r2, r0
 8013980:	e5df      	b.n	8013542 <__strftime+0x452>
 8013982:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8013986:	f000 fcf3 	bl	8014370 <abs>
 801398a:	e7f4      	b.n	8013976 <__strftime+0x886>
 801398c:	696b      	ldr	r3, [r5, #20]
 801398e:	4a4c      	ldr	r2, [pc, #304]	; (8013ac0 <__strftime+0x9d0>)
 8013990:	4293      	cmp	r3, r2
 8013992:	da09      	bge.n	80139a8 <__strftime+0x8b8>
 8013994:	212d      	movs	r1, #45	; 0x2d
 8013996:	f88d 1020 	strb.w	r1, [sp, #32]
 801399a:	eba2 0a03 	sub.w	sl, r2, r3
 801399e:	b106      	cbz	r6, 80139a2 <__strftime+0x8b2>
 80139a0:	3e01      	subs	r6, #1
 80139a2:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80139a6:	e00b      	b.n	80139c0 <__strftime+0x8d0>
 80139a8:	2f2b      	cmp	r7, #43	; 0x2b
 80139aa:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 80139ae:	d106      	bne.n	80139be <__strftime+0x8ce>
 80139b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80139b4:	459a      	cmp	sl, r3
 80139b6:	d902      	bls.n	80139be <__strftime+0x8ce>
 80139b8:	f88d 7020 	strb.w	r7, [sp, #32]
 80139bc:	e7ef      	b.n	801399e <__strftime+0x8ae>
 80139be:	ab08      	add	r3, sp, #32
 80139c0:	2225      	movs	r2, #37	; 0x25
 80139c2:	701a      	strb	r2, [r3, #0]
 80139c4:	b937      	cbnz	r7, 80139d4 <__strftime+0x8e4>
 80139c6:	1c58      	adds	r0, r3, #1
 80139c8:	493e      	ldr	r1, [pc, #248]	; (8013ac4 <__strftime+0x9d4>)
 80139ca:	f001 fbd3 	bl	8015174 <strcpy>
 80139ce:	f8cd a000 	str.w	sl, [sp]
 80139d2:	e665      	b.n	80136a0 <__strftime+0x5b0>
 80139d4:	2230      	movs	r2, #48	; 0x30
 80139d6:	1c98      	adds	r0, r3, #2
 80139d8:	705a      	strb	r2, [r3, #1]
 80139da:	e7f5      	b.n	80139c8 <__strftime+0x8d8>
 80139dc:	6a2b      	ldr	r3, [r5, #32]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	f6ff ac88 	blt.w	80132f4 <__strftime+0x204>
 80139e4:	f000 f9c8 	bl	8013d78 <__tz_lock>
 80139e8:	9b04      	ldr	r3, [sp, #16]
 80139ea:	b90b      	cbnz	r3, 80139f0 <__strftime+0x900>
 80139ec:	f000 f9d0 	bl	8013d90 <_tzset_unlocked>
 80139f0:	f000 fd9e 	bl	8014530 <__gettzinfo>
 80139f4:	6a2b      	ldr	r3, [r5, #32]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	bfcc      	ite	gt
 80139fa:	2350      	movgt	r3, #80	; 0x50
 80139fc:	2328      	movle	r3, #40	; 0x28
 80139fe:	eb09 0704 	add.w	r7, r9, r4
 8013a02:	58c6      	ldr	r6, [r0, r3]
 8013a04:	f000 f9be 	bl	8013d84 <__tz_unlock>
 8013a08:	4276      	negs	r6, r6
 8013a0a:	233c      	movs	r3, #60	; 0x3c
 8013a0c:	fb96 f0f3 	sdiv	r0, r6, r3
 8013a10:	f000 fe52 	bl	80146b8 <labs>
 8013a14:	233c      	movs	r3, #60	; 0x3c
 8013a16:	eba8 0a04 	sub.w	sl, r8, r4
 8013a1a:	fb90 f2f3 	sdiv	r2, r0, r3
 8013a1e:	fb02 0013 	mls	r0, r2, r3, r0
 8013a22:	9000      	str	r0, [sp, #0]
 8013a24:	4a28      	ldr	r2, [pc, #160]	; (8013ac8 <__strftime+0x9d8>)
 8013a26:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8013a2a:	4651      	mov	r1, sl
 8013a2c:	4638      	mov	r0, r7
 8013a2e:	fb96 f3f3 	sdiv	r3, r6, r3
 8013a32:	f001 fb3f 	bl	80150b4 <sniprintf>
 8013a36:	2800      	cmp	r0, #0
 8013a38:	f6ff ab89 	blt.w	801314e <__strftime+0x5e>
 8013a3c:	4404      	add	r4, r0
 8013a3e:	45a0      	cmp	r8, r4
 8013a40:	f67f ab85 	bls.w	801314e <__strftime+0x5e>
 8013a44:	2301      	movs	r3, #1
 8013a46:	9304      	str	r3, [sp, #16]
 8013a48:	e454      	b.n	80132f4 <__strftime+0x204>
 8013a4a:	6a2b      	ldr	r3, [r5, #32]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	f6ff ac51 	blt.w	80132f4 <__strftime+0x204>
 8013a52:	f000 f991 	bl	8013d78 <__tz_lock>
 8013a56:	9b04      	ldr	r3, [sp, #16]
 8013a58:	b90b      	cbnz	r3, 8013a5e <__strftime+0x96e>
 8013a5a:	f000 f999 	bl	8013d90 <_tzset_unlocked>
 8013a5e:	6a2b      	ldr	r3, [r5, #32]
 8013a60:	4a1a      	ldr	r2, [pc, #104]	; (8013acc <__strftime+0x9dc>)
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	bfd4      	ite	le
 8013a66:	2300      	movle	r3, #0
 8013a68:	2301      	movgt	r3, #1
 8013a6a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8013a6e:	4630      	mov	r0, r6
 8013a70:	f7ec fbe4 	bl	800023c <strlen>
 8013a74:	3e01      	subs	r6, #1
 8013a76:	4420      	add	r0, r4
 8013a78:	f108 33ff 	add.w	r3, r8, #4294967295
 8013a7c:	42a0      	cmp	r0, r4
 8013a7e:	d102      	bne.n	8013a86 <__strftime+0x996>
 8013a80:	f000 f980 	bl	8013d84 <__tz_unlock>
 8013a84:	e7de      	b.n	8013a44 <__strftime+0x954>
 8013a86:	42a3      	cmp	r3, r4
 8013a88:	d905      	bls.n	8013a96 <__strftime+0x9a6>
 8013a8a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8013a8e:	f809 2004 	strb.w	r2, [r9, r4]
 8013a92:	3401      	adds	r4, #1
 8013a94:	e7f2      	b.n	8013a7c <__strftime+0x98c>
 8013a96:	f000 f975 	bl	8013d84 <__tz_unlock>
 8013a9a:	f7ff bb58 	b.w	801314e <__strftime+0x5e>
 8013a9e:	f108 33ff 	add.w	r3, r8, #4294967295
 8013aa2:	42a3      	cmp	r3, r4
 8013aa4:	f67f ab53 	bls.w	801314e <__strftime+0x5e>
 8013aa8:	2325      	movs	r3, #37	; 0x25
 8013aaa:	e627      	b.n	80136fc <__strftime+0x60c>
 8013aac:	f1b8 0f00 	cmp.w	r8, #0
 8013ab0:	d002      	beq.n	8013ab8 <__strftime+0x9c8>
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	f809 3004 	strb.w	r3, [r9, r4]
 8013ab8:	4620      	mov	r0, r4
 8013aba:	b011      	add	sp, #68	; 0x44
 8013abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ac0:	fffff894 	.word	0xfffff894
 8013ac4:	08018ec3 	.word	0x08018ec3
 8013ac8:	08018ee0 	.word	0x08018ee0
 8013acc:	20000164 	.word	0x20000164

08013ad0 <strftime>:
 8013ad0:	b513      	push	{r0, r1, r4, lr}
 8013ad2:	4c03      	ldr	r4, [pc, #12]	; (8013ae0 <strftime+0x10>)
 8013ad4:	9400      	str	r4, [sp, #0]
 8013ad6:	f7ff fb0b 	bl	80130f0 <__strftime>
 8013ada:	b002      	add	sp, #8
 8013adc:	bd10      	pop	{r4, pc}
 8013ade:	bf00      	nop
 8013ae0:	200001c8 	.word	0x200001c8

08013ae4 <_strtoul_l.isra.0>:
 8013ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ae8:	4e3b      	ldr	r6, [pc, #236]	; (8013bd8 <_strtoul_l.isra.0+0xf4>)
 8013aea:	4686      	mov	lr, r0
 8013aec:	468c      	mov	ip, r1
 8013aee:	4660      	mov	r0, ip
 8013af0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013af4:	5da5      	ldrb	r5, [r4, r6]
 8013af6:	f015 0508 	ands.w	r5, r5, #8
 8013afa:	d1f8      	bne.n	8013aee <_strtoul_l.isra.0+0xa>
 8013afc:	2c2d      	cmp	r4, #45	; 0x2d
 8013afe:	d134      	bne.n	8013b6a <_strtoul_l.isra.0+0x86>
 8013b00:	f89c 4000 	ldrb.w	r4, [ip]
 8013b04:	f04f 0801 	mov.w	r8, #1
 8013b08:	f100 0c02 	add.w	ip, r0, #2
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d05e      	beq.n	8013bce <_strtoul_l.isra.0+0xea>
 8013b10:	2b10      	cmp	r3, #16
 8013b12:	d10c      	bne.n	8013b2e <_strtoul_l.isra.0+0x4a>
 8013b14:	2c30      	cmp	r4, #48	; 0x30
 8013b16:	d10a      	bne.n	8013b2e <_strtoul_l.isra.0+0x4a>
 8013b18:	f89c 0000 	ldrb.w	r0, [ip]
 8013b1c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013b20:	2858      	cmp	r0, #88	; 0x58
 8013b22:	d14f      	bne.n	8013bc4 <_strtoul_l.isra.0+0xe0>
 8013b24:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8013b28:	2310      	movs	r3, #16
 8013b2a:	f10c 0c02 	add.w	ip, ip, #2
 8013b2e:	f04f 37ff 	mov.w	r7, #4294967295
 8013b32:	2500      	movs	r5, #0
 8013b34:	fbb7 f7f3 	udiv	r7, r7, r3
 8013b38:	fb03 f907 	mul.w	r9, r3, r7
 8013b3c:	ea6f 0909 	mvn.w	r9, r9
 8013b40:	4628      	mov	r0, r5
 8013b42:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8013b46:	2e09      	cmp	r6, #9
 8013b48:	d818      	bhi.n	8013b7c <_strtoul_l.isra.0+0x98>
 8013b4a:	4634      	mov	r4, r6
 8013b4c:	42a3      	cmp	r3, r4
 8013b4e:	dd24      	ble.n	8013b9a <_strtoul_l.isra.0+0xb6>
 8013b50:	2d00      	cmp	r5, #0
 8013b52:	db1f      	blt.n	8013b94 <_strtoul_l.isra.0+0xb0>
 8013b54:	4287      	cmp	r7, r0
 8013b56:	d31d      	bcc.n	8013b94 <_strtoul_l.isra.0+0xb0>
 8013b58:	d101      	bne.n	8013b5e <_strtoul_l.isra.0+0x7a>
 8013b5a:	45a1      	cmp	r9, r4
 8013b5c:	db1a      	blt.n	8013b94 <_strtoul_l.isra.0+0xb0>
 8013b5e:	fb00 4003 	mla	r0, r0, r3, r4
 8013b62:	2501      	movs	r5, #1
 8013b64:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013b68:	e7eb      	b.n	8013b42 <_strtoul_l.isra.0+0x5e>
 8013b6a:	2c2b      	cmp	r4, #43	; 0x2b
 8013b6c:	bf08      	it	eq
 8013b6e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8013b72:	46a8      	mov	r8, r5
 8013b74:	bf08      	it	eq
 8013b76:	f100 0c02 	addeq.w	ip, r0, #2
 8013b7a:	e7c7      	b.n	8013b0c <_strtoul_l.isra.0+0x28>
 8013b7c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8013b80:	2e19      	cmp	r6, #25
 8013b82:	d801      	bhi.n	8013b88 <_strtoul_l.isra.0+0xa4>
 8013b84:	3c37      	subs	r4, #55	; 0x37
 8013b86:	e7e1      	b.n	8013b4c <_strtoul_l.isra.0+0x68>
 8013b88:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8013b8c:	2e19      	cmp	r6, #25
 8013b8e:	d804      	bhi.n	8013b9a <_strtoul_l.isra.0+0xb6>
 8013b90:	3c57      	subs	r4, #87	; 0x57
 8013b92:	e7db      	b.n	8013b4c <_strtoul_l.isra.0+0x68>
 8013b94:	f04f 35ff 	mov.w	r5, #4294967295
 8013b98:	e7e4      	b.n	8013b64 <_strtoul_l.isra.0+0x80>
 8013b9a:	2d00      	cmp	r5, #0
 8013b9c:	da07      	bge.n	8013bae <_strtoul_l.isra.0+0xca>
 8013b9e:	2322      	movs	r3, #34	; 0x22
 8013ba0:	f8ce 3000 	str.w	r3, [lr]
 8013ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ba8:	b942      	cbnz	r2, 8013bbc <_strtoul_l.isra.0+0xd8>
 8013baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013bae:	f1b8 0f00 	cmp.w	r8, #0
 8013bb2:	d000      	beq.n	8013bb6 <_strtoul_l.isra.0+0xd2>
 8013bb4:	4240      	negs	r0, r0
 8013bb6:	2a00      	cmp	r2, #0
 8013bb8:	d0f7      	beq.n	8013baa <_strtoul_l.isra.0+0xc6>
 8013bba:	b10d      	cbz	r5, 8013bc0 <_strtoul_l.isra.0+0xdc>
 8013bbc:	f10c 31ff 	add.w	r1, ip, #4294967295
 8013bc0:	6011      	str	r1, [r2, #0]
 8013bc2:	e7f2      	b.n	8013baa <_strtoul_l.isra.0+0xc6>
 8013bc4:	2430      	movs	r4, #48	; 0x30
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d1b1      	bne.n	8013b2e <_strtoul_l.isra.0+0x4a>
 8013bca:	2308      	movs	r3, #8
 8013bcc:	e7af      	b.n	8013b2e <_strtoul_l.isra.0+0x4a>
 8013bce:	2c30      	cmp	r4, #48	; 0x30
 8013bd0:	d0a2      	beq.n	8013b18 <_strtoul_l.isra.0+0x34>
 8013bd2:	230a      	movs	r3, #10
 8013bd4:	e7ab      	b.n	8013b2e <_strtoul_l.isra.0+0x4a>
 8013bd6:	bf00      	nop
 8013bd8:	0801918d 	.word	0x0801918d

08013bdc <_strtoul_r>:
 8013bdc:	f7ff bf82 	b.w	8013ae4 <_strtoul_l.isra.0>

08013be0 <strtoul>:
 8013be0:	4613      	mov	r3, r2
 8013be2:	460a      	mov	r2, r1
 8013be4:	4601      	mov	r1, r0
 8013be6:	4802      	ldr	r0, [pc, #8]	; (8013bf0 <strtoul+0x10>)
 8013be8:	6800      	ldr	r0, [r0, #0]
 8013bea:	f7ff bf7b 	b.w	8013ae4 <_strtoul_l.isra.0>
 8013bee:	bf00      	nop
 8013bf0:	20000100 	.word	0x20000100

08013bf4 <time>:
 8013bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013bf6:	4b0b      	ldr	r3, [pc, #44]	; (8013c24 <time+0x30>)
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	4669      	mov	r1, sp
 8013bfc:	4604      	mov	r4, r0
 8013bfe:	6818      	ldr	r0, [r3, #0]
 8013c00:	f000 fc84 	bl	801450c <_gettimeofday_r>
 8013c04:	2800      	cmp	r0, #0
 8013c06:	bfbe      	ittt	lt
 8013c08:	f04f 32ff 	movlt.w	r2, #4294967295
 8013c0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013c10:	e9cd 2300 	strdlt	r2, r3, [sp]
 8013c14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c18:	b10c      	cbz	r4, 8013c1e <time+0x2a>
 8013c1a:	e9c4 0100 	strd	r0, r1, [r4]
 8013c1e:	b004      	add	sp, #16
 8013c20:	bd10      	pop	{r4, pc}
 8013c22:	bf00      	nop
 8013c24:	20000100 	.word	0x20000100

08013c28 <__tzcalc_limits>:
 8013c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c2c:	4680      	mov	r8, r0
 8013c2e:	f000 fc7f 	bl	8014530 <__gettzinfo>
 8013c32:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8013c36:	4598      	cmp	r8, r3
 8013c38:	f340 8098 	ble.w	8013d6c <__tzcalc_limits+0x144>
 8013c3c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8013c40:	4443      	add	r3, r8
 8013c42:	109b      	asrs	r3, r3, #2
 8013c44:	f240 126d 	movw	r2, #365	; 0x16d
 8013c48:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8013c4c:	fb02 3505 	mla	r5, r2, r5, r3
 8013c50:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8013c54:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8013c58:	fb93 f3f2 	sdiv	r3, r3, r2
 8013c5c:	441d      	add	r5, r3
 8013c5e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013c62:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8013c66:	fb98 f7f3 	sdiv	r7, r8, r3
 8013c6a:	fb03 8717 	mls	r7, r3, r7, r8
 8013c6e:	4442      	add	r2, r8
 8013c70:	fab7 fc87 	clz	ip, r7
 8013c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8013c78:	f008 0303 	and.w	r3, r8, #3
 8013c7c:	4415      	add	r5, r2
 8013c7e:	2264      	movs	r2, #100	; 0x64
 8013c80:	f8c0 8004 	str.w	r8, [r0, #4]
 8013c84:	fb98 f6f2 	sdiv	r6, r8, r2
 8013c88:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8013c8c:	fb02 8616 	mls	r6, r2, r6, r8
 8013c90:	4604      	mov	r4, r0
 8013c92:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8013c96:	9300      	str	r3, [sp, #0]
 8013c98:	f04f 0e07 	mov.w	lr, #7
 8013c9c:	7a22      	ldrb	r2, [r4, #8]
 8013c9e:	6963      	ldr	r3, [r4, #20]
 8013ca0:	2a4a      	cmp	r2, #74	; 0x4a
 8013ca2:	d128      	bne.n	8013cf6 <__tzcalc_limits+0xce>
 8013ca4:	9900      	ldr	r1, [sp, #0]
 8013ca6:	18ea      	adds	r2, r5, r3
 8013ca8:	b901      	cbnz	r1, 8013cac <__tzcalc_limits+0x84>
 8013caa:	b906      	cbnz	r6, 8013cae <__tzcalc_limits+0x86>
 8013cac:	bb0f      	cbnz	r7, 8013cf2 <__tzcalc_limits+0xca>
 8013cae:	2b3b      	cmp	r3, #59	; 0x3b
 8013cb0:	bfd4      	ite	le
 8013cb2:	2300      	movle	r3, #0
 8013cb4:	2301      	movgt	r3, #1
 8013cb6:	4413      	add	r3, r2
 8013cb8:	1e5a      	subs	r2, r3, #1
 8013cba:	69a3      	ldr	r3, [r4, #24]
 8013cbc:	492c      	ldr	r1, [pc, #176]	; (8013d70 <__tzcalc_limits+0x148>)
 8013cbe:	fb01 3202 	mla	r2, r1, r2, r3
 8013cc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013cc4:	4413      	add	r3, r2
 8013cc6:	461a      	mov	r2, r3
 8013cc8:	17db      	asrs	r3, r3, #31
 8013cca:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013cce:	3428      	adds	r4, #40	; 0x28
 8013cd0:	45a3      	cmp	fp, r4
 8013cd2:	d1e3      	bne.n	8013c9c <__tzcalc_limits+0x74>
 8013cd4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8013cd8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8013cdc:	4294      	cmp	r4, r2
 8013cde:	eb75 0303 	sbcs.w	r3, r5, r3
 8013ce2:	bfb4      	ite	lt
 8013ce4:	2301      	movlt	r3, #1
 8013ce6:	2300      	movge	r3, #0
 8013ce8:	6003      	str	r3, [r0, #0]
 8013cea:	2001      	movs	r0, #1
 8013cec:	b003      	add	sp, #12
 8013cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	e7df      	b.n	8013cb6 <__tzcalc_limits+0x8e>
 8013cf6:	2a44      	cmp	r2, #68	; 0x44
 8013cf8:	d101      	bne.n	8013cfe <__tzcalc_limits+0xd6>
 8013cfa:	18ea      	adds	r2, r5, r3
 8013cfc:	e7dd      	b.n	8013cba <__tzcalc_limits+0x92>
 8013cfe:	9a00      	ldr	r2, [sp, #0]
 8013d00:	bb72      	cbnz	r2, 8013d60 <__tzcalc_limits+0x138>
 8013d02:	2e00      	cmp	r6, #0
 8013d04:	bf0c      	ite	eq
 8013d06:	46e0      	moveq	r8, ip
 8013d08:	f04f 0801 	movne.w	r8, #1
 8013d0c:	4919      	ldr	r1, [pc, #100]	; (8013d74 <__tzcalc_limits+0x14c>)
 8013d0e:	68e2      	ldr	r2, [r4, #12]
 8013d10:	9201      	str	r2, [sp, #4]
 8013d12:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8013d16:	fb0a 1808 	mla	r8, sl, r8, r1
 8013d1a:	462a      	mov	r2, r5
 8013d1c:	f04f 0900 	mov.w	r9, #0
 8013d20:	f1a8 0804 	sub.w	r8, r8, #4
 8013d24:	9901      	ldr	r1, [sp, #4]
 8013d26:	f109 0901 	add.w	r9, r9, #1
 8013d2a:	4549      	cmp	r1, r9
 8013d2c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8013d30:	dc18      	bgt.n	8013d64 <__tzcalc_limits+0x13c>
 8013d32:	f102 0804 	add.w	r8, r2, #4
 8013d36:	fb98 f9fe 	sdiv	r9, r8, lr
 8013d3a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8013d3e:	eba8 0909 	sub.w	r9, r8, r9
 8013d42:	ebb3 0909 	subs.w	r9, r3, r9
 8013d46:	6923      	ldr	r3, [r4, #16]
 8013d48:	f103 33ff 	add.w	r3, r3, #4294967295
 8013d4c:	bf48      	it	mi
 8013d4e:	f109 0907 	addmi.w	r9, r9, #7
 8013d52:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8013d56:	444b      	add	r3, r9
 8013d58:	4553      	cmp	r3, sl
 8013d5a:	da05      	bge.n	8013d68 <__tzcalc_limits+0x140>
 8013d5c:	441a      	add	r2, r3
 8013d5e:	e7ac      	b.n	8013cba <__tzcalc_limits+0x92>
 8013d60:	46e0      	mov	r8, ip
 8013d62:	e7d3      	b.n	8013d0c <__tzcalc_limits+0xe4>
 8013d64:	4452      	add	r2, sl
 8013d66:	e7dd      	b.n	8013d24 <__tzcalc_limits+0xfc>
 8013d68:	3b07      	subs	r3, #7
 8013d6a:	e7f5      	b.n	8013d58 <__tzcalc_limits+0x130>
 8013d6c:	2000      	movs	r0, #0
 8013d6e:	e7bd      	b.n	8013cec <__tzcalc_limits+0xc4>
 8013d70:	00015180 	.word	0x00015180
 8013d74:	08018dd4 	.word	0x08018dd4

08013d78 <__tz_lock>:
 8013d78:	4801      	ldr	r0, [pc, #4]	; (8013d80 <__tz_lock+0x8>)
 8013d7a:	f7fe bed7 	b.w	8012b2c <__retarget_lock_acquire>
 8013d7e:	bf00      	nop
 8013d80:	20000c5f 	.word	0x20000c5f

08013d84 <__tz_unlock>:
 8013d84:	4801      	ldr	r0, [pc, #4]	; (8013d8c <__tz_unlock+0x8>)
 8013d86:	f7fe bed3 	b.w	8012b30 <__retarget_lock_release>
 8013d8a:	bf00      	nop
 8013d8c:	20000c5f 	.word	0x20000c5f

08013d90 <_tzset_unlocked>:
 8013d90:	4b01      	ldr	r3, [pc, #4]	; (8013d98 <_tzset_unlocked+0x8>)
 8013d92:	6818      	ldr	r0, [r3, #0]
 8013d94:	f000 b802 	b.w	8013d9c <_tzset_unlocked_r>
 8013d98:	20000100 	.word	0x20000100

08013d9c <_tzset_unlocked_r>:
 8013d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013da0:	b08d      	sub	sp, #52	; 0x34
 8013da2:	4607      	mov	r7, r0
 8013da4:	f000 fbc4 	bl	8014530 <__gettzinfo>
 8013da8:	49ae      	ldr	r1, [pc, #696]	; (8014064 <_tzset_unlocked_r+0x2c8>)
 8013daa:	4eaf      	ldr	r6, [pc, #700]	; (8014068 <_tzset_unlocked_r+0x2cc>)
 8013dac:	4605      	mov	r5, r0
 8013dae:	4638      	mov	r0, r7
 8013db0:	f000 fba4 	bl	80144fc <_getenv_r>
 8013db4:	4604      	mov	r4, r0
 8013db6:	b970      	cbnz	r0, 8013dd6 <_tzset_unlocked_r+0x3a>
 8013db8:	4bac      	ldr	r3, [pc, #688]	; (801406c <_tzset_unlocked_r+0x2d0>)
 8013dba:	4aad      	ldr	r2, [pc, #692]	; (8014070 <_tzset_unlocked_r+0x2d4>)
 8013dbc:	6018      	str	r0, [r3, #0]
 8013dbe:	4bad      	ldr	r3, [pc, #692]	; (8014074 <_tzset_unlocked_r+0x2d8>)
 8013dc0:	6018      	str	r0, [r3, #0]
 8013dc2:	4bad      	ldr	r3, [pc, #692]	; (8014078 <_tzset_unlocked_r+0x2dc>)
 8013dc4:	6830      	ldr	r0, [r6, #0]
 8013dc6:	e9c3 2200 	strd	r2, r2, [r3]
 8013dca:	f7fe ff1f 	bl	8012c0c <free>
 8013dce:	6034      	str	r4, [r6, #0]
 8013dd0:	b00d      	add	sp, #52	; 0x34
 8013dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dd6:	6831      	ldr	r1, [r6, #0]
 8013dd8:	2900      	cmp	r1, #0
 8013dda:	d15f      	bne.n	8013e9c <_tzset_unlocked_r+0x100>
 8013ddc:	6830      	ldr	r0, [r6, #0]
 8013dde:	f7fe ff15 	bl	8012c0c <free>
 8013de2:	4620      	mov	r0, r4
 8013de4:	f7ec fa2a 	bl	800023c <strlen>
 8013de8:	1c41      	adds	r1, r0, #1
 8013dea:	4638      	mov	r0, r7
 8013dec:	f7fe ff8c 	bl	8012d08 <_malloc_r>
 8013df0:	6030      	str	r0, [r6, #0]
 8013df2:	2800      	cmp	r0, #0
 8013df4:	d157      	bne.n	8013ea6 <_tzset_unlocked_r+0x10a>
 8013df6:	7823      	ldrb	r3, [r4, #0]
 8013df8:	4aa0      	ldr	r2, [pc, #640]	; (801407c <_tzset_unlocked_r+0x2e0>)
 8013dfa:	49a1      	ldr	r1, [pc, #644]	; (8014080 <_tzset_unlocked_r+0x2e4>)
 8013dfc:	2b3a      	cmp	r3, #58	; 0x3a
 8013dfe:	bf08      	it	eq
 8013e00:	3401      	addeq	r4, #1
 8013e02:	ae0a      	add	r6, sp, #40	; 0x28
 8013e04:	4633      	mov	r3, r6
 8013e06:	4620      	mov	r0, r4
 8013e08:	f001 f988 	bl	801511c <siscanf>
 8013e0c:	2800      	cmp	r0, #0
 8013e0e:	dddf      	ble.n	8013dd0 <_tzset_unlocked_r+0x34>
 8013e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e12:	18e7      	adds	r7, r4, r3
 8013e14:	5ce3      	ldrb	r3, [r4, r3]
 8013e16:	2b2d      	cmp	r3, #45	; 0x2d
 8013e18:	d149      	bne.n	8013eae <_tzset_unlocked_r+0x112>
 8013e1a:	3701      	adds	r7, #1
 8013e1c:	f04f 34ff 	mov.w	r4, #4294967295
 8013e20:	f10d 0a20 	add.w	sl, sp, #32
 8013e24:	f10d 0b1e 	add.w	fp, sp, #30
 8013e28:	f04f 0800 	mov.w	r8, #0
 8013e2c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8013e30:	4994      	ldr	r1, [pc, #592]	; (8014084 <_tzset_unlocked_r+0x2e8>)
 8013e32:	9603      	str	r6, [sp, #12]
 8013e34:	f8cd b000 	str.w	fp, [sp]
 8013e38:	4633      	mov	r3, r6
 8013e3a:	aa07      	add	r2, sp, #28
 8013e3c:	4638      	mov	r0, r7
 8013e3e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8013e42:	f8ad 8020 	strh.w	r8, [sp, #32]
 8013e46:	f001 f969 	bl	801511c <siscanf>
 8013e4a:	4540      	cmp	r0, r8
 8013e4c:	ddc0      	ble.n	8013dd0 <_tzset_unlocked_r+0x34>
 8013e4e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013e52:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8013e56:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8014090 <_tzset_unlocked_r+0x2f4>
 8013e5a:	213c      	movs	r1, #60	; 0x3c
 8013e5c:	fb01 2203 	mla	r2, r1, r3, r2
 8013e60:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013e64:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013e68:	fb01 2303 	mla	r3, r1, r3, r2
 8013e6c:	435c      	muls	r4, r3
 8013e6e:	62ac      	str	r4, [r5, #40]	; 0x28
 8013e70:	4c81      	ldr	r4, [pc, #516]	; (8014078 <_tzset_unlocked_r+0x2dc>)
 8013e72:	4b82      	ldr	r3, [pc, #520]	; (801407c <_tzset_unlocked_r+0x2e0>)
 8013e74:	6023      	str	r3, [r4, #0]
 8013e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e78:	4981      	ldr	r1, [pc, #516]	; (8014080 <_tzset_unlocked_r+0x2e4>)
 8013e7a:	441f      	add	r7, r3
 8013e7c:	464a      	mov	r2, r9
 8013e7e:	4633      	mov	r3, r6
 8013e80:	4638      	mov	r0, r7
 8013e82:	f001 f94b 	bl	801511c <siscanf>
 8013e86:	4540      	cmp	r0, r8
 8013e88:	dc16      	bgt.n	8013eb8 <_tzset_unlocked_r+0x11c>
 8013e8a:	6823      	ldr	r3, [r4, #0]
 8013e8c:	6063      	str	r3, [r4, #4]
 8013e8e:	4b77      	ldr	r3, [pc, #476]	; (801406c <_tzset_unlocked_r+0x2d0>)
 8013e90:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8013e92:	601a      	str	r2, [r3, #0]
 8013e94:	4b77      	ldr	r3, [pc, #476]	; (8014074 <_tzset_unlocked_r+0x2d8>)
 8013e96:	f8c3 8000 	str.w	r8, [r3]
 8013e9a:	e799      	b.n	8013dd0 <_tzset_unlocked_r+0x34>
 8013e9c:	f7ec f9d6 	bl	800024c <strcmp>
 8013ea0:	2800      	cmp	r0, #0
 8013ea2:	d19b      	bne.n	8013ddc <_tzset_unlocked_r+0x40>
 8013ea4:	e794      	b.n	8013dd0 <_tzset_unlocked_r+0x34>
 8013ea6:	4621      	mov	r1, r4
 8013ea8:	f001 f964 	bl	8015174 <strcpy>
 8013eac:	e7a3      	b.n	8013df6 <_tzset_unlocked_r+0x5a>
 8013eae:	2b2b      	cmp	r3, #43	; 0x2b
 8013eb0:	bf08      	it	eq
 8013eb2:	3701      	addeq	r7, #1
 8013eb4:	2401      	movs	r4, #1
 8013eb6:	e7b3      	b.n	8013e20 <_tzset_unlocked_r+0x84>
 8013eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013eba:	f8c4 9004 	str.w	r9, [r4, #4]
 8013ebe:	18fc      	adds	r4, r7, r3
 8013ec0:	5cfb      	ldrb	r3, [r7, r3]
 8013ec2:	2b2d      	cmp	r3, #45	; 0x2d
 8013ec4:	f040 808b 	bne.w	8013fde <_tzset_unlocked_r+0x242>
 8013ec8:	3401      	adds	r4, #1
 8013eca:	f04f 37ff 	mov.w	r7, #4294967295
 8013ece:	2300      	movs	r3, #0
 8013ed0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013ed4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013ed8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013edc:	930a      	str	r3, [sp, #40]	; 0x28
 8013ede:	e9cd a602 	strd	sl, r6, [sp, #8]
 8013ee2:	e9cd b600 	strd	fp, r6, [sp]
 8013ee6:	4967      	ldr	r1, [pc, #412]	; (8014084 <_tzset_unlocked_r+0x2e8>)
 8013ee8:	4633      	mov	r3, r6
 8013eea:	aa07      	add	r2, sp, #28
 8013eec:	4620      	mov	r0, r4
 8013eee:	f001 f915 	bl	801511c <siscanf>
 8013ef2:	2800      	cmp	r0, #0
 8013ef4:	dc78      	bgt.n	8013fe8 <_tzset_unlocked_r+0x24c>
 8013ef6:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8013ef8:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8013efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013efe:	652f      	str	r7, [r5, #80]	; 0x50
 8013f00:	441c      	add	r4, r3
 8013f02:	462f      	mov	r7, r5
 8013f04:	f04f 0900 	mov.w	r9, #0
 8013f08:	7823      	ldrb	r3, [r4, #0]
 8013f0a:	2b2c      	cmp	r3, #44	; 0x2c
 8013f0c:	bf08      	it	eq
 8013f0e:	3401      	addeq	r4, #1
 8013f10:	f894 8000 	ldrb.w	r8, [r4]
 8013f14:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8013f18:	d178      	bne.n	801400c <_tzset_unlocked_r+0x270>
 8013f1a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8013f1e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8013f22:	ab09      	add	r3, sp, #36	; 0x24
 8013f24:	9300      	str	r3, [sp, #0]
 8013f26:	4958      	ldr	r1, [pc, #352]	; (8014088 <_tzset_unlocked_r+0x2ec>)
 8013f28:	9603      	str	r6, [sp, #12]
 8013f2a:	4633      	mov	r3, r6
 8013f2c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8013f30:	4620      	mov	r0, r4
 8013f32:	f001 f8f3 	bl	801511c <siscanf>
 8013f36:	2803      	cmp	r0, #3
 8013f38:	f47f af4a 	bne.w	8013dd0 <_tzset_unlocked_r+0x34>
 8013f3c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8013f40:	1e4b      	subs	r3, r1, #1
 8013f42:	2b0b      	cmp	r3, #11
 8013f44:	f63f af44 	bhi.w	8013dd0 <_tzset_unlocked_r+0x34>
 8013f48:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8013f4c:	1e53      	subs	r3, r2, #1
 8013f4e:	2b04      	cmp	r3, #4
 8013f50:	f63f af3e 	bhi.w	8013dd0 <_tzset_unlocked_r+0x34>
 8013f54:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8013f58:	2b06      	cmp	r3, #6
 8013f5a:	f63f af39 	bhi.w	8013dd0 <_tzset_unlocked_r+0x34>
 8013f5e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8013f62:	f887 8008 	strb.w	r8, [r7, #8]
 8013f66:	617b      	str	r3, [r7, #20]
 8013f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f6a:	eb04 0803 	add.w	r8, r4, r3
 8013f6e:	2302      	movs	r3, #2
 8013f70:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013f74:	2300      	movs	r3, #0
 8013f76:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013f7a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8013f80:	f898 3000 	ldrb.w	r3, [r8]
 8013f84:	2b2f      	cmp	r3, #47	; 0x2f
 8013f86:	d109      	bne.n	8013f9c <_tzset_unlocked_r+0x200>
 8013f88:	e9cd a602 	strd	sl, r6, [sp, #8]
 8013f8c:	e9cd b600 	strd	fp, r6, [sp]
 8013f90:	493e      	ldr	r1, [pc, #248]	; (801408c <_tzset_unlocked_r+0x2f0>)
 8013f92:	4633      	mov	r3, r6
 8013f94:	aa07      	add	r2, sp, #28
 8013f96:	4640      	mov	r0, r8
 8013f98:	f001 f8c0 	bl	801511c <siscanf>
 8013f9c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013fa0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8013fa4:	213c      	movs	r1, #60	; 0x3c
 8013fa6:	fb01 2203 	mla	r2, r1, r3, r2
 8013faa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013fae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013fb2:	fb01 2303 	mla	r3, r1, r3, r2
 8013fb6:	61bb      	str	r3, [r7, #24]
 8013fb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013fba:	3728      	adds	r7, #40	; 0x28
 8013fbc:	4444      	add	r4, r8
 8013fbe:	f1b9 0f00 	cmp.w	r9, #0
 8013fc2:	d020      	beq.n	8014006 <_tzset_unlocked_r+0x26a>
 8013fc4:	6868      	ldr	r0, [r5, #4]
 8013fc6:	f7ff fe2f 	bl	8013c28 <__tzcalc_limits>
 8013fca:	4b28      	ldr	r3, [pc, #160]	; (801406c <_tzset_unlocked_r+0x2d0>)
 8013fcc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8013fce:	601a      	str	r2, [r3, #0]
 8013fd0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8013fd2:	1a9b      	subs	r3, r3, r2
 8013fd4:	4a27      	ldr	r2, [pc, #156]	; (8014074 <_tzset_unlocked_r+0x2d8>)
 8013fd6:	bf18      	it	ne
 8013fd8:	2301      	movne	r3, #1
 8013fda:	6013      	str	r3, [r2, #0]
 8013fdc:	e6f8      	b.n	8013dd0 <_tzset_unlocked_r+0x34>
 8013fde:	2b2b      	cmp	r3, #43	; 0x2b
 8013fe0:	bf08      	it	eq
 8013fe2:	3401      	addeq	r4, #1
 8013fe4:	2701      	movs	r7, #1
 8013fe6:	e772      	b.n	8013ece <_tzset_unlocked_r+0x132>
 8013fe8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013fec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8013ff0:	213c      	movs	r1, #60	; 0x3c
 8013ff2:	fb01 2203 	mla	r2, r1, r3, r2
 8013ff6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013ffa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013ffe:	fb01 2303 	mla	r3, r1, r3, r2
 8014002:	435f      	muls	r7, r3
 8014004:	e77a      	b.n	8013efc <_tzset_unlocked_r+0x160>
 8014006:	f04f 0901 	mov.w	r9, #1
 801400a:	e77d      	b.n	8013f08 <_tzset_unlocked_r+0x16c>
 801400c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8014010:	bf06      	itte	eq
 8014012:	3401      	addeq	r4, #1
 8014014:	4643      	moveq	r3, r8
 8014016:	2344      	movne	r3, #68	; 0x44
 8014018:	220a      	movs	r2, #10
 801401a:	a90b      	add	r1, sp, #44	; 0x2c
 801401c:	4620      	mov	r0, r4
 801401e:	9305      	str	r3, [sp, #20]
 8014020:	f7ff fdde 	bl	8013be0 <strtoul>
 8014024:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8014028:	9b05      	ldr	r3, [sp, #20]
 801402a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801402e:	45a0      	cmp	r8, r4
 8014030:	d114      	bne.n	801405c <_tzset_unlocked_r+0x2c0>
 8014032:	234d      	movs	r3, #77	; 0x4d
 8014034:	f1b9 0f00 	cmp.w	r9, #0
 8014038:	d107      	bne.n	801404a <_tzset_unlocked_r+0x2ae>
 801403a:	722b      	strb	r3, [r5, #8]
 801403c:	2103      	movs	r1, #3
 801403e:	2302      	movs	r3, #2
 8014040:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8014044:	f8c5 9014 	str.w	r9, [r5, #20]
 8014048:	e791      	b.n	8013f6e <_tzset_unlocked_r+0x1d2>
 801404a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801404e:	220b      	movs	r2, #11
 8014050:	2301      	movs	r3, #1
 8014052:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8014056:	2300      	movs	r3, #0
 8014058:	63eb      	str	r3, [r5, #60]	; 0x3c
 801405a:	e788      	b.n	8013f6e <_tzset_unlocked_r+0x1d2>
 801405c:	b280      	uxth	r0, r0
 801405e:	723b      	strb	r3, [r7, #8]
 8014060:	6178      	str	r0, [r7, #20]
 8014062:	e784      	b.n	8013f6e <_tzset_unlocked_r+0x1d2>
 8014064:	08019114 	.word	0x08019114
 8014068:	20000bb8 	.word	0x20000bb8
 801406c:	20000bc0 	.word	0x20000bc0
 8014070:	08019117 	.word	0x08019117
 8014074:	20000bbc 	.word	0x20000bbc
 8014078:	20000164 	.word	0x20000164
 801407c:	20000bab 	.word	0x20000bab
 8014080:	0801911b 	.word	0x0801911b
 8014084:	0801913e 	.word	0x0801913e
 8014088:	0801912a 	.word	0x0801912a
 801408c:	0801913d 	.word	0x0801913d
 8014090:	20000ba0 	.word	0x20000ba0

08014094 <_vsniprintf_r>:
 8014094:	b530      	push	{r4, r5, lr}
 8014096:	1e14      	subs	r4, r2, #0
 8014098:	4605      	mov	r5, r0
 801409a:	b09b      	sub	sp, #108	; 0x6c
 801409c:	4618      	mov	r0, r3
 801409e:	da05      	bge.n	80140ac <_vsniprintf_r+0x18>
 80140a0:	238b      	movs	r3, #139	; 0x8b
 80140a2:	602b      	str	r3, [r5, #0]
 80140a4:	f04f 30ff 	mov.w	r0, #4294967295
 80140a8:	b01b      	add	sp, #108	; 0x6c
 80140aa:	bd30      	pop	{r4, r5, pc}
 80140ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80140b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80140b4:	bf14      	ite	ne
 80140b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80140ba:	4623      	moveq	r3, r4
 80140bc:	9302      	str	r3, [sp, #8]
 80140be:	9305      	str	r3, [sp, #20]
 80140c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140c4:	9100      	str	r1, [sp, #0]
 80140c6:	9104      	str	r1, [sp, #16]
 80140c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80140cc:	4602      	mov	r2, r0
 80140ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80140d0:	4669      	mov	r1, sp
 80140d2:	4628      	mov	r0, r5
 80140d4:	f000 fba6 	bl	8014824 <_svfiprintf_r>
 80140d8:	1c43      	adds	r3, r0, #1
 80140da:	bfbc      	itt	lt
 80140dc:	238b      	movlt	r3, #139	; 0x8b
 80140de:	602b      	strlt	r3, [r5, #0]
 80140e0:	2c00      	cmp	r4, #0
 80140e2:	d0e1      	beq.n	80140a8 <_vsniprintf_r+0x14>
 80140e4:	9b00      	ldr	r3, [sp, #0]
 80140e6:	2200      	movs	r2, #0
 80140e8:	701a      	strb	r2, [r3, #0]
 80140ea:	e7dd      	b.n	80140a8 <_vsniprintf_r+0x14>

080140ec <vsniprintf>:
 80140ec:	b507      	push	{r0, r1, r2, lr}
 80140ee:	9300      	str	r3, [sp, #0]
 80140f0:	4613      	mov	r3, r2
 80140f2:	460a      	mov	r2, r1
 80140f4:	4601      	mov	r1, r0
 80140f6:	4803      	ldr	r0, [pc, #12]	; (8014104 <vsniprintf+0x18>)
 80140f8:	6800      	ldr	r0, [r0, #0]
 80140fa:	f7ff ffcb 	bl	8014094 <_vsniprintf_r>
 80140fe:	b003      	add	sp, #12
 8014100:	f85d fb04 	ldr.w	pc, [sp], #4
 8014104:	20000100 	.word	0x20000100

08014108 <__swbuf_r>:
 8014108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801410a:	460e      	mov	r6, r1
 801410c:	4614      	mov	r4, r2
 801410e:	4605      	mov	r5, r0
 8014110:	b118      	cbz	r0, 801411a <__swbuf_r+0x12>
 8014112:	6983      	ldr	r3, [r0, #24]
 8014114:	b90b      	cbnz	r3, 801411a <__swbuf_r+0x12>
 8014116:	f7fe f957 	bl	80123c8 <__sinit>
 801411a:	4b21      	ldr	r3, [pc, #132]	; (80141a0 <__swbuf_r+0x98>)
 801411c:	429c      	cmp	r4, r3
 801411e:	d12b      	bne.n	8014178 <__swbuf_r+0x70>
 8014120:	686c      	ldr	r4, [r5, #4]
 8014122:	69a3      	ldr	r3, [r4, #24]
 8014124:	60a3      	str	r3, [r4, #8]
 8014126:	89a3      	ldrh	r3, [r4, #12]
 8014128:	071a      	lsls	r2, r3, #28
 801412a:	d52f      	bpl.n	801418c <__swbuf_r+0x84>
 801412c:	6923      	ldr	r3, [r4, #16]
 801412e:	b36b      	cbz	r3, 801418c <__swbuf_r+0x84>
 8014130:	6923      	ldr	r3, [r4, #16]
 8014132:	6820      	ldr	r0, [r4, #0]
 8014134:	1ac0      	subs	r0, r0, r3
 8014136:	6963      	ldr	r3, [r4, #20]
 8014138:	b2f6      	uxtb	r6, r6
 801413a:	4283      	cmp	r3, r0
 801413c:	4637      	mov	r7, r6
 801413e:	dc04      	bgt.n	801414a <__swbuf_r+0x42>
 8014140:	4621      	mov	r1, r4
 8014142:	4628      	mov	r0, r5
 8014144:	f7fe f89a 	bl	801227c <_fflush_r>
 8014148:	bb30      	cbnz	r0, 8014198 <__swbuf_r+0x90>
 801414a:	68a3      	ldr	r3, [r4, #8]
 801414c:	3b01      	subs	r3, #1
 801414e:	60a3      	str	r3, [r4, #8]
 8014150:	6823      	ldr	r3, [r4, #0]
 8014152:	1c5a      	adds	r2, r3, #1
 8014154:	6022      	str	r2, [r4, #0]
 8014156:	701e      	strb	r6, [r3, #0]
 8014158:	6963      	ldr	r3, [r4, #20]
 801415a:	3001      	adds	r0, #1
 801415c:	4283      	cmp	r3, r0
 801415e:	d004      	beq.n	801416a <__swbuf_r+0x62>
 8014160:	89a3      	ldrh	r3, [r4, #12]
 8014162:	07db      	lsls	r3, r3, #31
 8014164:	d506      	bpl.n	8014174 <__swbuf_r+0x6c>
 8014166:	2e0a      	cmp	r6, #10
 8014168:	d104      	bne.n	8014174 <__swbuf_r+0x6c>
 801416a:	4621      	mov	r1, r4
 801416c:	4628      	mov	r0, r5
 801416e:	f7fe f885 	bl	801227c <_fflush_r>
 8014172:	b988      	cbnz	r0, 8014198 <__swbuf_r+0x90>
 8014174:	4638      	mov	r0, r7
 8014176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014178:	4b0a      	ldr	r3, [pc, #40]	; (80141a4 <__swbuf_r+0x9c>)
 801417a:	429c      	cmp	r4, r3
 801417c:	d101      	bne.n	8014182 <__swbuf_r+0x7a>
 801417e:	68ac      	ldr	r4, [r5, #8]
 8014180:	e7cf      	b.n	8014122 <__swbuf_r+0x1a>
 8014182:	4b09      	ldr	r3, [pc, #36]	; (80141a8 <__swbuf_r+0xa0>)
 8014184:	429c      	cmp	r4, r3
 8014186:	bf08      	it	eq
 8014188:	68ec      	ldreq	r4, [r5, #12]
 801418a:	e7ca      	b.n	8014122 <__swbuf_r+0x1a>
 801418c:	4621      	mov	r1, r4
 801418e:	4628      	mov	r0, r5
 8014190:	f000 f81e 	bl	80141d0 <__swsetup_r>
 8014194:	2800      	cmp	r0, #0
 8014196:	d0cb      	beq.n	8014130 <__swbuf_r+0x28>
 8014198:	f04f 37ff 	mov.w	r7, #4294967295
 801419c:	e7ea      	b.n	8014174 <__swbuf_r+0x6c>
 801419e:	bf00      	nop
 80141a0:	08018d18 	.word	0x08018d18
 80141a4:	08018d38 	.word	0x08018d38
 80141a8:	08018cf8 	.word	0x08018cf8

080141ac <_write_r>:
 80141ac:	b538      	push	{r3, r4, r5, lr}
 80141ae:	4d07      	ldr	r5, [pc, #28]	; (80141cc <_write_r+0x20>)
 80141b0:	4604      	mov	r4, r0
 80141b2:	4608      	mov	r0, r1
 80141b4:	4611      	mov	r1, r2
 80141b6:	2200      	movs	r2, #0
 80141b8:	602a      	str	r2, [r5, #0]
 80141ba:	461a      	mov	r2, r3
 80141bc:	f7ec fe08 	bl	8000dd0 <_write>
 80141c0:	1c43      	adds	r3, r0, #1
 80141c2:	d102      	bne.n	80141ca <_write_r+0x1e>
 80141c4:	682b      	ldr	r3, [r5, #0]
 80141c6:	b103      	cbz	r3, 80141ca <_write_r+0x1e>
 80141c8:	6023      	str	r3, [r4, #0]
 80141ca:	bd38      	pop	{r3, r4, r5, pc}
 80141cc:	20000c64 	.word	0x20000c64

080141d0 <__swsetup_r>:
 80141d0:	4b32      	ldr	r3, [pc, #200]	; (801429c <__swsetup_r+0xcc>)
 80141d2:	b570      	push	{r4, r5, r6, lr}
 80141d4:	681d      	ldr	r5, [r3, #0]
 80141d6:	4606      	mov	r6, r0
 80141d8:	460c      	mov	r4, r1
 80141da:	b125      	cbz	r5, 80141e6 <__swsetup_r+0x16>
 80141dc:	69ab      	ldr	r3, [r5, #24]
 80141de:	b913      	cbnz	r3, 80141e6 <__swsetup_r+0x16>
 80141e0:	4628      	mov	r0, r5
 80141e2:	f7fe f8f1 	bl	80123c8 <__sinit>
 80141e6:	4b2e      	ldr	r3, [pc, #184]	; (80142a0 <__swsetup_r+0xd0>)
 80141e8:	429c      	cmp	r4, r3
 80141ea:	d10f      	bne.n	801420c <__swsetup_r+0x3c>
 80141ec:	686c      	ldr	r4, [r5, #4]
 80141ee:	89a3      	ldrh	r3, [r4, #12]
 80141f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80141f4:	0719      	lsls	r1, r3, #28
 80141f6:	d42c      	bmi.n	8014252 <__swsetup_r+0x82>
 80141f8:	06dd      	lsls	r5, r3, #27
 80141fa:	d411      	bmi.n	8014220 <__swsetup_r+0x50>
 80141fc:	2309      	movs	r3, #9
 80141fe:	6033      	str	r3, [r6, #0]
 8014200:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014204:	81a3      	strh	r3, [r4, #12]
 8014206:	f04f 30ff 	mov.w	r0, #4294967295
 801420a:	e03e      	b.n	801428a <__swsetup_r+0xba>
 801420c:	4b25      	ldr	r3, [pc, #148]	; (80142a4 <__swsetup_r+0xd4>)
 801420e:	429c      	cmp	r4, r3
 8014210:	d101      	bne.n	8014216 <__swsetup_r+0x46>
 8014212:	68ac      	ldr	r4, [r5, #8]
 8014214:	e7eb      	b.n	80141ee <__swsetup_r+0x1e>
 8014216:	4b24      	ldr	r3, [pc, #144]	; (80142a8 <__swsetup_r+0xd8>)
 8014218:	429c      	cmp	r4, r3
 801421a:	bf08      	it	eq
 801421c:	68ec      	ldreq	r4, [r5, #12]
 801421e:	e7e6      	b.n	80141ee <__swsetup_r+0x1e>
 8014220:	0758      	lsls	r0, r3, #29
 8014222:	d512      	bpl.n	801424a <__swsetup_r+0x7a>
 8014224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014226:	b141      	cbz	r1, 801423a <__swsetup_r+0x6a>
 8014228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801422c:	4299      	cmp	r1, r3
 801422e:	d002      	beq.n	8014236 <__swsetup_r+0x66>
 8014230:	4630      	mov	r0, r6
 8014232:	f7fe fd19 	bl	8012c68 <_free_r>
 8014236:	2300      	movs	r3, #0
 8014238:	6363      	str	r3, [r4, #52]	; 0x34
 801423a:	89a3      	ldrh	r3, [r4, #12]
 801423c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014240:	81a3      	strh	r3, [r4, #12]
 8014242:	2300      	movs	r3, #0
 8014244:	6063      	str	r3, [r4, #4]
 8014246:	6923      	ldr	r3, [r4, #16]
 8014248:	6023      	str	r3, [r4, #0]
 801424a:	89a3      	ldrh	r3, [r4, #12]
 801424c:	f043 0308 	orr.w	r3, r3, #8
 8014250:	81a3      	strh	r3, [r4, #12]
 8014252:	6923      	ldr	r3, [r4, #16]
 8014254:	b94b      	cbnz	r3, 801426a <__swsetup_r+0x9a>
 8014256:	89a3      	ldrh	r3, [r4, #12]
 8014258:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801425c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014260:	d003      	beq.n	801426a <__swsetup_r+0x9a>
 8014262:	4621      	mov	r1, r4
 8014264:	4630      	mov	r0, r6
 8014266:	f7fe fc89 	bl	8012b7c <__smakebuf_r>
 801426a:	89a0      	ldrh	r0, [r4, #12]
 801426c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014270:	f010 0301 	ands.w	r3, r0, #1
 8014274:	d00a      	beq.n	801428c <__swsetup_r+0xbc>
 8014276:	2300      	movs	r3, #0
 8014278:	60a3      	str	r3, [r4, #8]
 801427a:	6963      	ldr	r3, [r4, #20]
 801427c:	425b      	negs	r3, r3
 801427e:	61a3      	str	r3, [r4, #24]
 8014280:	6923      	ldr	r3, [r4, #16]
 8014282:	b943      	cbnz	r3, 8014296 <__swsetup_r+0xc6>
 8014284:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014288:	d1ba      	bne.n	8014200 <__swsetup_r+0x30>
 801428a:	bd70      	pop	{r4, r5, r6, pc}
 801428c:	0781      	lsls	r1, r0, #30
 801428e:	bf58      	it	pl
 8014290:	6963      	ldrpl	r3, [r4, #20]
 8014292:	60a3      	str	r3, [r4, #8]
 8014294:	e7f4      	b.n	8014280 <__swsetup_r+0xb0>
 8014296:	2000      	movs	r0, #0
 8014298:	e7f7      	b.n	801428a <__swsetup_r+0xba>
 801429a:	bf00      	nop
 801429c:	20000100 	.word	0x20000100
 80142a0:	08018d18 	.word	0x08018d18
 80142a4:	08018d38 	.word	0x08018d38
 80142a8:	08018cf8 	.word	0x08018cf8

080142ac <__register_exitproc>:
 80142ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142b0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801436c <__register_exitproc+0xc0>
 80142b4:	4606      	mov	r6, r0
 80142b6:	f8d8 0000 	ldr.w	r0, [r8]
 80142ba:	461f      	mov	r7, r3
 80142bc:	460d      	mov	r5, r1
 80142be:	4691      	mov	r9, r2
 80142c0:	f7fe fc35 	bl	8012b2e <__retarget_lock_acquire_recursive>
 80142c4:	4b25      	ldr	r3, [pc, #148]	; (801435c <__register_exitproc+0xb0>)
 80142c6:	681c      	ldr	r4, [r3, #0]
 80142c8:	b934      	cbnz	r4, 80142d8 <__register_exitproc+0x2c>
 80142ca:	4c25      	ldr	r4, [pc, #148]	; (8014360 <__register_exitproc+0xb4>)
 80142cc:	601c      	str	r4, [r3, #0]
 80142ce:	4b25      	ldr	r3, [pc, #148]	; (8014364 <__register_exitproc+0xb8>)
 80142d0:	b113      	cbz	r3, 80142d8 <__register_exitproc+0x2c>
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80142d8:	6863      	ldr	r3, [r4, #4]
 80142da:	2b1f      	cmp	r3, #31
 80142dc:	dd07      	ble.n	80142ee <__register_exitproc+0x42>
 80142de:	f8d8 0000 	ldr.w	r0, [r8]
 80142e2:	f7fe fc26 	bl	8012b32 <__retarget_lock_release_recursive>
 80142e6:	f04f 30ff 	mov.w	r0, #4294967295
 80142ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142ee:	b34e      	cbz	r6, 8014344 <__register_exitproc+0x98>
 80142f0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80142f4:	b988      	cbnz	r0, 801431a <__register_exitproc+0x6e>
 80142f6:	4b1c      	ldr	r3, [pc, #112]	; (8014368 <__register_exitproc+0xbc>)
 80142f8:	b923      	cbnz	r3, 8014304 <__register_exitproc+0x58>
 80142fa:	f8d8 0000 	ldr.w	r0, [r8]
 80142fe:	f7fe fc17 	bl	8012b30 <__retarget_lock_release>
 8014302:	e7f0      	b.n	80142e6 <__register_exitproc+0x3a>
 8014304:	f44f 7084 	mov.w	r0, #264	; 0x108
 8014308:	f7fe fc78 	bl	8012bfc <malloc>
 801430c:	2800      	cmp	r0, #0
 801430e:	d0f4      	beq.n	80142fa <__register_exitproc+0x4e>
 8014310:	2300      	movs	r3, #0
 8014312:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8014316:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801431a:	6863      	ldr	r3, [r4, #4]
 801431c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8014320:	2201      	movs	r2, #1
 8014322:	409a      	lsls	r2, r3
 8014324:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8014328:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801432c:	4313      	orrs	r3, r2
 801432e:	2e02      	cmp	r6, #2
 8014330:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8014334:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8014338:	bf02      	ittt	eq
 801433a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801433e:	431a      	orreq	r2, r3
 8014340:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8014344:	6863      	ldr	r3, [r4, #4]
 8014346:	f8d8 0000 	ldr.w	r0, [r8]
 801434a:	1c5a      	adds	r2, r3, #1
 801434c:	3302      	adds	r3, #2
 801434e:	6062      	str	r2, [r4, #4]
 8014350:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8014354:	f7fe fbed 	bl	8012b32 <__retarget_lock_release_recursive>
 8014358:	2000      	movs	r0, #0
 801435a:	e7c6      	b.n	80142ea <__register_exitproc+0x3e>
 801435c:	20000c50 	.word	0x20000c50
 8014360:	20000bc4 	.word	0x20000bc4
 8014364:	00000000 	.word	0x00000000
 8014368:	08012bfd 	.word	0x08012bfd
 801436c:	2000016c 	.word	0x2000016c

08014370 <abs>:
 8014370:	2800      	cmp	r0, #0
 8014372:	bfb8      	it	lt
 8014374:	4240      	neglt	r0, r0
 8014376:	4770      	bx	lr

08014378 <__assert_func>:
 8014378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801437a:	4614      	mov	r4, r2
 801437c:	461a      	mov	r2, r3
 801437e:	4b09      	ldr	r3, [pc, #36]	; (80143a4 <__assert_func+0x2c>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	4605      	mov	r5, r0
 8014384:	68d8      	ldr	r0, [r3, #12]
 8014386:	b14c      	cbz	r4, 801439c <__assert_func+0x24>
 8014388:	4b07      	ldr	r3, [pc, #28]	; (80143a8 <__assert_func+0x30>)
 801438a:	9100      	str	r1, [sp, #0]
 801438c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014390:	4906      	ldr	r1, [pc, #24]	; (80143ac <__assert_func+0x34>)
 8014392:	462b      	mov	r3, r5
 8014394:	f000 f854 	bl	8014440 <fiprintf>
 8014398:	f7fd fe5a 	bl	8012050 <abort>
 801439c:	4b04      	ldr	r3, [pc, #16]	; (80143b0 <__assert_func+0x38>)
 801439e:	461c      	mov	r4, r3
 80143a0:	e7f3      	b.n	801438a <__assert_func+0x12>
 80143a2:	bf00      	nop
 80143a4:	20000100 	.word	0x20000100
 80143a8:	08019150 	.word	0x08019150
 80143ac:	0801915d 	.word	0x0801915d
 80143b0:	0801918b 	.word	0x0801918b

080143b4 <_close_r>:
 80143b4:	b538      	push	{r3, r4, r5, lr}
 80143b6:	4d06      	ldr	r5, [pc, #24]	; (80143d0 <_close_r+0x1c>)
 80143b8:	2300      	movs	r3, #0
 80143ba:	4604      	mov	r4, r0
 80143bc:	4608      	mov	r0, r1
 80143be:	602b      	str	r3, [r5, #0]
 80143c0:	f7ec fd22 	bl	8000e08 <_close>
 80143c4:	1c43      	adds	r3, r0, #1
 80143c6:	d102      	bne.n	80143ce <_close_r+0x1a>
 80143c8:	682b      	ldr	r3, [r5, #0]
 80143ca:	b103      	cbz	r3, 80143ce <_close_r+0x1a>
 80143cc:	6023      	str	r3, [r4, #0]
 80143ce:	bd38      	pop	{r3, r4, r5, pc}
 80143d0:	20000c64 	.word	0x20000c64

080143d4 <__sflags>:
 80143d4:	780b      	ldrb	r3, [r1, #0]
 80143d6:	2b72      	cmp	r3, #114	; 0x72
 80143d8:	b530      	push	{r4, r5, lr}
 80143da:	d022      	beq.n	8014422 <__sflags+0x4e>
 80143dc:	2b77      	cmp	r3, #119	; 0x77
 80143de:	d024      	beq.n	801442a <__sflags+0x56>
 80143e0:	2b61      	cmp	r3, #97	; 0x61
 80143e2:	d027      	beq.n	8014434 <__sflags+0x60>
 80143e4:	2316      	movs	r3, #22
 80143e6:	6003      	str	r3, [r0, #0]
 80143e8:	2000      	movs	r0, #0
 80143ea:	bd30      	pop	{r4, r5, pc}
 80143ec:	2d62      	cmp	r5, #98	; 0x62
 80143ee:	d012      	beq.n	8014416 <__sflags+0x42>
 80143f0:	2d78      	cmp	r5, #120	; 0x78
 80143f2:	d013      	beq.n	801441c <__sflags+0x48>
 80143f4:	2d2b      	cmp	r5, #43	; 0x2b
 80143f6:	d107      	bne.n	8014408 <__sflags+0x34>
 80143f8:	f020 001c 	bic.w	r0, r0, #28
 80143fc:	f023 0303 	bic.w	r3, r3, #3
 8014400:	f040 0010 	orr.w	r0, r0, #16
 8014404:	f043 0302 	orr.w	r3, r3, #2
 8014408:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801440c:	2d00      	cmp	r5, #0
 801440e:	d1ed      	bne.n	80143ec <__sflags+0x18>
 8014410:	4323      	orrs	r3, r4
 8014412:	6013      	str	r3, [r2, #0]
 8014414:	e7e9      	b.n	80143ea <__sflags+0x16>
 8014416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801441a:	e7f5      	b.n	8014408 <__sflags+0x34>
 801441c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014420:	e7f2      	b.n	8014408 <__sflags+0x34>
 8014422:	2400      	movs	r4, #0
 8014424:	4623      	mov	r3, r4
 8014426:	2004      	movs	r0, #4
 8014428:	e7ee      	b.n	8014408 <__sflags+0x34>
 801442a:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801442e:	2301      	movs	r3, #1
 8014430:	2008      	movs	r0, #8
 8014432:	e7e9      	b.n	8014408 <__sflags+0x34>
 8014434:	f44f 7402 	mov.w	r4, #520	; 0x208
 8014438:	2301      	movs	r3, #1
 801443a:	f44f 7084 	mov.w	r0, #264	; 0x108
 801443e:	e7e3      	b.n	8014408 <__sflags+0x34>

08014440 <fiprintf>:
 8014440:	b40e      	push	{r1, r2, r3}
 8014442:	b503      	push	{r0, r1, lr}
 8014444:	4601      	mov	r1, r0
 8014446:	ab03      	add	r3, sp, #12
 8014448:	4805      	ldr	r0, [pc, #20]	; (8014460 <fiprintf+0x20>)
 801444a:	f853 2b04 	ldr.w	r2, [r3], #4
 801444e:	6800      	ldr	r0, [r0, #0]
 8014450:	9301      	str	r3, [sp, #4]
 8014452:	f000 fb11 	bl	8014a78 <_vfiprintf_r>
 8014456:	b002      	add	sp, #8
 8014458:	f85d eb04 	ldr.w	lr, [sp], #4
 801445c:	b003      	add	sp, #12
 801445e:	4770      	bx	lr
 8014460:	20000100 	.word	0x20000100

08014464 <_fstat_r>:
 8014464:	b538      	push	{r3, r4, r5, lr}
 8014466:	4d07      	ldr	r5, [pc, #28]	; (8014484 <_fstat_r+0x20>)
 8014468:	2300      	movs	r3, #0
 801446a:	4604      	mov	r4, r0
 801446c:	4608      	mov	r0, r1
 801446e:	4611      	mov	r1, r2
 8014470:	602b      	str	r3, [r5, #0]
 8014472:	f7ec fcd5 	bl	8000e20 <_fstat>
 8014476:	1c43      	adds	r3, r0, #1
 8014478:	d102      	bne.n	8014480 <_fstat_r+0x1c>
 801447a:	682b      	ldr	r3, [r5, #0]
 801447c:	b103      	cbz	r3, 8014480 <_fstat_r+0x1c>
 801447e:	6023      	str	r3, [r4, #0]
 8014480:	bd38      	pop	{r3, r4, r5, pc}
 8014482:	bf00      	nop
 8014484:	20000c64 	.word	0x20000c64

08014488 <_findenv_r>:
 8014488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801448c:	4607      	mov	r7, r0
 801448e:	4689      	mov	r9, r1
 8014490:	4616      	mov	r6, r2
 8014492:	f000 fe97 	bl	80151c4 <__env_lock>
 8014496:	4b18      	ldr	r3, [pc, #96]	; (80144f8 <_findenv_r+0x70>)
 8014498:	681c      	ldr	r4, [r3, #0]
 801449a:	469a      	mov	sl, r3
 801449c:	b134      	cbz	r4, 80144ac <_findenv_r+0x24>
 801449e:	464b      	mov	r3, r9
 80144a0:	4698      	mov	r8, r3
 80144a2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80144a6:	b139      	cbz	r1, 80144b8 <_findenv_r+0x30>
 80144a8:	293d      	cmp	r1, #61	; 0x3d
 80144aa:	d1f9      	bne.n	80144a0 <_findenv_r+0x18>
 80144ac:	4638      	mov	r0, r7
 80144ae:	f000 fe8f 	bl	80151d0 <__env_unlock>
 80144b2:	2000      	movs	r0, #0
 80144b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144b8:	eba8 0809 	sub.w	r8, r8, r9
 80144bc:	46a3      	mov	fp, r4
 80144be:	f854 0b04 	ldr.w	r0, [r4], #4
 80144c2:	2800      	cmp	r0, #0
 80144c4:	d0f2      	beq.n	80144ac <_findenv_r+0x24>
 80144c6:	4642      	mov	r2, r8
 80144c8:	4649      	mov	r1, r9
 80144ca:	f000 fe5b 	bl	8015184 <strncmp>
 80144ce:	2800      	cmp	r0, #0
 80144d0:	d1f4      	bne.n	80144bc <_findenv_r+0x34>
 80144d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80144d6:	eb03 0508 	add.w	r5, r3, r8
 80144da:	f813 3008 	ldrb.w	r3, [r3, r8]
 80144de:	2b3d      	cmp	r3, #61	; 0x3d
 80144e0:	d1ec      	bne.n	80144bc <_findenv_r+0x34>
 80144e2:	f8da 3000 	ldr.w	r3, [sl]
 80144e6:	ebab 0303 	sub.w	r3, fp, r3
 80144ea:	109b      	asrs	r3, r3, #2
 80144ec:	4638      	mov	r0, r7
 80144ee:	6033      	str	r3, [r6, #0]
 80144f0:	f000 fe6e 	bl	80151d0 <__env_unlock>
 80144f4:	1c68      	adds	r0, r5, #1
 80144f6:	e7dd      	b.n	80144b4 <_findenv_r+0x2c>
 80144f8:	20000000 	.word	0x20000000

080144fc <_getenv_r>:
 80144fc:	b507      	push	{r0, r1, r2, lr}
 80144fe:	aa01      	add	r2, sp, #4
 8014500:	f7ff ffc2 	bl	8014488 <_findenv_r>
 8014504:	b003      	add	sp, #12
 8014506:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801450c <_gettimeofday_r>:
 801450c:	b538      	push	{r3, r4, r5, lr}
 801450e:	4d07      	ldr	r5, [pc, #28]	; (801452c <_gettimeofday_r+0x20>)
 8014510:	2300      	movs	r3, #0
 8014512:	4604      	mov	r4, r0
 8014514:	4608      	mov	r0, r1
 8014516:	4611      	mov	r1, r2
 8014518:	602b      	str	r3, [r5, #0]
 801451a:	f001 fa99 	bl	8015a50 <_gettimeofday>
 801451e:	1c43      	adds	r3, r0, #1
 8014520:	d102      	bne.n	8014528 <_gettimeofday_r+0x1c>
 8014522:	682b      	ldr	r3, [r5, #0]
 8014524:	b103      	cbz	r3, 8014528 <_gettimeofday_r+0x1c>
 8014526:	6023      	str	r3, [r4, #0]
 8014528:	bd38      	pop	{r3, r4, r5, pc}
 801452a:	bf00      	nop
 801452c:	20000c64 	.word	0x20000c64

08014530 <__gettzinfo>:
 8014530:	4800      	ldr	r0, [pc, #0]	; (8014534 <__gettzinfo+0x4>)
 8014532:	4770      	bx	lr
 8014534:	20000170 	.word	0x20000170

08014538 <gmtime_r>:
 8014538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801453c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014540:	460c      	mov	r4, r1
 8014542:	4a51      	ldr	r2, [pc, #324]	; (8014688 <gmtime_r+0x150>)
 8014544:	2300      	movs	r3, #0
 8014546:	4630      	mov	r0, r6
 8014548:	4639      	mov	r1, r7
 801454a:	f7ec f933 	bl	80007b4 <__aeabi_ldivmod>
 801454e:	4639      	mov	r1, r7
 8014550:	4605      	mov	r5, r0
 8014552:	4a4d      	ldr	r2, [pc, #308]	; (8014688 <gmtime_r+0x150>)
 8014554:	4630      	mov	r0, r6
 8014556:	2300      	movs	r3, #0
 8014558:	f7ec f92c 	bl	80007b4 <__aeabi_ldivmod>
 801455c:	2a00      	cmp	r2, #0
 801455e:	bfbc      	itt	lt
 8014560:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8014564:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8014568:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801456c:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8014570:	fbb2 f3f1 	udiv	r3, r2, r1
 8014574:	fb01 2213 	mls	r2, r1, r3, r2
 8014578:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801457c:	bfac      	ite	ge
 801457e:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8014582:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8014586:	60a3      	str	r3, [r4, #8]
 8014588:	fbb2 f3f1 	udiv	r3, r2, r1
 801458c:	fb01 2213 	mls	r2, r1, r3, r2
 8014590:	6063      	str	r3, [r4, #4]
 8014592:	6022      	str	r2, [r4, #0]
 8014594:	1cc3      	adds	r3, r0, #3
 8014596:	2207      	movs	r2, #7
 8014598:	fb93 f2f2 	sdiv	r2, r3, r2
 801459c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80145a0:	1a9b      	subs	r3, r3, r2
 80145a2:	bf48      	it	mi
 80145a4:	3307      	addmi	r3, #7
 80145a6:	2800      	cmp	r0, #0
 80145a8:	61a3      	str	r3, [r4, #24]
 80145aa:	bfb8      	it	lt
 80145ac:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80145b0:	4936      	ldr	r1, [pc, #216]	; (801468c <gmtime_r+0x154>)
 80145b2:	bfae      	itee	ge
 80145b4:	fb90 f1f1 	sdivge	r1, r0, r1
 80145b8:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80145bc:	fb93 f1f1 	sdivlt	r1, r3, r1
 80145c0:	4b33      	ldr	r3, [pc, #204]	; (8014690 <gmtime_r+0x158>)
 80145c2:	fb03 0001 	mla	r0, r3, r1, r0
 80145c6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80145ca:	fbb0 f2f2 	udiv	r2, r0, r2
 80145ce:	4402      	add	r2, r0
 80145d0:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80145d4:	fbb0 f3fc 	udiv	r3, r0, ip
 80145d8:	1ad2      	subs	r2, r2, r3
 80145da:	f240 176d 	movw	r7, #365	; 0x16d
 80145de:	4b2d      	ldr	r3, [pc, #180]	; (8014694 <gmtime_r+0x15c>)
 80145e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80145e4:	2664      	movs	r6, #100	; 0x64
 80145e6:	1ad3      	subs	r3, r2, r3
 80145e8:	fbb3 f5f7 	udiv	r5, r3, r7
 80145ec:	fbb3 f3fc 	udiv	r3, r3, ip
 80145f0:	fbb5 f2f6 	udiv	r2, r5, r6
 80145f4:	1ad3      	subs	r3, r2, r3
 80145f6:	4403      	add	r3, r0
 80145f8:	fb07 3315 	mls	r3, r7, r5, r3
 80145fc:	2099      	movs	r0, #153	; 0x99
 80145fe:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8014602:	f10c 0c02 	add.w	ip, ip, #2
 8014606:	f103 0e01 	add.w	lr, r3, #1
 801460a:	fbbc f7f0 	udiv	r7, ip, r0
 801460e:	4378      	muls	r0, r7
 8014610:	3002      	adds	r0, #2
 8014612:	f04f 0805 	mov.w	r8, #5
 8014616:	fbb0 f0f8 	udiv	r0, r0, r8
 801461a:	ebae 0000 	sub.w	r0, lr, r0
 801461e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8014622:	45f4      	cmp	ip, lr
 8014624:	bf94      	ite	ls
 8014626:	f04f 0c02 	movls.w	ip, #2
 801462a:	f06f 0c09 	mvnhi.w	ip, #9
 801462e:	4467      	add	r7, ip
 8014630:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8014634:	fb0c 5101 	mla	r1, ip, r1, r5
 8014638:	2f01      	cmp	r7, #1
 801463a:	bf98      	it	ls
 801463c:	3101      	addls	r1, #1
 801463e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8014642:	d30c      	bcc.n	801465e <gmtime_r+0x126>
 8014644:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8014648:	61e3      	str	r3, [r4, #28]
 801464a:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801464e:	2300      	movs	r3, #0
 8014650:	60e0      	str	r0, [r4, #12]
 8014652:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8014656:	6223      	str	r3, [r4, #32]
 8014658:	4620      	mov	r0, r4
 801465a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801465e:	f015 0f03 	tst.w	r5, #3
 8014662:	d102      	bne.n	801466a <gmtime_r+0x132>
 8014664:	fb06 5212 	mls	r2, r6, r2, r5
 8014668:	b95a      	cbnz	r2, 8014682 <gmtime_r+0x14a>
 801466a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801466e:	fbb5 f2f6 	udiv	r2, r5, r6
 8014672:	fb06 5212 	mls	r2, r6, r2, r5
 8014676:	fab2 f282 	clz	r2, r2
 801467a:	0952      	lsrs	r2, r2, #5
 801467c:	333b      	adds	r3, #59	; 0x3b
 801467e:	4413      	add	r3, r2
 8014680:	e7e2      	b.n	8014648 <gmtime_r+0x110>
 8014682:	2201      	movs	r2, #1
 8014684:	e7fa      	b.n	801467c <gmtime_r+0x144>
 8014686:	bf00      	nop
 8014688:	00015180 	.word	0x00015180
 801468c:	00023ab1 	.word	0x00023ab1
 8014690:	fffdc54f 	.word	0xfffdc54f
 8014694:	00023ab0 	.word	0x00023ab0

08014698 <_isatty_r>:
 8014698:	b538      	push	{r3, r4, r5, lr}
 801469a:	4d06      	ldr	r5, [pc, #24]	; (80146b4 <_isatty_r+0x1c>)
 801469c:	2300      	movs	r3, #0
 801469e:	4604      	mov	r4, r0
 80146a0:	4608      	mov	r0, r1
 80146a2:	602b      	str	r3, [r5, #0]
 80146a4:	f7ec fbcc 	bl	8000e40 <_isatty>
 80146a8:	1c43      	adds	r3, r0, #1
 80146aa:	d102      	bne.n	80146b2 <_isatty_r+0x1a>
 80146ac:	682b      	ldr	r3, [r5, #0]
 80146ae:	b103      	cbz	r3, 80146b2 <_isatty_r+0x1a>
 80146b0:	6023      	str	r3, [r4, #0]
 80146b2:	bd38      	pop	{r3, r4, r5, pc}
 80146b4:	20000c64 	.word	0x20000c64

080146b8 <labs>:
 80146b8:	2800      	cmp	r0, #0
 80146ba:	bfb8      	it	lt
 80146bc:	4240      	neglt	r0, r0
 80146be:	4770      	bx	lr

080146c0 <_lseek_r>:
 80146c0:	b538      	push	{r3, r4, r5, lr}
 80146c2:	4d07      	ldr	r5, [pc, #28]	; (80146e0 <_lseek_r+0x20>)
 80146c4:	4604      	mov	r4, r0
 80146c6:	4608      	mov	r0, r1
 80146c8:	4611      	mov	r1, r2
 80146ca:	2200      	movs	r2, #0
 80146cc:	602a      	str	r2, [r5, #0]
 80146ce:	461a      	mov	r2, r3
 80146d0:	f7ec fbc1 	bl	8000e56 <_lseek>
 80146d4:	1c43      	adds	r3, r0, #1
 80146d6:	d102      	bne.n	80146de <_lseek_r+0x1e>
 80146d8:	682b      	ldr	r3, [r5, #0]
 80146da:	b103      	cbz	r3, 80146de <_lseek_r+0x1e>
 80146dc:	6023      	str	r3, [r4, #0]
 80146de:	bd38      	pop	{r3, r4, r5, pc}
 80146e0:	20000c64 	.word	0x20000c64

080146e4 <__ascii_mbtowc>:
 80146e4:	b082      	sub	sp, #8
 80146e6:	b901      	cbnz	r1, 80146ea <__ascii_mbtowc+0x6>
 80146e8:	a901      	add	r1, sp, #4
 80146ea:	b142      	cbz	r2, 80146fe <__ascii_mbtowc+0x1a>
 80146ec:	b14b      	cbz	r3, 8014702 <__ascii_mbtowc+0x1e>
 80146ee:	7813      	ldrb	r3, [r2, #0]
 80146f0:	600b      	str	r3, [r1, #0]
 80146f2:	7812      	ldrb	r2, [r2, #0]
 80146f4:	1e10      	subs	r0, r2, #0
 80146f6:	bf18      	it	ne
 80146f8:	2001      	movne	r0, #1
 80146fa:	b002      	add	sp, #8
 80146fc:	4770      	bx	lr
 80146fe:	4610      	mov	r0, r2
 8014700:	e7fb      	b.n	80146fa <__ascii_mbtowc+0x16>
 8014702:	f06f 0001 	mvn.w	r0, #1
 8014706:	e7f8      	b.n	80146fa <__ascii_mbtowc+0x16>

08014708 <__malloc_lock>:
 8014708:	4801      	ldr	r0, [pc, #4]	; (8014710 <__malloc_lock+0x8>)
 801470a:	f7fe ba10 	b.w	8012b2e <__retarget_lock_acquire_recursive>
 801470e:	bf00      	nop
 8014710:	20000c5c 	.word	0x20000c5c

08014714 <__malloc_unlock>:
 8014714:	4801      	ldr	r0, [pc, #4]	; (801471c <__malloc_unlock+0x8>)
 8014716:	f7fe ba0c 	b.w	8012b32 <__retarget_lock_release_recursive>
 801471a:	bf00      	nop
 801471c:	20000c5c 	.word	0x20000c5c

08014720 <_realloc_r>:
 8014720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014722:	4607      	mov	r7, r0
 8014724:	4614      	mov	r4, r2
 8014726:	460e      	mov	r6, r1
 8014728:	b921      	cbnz	r1, 8014734 <_realloc_r+0x14>
 801472a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801472e:	4611      	mov	r1, r2
 8014730:	f7fe baea 	b.w	8012d08 <_malloc_r>
 8014734:	b922      	cbnz	r2, 8014740 <_realloc_r+0x20>
 8014736:	f7fe fa97 	bl	8012c68 <_free_r>
 801473a:	4625      	mov	r5, r4
 801473c:	4628      	mov	r0, r5
 801473e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014740:	f000 fd66 	bl	8015210 <_malloc_usable_size_r>
 8014744:	42a0      	cmp	r0, r4
 8014746:	d20f      	bcs.n	8014768 <_realloc_r+0x48>
 8014748:	4621      	mov	r1, r4
 801474a:	4638      	mov	r0, r7
 801474c:	f7fe fadc 	bl	8012d08 <_malloc_r>
 8014750:	4605      	mov	r5, r0
 8014752:	2800      	cmp	r0, #0
 8014754:	d0f2      	beq.n	801473c <_realloc_r+0x1c>
 8014756:	4631      	mov	r1, r6
 8014758:	4622      	mov	r2, r4
 801475a:	f7fe fa5f 	bl	8012c1c <memcpy>
 801475e:	4631      	mov	r1, r6
 8014760:	4638      	mov	r0, r7
 8014762:	f7fe fa81 	bl	8012c68 <_free_r>
 8014766:	e7e9      	b.n	801473c <_realloc_r+0x1c>
 8014768:	4635      	mov	r5, r6
 801476a:	e7e7      	b.n	801473c <_realloc_r+0x1c>

0801476c <__ssputs_r>:
 801476c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014770:	688e      	ldr	r6, [r1, #8]
 8014772:	429e      	cmp	r6, r3
 8014774:	4682      	mov	sl, r0
 8014776:	460c      	mov	r4, r1
 8014778:	4690      	mov	r8, r2
 801477a:	461f      	mov	r7, r3
 801477c:	d838      	bhi.n	80147f0 <__ssputs_r+0x84>
 801477e:	898a      	ldrh	r2, [r1, #12]
 8014780:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014784:	d032      	beq.n	80147ec <__ssputs_r+0x80>
 8014786:	6825      	ldr	r5, [r4, #0]
 8014788:	6909      	ldr	r1, [r1, #16]
 801478a:	eba5 0901 	sub.w	r9, r5, r1
 801478e:	6965      	ldr	r5, [r4, #20]
 8014790:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014794:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014798:	3301      	adds	r3, #1
 801479a:	444b      	add	r3, r9
 801479c:	106d      	asrs	r5, r5, #1
 801479e:	429d      	cmp	r5, r3
 80147a0:	bf38      	it	cc
 80147a2:	461d      	movcc	r5, r3
 80147a4:	0553      	lsls	r3, r2, #21
 80147a6:	d531      	bpl.n	801480c <__ssputs_r+0xa0>
 80147a8:	4629      	mov	r1, r5
 80147aa:	f7fe faad 	bl	8012d08 <_malloc_r>
 80147ae:	4606      	mov	r6, r0
 80147b0:	b950      	cbnz	r0, 80147c8 <__ssputs_r+0x5c>
 80147b2:	230c      	movs	r3, #12
 80147b4:	f8ca 3000 	str.w	r3, [sl]
 80147b8:	89a3      	ldrh	r3, [r4, #12]
 80147ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147be:	81a3      	strh	r3, [r4, #12]
 80147c0:	f04f 30ff 	mov.w	r0, #4294967295
 80147c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147c8:	6921      	ldr	r1, [r4, #16]
 80147ca:	464a      	mov	r2, r9
 80147cc:	f7fe fa26 	bl	8012c1c <memcpy>
 80147d0:	89a3      	ldrh	r3, [r4, #12]
 80147d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80147d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80147da:	81a3      	strh	r3, [r4, #12]
 80147dc:	6126      	str	r6, [r4, #16]
 80147de:	6165      	str	r5, [r4, #20]
 80147e0:	444e      	add	r6, r9
 80147e2:	eba5 0509 	sub.w	r5, r5, r9
 80147e6:	6026      	str	r6, [r4, #0]
 80147e8:	60a5      	str	r5, [r4, #8]
 80147ea:	463e      	mov	r6, r7
 80147ec:	42be      	cmp	r6, r7
 80147ee:	d900      	bls.n	80147f2 <__ssputs_r+0x86>
 80147f0:	463e      	mov	r6, r7
 80147f2:	4632      	mov	r2, r6
 80147f4:	6820      	ldr	r0, [r4, #0]
 80147f6:	4641      	mov	r1, r8
 80147f8:	f000 fcf0 	bl	80151dc <memmove>
 80147fc:	68a3      	ldr	r3, [r4, #8]
 80147fe:	6822      	ldr	r2, [r4, #0]
 8014800:	1b9b      	subs	r3, r3, r6
 8014802:	4432      	add	r2, r6
 8014804:	60a3      	str	r3, [r4, #8]
 8014806:	6022      	str	r2, [r4, #0]
 8014808:	2000      	movs	r0, #0
 801480a:	e7db      	b.n	80147c4 <__ssputs_r+0x58>
 801480c:	462a      	mov	r2, r5
 801480e:	f7ff ff87 	bl	8014720 <_realloc_r>
 8014812:	4606      	mov	r6, r0
 8014814:	2800      	cmp	r0, #0
 8014816:	d1e1      	bne.n	80147dc <__ssputs_r+0x70>
 8014818:	6921      	ldr	r1, [r4, #16]
 801481a:	4650      	mov	r0, sl
 801481c:	f7fe fa24 	bl	8012c68 <_free_r>
 8014820:	e7c7      	b.n	80147b2 <__ssputs_r+0x46>
	...

08014824 <_svfiprintf_r>:
 8014824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014828:	4698      	mov	r8, r3
 801482a:	898b      	ldrh	r3, [r1, #12]
 801482c:	061b      	lsls	r3, r3, #24
 801482e:	b09d      	sub	sp, #116	; 0x74
 8014830:	4607      	mov	r7, r0
 8014832:	460d      	mov	r5, r1
 8014834:	4614      	mov	r4, r2
 8014836:	d50e      	bpl.n	8014856 <_svfiprintf_r+0x32>
 8014838:	690b      	ldr	r3, [r1, #16]
 801483a:	b963      	cbnz	r3, 8014856 <_svfiprintf_r+0x32>
 801483c:	2140      	movs	r1, #64	; 0x40
 801483e:	f7fe fa63 	bl	8012d08 <_malloc_r>
 8014842:	6028      	str	r0, [r5, #0]
 8014844:	6128      	str	r0, [r5, #16]
 8014846:	b920      	cbnz	r0, 8014852 <_svfiprintf_r+0x2e>
 8014848:	230c      	movs	r3, #12
 801484a:	603b      	str	r3, [r7, #0]
 801484c:	f04f 30ff 	mov.w	r0, #4294967295
 8014850:	e0d1      	b.n	80149f6 <_svfiprintf_r+0x1d2>
 8014852:	2340      	movs	r3, #64	; 0x40
 8014854:	616b      	str	r3, [r5, #20]
 8014856:	2300      	movs	r3, #0
 8014858:	9309      	str	r3, [sp, #36]	; 0x24
 801485a:	2320      	movs	r3, #32
 801485c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014860:	f8cd 800c 	str.w	r8, [sp, #12]
 8014864:	2330      	movs	r3, #48	; 0x30
 8014866:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014a10 <_svfiprintf_r+0x1ec>
 801486a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801486e:	f04f 0901 	mov.w	r9, #1
 8014872:	4623      	mov	r3, r4
 8014874:	469a      	mov	sl, r3
 8014876:	f813 2b01 	ldrb.w	r2, [r3], #1
 801487a:	b10a      	cbz	r2, 8014880 <_svfiprintf_r+0x5c>
 801487c:	2a25      	cmp	r2, #37	; 0x25
 801487e:	d1f9      	bne.n	8014874 <_svfiprintf_r+0x50>
 8014880:	ebba 0b04 	subs.w	fp, sl, r4
 8014884:	d00b      	beq.n	801489e <_svfiprintf_r+0x7a>
 8014886:	465b      	mov	r3, fp
 8014888:	4622      	mov	r2, r4
 801488a:	4629      	mov	r1, r5
 801488c:	4638      	mov	r0, r7
 801488e:	f7ff ff6d 	bl	801476c <__ssputs_r>
 8014892:	3001      	adds	r0, #1
 8014894:	f000 80aa 	beq.w	80149ec <_svfiprintf_r+0x1c8>
 8014898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801489a:	445a      	add	r2, fp
 801489c:	9209      	str	r2, [sp, #36]	; 0x24
 801489e:	f89a 3000 	ldrb.w	r3, [sl]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	f000 80a2 	beq.w	80149ec <_svfiprintf_r+0x1c8>
 80148a8:	2300      	movs	r3, #0
 80148aa:	f04f 32ff 	mov.w	r2, #4294967295
 80148ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148b2:	f10a 0a01 	add.w	sl, sl, #1
 80148b6:	9304      	str	r3, [sp, #16]
 80148b8:	9307      	str	r3, [sp, #28]
 80148ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80148be:	931a      	str	r3, [sp, #104]	; 0x68
 80148c0:	4654      	mov	r4, sl
 80148c2:	2205      	movs	r2, #5
 80148c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148c8:	4851      	ldr	r0, [pc, #324]	; (8014a10 <_svfiprintf_r+0x1ec>)
 80148ca:	f7eb fcc9 	bl	8000260 <memchr>
 80148ce:	9a04      	ldr	r2, [sp, #16]
 80148d0:	b9d8      	cbnz	r0, 801490a <_svfiprintf_r+0xe6>
 80148d2:	06d0      	lsls	r0, r2, #27
 80148d4:	bf44      	itt	mi
 80148d6:	2320      	movmi	r3, #32
 80148d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148dc:	0711      	lsls	r1, r2, #28
 80148de:	bf44      	itt	mi
 80148e0:	232b      	movmi	r3, #43	; 0x2b
 80148e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148e6:	f89a 3000 	ldrb.w	r3, [sl]
 80148ea:	2b2a      	cmp	r3, #42	; 0x2a
 80148ec:	d015      	beq.n	801491a <_svfiprintf_r+0xf6>
 80148ee:	9a07      	ldr	r2, [sp, #28]
 80148f0:	4654      	mov	r4, sl
 80148f2:	2000      	movs	r0, #0
 80148f4:	f04f 0c0a 	mov.w	ip, #10
 80148f8:	4621      	mov	r1, r4
 80148fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80148fe:	3b30      	subs	r3, #48	; 0x30
 8014900:	2b09      	cmp	r3, #9
 8014902:	d94e      	bls.n	80149a2 <_svfiprintf_r+0x17e>
 8014904:	b1b0      	cbz	r0, 8014934 <_svfiprintf_r+0x110>
 8014906:	9207      	str	r2, [sp, #28]
 8014908:	e014      	b.n	8014934 <_svfiprintf_r+0x110>
 801490a:	eba0 0308 	sub.w	r3, r0, r8
 801490e:	fa09 f303 	lsl.w	r3, r9, r3
 8014912:	4313      	orrs	r3, r2
 8014914:	9304      	str	r3, [sp, #16]
 8014916:	46a2      	mov	sl, r4
 8014918:	e7d2      	b.n	80148c0 <_svfiprintf_r+0x9c>
 801491a:	9b03      	ldr	r3, [sp, #12]
 801491c:	1d19      	adds	r1, r3, #4
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	9103      	str	r1, [sp, #12]
 8014922:	2b00      	cmp	r3, #0
 8014924:	bfbb      	ittet	lt
 8014926:	425b      	neglt	r3, r3
 8014928:	f042 0202 	orrlt.w	r2, r2, #2
 801492c:	9307      	strge	r3, [sp, #28]
 801492e:	9307      	strlt	r3, [sp, #28]
 8014930:	bfb8      	it	lt
 8014932:	9204      	strlt	r2, [sp, #16]
 8014934:	7823      	ldrb	r3, [r4, #0]
 8014936:	2b2e      	cmp	r3, #46	; 0x2e
 8014938:	d10c      	bne.n	8014954 <_svfiprintf_r+0x130>
 801493a:	7863      	ldrb	r3, [r4, #1]
 801493c:	2b2a      	cmp	r3, #42	; 0x2a
 801493e:	d135      	bne.n	80149ac <_svfiprintf_r+0x188>
 8014940:	9b03      	ldr	r3, [sp, #12]
 8014942:	1d1a      	adds	r2, r3, #4
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	9203      	str	r2, [sp, #12]
 8014948:	2b00      	cmp	r3, #0
 801494a:	bfb8      	it	lt
 801494c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014950:	3402      	adds	r4, #2
 8014952:	9305      	str	r3, [sp, #20]
 8014954:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014a20 <_svfiprintf_r+0x1fc>
 8014958:	7821      	ldrb	r1, [r4, #0]
 801495a:	2203      	movs	r2, #3
 801495c:	4650      	mov	r0, sl
 801495e:	f7eb fc7f 	bl	8000260 <memchr>
 8014962:	b140      	cbz	r0, 8014976 <_svfiprintf_r+0x152>
 8014964:	2340      	movs	r3, #64	; 0x40
 8014966:	eba0 000a 	sub.w	r0, r0, sl
 801496a:	fa03 f000 	lsl.w	r0, r3, r0
 801496e:	9b04      	ldr	r3, [sp, #16]
 8014970:	4303      	orrs	r3, r0
 8014972:	3401      	adds	r4, #1
 8014974:	9304      	str	r3, [sp, #16]
 8014976:	f814 1b01 	ldrb.w	r1, [r4], #1
 801497a:	4826      	ldr	r0, [pc, #152]	; (8014a14 <_svfiprintf_r+0x1f0>)
 801497c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014980:	2206      	movs	r2, #6
 8014982:	f7eb fc6d 	bl	8000260 <memchr>
 8014986:	2800      	cmp	r0, #0
 8014988:	d038      	beq.n	80149fc <_svfiprintf_r+0x1d8>
 801498a:	4b23      	ldr	r3, [pc, #140]	; (8014a18 <_svfiprintf_r+0x1f4>)
 801498c:	bb1b      	cbnz	r3, 80149d6 <_svfiprintf_r+0x1b2>
 801498e:	9b03      	ldr	r3, [sp, #12]
 8014990:	3307      	adds	r3, #7
 8014992:	f023 0307 	bic.w	r3, r3, #7
 8014996:	3308      	adds	r3, #8
 8014998:	9303      	str	r3, [sp, #12]
 801499a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801499c:	4433      	add	r3, r6
 801499e:	9309      	str	r3, [sp, #36]	; 0x24
 80149a0:	e767      	b.n	8014872 <_svfiprintf_r+0x4e>
 80149a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80149a6:	460c      	mov	r4, r1
 80149a8:	2001      	movs	r0, #1
 80149aa:	e7a5      	b.n	80148f8 <_svfiprintf_r+0xd4>
 80149ac:	2300      	movs	r3, #0
 80149ae:	3401      	adds	r4, #1
 80149b0:	9305      	str	r3, [sp, #20]
 80149b2:	4619      	mov	r1, r3
 80149b4:	f04f 0c0a 	mov.w	ip, #10
 80149b8:	4620      	mov	r0, r4
 80149ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149be:	3a30      	subs	r2, #48	; 0x30
 80149c0:	2a09      	cmp	r2, #9
 80149c2:	d903      	bls.n	80149cc <_svfiprintf_r+0x1a8>
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d0c5      	beq.n	8014954 <_svfiprintf_r+0x130>
 80149c8:	9105      	str	r1, [sp, #20]
 80149ca:	e7c3      	b.n	8014954 <_svfiprintf_r+0x130>
 80149cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80149d0:	4604      	mov	r4, r0
 80149d2:	2301      	movs	r3, #1
 80149d4:	e7f0      	b.n	80149b8 <_svfiprintf_r+0x194>
 80149d6:	ab03      	add	r3, sp, #12
 80149d8:	9300      	str	r3, [sp, #0]
 80149da:	462a      	mov	r2, r5
 80149dc:	4b0f      	ldr	r3, [pc, #60]	; (8014a1c <_svfiprintf_r+0x1f8>)
 80149de:	a904      	add	r1, sp, #16
 80149e0:	4638      	mov	r0, r7
 80149e2:	f3af 8000 	nop.w
 80149e6:	1c42      	adds	r2, r0, #1
 80149e8:	4606      	mov	r6, r0
 80149ea:	d1d6      	bne.n	801499a <_svfiprintf_r+0x176>
 80149ec:	89ab      	ldrh	r3, [r5, #12]
 80149ee:	065b      	lsls	r3, r3, #25
 80149f0:	f53f af2c 	bmi.w	801484c <_svfiprintf_r+0x28>
 80149f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149f6:	b01d      	add	sp, #116	; 0x74
 80149f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149fc:	ab03      	add	r3, sp, #12
 80149fe:	9300      	str	r3, [sp, #0]
 8014a00:	462a      	mov	r2, r5
 8014a02:	4b06      	ldr	r3, [pc, #24]	; (8014a1c <_svfiprintf_r+0x1f8>)
 8014a04:	a904      	add	r1, sp, #16
 8014a06:	4638      	mov	r0, r7
 8014a08:	f000 f9d4 	bl	8014db4 <_printf_i>
 8014a0c:	e7eb      	b.n	80149e6 <_svfiprintf_r+0x1c2>
 8014a0e:	bf00      	nop
 8014a10:	08019297 	.word	0x08019297
 8014a14:	080192a1 	.word	0x080192a1
 8014a18:	00000000 	.word	0x00000000
 8014a1c:	0801476d 	.word	0x0801476d
 8014a20:	0801929d 	.word	0x0801929d

08014a24 <__sfputc_r>:
 8014a24:	6893      	ldr	r3, [r2, #8]
 8014a26:	3b01      	subs	r3, #1
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	b410      	push	{r4}
 8014a2c:	6093      	str	r3, [r2, #8]
 8014a2e:	da08      	bge.n	8014a42 <__sfputc_r+0x1e>
 8014a30:	6994      	ldr	r4, [r2, #24]
 8014a32:	42a3      	cmp	r3, r4
 8014a34:	db01      	blt.n	8014a3a <__sfputc_r+0x16>
 8014a36:	290a      	cmp	r1, #10
 8014a38:	d103      	bne.n	8014a42 <__sfputc_r+0x1e>
 8014a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a3e:	f7ff bb63 	b.w	8014108 <__swbuf_r>
 8014a42:	6813      	ldr	r3, [r2, #0]
 8014a44:	1c58      	adds	r0, r3, #1
 8014a46:	6010      	str	r0, [r2, #0]
 8014a48:	7019      	strb	r1, [r3, #0]
 8014a4a:	4608      	mov	r0, r1
 8014a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a50:	4770      	bx	lr

08014a52 <__sfputs_r>:
 8014a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a54:	4606      	mov	r6, r0
 8014a56:	460f      	mov	r7, r1
 8014a58:	4614      	mov	r4, r2
 8014a5a:	18d5      	adds	r5, r2, r3
 8014a5c:	42ac      	cmp	r4, r5
 8014a5e:	d101      	bne.n	8014a64 <__sfputs_r+0x12>
 8014a60:	2000      	movs	r0, #0
 8014a62:	e007      	b.n	8014a74 <__sfputs_r+0x22>
 8014a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a68:	463a      	mov	r2, r7
 8014a6a:	4630      	mov	r0, r6
 8014a6c:	f7ff ffda 	bl	8014a24 <__sfputc_r>
 8014a70:	1c43      	adds	r3, r0, #1
 8014a72:	d1f3      	bne.n	8014a5c <__sfputs_r+0xa>
 8014a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014a78 <_vfiprintf_r>:
 8014a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a7c:	460d      	mov	r5, r1
 8014a7e:	b09d      	sub	sp, #116	; 0x74
 8014a80:	4614      	mov	r4, r2
 8014a82:	4698      	mov	r8, r3
 8014a84:	4606      	mov	r6, r0
 8014a86:	b118      	cbz	r0, 8014a90 <_vfiprintf_r+0x18>
 8014a88:	6983      	ldr	r3, [r0, #24]
 8014a8a:	b90b      	cbnz	r3, 8014a90 <_vfiprintf_r+0x18>
 8014a8c:	f7fd fc9c 	bl	80123c8 <__sinit>
 8014a90:	4b89      	ldr	r3, [pc, #548]	; (8014cb8 <_vfiprintf_r+0x240>)
 8014a92:	429d      	cmp	r5, r3
 8014a94:	d11b      	bne.n	8014ace <_vfiprintf_r+0x56>
 8014a96:	6875      	ldr	r5, [r6, #4]
 8014a98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a9a:	07d9      	lsls	r1, r3, #31
 8014a9c:	d405      	bmi.n	8014aaa <_vfiprintf_r+0x32>
 8014a9e:	89ab      	ldrh	r3, [r5, #12]
 8014aa0:	059a      	lsls	r2, r3, #22
 8014aa2:	d402      	bmi.n	8014aaa <_vfiprintf_r+0x32>
 8014aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014aa6:	f7fe f842 	bl	8012b2e <__retarget_lock_acquire_recursive>
 8014aaa:	89ab      	ldrh	r3, [r5, #12]
 8014aac:	071b      	lsls	r3, r3, #28
 8014aae:	d501      	bpl.n	8014ab4 <_vfiprintf_r+0x3c>
 8014ab0:	692b      	ldr	r3, [r5, #16]
 8014ab2:	b9eb      	cbnz	r3, 8014af0 <_vfiprintf_r+0x78>
 8014ab4:	4629      	mov	r1, r5
 8014ab6:	4630      	mov	r0, r6
 8014ab8:	f7ff fb8a 	bl	80141d0 <__swsetup_r>
 8014abc:	b1c0      	cbz	r0, 8014af0 <_vfiprintf_r+0x78>
 8014abe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ac0:	07dc      	lsls	r4, r3, #31
 8014ac2:	d50e      	bpl.n	8014ae2 <_vfiprintf_r+0x6a>
 8014ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ac8:	b01d      	add	sp, #116	; 0x74
 8014aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ace:	4b7b      	ldr	r3, [pc, #492]	; (8014cbc <_vfiprintf_r+0x244>)
 8014ad0:	429d      	cmp	r5, r3
 8014ad2:	d101      	bne.n	8014ad8 <_vfiprintf_r+0x60>
 8014ad4:	68b5      	ldr	r5, [r6, #8]
 8014ad6:	e7df      	b.n	8014a98 <_vfiprintf_r+0x20>
 8014ad8:	4b79      	ldr	r3, [pc, #484]	; (8014cc0 <_vfiprintf_r+0x248>)
 8014ada:	429d      	cmp	r5, r3
 8014adc:	bf08      	it	eq
 8014ade:	68f5      	ldreq	r5, [r6, #12]
 8014ae0:	e7da      	b.n	8014a98 <_vfiprintf_r+0x20>
 8014ae2:	89ab      	ldrh	r3, [r5, #12]
 8014ae4:	0598      	lsls	r0, r3, #22
 8014ae6:	d4ed      	bmi.n	8014ac4 <_vfiprintf_r+0x4c>
 8014ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014aea:	f7fe f822 	bl	8012b32 <__retarget_lock_release_recursive>
 8014aee:	e7e9      	b.n	8014ac4 <_vfiprintf_r+0x4c>
 8014af0:	2300      	movs	r3, #0
 8014af2:	9309      	str	r3, [sp, #36]	; 0x24
 8014af4:	2320      	movs	r3, #32
 8014af6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014afa:	f8cd 800c 	str.w	r8, [sp, #12]
 8014afe:	2330      	movs	r3, #48	; 0x30
 8014b00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014cc4 <_vfiprintf_r+0x24c>
 8014b04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b08:	f04f 0901 	mov.w	r9, #1
 8014b0c:	4623      	mov	r3, r4
 8014b0e:	469a      	mov	sl, r3
 8014b10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b14:	b10a      	cbz	r2, 8014b1a <_vfiprintf_r+0xa2>
 8014b16:	2a25      	cmp	r2, #37	; 0x25
 8014b18:	d1f9      	bne.n	8014b0e <_vfiprintf_r+0x96>
 8014b1a:	ebba 0b04 	subs.w	fp, sl, r4
 8014b1e:	d00b      	beq.n	8014b38 <_vfiprintf_r+0xc0>
 8014b20:	465b      	mov	r3, fp
 8014b22:	4622      	mov	r2, r4
 8014b24:	4629      	mov	r1, r5
 8014b26:	4630      	mov	r0, r6
 8014b28:	f7ff ff93 	bl	8014a52 <__sfputs_r>
 8014b2c:	3001      	adds	r0, #1
 8014b2e:	f000 80aa 	beq.w	8014c86 <_vfiprintf_r+0x20e>
 8014b32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b34:	445a      	add	r2, fp
 8014b36:	9209      	str	r2, [sp, #36]	; 0x24
 8014b38:	f89a 3000 	ldrb.w	r3, [sl]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	f000 80a2 	beq.w	8014c86 <_vfiprintf_r+0x20e>
 8014b42:	2300      	movs	r3, #0
 8014b44:	f04f 32ff 	mov.w	r2, #4294967295
 8014b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b4c:	f10a 0a01 	add.w	sl, sl, #1
 8014b50:	9304      	str	r3, [sp, #16]
 8014b52:	9307      	str	r3, [sp, #28]
 8014b54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b58:	931a      	str	r3, [sp, #104]	; 0x68
 8014b5a:	4654      	mov	r4, sl
 8014b5c:	2205      	movs	r2, #5
 8014b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b62:	4858      	ldr	r0, [pc, #352]	; (8014cc4 <_vfiprintf_r+0x24c>)
 8014b64:	f7eb fb7c 	bl	8000260 <memchr>
 8014b68:	9a04      	ldr	r2, [sp, #16]
 8014b6a:	b9d8      	cbnz	r0, 8014ba4 <_vfiprintf_r+0x12c>
 8014b6c:	06d1      	lsls	r1, r2, #27
 8014b6e:	bf44      	itt	mi
 8014b70:	2320      	movmi	r3, #32
 8014b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b76:	0713      	lsls	r3, r2, #28
 8014b78:	bf44      	itt	mi
 8014b7a:	232b      	movmi	r3, #43	; 0x2b
 8014b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b80:	f89a 3000 	ldrb.w	r3, [sl]
 8014b84:	2b2a      	cmp	r3, #42	; 0x2a
 8014b86:	d015      	beq.n	8014bb4 <_vfiprintf_r+0x13c>
 8014b88:	9a07      	ldr	r2, [sp, #28]
 8014b8a:	4654      	mov	r4, sl
 8014b8c:	2000      	movs	r0, #0
 8014b8e:	f04f 0c0a 	mov.w	ip, #10
 8014b92:	4621      	mov	r1, r4
 8014b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b98:	3b30      	subs	r3, #48	; 0x30
 8014b9a:	2b09      	cmp	r3, #9
 8014b9c:	d94e      	bls.n	8014c3c <_vfiprintf_r+0x1c4>
 8014b9e:	b1b0      	cbz	r0, 8014bce <_vfiprintf_r+0x156>
 8014ba0:	9207      	str	r2, [sp, #28]
 8014ba2:	e014      	b.n	8014bce <_vfiprintf_r+0x156>
 8014ba4:	eba0 0308 	sub.w	r3, r0, r8
 8014ba8:	fa09 f303 	lsl.w	r3, r9, r3
 8014bac:	4313      	orrs	r3, r2
 8014bae:	9304      	str	r3, [sp, #16]
 8014bb0:	46a2      	mov	sl, r4
 8014bb2:	e7d2      	b.n	8014b5a <_vfiprintf_r+0xe2>
 8014bb4:	9b03      	ldr	r3, [sp, #12]
 8014bb6:	1d19      	adds	r1, r3, #4
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	9103      	str	r1, [sp, #12]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	bfbb      	ittet	lt
 8014bc0:	425b      	neglt	r3, r3
 8014bc2:	f042 0202 	orrlt.w	r2, r2, #2
 8014bc6:	9307      	strge	r3, [sp, #28]
 8014bc8:	9307      	strlt	r3, [sp, #28]
 8014bca:	bfb8      	it	lt
 8014bcc:	9204      	strlt	r2, [sp, #16]
 8014bce:	7823      	ldrb	r3, [r4, #0]
 8014bd0:	2b2e      	cmp	r3, #46	; 0x2e
 8014bd2:	d10c      	bne.n	8014bee <_vfiprintf_r+0x176>
 8014bd4:	7863      	ldrb	r3, [r4, #1]
 8014bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8014bd8:	d135      	bne.n	8014c46 <_vfiprintf_r+0x1ce>
 8014bda:	9b03      	ldr	r3, [sp, #12]
 8014bdc:	1d1a      	adds	r2, r3, #4
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	9203      	str	r2, [sp, #12]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	bfb8      	it	lt
 8014be6:	f04f 33ff 	movlt.w	r3, #4294967295
 8014bea:	3402      	adds	r4, #2
 8014bec:	9305      	str	r3, [sp, #20]
 8014bee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014cd4 <_vfiprintf_r+0x25c>
 8014bf2:	7821      	ldrb	r1, [r4, #0]
 8014bf4:	2203      	movs	r2, #3
 8014bf6:	4650      	mov	r0, sl
 8014bf8:	f7eb fb32 	bl	8000260 <memchr>
 8014bfc:	b140      	cbz	r0, 8014c10 <_vfiprintf_r+0x198>
 8014bfe:	2340      	movs	r3, #64	; 0x40
 8014c00:	eba0 000a 	sub.w	r0, r0, sl
 8014c04:	fa03 f000 	lsl.w	r0, r3, r0
 8014c08:	9b04      	ldr	r3, [sp, #16]
 8014c0a:	4303      	orrs	r3, r0
 8014c0c:	3401      	adds	r4, #1
 8014c0e:	9304      	str	r3, [sp, #16]
 8014c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c14:	482c      	ldr	r0, [pc, #176]	; (8014cc8 <_vfiprintf_r+0x250>)
 8014c16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c1a:	2206      	movs	r2, #6
 8014c1c:	f7eb fb20 	bl	8000260 <memchr>
 8014c20:	2800      	cmp	r0, #0
 8014c22:	d03f      	beq.n	8014ca4 <_vfiprintf_r+0x22c>
 8014c24:	4b29      	ldr	r3, [pc, #164]	; (8014ccc <_vfiprintf_r+0x254>)
 8014c26:	bb1b      	cbnz	r3, 8014c70 <_vfiprintf_r+0x1f8>
 8014c28:	9b03      	ldr	r3, [sp, #12]
 8014c2a:	3307      	adds	r3, #7
 8014c2c:	f023 0307 	bic.w	r3, r3, #7
 8014c30:	3308      	adds	r3, #8
 8014c32:	9303      	str	r3, [sp, #12]
 8014c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c36:	443b      	add	r3, r7
 8014c38:	9309      	str	r3, [sp, #36]	; 0x24
 8014c3a:	e767      	b.n	8014b0c <_vfiprintf_r+0x94>
 8014c3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c40:	460c      	mov	r4, r1
 8014c42:	2001      	movs	r0, #1
 8014c44:	e7a5      	b.n	8014b92 <_vfiprintf_r+0x11a>
 8014c46:	2300      	movs	r3, #0
 8014c48:	3401      	adds	r4, #1
 8014c4a:	9305      	str	r3, [sp, #20]
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	f04f 0c0a 	mov.w	ip, #10
 8014c52:	4620      	mov	r0, r4
 8014c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c58:	3a30      	subs	r2, #48	; 0x30
 8014c5a:	2a09      	cmp	r2, #9
 8014c5c:	d903      	bls.n	8014c66 <_vfiprintf_r+0x1ee>
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d0c5      	beq.n	8014bee <_vfiprintf_r+0x176>
 8014c62:	9105      	str	r1, [sp, #20]
 8014c64:	e7c3      	b.n	8014bee <_vfiprintf_r+0x176>
 8014c66:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c6a:	4604      	mov	r4, r0
 8014c6c:	2301      	movs	r3, #1
 8014c6e:	e7f0      	b.n	8014c52 <_vfiprintf_r+0x1da>
 8014c70:	ab03      	add	r3, sp, #12
 8014c72:	9300      	str	r3, [sp, #0]
 8014c74:	462a      	mov	r2, r5
 8014c76:	4b16      	ldr	r3, [pc, #88]	; (8014cd0 <_vfiprintf_r+0x258>)
 8014c78:	a904      	add	r1, sp, #16
 8014c7a:	4630      	mov	r0, r6
 8014c7c:	f3af 8000 	nop.w
 8014c80:	4607      	mov	r7, r0
 8014c82:	1c78      	adds	r0, r7, #1
 8014c84:	d1d6      	bne.n	8014c34 <_vfiprintf_r+0x1bc>
 8014c86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c88:	07d9      	lsls	r1, r3, #31
 8014c8a:	d405      	bmi.n	8014c98 <_vfiprintf_r+0x220>
 8014c8c:	89ab      	ldrh	r3, [r5, #12]
 8014c8e:	059a      	lsls	r2, r3, #22
 8014c90:	d402      	bmi.n	8014c98 <_vfiprintf_r+0x220>
 8014c92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c94:	f7fd ff4d 	bl	8012b32 <__retarget_lock_release_recursive>
 8014c98:	89ab      	ldrh	r3, [r5, #12]
 8014c9a:	065b      	lsls	r3, r3, #25
 8014c9c:	f53f af12 	bmi.w	8014ac4 <_vfiprintf_r+0x4c>
 8014ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ca2:	e711      	b.n	8014ac8 <_vfiprintf_r+0x50>
 8014ca4:	ab03      	add	r3, sp, #12
 8014ca6:	9300      	str	r3, [sp, #0]
 8014ca8:	462a      	mov	r2, r5
 8014caa:	4b09      	ldr	r3, [pc, #36]	; (8014cd0 <_vfiprintf_r+0x258>)
 8014cac:	a904      	add	r1, sp, #16
 8014cae:	4630      	mov	r0, r6
 8014cb0:	f000 f880 	bl	8014db4 <_printf_i>
 8014cb4:	e7e4      	b.n	8014c80 <_vfiprintf_r+0x208>
 8014cb6:	bf00      	nop
 8014cb8:	08018d18 	.word	0x08018d18
 8014cbc:	08018d38 	.word	0x08018d38
 8014cc0:	08018cf8 	.word	0x08018cf8
 8014cc4:	08019297 	.word	0x08019297
 8014cc8:	080192a1 	.word	0x080192a1
 8014ccc:	00000000 	.word	0x00000000
 8014cd0:	08014a53 	.word	0x08014a53
 8014cd4:	0801929d 	.word	0x0801929d

08014cd8 <_printf_common>:
 8014cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cdc:	4616      	mov	r6, r2
 8014cde:	4699      	mov	r9, r3
 8014ce0:	688a      	ldr	r2, [r1, #8]
 8014ce2:	690b      	ldr	r3, [r1, #16]
 8014ce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014ce8:	4293      	cmp	r3, r2
 8014cea:	bfb8      	it	lt
 8014cec:	4613      	movlt	r3, r2
 8014cee:	6033      	str	r3, [r6, #0]
 8014cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014cf4:	4607      	mov	r7, r0
 8014cf6:	460c      	mov	r4, r1
 8014cf8:	b10a      	cbz	r2, 8014cfe <_printf_common+0x26>
 8014cfa:	3301      	adds	r3, #1
 8014cfc:	6033      	str	r3, [r6, #0]
 8014cfe:	6823      	ldr	r3, [r4, #0]
 8014d00:	0699      	lsls	r1, r3, #26
 8014d02:	bf42      	ittt	mi
 8014d04:	6833      	ldrmi	r3, [r6, #0]
 8014d06:	3302      	addmi	r3, #2
 8014d08:	6033      	strmi	r3, [r6, #0]
 8014d0a:	6825      	ldr	r5, [r4, #0]
 8014d0c:	f015 0506 	ands.w	r5, r5, #6
 8014d10:	d106      	bne.n	8014d20 <_printf_common+0x48>
 8014d12:	f104 0a19 	add.w	sl, r4, #25
 8014d16:	68e3      	ldr	r3, [r4, #12]
 8014d18:	6832      	ldr	r2, [r6, #0]
 8014d1a:	1a9b      	subs	r3, r3, r2
 8014d1c:	42ab      	cmp	r3, r5
 8014d1e:	dc26      	bgt.n	8014d6e <_printf_common+0x96>
 8014d20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014d24:	1e13      	subs	r3, r2, #0
 8014d26:	6822      	ldr	r2, [r4, #0]
 8014d28:	bf18      	it	ne
 8014d2a:	2301      	movne	r3, #1
 8014d2c:	0692      	lsls	r2, r2, #26
 8014d2e:	d42b      	bmi.n	8014d88 <_printf_common+0xb0>
 8014d30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014d34:	4649      	mov	r1, r9
 8014d36:	4638      	mov	r0, r7
 8014d38:	47c0      	blx	r8
 8014d3a:	3001      	adds	r0, #1
 8014d3c:	d01e      	beq.n	8014d7c <_printf_common+0xa4>
 8014d3e:	6823      	ldr	r3, [r4, #0]
 8014d40:	68e5      	ldr	r5, [r4, #12]
 8014d42:	6832      	ldr	r2, [r6, #0]
 8014d44:	f003 0306 	and.w	r3, r3, #6
 8014d48:	2b04      	cmp	r3, #4
 8014d4a:	bf08      	it	eq
 8014d4c:	1aad      	subeq	r5, r5, r2
 8014d4e:	68a3      	ldr	r3, [r4, #8]
 8014d50:	6922      	ldr	r2, [r4, #16]
 8014d52:	bf0c      	ite	eq
 8014d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014d58:	2500      	movne	r5, #0
 8014d5a:	4293      	cmp	r3, r2
 8014d5c:	bfc4      	itt	gt
 8014d5e:	1a9b      	subgt	r3, r3, r2
 8014d60:	18ed      	addgt	r5, r5, r3
 8014d62:	2600      	movs	r6, #0
 8014d64:	341a      	adds	r4, #26
 8014d66:	42b5      	cmp	r5, r6
 8014d68:	d11a      	bne.n	8014da0 <_printf_common+0xc8>
 8014d6a:	2000      	movs	r0, #0
 8014d6c:	e008      	b.n	8014d80 <_printf_common+0xa8>
 8014d6e:	2301      	movs	r3, #1
 8014d70:	4652      	mov	r2, sl
 8014d72:	4649      	mov	r1, r9
 8014d74:	4638      	mov	r0, r7
 8014d76:	47c0      	blx	r8
 8014d78:	3001      	adds	r0, #1
 8014d7a:	d103      	bne.n	8014d84 <_printf_common+0xac>
 8014d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8014d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d84:	3501      	adds	r5, #1
 8014d86:	e7c6      	b.n	8014d16 <_printf_common+0x3e>
 8014d88:	18e1      	adds	r1, r4, r3
 8014d8a:	1c5a      	adds	r2, r3, #1
 8014d8c:	2030      	movs	r0, #48	; 0x30
 8014d8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014d92:	4422      	add	r2, r4
 8014d94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014d98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014d9c:	3302      	adds	r3, #2
 8014d9e:	e7c7      	b.n	8014d30 <_printf_common+0x58>
 8014da0:	2301      	movs	r3, #1
 8014da2:	4622      	mov	r2, r4
 8014da4:	4649      	mov	r1, r9
 8014da6:	4638      	mov	r0, r7
 8014da8:	47c0      	blx	r8
 8014daa:	3001      	adds	r0, #1
 8014dac:	d0e6      	beq.n	8014d7c <_printf_common+0xa4>
 8014dae:	3601      	adds	r6, #1
 8014db0:	e7d9      	b.n	8014d66 <_printf_common+0x8e>
	...

08014db4 <_printf_i>:
 8014db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014db8:	460c      	mov	r4, r1
 8014dba:	4691      	mov	r9, r2
 8014dbc:	7e27      	ldrb	r7, [r4, #24]
 8014dbe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014dc0:	2f78      	cmp	r7, #120	; 0x78
 8014dc2:	4680      	mov	r8, r0
 8014dc4:	469a      	mov	sl, r3
 8014dc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014dca:	d807      	bhi.n	8014ddc <_printf_i+0x28>
 8014dcc:	2f62      	cmp	r7, #98	; 0x62
 8014dce:	d80a      	bhi.n	8014de6 <_printf_i+0x32>
 8014dd0:	2f00      	cmp	r7, #0
 8014dd2:	f000 80d8 	beq.w	8014f86 <_printf_i+0x1d2>
 8014dd6:	2f58      	cmp	r7, #88	; 0x58
 8014dd8:	f000 80a3 	beq.w	8014f22 <_printf_i+0x16e>
 8014ddc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014de0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014de4:	e03a      	b.n	8014e5c <_printf_i+0xa8>
 8014de6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014dea:	2b15      	cmp	r3, #21
 8014dec:	d8f6      	bhi.n	8014ddc <_printf_i+0x28>
 8014dee:	a001      	add	r0, pc, #4	; (adr r0, 8014df4 <_printf_i+0x40>)
 8014df0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014df4:	08014e4d 	.word	0x08014e4d
 8014df8:	08014e61 	.word	0x08014e61
 8014dfc:	08014ddd 	.word	0x08014ddd
 8014e00:	08014ddd 	.word	0x08014ddd
 8014e04:	08014ddd 	.word	0x08014ddd
 8014e08:	08014ddd 	.word	0x08014ddd
 8014e0c:	08014e61 	.word	0x08014e61
 8014e10:	08014ddd 	.word	0x08014ddd
 8014e14:	08014ddd 	.word	0x08014ddd
 8014e18:	08014ddd 	.word	0x08014ddd
 8014e1c:	08014ddd 	.word	0x08014ddd
 8014e20:	08014f6d 	.word	0x08014f6d
 8014e24:	08014e91 	.word	0x08014e91
 8014e28:	08014f4f 	.word	0x08014f4f
 8014e2c:	08014ddd 	.word	0x08014ddd
 8014e30:	08014ddd 	.word	0x08014ddd
 8014e34:	08014f8f 	.word	0x08014f8f
 8014e38:	08014ddd 	.word	0x08014ddd
 8014e3c:	08014e91 	.word	0x08014e91
 8014e40:	08014ddd 	.word	0x08014ddd
 8014e44:	08014ddd 	.word	0x08014ddd
 8014e48:	08014f57 	.word	0x08014f57
 8014e4c:	680b      	ldr	r3, [r1, #0]
 8014e4e:	1d1a      	adds	r2, r3, #4
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	600a      	str	r2, [r1, #0]
 8014e54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014e5c:	2301      	movs	r3, #1
 8014e5e:	e0a3      	b.n	8014fa8 <_printf_i+0x1f4>
 8014e60:	6825      	ldr	r5, [r4, #0]
 8014e62:	6808      	ldr	r0, [r1, #0]
 8014e64:	062e      	lsls	r6, r5, #24
 8014e66:	f100 0304 	add.w	r3, r0, #4
 8014e6a:	d50a      	bpl.n	8014e82 <_printf_i+0xce>
 8014e6c:	6805      	ldr	r5, [r0, #0]
 8014e6e:	600b      	str	r3, [r1, #0]
 8014e70:	2d00      	cmp	r5, #0
 8014e72:	da03      	bge.n	8014e7c <_printf_i+0xc8>
 8014e74:	232d      	movs	r3, #45	; 0x2d
 8014e76:	426d      	negs	r5, r5
 8014e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e7c:	485e      	ldr	r0, [pc, #376]	; (8014ff8 <_printf_i+0x244>)
 8014e7e:	230a      	movs	r3, #10
 8014e80:	e019      	b.n	8014eb6 <_printf_i+0x102>
 8014e82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014e86:	6805      	ldr	r5, [r0, #0]
 8014e88:	600b      	str	r3, [r1, #0]
 8014e8a:	bf18      	it	ne
 8014e8c:	b22d      	sxthne	r5, r5
 8014e8e:	e7ef      	b.n	8014e70 <_printf_i+0xbc>
 8014e90:	680b      	ldr	r3, [r1, #0]
 8014e92:	6825      	ldr	r5, [r4, #0]
 8014e94:	1d18      	adds	r0, r3, #4
 8014e96:	6008      	str	r0, [r1, #0]
 8014e98:	0628      	lsls	r0, r5, #24
 8014e9a:	d501      	bpl.n	8014ea0 <_printf_i+0xec>
 8014e9c:	681d      	ldr	r5, [r3, #0]
 8014e9e:	e002      	b.n	8014ea6 <_printf_i+0xf2>
 8014ea0:	0669      	lsls	r1, r5, #25
 8014ea2:	d5fb      	bpl.n	8014e9c <_printf_i+0xe8>
 8014ea4:	881d      	ldrh	r5, [r3, #0]
 8014ea6:	4854      	ldr	r0, [pc, #336]	; (8014ff8 <_printf_i+0x244>)
 8014ea8:	2f6f      	cmp	r7, #111	; 0x6f
 8014eaa:	bf0c      	ite	eq
 8014eac:	2308      	moveq	r3, #8
 8014eae:	230a      	movne	r3, #10
 8014eb0:	2100      	movs	r1, #0
 8014eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014eb6:	6866      	ldr	r6, [r4, #4]
 8014eb8:	60a6      	str	r6, [r4, #8]
 8014eba:	2e00      	cmp	r6, #0
 8014ebc:	bfa2      	ittt	ge
 8014ebe:	6821      	ldrge	r1, [r4, #0]
 8014ec0:	f021 0104 	bicge.w	r1, r1, #4
 8014ec4:	6021      	strge	r1, [r4, #0]
 8014ec6:	b90d      	cbnz	r5, 8014ecc <_printf_i+0x118>
 8014ec8:	2e00      	cmp	r6, #0
 8014eca:	d04d      	beq.n	8014f68 <_printf_i+0x1b4>
 8014ecc:	4616      	mov	r6, r2
 8014ece:	fbb5 f1f3 	udiv	r1, r5, r3
 8014ed2:	fb03 5711 	mls	r7, r3, r1, r5
 8014ed6:	5dc7      	ldrb	r7, [r0, r7]
 8014ed8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014edc:	462f      	mov	r7, r5
 8014ede:	42bb      	cmp	r3, r7
 8014ee0:	460d      	mov	r5, r1
 8014ee2:	d9f4      	bls.n	8014ece <_printf_i+0x11a>
 8014ee4:	2b08      	cmp	r3, #8
 8014ee6:	d10b      	bne.n	8014f00 <_printf_i+0x14c>
 8014ee8:	6823      	ldr	r3, [r4, #0]
 8014eea:	07df      	lsls	r7, r3, #31
 8014eec:	d508      	bpl.n	8014f00 <_printf_i+0x14c>
 8014eee:	6923      	ldr	r3, [r4, #16]
 8014ef0:	6861      	ldr	r1, [r4, #4]
 8014ef2:	4299      	cmp	r1, r3
 8014ef4:	bfde      	ittt	le
 8014ef6:	2330      	movle	r3, #48	; 0x30
 8014ef8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014efc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014f00:	1b92      	subs	r2, r2, r6
 8014f02:	6122      	str	r2, [r4, #16]
 8014f04:	f8cd a000 	str.w	sl, [sp]
 8014f08:	464b      	mov	r3, r9
 8014f0a:	aa03      	add	r2, sp, #12
 8014f0c:	4621      	mov	r1, r4
 8014f0e:	4640      	mov	r0, r8
 8014f10:	f7ff fee2 	bl	8014cd8 <_printf_common>
 8014f14:	3001      	adds	r0, #1
 8014f16:	d14c      	bne.n	8014fb2 <_printf_i+0x1fe>
 8014f18:	f04f 30ff 	mov.w	r0, #4294967295
 8014f1c:	b004      	add	sp, #16
 8014f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f22:	4835      	ldr	r0, [pc, #212]	; (8014ff8 <_printf_i+0x244>)
 8014f24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014f28:	6823      	ldr	r3, [r4, #0]
 8014f2a:	680e      	ldr	r6, [r1, #0]
 8014f2c:	061f      	lsls	r7, r3, #24
 8014f2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8014f32:	600e      	str	r6, [r1, #0]
 8014f34:	d514      	bpl.n	8014f60 <_printf_i+0x1ac>
 8014f36:	07d9      	lsls	r1, r3, #31
 8014f38:	bf44      	itt	mi
 8014f3a:	f043 0320 	orrmi.w	r3, r3, #32
 8014f3e:	6023      	strmi	r3, [r4, #0]
 8014f40:	b91d      	cbnz	r5, 8014f4a <_printf_i+0x196>
 8014f42:	6823      	ldr	r3, [r4, #0]
 8014f44:	f023 0320 	bic.w	r3, r3, #32
 8014f48:	6023      	str	r3, [r4, #0]
 8014f4a:	2310      	movs	r3, #16
 8014f4c:	e7b0      	b.n	8014eb0 <_printf_i+0xfc>
 8014f4e:	6823      	ldr	r3, [r4, #0]
 8014f50:	f043 0320 	orr.w	r3, r3, #32
 8014f54:	6023      	str	r3, [r4, #0]
 8014f56:	2378      	movs	r3, #120	; 0x78
 8014f58:	4828      	ldr	r0, [pc, #160]	; (8014ffc <_printf_i+0x248>)
 8014f5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014f5e:	e7e3      	b.n	8014f28 <_printf_i+0x174>
 8014f60:	065e      	lsls	r6, r3, #25
 8014f62:	bf48      	it	mi
 8014f64:	b2ad      	uxthmi	r5, r5
 8014f66:	e7e6      	b.n	8014f36 <_printf_i+0x182>
 8014f68:	4616      	mov	r6, r2
 8014f6a:	e7bb      	b.n	8014ee4 <_printf_i+0x130>
 8014f6c:	680b      	ldr	r3, [r1, #0]
 8014f6e:	6826      	ldr	r6, [r4, #0]
 8014f70:	6960      	ldr	r0, [r4, #20]
 8014f72:	1d1d      	adds	r5, r3, #4
 8014f74:	600d      	str	r5, [r1, #0]
 8014f76:	0635      	lsls	r5, r6, #24
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	d501      	bpl.n	8014f80 <_printf_i+0x1cc>
 8014f7c:	6018      	str	r0, [r3, #0]
 8014f7e:	e002      	b.n	8014f86 <_printf_i+0x1d2>
 8014f80:	0671      	lsls	r1, r6, #25
 8014f82:	d5fb      	bpl.n	8014f7c <_printf_i+0x1c8>
 8014f84:	8018      	strh	r0, [r3, #0]
 8014f86:	2300      	movs	r3, #0
 8014f88:	6123      	str	r3, [r4, #16]
 8014f8a:	4616      	mov	r6, r2
 8014f8c:	e7ba      	b.n	8014f04 <_printf_i+0x150>
 8014f8e:	680b      	ldr	r3, [r1, #0]
 8014f90:	1d1a      	adds	r2, r3, #4
 8014f92:	600a      	str	r2, [r1, #0]
 8014f94:	681e      	ldr	r6, [r3, #0]
 8014f96:	6862      	ldr	r2, [r4, #4]
 8014f98:	2100      	movs	r1, #0
 8014f9a:	4630      	mov	r0, r6
 8014f9c:	f7eb f960 	bl	8000260 <memchr>
 8014fa0:	b108      	cbz	r0, 8014fa6 <_printf_i+0x1f2>
 8014fa2:	1b80      	subs	r0, r0, r6
 8014fa4:	6060      	str	r0, [r4, #4]
 8014fa6:	6863      	ldr	r3, [r4, #4]
 8014fa8:	6123      	str	r3, [r4, #16]
 8014faa:	2300      	movs	r3, #0
 8014fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014fb0:	e7a8      	b.n	8014f04 <_printf_i+0x150>
 8014fb2:	6923      	ldr	r3, [r4, #16]
 8014fb4:	4632      	mov	r2, r6
 8014fb6:	4649      	mov	r1, r9
 8014fb8:	4640      	mov	r0, r8
 8014fba:	47d0      	blx	sl
 8014fbc:	3001      	adds	r0, #1
 8014fbe:	d0ab      	beq.n	8014f18 <_printf_i+0x164>
 8014fc0:	6823      	ldr	r3, [r4, #0]
 8014fc2:	079b      	lsls	r3, r3, #30
 8014fc4:	d413      	bmi.n	8014fee <_printf_i+0x23a>
 8014fc6:	68e0      	ldr	r0, [r4, #12]
 8014fc8:	9b03      	ldr	r3, [sp, #12]
 8014fca:	4298      	cmp	r0, r3
 8014fcc:	bfb8      	it	lt
 8014fce:	4618      	movlt	r0, r3
 8014fd0:	e7a4      	b.n	8014f1c <_printf_i+0x168>
 8014fd2:	2301      	movs	r3, #1
 8014fd4:	4632      	mov	r2, r6
 8014fd6:	4649      	mov	r1, r9
 8014fd8:	4640      	mov	r0, r8
 8014fda:	47d0      	blx	sl
 8014fdc:	3001      	adds	r0, #1
 8014fde:	d09b      	beq.n	8014f18 <_printf_i+0x164>
 8014fe0:	3501      	adds	r5, #1
 8014fe2:	68e3      	ldr	r3, [r4, #12]
 8014fe4:	9903      	ldr	r1, [sp, #12]
 8014fe6:	1a5b      	subs	r3, r3, r1
 8014fe8:	42ab      	cmp	r3, r5
 8014fea:	dcf2      	bgt.n	8014fd2 <_printf_i+0x21e>
 8014fec:	e7eb      	b.n	8014fc6 <_printf_i+0x212>
 8014fee:	2500      	movs	r5, #0
 8014ff0:	f104 0619 	add.w	r6, r4, #25
 8014ff4:	e7f5      	b.n	8014fe2 <_printf_i+0x22e>
 8014ff6:	bf00      	nop
 8014ff8:	080192a8 	.word	0x080192a8
 8014ffc:	080192b9 	.word	0x080192b9

08015000 <_putc_r>:
 8015000:	b570      	push	{r4, r5, r6, lr}
 8015002:	460d      	mov	r5, r1
 8015004:	4614      	mov	r4, r2
 8015006:	4606      	mov	r6, r0
 8015008:	b118      	cbz	r0, 8015012 <_putc_r+0x12>
 801500a:	6983      	ldr	r3, [r0, #24]
 801500c:	b90b      	cbnz	r3, 8015012 <_putc_r+0x12>
 801500e:	f7fd f9db 	bl	80123c8 <__sinit>
 8015012:	4b1c      	ldr	r3, [pc, #112]	; (8015084 <_putc_r+0x84>)
 8015014:	429c      	cmp	r4, r3
 8015016:	d124      	bne.n	8015062 <_putc_r+0x62>
 8015018:	6874      	ldr	r4, [r6, #4]
 801501a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801501c:	07d8      	lsls	r0, r3, #31
 801501e:	d405      	bmi.n	801502c <_putc_r+0x2c>
 8015020:	89a3      	ldrh	r3, [r4, #12]
 8015022:	0599      	lsls	r1, r3, #22
 8015024:	d402      	bmi.n	801502c <_putc_r+0x2c>
 8015026:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015028:	f7fd fd81 	bl	8012b2e <__retarget_lock_acquire_recursive>
 801502c:	68a3      	ldr	r3, [r4, #8]
 801502e:	3b01      	subs	r3, #1
 8015030:	2b00      	cmp	r3, #0
 8015032:	60a3      	str	r3, [r4, #8]
 8015034:	da05      	bge.n	8015042 <_putc_r+0x42>
 8015036:	69a2      	ldr	r2, [r4, #24]
 8015038:	4293      	cmp	r3, r2
 801503a:	db1c      	blt.n	8015076 <_putc_r+0x76>
 801503c:	b2eb      	uxtb	r3, r5
 801503e:	2b0a      	cmp	r3, #10
 8015040:	d019      	beq.n	8015076 <_putc_r+0x76>
 8015042:	6823      	ldr	r3, [r4, #0]
 8015044:	1c5a      	adds	r2, r3, #1
 8015046:	6022      	str	r2, [r4, #0]
 8015048:	701d      	strb	r5, [r3, #0]
 801504a:	b2ed      	uxtb	r5, r5
 801504c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801504e:	07da      	lsls	r2, r3, #31
 8015050:	d405      	bmi.n	801505e <_putc_r+0x5e>
 8015052:	89a3      	ldrh	r3, [r4, #12]
 8015054:	059b      	lsls	r3, r3, #22
 8015056:	d402      	bmi.n	801505e <_putc_r+0x5e>
 8015058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801505a:	f7fd fd6a 	bl	8012b32 <__retarget_lock_release_recursive>
 801505e:	4628      	mov	r0, r5
 8015060:	bd70      	pop	{r4, r5, r6, pc}
 8015062:	4b09      	ldr	r3, [pc, #36]	; (8015088 <_putc_r+0x88>)
 8015064:	429c      	cmp	r4, r3
 8015066:	d101      	bne.n	801506c <_putc_r+0x6c>
 8015068:	68b4      	ldr	r4, [r6, #8]
 801506a:	e7d6      	b.n	801501a <_putc_r+0x1a>
 801506c:	4b07      	ldr	r3, [pc, #28]	; (801508c <_putc_r+0x8c>)
 801506e:	429c      	cmp	r4, r3
 8015070:	bf08      	it	eq
 8015072:	68f4      	ldreq	r4, [r6, #12]
 8015074:	e7d1      	b.n	801501a <_putc_r+0x1a>
 8015076:	4629      	mov	r1, r5
 8015078:	4622      	mov	r2, r4
 801507a:	4630      	mov	r0, r6
 801507c:	f7ff f844 	bl	8014108 <__swbuf_r>
 8015080:	4605      	mov	r5, r0
 8015082:	e7e3      	b.n	801504c <_putc_r+0x4c>
 8015084:	08018d18 	.word	0x08018d18
 8015088:	08018d38 	.word	0x08018d38
 801508c:	08018cf8 	.word	0x08018cf8

08015090 <_read_r>:
 8015090:	b538      	push	{r3, r4, r5, lr}
 8015092:	4d07      	ldr	r5, [pc, #28]	; (80150b0 <_read_r+0x20>)
 8015094:	4604      	mov	r4, r0
 8015096:	4608      	mov	r0, r1
 8015098:	4611      	mov	r1, r2
 801509a:	2200      	movs	r2, #0
 801509c:	602a      	str	r2, [r5, #0]
 801509e:	461a      	mov	r2, r3
 80150a0:	f7eb fe79 	bl	8000d96 <_read>
 80150a4:	1c43      	adds	r3, r0, #1
 80150a6:	d102      	bne.n	80150ae <_read_r+0x1e>
 80150a8:	682b      	ldr	r3, [r5, #0]
 80150aa:	b103      	cbz	r3, 80150ae <_read_r+0x1e>
 80150ac:	6023      	str	r3, [r4, #0]
 80150ae:	bd38      	pop	{r3, r4, r5, pc}
 80150b0:	20000c64 	.word	0x20000c64

080150b4 <sniprintf>:
 80150b4:	b40c      	push	{r2, r3}
 80150b6:	b530      	push	{r4, r5, lr}
 80150b8:	4b17      	ldr	r3, [pc, #92]	; (8015118 <sniprintf+0x64>)
 80150ba:	1e0c      	subs	r4, r1, #0
 80150bc:	681d      	ldr	r5, [r3, #0]
 80150be:	b09d      	sub	sp, #116	; 0x74
 80150c0:	da08      	bge.n	80150d4 <sniprintf+0x20>
 80150c2:	238b      	movs	r3, #139	; 0x8b
 80150c4:	602b      	str	r3, [r5, #0]
 80150c6:	f04f 30ff 	mov.w	r0, #4294967295
 80150ca:	b01d      	add	sp, #116	; 0x74
 80150cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80150d0:	b002      	add	sp, #8
 80150d2:	4770      	bx	lr
 80150d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80150d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80150dc:	bf14      	ite	ne
 80150de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80150e2:	4623      	moveq	r3, r4
 80150e4:	9304      	str	r3, [sp, #16]
 80150e6:	9307      	str	r3, [sp, #28]
 80150e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150ec:	9002      	str	r0, [sp, #8]
 80150ee:	9006      	str	r0, [sp, #24]
 80150f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80150f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80150f6:	ab21      	add	r3, sp, #132	; 0x84
 80150f8:	a902      	add	r1, sp, #8
 80150fa:	4628      	mov	r0, r5
 80150fc:	9301      	str	r3, [sp, #4]
 80150fe:	f7ff fb91 	bl	8014824 <_svfiprintf_r>
 8015102:	1c43      	adds	r3, r0, #1
 8015104:	bfbc      	itt	lt
 8015106:	238b      	movlt	r3, #139	; 0x8b
 8015108:	602b      	strlt	r3, [r5, #0]
 801510a:	2c00      	cmp	r4, #0
 801510c:	d0dd      	beq.n	80150ca <sniprintf+0x16>
 801510e:	9b02      	ldr	r3, [sp, #8]
 8015110:	2200      	movs	r2, #0
 8015112:	701a      	strb	r2, [r3, #0]
 8015114:	e7d9      	b.n	80150ca <sniprintf+0x16>
 8015116:	bf00      	nop
 8015118:	20000100 	.word	0x20000100

0801511c <siscanf>:
 801511c:	b40e      	push	{r1, r2, r3}
 801511e:	b510      	push	{r4, lr}
 8015120:	b09f      	sub	sp, #124	; 0x7c
 8015122:	ac21      	add	r4, sp, #132	; 0x84
 8015124:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015128:	f854 2b04 	ldr.w	r2, [r4], #4
 801512c:	9201      	str	r2, [sp, #4]
 801512e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015132:	9004      	str	r0, [sp, #16]
 8015134:	9008      	str	r0, [sp, #32]
 8015136:	f7eb f881 	bl	800023c <strlen>
 801513a:	4b0c      	ldr	r3, [pc, #48]	; (801516c <siscanf+0x50>)
 801513c:	9005      	str	r0, [sp, #20]
 801513e:	9009      	str	r0, [sp, #36]	; 0x24
 8015140:	930d      	str	r3, [sp, #52]	; 0x34
 8015142:	480b      	ldr	r0, [pc, #44]	; (8015170 <siscanf+0x54>)
 8015144:	9a01      	ldr	r2, [sp, #4]
 8015146:	6800      	ldr	r0, [r0, #0]
 8015148:	9403      	str	r4, [sp, #12]
 801514a:	2300      	movs	r3, #0
 801514c:	9311      	str	r3, [sp, #68]	; 0x44
 801514e:	9316      	str	r3, [sp, #88]	; 0x58
 8015150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015154:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015158:	a904      	add	r1, sp, #16
 801515a:	4623      	mov	r3, r4
 801515c:	f000 f8ba 	bl	80152d4 <__ssvfiscanf_r>
 8015160:	b01f      	add	sp, #124	; 0x7c
 8015162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015166:	b003      	add	sp, #12
 8015168:	4770      	bx	lr
 801516a:	bf00      	nop
 801516c:	08012fc3 	.word	0x08012fc3
 8015170:	20000100 	.word	0x20000100

08015174 <strcpy>:
 8015174:	4603      	mov	r3, r0
 8015176:	f811 2b01 	ldrb.w	r2, [r1], #1
 801517a:	f803 2b01 	strb.w	r2, [r3], #1
 801517e:	2a00      	cmp	r2, #0
 8015180:	d1f9      	bne.n	8015176 <strcpy+0x2>
 8015182:	4770      	bx	lr

08015184 <strncmp>:
 8015184:	b510      	push	{r4, lr}
 8015186:	b16a      	cbz	r2, 80151a4 <strncmp+0x20>
 8015188:	3901      	subs	r1, #1
 801518a:	1884      	adds	r4, r0, r2
 801518c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015190:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015194:	4293      	cmp	r3, r2
 8015196:	d103      	bne.n	80151a0 <strncmp+0x1c>
 8015198:	42a0      	cmp	r0, r4
 801519a:	d001      	beq.n	80151a0 <strncmp+0x1c>
 801519c:	2b00      	cmp	r3, #0
 801519e:	d1f5      	bne.n	801518c <strncmp+0x8>
 80151a0:	1a98      	subs	r0, r3, r2
 80151a2:	bd10      	pop	{r4, pc}
 80151a4:	4610      	mov	r0, r2
 80151a6:	e7fc      	b.n	80151a2 <strncmp+0x1e>

080151a8 <__ascii_wctomb>:
 80151a8:	b149      	cbz	r1, 80151be <__ascii_wctomb+0x16>
 80151aa:	2aff      	cmp	r2, #255	; 0xff
 80151ac:	bf85      	ittet	hi
 80151ae:	238a      	movhi	r3, #138	; 0x8a
 80151b0:	6003      	strhi	r3, [r0, #0]
 80151b2:	700a      	strbls	r2, [r1, #0]
 80151b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80151b8:	bf98      	it	ls
 80151ba:	2001      	movls	r0, #1
 80151bc:	4770      	bx	lr
 80151be:	4608      	mov	r0, r1
 80151c0:	4770      	bx	lr
	...

080151c4 <__env_lock>:
 80151c4:	4801      	ldr	r0, [pc, #4]	; (80151cc <__env_lock+0x8>)
 80151c6:	f7fd bcb2 	b.w	8012b2e <__retarget_lock_acquire_recursive>
 80151ca:	bf00      	nop
 80151cc:	20000c5a 	.word	0x20000c5a

080151d0 <__env_unlock>:
 80151d0:	4801      	ldr	r0, [pc, #4]	; (80151d8 <__env_unlock+0x8>)
 80151d2:	f7fd bcae 	b.w	8012b32 <__retarget_lock_release_recursive>
 80151d6:	bf00      	nop
 80151d8:	20000c5a 	.word	0x20000c5a

080151dc <memmove>:
 80151dc:	4288      	cmp	r0, r1
 80151de:	b510      	push	{r4, lr}
 80151e0:	eb01 0402 	add.w	r4, r1, r2
 80151e4:	d902      	bls.n	80151ec <memmove+0x10>
 80151e6:	4284      	cmp	r4, r0
 80151e8:	4623      	mov	r3, r4
 80151ea:	d807      	bhi.n	80151fc <memmove+0x20>
 80151ec:	1e43      	subs	r3, r0, #1
 80151ee:	42a1      	cmp	r1, r4
 80151f0:	d008      	beq.n	8015204 <memmove+0x28>
 80151f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80151f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80151fa:	e7f8      	b.n	80151ee <memmove+0x12>
 80151fc:	4402      	add	r2, r0
 80151fe:	4601      	mov	r1, r0
 8015200:	428a      	cmp	r2, r1
 8015202:	d100      	bne.n	8015206 <memmove+0x2a>
 8015204:	bd10      	pop	{r4, pc}
 8015206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801520a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801520e:	e7f7      	b.n	8015200 <memmove+0x24>

08015210 <_malloc_usable_size_r>:
 8015210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015214:	1f18      	subs	r0, r3, #4
 8015216:	2b00      	cmp	r3, #0
 8015218:	bfbc      	itt	lt
 801521a:	580b      	ldrlt	r3, [r1, r0]
 801521c:	18c0      	addlt	r0, r0, r3
 801521e:	4770      	bx	lr

08015220 <_sungetc_r>:
 8015220:	b538      	push	{r3, r4, r5, lr}
 8015222:	1c4b      	adds	r3, r1, #1
 8015224:	4614      	mov	r4, r2
 8015226:	d103      	bne.n	8015230 <_sungetc_r+0x10>
 8015228:	f04f 35ff 	mov.w	r5, #4294967295
 801522c:	4628      	mov	r0, r5
 801522e:	bd38      	pop	{r3, r4, r5, pc}
 8015230:	8993      	ldrh	r3, [r2, #12]
 8015232:	f023 0320 	bic.w	r3, r3, #32
 8015236:	8193      	strh	r3, [r2, #12]
 8015238:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801523a:	6852      	ldr	r2, [r2, #4]
 801523c:	b2cd      	uxtb	r5, r1
 801523e:	b18b      	cbz	r3, 8015264 <_sungetc_r+0x44>
 8015240:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015242:	4293      	cmp	r3, r2
 8015244:	dd08      	ble.n	8015258 <_sungetc_r+0x38>
 8015246:	6823      	ldr	r3, [r4, #0]
 8015248:	1e5a      	subs	r2, r3, #1
 801524a:	6022      	str	r2, [r4, #0]
 801524c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015250:	6863      	ldr	r3, [r4, #4]
 8015252:	3301      	adds	r3, #1
 8015254:	6063      	str	r3, [r4, #4]
 8015256:	e7e9      	b.n	801522c <_sungetc_r+0xc>
 8015258:	4621      	mov	r1, r4
 801525a:	f000 fbbf 	bl	80159dc <__submore>
 801525e:	2800      	cmp	r0, #0
 8015260:	d0f1      	beq.n	8015246 <_sungetc_r+0x26>
 8015262:	e7e1      	b.n	8015228 <_sungetc_r+0x8>
 8015264:	6921      	ldr	r1, [r4, #16]
 8015266:	6823      	ldr	r3, [r4, #0]
 8015268:	b151      	cbz	r1, 8015280 <_sungetc_r+0x60>
 801526a:	4299      	cmp	r1, r3
 801526c:	d208      	bcs.n	8015280 <_sungetc_r+0x60>
 801526e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015272:	42a9      	cmp	r1, r5
 8015274:	d104      	bne.n	8015280 <_sungetc_r+0x60>
 8015276:	3b01      	subs	r3, #1
 8015278:	3201      	adds	r2, #1
 801527a:	6023      	str	r3, [r4, #0]
 801527c:	6062      	str	r2, [r4, #4]
 801527e:	e7d5      	b.n	801522c <_sungetc_r+0xc>
 8015280:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8015284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015288:	6363      	str	r3, [r4, #52]	; 0x34
 801528a:	2303      	movs	r3, #3
 801528c:	63a3      	str	r3, [r4, #56]	; 0x38
 801528e:	4623      	mov	r3, r4
 8015290:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015294:	6023      	str	r3, [r4, #0]
 8015296:	2301      	movs	r3, #1
 8015298:	e7dc      	b.n	8015254 <_sungetc_r+0x34>

0801529a <__ssrefill_r>:
 801529a:	b510      	push	{r4, lr}
 801529c:	460c      	mov	r4, r1
 801529e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80152a0:	b169      	cbz	r1, 80152be <__ssrefill_r+0x24>
 80152a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80152a6:	4299      	cmp	r1, r3
 80152a8:	d001      	beq.n	80152ae <__ssrefill_r+0x14>
 80152aa:	f7fd fcdd 	bl	8012c68 <_free_r>
 80152ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80152b0:	6063      	str	r3, [r4, #4]
 80152b2:	2000      	movs	r0, #0
 80152b4:	6360      	str	r0, [r4, #52]	; 0x34
 80152b6:	b113      	cbz	r3, 80152be <__ssrefill_r+0x24>
 80152b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80152ba:	6023      	str	r3, [r4, #0]
 80152bc:	bd10      	pop	{r4, pc}
 80152be:	6923      	ldr	r3, [r4, #16]
 80152c0:	6023      	str	r3, [r4, #0]
 80152c2:	2300      	movs	r3, #0
 80152c4:	6063      	str	r3, [r4, #4]
 80152c6:	89a3      	ldrh	r3, [r4, #12]
 80152c8:	f043 0320 	orr.w	r3, r3, #32
 80152cc:	81a3      	strh	r3, [r4, #12]
 80152ce:	f04f 30ff 	mov.w	r0, #4294967295
 80152d2:	e7f3      	b.n	80152bc <__ssrefill_r+0x22>

080152d4 <__ssvfiscanf_r>:
 80152d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d8:	460c      	mov	r4, r1
 80152da:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80152de:	2100      	movs	r1, #0
 80152e0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80152e4:	49b2      	ldr	r1, [pc, #712]	; (80155b0 <__ssvfiscanf_r+0x2dc>)
 80152e6:	91a0      	str	r1, [sp, #640]	; 0x280
 80152e8:	f10d 0804 	add.w	r8, sp, #4
 80152ec:	49b1      	ldr	r1, [pc, #708]	; (80155b4 <__ssvfiscanf_r+0x2e0>)
 80152ee:	4fb2      	ldr	r7, [pc, #712]	; (80155b8 <__ssvfiscanf_r+0x2e4>)
 80152f0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80155bc <__ssvfiscanf_r+0x2e8>
 80152f4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80152f8:	4606      	mov	r6, r0
 80152fa:	91a1      	str	r1, [sp, #644]	; 0x284
 80152fc:	9300      	str	r3, [sp, #0]
 80152fe:	f892 a000 	ldrb.w	sl, [r2]
 8015302:	f1ba 0f00 	cmp.w	sl, #0
 8015306:	f000 8151 	beq.w	80155ac <__ssvfiscanf_r+0x2d8>
 801530a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801530e:	f013 0308 	ands.w	r3, r3, #8
 8015312:	f102 0501 	add.w	r5, r2, #1
 8015316:	d019      	beq.n	801534c <__ssvfiscanf_r+0x78>
 8015318:	6863      	ldr	r3, [r4, #4]
 801531a:	2b00      	cmp	r3, #0
 801531c:	dd0f      	ble.n	801533e <__ssvfiscanf_r+0x6a>
 801531e:	6823      	ldr	r3, [r4, #0]
 8015320:	781a      	ldrb	r2, [r3, #0]
 8015322:	5cba      	ldrb	r2, [r7, r2]
 8015324:	0712      	lsls	r2, r2, #28
 8015326:	d401      	bmi.n	801532c <__ssvfiscanf_r+0x58>
 8015328:	462a      	mov	r2, r5
 801532a:	e7e8      	b.n	80152fe <__ssvfiscanf_r+0x2a>
 801532c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801532e:	3201      	adds	r2, #1
 8015330:	9245      	str	r2, [sp, #276]	; 0x114
 8015332:	6862      	ldr	r2, [r4, #4]
 8015334:	3301      	adds	r3, #1
 8015336:	3a01      	subs	r2, #1
 8015338:	6062      	str	r2, [r4, #4]
 801533a:	6023      	str	r3, [r4, #0]
 801533c:	e7ec      	b.n	8015318 <__ssvfiscanf_r+0x44>
 801533e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015340:	4621      	mov	r1, r4
 8015342:	4630      	mov	r0, r6
 8015344:	4798      	blx	r3
 8015346:	2800      	cmp	r0, #0
 8015348:	d0e9      	beq.n	801531e <__ssvfiscanf_r+0x4a>
 801534a:	e7ed      	b.n	8015328 <__ssvfiscanf_r+0x54>
 801534c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8015350:	f040 8083 	bne.w	801545a <__ssvfiscanf_r+0x186>
 8015354:	9341      	str	r3, [sp, #260]	; 0x104
 8015356:	9343      	str	r3, [sp, #268]	; 0x10c
 8015358:	7853      	ldrb	r3, [r2, #1]
 801535a:	2b2a      	cmp	r3, #42	; 0x2a
 801535c:	bf02      	ittt	eq
 801535e:	2310      	moveq	r3, #16
 8015360:	1c95      	addeq	r5, r2, #2
 8015362:	9341      	streq	r3, [sp, #260]	; 0x104
 8015364:	220a      	movs	r2, #10
 8015366:	46ab      	mov	fp, r5
 8015368:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801536c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8015370:	2b09      	cmp	r3, #9
 8015372:	d91d      	bls.n	80153b0 <__ssvfiscanf_r+0xdc>
 8015374:	4891      	ldr	r0, [pc, #580]	; (80155bc <__ssvfiscanf_r+0x2e8>)
 8015376:	2203      	movs	r2, #3
 8015378:	f7ea ff72 	bl	8000260 <memchr>
 801537c:	b140      	cbz	r0, 8015390 <__ssvfiscanf_r+0xbc>
 801537e:	2301      	movs	r3, #1
 8015380:	eba0 0009 	sub.w	r0, r0, r9
 8015384:	fa03 f000 	lsl.w	r0, r3, r0
 8015388:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801538a:	4318      	orrs	r0, r3
 801538c:	9041      	str	r0, [sp, #260]	; 0x104
 801538e:	465d      	mov	r5, fp
 8015390:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015394:	2b78      	cmp	r3, #120	; 0x78
 8015396:	d806      	bhi.n	80153a6 <__ssvfiscanf_r+0xd2>
 8015398:	2b57      	cmp	r3, #87	; 0x57
 801539a:	d810      	bhi.n	80153be <__ssvfiscanf_r+0xea>
 801539c:	2b25      	cmp	r3, #37	; 0x25
 801539e:	d05c      	beq.n	801545a <__ssvfiscanf_r+0x186>
 80153a0:	d856      	bhi.n	8015450 <__ssvfiscanf_r+0x17c>
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d074      	beq.n	8015490 <__ssvfiscanf_r+0x1bc>
 80153a6:	2303      	movs	r3, #3
 80153a8:	9347      	str	r3, [sp, #284]	; 0x11c
 80153aa:	230a      	movs	r3, #10
 80153ac:	9342      	str	r3, [sp, #264]	; 0x108
 80153ae:	e081      	b.n	80154b4 <__ssvfiscanf_r+0x1e0>
 80153b0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80153b2:	fb02 1303 	mla	r3, r2, r3, r1
 80153b6:	3b30      	subs	r3, #48	; 0x30
 80153b8:	9343      	str	r3, [sp, #268]	; 0x10c
 80153ba:	465d      	mov	r5, fp
 80153bc:	e7d3      	b.n	8015366 <__ssvfiscanf_r+0x92>
 80153be:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80153c2:	2a20      	cmp	r2, #32
 80153c4:	d8ef      	bhi.n	80153a6 <__ssvfiscanf_r+0xd2>
 80153c6:	a101      	add	r1, pc, #4	; (adr r1, 80153cc <__ssvfiscanf_r+0xf8>)
 80153c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80153cc:	0801549f 	.word	0x0801549f
 80153d0:	080153a7 	.word	0x080153a7
 80153d4:	080153a7 	.word	0x080153a7
 80153d8:	080154fd 	.word	0x080154fd
 80153dc:	080153a7 	.word	0x080153a7
 80153e0:	080153a7 	.word	0x080153a7
 80153e4:	080153a7 	.word	0x080153a7
 80153e8:	080153a7 	.word	0x080153a7
 80153ec:	080153a7 	.word	0x080153a7
 80153f0:	080153a7 	.word	0x080153a7
 80153f4:	080153a7 	.word	0x080153a7
 80153f8:	08015513 	.word	0x08015513
 80153fc:	080154e9 	.word	0x080154e9
 8015400:	08015457 	.word	0x08015457
 8015404:	08015457 	.word	0x08015457
 8015408:	08015457 	.word	0x08015457
 801540c:	080153a7 	.word	0x080153a7
 8015410:	080154ed 	.word	0x080154ed
 8015414:	080153a7 	.word	0x080153a7
 8015418:	080153a7 	.word	0x080153a7
 801541c:	080153a7 	.word	0x080153a7
 8015420:	080153a7 	.word	0x080153a7
 8015424:	08015523 	.word	0x08015523
 8015428:	080154f5 	.word	0x080154f5
 801542c:	08015497 	.word	0x08015497
 8015430:	080153a7 	.word	0x080153a7
 8015434:	080153a7 	.word	0x080153a7
 8015438:	0801551f 	.word	0x0801551f
 801543c:	080153a7 	.word	0x080153a7
 8015440:	080154e9 	.word	0x080154e9
 8015444:	080153a7 	.word	0x080153a7
 8015448:	080153a7 	.word	0x080153a7
 801544c:	0801549f 	.word	0x0801549f
 8015450:	3b45      	subs	r3, #69	; 0x45
 8015452:	2b02      	cmp	r3, #2
 8015454:	d8a7      	bhi.n	80153a6 <__ssvfiscanf_r+0xd2>
 8015456:	2305      	movs	r3, #5
 8015458:	e02b      	b.n	80154b2 <__ssvfiscanf_r+0x1de>
 801545a:	6863      	ldr	r3, [r4, #4]
 801545c:	2b00      	cmp	r3, #0
 801545e:	dd0d      	ble.n	801547c <__ssvfiscanf_r+0x1a8>
 8015460:	6823      	ldr	r3, [r4, #0]
 8015462:	781a      	ldrb	r2, [r3, #0]
 8015464:	4552      	cmp	r2, sl
 8015466:	f040 80a1 	bne.w	80155ac <__ssvfiscanf_r+0x2d8>
 801546a:	3301      	adds	r3, #1
 801546c:	6862      	ldr	r2, [r4, #4]
 801546e:	6023      	str	r3, [r4, #0]
 8015470:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8015472:	3a01      	subs	r2, #1
 8015474:	3301      	adds	r3, #1
 8015476:	6062      	str	r2, [r4, #4]
 8015478:	9345      	str	r3, [sp, #276]	; 0x114
 801547a:	e755      	b.n	8015328 <__ssvfiscanf_r+0x54>
 801547c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801547e:	4621      	mov	r1, r4
 8015480:	4630      	mov	r0, r6
 8015482:	4798      	blx	r3
 8015484:	2800      	cmp	r0, #0
 8015486:	d0eb      	beq.n	8015460 <__ssvfiscanf_r+0x18c>
 8015488:	9844      	ldr	r0, [sp, #272]	; 0x110
 801548a:	2800      	cmp	r0, #0
 801548c:	f040 8084 	bne.w	8015598 <__ssvfiscanf_r+0x2c4>
 8015490:	f04f 30ff 	mov.w	r0, #4294967295
 8015494:	e086      	b.n	80155a4 <__ssvfiscanf_r+0x2d0>
 8015496:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015498:	f042 0220 	orr.w	r2, r2, #32
 801549c:	9241      	str	r2, [sp, #260]	; 0x104
 801549e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80154a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80154a4:	9241      	str	r2, [sp, #260]	; 0x104
 80154a6:	2210      	movs	r2, #16
 80154a8:	2b6f      	cmp	r3, #111	; 0x6f
 80154aa:	9242      	str	r2, [sp, #264]	; 0x108
 80154ac:	bf34      	ite	cc
 80154ae:	2303      	movcc	r3, #3
 80154b0:	2304      	movcs	r3, #4
 80154b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80154b4:	6863      	ldr	r3, [r4, #4]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	dd41      	ble.n	801553e <__ssvfiscanf_r+0x26a>
 80154ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80154bc:	0659      	lsls	r1, r3, #25
 80154be:	d404      	bmi.n	80154ca <__ssvfiscanf_r+0x1f6>
 80154c0:	6823      	ldr	r3, [r4, #0]
 80154c2:	781a      	ldrb	r2, [r3, #0]
 80154c4:	5cba      	ldrb	r2, [r7, r2]
 80154c6:	0712      	lsls	r2, r2, #28
 80154c8:	d440      	bmi.n	801554c <__ssvfiscanf_r+0x278>
 80154ca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80154cc:	2b02      	cmp	r3, #2
 80154ce:	dc4f      	bgt.n	8015570 <__ssvfiscanf_r+0x29c>
 80154d0:	466b      	mov	r3, sp
 80154d2:	4622      	mov	r2, r4
 80154d4:	a941      	add	r1, sp, #260	; 0x104
 80154d6:	4630      	mov	r0, r6
 80154d8:	f000 f874 	bl	80155c4 <_scanf_chars>
 80154dc:	2801      	cmp	r0, #1
 80154de:	d065      	beq.n	80155ac <__ssvfiscanf_r+0x2d8>
 80154e0:	2802      	cmp	r0, #2
 80154e2:	f47f af21 	bne.w	8015328 <__ssvfiscanf_r+0x54>
 80154e6:	e7cf      	b.n	8015488 <__ssvfiscanf_r+0x1b4>
 80154e8:	220a      	movs	r2, #10
 80154ea:	e7dd      	b.n	80154a8 <__ssvfiscanf_r+0x1d4>
 80154ec:	2300      	movs	r3, #0
 80154ee:	9342      	str	r3, [sp, #264]	; 0x108
 80154f0:	2303      	movs	r3, #3
 80154f2:	e7de      	b.n	80154b2 <__ssvfiscanf_r+0x1de>
 80154f4:	2308      	movs	r3, #8
 80154f6:	9342      	str	r3, [sp, #264]	; 0x108
 80154f8:	2304      	movs	r3, #4
 80154fa:	e7da      	b.n	80154b2 <__ssvfiscanf_r+0x1de>
 80154fc:	4629      	mov	r1, r5
 80154fe:	4640      	mov	r0, r8
 8015500:	f000 f9ac 	bl	801585c <__sccl>
 8015504:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801550a:	9341      	str	r3, [sp, #260]	; 0x104
 801550c:	4605      	mov	r5, r0
 801550e:	2301      	movs	r3, #1
 8015510:	e7cf      	b.n	80154b2 <__ssvfiscanf_r+0x1de>
 8015512:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015518:	9341      	str	r3, [sp, #260]	; 0x104
 801551a:	2300      	movs	r3, #0
 801551c:	e7c9      	b.n	80154b2 <__ssvfiscanf_r+0x1de>
 801551e:	2302      	movs	r3, #2
 8015520:	e7c7      	b.n	80154b2 <__ssvfiscanf_r+0x1de>
 8015522:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015524:	06c3      	lsls	r3, r0, #27
 8015526:	f53f aeff 	bmi.w	8015328 <__ssvfiscanf_r+0x54>
 801552a:	9b00      	ldr	r3, [sp, #0]
 801552c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801552e:	1d19      	adds	r1, r3, #4
 8015530:	9100      	str	r1, [sp, #0]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	07c0      	lsls	r0, r0, #31
 8015536:	bf4c      	ite	mi
 8015538:	801a      	strhmi	r2, [r3, #0]
 801553a:	601a      	strpl	r2, [r3, #0]
 801553c:	e6f4      	b.n	8015328 <__ssvfiscanf_r+0x54>
 801553e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015540:	4621      	mov	r1, r4
 8015542:	4630      	mov	r0, r6
 8015544:	4798      	blx	r3
 8015546:	2800      	cmp	r0, #0
 8015548:	d0b7      	beq.n	80154ba <__ssvfiscanf_r+0x1e6>
 801554a:	e79d      	b.n	8015488 <__ssvfiscanf_r+0x1b4>
 801554c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801554e:	3201      	adds	r2, #1
 8015550:	9245      	str	r2, [sp, #276]	; 0x114
 8015552:	6862      	ldr	r2, [r4, #4]
 8015554:	3a01      	subs	r2, #1
 8015556:	2a00      	cmp	r2, #0
 8015558:	6062      	str	r2, [r4, #4]
 801555a:	dd02      	ble.n	8015562 <__ssvfiscanf_r+0x28e>
 801555c:	3301      	adds	r3, #1
 801555e:	6023      	str	r3, [r4, #0]
 8015560:	e7ae      	b.n	80154c0 <__ssvfiscanf_r+0x1ec>
 8015562:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015564:	4621      	mov	r1, r4
 8015566:	4630      	mov	r0, r6
 8015568:	4798      	blx	r3
 801556a:	2800      	cmp	r0, #0
 801556c:	d0a8      	beq.n	80154c0 <__ssvfiscanf_r+0x1ec>
 801556e:	e78b      	b.n	8015488 <__ssvfiscanf_r+0x1b4>
 8015570:	2b04      	cmp	r3, #4
 8015572:	dc06      	bgt.n	8015582 <__ssvfiscanf_r+0x2ae>
 8015574:	466b      	mov	r3, sp
 8015576:	4622      	mov	r2, r4
 8015578:	a941      	add	r1, sp, #260	; 0x104
 801557a:	4630      	mov	r0, r6
 801557c:	f000 f87a 	bl	8015674 <_scanf_i>
 8015580:	e7ac      	b.n	80154dc <__ssvfiscanf_r+0x208>
 8015582:	4b0f      	ldr	r3, [pc, #60]	; (80155c0 <__ssvfiscanf_r+0x2ec>)
 8015584:	2b00      	cmp	r3, #0
 8015586:	f43f aecf 	beq.w	8015328 <__ssvfiscanf_r+0x54>
 801558a:	466b      	mov	r3, sp
 801558c:	4622      	mov	r2, r4
 801558e:	a941      	add	r1, sp, #260	; 0x104
 8015590:	4630      	mov	r0, r6
 8015592:	f3af 8000 	nop.w
 8015596:	e7a1      	b.n	80154dc <__ssvfiscanf_r+0x208>
 8015598:	89a3      	ldrh	r3, [r4, #12]
 801559a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801559e:	bf18      	it	ne
 80155a0:	f04f 30ff 	movne.w	r0, #4294967295
 80155a4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80155a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 80155ae:	e7f9      	b.n	80155a4 <__ssvfiscanf_r+0x2d0>
 80155b0:	08015221 	.word	0x08015221
 80155b4:	0801529b 	.word	0x0801529b
 80155b8:	0801918d 	.word	0x0801918d
 80155bc:	0801929d 	.word	0x0801929d
 80155c0:	00000000 	.word	0x00000000

080155c4 <_scanf_chars>:
 80155c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155c8:	4615      	mov	r5, r2
 80155ca:	688a      	ldr	r2, [r1, #8]
 80155cc:	4680      	mov	r8, r0
 80155ce:	460c      	mov	r4, r1
 80155d0:	b932      	cbnz	r2, 80155e0 <_scanf_chars+0x1c>
 80155d2:	698a      	ldr	r2, [r1, #24]
 80155d4:	2a00      	cmp	r2, #0
 80155d6:	bf0c      	ite	eq
 80155d8:	2201      	moveq	r2, #1
 80155da:	f04f 32ff 	movne.w	r2, #4294967295
 80155de:	608a      	str	r2, [r1, #8]
 80155e0:	6822      	ldr	r2, [r4, #0]
 80155e2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8015670 <_scanf_chars+0xac>
 80155e6:	06d1      	lsls	r1, r2, #27
 80155e8:	bf5f      	itttt	pl
 80155ea:	681a      	ldrpl	r2, [r3, #0]
 80155ec:	1d11      	addpl	r1, r2, #4
 80155ee:	6019      	strpl	r1, [r3, #0]
 80155f0:	6816      	ldrpl	r6, [r2, #0]
 80155f2:	2700      	movs	r7, #0
 80155f4:	69a0      	ldr	r0, [r4, #24]
 80155f6:	b188      	cbz	r0, 801561c <_scanf_chars+0x58>
 80155f8:	2801      	cmp	r0, #1
 80155fa:	d107      	bne.n	801560c <_scanf_chars+0x48>
 80155fc:	682b      	ldr	r3, [r5, #0]
 80155fe:	781a      	ldrb	r2, [r3, #0]
 8015600:	6963      	ldr	r3, [r4, #20]
 8015602:	5c9b      	ldrb	r3, [r3, r2]
 8015604:	b953      	cbnz	r3, 801561c <_scanf_chars+0x58>
 8015606:	bb27      	cbnz	r7, 8015652 <_scanf_chars+0x8e>
 8015608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801560c:	2802      	cmp	r0, #2
 801560e:	d120      	bne.n	8015652 <_scanf_chars+0x8e>
 8015610:	682b      	ldr	r3, [r5, #0]
 8015612:	781b      	ldrb	r3, [r3, #0]
 8015614:	f813 3009 	ldrb.w	r3, [r3, r9]
 8015618:	071b      	lsls	r3, r3, #28
 801561a:	d41a      	bmi.n	8015652 <_scanf_chars+0x8e>
 801561c:	6823      	ldr	r3, [r4, #0]
 801561e:	06da      	lsls	r2, r3, #27
 8015620:	bf5e      	ittt	pl
 8015622:	682b      	ldrpl	r3, [r5, #0]
 8015624:	781b      	ldrbpl	r3, [r3, #0]
 8015626:	f806 3b01 	strbpl.w	r3, [r6], #1
 801562a:	682a      	ldr	r2, [r5, #0]
 801562c:	686b      	ldr	r3, [r5, #4]
 801562e:	3201      	adds	r2, #1
 8015630:	602a      	str	r2, [r5, #0]
 8015632:	68a2      	ldr	r2, [r4, #8]
 8015634:	3b01      	subs	r3, #1
 8015636:	3a01      	subs	r2, #1
 8015638:	606b      	str	r3, [r5, #4]
 801563a:	3701      	adds	r7, #1
 801563c:	60a2      	str	r2, [r4, #8]
 801563e:	b142      	cbz	r2, 8015652 <_scanf_chars+0x8e>
 8015640:	2b00      	cmp	r3, #0
 8015642:	dcd7      	bgt.n	80155f4 <_scanf_chars+0x30>
 8015644:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015648:	4629      	mov	r1, r5
 801564a:	4640      	mov	r0, r8
 801564c:	4798      	blx	r3
 801564e:	2800      	cmp	r0, #0
 8015650:	d0d0      	beq.n	80155f4 <_scanf_chars+0x30>
 8015652:	6823      	ldr	r3, [r4, #0]
 8015654:	f013 0310 	ands.w	r3, r3, #16
 8015658:	d105      	bne.n	8015666 <_scanf_chars+0xa2>
 801565a:	68e2      	ldr	r2, [r4, #12]
 801565c:	3201      	adds	r2, #1
 801565e:	60e2      	str	r2, [r4, #12]
 8015660:	69a2      	ldr	r2, [r4, #24]
 8015662:	b102      	cbz	r2, 8015666 <_scanf_chars+0xa2>
 8015664:	7033      	strb	r3, [r6, #0]
 8015666:	6923      	ldr	r3, [r4, #16]
 8015668:	441f      	add	r7, r3
 801566a:	6127      	str	r7, [r4, #16]
 801566c:	2000      	movs	r0, #0
 801566e:	e7cb      	b.n	8015608 <_scanf_chars+0x44>
 8015670:	0801918d 	.word	0x0801918d

08015674 <_scanf_i>:
 8015674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015678:	4698      	mov	r8, r3
 801567a:	4b74      	ldr	r3, [pc, #464]	; (801584c <_scanf_i+0x1d8>)
 801567c:	460c      	mov	r4, r1
 801567e:	4682      	mov	sl, r0
 8015680:	4616      	mov	r6, r2
 8015682:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015686:	b087      	sub	sp, #28
 8015688:	ab03      	add	r3, sp, #12
 801568a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801568e:	4b70      	ldr	r3, [pc, #448]	; (8015850 <_scanf_i+0x1dc>)
 8015690:	69a1      	ldr	r1, [r4, #24]
 8015692:	4a70      	ldr	r2, [pc, #448]	; (8015854 <_scanf_i+0x1e0>)
 8015694:	2903      	cmp	r1, #3
 8015696:	bf18      	it	ne
 8015698:	461a      	movne	r2, r3
 801569a:	68a3      	ldr	r3, [r4, #8]
 801569c:	9201      	str	r2, [sp, #4]
 801569e:	1e5a      	subs	r2, r3, #1
 80156a0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80156a4:	bf88      	it	hi
 80156a6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80156aa:	4627      	mov	r7, r4
 80156ac:	bf82      	ittt	hi
 80156ae:	eb03 0905 	addhi.w	r9, r3, r5
 80156b2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80156b6:	60a3      	strhi	r3, [r4, #8]
 80156b8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80156bc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80156c0:	bf98      	it	ls
 80156c2:	f04f 0900 	movls.w	r9, #0
 80156c6:	6023      	str	r3, [r4, #0]
 80156c8:	463d      	mov	r5, r7
 80156ca:	f04f 0b00 	mov.w	fp, #0
 80156ce:	6831      	ldr	r1, [r6, #0]
 80156d0:	ab03      	add	r3, sp, #12
 80156d2:	7809      	ldrb	r1, [r1, #0]
 80156d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80156d8:	2202      	movs	r2, #2
 80156da:	f7ea fdc1 	bl	8000260 <memchr>
 80156de:	b328      	cbz	r0, 801572c <_scanf_i+0xb8>
 80156e0:	f1bb 0f01 	cmp.w	fp, #1
 80156e4:	d159      	bne.n	801579a <_scanf_i+0x126>
 80156e6:	6862      	ldr	r2, [r4, #4]
 80156e8:	b92a      	cbnz	r2, 80156f6 <_scanf_i+0x82>
 80156ea:	6822      	ldr	r2, [r4, #0]
 80156ec:	2308      	movs	r3, #8
 80156ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80156f2:	6063      	str	r3, [r4, #4]
 80156f4:	6022      	str	r2, [r4, #0]
 80156f6:	6822      	ldr	r2, [r4, #0]
 80156f8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80156fc:	6022      	str	r2, [r4, #0]
 80156fe:	68a2      	ldr	r2, [r4, #8]
 8015700:	1e51      	subs	r1, r2, #1
 8015702:	60a1      	str	r1, [r4, #8]
 8015704:	b192      	cbz	r2, 801572c <_scanf_i+0xb8>
 8015706:	6832      	ldr	r2, [r6, #0]
 8015708:	1c51      	adds	r1, r2, #1
 801570a:	6031      	str	r1, [r6, #0]
 801570c:	7812      	ldrb	r2, [r2, #0]
 801570e:	f805 2b01 	strb.w	r2, [r5], #1
 8015712:	6872      	ldr	r2, [r6, #4]
 8015714:	3a01      	subs	r2, #1
 8015716:	2a00      	cmp	r2, #0
 8015718:	6072      	str	r2, [r6, #4]
 801571a:	dc07      	bgt.n	801572c <_scanf_i+0xb8>
 801571c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8015720:	4631      	mov	r1, r6
 8015722:	4650      	mov	r0, sl
 8015724:	4790      	blx	r2
 8015726:	2800      	cmp	r0, #0
 8015728:	f040 8085 	bne.w	8015836 <_scanf_i+0x1c2>
 801572c:	f10b 0b01 	add.w	fp, fp, #1
 8015730:	f1bb 0f03 	cmp.w	fp, #3
 8015734:	d1cb      	bne.n	80156ce <_scanf_i+0x5a>
 8015736:	6863      	ldr	r3, [r4, #4]
 8015738:	b90b      	cbnz	r3, 801573e <_scanf_i+0xca>
 801573a:	230a      	movs	r3, #10
 801573c:	6063      	str	r3, [r4, #4]
 801573e:	6863      	ldr	r3, [r4, #4]
 8015740:	4945      	ldr	r1, [pc, #276]	; (8015858 <_scanf_i+0x1e4>)
 8015742:	6960      	ldr	r0, [r4, #20]
 8015744:	1ac9      	subs	r1, r1, r3
 8015746:	f000 f889 	bl	801585c <__sccl>
 801574a:	f04f 0b00 	mov.w	fp, #0
 801574e:	68a3      	ldr	r3, [r4, #8]
 8015750:	6822      	ldr	r2, [r4, #0]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d03d      	beq.n	80157d2 <_scanf_i+0x15e>
 8015756:	6831      	ldr	r1, [r6, #0]
 8015758:	6960      	ldr	r0, [r4, #20]
 801575a:	f891 c000 	ldrb.w	ip, [r1]
 801575e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8015762:	2800      	cmp	r0, #0
 8015764:	d035      	beq.n	80157d2 <_scanf_i+0x15e>
 8015766:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801576a:	d124      	bne.n	80157b6 <_scanf_i+0x142>
 801576c:	0510      	lsls	r0, r2, #20
 801576e:	d522      	bpl.n	80157b6 <_scanf_i+0x142>
 8015770:	f10b 0b01 	add.w	fp, fp, #1
 8015774:	f1b9 0f00 	cmp.w	r9, #0
 8015778:	d003      	beq.n	8015782 <_scanf_i+0x10e>
 801577a:	3301      	adds	r3, #1
 801577c:	f109 39ff 	add.w	r9, r9, #4294967295
 8015780:	60a3      	str	r3, [r4, #8]
 8015782:	6873      	ldr	r3, [r6, #4]
 8015784:	3b01      	subs	r3, #1
 8015786:	2b00      	cmp	r3, #0
 8015788:	6073      	str	r3, [r6, #4]
 801578a:	dd1b      	ble.n	80157c4 <_scanf_i+0x150>
 801578c:	6833      	ldr	r3, [r6, #0]
 801578e:	3301      	adds	r3, #1
 8015790:	6033      	str	r3, [r6, #0]
 8015792:	68a3      	ldr	r3, [r4, #8]
 8015794:	3b01      	subs	r3, #1
 8015796:	60a3      	str	r3, [r4, #8]
 8015798:	e7d9      	b.n	801574e <_scanf_i+0xda>
 801579a:	f1bb 0f02 	cmp.w	fp, #2
 801579e:	d1ae      	bne.n	80156fe <_scanf_i+0x8a>
 80157a0:	6822      	ldr	r2, [r4, #0]
 80157a2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80157a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80157aa:	d1bf      	bne.n	801572c <_scanf_i+0xb8>
 80157ac:	2310      	movs	r3, #16
 80157ae:	6063      	str	r3, [r4, #4]
 80157b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80157b4:	e7a2      	b.n	80156fc <_scanf_i+0x88>
 80157b6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80157ba:	6022      	str	r2, [r4, #0]
 80157bc:	780b      	ldrb	r3, [r1, #0]
 80157be:	f805 3b01 	strb.w	r3, [r5], #1
 80157c2:	e7de      	b.n	8015782 <_scanf_i+0x10e>
 80157c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80157c8:	4631      	mov	r1, r6
 80157ca:	4650      	mov	r0, sl
 80157cc:	4798      	blx	r3
 80157ce:	2800      	cmp	r0, #0
 80157d0:	d0df      	beq.n	8015792 <_scanf_i+0x11e>
 80157d2:	6823      	ldr	r3, [r4, #0]
 80157d4:	05d9      	lsls	r1, r3, #23
 80157d6:	d50d      	bpl.n	80157f4 <_scanf_i+0x180>
 80157d8:	42bd      	cmp	r5, r7
 80157da:	d909      	bls.n	80157f0 <_scanf_i+0x17c>
 80157dc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80157e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80157e4:	4632      	mov	r2, r6
 80157e6:	4650      	mov	r0, sl
 80157e8:	4798      	blx	r3
 80157ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80157ee:	464d      	mov	r5, r9
 80157f0:	42bd      	cmp	r5, r7
 80157f2:	d028      	beq.n	8015846 <_scanf_i+0x1d2>
 80157f4:	6822      	ldr	r2, [r4, #0]
 80157f6:	f012 0210 	ands.w	r2, r2, #16
 80157fa:	d113      	bne.n	8015824 <_scanf_i+0x1b0>
 80157fc:	702a      	strb	r2, [r5, #0]
 80157fe:	6863      	ldr	r3, [r4, #4]
 8015800:	9e01      	ldr	r6, [sp, #4]
 8015802:	4639      	mov	r1, r7
 8015804:	4650      	mov	r0, sl
 8015806:	47b0      	blx	r6
 8015808:	f8d8 3000 	ldr.w	r3, [r8]
 801580c:	6821      	ldr	r1, [r4, #0]
 801580e:	1d1a      	adds	r2, r3, #4
 8015810:	f8c8 2000 	str.w	r2, [r8]
 8015814:	f011 0f20 	tst.w	r1, #32
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	d00f      	beq.n	801583c <_scanf_i+0x1c8>
 801581c:	6018      	str	r0, [r3, #0]
 801581e:	68e3      	ldr	r3, [r4, #12]
 8015820:	3301      	adds	r3, #1
 8015822:	60e3      	str	r3, [r4, #12]
 8015824:	1bed      	subs	r5, r5, r7
 8015826:	44ab      	add	fp, r5
 8015828:	6925      	ldr	r5, [r4, #16]
 801582a:	445d      	add	r5, fp
 801582c:	6125      	str	r5, [r4, #16]
 801582e:	2000      	movs	r0, #0
 8015830:	b007      	add	sp, #28
 8015832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015836:	f04f 0b00 	mov.w	fp, #0
 801583a:	e7ca      	b.n	80157d2 <_scanf_i+0x15e>
 801583c:	07ca      	lsls	r2, r1, #31
 801583e:	bf4c      	ite	mi
 8015840:	8018      	strhmi	r0, [r3, #0]
 8015842:	6018      	strpl	r0, [r3, #0]
 8015844:	e7eb      	b.n	801581e <_scanf_i+0x1aa>
 8015846:	2001      	movs	r0, #1
 8015848:	e7f2      	b.n	8015830 <_scanf_i+0x1bc>
 801584a:	bf00      	nop
 801584c:	08017cc4 	.word	0x08017cc4
 8015850:	08013bdd 	.word	0x08013bdd
 8015854:	080159d9 	.word	0x080159d9
 8015858:	080192e3 	.word	0x080192e3

0801585c <__sccl>:
 801585c:	b570      	push	{r4, r5, r6, lr}
 801585e:	780b      	ldrb	r3, [r1, #0]
 8015860:	4604      	mov	r4, r0
 8015862:	2b5e      	cmp	r3, #94	; 0x5e
 8015864:	bf0b      	itete	eq
 8015866:	784b      	ldrbeq	r3, [r1, #1]
 8015868:	1c48      	addne	r0, r1, #1
 801586a:	1c88      	addeq	r0, r1, #2
 801586c:	2200      	movne	r2, #0
 801586e:	bf08      	it	eq
 8015870:	2201      	moveq	r2, #1
 8015872:	1e61      	subs	r1, r4, #1
 8015874:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8015878:	f801 2f01 	strb.w	r2, [r1, #1]!
 801587c:	42a9      	cmp	r1, r5
 801587e:	d1fb      	bne.n	8015878 <__sccl+0x1c>
 8015880:	b90b      	cbnz	r3, 8015886 <__sccl+0x2a>
 8015882:	3801      	subs	r0, #1
 8015884:	bd70      	pop	{r4, r5, r6, pc}
 8015886:	f082 0101 	eor.w	r1, r2, #1
 801588a:	54e1      	strb	r1, [r4, r3]
 801588c:	1c42      	adds	r2, r0, #1
 801588e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8015892:	2d2d      	cmp	r5, #45	; 0x2d
 8015894:	f102 36ff 	add.w	r6, r2, #4294967295
 8015898:	4610      	mov	r0, r2
 801589a:	d006      	beq.n	80158aa <__sccl+0x4e>
 801589c:	2d5d      	cmp	r5, #93	; 0x5d
 801589e:	d0f1      	beq.n	8015884 <__sccl+0x28>
 80158a0:	b90d      	cbnz	r5, 80158a6 <__sccl+0x4a>
 80158a2:	4630      	mov	r0, r6
 80158a4:	e7ee      	b.n	8015884 <__sccl+0x28>
 80158a6:	462b      	mov	r3, r5
 80158a8:	e7ef      	b.n	801588a <__sccl+0x2e>
 80158aa:	7816      	ldrb	r6, [r2, #0]
 80158ac:	2e5d      	cmp	r6, #93	; 0x5d
 80158ae:	d0fa      	beq.n	80158a6 <__sccl+0x4a>
 80158b0:	42b3      	cmp	r3, r6
 80158b2:	dcf8      	bgt.n	80158a6 <__sccl+0x4a>
 80158b4:	4618      	mov	r0, r3
 80158b6:	3001      	adds	r0, #1
 80158b8:	4286      	cmp	r6, r0
 80158ba:	5421      	strb	r1, [r4, r0]
 80158bc:	dcfb      	bgt.n	80158b6 <__sccl+0x5a>
 80158be:	43d8      	mvns	r0, r3
 80158c0:	4430      	add	r0, r6
 80158c2:	1c5d      	adds	r5, r3, #1
 80158c4:	42b3      	cmp	r3, r6
 80158c6:	bfa8      	it	ge
 80158c8:	2000      	movge	r0, #0
 80158ca:	182b      	adds	r3, r5, r0
 80158cc:	3202      	adds	r2, #2
 80158ce:	e7de      	b.n	801588e <__sccl+0x32>

080158d0 <_strtol_l.isra.0>:
 80158d0:	2b01      	cmp	r3, #1
 80158d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158d6:	d001      	beq.n	80158dc <_strtol_l.isra.0+0xc>
 80158d8:	2b24      	cmp	r3, #36	; 0x24
 80158da:	d906      	bls.n	80158ea <_strtol_l.isra.0+0x1a>
 80158dc:	f7fc fbce 	bl	801207c <__errno>
 80158e0:	2316      	movs	r3, #22
 80158e2:	6003      	str	r3, [r0, #0]
 80158e4:	2000      	movs	r0, #0
 80158e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158ea:	4f3a      	ldr	r7, [pc, #232]	; (80159d4 <_strtol_l.isra.0+0x104>)
 80158ec:	468e      	mov	lr, r1
 80158ee:	4676      	mov	r6, lr
 80158f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80158f4:	5de5      	ldrb	r5, [r4, r7]
 80158f6:	f015 0508 	ands.w	r5, r5, #8
 80158fa:	d1f8      	bne.n	80158ee <_strtol_l.isra.0+0x1e>
 80158fc:	2c2d      	cmp	r4, #45	; 0x2d
 80158fe:	d134      	bne.n	801596a <_strtol_l.isra.0+0x9a>
 8015900:	f89e 4000 	ldrb.w	r4, [lr]
 8015904:	f04f 0801 	mov.w	r8, #1
 8015908:	f106 0e02 	add.w	lr, r6, #2
 801590c:	2b00      	cmp	r3, #0
 801590e:	d05c      	beq.n	80159ca <_strtol_l.isra.0+0xfa>
 8015910:	2b10      	cmp	r3, #16
 8015912:	d10c      	bne.n	801592e <_strtol_l.isra.0+0x5e>
 8015914:	2c30      	cmp	r4, #48	; 0x30
 8015916:	d10a      	bne.n	801592e <_strtol_l.isra.0+0x5e>
 8015918:	f89e 4000 	ldrb.w	r4, [lr]
 801591c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015920:	2c58      	cmp	r4, #88	; 0x58
 8015922:	d14d      	bne.n	80159c0 <_strtol_l.isra.0+0xf0>
 8015924:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8015928:	2310      	movs	r3, #16
 801592a:	f10e 0e02 	add.w	lr, lr, #2
 801592e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8015932:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015936:	2600      	movs	r6, #0
 8015938:	fbbc f9f3 	udiv	r9, ip, r3
 801593c:	4635      	mov	r5, r6
 801593e:	fb03 ca19 	mls	sl, r3, r9, ip
 8015942:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015946:	2f09      	cmp	r7, #9
 8015948:	d818      	bhi.n	801597c <_strtol_l.isra.0+0xac>
 801594a:	463c      	mov	r4, r7
 801594c:	42a3      	cmp	r3, r4
 801594e:	dd24      	ble.n	801599a <_strtol_l.isra.0+0xca>
 8015950:	2e00      	cmp	r6, #0
 8015952:	db1f      	blt.n	8015994 <_strtol_l.isra.0+0xc4>
 8015954:	45a9      	cmp	r9, r5
 8015956:	d31d      	bcc.n	8015994 <_strtol_l.isra.0+0xc4>
 8015958:	d101      	bne.n	801595e <_strtol_l.isra.0+0x8e>
 801595a:	45a2      	cmp	sl, r4
 801595c:	db1a      	blt.n	8015994 <_strtol_l.isra.0+0xc4>
 801595e:	fb05 4503 	mla	r5, r5, r3, r4
 8015962:	2601      	movs	r6, #1
 8015964:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015968:	e7eb      	b.n	8015942 <_strtol_l.isra.0+0x72>
 801596a:	2c2b      	cmp	r4, #43	; 0x2b
 801596c:	bf08      	it	eq
 801596e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8015972:	46a8      	mov	r8, r5
 8015974:	bf08      	it	eq
 8015976:	f106 0e02 	addeq.w	lr, r6, #2
 801597a:	e7c7      	b.n	801590c <_strtol_l.isra.0+0x3c>
 801597c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8015980:	2f19      	cmp	r7, #25
 8015982:	d801      	bhi.n	8015988 <_strtol_l.isra.0+0xb8>
 8015984:	3c37      	subs	r4, #55	; 0x37
 8015986:	e7e1      	b.n	801594c <_strtol_l.isra.0+0x7c>
 8015988:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801598c:	2f19      	cmp	r7, #25
 801598e:	d804      	bhi.n	801599a <_strtol_l.isra.0+0xca>
 8015990:	3c57      	subs	r4, #87	; 0x57
 8015992:	e7db      	b.n	801594c <_strtol_l.isra.0+0x7c>
 8015994:	f04f 36ff 	mov.w	r6, #4294967295
 8015998:	e7e4      	b.n	8015964 <_strtol_l.isra.0+0x94>
 801599a:	2e00      	cmp	r6, #0
 801599c:	da05      	bge.n	80159aa <_strtol_l.isra.0+0xda>
 801599e:	2322      	movs	r3, #34	; 0x22
 80159a0:	6003      	str	r3, [r0, #0]
 80159a2:	4665      	mov	r5, ip
 80159a4:	b942      	cbnz	r2, 80159b8 <_strtol_l.isra.0+0xe8>
 80159a6:	4628      	mov	r0, r5
 80159a8:	e79d      	b.n	80158e6 <_strtol_l.isra.0+0x16>
 80159aa:	f1b8 0f00 	cmp.w	r8, #0
 80159ae:	d000      	beq.n	80159b2 <_strtol_l.isra.0+0xe2>
 80159b0:	426d      	negs	r5, r5
 80159b2:	2a00      	cmp	r2, #0
 80159b4:	d0f7      	beq.n	80159a6 <_strtol_l.isra.0+0xd6>
 80159b6:	b10e      	cbz	r6, 80159bc <_strtol_l.isra.0+0xec>
 80159b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80159bc:	6011      	str	r1, [r2, #0]
 80159be:	e7f2      	b.n	80159a6 <_strtol_l.isra.0+0xd6>
 80159c0:	2430      	movs	r4, #48	; 0x30
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d1b3      	bne.n	801592e <_strtol_l.isra.0+0x5e>
 80159c6:	2308      	movs	r3, #8
 80159c8:	e7b1      	b.n	801592e <_strtol_l.isra.0+0x5e>
 80159ca:	2c30      	cmp	r4, #48	; 0x30
 80159cc:	d0a4      	beq.n	8015918 <_strtol_l.isra.0+0x48>
 80159ce:	230a      	movs	r3, #10
 80159d0:	e7ad      	b.n	801592e <_strtol_l.isra.0+0x5e>
 80159d2:	bf00      	nop
 80159d4:	0801918d 	.word	0x0801918d

080159d8 <_strtol_r>:
 80159d8:	f7ff bf7a 	b.w	80158d0 <_strtol_l.isra.0>

080159dc <__submore>:
 80159dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159e0:	460c      	mov	r4, r1
 80159e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80159e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80159e8:	4299      	cmp	r1, r3
 80159ea:	d11d      	bne.n	8015a28 <__submore+0x4c>
 80159ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80159f0:	f7fd f98a 	bl	8012d08 <_malloc_r>
 80159f4:	b918      	cbnz	r0, 80159fe <__submore+0x22>
 80159f6:	f04f 30ff 	mov.w	r0, #4294967295
 80159fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a02:	63a3      	str	r3, [r4, #56]	; 0x38
 8015a04:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8015a08:	6360      	str	r0, [r4, #52]	; 0x34
 8015a0a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8015a0e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015a12:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8015a16:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015a1a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8015a1e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8015a22:	6020      	str	r0, [r4, #0]
 8015a24:	2000      	movs	r0, #0
 8015a26:	e7e8      	b.n	80159fa <__submore+0x1e>
 8015a28:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8015a2a:	0077      	lsls	r7, r6, #1
 8015a2c:	463a      	mov	r2, r7
 8015a2e:	f7fe fe77 	bl	8014720 <_realloc_r>
 8015a32:	4605      	mov	r5, r0
 8015a34:	2800      	cmp	r0, #0
 8015a36:	d0de      	beq.n	80159f6 <__submore+0x1a>
 8015a38:	eb00 0806 	add.w	r8, r0, r6
 8015a3c:	4601      	mov	r1, r0
 8015a3e:	4632      	mov	r2, r6
 8015a40:	4640      	mov	r0, r8
 8015a42:	f7fd f8eb 	bl	8012c1c <memcpy>
 8015a46:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8015a4a:	f8c4 8000 	str.w	r8, [r4]
 8015a4e:	e7e9      	b.n	8015a24 <__submore+0x48>

08015a50 <_gettimeofday>:
 8015a50:	4b02      	ldr	r3, [pc, #8]	; (8015a5c <_gettimeofday+0xc>)
 8015a52:	2258      	movs	r2, #88	; 0x58
 8015a54:	601a      	str	r2, [r3, #0]
 8015a56:	f04f 30ff 	mov.w	r0, #4294967295
 8015a5a:	4770      	bx	lr
 8015a5c:	20000c64 	.word	0x20000c64

08015a60 <_init>:
 8015a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a62:	bf00      	nop
 8015a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a66:	bc08      	pop	{r3}
 8015a68:	469e      	mov	lr, r3
 8015a6a:	4770      	bx	lr

08015a6c <_fini>:
 8015a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a6e:	bf00      	nop
 8015a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a72:	bc08      	pop	{r3}
 8015a74:	469e      	mov	lr, r3
 8015a76:	4770      	bx	lr
