
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020fb0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000592c  08021190  08021190  00031190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026abc  08026abc  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  08026abc  08026abc  00036abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026ac4  08026ac4  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08026ac4  08026ac4  00036ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08026ad4  08026ad4  00036ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08026ae4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af4  2000033c  08026e20  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e30  08026e20  00040e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00067e03  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c0e5  00000000  00000000  000a816f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004208  00000000  00000000  000b4258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003fe8  00000000  00000000  000b8460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d750  00000000  00000000  000bc448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c687  00000000  00000000  000e9b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001108ba  00000000  00000000  0011621f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00226ad9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00013f28  00000000  00000000  00226b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08021170 	.word	0x08021170

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08021170 	.word	0x08021170

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000404 	.word	0x20000404

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01c fd2a 	bl	801d7c4 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01c fc82 	bl	801d7c4 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	20000e30 	.word	0x20000e30

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01d f859 	bl	801e000 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 fe6f 	bl	8003c30 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f60:	08026ae4 	.word	0x08026ae4
  ldr r2, =_sbss
 8000f64:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f68:	20000e30 	.word	0x20000e30

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000e1c 	.word	0x20000e1c
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000e1c 	.word	0x20000e1c

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	080241f8 	.word	0x080241f8
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08024208 	.word	0x08024208

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08024208 	.word	0x08024208

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08024210 	.word	0x08024210
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	08024228 	.word	0x08024228
 8003904:	08024230 	.word	0x08024230

08003908 <ESP_Init>:

int ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 uint8_t 	(*UART_Receive)(void),
			 uint32_t 	(*getTick)(void),
			 uint32_t	UART_Buffer_Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <ESP_Init+0x42>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <ESP_Init+0x42>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <ESP_Init+0x42>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <ESP_Init+0x50>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <ESP_Init+0x50>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003934:	4a08      	ldr	r2, [pc, #32]	; (8003958 <ESP_Init+0x50>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 f892 	bl	8003a64 <ringBuffer_init>
 8003940:	4603      	mov	r3, r0
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <ESP_Init+0x54>)
 8003944:	6013      	str	r3, [r2, #0]

		return 1;
 8003946:	2301      	movs	r3, #1
 8003948:	e001      	b.n	800394e <ESP_Init+0x46>
	}
	else
	{
		return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000360 	.word	0x20000360
 800395c:	20000494 	.word	0x20000494

08003960 <Send_AT_Command>:


void Send_AT_Command(char *cmd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <Send_AT_Command+0x18>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000360 	.word	0x20000360

0800397c <ESP_UART_ReceiveHandler>:

void ESP_UART_ReceiveHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	uint8_t rx_data=0;
 8003982:	2300      	movs	r3, #0
 8003984:	71fb      	strb	r3, [r7, #7]

	rx_data = ESP8266.UART_Receive();
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <ESP_UART_ReceiveHandler+0x2c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4798      	blx	r3
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
	ringBuffer_push(rx_buffer, rx_data);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <ESP_UART_ReceiveHandler+0x30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 f8a4 	bl	8003ae6 <ringBuffer_push>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000360 	.word	0x20000360
 80039ac:	20000494 	.word	0x20000494

080039b0 <Read_Response>:


uint32_t Read_Response(char * response)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <Read_Response+0x20>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f914 	bl	8003bec <ringBuffer_lookFor>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000494 	.word	0x20000494

080039d4 <Wait_Response>:


Status Wait_Response(char* response, uint32_t timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 80039de:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <Wait_Response+0x68>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 80039e6:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <Wait_Response+0x6c>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	4798      	blx	r3
 80039ec:	4603      	mov	r3, r0
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <Wait_Response+0x70>)
 80039f0:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <Wait_Response+0x68>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 80039f8:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <Wait_Response+0x74>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f8f4 	bl	8003bec <ringBuffer_lookFor>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d004      	beq.n	8003a14 <Wait_Response+0x40>
	{
		firstCall = 0;
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <Wait_Response+0x68>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
		return FOUND;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e00f      	b.n	8003a34 <Wait_Response+0x60>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <Wait_Response+0x6c>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4798      	blx	r3
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <Wait_Response+0x70>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d804      	bhi.n	8003a32 <Wait_Response+0x5e>
	{
		firstCall = 0;
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <Wait_Response+0x68>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e000      	b.n	8003a34 <Wait_Response+0x60>
	}
	else
	{
		return IDLE;
 8003a32:	2305      	movs	r3, #5
	}

}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	2000036c 	.word	0x2000036c
 8003a40:	20000360 	.word	0x20000360
 8003a44:	20000370 	.word	0x20000370
 8003a48:	20000494 	.word	0x20000494

08003a4c <Connect_Wifi>:

Status Connect_Wifi(char* ssid, char* password)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]

	return FOUND;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003a6c:	2010      	movs	r0, #16
 8003a6e:	f01a fc69 	bl	801e344 <malloc>
 8003a72:	4603      	mov	r3, r0
 8003a74:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e017      	b.n	8003ab0 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003a92:	2101      	movs	r1, #1
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f019 fe8d 	bl	801d7b4 <calloc>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003aae:	68fb      	ldr	r3, [r7, #12]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d004      	beq.n	8003ad8 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f01a fc3e 	bl	801e354 <free>
		}
		free(buffer);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f01a fc3b 	bl	801e354 <free>
	}
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	460b      	mov	r3, r1
 8003af0:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d00c      	beq.n	8003b1a <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4413      	add	r3, r2
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003b18:	e009      	b.n	8003b2e <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4413      	add	r3, r2
 8003b24:	78fa      	ldrb	r2, [r7, #3]
 8003b26:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d00d      	beq.n	8003b6c <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4413      	add	r3, r2
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	605a      	str	r2, [r3, #4]
		return data;
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	e00a      	b.n	8003b82 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	605a      	str	r2, [r3, #4]
		return data;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68d8      	ldr	r0, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	f01a fbed 	bl	801e380 <memset>
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	e00a      	b.n	8003bd4 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ff8c 	bl	8003ae6 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	6838      	ldr	r0, [r7, #0]
 8003bd6:	f7fc fb31 	bl	800023c <strlen>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d8ed      	bhi.n	8003bbe <ringBuffer_pushArray+0x10>
}
 8003be2:	bf00      	nop
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	6839      	ldr	r1, [r7, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f01b fb15 	bl	801f22c <strstr>
 8003c02:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <ringBuffer_lookFor+0x22>
		return 1;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <ringBuffer_lookFor+0x24>
	else
		return 0;
 8003c0e:	2300      	movs	r3, #0

}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c36:	f7fd f99a 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c3a:	f000 f81d 	bl	8003c78 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c3e:	f000 f951 	bl	8003ee4 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003c42:	f000 f891 	bl	8003d68 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003c46:	f000 f8ed 	bl	8003e24 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <main+0x44>)
 8003c4c:	463b      	mov	r3, r7
 8003c4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c52:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003c56:	463b      	mov	r3, r7
 8003c58:	4619      	mov	r1, r3
 8003c5a:	2002      	movs	r0, #2
 8003c5c:	f002 fe1e 	bl	800689c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003c60:	2120      	movs	r1, #32
 8003c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c66:	f7fd fd7f 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003c6a:	2064      	movs	r0, #100	; 0x64
 8003c6c:	f7fd f9f0 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003c70:	e7f6      	b.n	8003c60 <main+0x30>
 8003c72:	bf00      	nop
 8003c74:	08021198 	.word	0x08021198

08003c78 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b0a8      	sub	sp, #160	; 0xa0
 8003c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c7e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003c82:	2238      	movs	r2, #56	; 0x38
 8003c84:	2100      	movs	r1, #0
 8003c86:	4618      	mov	r0, r3
 8003c88:	f01a fb7a 	bl	801e380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	609a      	str	r2, [r3, #8]
 8003c98:	60da      	str	r2, [r3, #12]
 8003c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c9c:	463b      	mov	r3, r7
 8003c9e:	2254      	movs	r2, #84	; 0x54
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f01a fb6c 	bl	801e380 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003ca8:	2000      	movs	r0, #0
 8003caa:	f7fd fd9b 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cb6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cb8:	2340      	movs	r3, #64	; 0x40
 8003cba:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003cc8:	2304      	movs	r3, #4
 8003cca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003cce:	2355      	movs	r3, #85	; 0x55
 8003cd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ce6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd fe2e 	bl	800194c <HAL_RCC_OscConfig>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	bf14      	ite	ne
 8003cf6:	2301      	movne	r3, #1
 8003cf8:	2300      	moveq	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003d00:	f000 f960 	bl	8003fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d04:	230f      	movs	r3, #15
 8003d06:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d10:	2300      	movs	r3, #0
 8003d12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d14:	2300      	movs	r3, #0
 8003d16:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003d18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d1c:	2104      	movs	r1, #4
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe f92c 	bl	8001f7c <HAL_RCC_ClockConfig>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	bf14      	ite	ne
 8003d2a:	2301      	movne	r3, #1
 8003d2c:	2300      	moveq	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003d34:	f000 f946 	bl	8003fc4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003d38:	2321      	movs	r3, #33	; 0x21
 8003d3a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d44:	463b      	mov	r3, r7
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe fb34 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bf14      	ite	ne
 8003d52:	2301      	movne	r3, #1
 8003d54:	2300      	moveq	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003d5c:	f000 f932 	bl	8003fc4 <Error_Handler>
  }
}
 8003d60:	bf00      	nop
 8003d62:	37a0      	adds	r7, #160	; 0xa0
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d6e:	4a2c      	ldr	r2, [pc, #176]	; (8003e20 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003d70:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003d72:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d78:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d7a:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003d80:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003d86:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003d8c:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d8e:	220c      	movs	r2, #12
 8003d90:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d92:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d98:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d9e:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003da4:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003daa:	481c      	ldr	r0, [pc, #112]	; (8003e1c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003dac:	f7fe fd4e 	bl	800284c <HAL_UART_Init>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	bf14      	ite	ne
 8003db6:	2301      	movne	r3, #1
 8003db8:	2300      	moveq	r3, #0
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003dc0:	f000 f900 	bl	8003fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4815      	ldr	r0, [pc, #84]	; (8003e1c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003dc8:	f7ff fcd4 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bf14      	ite	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	2300      	moveq	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003ddc:	f000 f8f2 	bl	8003fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003de0:	2100      	movs	r1, #0
 8003de2:	480e      	ldr	r0, [pc, #56]	; (8003e1c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003de4:	f7ff fd04 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bf14      	ite	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	2300      	moveq	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003df8:	f000 f8e4 	bl	8003fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003dfc:	4807      	ldr	r0, [pc, #28]	; (8003e1c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003dfe:	f7ff fc80 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003e12:	f000 f8d7 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000374 	.word	0x20000374
 8003e20:	40008000 	.word	0x40008000

08003e24 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e28:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e2a:	4a2d      	ldr	r2, [pc, #180]	; (8003ee0 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003e2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e2e:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e36:	4b29      	ldr	r3, [pc, #164]	; (8003edc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e3c:	4b27      	ldr	r3, [pc, #156]	; (8003edc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e42:	4b26      	ldr	r3, [pc, #152]	; (8003edc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e48:	4b24      	ldr	r3, [pc, #144]	; (8003edc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e4a:	220c      	movs	r2, #12
 8003e4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e4e:	4b23      	ldr	r3, [pc, #140]	; (8003edc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e54:	4b21      	ldr	r3, [pc, #132]	; (8003edc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e5a:	4b20      	ldr	r3, [pc, #128]	; (8003edc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e60:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e66:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e6c:	481b      	ldr	r0, [pc, #108]	; (8003edc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e6e:	f7fe fced 	bl	800284c <HAL_UART_Init>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003e82:	f000 f89f 	bl	8003fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e86:	2100      	movs	r1, #0
 8003e88:	4814      	ldr	r0, [pc, #80]	; (8003edc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e8a:	f7ff fc73 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf14      	ite	ne
 8003e94:	2301      	movne	r3, #1
 8003e96:	2300      	moveq	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003e9e:	f000 f891 	bl	8003fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	480d      	ldr	r0, [pc, #52]	; (8003edc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ea6:	f7ff fca3 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003eba:	f000 f883 	bl	8003fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003ebe:	4807      	ldr	r0, [pc, #28]	; (8003edc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ec0:	f7ff fc1f 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bf14      	ite	ne
 8003eca:	2301      	movne	r3, #1
 8003ecc:	2300      	moveq	r3, #0
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003ed4:	f000 f876 	bl	8003fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ed8:	bf00      	nop
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000404 	.word	0x20000404
 8003ee0:	40013800 	.word	0x40013800

08003ee4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	; 0x28
 8003ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eea:	f107 0314 	add.w	r3, r7, #20
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
 8003ef4:	609a      	str	r2, [r3, #8]
 8003ef6:	60da      	str	r2, [r3, #12]
 8003ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003efa:	4b2f      	ldr	r3, [pc, #188]	; (8003fb8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efe:	4a2e      	ldr	r2, [pc, #184]	; (8003fb8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f00:	f043 0304 	orr.w	r3, r3, #4
 8003f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f06:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f12:	4b29      	ldr	r3, [pc, #164]	; (8003fb8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f16:	4a28      	ldr	r2, [pc, #160]	; (8003fb8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f18:	f043 0320 	orr.w	r3, r3, #32
 8003f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f1e:	4b26      	ldr	r3, [pc, #152]	; (8003fb8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2a:	4b23      	ldr	r3, [pc, #140]	; (8003fb8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2e:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f36:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f42:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f46:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	607b      	str	r3, [r7, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2120      	movs	r1, #32
 8003f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f62:	f7fd fbe9 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f6c:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <_ZL12MX_GPIO_Initv+0xd8>)
 8003f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f74:	f107 0314 	add.w	r3, r7, #20
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4811      	ldr	r0, [pc, #68]	; (8003fc0 <_ZL12MX_GPIO_Initv+0xdc>)
 8003f7c:	f7fd fa5a 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003f80:	2320      	movs	r3, #32
 8003f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f84:	2301      	movs	r3, #1
 8003f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003f90:	f107 0314 	add.w	r3, r7, #20
 8003f94:	4619      	mov	r1, r3
 8003f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f9a:	f7fd fa4b 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	2028      	movs	r0, #40	; 0x28
 8003fa4:	f7fd f951 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003fa8:	2028      	movs	r0, #40	; 0x28
 8003faa:	f7fd f968 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 8003fae:	bf00      	nop
 8003fb0:	3728      	adds	r7, #40	; 0x28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	10110000 	.word	0x10110000
 8003fc0:	48000800 	.word	0x48000800

08003fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fc8:	b672      	cpsid	i
}
 8003fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fcc:	e7fe      	b.n	8003fcc <Error_Handler+0x8>

08003fce <_ZN14MockActualCall13withParameterERK12SimpleStringPv>:
    MockActualCall& withParameter(const SimpleString& name, unsigned long int value) { return withUnsignedLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, cpputest_longlong value) { return withLongLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, cpputest_ulonglong value) { return withUnsignedLongLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, double value) { return withDoubleParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3340      	adds	r3, #64	; 0x40
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	4798      	blx	r3
 8003fea:	4603      	mov	r3, r0
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>:
    MockExpectedCall& withParameter(const SimpleString& name, cpputest_longlong value) { return withLongLongIntParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, cpputest_ulonglong value) { return withUnsignedLongLongIntParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, double value) { return withDoubleParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, double value, double tolerance) { return withDoubleParameter(name, value, tolerance); }
    MockExpectedCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3350      	adds	r3, #80	; 0x50
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	4798      	blx	r3
 8004010:	4603      	mov	r3, r0
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8004022:	2032      	movs	r0, #50	; 0x32
 8004024:	f7ff fd1e 	bl	8003a64 <ringBuffer_init>
 8004028:	4602      	mov	r2, r0
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	605a      	str	r2, [r3, #4]

	}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fd38 	bl	8003ab8 <ringBuffer_deInit>
	}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4618      	mov	r0, r3
 800405c:	f00e f8bc 	bl	80121d8 <_ZN5UtestC1Ev>
 8004060:	4a03      	ldr	r2, [pc, #12]	; (8004070 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	080250b8 	.word	0x080250b8

08004074 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	4a05      	ldr	r2, [pc, #20]	; (8004094 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4618      	mov	r0, r3
 8004086:	f00e f8b7 	bl	80121f8 <_ZN5UtestD1Ev>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	080250b8 	.word	0x080250b8

08004098 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff ffe7 	bl	8004074 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80040a6:	2108      	movs	r1, #8
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f004 f8d9 	bl	8008260 <_ZdlPvj>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff ffbe 	bl	8004050 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80040d4:	4a03      	ldr	r2, [pc, #12]	; (80040e4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	08025098 	.word	0x08025098

080040e8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	2224      	movs	r2, #36	; 0x24
 80040f2:	4906      	ldr	r1, [pc, #24]	; (800410c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 80040f4:	2008      	movs	r0, #8
 80040f6:	f004 f89f 	bl	8008238 <_ZnwjPKci>
 80040fa:	4604      	mov	r4, r0
 80040fc:	4620      	mov	r0, r4
 80040fe:	f7ff ffdb 	bl	80040b8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 8004102:	4623      	mov	r3, r4
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bd90      	pop	{r4, r7, pc}
 800410c:	080211a0 	.word	0x080211a0

08004110 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4618      	mov	r0, r3
 800411c:	f00c fc7a 	bl	8010a14 <_ZN10UtestShellC1Ev>
 8004120:	4a03      	ldr	r2, [pc, #12]	; (8004130 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	08024fec 	.word	0x08024fec

08004134 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8004134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004136:	b087      	sub	sp, #28
 8004138:	af04      	add	r7, sp, #16
 800413a:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 800413c:	f00e f822 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8004140:	4604      	mov	r4, r0
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	3338      	adds	r3, #56	; 0x38
 8004146:	681d      	ldr	r5, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	461e      	mov	r6, r3
 8004150:	f00e f828 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004154:	4603      	mov	r3, r0
 8004156:	9302      	str	r3, [sp, #8]
 8004158:	2327      	movs	r3, #39	; 0x27
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	4b2a      	ldr	r3, [pc, #168]	; (800420c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8004162:	4632      	mov	r2, r6
 8004164:	2132      	movs	r1, #50	; 0x32
 8004166:	4620      	mov	r0, r4
 8004168:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 800416a:	f00e f80b 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 800416e:	4604      	mov	r4, r0
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	3320      	adds	r3, #32
 8004174:	681d      	ldr	r5, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf14      	ite	ne
 8004180:	2301      	movne	r3, #1
 8004182:	2300      	moveq	r3, #0
 8004184:	b2de      	uxtb	r6, r3
 8004186:	f00e f80d 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800418a:	4603      	mov	r3, r0
 800418c:	9303      	str	r3, [sp, #12]
 800418e:	2328      	movs	r3, #40	; 0x28
 8004190:	9302      	str	r3, [sp, #8]
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004194:	9301      	str	r3, [sp, #4]
 8004196:	2300      	movs	r3, #0
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 800419c:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 800419e:	4631      	mov	r1, r6
 80041a0:	4620      	mov	r0, r4
 80041a2:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 80041a4:	f00d ffee 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 80041a8:	4604      	mov	r4, r0
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	3338      	adds	r3, #56	; 0x38
 80041ae:	681d      	ldr	r5, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461e      	mov	r6, r3
 80041b8:	f00d fff4 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80041bc:	4603      	mov	r3, r0
 80041be:	9302      	str	r3, [sp, #8]
 80041c0:	2329      	movs	r3, #41	; 0x29
 80041c2:	9301      	str	r3, [sp, #4]
 80041c4:	4b10      	ldr	r3, [pc, #64]	; (8004208 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	4b13      	ldr	r3, [pc, #76]	; (8004218 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 80041ca:	4632      	mov	r2, r6
 80041cc:	2100      	movs	r1, #0
 80041ce:	4620      	mov	r0, r4
 80041d0:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 80041d2:	f00d ffd7 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 80041d6:	4604      	mov	r4, r0
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	3338      	adds	r3, #56	; 0x38
 80041dc:	681d      	ldr	r5, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	461e      	mov	r6, r3
 80041e6:	f00d ffdd 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80041ea:	4603      	mov	r3, r0
 80041ec:	9302      	str	r3, [sp, #8]
 80041ee:	232a      	movs	r3, #42	; 0x2a
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	4b09      	ldr	r3, [pc, #36]	; (800421c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 80041f8:	4632      	mov	r2, r6
 80041fa:	2100      	movs	r1, #0
 80041fc:	4620      	mov	r0, r4
 80041fe:	47a8      	blx	r5

}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004208:	080211a0 	.word	0x080211a0
 800420c:	080211b4 	.word	0x080211b4
 8004210:	080211dc 	.word	0x080211dc
 8004214:	080211f4 	.word	0x080211f4
 8004218:	080211fc 	.word	0x080211fc
 800421c:	08021224 	.word	0x08021224

08004220 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	605a      	str	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff ff0a 	bl	8004050 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800423c:	4a03      	ldr	r2, [pc, #12]	; (800424c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	08024fcc 	.word	0x08024fcc

08004250 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	222e      	movs	r2, #46	; 0x2e
 800425a:	4906      	ldr	r1, [pc, #24]	; (8004274 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 800425c:	2008      	movs	r0, #8
 800425e:	f003 ffeb 	bl	8008238 <_ZnwjPKci>
 8004262:	4604      	mov	r4, r0
 8004264:	4620      	mov	r0, r4
 8004266:	f7ff ffdb 	bl	8004220 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 800426a:	4623      	mov	r3, r4
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	bd90      	pop	{r4, r7, pc}
 8004274:	080211a0 	.word	0x080211a0

08004278 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4618      	mov	r0, r3
 8004284:	f00c fbc6 	bl	8010a14 <_ZN10UtestShellC1Ev>
 8004288:	4a03      	ldr	r2, [pc, #12]	; (8004298 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	08024f20 	.word	0x08024f20

0800429c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 800429c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800429e:	b087      	sub	sp, #28
 80042a0:	af04      	add	r7, sp, #16
 80042a2:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2145      	movs	r1, #69	; 0x45
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fc1b 	bl	8003ae6 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 80042b0:	f00d ff68 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 80042b4:	4604      	mov	r4, r0
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	3338      	adds	r3, #56	; 0x38
 80042ba:	681d      	ldr	r5, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	461e      	mov	r6, r3
 80042c6:	f00d ff6d 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80042ca:	4603      	mov	r3, r0
 80042cc:	9302      	str	r3, [sp, #8]
 80042ce:	2331      	movs	r3, #49	; 0x31
 80042d0:	9301      	str	r3, [sp, #4]
 80042d2:	4b15      	ldr	r3, [pc, #84]	; (8004328 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	4b15      	ldr	r3, [pc, #84]	; (800432c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 80042d8:	4632      	mov	r2, r6
 80042da:	2145      	movs	r1, #69	; 0x45
 80042dc:	4620      	mov	r0, r4
 80042de:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2110      	movs	r1, #16
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fbfd 	bl	8003ae6 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 80042ec:	f00d ff4a 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 80042f0:	4604      	mov	r4, r0
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	3338      	adds	r3, #56	; 0x38
 80042f6:	681d      	ldr	r5, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	3301      	adds	r3, #1
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	461e      	mov	r6, r3
 8004304:	f00d ff4e 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004308:	4603      	mov	r3, r0
 800430a:	9302      	str	r3, [sp, #8]
 800430c:	2334      	movs	r3, #52	; 0x34
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	4b05      	ldr	r3, [pc, #20]	; (8004328 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 8004316:	4632      	mov	r2, r6
 8004318:	2110      	movs	r1, #16
 800431a:	4620      	mov	r0, r4
 800431c:	47a8      	blx	r5

}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004326:	bf00      	nop
 8004328:	080211a0 	.word	0x080211a0
 800432c:	0802124c 	.word	0x0802124c
 8004330:	0802127c 	.word	0x0802127c

08004334 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	605a      	str	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fe80 	bl	8004050 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004350:	4a03      	ldr	r2, [pc, #12]	; (8004360 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4618      	mov	r0, r3
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	08024f00 	.word	0x08024f00

08004364 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004364:	b590      	push	{r4, r7, lr}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	2238      	movs	r2, #56	; 0x38
 800436e:	4906      	ldr	r1, [pc, #24]	; (8004388 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004370:	2008      	movs	r0, #8
 8004372:	f003 ff61 	bl	8008238 <_ZnwjPKci>
 8004376:	4604      	mov	r4, r0
 8004378:	4620      	mov	r0, r4
 800437a:	f7ff ffdb 	bl	8004334 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 800437e:	4623      	mov	r3, r4
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bd90      	pop	{r4, r7, pc}
 8004388:	080211a0 	.word	0x080211a0

0800438c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4618      	mov	r0, r3
 8004398:	f00c fb3c 	bl	8010a14 <_ZN10UtestShellC1Ev>
 800439c:	4a03      	ldr	r2, [pc, #12]	; (80043ac <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	08024e54 	.word	0x08024e54

080043b0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 80043b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b2:	b089      	sub	sp, #36	; 0x24
 80043b4:	af04      	add	r7, sp, #16
 80043b6:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	429a      	cmp	r2, r3
 80043d0:	bf0c      	ite	eq
 80043d2:	2301      	moveq	r3, #1
 80043d4:	2300      	movne	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4293      	cmp	r3, r2
 80043de:	da0b      	bge.n	80043f8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	4611      	mov	r1, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fb7b 	bl	8003ae6 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	3301      	adds	r3, #1
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e7e3      	b.n	80043c0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	21ff      	movs	r1, #255	; 0xff
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fb71 	bl	8003ae6 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 8004404:	f00d febe 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8004408:	4604      	mov	r4, r0
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	3338      	adds	r3, #56	; 0x38
 800440e:	681d      	ldr	r5, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	461e      	mov	r6, r3
 800441a:	f00d fec3 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800441e:	4603      	mov	r3, r0
 8004420:	9302      	str	r3, [sp, #8]
 8004422:	2340      	movs	r3, #64	; 0x40
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 800442c:	4632      	mov	r2, r6
 800442e:	21ff      	movs	r1, #255	; 0xff
 8004430:	4620      	mov	r0, r4
 8004432:	47a8      	blx	r5
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800443c:	080211a0 	.word	0x080211a0
 8004440:	080212ac 	.word	0x080212ac

08004444 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fdf8 	bl	8004050 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004460:	4a03      	ldr	r2, [pc, #12]	; (8004470 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	08024e34 	.word	0x08024e34

08004474 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004474:	b590      	push	{r4, r7, lr}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	2243      	movs	r2, #67	; 0x43
 800447e:	4906      	ldr	r1, [pc, #24]	; (8004498 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004480:	2008      	movs	r0, #8
 8004482:	f003 fed9 	bl	8008238 <_ZnwjPKci>
 8004486:	4604      	mov	r4, r0
 8004488:	4620      	mov	r0, r4
 800448a:	f7ff ffdb 	bl	8004444 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 800448e:	4623      	mov	r3, r4
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bd90      	pop	{r4, r7, pc}
 8004498:	080211a0 	.word	0x080211a0

0800449c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f00c fab4 	bl	8010a14 <_ZN10UtestShellC1Ev>
 80044ac:	4a03      	ldr	r2, [pc, #12]	; (80044bc <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	08024d88 	.word	0x08024d88

080044c0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 80044c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044c2:	b089      	sub	sp, #36	; 0x24
 80044c4:	af04      	add	r7, sp, #16
 80044c6:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	21ff      	movs	r1, #255	; 0xff
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fb09 	bl	8003ae6 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fb2e 	bl	8003b3a <ringBuffer_pop>
 80044de:	4603      	mov	r3, r0
 80044e0:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 80044e2:	f00d fe4f 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 80044e6:	4604      	mov	r4, r0
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	3338      	adds	r3, #56	; 0x38
 80044ec:	681d      	ldr	r5, [r3, #0]
 80044ee:	7bfe      	ldrb	r6, [r7, #15]
 80044f0:	f00d fe58 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80044f4:	4603      	mov	r3, r0
 80044f6:	9302      	str	r3, [sp, #8]
 80044f8:	2348      	movs	r3, #72	; 0x48
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 8004502:	4632      	mov	r2, r6
 8004504:	21ff      	movs	r1, #255	; 0xff
 8004506:	4620      	mov	r0, r4
 8004508:	47a8      	blx	r5

}
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004512:	bf00      	nop
 8004514:	080211a0 	.word	0x080211a0
 8004518:	080212dc 	.word	0x080212dc

0800451c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	605a      	str	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff fd8c 	bl	8004050 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004538:	4a03      	ldr	r2, [pc, #12]	; (8004548 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	08024d68 	.word	0x08024d68

0800454c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 800454c:	b590      	push	{r4, r7, lr}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	224c      	movs	r2, #76	; 0x4c
 8004556:	4906      	ldr	r1, [pc, #24]	; (8004570 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004558:	2008      	movs	r0, #8
 800455a:	f003 fe6d 	bl	8008238 <_ZnwjPKci>
 800455e:	4604      	mov	r4, r0
 8004560:	4620      	mov	r0, r4
 8004562:	f7ff ffdb 	bl	800451c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004566:	4623      	mov	r3, r4
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	bd90      	pop	{r4, r7, pc}
 8004570:	080211a0 	.word	0x080211a0

08004574 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4618      	mov	r0, r3
 8004580:	f00c fa48 	bl	8010a14 <_ZN10UtestShellC1Ev>
 8004584:	4a03      	ldr	r2, [pc, #12]	; (8004594 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	08024cbc 	.word	0x08024cbc

08004598 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800459a:	b089      	sub	sp, #36	; 0x24
 800459c:	af04      	add	r7, sp, #16
 800459e:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	21aa      	movs	r1, #170	; 0xaa
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fa9b 	bl	8003ae6 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	429a      	cmp	r2, r3
 80045c8:	bf0c      	ite	eq
 80045ca:	2301      	moveq	r3, #1
 80045cc:	2300      	movne	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4293      	cmp	r3, r2
 80045d6:	da0a      	bge.n	80045ee <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff faac 	bl	8003b3a <ringBuffer_pop>
 80045e2:	4603      	mov	r3, r0
 80045e4:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3301      	adds	r3, #1
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	e7e4      	b.n	80045b8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff faa1 	bl	8003b3a <ringBuffer_pop>
 80045f8:	4603      	mov	r3, r0
 80045fa:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 80045fc:	f00d fdc2 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8004600:	4604      	mov	r4, r0
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	3338      	adds	r3, #56	; 0x38
 8004606:	681d      	ldr	r5, [r3, #0]
 8004608:	7afe      	ldrb	r6, [r7, #11]
 800460a:	f00d fdcb 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800460e:	4603      	mov	r3, r0
 8004610:	9302      	str	r3, [sp, #8]
 8004612:	2359      	movs	r3, #89	; 0x59
 8004614:	9301      	str	r3, [sp, #4]
 8004616:	4b05      	ldr	r3, [pc, #20]	; (800462c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 800461c:	4632      	mov	r2, r6
 800461e:	21aa      	movs	r1, #170	; 0xaa
 8004620:	4620      	mov	r0, r4
 8004622:	47a8      	blx	r5
}
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800462c:	080211a0 	.word	0x080211a0
 8004630:	080212fc 	.word	0x080212fc

08004634 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	605a      	str	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fd00 	bl	8004050 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004650:	4a03      	ldr	r2, [pc, #12]	; (8004660 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	08024c9c 	.word	0x08024c9c

08004664 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004664:	b590      	push	{r4, r7, lr}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	225c      	movs	r2, #92	; 0x5c
 800466e:	4906      	ldr	r1, [pc, #24]	; (8004688 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004670:	2008      	movs	r0, #8
 8004672:	f003 fde1 	bl	8008238 <_ZnwjPKci>
 8004676:	4604      	mov	r4, r0
 8004678:	4620      	mov	r0, r4
 800467a:	f7ff ffdb 	bl	8004634 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 800467e:	4623      	mov	r3, r4
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	bd90      	pop	{r4, r7, pc}
 8004688:	080211a0 	.word	0x080211a0

0800468c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4618      	mov	r0, r3
 8004698:	f00c f9bc 	bl	8010a14 <_ZN10UtestShellC1Ev>
 800469c:	4a03      	ldr	r2, [pc, #12]	; (80046ac <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	08024bf0 	.word	0x08024bf0

080046b0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 80046b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046b2:	b089      	sub	sp, #36	; 0x24
 80046b4:	af04      	add	r7, sp, #16
 80046b6:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d20b      	bcs.n	80046e0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	4611      	mov	r1, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fa07 	bl	8003ae6 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3301      	adds	r3, #1
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	e7ed      	b.n	80046bc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 80046e0:	f00d fd50 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 80046e4:	4604      	mov	r4, r0
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	3338      	adds	r3, #56	; 0x38
 80046ea:	681d      	ldr	r5, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	4413      	add	r3, r2
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	461e      	mov	r6, r3
 8004700:	f00d fd50 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004704:	4603      	mov	r3, r0
 8004706:	9302      	str	r3, [sp, #8]
 8004708:	2363      	movs	r3, #99	; 0x63
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	4b24      	ldr	r3, [pc, #144]	; (80047a0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004712:	4632      	mov	r2, r6
 8004714:	2131      	movs	r1, #49	; 0x31
 8004716:	4620      	mov	r0, r4
 8004718:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fa35 	bl	8003b8e <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004724:	f00d fd2e 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8004728:	4604      	mov	r4, r0
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	3338      	adds	r3, #56	; 0x38
 800472e:	681d      	ldr	r5, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	3b01      	subs	r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	461e      	mov	r6, r3
 8004744:	f00d fd2e 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004748:	4603      	mov	r3, r0
 800474a:	9302      	str	r3, [sp, #8]
 800474c:	2367      	movs	r3, #103	; 0x67
 800474e:	9301      	str	r3, [sp, #4]
 8004750:	4b13      	ldr	r3, [pc, #76]	; (80047a0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004756:	4632      	mov	r2, r6
 8004758:	2100      	movs	r1, #0
 800475a:	4620      	mov	r0, r4
 800475c:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 800475e:	f00d fd11 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8004762:	4604      	mov	r4, r0
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	3338      	adds	r3, #56	; 0x38
 8004768:	681d      	ldr	r5, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	4413      	add	r3, r2
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	461e      	mov	r6, r3
 800477e:	f00d fd11 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004782:	4603      	mov	r3, r0
 8004784:	9302      	str	r3, [sp, #8]
 8004786:	2368      	movs	r3, #104	; 0x68
 8004788:	9301      	str	r3, [sp, #4]
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	4b07      	ldr	r3, [pc, #28]	; (80047ac <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004790:	4632      	mov	r2, r6
 8004792:	2100      	movs	r1, #0
 8004794:	4620      	mov	r0, r4
 8004796:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004798:	bf00      	nop
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047a0:	080211a0 	.word	0x080211a0
 80047a4:	0802131c 	.word	0x0802131c
 80047a8:	08021358 	.word	0x08021358
 80047ac:	08021394 	.word	0x08021394

080047b0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	605a      	str	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fc42 	bl	8004050 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80047cc:	4a03      	ldr	r2, [pc, #12]	; (80047dc <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	08024bd0 	.word	0x08024bd0

080047e0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 80047e0:	b590      	push	{r4, r7, lr}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	2271      	movs	r2, #113	; 0x71
 80047ea:	4906      	ldr	r1, [pc, #24]	; (8004804 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 80047ec:	2008      	movs	r0, #8
 80047ee:	f003 fd23 	bl	8008238 <_ZnwjPKci>
 80047f2:	4604      	mov	r4, r0
 80047f4:	4620      	mov	r0, r4
 80047f6:	f7ff ffdb 	bl	80047b0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 80047fa:	4623      	mov	r3, r4
 80047fc:	4618      	mov	r0, r3
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	bd90      	pop	{r4, r7, pc}
 8004804:	080211a0 	.word	0x080211a0

08004808 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4618      	mov	r0, r3
 8004814:	f00c f8fe 	bl	8010a14 <_ZN10UtestShellC1Ev>
 8004818:	4a03      	ldr	r2, [pc, #12]	; (8004828 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	08024b24 	.word	0x08024b24

0800482c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 800482c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800482e:	b087      	sub	sp, #28
 8004830:	af04      	add	r7, sp, #16
 8004832:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	490e      	ldr	r1, [pc, #56]	; (8004874 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff f9b7 	bl	8003bae <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004840:	f00d fca0 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8004844:	4604      	mov	r4, r0
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	3324      	adds	r3, #36	; 0x24
 800484a:	681d      	ldr	r5, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	68de      	ldr	r6, [r3, #12]
 8004852:	f00d fca7 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004856:	4603      	mov	r3, r0
 8004858:	9302      	str	r3, [sp, #8]
 800485a:	2375      	movs	r3, #117	; 0x75
 800485c:	9301      	str	r3, [sp, #4]
 800485e:	4b06      	ldr	r3, [pc, #24]	; (8004878 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	2300      	movs	r3, #0
 8004864:	4632      	mov	r2, r6
 8004866:	4903      	ldr	r1, [pc, #12]	; (8004874 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004868:	4620      	mov	r0, r4
 800486a:	47a8      	blx	r5
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004874:	080213cc 	.word	0x080213cc
 8004878:	080211a0 	.word	0x080211a0

0800487c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	605a      	str	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fbdc 	bl	8004050 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004898:	4a03      	ldr	r2, [pc, #12]	; (80048a8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	08024b04 	.word	0x08024b04

080048ac <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 80048ac:	b590      	push	{r4, r7, lr}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	2278      	movs	r2, #120	; 0x78
 80048b6:	4906      	ldr	r1, [pc, #24]	; (80048d0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 80048b8:	2008      	movs	r0, #8
 80048ba:	f003 fcbd 	bl	8008238 <_ZnwjPKci>
 80048be:	4604      	mov	r4, r0
 80048c0:	4620      	mov	r0, r4
 80048c2:	f7ff ffdb 	bl	800487c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 80048c6:	4623      	mov	r3, r4
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd90      	pop	{r4, r7, pc}
 80048d0:	080211a0 	.word	0x080211a0

080048d4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4618      	mov	r0, r3
 80048e0:	f00c f898 	bl	8010a14 <_ZN10UtestShellC1Ev>
 80048e4:	4a03      	ldr	r2, [pc, #12]	; (80048f4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	08024a58 	.word	0x08024a58

080048f8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 80048f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048fc:	b08a      	sub	sp, #40	; 0x28
 80048fe:	af04      	add	r7, sp, #16
 8004900:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	494e      	ldr	r1, [pc, #312]	; (8004a40 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff f950 	bl	8003bae <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 800490e:	f00d fc39 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8004912:	4604      	mov	r4, r0
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	3324      	adds	r3, #36	; 0x24
 8004918:	681d      	ldr	r5, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	68de      	ldr	r6, [r3, #12]
 8004920:	f00d fc40 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004924:	4603      	mov	r3, r0
 8004926:	9302      	str	r3, [sp, #8]
 8004928:	237c      	movs	r3, #124	; 0x7c
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	4b45      	ldr	r3, [pc, #276]	; (8004a44 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	2300      	movs	r3, #0
 8004932:	4632      	mov	r2, r6
 8004934:	4942      	ldr	r1, [pc, #264]	; (8004a40 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004936:	4620      	mov	r0, r4
 8004938:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4942      	ldr	r1, [pc, #264]	; (8004a48 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff f953 	bl	8003bec <ringBuffer_lookFor>
 8004946:	4603      	mov	r3, r0
 8004948:	2b01      	cmp	r3, #1
 800494a:	bf14      	ite	ne
 800494c:	2301      	movne	r3, #1
 800494e:	2300      	moveq	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d05c      	beq.n	8004a10 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	493b      	ldr	r1, [pc, #236]	; (8004a48 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff f945 	bl	8003bec <ringBuffer_lookFor>
 8004962:	4604      	mov	r4, r0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4937      	ldr	r1, [pc, #220]	; (8004a48 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff f93e 	bl	8003bec <ringBuffer_lookFor>
 8004970:	4603      	mov	r3, r0
 8004972:	429c      	cmp	r4, r3
 8004974:	bf14      	ite	ne
 8004976:	2301      	movne	r3, #1
 8004978:	2300      	moveq	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004980:	f00d fc00 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8004984:	6803      	ldr	r3, [r0, #0]
 8004986:	3370      	adds	r3, #112	; 0x70
 8004988:	681c      	ldr	r4, [r3, #0]
 800498a:	237d      	movs	r3, #125	; 0x7d
 800498c:	4a2d      	ldr	r2, [pc, #180]	; (8004a44 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 800498e:	492f      	ldr	r1, [pc, #188]	; (8004a4c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004990:	47a0      	blx	r4
 8004992:	f00d fbf7 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8004996:	4604      	mov	r4, r0
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	3358      	adds	r3, #88	; 0x58
 800499c:	681d      	ldr	r5, [r3, #0]
 800499e:	f107 0308 	add.w	r3, r7, #8
 80049a2:	2101      	movs	r1, #1
 80049a4:	4618      	mov	r0, r3
 80049a6:	f006 fe89 	bl	800b6bc <_Z10StringFromi>
 80049aa:	f107 0308 	add.w	r3, r7, #8
 80049ae:	4618      	mov	r0, r3
 80049b0:	f006 fb90 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 80049b4:	4606      	mov	r6, r0
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4923      	ldr	r1, [pc, #140]	; (8004a48 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff f915 	bl	8003bec <ringBuffer_lookFor>
 80049c2:	4602      	mov	r2, r0
 80049c4:	f107 0310 	add.w	r3, r7, #16
 80049c8:	4611      	mov	r1, r2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f007 f8f0 	bl	800bbb0 <_Z10StringFromm>
 80049d0:	f107 0310 	add.w	r3, r7, #16
 80049d4:	4618      	mov	r0, r3
 80049d6:	f006 fb7d 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 80049da:	4680      	mov	r8, r0
 80049dc:	f00d fbe2 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049e0:	4603      	mov	r3, r0
 80049e2:	9303      	str	r3, [sp, #12]
 80049e4:	237d      	movs	r3, #125	; 0x7d
 80049e6:	9302      	str	r3, [sp, #8]
 80049e8:	4b16      	ldr	r3, [pc, #88]	; (8004a44 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80049ea:	9301      	str	r3, [sp, #4]
 80049ec:	2300      	movs	r3, #0
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	4643      	mov	r3, r8
 80049f2:	4632      	mov	r2, r6
 80049f4:	2101      	movs	r1, #1
 80049f6:	4620      	mov	r0, r4
 80049f8:	47a8      	blx	r5
 80049fa:	f107 0310 	add.w	r3, r7, #16
 80049fe:	4618      	mov	r0, r3
 8004a00:	f006 fb95 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8004a04:	f107 0308 	add.w	r3, r7, #8
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f006 fb90 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8004a0e:	e012      	b.n	8004a36 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004a10:	f00d fbb8 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8004a14:	4604      	mov	r4, r0
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	3338      	adds	r3, #56	; 0x38
 8004a1a:	681d      	ldr	r5, [r3, #0]
 8004a1c:	f00d fbc2 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a20:	4603      	mov	r3, r0
 8004a22:	9302      	str	r3, [sp, #8]
 8004a24:	237d      	movs	r3, #125	; 0x7d
 8004a26:	9301      	str	r3, [sp, #4]
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2100      	movs	r1, #0
 8004a32:	4620      	mov	r0, r4
 8004a34:	47a8      	blx	r5
}
 8004a36:	bf00      	nop
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a40:	080213d4 	.word	0x080213d4
 8004a44:	080211a0 	.word	0x080211a0
 8004a48:	080213e0 	.word	0x080213e0
 8004a4c:	080213e8 	.word	0x080213e8

08004a50 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff faf2 	bl	8004050 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004a6c:	4a03      	ldr	r2, [pc, #12]	; (8004a7c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	08024a38 	.word	0x08024a38

08004a80 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004a80:	b590      	push	{r4, r7, lr}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	2280      	movs	r2, #128	; 0x80
 8004a8a:	4906      	ldr	r1, [pc, #24]	; (8004aa4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004a8c:	2008      	movs	r0, #8
 8004a8e:	f003 fbd3 	bl	8008238 <_ZnwjPKci>
 8004a92:	4604      	mov	r4, r0
 8004a94:	4620      	mov	r0, r4
 8004a96:	f7ff ffdb 	bl	8004a50 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd90      	pop	{r4, r7, pc}
 8004aa4:	080211a0 	.word	0x080211a0

08004aa8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f00b ffae 	bl	8010a14 <_ZN10UtestShellC1Ev>
 8004ab8:	4a03      	ldr	r2, [pc, #12]	; (8004ac8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	0802498c 	.word	0x0802498c

08004acc <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af04      	add	r7, sp, #16
 8004ad2:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004ad4:	f00d fb56 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8004ad8:	4604      	mov	r4, r0
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	3338      	adds	r3, #56	; 0x38
 8004ade:	681d      	ldr	r5, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff f897 	bl	8003c18 <ringBuffer_capacity>
 8004aea:	4603      	mov	r3, r0
 8004aec:	461e      	mov	r6, r3
 8004aee:	f00d fb59 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004af2:	4603      	mov	r3, r0
 8004af4:	9302      	str	r3, [sp, #8]
 8004af6:	2383      	movs	r3, #131	; 0x83
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004b00:	4632      	mov	r2, r6
 8004b02:	2132      	movs	r1, #50	; 0x32
 8004b04:	4620      	mov	r0, r4
 8004b06:	47a8      	blx	r5

}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b10:	080211a0 	.word	0x080211a0
 8004b14:	0802148c 	.word	0x0802148c

08004b18 <_Z18UART_Transmit_FakePh>:

//char TxString[50];

void UART_Transmit_Fake(uint8_t* data)
{
 8004b18:	b5b0      	push	{r4, r5, r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
	mock().actualCall("UART_Transmit_Fake").withParameter("data", data);
 8004b20:	f107 0308 	add.w	r3, r7, #8
 8004b24:	491c      	ldr	r1, [pc, #112]	; (8004b98 <_Z18UART_Transmit_FakePh+0x80>)
 8004b26:	4618      	mov	r0, r3
 8004b28:	f005 ff49 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8004b2c:	f107 0308 	add.w	r3, r7, #8
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f004 f81c 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004b38:	4604      	mov	r4, r0
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	3318      	adds	r3, #24
 8004b3e:	681d      	ldr	r5, [r3, #0]
 8004b40:	f107 0310 	add.w	r3, r7, #16
 8004b44:	4915      	ldr	r1, [pc, #84]	; (8004b9c <_Z18UART_Transmit_FakePh+0x84>)
 8004b46:	4618      	mov	r0, r3
 8004b48:	f005 ff39 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8004b4c:	f107 0310 	add.w	r3, r7, #16
 8004b50:	4619      	mov	r1, r3
 8004b52:	4620      	mov	r0, r4
 8004b54:	47a8      	blx	r5
 8004b56:	4604      	mov	r4, r0
 8004b58:	f107 0318 	add.w	r3, r7, #24
 8004b5c:	4910      	ldr	r1, [pc, #64]	; (8004ba0 <_Z18UART_Transmit_FakePh+0x88>)
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f005 ff2d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8004b64:	f107 0318 	add.w	r3, r7, #24
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f7ff fa2e 	bl	8003fce <_ZN14MockActualCall13withParameterERK12SimpleStringPv>
 8004b72:	f107 0318 	add.w	r3, r7, #24
 8004b76:	4618      	mov	r0, r3
 8004b78:	f006 fad9 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8004b7c:	f107 0310 	add.w	r3, r7, #16
 8004b80:	4618      	mov	r0, r3
 8004b82:	f006 fad4 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8004b86:	f107 0308 	add.w	r3, r7, #8
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f006 facf 	bl	800b12e <_ZN12SimpleStringD1Ev>
	//memcpy(TxString,data,sizeof(data));
}
 8004b90:	bf00      	nop
 8004b92:	3720      	adds	r7, #32
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bdb0      	pop	{r4, r5, r7, pc}
 8004b98:	080214c4 	.word	0x080214c4
 8004b9c:	080214c8 	.word	0x080214c8
 8004ba0:	080214dc 	.word	0x080214dc

08004ba4 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004ba4:	b5b0      	push	{r4, r5, r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004baa:	463b      	mov	r3, r7
 8004bac:	4916      	ldr	r1, [pc, #88]	; (8004c08 <_Z17UART_Receive_Fakev+0x64>)
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f005 ff05 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8004bb4:	463b      	mov	r3, r7
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f003 ffd9 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	3318      	adds	r3, #24
 8004bc4:	681d      	ldr	r5, [r3, #0]
 8004bc6:	f107 0308 	add.w	r3, r7, #8
 8004bca:	4910      	ldr	r1, [pc, #64]	; (8004c0c <_Z17UART_Receive_Fakev+0x68>)
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f005 fef6 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8004bd2:	f107 0308 	add.w	r3, r7, #8
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4620      	mov	r0, r4
 8004bda:	47a8      	blx	r5
 8004bdc:	4603      	mov	r3, r0
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	3264      	adds	r2, #100	; 0x64
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	4790      	blx	r2
 8004be8:	4603      	mov	r3, r0
 8004bea:	b2dc      	uxtb	r4, r3
 8004bec:	f107 0308 	add.w	r3, r7, #8
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f006 fa9c 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8004bf6:	463b      	mov	r3, r7
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f006 fa98 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8004bfe:	4623      	mov	r3, r4
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bdb0      	pop	{r4, r5, r7, pc}
 8004c08:	080214c4 	.word	0x080214c4
 8004c0c:	080214e4 	.word	0x080214e4

08004c10 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8004c14:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <_Z12getTick_Fakev+0x30>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d103      	bne.n	8004c26 <_Z12getTick_Fakev+0x16>
		time = 0;
 8004c1e:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <_Z12getTick_Fakev+0x30>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	e004      	b.n	8004c30 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <_Z12getTick_Fakev+0x30>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	4a04      	ldr	r2, [pc, #16]	; (8004c40 <_Z12getTick_Fakev+0x30>)
 8004c2e:	6013      	str	r3, [r2, #0]
	return time;
 8004c30:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <_Z12getTick_Fakev+0x30>)
 8004c32:	681b      	ldr	r3, [r3, #0]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	200005b8 	.word	0x200005b8

08004c44 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8004c4c:	2364      	movs	r3, #100	; 0x64
 8004c4e:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8004c50:	4904      	ldr	r1, [pc, #16]	; (8004c64 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8004c52:	4805      	ldr	r0, [pc, #20]	; (8004c68 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8004c54:	f7fe fe58 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);

	}
 8004c58:	bf00      	nop
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	08004c11 	.word	0x08004c11
 8004c64:	08004ba5 	.word	0x08004ba5
 8004c68:	08004b19 	.word	0x08004b19

08004c6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
	{

		mock().clear();
 8004c74:	f107 0308 	add.w	r3, r7, #8
 8004c78:	490c      	ldr	r1, [pc, #48]	; (8004cac <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x40>)
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f005 fe9f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8004c80:	f107 0308 	add.w	r3, r7, #8
 8004c84:	2100      	movs	r1, #0
 8004c86:	4618      	mov	r0, r3
 8004c88:	f003 ff72 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	329c      	adds	r2, #156	; 0x9c
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	4618      	mov	r0, r3
 8004c96:	4790      	blx	r2
 8004c98:	f107 0308 	add.w	r3, r7, #8
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f006 fa46 	bl	800b12e <_ZN12SimpleStringD1Ev>
	}
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	080214c4 	.word	0x080214c4

08004cb0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f00d fa8c 	bl	80121d8 <_ZN5UtestC1Ev>
 8004cc0:	4a03      	ldr	r2, [pc, #12]	; (8004cd0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	0802496c 	.word	0x0802496c

08004cd4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	4a05      	ldr	r2, [pc, #20]	; (8004cf4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f00d fa87 	bl	80121f8 <_ZN5UtestD1Ev>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	0802496c 	.word	0x0802496c

08004cf8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ffe7 	bl	8004cd4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8004d06:	2104      	movs	r1, #4
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f003 faa9 	bl	8008260 <_ZdlPvj>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff ffc4 	bl	8004cb0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004d28:	4a03      	ldr	r2, [pc, #12]	; (8004d38 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	0802494c 	.word	0x0802494c

08004d3c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8004d3c:	b590      	push	{r4, r7, lr}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	22b8      	movs	r2, #184	; 0xb8
 8004d46:	4906      	ldr	r1, [pc, #24]	; (8004d60 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8004d48:	2004      	movs	r0, #4
 8004d4a:	f003 fa75 	bl	8008238 <_ZnwjPKci>
 8004d4e:	4604      	mov	r4, r0
 8004d50:	4620      	mov	r0, r4
 8004d52:	f7ff ffe1 	bl	8004d18 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8004d56:	4623      	mov	r3, r4
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd90      	pop	{r4, r7, pc}
 8004d60:	080211a0 	.word	0x080211a0

08004d64 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f00b fe50 	bl	8010a14 <_ZN10UtestShellC1Ev>
 8004d74:	4a03      	ldr	r2, [pc, #12]	; (8004d84 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	080248a0 	.word	0x080248a0

08004d88 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8004d88:	b5b0      	push	{r4, r5, r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af04      	add	r7, sp, #16
 8004d8e:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8004d90:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004d92:	4a11      	ldr	r2, [pc, #68]	; (8004dd8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8004d94:	601a      	str	r2, [r3, #0]
	int result = ESP_Init(transmit,
 8004d96:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004d98:	6818      	ldr	r0, [r3, #0]
 8004d9a:	2364      	movs	r3, #100	; 0x64
 8004d9c:	4a0f      	ldr	r2, [pc, #60]	; (8004ddc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8004d9e:	4910      	ldr	r1, [pc, #64]	; (8004de0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8004da0:	f7fe fdb2 	bl	8003908 <ESP_Init>
 8004da4:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 8004da6:	f00d f9ed 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8004daa:	4604      	mov	r4, r0
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	3338      	adds	r3, #56	; 0x38
 8004db0:	681d      	ldr	r5, [r3, #0]
 8004db2:	f00d f9f7 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004db6:	4603      	mov	r3, r0
 8004db8:	9302      	str	r3, [sp, #8]
 8004dba:	23c6      	movs	r3, #198	; 0xc6
 8004dbc:	9301      	str	r3, [sp, #4]
 8004dbe:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	4620      	mov	r0, r4
 8004dca:	47a8      	blx	r5

}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8004dd4:	200005bc 	.word	0x200005bc
 8004dd8:	08004b19 	.word	0x08004b19
 8004ddc:	08004c11 	.word	0x08004c11
 8004de0:	08004ba5 	.word	0x08004ba5
 8004de4:	080211a0 	.word	0x080211a0
 8004de8:	080214f8 	.word	0x080214f8

08004dec <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff ff5a 	bl	8004cb0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004dfc:	4a03      	ldr	r2, [pc, #12]	; (8004e0c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	08024880 	.word	0x08024880

08004e10 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8004e10:	b590      	push	{r4, r7, lr}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	22ca      	movs	r2, #202	; 0xca
 8004e1a:	4906      	ldr	r1, [pc, #24]	; (8004e34 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8004e1c:	2004      	movs	r0, #4
 8004e1e:	f003 fa0b 	bl	8008238 <_ZnwjPKci>
 8004e22:	4604      	mov	r4, r0
 8004e24:	4620      	mov	r0, r4
 8004e26:	f7ff ffe1 	bl	8004dec <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 8004e2a:	4623      	mov	r3, r4
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd90      	pop	{r4, r7, pc}
 8004e34:	080211a0 	.word	0x080211a0

08004e38 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f00b fde6 	bl	8010a14 <_ZN10UtestShellC1Ev>
 8004e48:	4a03      	ldr	r2, [pc, #12]	; (8004e58 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	080247d4 	.word	0x080247d4

08004e5c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8004e5c:	b5b0      	push	{r4, r5, r7, lr}
 8004e5e:	b090      	sub	sp, #64	; 0x40
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t *)"Test");
 8004e64:	f107 0308 	add.w	r3, r7, #8
 8004e68:	4947      	ldr	r1, [pc, #284]	; (8004f88 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f005 fda7 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8004e70:	f107 0308 	add.w	r3, r7, #8
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f003 fe7a 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	330c      	adds	r3, #12
 8004e82:	681d      	ldr	r5, [r3, #0]
 8004e84:	f107 0310 	add.w	r3, r7, #16
 8004e88:	4940      	ldr	r1, [pc, #256]	; (8004f8c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x130>)
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f005 fd97 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8004e90:	f107 0310 	add.w	r3, r7, #16
 8004e94:	4619      	mov	r1, r3
 8004e96:	4620      	mov	r0, r4
 8004e98:	47a8      	blx	r5
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	f107 0318 	add.w	r3, r7, #24
 8004ea0:	493b      	ldr	r1, [pc, #236]	; (8004f90 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x134>)
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f005 fd8b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8004ea8:	f107 0318 	add.w	r3, r7, #24
 8004eac:	4a39      	ldr	r2, [pc, #228]	; (8004f94 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x138>)
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f7ff f89f 	bl	8003ff4 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>
 8004eb6:	f107 0318 	add.w	r3, r7, #24
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f006 f937 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8004ec0:	f107 0310 	add.w	r3, r7, #16
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f006 f932 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8004eca:	f107 0308 	add.w	r3, r7, #8
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f006 f92d 	bl	800b12e <_ZN12SimpleStringD1Ev>
	Send_AT_Command((char*)"Test");
 8004ed4:	482f      	ldr	r0, [pc, #188]	; (8004f94 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x138>)
 8004ed6:	f7fe fd43 	bl	8003960 <Send_AT_Command>
	//STRCMP_EQUAL("Test",TxString);
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t *)"AT\r\n");
 8004eda:	f107 0320 	add.w	r3, r7, #32
 8004ede:	492a      	ldr	r1, [pc, #168]	; (8004f88 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f005 fd6c 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8004ee6:	f107 0320 	add.w	r3, r7, #32
 8004eea:	2100      	movs	r1, #0
 8004eec:	4618      	mov	r0, r3
 8004eee:	f003 fe3f 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	681d      	ldr	r5, [r3, #0]
 8004efa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004efe:	4923      	ldr	r1, [pc, #140]	; (8004f8c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x130>)
 8004f00:	4618      	mov	r0, r3
 8004f02:	f005 fd5c 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8004f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	47a8      	blx	r5
 8004f10:	4604      	mov	r4, r0
 8004f12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f16:	491e      	ldr	r1, [pc, #120]	; (8004f90 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x134>)
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f005 fd50 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8004f1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f22:	4a1d      	ldr	r2, [pc, #116]	; (8004f98 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x13c>)
 8004f24:	4619      	mov	r1, r3
 8004f26:	4620      	mov	r0, r4
 8004f28:	f7ff f864 	bl	8003ff4 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>
 8004f2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f30:	4618      	mov	r0, r3
 8004f32:	f006 f8fc 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8004f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f006 f8f7 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8004f40:	f107 0320 	add.w	r3, r7, #32
 8004f44:	4618      	mov	r0, r3
 8004f46:	f006 f8f2 	bl	800b12e <_ZN12SimpleStringD1Ev>
	Send_AT_Command((char*)"AT\r\n");
 8004f4a:	4813      	ldr	r0, [pc, #76]	; (8004f98 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x13c>)
 8004f4c:	f7fe fd08 	bl	8003960 <Send_AT_Command>
	mock().checkExpectations();
 8004f50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f54:	490c      	ldr	r1, [pc, #48]	; (8004f88 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8004f56:	4618      	mov	r0, r3
 8004f58:	f005 fd31 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8004f5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f60:	2100      	movs	r1, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f003 fe04 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	3294      	adds	r2, #148	; 0x94
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	4790      	blx	r2
 8004f74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f006 f8d8 	bl	800b12e <_ZN12SimpleStringD1Ev>

}
 8004f7e:	bf00      	nop
 8004f80:	3740      	adds	r7, #64	; 0x40
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bdb0      	pop	{r4, r5, r7, pc}
 8004f86:	bf00      	nop
 8004f88:	080214c4 	.word	0x080214c4
 8004f8c:	080214c8 	.word	0x080214c8
 8004f90:	080214dc 	.word	0x080214dc
 8004f94:	080213cc 	.word	0x080213cc
 8004f98:	08021518 	.word	0x08021518

08004f9c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff fe82 	bl	8004cb0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004fac:	4a03      	ldr	r2, [pc, #12]	; (8004fbc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	080247b4 	.word	0x080247b4

08004fc0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 8004fc0:	b590      	push	{r4, r7, lr}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	22d5      	movs	r2, #213	; 0xd5
 8004fca:	4906      	ldr	r1, [pc, #24]	; (8004fe4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8004fcc:	2004      	movs	r0, #4
 8004fce:	f003 f933 	bl	8008238 <_ZnwjPKci>
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f7ff ffe1 	bl	8004f9c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 8004fda:	4623      	mov	r3, r4
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd90      	pop	{r4, r7, pc}
 8004fe4:	080211a0 	.word	0x080211a0

08004fe8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f00b fd0e 	bl	8010a14 <_ZN10UtestShellC1Ev>
 8004ff8:	4a03      	ldr	r2, [pc, #12]	; (8005008 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	08024708 	.word	0x08024708

0800500c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 800500c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800500e:	b099      	sub	sp, #100	; 0x64
 8005010:	af04      	add	r7, sp, #16
 8005012:	6078      	str	r0, [r7, #4]

	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'O');
 8005014:	f107 0308 	add.w	r3, r7, #8
 8005018:	4973      	ldr	r1, [pc, #460]	; (80051e8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 800501a:	4618      	mov	r0, r3
 800501c:	f005 fccf 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8005020:	f107 0308 	add.w	r3, r7, #8
 8005024:	2100      	movs	r1, #0
 8005026:	4618      	mov	r0, r3
 8005028:	f003 fda2 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800502c:	4604      	mov	r4, r0
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	330c      	adds	r3, #12
 8005032:	681d      	ldr	r5, [r3, #0]
 8005034:	f107 0310 	add.w	r3, r7, #16
 8005038:	496c      	ldr	r1, [pc, #432]	; (80051ec <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 800503a:	4618      	mov	r0, r3
 800503c:	f005 fcbf 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8005040:	f107 0310 	add.w	r3, r7, #16
 8005044:	4619      	mov	r1, r3
 8005046:	4620      	mov	r0, r4
 8005048:	47a8      	blx	r5
 800504a:	4603      	mov	r3, r0
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	3264      	adds	r2, #100	; 0x64
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	214f      	movs	r1, #79	; 0x4f
 8005054:	4618      	mov	r0, r3
 8005056:	4790      	blx	r2
 8005058:	f107 0310 	add.w	r3, r7, #16
 800505c:	4618      	mov	r0, r3
 800505e:	f006 f866 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8005062:	f107 0308 	add.w	r3, r7, #8
 8005066:	4618      	mov	r0, r3
 8005068:	f006 f861 	bl	800b12e <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 800506c:	f7fe fc86 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'K');
 8005070:	f107 0318 	add.w	r3, r7, #24
 8005074:	495c      	ldr	r1, [pc, #368]	; (80051e8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 8005076:	4618      	mov	r0, r3
 8005078:	f005 fca1 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800507c:	f107 0318 	add.w	r3, r7, #24
 8005080:	2100      	movs	r1, #0
 8005082:	4618      	mov	r0, r3
 8005084:	f003 fd74 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005088:	4604      	mov	r4, r0
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	681d      	ldr	r5, [r3, #0]
 8005090:	f107 0320 	add.w	r3, r7, #32
 8005094:	4955      	ldr	r1, [pc, #340]	; (80051ec <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 8005096:	4618      	mov	r0, r3
 8005098:	f005 fc91 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800509c:	f107 0320 	add.w	r3, r7, #32
 80050a0:	4619      	mov	r1, r3
 80050a2:	4620      	mov	r0, r4
 80050a4:	47a8      	blx	r5
 80050a6:	4603      	mov	r3, r0
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	3264      	adds	r2, #100	; 0x64
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	214b      	movs	r1, #75	; 0x4b
 80050b0:	4618      	mov	r0, r3
 80050b2:	4790      	blx	r2
 80050b4:	f107 0320 	add.w	r3, r7, #32
 80050b8:	4618      	mov	r0, r3
 80050ba:	f006 f838 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80050be:	f107 0318 	add.w	r3, r7, #24
 80050c2:	4618      	mov	r0, r3
 80050c4:	f006 f833 	bl	800b12e <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80050c8:	f7fe fc58 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\r');
 80050cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050d0:	4945      	ldr	r1, [pc, #276]	; (80051e8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 80050d2:	4618      	mov	r0, r3
 80050d4:	f005 fc73 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80050d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050dc:	2100      	movs	r1, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	f003 fd46 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80050e4:	4604      	mov	r4, r0
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	681d      	ldr	r5, [r3, #0]
 80050ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050f0:	493e      	ldr	r1, [pc, #248]	; (80051ec <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 80050f2:	4618      	mov	r0, r3
 80050f4:	f005 fc63 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80050f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050fc:	4619      	mov	r1, r3
 80050fe:	4620      	mov	r0, r4
 8005100:	47a8      	blx	r5
 8005102:	4603      	mov	r3, r0
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	3264      	adds	r2, #100	; 0x64
 8005108:	6812      	ldr	r2, [r2, #0]
 800510a:	210d      	movs	r1, #13
 800510c:	4618      	mov	r0, r3
 800510e:	4790      	blx	r2
 8005110:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005114:	4618      	mov	r0, r3
 8005116:	f006 f80a 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800511a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800511e:	4618      	mov	r0, r3
 8005120:	f006 f805 	bl	800b12e <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005124:	f7fe fc2a 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\n');
 8005128:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800512c:	492e      	ldr	r1, [pc, #184]	; (80051e8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 800512e:	4618      	mov	r0, r3
 8005130:	f005 fc45 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8005134:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005138:	2100      	movs	r1, #0
 800513a:	4618      	mov	r0, r3
 800513c:	f003 fd18 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005140:	4604      	mov	r4, r0
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	681d      	ldr	r5, [r3, #0]
 8005148:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800514c:	4927      	ldr	r1, [pc, #156]	; (80051ec <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 800514e:	4618      	mov	r0, r3
 8005150:	f005 fc35 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8005154:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005158:	4619      	mov	r1, r3
 800515a:	4620      	mov	r0, r4
 800515c:	47a8      	blx	r5
 800515e:	4603      	mov	r3, r0
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	3264      	adds	r2, #100	; 0x64
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	210a      	movs	r1, #10
 8005168:	4618      	mov	r0, r3
 800516a:	4790      	blx	r2
 800516c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005170:	4618      	mov	r0, r3
 8005172:	f005 ffdc 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8005176:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800517a:	4618      	mov	r0, r3
 800517c:	f005 ffd7 	bl	800b12e <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005180:	f7fe fbfc 	bl	800397c <ESP_UART_ReceiveHandler>

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the rx ring buffer.
 8005184:	f00c fffe 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8005188:	4604      	mov	r4, r0
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	3324      	adds	r3, #36	; 0x24
 800518e:	681d      	ldr	r5, [r3, #0]
 8005190:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68de      	ldr	r6, [r3, #12]
 8005196:	f00d f805 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800519a:	4603      	mov	r3, r0
 800519c:	9302      	str	r3, [sp, #8]
 800519e:	23e1      	movs	r3, #225	; 0xe1
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e8>)
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	2300      	movs	r3, #0
 80051a8:	4632      	mov	r2, r6
 80051aa:	4913      	ldr	r1, [pc, #76]	; (80051f8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ec>)
 80051ac:	4620      	mov	r0, r4
 80051ae:	47a8      	blx	r5
	mock().checkExpectations();
 80051b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80051b4:	490c      	ldr	r1, [pc, #48]	; (80051e8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 80051b6:	4618      	mov	r0, r3
 80051b8:	f005 fc01 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80051bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80051c0:	2100      	movs	r1, #0
 80051c2:	4618      	mov	r0, r3
 80051c4:	f003 fcd4 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80051c8:	4603      	mov	r3, r0
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	3294      	adds	r2, #148	; 0x94
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	4790      	blx	r2
 80051d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80051d8:	4618      	mov	r0, r3
 80051da:	f005 ffa8 	bl	800b12e <_ZN12SimpleStringD1Ev>

}
 80051de:	bf00      	nop
 80051e0:	3754      	adds	r7, #84	; 0x54
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051e6:	bf00      	nop
 80051e8:	080214c4 	.word	0x080214c4
 80051ec:	080214e4 	.word	0x080214e4
 80051f0:	20000494 	.word	0x20000494
 80051f4:	080211a0 	.word	0x080211a0
 80051f8:	08021520 	.word	0x08021520

080051fc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff fd52 	bl	8004cb0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800520c:	4a03      	ldr	r2, [pc, #12]	; (800521c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	080246e8 	.word	0x080246e8

08005220 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 8005220:	b590      	push	{r4, r7, lr}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	22e6      	movs	r2, #230	; 0xe6
 800522a:	4906      	ldr	r1, [pc, #24]	; (8005244 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 800522c:	2004      	movs	r0, #4
 800522e:	f003 f803 	bl	8008238 <_ZnwjPKci>
 8005232:	4604      	mov	r4, r0
 8005234:	4620      	mov	r0, r4
 8005236:	f7ff ffe1 	bl	80051fc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 800523a:	4623      	mov	r3, r4
 800523c:	4618      	mov	r0, r3
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	bd90      	pop	{r4, r7, pc}
 8005244:	080211a0 	.word	0x080211a0

08005248 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4618      	mov	r0, r3
 8005254:	f00b fbde 	bl	8010a14 <_ZN10UtestShellC1Ev>
 8005258:	4a03      	ldr	r2, [pc, #12]	; (8005268 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	0802463c 	.word	0x0802463c

0800526c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 800526c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800526e:	b093      	sub	sp, #76	; 0x4c
 8005270:	af04      	add	r7, sp, #16
 8005272:	6078      	str	r0, [r7, #4]
	char response[10] = "OK\r\n";
 8005274:	4a40      	ldr	r2, [pc, #256]	; (8005378 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x10c>)
 8005276:	f107 030c 	add.w	r3, r7, #12
 800527a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800527e:	6018      	str	r0, [r3, #0]
 8005280:	3304      	adds	r3, #4
 8005282:	7019      	strb	r1, [r3, #0]
 8005284:	f107 0311 	add.w	r3, r7, #17
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	711a      	strb	r2, [r3, #4]

	for(int i=0;i<(int)strlen(response);i++)
 800528e:	2300      	movs	r3, #0
 8005290:	637b      	str	r3, [r7, #52]	; 0x34
 8005292:	f107 030c 	add.w	r3, r7, #12
 8005296:	4618      	mov	r0, r3
 8005298:	f7fa ffd0 	bl	800023c <strlen>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a2:	4293      	cmp	r3, r2
 80052a4:	da35      	bge.n	8005312 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xa6>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80052a6:	f107 0318 	add.w	r3, r7, #24
 80052aa:	4934      	ldr	r1, [pc, #208]	; (800537c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x110>)
 80052ac:	4618      	mov	r0, r3
 80052ae:	f005 fb86 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80052b2:	f107 0318 	add.w	r3, r7, #24
 80052b6:	2100      	movs	r1, #0
 80052b8:	4618      	mov	r0, r3
 80052ba:	f003 fc59 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80052be:	4604      	mov	r4, r0
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	681d      	ldr	r5, [r3, #0]
 80052c6:	f107 0320 	add.w	r3, r7, #32
 80052ca:	492d      	ldr	r1, [pc, #180]	; (8005380 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x114>)
 80052cc:	4618      	mov	r0, r3
 80052ce:	f005 fb76 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80052d2:	f107 0320 	add.w	r3, r7, #32
 80052d6:	4619      	mov	r1, r3
 80052d8:	4620      	mov	r0, r4
 80052da:	47a8      	blx	r5
 80052dc:	4603      	mov	r3, r0
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	3264      	adds	r2, #100	; 0x64
 80052e2:	6812      	ldr	r2, [r2, #0]
 80052e4:	f107 000c 	add.w	r0, r7, #12
 80052e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052ea:	4401      	add	r1, r0
 80052ec:	7809      	ldrb	r1, [r1, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	4790      	blx	r2
 80052f2:	f107 0320 	add.w	r3, r7, #32
 80052f6:	4618      	mov	r0, r3
 80052f8:	f005 ff19 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80052fc:	f107 0318 	add.w	r3, r7, #24
 8005300:	4618      	mov	r0, r3
 8005302:	f005 ff14 	bl	800b12e <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005306:	f7fe fb39 	bl	800397c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 800530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530c:	3301      	adds	r3, #1
 800530e:	637b      	str	r3, [r7, #52]	; 0x34
 8005310:	e7bf      	b.n	8005292 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x26>
	}

	uint32_t result = Read_Response((char*)"OK");
 8005312:	481c      	ldr	r0, [pc, #112]	; (8005384 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x118>)
 8005314:	f7fe fb4c 	bl	80039b0 <Read_Response>
 8005318:	6338      	str	r0, [r7, #48]	; 0x30

	LONGS_EQUAL(1,result);
 800531a:	f00c ff33 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 800531e:	4604      	mov	r4, r0
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	3338      	adds	r3, #56	; 0x38
 8005324:	681d      	ldr	r5, [r3, #0]
 8005326:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8005328:	f00c ff3c 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800532c:	4603      	mov	r3, r0
 800532e:	9302      	str	r3, [sp, #8]
 8005330:	23f2      	movs	r3, #242	; 0xf2
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	4b14      	ldr	r3, [pc, #80]	; (8005388 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x11c>)
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	4b14      	ldr	r3, [pc, #80]	; (800538c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x120>)
 800533a:	4632      	mov	r2, r6
 800533c:	2101      	movs	r1, #1
 800533e:	4620      	mov	r0, r4
 8005340:	47a8      	blx	r5
	mock().checkExpectations();
 8005342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005346:	490d      	ldr	r1, [pc, #52]	; (800537c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x110>)
 8005348:	4618      	mov	r0, r3
 800534a:	f005 fb38 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800534e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005352:	2100      	movs	r1, #0
 8005354:	4618      	mov	r0, r3
 8005356:	f003 fc0b 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800535a:	4603      	mov	r3, r0
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	3294      	adds	r2, #148	; 0x94
 8005360:	6812      	ldr	r2, [r2, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	4790      	blx	r2
 8005366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800536a:	4618      	mov	r0, r3
 800536c:	f005 fedf 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8005370:	bf00      	nop
 8005372:	373c      	adds	r7, #60	; 0x3c
 8005374:	46bd      	mov	sp, r7
 8005376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005378:	0802152c 	.word	0x0802152c
 800537c:	080214c4 	.word	0x080214c4
 8005380:	080214e4 	.word	0x080214e4
 8005384:	08021528 	.word	0x08021528
 8005388:	080211a0 	.word	0x080211a0
 800538c:	080214f8 	.word	0x080214f8

08005390 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:
//	mock().checkExpectations();
//
//}


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff fc88 	bl	8004cb0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80053a0:	4a03      	ldr	r2, [pc, #12]	; (80053b0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	0802461c 	.word	0x0802461c

080053b4 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80053c0:	4906      	ldr	r1, [pc, #24]	; (80053dc <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x28>)
 80053c2:	2004      	movs	r0, #4
 80053c4:	f002 ff38 	bl	8008238 <_ZnwjPKci>
 80053c8:	4604      	mov	r4, r0
 80053ca:	4620      	mov	r0, r4
 80053cc:	f7ff ffe0 	bl	8005390 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 80053d0:	4623      	mov	r3, r4
 80053d2:	4618      	mov	r0, r3
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd90      	pop	{r4, r7, pc}
 80053da:	bf00      	nop
 80053dc:	080211a0 	.word	0x080211a0

080053e0 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f00b fb12 	bl	8010a14 <_ZN10UtestShellC1Ev>
 80053f0:	4a03      	ldr	r2, [pc, #12]	; (8005400 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	08024570 	.word	0x08024570

08005404 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8005404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005406:	b089      	sub	sp, #36	; 0x24
 8005408:	af04      	add	r7, sp, #16
 800540a:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 800540c:	2305      	movs	r3, #5
 800540e:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		response_state = Wait_Response((char*)"OK", 1000);
 8005410:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005414:	4811      	ldr	r0, [pc, #68]	; (800545c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 8005416:	f7fe fadd 	bl	80039d4 <Wait_Response>
 800541a:	4603      	mov	r3, r0
 800541c:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b05      	cmp	r3, #5
 8005422:	d100      	bne.n	8005426 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 8005424:	e7f4      	b.n	8005410 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 8005426:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8005428:	f00c feac 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 800542c:	4604      	mov	r4, r0
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	3338      	adds	r3, #56	; 0x38
 8005432:	681d      	ldr	r5, [r3, #0]
 8005434:	7bfe      	ldrb	r6, [r7, #15]
 8005436:	f00c feb5 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800543a:	4603      	mov	r3, r0
 800543c:	9302      	str	r3, [sp, #8]
 800543e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8005442:	9301      	str	r3, [sp, #4]
 8005444:	4b06      	ldr	r3, [pc, #24]	; (8005460 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	4b06      	ldr	r3, [pc, #24]	; (8005464 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 800544a:	4632      	mov	r2, r6
 800544c:	2102      	movs	r1, #2
 800544e:	4620      	mov	r0, r4
 8005450:	47a8      	blx	r5

}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800545a:	bf00      	nop
 800545c:	08021528 	.word	0x08021528
 8005460:	080211a0 	.word	0x080211a0
 8005464:	08021538 	.word	0x08021538

08005468 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff fc1c 	bl	8004cb0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005478:	4a03      	ldr	r2, [pc, #12]	; (8005488 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	08024550 	.word	0x08024550

0800548c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 800548c:	b590      	push	{r4, r7, lr}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8005498:	4906      	ldr	r1, [pc, #24]	; (80054b4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 800549a:	2004      	movs	r0, #4
 800549c:	f002 fecc 	bl	8008238 <_ZnwjPKci>
 80054a0:	4604      	mov	r4, r0
 80054a2:	4620      	mov	r0, r4
 80054a4:	f7ff ffe0 	bl	8005468 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 80054a8:	4623      	mov	r3, r4
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd90      	pop	{r4, r7, pc}
 80054b2:	bf00      	nop
 80054b4:	080211a0 	.word	0x080211a0

080054b8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f00b faa6 	bl	8010a14 <_ZN10UtestShellC1Ev>
 80054c8:	4a03      	ldr	r2, [pc, #12]	; (80054d8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	080244a4 	.word	0x080244a4

080054dc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 80054dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054de:	b091      	sub	sp, #68	; 0x44
 80054e0:	af04      	add	r7, sp, #16
 80054e2:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 80054e4:	2305      	movs	r3, #5
 80054e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	char response[10] = "OK\r\n";
 80054ea:	4a3b      	ldr	r2, [pc, #236]	; (80055d8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 80054ec:	f107 030c 	add.w	r3, r7, #12
 80054f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054f4:	6018      	str	r0, [r3, #0]
 80054f6:	3304      	adds	r3, #4
 80054f8:	7019      	strb	r1, [r3, #0]
 80054fa:	f107 0311 	add.w	r3, r7, #17
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	711a      	strb	r2, [r3, #4]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 8005504:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005508:	4834      	ldr	r0, [pc, #208]	; (80055dc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 800550a:	f7fe fa63 	bl	80039d4 <Wait_Response>
 800550e:	4603      	mov	r3, r0
 8005510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(response_state != IDLE)
 8005514:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005518:	2b05      	cmp	r3, #5
 800551a:	d141      	bne.n	80055a0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xc4>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 800551c:	2300      	movs	r3, #0
 800551e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005520:	f107 030c 	add.w	r3, r7, #12
 8005524:	4618      	mov	r0, r3
 8005526:	f7fa fe89 	bl	800023c <strlen>
 800552a:	4603      	mov	r3, r0
 800552c:	461a      	mov	r2, r3
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	4293      	cmp	r3, r2
 8005532:	dae7      	bge.n	8005504 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x28>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005534:	f107 0318 	add.w	r3, r7, #24
 8005538:	4929      	ldr	r1, [pc, #164]	; (80055e0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 800553a:	4618      	mov	r0, r3
 800553c:	f005 fa3f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8005540:	f107 0318 	add.w	r3, r7, #24
 8005544:	2100      	movs	r1, #0
 8005546:	4618      	mov	r0, r3
 8005548:	f003 fb12 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800554c:	4604      	mov	r4, r0
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	330c      	adds	r3, #12
 8005552:	681d      	ldr	r5, [r3, #0]
 8005554:	f107 0320 	add.w	r3, r7, #32
 8005558:	4922      	ldr	r1, [pc, #136]	; (80055e4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x108>)
 800555a:	4618      	mov	r0, r3
 800555c:	f005 fa2f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8005560:	f107 0320 	add.w	r3, r7, #32
 8005564:	4619      	mov	r1, r3
 8005566:	4620      	mov	r0, r4
 8005568:	47a8      	blx	r5
 800556a:	4603      	mov	r3, r0
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	3264      	adds	r2, #100	; 0x64
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	f107 000c 	add.w	r0, r7, #12
 8005576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005578:	4401      	add	r1, r0
 800557a:	7809      	ldrb	r1, [r1, #0]
 800557c:	4618      	mov	r0, r3
 800557e:	4790      	blx	r2
 8005580:	f107 0320 	add.w	r3, r7, #32
 8005584:	4618      	mov	r0, r3
 8005586:	f005 fdd2 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800558a:	f107 0318 	add.w	r3, r7, #24
 800558e:	4618      	mov	r0, r3
 8005590:	f005 fdcd 	bl	800b12e <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005594:	f7fe f9f2 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	3301      	adds	r3, #1
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800559e:	e7bf      	b.n	8005520 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x44>
			break;
 80055a0:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 80055a2:	f00c fdef 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 80055a6:	4604      	mov	r4, r0
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	3338      	adds	r3, #56	; 0x38
 80055ac:	681d      	ldr	r5, [r3, #0]
 80055ae:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
 80055b2:	f00c fdf7 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80055b6:	4603      	mov	r3, r0
 80055b8:	9302      	str	r3, [sp, #8]
 80055ba:	f240 132f 	movw	r3, #303	; 0x12f
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x10c>)
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x110>)
 80055c6:	4632      	mov	r2, r6
 80055c8:	2100      	movs	r1, #0
 80055ca:	4620      	mov	r0, r4
 80055cc:	47a8      	blx	r5
}
 80055ce:	bf00      	nop
 80055d0:	3734      	adds	r7, #52	; 0x34
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055d6:	bf00      	nop
 80055d8:	0802152c 	.word	0x0802152c
 80055dc:	08021528 	.word	0x08021528
 80055e0:	080214c4 	.word	0x080214c4
 80055e4:	080214e4 	.word	0x080214e4
 80055e8:	080211a0 	.word	0x080211a0
 80055ec:	0802156c 	.word	0x0802156c

080055f0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff fb58 	bl	8004cb0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005600:	4a03      	ldr	r2, [pc, #12]	; (8005610 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	08024484 	.word	0x08024484

08005614 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005614:	b590      	push	{r4, r7, lr}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	f44f 7299 	mov.w	r2, #306	; 0x132
 8005620:	4906      	ldr	r1, [pc, #24]	; (800563c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005622:	2004      	movs	r0, #4
 8005624:	f002 fe08 	bl	8008238 <_ZnwjPKci>
 8005628:	4604      	mov	r4, r0
 800562a:	4620      	mov	r0, r4
 800562c:	f7ff ffe0 	bl	80055f0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 8005630:	4623      	mov	r3, r4
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	bd90      	pop	{r4, r7, pc}
 800563a:	bf00      	nop
 800563c:	080211a0 	.word	0x080211a0

08005640 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4618      	mov	r0, r3
 800564c:	f00b f9e2 	bl	8010a14 <_ZN10UtestShellC1Ev>
 8005650:	4a03      	ldr	r2, [pc, #12]	; (8005660 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	080243d8 	.word	0x080243d8

08005664 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af04      	add	r7, sp, #16
 800566a:	6078      	str	r0, [r7, #4]
	Status response;

	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 800566c:	4911      	ldr	r1, [pc, #68]	; (80056b4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x50>)
 800566e:	4812      	ldr	r0, [pc, #72]	; (80056b8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x54>)
 8005670:	f7fe f9ec 	bl	8003a4c <Connect_Wifi>
 8005674:	4603      	mov	r3, r0
 8005676:	73fb      	strb	r3, [r7, #15]
		if(response != IDLE)
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	2b05      	cmp	r3, #5
 800567c:	d100      	bne.n	8005680 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x1c>
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 800567e:	e7f5      	b.n	800566c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x8>
		{
			break;
 8005680:	bf00      	nop
		}
	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005682:	f00c fd7f 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8005686:	4604      	mov	r4, r0
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	3338      	adds	r3, #56	; 0x38
 800568c:	681d      	ldr	r5, [r3, #0]
 800568e:	7bfe      	ldrb	r6, [r7, #15]
 8005690:	f00c fd88 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005694:	4603      	mov	r3, r0
 8005696:	9302      	str	r3, [sp, #8]
 8005698:	f240 133f 	movw	r3, #319	; 0x13f
 800569c:	9301      	str	r3, [sp, #4]
 800569e:	4b07      	ldr	r3, [pc, #28]	; (80056bc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x58>)
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x5c>)
 80056a4:	4632      	mov	r2, r6
 80056a6:	2102      	movs	r1, #2
 80056a8:	4620      	mov	r0, r4
 80056aa:	47a8      	blx	r5

}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b4:	08021598 	.word	0x08021598
 80056b8:	080215a0 	.word	0x080215a0
 80056bc:	080211a0 	.word	0x080211a0
 80056c0:	080215a8 	.word	0x080215a8

080056c4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff faee 	bl	8004cb0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80056d4:	4a03      	ldr	r2, [pc, #12]	; (80056e4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4618      	mov	r0, r3
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	080243b8 	.word	0x080243b8

080056e8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 80056e8:	b590      	push	{r4, r7, lr}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	f240 1243 	movw	r2, #323	; 0x143
 80056f4:	4906      	ldr	r1, [pc, #24]	; (8005710 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 80056f6:	2004      	movs	r0, #4
 80056f8:	f002 fd9e 	bl	8008238 <_ZnwjPKci>
 80056fc:	4604      	mov	r4, r0
 80056fe:	4620      	mov	r0, r4
 8005700:	f7ff ffe0 	bl	80056c4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 8005704:	4623      	mov	r3, r4
 8005706:	4618      	mov	r0, r3
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	bd90      	pop	{r4, r7, pc}
 800570e:	bf00      	nop
 8005710:	080211a0 	.word	0x080211a0

08005714 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4618      	mov	r0, r3
 8005720:	f00b f978 	bl	8010a14 <_ZN10UtestShellC1Ev>
 8005724:	4a03      	ldr	r2, [pc, #12]	; (8005734 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4618      	mov	r0, r3
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	0802430c 	.word	0x0802430c

08005738 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8005738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800573a:	b0c1      	sub	sp, #260	; 0x104
 800573c:	af04      	add	r7, sp, #16
 800573e:	6078      	str	r0, [r7, #4]
	char response_arr[4][50] =
 8005740:	4a42      	ldr	r2, [pc, #264]	; (800584c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x114>)
 8005742:	f107 030c 	add.w	r3, r7, #12
 8005746:	4611      	mov	r1, r2
 8005748:	22c8      	movs	r2, #200	; 0xc8
 800574a:	4618      	mov	r0, r3
 800574c:	f018 fe0a 	bl	801e364 <memcpy>
	  "OK\r\n",									// check disconnect response
	  "ERROR\r\n"								// connect wifi command response
	};

	Status response;
	int i = 0;
 8005750:	2300      	movs	r3, #0
 8005752:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005756:	493e      	ldr	r1, [pc, #248]	; (8005850 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x118>)
 8005758:	483e      	ldr	r0, [pc, #248]	; (8005854 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x11c>)
 800575a:	f7fe f977 	bl	8003a4c <Connect_Wifi>
 800575e:	4603      	mov	r3, r0
 8005760:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
		if(response != IDLE)
 8005764:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8005768:	2b05      	cmp	r3, #5
 800576a:	d153      	bne.n	8005814 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xdc>
		{
			break;
		}
		for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800576c:	2300      	movs	r3, #0
 800576e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005772:	f107 020c 	add.w	r2, r7, #12
 8005776:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800577a:	2132      	movs	r1, #50	; 0x32
 800577c:	fb01 f303 	mul.w	r3, r1, r3
 8005780:	4413      	add	r3, r2
 8005782:	4618      	mov	r0, r3
 8005784:	f7fa fd5a 	bl	800023c <strlen>
 8005788:	4603      	mov	r3, r0
 800578a:	461a      	mov	r2, r3
 800578c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005790:	4293      	cmp	r3, r2
 8005792:	dae0      	bge.n	8005756 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response_arr[i][j]);
 8005794:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005798:	492f      	ldr	r1, [pc, #188]	; (8005858 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x120>)
 800579a:	4618      	mov	r0, r3
 800579c:	f005 f90f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80057a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80057a4:	2100      	movs	r1, #0
 80057a6:	4618      	mov	r0, r3
 80057a8:	f003 f9e2 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80057ac:	4604      	mov	r4, r0
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	681d      	ldr	r5, [r3, #0]
 80057b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80057b8:	4928      	ldr	r1, [pc, #160]	; (800585c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x124>)
 80057ba:	4618      	mov	r0, r3
 80057bc:	f005 f8ff 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80057c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80057c4:	4619      	mov	r1, r3
 80057c6:	4620      	mov	r0, r4
 80057c8:	47a8      	blx	r5
 80057ca:	4603      	mov	r3, r0
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	3264      	adds	r2, #100	; 0x64
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80057d6:	2032      	movs	r0, #50	; 0x32
 80057d8:	fb00 f101 	mul.w	r1, r0, r1
 80057dc:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 80057e0:	4408      	add	r0, r1
 80057e2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80057e6:	4401      	add	r1, r0
 80057e8:	39e4      	subs	r1, #228	; 0xe4
 80057ea:	7809      	ldrb	r1, [r1, #0]
 80057ec:	4618      	mov	r0, r3
 80057ee:	4790      	blx	r2
 80057f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80057f4:	4618      	mov	r0, r3
 80057f6:	f005 fc9a 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80057fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80057fe:	4618      	mov	r0, r3
 8005800:	f005 fc95 	bl	800b12e <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005804:	f7fe f8ba 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005808:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800580c:	3301      	adds	r3, #1
 800580e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005812:	e7ae      	b.n	8005772 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x3a>
			break;
 8005814:	bf00      	nop
		}
	}

	LONGS_EQUAL(CONNECTION_ERROR,response);
 8005816:	f00c fcb5 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 800581a:	4604      	mov	r4, r0
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	3338      	adds	r3, #56	; 0x38
 8005820:	681d      	ldr	r5, [r3, #0]
 8005822:	f897 60e7 	ldrb.w	r6, [r7, #231]	; 0xe7
 8005826:	f00c fcbd 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800582a:	4603      	mov	r3, r0
 800582c:	9302      	str	r3, [sp, #8]
 800582e:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8005832:	9301      	str	r3, [sp, #4]
 8005834:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x128>)
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x12c>)
 800583a:	4632      	mov	r2, r6
 800583c:	2104      	movs	r1, #4
 800583e:	4620      	mov	r0, r4
 8005840:	47a8      	blx	r5

}
 8005842:	bf00      	nop
 8005844:	37f4      	adds	r7, #244	; 0xf4
 8005846:	46bd      	mov	sp, r7
 8005848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800584a:	bf00      	nop
 800584c:	08021604 	.word	0x08021604
 8005850:	08021598 	.word	0x08021598
 8005854:	080215a0 	.word	0x080215a0
 8005858:	080214c4 	.word	0x080214c4
 800585c:	080214e4 	.word	0x080214e4
 8005860:	080211a0 	.word	0x080211a0
 8005864:	080215d4 	.word	0x080215d4

08005868 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff fa1c 	bl	8004cb0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005878:	4a03      	ldr	r2, [pc, #12]	; (8005888 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	080242ec 	.word	0x080242ec

0800588c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 800588c:	b590      	push	{r4, r7, lr}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8005898:	4906      	ldr	r1, [pc, #24]	; (80058b4 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 800589a:	2004      	movs	r0, #4
 800589c:	f002 fccc 	bl	8008238 <_ZnwjPKci>
 80058a0:	4604      	mov	r4, r0
 80058a2:	4620      	mov	r0, r4
 80058a4:	f7ff ffe0 	bl	8005868 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 80058a8:	4623      	mov	r3, r4
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd90      	pop	{r4, r7, pc}
 80058b2:	bf00      	nop
 80058b4:	080211a0 	.word	0x080211a0

080058b8 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f00b f8a6 	bl	8010a14 <_ZN10UtestShellC1Ev>
 80058c8:	4a03      	ldr	r2, [pc, #12]	; (80058d8 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	08024240 	.word	0x08024240

080058dc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 80058dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058de:	b0c1      	sub	sp, #260	; 0x104
 80058e0:	af04      	add	r7, sp, #16
 80058e2:	6078      	str	r0, [r7, #4]
	char response_arr[4][50] =
 80058e4:	4a42      	ldr	r2, [pc, #264]	; (80059f0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x114>)
 80058e6:	f107 030c 	add.w	r3, r7, #12
 80058ea:	4611      	mov	r1, r2
 80058ec:	22c8      	movs	r2, #200	; 0xc8
 80058ee:	4618      	mov	r0, r3
 80058f0:	f018 fd38 	bl	801e364 <memcpy>
	  "OK\r\n",									// check disconnect response
	  "OK\r\n"								// connect wifi command response
	};

	Status response;
	int i = 0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 80058fa:	493e      	ldr	r1, [pc, #248]	; (80059f4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x118>)
 80058fc:	483e      	ldr	r0, [pc, #248]	; (80059f8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x11c>)
 80058fe:	f7fe f8a5 	bl	8003a4c <Connect_Wifi>
 8005902:	4603      	mov	r3, r0
 8005904:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
		if(response != IDLE)
 8005908:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800590c:	2b05      	cmp	r3, #5
 800590e:	d153      	bne.n	80059b8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xdc>
		{
			break;
		}
		for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005910:	2300      	movs	r3, #0
 8005912:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005916:	f107 020c 	add.w	r2, r7, #12
 800591a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800591e:	2132      	movs	r1, #50	; 0x32
 8005920:	fb01 f303 	mul.w	r3, r1, r3
 8005924:	4413      	add	r3, r2
 8005926:	4618      	mov	r0, r3
 8005928:	f7fa fc88 	bl	800023c <strlen>
 800592c:	4603      	mov	r3, r0
 800592e:	461a      	mov	r2, r3
 8005930:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005934:	4293      	cmp	r3, r2
 8005936:	dae0      	bge.n	80058fa <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response_arr[i][j]);
 8005938:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800593c:	492f      	ldr	r1, [pc, #188]	; (80059fc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x120>)
 800593e:	4618      	mov	r0, r3
 8005940:	f005 f83d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8005944:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005948:	2100      	movs	r1, #0
 800594a:	4618      	mov	r0, r3
 800594c:	f003 f910 	bl	8008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005950:	4604      	mov	r4, r0
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	330c      	adds	r3, #12
 8005956:	681d      	ldr	r5, [r3, #0]
 8005958:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800595c:	4928      	ldr	r1, [pc, #160]	; (8005a00 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x124>)
 800595e:	4618      	mov	r0, r3
 8005960:	f005 f82d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8005964:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005968:	4619      	mov	r1, r3
 800596a:	4620      	mov	r0, r4
 800596c:	47a8      	blx	r5
 800596e:	4603      	mov	r3, r0
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	3264      	adds	r2, #100	; 0x64
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800597a:	2032      	movs	r0, #50	; 0x32
 800597c:	fb00 f101 	mul.w	r1, r0, r1
 8005980:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8005984:	4408      	add	r0, r1
 8005986:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800598a:	4401      	add	r1, r0
 800598c:	39e4      	subs	r1, #228	; 0xe4
 800598e:	7809      	ldrb	r1, [r1, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	4790      	blx	r2
 8005994:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005998:	4618      	mov	r0, r3
 800599a:	f005 fbc8 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800599e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80059a2:	4618      	mov	r0, r3
 80059a4:	f005 fbc3 	bl	800b12e <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80059a8:	f7fd ffe8 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80059ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059b0:	3301      	adds	r3, #1
 80059b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059b6:	e7ae      	b.n	8005916 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x3a>
			break;
 80059b8:	bf00      	nop
		}
	}

	LONGS_EQUAL(CONNECTION_OK,response);
 80059ba:	f00c fbe3 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 80059be:	4604      	mov	r4, r0
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	3338      	adds	r3, #56	; 0x38
 80059c4:	681d      	ldr	r5, [r3, #0]
 80059c6:	f897 60e7 	ldrb.w	r6, [r7, #231]	; 0xe7
 80059ca:	f00c fbeb 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80059ce:	4603      	mov	r3, r0
 80059d0:	9302      	str	r3, [sp, #8]
 80059d2:	f240 1379 	movw	r3, #377	; 0x179
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x128>)
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x12c>)
 80059de:	4632      	mov	r2, r6
 80059e0:	2103      	movs	r1, #3
 80059e2:	4620      	mov	r0, r4
 80059e4:	47a8      	blx	r5

}
 80059e6:	bf00      	nop
 80059e8:	37f4      	adds	r7, #244	; 0xf4
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ee:	bf00      	nop
 80059f0:	080216f8 	.word	0x080216f8
 80059f4:	08021598 	.word	0x08021598
 80059f8:	080215a0 	.word	0x080215a0
 80059fc:	080214c4 	.word	0x080214c4
 8005a00:	080214e4 	.word	0x080214e4
 8005a04:	080211a0 	.word	0x080211a0
 8005a08:	080216cc 	.word	0x080216cc

08005a0c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	4a05      	ldr	r2, [pc, #20]	; (8005a2c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f00b f84d 	bl	8010abc <_ZN10UtestShellD1Ev>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	08024240 	.word	0x08024240

08005a30 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff ffe7 	bl	8005a0c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 8005a3e:	211c      	movs	r1, #28
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f002 fc0d 	bl	8008260 <_ZdlPvj>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	4a05      	ldr	r2, [pc, #20]	; (8005a70 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff f937 	bl	8004cd4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	080242ec 	.word	0x080242ec

08005a74 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff ffe7 	bl	8005a50 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 8005a82:	2104      	movs	r1, #4
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f002 fbeb 	bl	8008260 <_ZdlPvj>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	4a05      	ldr	r2, [pc, #20]	; (8005ab4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f00b f809 	bl	8010abc <_ZN10UtestShellD1Ev>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	0802430c 	.word	0x0802430c

08005ab8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff ffe7 	bl	8005a94 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 8005ac6:	211c      	movs	r1, #28
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f002 fbc9 	bl	8008260 <_ZdlPvj>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	4a05      	ldr	r2, [pc, #20]	; (8005af8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff f8f3 	bl	8004cd4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	080243b8 	.word	0x080243b8

08005afc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff ffe7 	bl	8005ad8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8005b0a:	2104      	movs	r1, #4
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f002 fba7 	bl	8008260 <_ZdlPvj>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	4a05      	ldr	r2, [pc, #20]	; (8005b3c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f00a ffc5 	bl	8010abc <_ZN10UtestShellD1Ev>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	080243d8 	.word	0x080243d8

08005b40 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff ffe7 	bl	8005b1c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8005b4e:	211c      	movs	r1, #28
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f002 fb85 	bl	8008260 <_ZdlPvj>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	4a05      	ldr	r2, [pc, #20]	; (8005b80 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff f8af 	bl	8004cd4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	08024484 	.word	0x08024484

08005b84 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7ff ffe7 	bl	8005b60 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 8005b92:	2104      	movs	r1, #4
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f002 fb63 	bl	8008260 <_ZdlPvj>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	4a05      	ldr	r2, [pc, #20]	; (8005bc4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f00a ff81 	bl	8010abc <_ZN10UtestShellD1Ev>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	080244a4 	.word	0x080244a4

08005bc8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff ffe7 	bl	8005ba4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 8005bd6:	211c      	movs	r1, #28
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f002 fb41 	bl	8008260 <_ZdlPvj>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	4a05      	ldr	r2, [pc, #20]	; (8005c08 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff f86b 	bl	8004cd4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	08024550 	.word	0x08024550

08005c0c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff ffe7 	bl	8005be8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 8005c1a:	2104      	movs	r1, #4
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f002 fb1f 	bl	8008260 <_ZdlPvj>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	4a05      	ldr	r2, [pc, #20]	; (8005c4c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f00a ff3d 	bl	8010abc <_ZN10UtestShellD1Ev>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	08024570 	.word	0x08024570

08005c50 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff ffe7 	bl	8005c2c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8005c5e:	211c      	movs	r1, #28
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f002 fafd 	bl	8008260 <_ZdlPvj>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	4a05      	ldr	r2, [pc, #20]	; (8005c90 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff f827 	bl	8004cd4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	0802461c 	.word	0x0802461c

08005c94 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff ffe7 	bl	8005c70 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 8005ca2:	2104      	movs	r1, #4
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f002 fadb 	bl	8008260 <_ZdlPvj>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	4a05      	ldr	r2, [pc, #20]	; (8005cd4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f00a fef9 	bl	8010abc <_ZN10UtestShellD1Ev>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	0802463c 	.word	0x0802463c

08005cd8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff ffe7 	bl	8005cb4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 8005ce6:	211c      	movs	r1, #28
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f002 fab9 	bl	8008260 <_ZdlPvj>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	4a05      	ldr	r2, [pc, #20]	; (8005d18 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fe ffe3 	bl	8004cd4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	080246e8 	.word	0x080246e8

08005d1c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff ffe7 	bl	8005cf8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8005d2a:	2104      	movs	r1, #4
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f002 fa97 	bl	8008260 <_ZdlPvj>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	4a05      	ldr	r2, [pc, #20]	; (8005d5c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f00a feb5 	bl	8010abc <_ZN10UtestShellD1Ev>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	08024708 	.word	0x08024708

08005d60 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff ffe7 	bl	8005d3c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8005d6e:	211c      	movs	r1, #28
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f002 fa75 	bl	8008260 <_ZdlPvj>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	4a05      	ldr	r2, [pc, #20]	; (8005da0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fe ff9f 	bl	8004cd4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	080247b4 	.word	0x080247b4

08005da4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff ffe7 	bl	8005d80 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 8005db2:	2104      	movs	r1, #4
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f002 fa53 	bl	8008260 <_ZdlPvj>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	4a05      	ldr	r2, [pc, #20]	; (8005de4 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f00a fe71 	bl	8010abc <_ZN10UtestShellD1Ev>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	080247d4 	.word	0x080247d4

08005de8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff ffe7 	bl	8005dc4 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8005df6:	211c      	movs	r1, #28
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f002 fa31 	bl	8008260 <_ZdlPvj>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	4a05      	ldr	r2, [pc, #20]	; (8005e28 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fe ff5b 	bl	8004cd4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	08024880 	.word	0x08024880

08005e2c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff ffe7 	bl	8005e08 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8005e3a:	2104      	movs	r1, #4
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f002 fa0f 	bl	8008260 <_ZdlPvj>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	4a05      	ldr	r2, [pc, #20]	; (8005e6c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f00a fe2d 	bl	8010abc <_ZN10UtestShellD1Ev>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	080248a0 	.word	0x080248a0

08005e70 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff ffe7 	bl	8005e4c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8005e7e:	211c      	movs	r1, #28
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f002 f9ed 	bl	8008260 <_ZdlPvj>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	4a05      	ldr	r2, [pc, #20]	; (8005eb0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe ff17 	bl	8004cd4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	0802494c 	.word	0x0802494c

08005eb4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff ffe7 	bl	8005e90 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8005ec2:	2104      	movs	r1, #4
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f002 f9cb 	bl	8008260 <_ZdlPvj>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	4a05      	ldr	r2, [pc, #20]	; (8005ef4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f00a fde9 	bl	8010abc <_ZN10UtestShellD1Ev>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	0802498c 	.word	0x0802498c

08005ef8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff ffe7 	bl	8005ed4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8005f06:	211c      	movs	r1, #28
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f002 f9a9 	bl	8008260 <_ZdlPvj>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	4a05      	ldr	r2, [pc, #20]	; (8005f38 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fe f8a3 	bl	8004074 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	08024a38 	.word	0x08024a38

08005f3c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff ffe7 	bl	8005f18 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8005f4a:	2108      	movs	r1, #8
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f002 f987 	bl	8008260 <_ZdlPvj>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	4a05      	ldr	r2, [pc, #20]	; (8005f7c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f00a fda5 	bl	8010abc <_ZN10UtestShellD1Ev>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	08024a58 	.word	0x08024a58

08005f80 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff ffe7 	bl	8005f5c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8005f8e:	211c      	movs	r1, #28
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f002 f965 	bl	8008260 <_ZdlPvj>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	4a05      	ldr	r2, [pc, #20]	; (8005fc0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe f85f 	bl	8004074 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	08024b04 	.word	0x08024b04

08005fc4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff ffe7 	bl	8005fa0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8005fd2:	2108      	movs	r1, #8
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f002 f943 	bl	8008260 <_ZdlPvj>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	4a05      	ldr	r2, [pc, #20]	; (8006004 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f00a fd61 	bl	8010abc <_ZN10UtestShellD1Ev>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	08024b24 	.word	0x08024b24

08006008 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff ffe7 	bl	8005fe4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8006016:	211c      	movs	r1, #28
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f002 f921 	bl	8008260 <_ZdlPvj>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	4a05      	ldr	r2, [pc, #20]	; (8006048 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4618      	mov	r0, r3
 800603a:	f7fe f81b 	bl	8004074 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	08024bd0 	.word	0x08024bd0

0800604c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff ffe7 	bl	8006028 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 800605a:	2108      	movs	r1, #8
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f002 f8ff 	bl	8008260 <_ZdlPvj>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4618      	mov	r0, r3
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	4a05      	ldr	r2, [pc, #20]	; (800608c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4618      	mov	r0, r3
 800607e:	f00a fd1d 	bl	8010abc <_ZN10UtestShellD1Ev>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4618      	mov	r0, r3
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	08024bf0 	.word	0x08024bf0

08006090 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff ffe7 	bl	800606c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 800609e:	211c      	movs	r1, #28
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f002 f8dd 	bl	8008260 <_ZdlPvj>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	4a05      	ldr	r2, [pc, #20]	; (80060d0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fd ffd7 	bl	8004074 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4618      	mov	r0, r3
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	08024c9c 	.word	0x08024c9c

080060d4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7ff ffe7 	bl	80060b0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 80060e2:	2108      	movs	r1, #8
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f002 f8bb 	bl	8008260 <_ZdlPvj>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4618      	mov	r0, r3
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	4a05      	ldr	r2, [pc, #20]	; (8006114 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4618      	mov	r0, r3
 8006106:	f00a fcd9 	bl	8010abc <_ZN10UtestShellD1Ev>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	08024cbc 	.word	0x08024cbc

08006118 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff ffe7 	bl	80060f4 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8006126:	211c      	movs	r1, #28
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f002 f899 	bl	8008260 <_ZdlPvj>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	4a05      	ldr	r2, [pc, #20]	; (8006158 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4618      	mov	r0, r3
 800614a:	f7fd ff93 	bl	8004074 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	08024d68 	.word	0x08024d68

0800615c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff ffe7 	bl	8006138 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 800616a:	2108      	movs	r1, #8
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f002 f877 	bl	8008260 <_ZdlPvj>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	4a05      	ldr	r2, [pc, #20]	; (800619c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4618      	mov	r0, r3
 800618e:	f00a fc95 	bl	8010abc <_ZN10UtestShellD1Ev>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	08024d88 	.word	0x08024d88

080061a0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff ffe7 	bl	800617c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 80061ae:	211c      	movs	r1, #28
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f002 f855 	bl	8008260 <_ZdlPvj>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	4a05      	ldr	r2, [pc, #20]	; (80061e0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fd ff4f 	bl	8004074 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	08024e34 	.word	0x08024e34

080061e4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff ffe7 	bl	80061c0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 80061f2:	2108      	movs	r1, #8
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f002 f833 	bl	8008260 <_ZdlPvj>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	4a05      	ldr	r2, [pc, #20]	; (8006224 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4618      	mov	r0, r3
 8006216:	f00a fc51 	bl	8010abc <_ZN10UtestShellD1Ev>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	08024e54 	.word	0x08024e54

08006228 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff ffe7 	bl	8006204 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8006236:	211c      	movs	r1, #28
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f002 f811 	bl	8008260 <_ZdlPvj>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	4a05      	ldr	r2, [pc, #20]	; (8006268 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4618      	mov	r0, r3
 800625a:	f7fd ff0b 	bl	8004074 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4618      	mov	r0, r3
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	08024f00 	.word	0x08024f00

0800626c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff ffe7 	bl	8006248 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 800627a:	2108      	movs	r1, #8
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 ffef 	bl	8008260 <_ZdlPvj>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	4a05      	ldr	r2, [pc, #20]	; (80062ac <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4618      	mov	r0, r3
 800629e:	f00a fc0d 	bl	8010abc <_ZN10UtestShellD1Ev>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	08024f20 	.word	0x08024f20

080062b0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff ffe7 	bl	800628c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 80062be:	211c      	movs	r1, #28
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f001 ffcd 	bl	8008260 <_ZdlPvj>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	4a05      	ldr	r2, [pc, #20]	; (80062f0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fd fec7 	bl	8004074 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	08024fcc 	.word	0x08024fcc

080062f4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff ffe7 	bl	80062d0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8006302:	2108      	movs	r1, #8
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 ffab 	bl	8008260 <_ZdlPvj>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	4a05      	ldr	r2, [pc, #20]	; (8006334 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4618      	mov	r0, r3
 8006326:	f00a fbc9 	bl	8010abc <_ZN10UtestShellD1Ev>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	08024fec 	.word	0x08024fec

08006338 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7ff ffe7 	bl	8006314 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8006346:	211c      	movs	r1, #28
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 ff89 	bl	8008260 <_ZdlPvj>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	4a05      	ldr	r2, [pc, #20]	; (8006378 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4618      	mov	r0, r3
 800636a:	f7fd fe83 	bl	8004074 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	08025098 	.word	0x08025098

0800637c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff ffe7 	bl	8006358 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 800638a:	2108      	movs	r1, #8
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 ff67 	bl	8008260 <_ZdlPvj>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <_Z41__static_initialization_and_destruction_0ii>:
}
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	f040 80f5 	bne.w	8006598 <_Z41__static_initialization_and_destruction_0ii+0x1fc>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063b4:	4293      	cmp	r3, r2
 80063b6:	f040 80ef 	bne.w	8006598 <_Z41__static_initialization_and_destruction_0ii+0x1fc>
TEST(RingBuffer_Test_Group, InitTest)
 80063ba:	48a7      	ldr	r0, [pc, #668]	; (8006658 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80063bc:	f7fd fea8 	bl	8004110 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 80063c0:	2324      	movs	r3, #36	; 0x24
 80063c2:	9301      	str	r3, [sp, #4]
 80063c4:	4ba5      	ldr	r3, [pc, #660]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	4ba5      	ldr	r3, [pc, #660]	; (8006660 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 80063ca:	4aa6      	ldr	r2, [pc, #664]	; (8006664 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 80063cc:	49a2      	ldr	r1, [pc, #648]	; (8006658 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80063ce:	48a6      	ldr	r0, [pc, #664]	; (8006668 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80063d0:	f00c f970 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 80063d4:	48a5      	ldr	r0, [pc, #660]	; (800666c <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80063d6:	f7fd ff4f 	bl	8004278 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 80063da:	232e      	movs	r3, #46	; 0x2e
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	4b9f      	ldr	r3, [pc, #636]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	4ba3      	ldr	r3, [pc, #652]	; (8006670 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80063e4:	4a9f      	ldr	r2, [pc, #636]	; (8006664 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 80063e6:	49a1      	ldr	r1, [pc, #644]	; (800666c <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80063e8:	48a2      	ldr	r0, [pc, #648]	; (8006674 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80063ea:	f00c f963 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80063ee:	48a2      	ldr	r0, [pc, #648]	; (8006678 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80063f0:	f7fd ffcc 	bl	800438c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 80063f4:	2338      	movs	r3, #56	; 0x38
 80063f6:	9301      	str	r3, [sp, #4]
 80063f8:	4b98      	ldr	r3, [pc, #608]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	4b9f      	ldr	r3, [pc, #636]	; (800667c <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80063fe:	4a99      	ldr	r2, [pc, #612]	; (8006664 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8006400:	499d      	ldr	r1, [pc, #628]	; (8006678 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8006402:	489f      	ldr	r0, [pc, #636]	; (8006680 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8006404:	f00c f956 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8006408:	489e      	ldr	r0, [pc, #632]	; (8006684 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800640a:	f7fe f847 	bl	800449c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 800640e:	2343      	movs	r3, #67	; 0x43
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	4b92      	ldr	r3, [pc, #584]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	4b9c      	ldr	r3, [pc, #624]	; (8006688 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8006418:	4a92      	ldr	r2, [pc, #584]	; (8006664 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800641a:	499a      	ldr	r1, [pc, #616]	; (8006684 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800641c:	489b      	ldr	r0, [pc, #620]	; (800668c <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 800641e:	f00c f949 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8006422:	489b      	ldr	r0, [pc, #620]	; (8006690 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8006424:	f7fe f8a6 	bl	8004574 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8006428:	234c      	movs	r3, #76	; 0x4c
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	4b8b      	ldr	r3, [pc, #556]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	4b98      	ldr	r3, [pc, #608]	; (8006694 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8006432:	4a8c      	ldr	r2, [pc, #560]	; (8006664 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8006434:	4996      	ldr	r1, [pc, #600]	; (8006690 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8006436:	4898      	ldr	r0, [pc, #608]	; (8006698 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8006438:	f00c f93c 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 800643c:	4897      	ldr	r0, [pc, #604]	; (800669c <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800643e:	f7fe f925 	bl	800468c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8006442:	235c      	movs	r3, #92	; 0x5c
 8006444:	9301      	str	r3, [sp, #4]
 8006446:	4b85      	ldr	r3, [pc, #532]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	4b95      	ldr	r3, [pc, #596]	; (80066a0 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800644c:	4a85      	ldr	r2, [pc, #532]	; (8006664 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800644e:	4993      	ldr	r1, [pc, #588]	; (800669c <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8006450:	4894      	ldr	r0, [pc, #592]	; (80066a4 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8006452:	f00c f92f 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8006456:	4894      	ldr	r0, [pc, #592]	; (80066a8 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8006458:	f7fe f9d6 	bl	8004808 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 800645c:	2371      	movs	r3, #113	; 0x71
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	4b7e      	ldr	r3, [pc, #504]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	4b91      	ldr	r3, [pc, #580]	; (80066ac <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8006466:	4a7f      	ldr	r2, [pc, #508]	; (8006664 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8006468:	498f      	ldr	r1, [pc, #572]	; (80066a8 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800646a:	4891      	ldr	r0, [pc, #580]	; (80066b0 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 800646c:	f00c f922 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 8006470:	4890      	ldr	r0, [pc, #576]	; (80066b4 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8006472:	f7fe fa2f 	bl	80048d4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8006476:	2378      	movs	r3, #120	; 0x78
 8006478:	9301      	str	r3, [sp, #4]
 800647a:	4b78      	ldr	r3, [pc, #480]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	4b8e      	ldr	r3, [pc, #568]	; (80066b8 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8006480:	4a78      	ldr	r2, [pc, #480]	; (8006664 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8006482:	498c      	ldr	r1, [pc, #560]	; (80066b4 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8006484:	488d      	ldr	r0, [pc, #564]	; (80066bc <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8006486:	f00c f915 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 800648a:	488d      	ldr	r0, [pc, #564]	; (80066c0 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800648c:	f7fe fb0c 	bl	8004aa8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 8006490:	2380      	movs	r3, #128	; 0x80
 8006492:	9301      	str	r3, [sp, #4]
 8006494:	4b71      	ldr	r3, [pc, #452]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	4b8a      	ldr	r3, [pc, #552]	; (80066c4 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800649a:	4a72      	ldr	r2, [pc, #456]	; (8006664 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800649c:	4988      	ldr	r1, [pc, #544]	; (80066c0 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800649e:	488a      	ldr	r0, [pc, #552]	; (80066c8 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80064a0:	f00c f908 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80064a4:	4889      	ldr	r0, [pc, #548]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x330>)
 80064a6:	f7fe fc5d 	bl	8004d64 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 80064aa:	23b8      	movs	r3, #184	; 0xb8
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	4b6b      	ldr	r3, [pc, #428]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	4b87      	ldr	r3, [pc, #540]	; (80066d0 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80064b4:	4a87      	ldr	r2, [pc, #540]	; (80066d4 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 80064b6:	4985      	ldr	r1, [pc, #532]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x330>)
 80064b8:	4887      	ldr	r0, [pc, #540]	; (80066d8 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 80064ba:	f00c f8fb 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80064be:	4887      	ldr	r0, [pc, #540]	; (80066dc <_Z41__static_initialization_and_destruction_0ii+0x340>)
 80064c0:	f7fe fcba 	bl	8004e38 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 80064c4:	23ca      	movs	r3, #202	; 0xca
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	4b64      	ldr	r3, [pc, #400]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	4b84      	ldr	r3, [pc, #528]	; (80066e0 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 80064ce:	4a81      	ldr	r2, [pc, #516]	; (80066d4 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 80064d0:	4982      	ldr	r1, [pc, #520]	; (80066dc <_Z41__static_initialization_and_destruction_0ii+0x340>)
 80064d2:	4884      	ldr	r0, [pc, #528]	; (80066e4 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 80064d4:	f00c f8ee 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80064d8:	4883      	ldr	r0, [pc, #524]	; (80066e8 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 80064da:	f7fe fd85 	bl	8004fe8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 80064de:	23d5      	movs	r3, #213	; 0xd5
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	4b5e      	ldr	r3, [pc, #376]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	4b81      	ldr	r3, [pc, #516]	; (80066ec <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80064e8:	4a7a      	ldr	r2, [pc, #488]	; (80066d4 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 80064ea:	497f      	ldr	r1, [pc, #508]	; (80066e8 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 80064ec:	4880      	ldr	r0, [pc, #512]	; (80066f0 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80064ee:	f00c f8e1 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 80064f2:	4880      	ldr	r0, [pc, #512]	; (80066f4 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 80064f4:	f7fe fea8 	bl	8005248 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 80064f8:	23e6      	movs	r3, #230	; 0xe6
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	4b57      	ldr	r3, [pc, #348]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	4b7d      	ldr	r3, [pc, #500]	; (80066f8 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8006502:	4a74      	ldr	r2, [pc, #464]	; (80066d4 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8006504:	497b      	ldr	r1, [pc, #492]	; (80066f4 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8006506:	487d      	ldr	r0, [pc, #500]	; (80066fc <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8006508:	f00c f8d4 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 800650c:	487c      	ldr	r0, [pc, #496]	; (8006700 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800650e:	f7fe ff67 	bl	80053e0 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 8006512:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8006516:	9301      	str	r3, [sp, #4]
 8006518:	4b50      	ldr	r3, [pc, #320]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	4b79      	ldr	r3, [pc, #484]	; (8006704 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800651e:	4a6d      	ldr	r2, [pc, #436]	; (80066d4 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8006520:	4977      	ldr	r1, [pc, #476]	; (8006700 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8006522:	4879      	ldr	r0, [pc, #484]	; (8006708 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8006524:	f00c f8c6 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8006528:	4878      	ldr	r0, [pc, #480]	; (800670c <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800652a:	f7fe ffc5 	bl	80054b8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 800652e:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8006532:	9301      	str	r3, [sp, #4]
 8006534:	4b49      	ldr	r3, [pc, #292]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	4b75      	ldr	r3, [pc, #468]	; (8006710 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800653a:	4a66      	ldr	r2, [pc, #408]	; (80066d4 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800653c:	4973      	ldr	r1, [pc, #460]	; (800670c <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800653e:	4875      	ldr	r0, [pc, #468]	; (8006714 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8006540:	f00c f8b8 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8006544:	4874      	ldr	r0, [pc, #464]	; (8006718 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8006546:	f7ff f87b 	bl	8005640 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 800654a:	f44f 7399 	mov.w	r3, #306	; 0x132
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	4b42      	ldr	r3, [pc, #264]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	4b71      	ldr	r3, [pc, #452]	; (800671c <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8006556:	4a5f      	ldr	r2, [pc, #380]	; (80066d4 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8006558:	496f      	ldr	r1, [pc, #444]	; (8006718 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800655a:	4871      	ldr	r0, [pc, #452]	; (8006720 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800655c:	f00c f8aa 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8006560:	4870      	ldr	r0, [pc, #448]	; (8006724 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8006562:	f7ff f8d7 	bl	8005714 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 8006566:	f240 1343 	movw	r3, #323	; 0x143
 800656a:	9301      	str	r3, [sp, #4]
 800656c:	4b3b      	ldr	r3, [pc, #236]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	4b6d      	ldr	r3, [pc, #436]	; (8006728 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8006572:	4a58      	ldr	r2, [pc, #352]	; (80066d4 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8006574:	496b      	ldr	r1, [pc, #428]	; (8006724 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8006576:	486d      	ldr	r0, [pc, #436]	; (800672c <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8006578:	f00c f89c 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 800657c:	486c      	ldr	r0, [pc, #432]	; (8006730 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800657e:	f7ff f99b 	bl	80058b8 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 8006582:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8006586:	9301      	str	r3, [sp, #4]
 8006588:	4b34      	ldr	r3, [pc, #208]	; (800665c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	4b69      	ldr	r3, [pc, #420]	; (8006734 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800658e:	4a51      	ldr	r2, [pc, #324]	; (80066d4 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8006590:	4967      	ldr	r1, [pc, #412]	; (8006730 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8006592:	4869      	ldr	r0, [pc, #420]	; (8006738 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8006594:	f00c f88e 	bl	80126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	f040 80e6 	bne.w	800676c <_Z41__static_initialization_and_destruction_0ii+0x3d0>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065a6:	4293      	cmp	r3, r2
 80065a8:	f040 80e0 	bne.w	800676c <_Z41__static_initialization_and_destruction_0ii+0x3d0>
 80065ac:	4862      	ldr	r0, [pc, #392]	; (8006738 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80065ae:	f00c f8ab 	bl	8012708 <_ZN13TestInstallerD1Ev>
 80065b2:	485f      	ldr	r0, [pc, #380]	; (8006730 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80065b4:	f7ff fa2a 	bl	8005a0c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80065b8:	485c      	ldr	r0, [pc, #368]	; (800672c <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80065ba:	f00c f8a5 	bl	8012708 <_ZN13TestInstallerD1Ev>
 80065be:	4859      	ldr	r0, [pc, #356]	; (8006724 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80065c0:	f7ff fa68 	bl	8005a94 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80065c4:	4856      	ldr	r0, [pc, #344]	; (8006720 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80065c6:	f00c f89f 	bl	8012708 <_ZN13TestInstallerD1Ev>
 80065ca:	4853      	ldr	r0, [pc, #332]	; (8006718 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 80065cc:	f7ff faa6 	bl	8005b1c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80065d0:	4850      	ldr	r0, [pc, #320]	; (8006714 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80065d2:	f00c f899 	bl	8012708 <_ZN13TestInstallerD1Ev>
 80065d6:	484d      	ldr	r0, [pc, #308]	; (800670c <_Z41__static_initialization_and_destruction_0ii+0x370>)
 80065d8:	f7ff fae4 	bl	8005ba4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 80065dc:	484a      	ldr	r0, [pc, #296]	; (8006708 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 80065de:	f00c f893 	bl	8012708 <_ZN13TestInstallerD1Ev>
 80065e2:	4847      	ldr	r0, [pc, #284]	; (8006700 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 80065e4:	f7ff fb22 	bl	8005c2c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 80065e8:	4844      	ldr	r0, [pc, #272]	; (80066fc <_Z41__static_initialization_and_destruction_0ii+0x360>)
 80065ea:	f00c f88d 	bl	8012708 <_ZN13TestInstallerD1Ev>
 80065ee:	4841      	ldr	r0, [pc, #260]	; (80066f4 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 80065f0:	f7ff fb60 	bl	8005cb4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80065f4:	483e      	ldr	r0, [pc, #248]	; (80066f0 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80065f6:	f00c f887 	bl	8012708 <_ZN13TestInstallerD1Ev>
 80065fa:	483b      	ldr	r0, [pc, #236]	; (80066e8 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 80065fc:	f7ff fb9e 	bl	8005d3c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8006600:	4838      	ldr	r0, [pc, #224]	; (80066e4 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8006602:	f00c f881 	bl	8012708 <_ZN13TestInstallerD1Ev>
 8006606:	4835      	ldr	r0, [pc, #212]	; (80066dc <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8006608:	f7ff fbdc 	bl	8005dc4 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 800660c:	4832      	ldr	r0, [pc, #200]	; (80066d8 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800660e:	f00c f87b 	bl	8012708 <_ZN13TestInstallerD1Ev>
 8006612:	482e      	ldr	r0, [pc, #184]	; (80066cc <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8006614:	f7ff fc1a 	bl	8005e4c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 8006618:	482b      	ldr	r0, [pc, #172]	; (80066c8 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800661a:	f00c f875 	bl	8012708 <_ZN13TestInstallerD1Ev>
 800661e:	4828      	ldr	r0, [pc, #160]	; (80066c0 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8006620:	f7ff fc58 	bl	8005ed4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 8006624:	4825      	ldr	r0, [pc, #148]	; (80066bc <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8006626:	f00c f86f 	bl	8012708 <_ZN13TestInstallerD1Ev>
 800662a:	4822      	ldr	r0, [pc, #136]	; (80066b4 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800662c:	f7ff fc96 	bl	8005f5c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8006630:	481f      	ldr	r0, [pc, #124]	; (80066b0 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8006632:	f00c f869 	bl	8012708 <_ZN13TestInstallerD1Ev>
 8006636:	481c      	ldr	r0, [pc, #112]	; (80066a8 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8006638:	f7ff fcd4 	bl	8005fe4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 800663c:	4819      	ldr	r0, [pc, #100]	; (80066a4 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800663e:	f00c f863 	bl	8012708 <_ZN13TestInstallerD1Ev>
 8006642:	4816      	ldr	r0, [pc, #88]	; (800669c <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8006644:	f7ff fd12 	bl	800606c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8006648:	4813      	ldr	r0, [pc, #76]	; (8006698 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800664a:	f00c f85d 	bl	8012708 <_ZN13TestInstallerD1Ev>
 800664e:	4810      	ldr	r0, [pc, #64]	; (8006690 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8006650:	f7ff fd50 	bl	80060f4 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8006654:	e072      	b.n	800673c <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8006656:	bf00      	nop
 8006658:	20000498 	.word	0x20000498
 800665c:	080211a0 	.word	0x080211a0
 8006660:	080217c0 	.word	0x080217c0
 8006664:	080217cc 	.word	0x080217cc
 8006668:	200004b4 	.word	0x200004b4
 800666c:	200004b8 	.word	0x200004b8
 8006670:	080217e4 	.word	0x080217e4
 8006674:	200004d4 	.word	0x200004d4
 8006678:	200004d8 	.word	0x200004d8
 800667c:	080217f4 	.word	0x080217f4
 8006680:	200004f4 	.word	0x200004f4
 8006684:	200004f8 	.word	0x200004f8
 8006688:	08021808 	.word	0x08021808
 800668c:	20000514 	.word	0x20000514
 8006690:	20000518 	.word	0x20000518
 8006694:	08021818 	.word	0x08021818
 8006698:	20000534 	.word	0x20000534
 800669c:	20000538 	.word	0x20000538
 80066a0:	08021830 	.word	0x08021830
 80066a4:	20000554 	.word	0x20000554
 80066a8:	20000558 	.word	0x20000558
 80066ac:	08021840 	.word	0x08021840
 80066b0:	20000574 	.word	0x20000574
 80066b4:	20000578 	.word	0x20000578
 80066b8:	08021850 	.word	0x08021850
 80066bc:	20000594 	.word	0x20000594
 80066c0:	20000598 	.word	0x20000598
 80066c4:	0802185c 	.word	0x0802185c
 80066c8:	200005b4 	.word	0x200005b4
 80066cc:	200005c0 	.word	0x200005c0
 80066d0:	0802186c 	.word	0x0802186c
 80066d4:	0802187c 	.word	0x0802187c
 80066d8:	200005dc 	.word	0x200005dc
 80066dc:	200005e0 	.word	0x200005e0
 80066e0:	08021894 	.word	0x08021894
 80066e4:	200005fc 	.word	0x200005fc
 80066e8:	20000600 	.word	0x20000600
 80066ec:	080218ac 	.word	0x080218ac
 80066f0:	2000061c 	.word	0x2000061c
 80066f4:	20000620 	.word	0x20000620
 80066f8:	080218c8 	.word	0x080218c8
 80066fc:	2000063c 	.word	0x2000063c
 8006700:	20000640 	.word	0x20000640
 8006704:	080218dc 	.word	0x080218dc
 8006708:	2000065c 	.word	0x2000065c
 800670c:	20000660 	.word	0x20000660
 8006710:	080218f8 	.word	0x080218f8
 8006714:	2000067c 	.word	0x2000067c
 8006718:	20000680 	.word	0x20000680
 800671c:	0802190c 	.word	0x0802190c
 8006720:	2000069c 	.word	0x2000069c
 8006724:	200006a0 	.word	0x200006a0
 8006728:	08021928 	.word	0x08021928
 800672c:	200006bc 	.word	0x200006bc
 8006730:	200006c0 	.word	0x200006c0
 8006734:	08021940 	.word	0x08021940
 8006738:	200006dc 	.word	0x200006dc
TEST(RingBuffer_Test_Group, PopDataTests)
 800673c:	480d      	ldr	r0, [pc, #52]	; (8006774 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800673e:	f00b ffe3 	bl	8012708 <_ZN13TestInstallerD1Ev>
 8006742:	480d      	ldr	r0, [pc, #52]	; (8006778 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8006744:	f7ff fd1a 	bl	800617c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8006748:	480c      	ldr	r0, [pc, #48]	; (800677c <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800674a:	f00b ffdd 	bl	8012708 <_ZN13TestInstallerD1Ev>
 800674e:	480c      	ldr	r0, [pc, #48]	; (8006780 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8006750:	f7ff fd58 	bl	8006204 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8006754:	480b      	ldr	r0, [pc, #44]	; (8006784 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8006756:	f00b ffd7 	bl	8012708 <_ZN13TestInstallerD1Ev>
 800675a:	480b      	ldr	r0, [pc, #44]	; (8006788 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800675c:	f7ff fd96 	bl	800628c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8006760:	480a      	ldr	r0, [pc, #40]	; (800678c <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8006762:	f00b ffd1 	bl	8012708 <_ZN13TestInstallerD1Ev>
 8006766:	480a      	ldr	r0, [pc, #40]	; (8006790 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8006768:	f7ff fdd4 	bl	8006314 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 800676c:	bf00      	nop
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20000514 	.word	0x20000514
 8006778:	200004f8 	.word	0x200004f8
 800677c:	200004f4 	.word	0x200004f4
 8006780:	200004d8 	.word	0x200004d8
 8006784:	200004d4 	.word	0x200004d4
 8006788:	200004b8 	.word	0x200004b8
 800678c:	200004b4 	.word	0x200004b4
 8006790:	20000498 	.word	0x20000498

08006794 <_GLOBAL__sub_I_rx_buffer>:
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
 8006798:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800679c:	2001      	movs	r0, #1
 800679e:	f7ff fdfd 	bl	800639c <_Z41__static_initialization_and_destruction_0ii>
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <_GLOBAL__sub_D_rx_buffer>:
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80067ac:	2000      	movs	r0, #0
 80067ae:	f7ff fdf5 	bl	800639c <_Z41__static_initialization_and_destruction_0ii>
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
    }
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69db      	ldr	r3, [r3, #28]
    }
 80067d8:	4618      	mov	r0, r3
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	695b      	ldr	r3, [r3, #20]
    }
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 80067fc:	b590      	push	{r4, r7, lr}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ffed 	bl	80067e4 <_ZNK10TestResult15getFailureCountEv>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <_ZNK10TestResult9isFailureEv+0x2a>
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff ffcf 	bl	80067b4 <_ZNK10TestResult11getRunCountEv>
 8006816:	4604      	mov	r4, r0
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff ffd7 	bl	80067cc <_ZNK10TestResult15getIgnoredCountEv>
 800681e:	4603      	mov	r3, r0
 8006820:	4423      	add	r3, r4
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <_ZNK10TestResult9isFailureEv+0x2e>
 8006826:	2301      	movs	r3, #1
 8006828:	e000      	b.n	800682c <_ZNK10TestResult9isFailureEv+0x30>
 800682a:	2300      	movs	r3, #0
    }
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	bd90      	pop	{r4, r7, pc}

08006834 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
    {
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4618      	mov	r0, r3
 8006840:	f007 fde6 	bl	800e410 <_ZN10TestOutputC1Ev>
 8006844:	4a03      	ldr	r2, [pc, #12]	; (8006854 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	601a      	str	r2, [r3, #0]
    }
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4618      	mov	r0, r3
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	0802574c 	.word	0x0802574c

08006858 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
    {
 8006860:	4a05      	ldr	r2, [pc, #20]	; (8006878 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4618      	mov	r0, r3
 800686a:	f007 fdef 	bl	800e44c <_ZN10TestOutputD1Ev>
    }
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	0802574c 	.word	0x0802574c

0800687c <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
    }
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff ffe7 	bl	8006858 <_ZN17ConsoleTestOutputD1Ev>
 800688a:	2110      	movs	r1, #16
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 fce7 	bl	8008260 <_ZdlPvj>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 800689c:	b5b0      	push	{r4, r5, r7, lr}
 800689e:	b098      	sub	sp, #96	; 0x60
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
    int result = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 80068aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff ffc0 	bl	8006834 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 80068b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80068b8:	4935      	ldr	r1, [pc, #212]	; (8006990 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 80068ba:	4618      	mov	r0, r3
 80068bc:	f004 f87f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80068c0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80068c4:	f107 0318 	add.w	r3, r7, #24
 80068c8:	2200      	movs	r2, #0
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 ff6a 	bl	80087a4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 80068d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80068d4:	4618      	mov	r0, r3
 80068d6:	f004 fc2a 	bl	800b12e <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 80068da:	f107 0318 	add.w	r3, r7, #24
 80068de:	2101      	movs	r1, #1
 80068e0:	4618      	mov	r0, r3
 80068e2:	f001 ff2f 	bl	8008744 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 80068e6:	f009 fb21 	bl	800ff2c <_ZN12TestRegistry18getCurrentRegistryEv>
 80068ea:	4603      	mov	r3, r0
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	3234      	adds	r2, #52	; 0x34
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	f107 0118 	add.w	r1, r7, #24
 80068f6:	4618      	mov	r0, r3
 80068f8:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80068fa:	f009 fb17 	bl	800ff2c <_ZN12TestRegistry18getCurrentRegistryEv>
 80068fe:	4603      	mov	r3, r0
 8006900:	f107 0008 	add.w	r0, r7, #8
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	f000 f844 	bl	8006994 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 800690c:	f107 0308 	add.w	r3, r7, #8
 8006910:	4618      	mov	r0, r3
 8006912:	f000 f899 	bl	8006a48 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8006916:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8006918:	f107 0308 	add.w	r3, r7, #8
 800691c:	4618      	mov	r0, r3
 800691e:	f000 f863 	bl	80069e8 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8006922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10c      	bne.n	8006942 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8006928:	f107 0318 	add.w	r3, r7, #24
 800692c:	2100      	movs	r1, #0
 800692e:	4618      	mov	r0, r3
 8006930:	f002 f83a 	bl	80089a8 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8006934:	4602      	mov	r2, r0
 8006936:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800693a:	4611      	mov	r1, r2
 800693c:	4618      	mov	r0, r3
 800693e:	f007 fe27 	bl	800e590 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8006942:	f009 faf3 	bl	800ff2c <_ZN12TestRegistry18getCurrentRegistryEv>
 8006946:	4604      	mov	r4, r0
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	3344      	adds	r3, #68	; 0x44
 800694c:	681d      	ldr	r5, [r3, #0]
 800694e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006952:	490f      	ldr	r1, [pc, #60]	; (8006990 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8006954:	4618      	mov	r0, r3
 8006956:	f004 f832 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800695a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800695e:	4619      	mov	r1, r3
 8006960:	4620      	mov	r0, r4
 8006962:	47a8      	blx	r5
 8006964:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006968:	4618      	mov	r0, r3
 800696a:	f004 fbe0 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return result;
 800696e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8006970:	f107 0318 	add.w	r3, r7, #24
 8006974:	4618      	mov	r0, r3
 8006976:	f001 ff4d 	bl	8008814 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 800697a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff ff6a 	bl	8006858 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8006984:	4623      	mov	r3, r4
}
 8006986:	4618      	mov	r0, r3
 8006988:	3760      	adds	r7, #96	; 0x60
 800698a:	46bd      	mov	sp, r7
 800698c:	bdb0      	pop	{r4, r5, r7, pc}
 800698e:	bf00      	nop
 8006990:	08021954 	.word	0x08021954

08006994 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 80069a2:	4a0f      	ldr	r2, [pc, #60]	; (80069e0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	605a      	str	r2, [r3, #4]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	609a      	str	r2, [r3, #8]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 80069ba:	2241      	movs	r2, #65	; 0x41
 80069bc:	4909      	ldr	r1, [pc, #36]	; (80069e4 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 80069be:	2038      	movs	r0, #56	; 0x38
 80069c0:	f001 fc3a 	bl	8008238 <_ZnwjPKci>
 80069c4:	4604      	mov	r4, r0
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	68b9      	ldr	r1, [r7, #8]
 80069ca:	4620      	mov	r0, r4
 80069cc:	f00c f84a 	bl	8012a64 <_ZN20CommandLineArgumentsC1EiPKPKc>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	609c      	str	r4, [r3, #8]
}
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd90      	pop	{r4, r7, pc}
 80069de:	bf00      	nop
 80069e0:	080250d8 	.word	0x080250d8
 80069e4:	08021968 	.word	0x08021968

080069e8 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	4a0c      	ldr	r2, [pc, #48]	; (8006a24 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d004      	beq.n	8006a08 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	3204      	adds	r2, #4
 8006a02:	6812      	ldr	r2, [r2, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	4790      	blx	r2
    delete output_;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d004      	beq.n	8006a1a <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	3204      	adds	r2, #4
 8006a14:	6812      	ldr	r2, [r2, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	4790      	blx	r2
}
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	080250d8 	.word	0x080250d8

08006a28 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
}
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff ffd9 	bl	80069e8 <_ZN21CommandLineTestRunnerD1Ev>
 8006a36:	2110      	movs	r1, #16
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 fc11 	bl	8008260 <_ZdlPvj>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8006a48:	b5b0      	push	{r4, r5, r7, lr}
 8006a4a:	b08c      	sub	sp, #48	; 0x30
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8006a50:	2301      	movs	r3, #1
 8006a52:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8006a54:	f107 031c 	add.w	r3, r7, #28
 8006a58:	4929      	ldr	r1, [pc, #164]	; (8006b00 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f003 ffaf 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8006a60:	f107 021c 	add.w	r2, r7, #28
 8006a64:	f107 0308 	add.w	r3, r7, #8
 8006a68:	4611      	mov	r1, r2
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f008 fe1c 	bl	800f6a8 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8006a70:	f107 031c 	add.w	r3, r7, #28
 8006a74:	4618      	mov	r0, r3
 8006a76:	f004 fb5a 	bl	800b12e <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3334      	adds	r3, #52	; 0x34
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f107 0108 	add.w	r1, r7, #8
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68da      	ldr	r2, [r3, #12]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	333c      	adds	r3, #60	; 0x3c
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4610      	mov	r0, r2
 8006aa0:	4798      	blx	r3
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fa3e 	bl	8006f28 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f8ac 	bl	8006c10 <_ZN21CommandLineTestRunner11runAllTestsEv>
 8006ab8:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68dd      	ldr	r5, [r3, #12]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3344      	adds	r3, #68	; 0x44
 8006ac6:	681c      	ldr	r4, [r3, #0]
 8006ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006acc:	490c      	ldr	r1, [pc, #48]	; (8006b00 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f003 ff75 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8006ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4628      	mov	r0, r5
 8006adc:	47a0      	blx	r4
 8006ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f004 fb23 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return testResult;
 8006ae8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8006aea:	f107 0308 	add.w	r3, r7, #8
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 faaa 	bl	8007048 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 8006af4:	4623      	mov	r3, r4
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3730      	adds	r7, #48	; 0x30
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bdb0      	pop	{r4, r5, r7, pc}
 8006afe:	bf00      	nop
 8006b00:	0802198c 	.word	0x0802198c

08006b04 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 8006b04:	b5b0      	push	{r4, r5, r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68dd      	ldr	r5, [r3, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3330      	adds	r3, #48	; 0x30
 8006b18:	681c      	ldr	r4, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f00c fce0 	bl	80134e4 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8006b24:	4603      	mov	r3, r0
 8006b26:	4619      	mov	r1, r3
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68dd      	ldr	r5, [r3, #12]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	332c      	adds	r3, #44	; 0x2c
 8006b38:	681c      	ldr	r4, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f00c fcdc 	bl	80134fc <_ZNK20CommandLineArguments14getNameFiltersEv>
 8006b44:	4603      	mov	r3, r0
 8006b46:	4619      	mov	r1, r3
 8006b48:	4628      	mov	r0, r5
 8006b4a:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f00c fc2b 	bl	80133ac <_ZNK20CommandLineArguments9isVerboseEv>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d009      	beq.n	8006b70 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3320      	adds	r3, #32
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f00c fc25 	bl	80133c4 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d009      	beq.n	8006b94 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3320      	adds	r3, #32
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2102      	movs	r1, #2
 8006b90:	4610      	mov	r0, r2
 8006b92:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f00c fc1f 	bl	80133dc <_ZNK20CommandLineArguments7isColorEv>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d008      	beq.n	8006bb6 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3324      	adds	r3, #36	; 0x24
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f00c fc4a 	bl	8013454 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d008      	beq.n	8006bd8 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3360      	adds	r3, #96	; 0x60
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f00c fc2d 	bl	801343c <_ZNK20CommandLineArguments12isRunIgnoredEv>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d004      	beq.n	8006bf2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f009 fa19 	bl	8010024 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f00c fc50 	bl	801349c <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 8006c02:	f00b fadb 	bl	80121bc <_ZN10UtestShell14setCrashOnFailEv>
}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006c10 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 8006c10:	b5b0      	push	{r4, r5, r7, lr}
 8006c12:	b094      	sub	sp, #80	; 0x50
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff ff73 	bl	8006b04 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f00c fc1c 	bl	801346c <_ZNK20CommandLineArguments14getRepeatCountEv>
 8006c34:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f00c fbda 	bl	80133f4 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d019      	beq.n	8006c7a <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	f107 0308 	add.w	r3, r7, #8
 8006c4e:	4611      	mov	r1, r2
 8006c50:	4618      	mov	r0, r3
 8006c52:	f009 fbaf 	bl	80103b4 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3320      	adds	r3, #32
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f107 0108 	add.w	r1, r7, #8
 8006c68:	4610      	mov	r0, r2
 8006c6a:	4798      	blx	r3
        return 0;
 8006c6c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8006c6e:	f107 0308 	add.w	r3, r7, #8
 8006c72:	4618      	mov	r0, r3
 8006c74:	f009 fbd6 	bl	8010424 <_ZN10TestResultD1Ev>
 8006c78:	e0e1      	b.n	8006e3e <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f00c fbc4 	bl	801340c <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d019      	beq.n	8006cbe <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	f107 0308 	add.w	r3, r7, #8
 8006c92:	4611      	mov	r1, r2
 8006c94:	4618      	mov	r0, r3
 8006c96:	f009 fb8d 	bl	80103b4 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3324      	adds	r3, #36	; 0x24
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f107 0108 	add.w	r1, r7, #8
 8006cac:	4610      	mov	r0, r2
 8006cae:	4798      	blx	r3
        return 0;
 8006cb0:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8006cb2:	f107 0308 	add.w	r3, r7, #8
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f009 fbb4 	bl	8010424 <_ZN10TestResultD1Ev>
 8006cbc:	e0bf      	b.n	8006e3e <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f00c fbae 	bl	8013424 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d019      	beq.n	8006d02 <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	f107 0308 	add.w	r3, r7, #8
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f009 fb6b 	bl	80103b4 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3328      	adds	r3, #40	; 0x28
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f107 0108 	add.w	r1, r7, #8
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4798      	blx	r3
        return 0;
 8006cf4:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8006cf6:	f107 0308 	add.w	r3, r7, #8
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f009 fb92 	bl	8010424 <_ZN10TestResultD1Ev>
 8006d00:	e09d      	b.n	8006e3e <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f00c fbbc 	bl	8013484 <_ZNK20CommandLineArguments11isReversingEv>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d008      	beq.n	8006d24 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	331c      	adds	r3, #28
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4610      	mov	r0, r2
 8006d22:	4798      	blx	r3

    if (arguments_->isShuffling())
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f00c fbc3 	bl	80134b4 <_ZNK20CommandLineArguments11isShufflingEv>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d023      	beq.n	8006d7c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	332c      	adds	r3, #44	; 0x2c
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4941      	ldr	r1, [pc, #260]	; (8006e48 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8006d44:	4610      	mov	r0, r2
 8006d46:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685d      	ldr	r5, [r3, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3334      	adds	r3, #52	; 0x34
 8006d54:	681c      	ldr	r4, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f00c fbb6 	bl	80134cc <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8006d60:	4603      	mov	r3, r0
 8006d62:	4619      	mov	r1, r3
 8006d64:	4628      	mov	r0, r5
 8006d66:	47a0      	blx	r4
        output_->print("\n");
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	332c      	adds	r3, #44	; 0x2c
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4935      	ldr	r1, [pc, #212]	; (8006e4c <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8006d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006d82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d84:	429a      	cmp	r2, r3
 8006d86:	bf8c      	ite	hi
 8006d88:	2301      	movhi	r3, #1
 8006d8a:	2300      	movls	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d04e      	beq.n	8006e30 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f00c fb8c 	bl	80134b4 <_ZNK20CommandLineArguments11isShufflingEv>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00f      	beq.n	8006dc2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68dd      	ldr	r5, [r3, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3318      	adds	r3, #24
 8006dae:	681c      	ldr	r4, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f00c fb89 	bl	80134cc <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6858      	ldr	r0, [r3, #4]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3340      	adds	r3, #64	; 0x40
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dd2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006dd4:	4798      	blx	r3
        TestResult tr(*output_);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	f107 0308 	add.w	r3, r7, #8
 8006dde:	4611      	mov	r1, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f009 fae7 	bl	80103b4 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3314      	adds	r3, #20
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f107 0108 	add.w	r1, r7, #8
 8006df8:	4610      	mov	r0, r2
 8006dfa:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 8006dfc:	f107 0308 	add.w	r3, r7, #8
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff fcef 	bl	80067e4 <_ZNK10TestResult15getFailureCountEv>
 8006e06:	4602      	mov	r2, r0
 8006e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e0a:	4413      	add	r3, r2
 8006e0c:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 8006e0e:	f107 0308 	add.w	r3, r7, #8
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff fcf2 	bl	80067fc <_ZNK10TestResult9isFailureEv>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 8006e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e20:	3301      	adds	r3, #1
 8006e22:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 8006e24:	f107 0308 	add.w	r3, r7, #8
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f009 fafb 	bl	8010424 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 8006e2e:	e7a5      	b.n	8006d7c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 8006e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 8006e36:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8006e38:	e000      	b.n	8006e3c <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 8006e3a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8006e3c:	bf00      	nop
 8006e3e:	4623      	mov	r3, r4
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3750      	adds	r7, #80	; 0x50
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bdb0      	pop	{r4, r5, r7, pc}
 8006e48:	080219a0 	.word	0x080219a0
 8006e4c:	080219cc 	.word	0x080219cc

08006e50 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8006e50:	b590      	push	{r4, r7, lr}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8006e58:	229d      	movs	r2, #157	; 0x9d
 8006e5a:	4906      	ldr	r1, [pc, #24]	; (8006e74 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 8006e5c:	201c      	movs	r0, #28
 8006e5e:	f001 f9eb 	bl	8008238 <_ZnwjPKci>
 8006e62:	4604      	mov	r4, r0
 8006e64:	4620      	mov	r0, r4
 8006e66:	f005 f955 	bl	800c114 <_ZN18TeamCityTestOutputC1Ev>
 8006e6a:	4623      	mov	r3, r4
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd90      	pop	{r4, r7, pc}
 8006e74:	08021968 	.word	0x08021968

08006e78 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8006e78:	b590      	push	{r4, r7, lr}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 8006e82:	22a2      	movs	r2, #162	; 0xa2
 8006e84:	490a      	ldr	r1, [pc, #40]	; (8006eb0 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8006e86:	2014      	movs	r0, #20
 8006e88:	f001 f9d6 	bl	8008238 <_ZnwjPKci>
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f000 f980 	bl	8007194 <_ZN15JUnitTestOutputC1Ev>
 8006e94:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 fbb2 	bl	8007608 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd90      	pop	{r4, r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	08021968 	.word	0x08021968

08006eb4 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8006eb4:	b590      	push	{r4, r7, lr}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8006ebc:	22ab      	movs	r2, #171	; 0xab
 8006ebe:	4906      	ldr	r1, [pc, #24]	; (8006ed8 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8006ec0:	2010      	movs	r0, #16
 8006ec2:	f001 f9b9 	bl	8008238 <_ZnwjPKci>
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f7ff fcb3 	bl	8006834 <_ZN17ConsoleTestOutputC1Ev>
 8006ece:	4623      	mov	r3, r4
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd90      	pop	{r4, r7, pc}
 8006ed8:	08021968 	.word	0x08021968

08006edc <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8006edc:	b590      	push	{r4, r7, lr}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8006ee8:	22b0      	movs	r2, #176	; 0xb0
 8006eea:	490e      	ldr	r1, [pc, #56]	; (8006f24 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8006eec:	2018      	movs	r0, #24
 8006eee:	f001 f9a3 	bl	8008238 <_ZnwjPKci>
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f007 ff83 	bl	800ee00 <_ZN19CompositeTestOutputC1Ev>
 8006efa:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	335c      	adds	r3, #92	; 0x5c
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	6978      	ldr	r0, [r7, #20]
 8006f08:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3360      	adds	r3, #96	; 0x60
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6879      	ldr	r1, [r7, #4]
 8006f14:	6978      	ldr	r0, [r7, #20]
 8006f16:	4798      	blx	r3
  return composite;
 8006f18:	697b      	ldr	r3, [r7, #20]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd90      	pop	{r4, r7, pc}
 8006f22:	bf00      	nop
 8006f24:	08021968 	.word	0x08021968

08006f28 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8006f28:	b5b0      	push	{r4, r5, r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f00b fe4f 	bl	8012bdc <_ZN20CommandLineArguments5parseEP10TestPlugin>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f083 0301 	eor.w	r3, r3, #1
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d029      	beq.n	8006f9e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3310      	adds	r3, #16
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3
 8006f56:	4602      	mov	r2, r0
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685d      	ldr	r5, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	332c      	adds	r3, #44	; 0x2c
 8006f68:	681c      	ldr	r4, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f00c fa10 	bl	8013394 <_ZNK20CommandLineArguments8needHelpEv>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d006      	beq.n	8006f88 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f00c f9fa 	bl	8013378 <_ZNK20CommandLineArguments4helpEv>
 8006f84:	4603      	mov	r3, r0
 8006f86:	e005      	b.n	8006f94 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f00c f9e5 	bl	801335c <_ZNK20CommandLineArguments5usageEv>
 8006f92:	4603      	mov	r3, r0
 8006f94:	4619      	mov	r1, r3
 8006f96:	4628      	mov	r0, r5
 8006f98:	47a0      	blx	r4
    return false;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e050      	b.n	8007040 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f00d f84c 	bl	8014040 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d02c      	beq.n	8007008 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	330c      	adds	r3, #12
 8006fb4:	681c      	ldr	r4, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f00d f864 	bl	8014088 <_ZNK20CommandLineArguments14getPackageNameEv>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	47a0      	blx	r4
 8006fc8:	4602      	mov	r2, r0
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f00c f9ea 	bl	80133ac <_ZNK20CommandLineArguments9isVerboseEv>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d02f      	beq.n	800703e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3314      	adds	r3, #20
 8006fe4:	681c      	ldr	r4, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685d      	ldr	r5, [r3, #4]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3310      	adds	r3, #16
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	4798      	blx	r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	47a0      	blx	r4
 8007000:	4602      	mov	r2, r0
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	605a      	str	r2, [r3, #4]
 8007006:	e01a      	b.n	800703e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	4618      	mov	r0, r3
 800700e:	f00d f829 	bl	8014064 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d009      	beq.n	800702c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3308      	adds	r3, #8
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	4798      	blx	r3
 8007024:	4602      	mov	r2, r0
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	605a      	str	r2, [r3, #4]
 800702a:	e008      	b.n	800703e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3310      	adds	r3, #16
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	4798      	blx	r3
 8007038:	4602      	mov	r2, r0
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	605a      	str	r2, [r3, #4]
  return true;
 800703e:	2301      	movs	r3, #1
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bdb0      	pop	{r4, r5, r7, pc}

08007048 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	4a05      	ldr	r2, [pc, #20]	; (8007068 <_ZN16SetPointerPluginD1Ev+0x20>)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4618      	mov	r0, r3
 800705a:	f008 f9e7 	bl	800f42c <_ZN10TestPluginD1Ev>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	08025858 	.word	0x08025858

0800706c <_ZN16SetPointerPluginD0Ev>:
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff ffe7 	bl	8007048 <_ZN16SetPointerPluginD1Ev>
 800707a:	2114      	movs	r1, #20
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 f8ef 	bl	8008260 <_ZdlPvj>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
    }
 8007098:	4618      	mov	r0, r3
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4910      	ldr	r1, [pc, #64]	; (80070f0 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 80070b0:	4618      	mov	r0, r3
 80070b2:	f003 fc84 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	609a      	str	r2, [r3, #8]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	60da      	str	r2, [r3, #12]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	741a      	strb	r2, [r3, #16]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3314      	adds	r3, #20
 80070cc:	4908      	ldr	r1, [pc, #32]	; (80070f0 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 80070ce:	4618      	mov	r0, r3
 80070d0:	f003 fc75 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	61da      	str	r2, [r3, #28]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	621a      	str	r2, [r3, #32]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	080219d0 	.word	0x080219d0

080070f4 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	605a      	str	r2, [r3, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	609a      	str	r2, [r3, #8]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	60da      	str	r2, [r3, #12]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	611a      	str	r2, [r3, #16]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3314      	adds	r3, #20
 800711e:	4907      	ldr	r1, [pc, #28]	; (800713c <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8007120:	4618      	mov	r0, r3
 8007122:	f003 fc4c 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	61da      	str	r2, [r3, #28]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	621a      	str	r2, [r3, #32]
    {
    }
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4618      	mov	r0, r3
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	080219d0 	.word	0x080219d0

08007140 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3314      	adds	r3, #20
 800714c:	4618      	mov	r0, r3
 800714e:	f003 ffee 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4618      	mov	r0, r3
 8007168:	f7ff ffc4 	bl	80070f4 <_ZN20JUnitTestGroupResultC1Ev>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3328      	adds	r3, #40	; 0x28
 8007170:	4907      	ldr	r1, [pc, #28]	; (8007190 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8007172:	4618      	mov	r0, r3
 8007174:	f003 fc23 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3330      	adds	r3, #48	; 0x30
 800717c:	4904      	ldr	r1, [pc, #16]	; (8007190 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800717e:	4618      	mov	r0, r3
 8007180:	f003 fc1d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	080219d0 	.word	0x080219d0

08007194 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8007194:	b590      	push	{r4, r7, lr}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4618      	mov	r0, r3
 80071a0:	f007 f936 	bl	800e410 <_ZN10TestOutputC1Ev>
 80071a4:	4a09      	ldr	r2, [pc, #36]	; (80071cc <_ZN15JUnitTestOutputC1Ev+0x38>)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	224d      	movs	r2, #77	; 0x4d
 80071ac:	4908      	ldr	r1, [pc, #32]	; (80071d0 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 80071ae:	2038      	movs	r0, #56	; 0x38
 80071b0:	f001 f842 	bl	8008238 <_ZnwjPKci>
 80071b4:	4604      	mov	r4, r0
 80071b6:	4620      	mov	r0, r4
 80071b8:	f7ff ffd0 	bl	800715c <_ZN19JUnitTestOutputImplC1Ev>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	611c      	str	r4, [r3, #16]
{
}
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4618      	mov	r0, r3
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd90      	pop	{r4, r7, pc}
 80071ca:	bf00      	nop
 80071cc:	080250f8 	.word	0x080250f8
 80071d0:	080219d4 	.word	0x080219d4

080071d4 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3330      	adds	r3, #48	; 0x30
 80071e0:	4618      	mov	r0, r3
 80071e2:	f003 ffa4 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3328      	adds	r3, #40	; 0x28
 80071ea:	4618      	mov	r0, r3
 80071ec:	f003 ff9f 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7ff ffa4 	bl	8007140 <_ZN20JUnitTestGroupResultD1Ev>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8007204:	b590      	push	{r4, r7, lr}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	4a0c      	ldr	r2, [pc, #48]	; (8007240 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f838 	bl	8007288 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691c      	ldr	r4, [r3, #16]
 800721c:	2c00      	cmp	r4, #0
 800721e:	d006      	beq.n	800722e <_ZN15JUnitTestOutputD1Ev+0x2a>
 8007220:	4620      	mov	r0, r4
 8007222:	f7ff ffd7 	bl	80071d4 <_ZN19JUnitTestOutputImplD1Ev>
 8007226:	2138      	movs	r1, #56	; 0x38
 8007228:	4620      	mov	r0, r4
 800722a:	f001 f819 	bl	8008260 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4618      	mov	r0, r3
 8007232:	f007 f90b 	bl	800e44c <_ZN10TestOutputD1Ev>
}
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	bd90      	pop	{r4, r7, pc}
 8007240:	080250f8 	.word	0x080250f8

08007244 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
}
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff ffd9 	bl	8007204 <_ZN15JUnitTestOutputD1Ev>
 8007252:	2114      	movs	r1, #20
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f001 f803 	bl	8008260 <_ZdlPvj>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3314      	adds	r3, #20
 8007270:	4618      	mov	r0, r3
 8007272:	f003 ff5c 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4618      	mov	r0, r3
 800727a:	f003 ff58 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8007288:	b590      	push	{r4, r7, lr}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	2200      	movs	r2, #0
 800729e:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	f103 0414 	add.w	r4, r3, #20
 80072a8:	f107 0308 	add.w	r3, r7, #8
 80072ac:	491d      	ldr	r1, [pc, #116]	; (8007324 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 80072ae:	4618      	mov	r0, r3
 80072b0:	f003 fb85 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80072b4:	f107 0308 	add.w	r3, r7, #8
 80072b8:	4619      	mov	r1, r3
 80072ba:	4620      	mov	r0, r4
 80072bc:	f003 fbeb 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 80072c0:	f107 0308 	add.w	r3, r7, #8
 80072c4:	4618      	mov	r0, r3
 80072c6:	f003 ff32 	bl	800b12e <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	617b      	str	r3, [r7, #20]
    while (cur) {
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d018      	beq.n	800730a <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	3204      	adds	r2, #4
 80072ea:	6812      	ldr	r2, [r2, #0]
 80072ec:	4618      	mov	r0, r3
 80072ee:	4790      	blx	r2
        delete cur;
 80072f0:	697c      	ldr	r4, [r7, #20]
 80072f2:	2c00      	cmp	r4, #0
 80072f4:	d006      	beq.n	8007304 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 80072f6:	4620      	mov	r0, r4
 80072f8:	f7ff ffb4 	bl	8007264 <_ZN23JUnitTestCaseResultNodeD1Ev>
 80072fc:	2128      	movs	r1, #40	; 0x28
 80072fe:	4620      	mov	r0, r4
 8007300:	f000 ffae 	bl	8008260 <_ZdlPvj>
        cur = tmp;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	617b      	str	r3, [r7, #20]
    while (cur) {
 8007308:	e7e3      	b.n	80072d2 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	2200      	movs	r2, #0
 8007310:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	2200      	movs	r2, #0
 8007318:	621a      	str	r2, [r3, #32]
}
 800731a:	bf00      	nop
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	bd90      	pop	{r4, r7, pc}
 8007322:	bf00      	nop
 8007324:	080219d0 	.word	0x080219d0

08007328 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
}
 8007346:	bf00      	nop
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8007352:	b590      	push	{r4, r7, lr}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	6a1c      	ldr	r4, [r3, #32]
 8007362:	6838      	ldr	r0, [r7, #0]
 8007364:	f009 f9c6 	bl	80106f4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8007368:	4603      	mov	r3, r0
 800736a:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	6a1c      	ldr	r4, [r3, #32]
 8007372:	6838      	ldr	r0, [r7, #0]
 8007374:	f7ff fe8a 	bl	800708c <_ZNK10TestResult13getCheckCountEv>
 8007378:	4603      	mov	r3, r0
 800737a:	6223      	str	r3, [r4, #32]
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	bd90      	pop	{r4, r7, pc}

08007384 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 800739a:	b590      	push	{r4, r7, lr}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691c      	ldr	r4, [r3, #16]
 80073a8:	6838      	ldr	r0, [r7, #0]
 80073aa:	f009 f9af 	bl	801070c <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 80073ae:	4603      	mov	r3, r0
 80073b0:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3364      	adds	r3, #100	; 0x64
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
    resetTestGroupResult();
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff ff62 	bl	8007288 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd90      	pop	{r4, r7, pc}

080073cc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 80073cc:	b590      	push	{r4, r7, lr}
 80073ce:	b089      	sub	sp, #36	; 0x24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	3201      	adds	r2, #1
 80073de:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	f103 0414 	add.w	r4, r3, #20
 80073e8:	f107 0308 	add.w	r3, r7, #8
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f009 fcef 	bl	8010dd2 <_ZNK10UtestShell8getGroupEv>
 80073f4:	f107 0308 	add.w	r3, r7, #8
 80073f8:	4619      	mov	r1, r3
 80073fa:	4620      	mov	r0, r4
 80073fc:	f003 fb4b 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 8007400:	f107 0308 	add.w	r3, r7, #8
 8007404:	4618      	mov	r0, r3
 8007406:	f003 fe92 	bl	800b12e <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 800740a:	4b3c      	ldr	r3, [pc, #240]	; (80074fc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4798      	blx	r3
 8007410:	4602      	mov	r2, r0
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d110      	bne.n	8007444 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8007422:	2288      	movs	r2, #136	; 0x88
 8007424:	4936      	ldr	r1, [pc, #216]	; (8007500 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8007426:	2028      	movs	r0, #40	; 0x28
 8007428:	f000 ff06 	bl	8008238 <_ZnwjPKci>
 800742c:	4604      	mov	r4, r0
 800742e:	4620      	mov	r0, r4
 8007430:	f7ff fe38 	bl	80070a4 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8007438:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6912      	ldr	r2, [r2, #16]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	61d3      	str	r3, [r2, #28]
 8007442:	e013      	b.n	800746c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8007444:	228b      	movs	r2, #139	; 0x8b
 8007446:	492e      	ldr	r1, [pc, #184]	; (8007500 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8007448:	2028      	movs	r0, #40	; 0x28
 800744a:	f000 fef5 	bl	8008238 <_ZnwjPKci>
 800744e:	4604      	mov	r4, r0
 8007450:	4620      	mov	r0, r4
 8007452:	f7ff fe27 	bl	80070a4 <_ZN23JUnitTestCaseResultNodeC1Ev>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	6a1a      	ldr	r2, [r3, #32]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800746a:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	461c      	mov	r4, r3
 8007474:	f107 0310 	add.w	r3, r7, #16
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	4618      	mov	r0, r3
 800747c:	f009 fc9a 	bl	8010db4 <_ZNK10UtestShell7getNameEv>
 8007480:	f107 0310 	add.w	r3, r7, #16
 8007484:	4619      	mov	r1, r3
 8007486:	4620      	mov	r0, r4
 8007488:	f003 fb05 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800748c:	f107 0310 	add.w	r3, r7, #16
 8007490:	4618      	mov	r0, r3
 8007492:	f003 fe4c 	bl	800b12e <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	f103 0414 	add.w	r4, r3, #20
 80074a0:	f107 0318 	add.w	r3, r7, #24
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f009 fd55 	bl	8010f56 <_ZNK10UtestShell7getFileEv>
 80074ac:	f107 0318 	add.w	r3, r7, #24
 80074b0:	4619      	mov	r1, r3
 80074b2:	4620      	mov	r0, r4
 80074b4:	f003 faef 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 80074b8:	f107 0318 	add.w	r3, r7, #24
 80074bc:	4618      	mov	r0, r3
 80074be:	f003 fe36 	bl	800b12e <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	6a1c      	ldr	r4, [r3, #32]
 80074c8:	6838      	ldr	r0, [r7, #0]
 80074ca:	f009 fd53 	bl	8010f74 <_ZNK10UtestShell13getLineNumberEv>
 80074ce:	4603      	mov	r3, r0
 80074d0:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3318      	adds	r3, #24
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6838      	ldr	r0, [r7, #0]
 80074dc:	4798      	blx	r3
 80074de:	4603      	mov	r3, r0
 80074e0:	f083 0301 	eor.w	r3, r3, #1
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d004      	beq.n	80074f4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	2201      	movs	r2, #1
 80074f2:	741a      	strb	r2, [r3, #16]
    }
}
 80074f4:	bf00      	nop
 80074f6:	3724      	adds	r7, #36	; 0x24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd90      	pop	{r4, r7, pc}
 80074fc:	200000a4 	.word	0x200000a4
 8007500:	080219d4 	.word	0x080219d4

08007504 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08a      	sub	sp, #40	; 0x28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8007510:	f107 0310 	add.w	r3, r7, #16
 8007514:	4928      	ldr	r1, [pc, #160]	; (80075b8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 8007516:	4618      	mov	r0, r3
 8007518:	f003 fa51 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	3328      	adds	r3, #40	; 0x28
 8007522:	4618      	mov	r0, r3
 8007524:	f003 fdf2 	bl	800b10c <_ZNK12SimpleString7isEmptyEv>
 8007528:	4603      	mov	r3, r0
 800752a:	f083 0301 	eor.w	r3, r3, #1
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00f      	beq.n	8007554 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800753c:	f107 0310 	add.w	r3, r7, #16
 8007540:	4611      	mov	r1, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f003 fe70 	bl	800b228 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8007548:	f107 0310 	add.w	r3, r7, #16
 800754c:	491b      	ldr	r1, [pc, #108]	; (80075bc <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 800754e:	4618      	mov	r0, r3
 8007550:	f003 fe7c 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8007554:	f107 0310 	add.w	r3, r7, #16
 8007558:	6879      	ldr	r1, [r7, #4]
 800755a:	4618      	mov	r0, r3
 800755c:	f003 fe64 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3384      	adds	r3, #132	; 0x84
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f107 0018 	add.w	r0, r7, #24
 800756c:	f107 0210 	add.w	r2, r7, #16
 8007570:	68b9      	ldr	r1, [r7, #8]
 8007572:	4798      	blx	r3
 8007574:	f107 0320 	add.w	r3, r7, #32
 8007578:	4911      	ldr	r1, [pc, #68]	; (80075c0 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 800757a:	4618      	mov	r0, r3
 800757c:	f003 fa1f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f107 0220 	add.w	r2, r7, #32
 8007586:	f107 0118 	add.w	r1, r7, #24
 800758a:	4618      	mov	r0, r3
 800758c:	f003 fe31 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 8007590:	f107 0320 	add.w	r3, r7, #32
 8007594:	4618      	mov	r0, r3
 8007596:	f003 fdca 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800759a:	f107 0318 	add.w	r3, r7, #24
 800759e:	4618      	mov	r0, r3
 80075a0:	f003 fdc5 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 80075a4:	f107 0310 	add.w	r3, r7, #16
 80075a8:	4618      	mov	r0, r3
 80075aa:	f003 fdc0 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 80075ae:	bf00      	nop
}
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	3728      	adds	r7, #40	; 0x28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	080219f0 	.word	0x080219f0
 80075bc:	080219fc 	.word	0x080219fc
 80075c0:	08021a00 	.word	0x08021a00

080075c4 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 80075d0:	6879      	ldr	r1, [r7, #4]
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f003 fa47 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 80075d8:	4b0a      	ldr	r3, [pc, #40]	; (8007604 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00a      	beq.n	80075fa <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	225f      	movs	r2, #95	; 0x5f
 80075ea:	4619      	mov	r1, r3
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f003 fbcc 	bl	800ad8a <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	3301      	adds	r3, #1
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	e7f0      	b.n	80075dc <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 80075fa:	bf00      	nop
}
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	08021a08 	.word	0x08021a08

08007608 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d006      	beq.n	8007628 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	3328      	adds	r3, #40	; 0x28
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	4618      	mov	r0, r3
 8007624:	f003 fa37 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
    }
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8007630:	b590      	push	{r4, r7, lr}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3368      	adds	r3, #104	; 0x68
 800763e:	681c      	ldr	r4, [r3, #0]
 8007640:	f107 0308 	add.w	r3, r7, #8
 8007644:	4908      	ldr	r1, [pc, #32]	; (8007668 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 8007646:	4618      	mov	r0, r3
 8007648:	f003 f9b9 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800764c:	f107 0308 	add.w	r3, r7, #8
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	47a0      	blx	r4
 8007656:	f107 0308 	add.w	r3, r7, #8
 800765a:	4618      	mov	r0, r3
 800765c:	f003 fd67 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8007660:	bf00      	nop
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	bd90      	pop	{r4, r7, pc}
 8007668:	08021a14 	.word	0x08021a14

0800766c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 800766c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007670:	b08a      	sub	sp, #40	; 0x28
 8007672:	af04      	add	r7, sp, #16
 8007674:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 800767c:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 8007682:	3314      	adds	r3, #20
 8007684:	4618      	mov	r0, r3
 8007686:	f003 fd25 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800768a:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 8007692:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	4a23      	ldr	r2, [pc, #140]	; (8007728 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 800769c:	fba2 2303 	umull	r2, r3, r2, r3
 80076a0:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 80076a2:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	4b1f      	ldr	r3, [pc, #124]	; (8007728 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 80076ac:	fba3 1302 	umull	r1, r3, r3, r2
 80076b0:	099b      	lsrs	r3, r3, #6
 80076b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80076b6:	fb01 f303 	mul.w	r3, r1, r3
 80076ba:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 80076bc:	603b      	str	r3, [r7, #0]
 80076be:	4b1b      	ldr	r3, [pc, #108]	; (800772c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4798      	blx	r3
 80076c4:	4603      	mov	r3, r0
 80076c6:	f107 0008 	add.w	r0, r7, #8
 80076ca:	9303      	str	r3, [sp, #12]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	9302      	str	r3, [sp, #8]
 80076d0:	9601      	str	r6, [sp, #4]
 80076d2:	9500      	str	r5, [sp, #0]
 80076d4:	4623      	mov	r3, r4
 80076d6:	4642      	mov	r2, r8
 80076d8:	4915      	ldr	r1, [pc, #84]	; (8007730 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 80076da:	f004 fa2f 	bl	800bb3c <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3368      	adds	r3, #104	; 0x68
 80076e4:	681c      	ldr	r4, [r3, #0]
 80076e6:	f107 0308 	add.w	r3, r7, #8
 80076ea:	4618      	mov	r0, r3
 80076ec:	f003 fcf2 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 80076f0:	4602      	mov	r2, r0
 80076f2:	f107 0310 	add.w	r3, r7, #16
 80076f6:	4611      	mov	r1, r2
 80076f8:	4618      	mov	r0, r3
 80076fa:	f003 f960 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80076fe:	f107 0310 	add.w	r3, r7, #16
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	47a0      	blx	r4
 8007708:	f107 0310 	add.w	r3, r7, #16
 800770c:	4618      	mov	r0, r3
 800770e:	f003 fd0e 	bl	800b12e <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 8007712:	f107 0308 	add.w	r3, r7, #8
 8007716:	4618      	mov	r0, r3
 8007718:	f003 fd09 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800771c:	bf00      	nop
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007726:	bf00      	nop
 8007728:	10624dd3 	.word	0x10624dd3
 800772c:	200000a8 	.word	0x200000a8
 8007730:	08021a40 	.word	0x08021a40

08007734 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8007734:	b590      	push	{r4, r7, lr}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3368      	adds	r3, #104	; 0x68
 8007742:	681c      	ldr	r4, [r3, #0]
 8007744:	f107 0308 	add.w	r3, r7, #8
 8007748:	4912      	ldr	r1, [pc, #72]	; (8007794 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 800774a:	4618      	mov	r0, r3
 800774c:	f003 f937 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8007750:	f107 0308 	add.w	r3, r7, #8
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	47a0      	blx	r4
 800775a:	f107 0308 	add.w	r3, r7, #8
 800775e:	4618      	mov	r0, r3
 8007760:	f003 fce5 	bl	800b12e <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3368      	adds	r3, #104	; 0x68
 800776a:	681c      	ldr	r4, [r3, #0]
 800776c:	f107 0310 	add.w	r3, r7, #16
 8007770:	4909      	ldr	r1, [pc, #36]	; (8007798 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 8007772:	4618      	mov	r0, r3
 8007774:	f003 f923 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8007778:	f107 0310 	add.w	r3, r7, #16
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	47a0      	blx	r4
 8007782:	f107 0310 	add.w	r3, r7, #16
 8007786:	4618      	mov	r0, r3
 8007788:	f003 fcd1 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800778c:	bf00      	nop
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	bd90      	pop	{r4, r7, pc}
 8007794:	08021ab0 	.word	0x08021ab0
 8007798:	08021ac0 	.word	0x08021ac0

0800779c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f003 fc93 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 80077ae:	4603      	mov	r3, r0
 80077b0:	4619      	mov	r1, r3
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f003 f903 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 80077b8:	4a0e      	ldr	r2, [pc, #56]	; (80077f4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 80077ba:	490f      	ldr	r1, [pc, #60]	; (80077f8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f003 fb13 	bl	800ade8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 80077c2:	4a0e      	ldr	r2, [pc, #56]	; (80077fc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 80077c4:	490e      	ldr	r1, [pc, #56]	; (8007800 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f003 fb0e 	bl	800ade8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 80077cc:	4a0d      	ldr	r2, [pc, #52]	; (8007804 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 80077ce:	490e      	ldr	r1, [pc, #56]	; (8007808 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f003 fb09 	bl	800ade8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 80077d6:	4a0d      	ldr	r2, [pc, #52]	; (800780c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 80077d8:	490d      	ldr	r1, [pc, #52]	; (8007810 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f003 fb04 	bl	800ade8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 80077e0:	4a0c      	ldr	r2, [pc, #48]	; (8007814 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 80077e2:	490d      	ldr	r1, [pc, #52]	; (8007818 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f003 faff 	bl	800ade8 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 80077ea:	bf00      	nop
}
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	08021ad0 	.word	0x08021ad0
 80077f8:	08021ad8 	.word	0x08021ad8
 80077fc:	08021adc 	.word	0x08021adc
 8007800:	08021ae4 	.word	0x08021ae4
 8007804:	08021ae8 	.word	0x08021ae8
 8007808:	08021af0 	.word	0x08021af0
 800780c:	08021af4 	.word	0x08021af4
 8007810:	08021afc 	.word	0x08021afc
 8007814:	08021b00 	.word	0x08021b00
 8007818:	08021b0c 	.word	0x08021b0c

0800781c <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 800781c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007820:	b096      	sub	sp, #88	; 0x58
 8007822:	af08      	add	r7, sp, #32
 8007824:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 800782e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 80b2 	beq.w	800799a <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 800783a:	3328      	adds	r3, #40	; 0x28
 800783c:	4618      	mov	r0, r3
 800783e:	f003 fc49 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8007842:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	3328      	adds	r3, #40	; 0x28
 800784a:	4618      	mov	r0, r3
 800784c:	f003 fc5e 	bl	800b10c <_ZNK12SimpleString7isEmptyEv>
 8007850:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8007856:	4c53      	ldr	r4, [pc, #332]	; (80079a4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8007858:	e000      	b.n	800785c <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 800785a:	4c53      	ldr	r4, [pc, #332]	; (80079a8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8007860:	3314      	adds	r3, #20
 8007862:	4618      	mov	r0, r3
 8007864:	f003 fc36 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8007868:	4605      	mov	r5, r0
 800786a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786c:	4618      	mov	r0, r3
 800786e:	f003 fc31 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8007872:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8007874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007876:	6a1a      	ldr	r2, [r3, #32]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8007880:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8007882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	4a49      	ldr	r2, [pc, #292]	; (80079ac <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8007888:	fba2 2303 	umull	r2, r3, r2, r3
 800788c:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 800788e:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8007890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	4b45      	ldr	r3, [pc, #276]	; (80079ac <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8007896:	fba3 1302 	umull	r1, r3, r3, r2
 800789a:	099b      	lsrs	r3, r3, #6
 800789c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80078a0:	fb01 f303 	mul.w	r3, r1, r3
 80078a4:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 80078a6:	603b      	str	r3, [r7, #0]
 80078a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078aa:	3314      	adds	r3, #20
 80078ac:	4618      	mov	r0, r3
 80078ae:	f003 fc11 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 80078b2:	4602      	mov	r2, r0
 80078b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	f107 0014 	add.w	r0, r7, #20
 80078bc:	9306      	str	r3, [sp, #24]
 80078be:	9205      	str	r2, [sp, #20]
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	9204      	str	r2, [sp, #16]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	9203      	str	r2, [sp, #12]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	9302      	str	r3, [sp, #8]
 80078cc:	9601      	str	r6, [sp, #4]
 80078ce:	9500      	str	r5, [sp, #0]
 80078d0:	4623      	mov	r3, r4
 80078d2:	4642      	mov	r2, r8
 80078d4:	4936      	ldr	r1, [pc, #216]	; (80079b0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 80078d6:	f004 f931 	bl	800bb3c <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3368      	adds	r3, #104	; 0x68
 80078e0:	681c      	ldr	r4, [r3, #0]
 80078e2:	f107 0314 	add.w	r3, r7, #20
 80078e6:	4618      	mov	r0, r3
 80078e8:	f003 fbf4 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 80078ec:	4602      	mov	r2, r0
 80078ee:	f107 031c 	add.w	r3, r7, #28
 80078f2:	4611      	mov	r1, r2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f003 f862 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80078fa:	f107 031c 	add.w	r3, r7, #28
 80078fe:	4619      	mov	r1, r3
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	47a0      	blx	r4
 8007904:	f107 031c 	add.w	r3, r7, #28
 8007908:	4618      	mov	r0, r3
 800790a:	f003 fc10 	bl	800b12e <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007914:	6a12      	ldr	r2, [r2, #32]
 8007916:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8007918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d007      	beq.n	8007930 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3388      	adds	r3, #136	; 0x88
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	4798      	blx	r3
 800792e:	e017      	b.n	8007960 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8007930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007932:	7c1b      	ldrb	r3, [r3, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d013      	beq.n	8007960 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3368      	adds	r3, #104	; 0x68
 800793e:	681c      	ldr	r4, [r3, #0]
 8007940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007944:	491b      	ldr	r1, [pc, #108]	; (80079b4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8007946:	4618      	mov	r0, r3
 8007948:	f003 f839 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800794c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007950:	4619      	mov	r1, r3
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	47a0      	blx	r4
 8007956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800795a:	4618      	mov	r0, r3
 800795c:	f003 fbe7 	bl	800b12e <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3368      	adds	r3, #104	; 0x68
 8007966:	681c      	ldr	r4, [r3, #0]
 8007968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800796c:	4912      	ldr	r1, [pc, #72]	; (80079b8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 800796e:	4618      	mov	r0, r3
 8007970:	f003 f825 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8007974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007978:	4619      	mov	r1, r3
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	47a0      	blx	r4
 800797e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007982:	4618      	mov	r0, r3
 8007984:	f003 fbd3 	bl	800b12e <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8007988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 800798e:	f107 0314 	add.w	r3, r7, #20
 8007992:	4618      	mov	r0, r3
 8007994:	f003 fbcb 	bl	800b12e <_ZN12SimpleStringD1Ev>
    while (cur) {
 8007998:	e749      	b.n	800782e <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 800799a:	bf00      	nop
 800799c:	3738      	adds	r7, #56	; 0x38
 800799e:	46bd      	mov	sp, r7
 80079a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a4:	080219d0 	.word	0x080219d0
 80079a8:	08021b10 	.word	0x08021b10
 80079ac:	10624dd3 	.word	0x10624dd3
 80079b0:	08021b14 	.word	0x08021b14
 80079b4:	08021b70 	.word	0x08021b70
 80079b8:	08021b80 	.word	0x08021b80

080079bc <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 80079bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079be:	b091      	sub	sp, #68	; 0x44
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	68d9      	ldr	r1, [r3, #12]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3308      	adds	r3, #8
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f107 0210 	add.w	r2, r7, #16
 80079d8:	4610      	mov	r0, r2
 80079da:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80079dc:	f107 0310 	add.w	r3, r7, #16
 80079e0:	4618      	mov	r0, r3
 80079e2:	f003 fb77 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 80079e6:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3314      	adds	r3, #20
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4610      	mov	r0, r2
 80079f8:	4798      	blx	r3
 80079fa:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80079fc:	461e      	mov	r6, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3380      	adds	r3, #128	; 0x80
 8007a04:	681c      	ldr	r4, [r3, #0]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	68d9      	ldr	r1, [r3, #12]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3318      	adds	r3, #24
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f107 0220 	add.w	r2, r7, #32
 8007a18:	4610      	mov	r0, r2
 8007a1a:	4798      	blx	r3
 8007a1c:	f107 0318 	add.w	r3, r7, #24
 8007a20:	f107 0220 	add.w	r2, r7, #32
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	4618      	mov	r0, r3
 8007a28:	47a0      	blx	r4
 8007a2a:	f107 0318 	add.w	r3, r7, #24
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f003 fb50 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f107 0008 	add.w	r0, r7, #8
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	4633      	mov	r3, r6
 8007a3e:	462a      	mov	r2, r5
 8007a40:	4924      	ldr	r1, [pc, #144]	; (8007ad4 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 8007a42:	f004 f87b 	bl	800bb3c <_Z16StringFromFormatPKcz>
 8007a46:	f107 0318 	add.w	r3, r7, #24
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f003 fb6f 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8007a50:	f107 0320 	add.w	r3, r7, #32
 8007a54:	4618      	mov	r0, r3
 8007a56:	f003 fb6a 	bl	800b12e <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8007a5a:	f107 0310 	add.w	r3, r7, #16
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f003 fb65 	bl	800b12e <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3368      	adds	r3, #104	; 0x68
 8007a6a:	681c      	ldr	r4, [r3, #0]
 8007a6c:	f107 0308 	add.w	r3, r7, #8
 8007a70:	4618      	mov	r0, r3
 8007a72:	f003 fb2f 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8007a76:	4602      	mov	r2, r0
 8007a78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f002 ff9d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8007a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	47a0      	blx	r4
 8007a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a92:	4618      	mov	r0, r3
 8007a94:	f003 fb4b 	bl	800b12e <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3368      	adds	r3, #104	; 0x68
 8007a9e:	681c      	ldr	r4, [r3, #0]
 8007aa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007aa4:	490c      	ldr	r1, [pc, #48]	; (8007ad8 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f002 ff89 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8007aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	47a0      	blx	r4
 8007ab6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007aba:	4618      	mov	r0, r3
 8007abc:	f003 fb37 	bl	800b12e <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8007ac0:	f107 0308 	add.w	r3, r7, #8
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f003 fb32 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8007aca:	bf00      	nop
 8007acc:	373c      	adds	r7, #60	; 0x3c
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	08021b90 	.word	0x08021b90
 8007ad8:	08021bcc 	.word	0x08021bcc

08007adc <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 8007adc:	b590      	push	{r4, r7, lr}
 8007ade:	b08d      	sub	sp, #52	; 0x34
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3368      	adds	r3, #104	; 0x68
 8007aea:	681c      	ldr	r4, [r3, #0]
 8007aec:	f107 0308 	add.w	r3, r7, #8
 8007af0:	4933      	ldr	r1, [pc, #204]	; (8007bc0 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 8007af2:	4618      	mov	r0, r3
 8007af4:	f002 ff63 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8007af8:	f107 0308 	add.w	r3, r7, #8
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	47a0      	blx	r4
 8007b02:	f107 0308 	add.w	r3, r7, #8
 8007b06:	4618      	mov	r0, r3
 8007b08:	f003 fb11 	bl	800b12e <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3368      	adds	r3, #104	; 0x68
 8007b12:	681c      	ldr	r4, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3380      	adds	r3, #128	; 0x80
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	6912      	ldr	r2, [r2, #16]
 8007b20:	3230      	adds	r2, #48	; 0x30
 8007b22:	f107 0010 	add.w	r0, r7, #16
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	4798      	blx	r3
 8007b2a:	f107 0310 	add.w	r3, r7, #16
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	47a0      	blx	r4
 8007b34:	f107 0310 	add.w	r3, r7, #16
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f003 faf8 	bl	800b12e <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3368      	adds	r3, #104	; 0x68
 8007b44:	681c      	ldr	r4, [r3, #0]
 8007b46:	f107 0318 	add.w	r3, r7, #24
 8007b4a:	491e      	ldr	r1, [pc, #120]	; (8007bc4 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f002 ff36 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8007b52:	f107 0318 	add.w	r3, r7, #24
 8007b56:	4619      	mov	r1, r3
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	47a0      	blx	r4
 8007b5c:	f107 0318 	add.w	r3, r7, #24
 8007b60:	4618      	mov	r0, r3
 8007b62:	f003 fae4 	bl	800b12e <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3368      	adds	r3, #104	; 0x68
 8007b6c:	681c      	ldr	r4, [r3, #0]
 8007b6e:	f107 0320 	add.w	r3, r7, #32
 8007b72:	4915      	ldr	r1, [pc, #84]	; (8007bc8 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8007b74:	4618      	mov	r0, r3
 8007b76:	f002 ff22 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8007b7a:	f107 0320 	add.w	r3, r7, #32
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	47a0      	blx	r4
 8007b84:	f107 0320 	add.w	r3, r7, #32
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f003 fad0 	bl	800b12e <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3368      	adds	r3, #104	; 0x68
 8007b94:	681c      	ldr	r4, [r3, #0]
 8007b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b9a:	490c      	ldr	r1, [pc, #48]	; (8007bcc <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f002 ff0e 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8007ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	47a0      	blx	r4
 8007bac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f003 fabc 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8007bb6:	bf00      	nop
 8007bb8:	3734      	adds	r7, #52	; 0x34
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd90      	pop	{r4, r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	08021bd8 	.word	0x08021bd8
 8007bc4:	08021be8 	.word	0x08021be8
 8007bc8:	08021bf8 	.word	0x08021bf8
 8007bcc:	08021c14 	.word	0x08021c14

08007bd0 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 8007bd0:	b590      	push	{r4, r7, lr}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3360      	adds	r3, #96	; 0x60
 8007bde:	681c      	ldr	r4, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	335c      	adds	r3, #92	; 0x5c
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	6912      	ldr	r2, [r2, #16]
 8007bec:	3214      	adds	r2, #20
 8007bee:	f107 0008 	add.w	r0, r7, #8
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	4798      	blx	r3
 8007bf6:	f107 0308 	add.w	r3, r7, #8
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	47a0      	blx	r4
 8007c00:	f107 0308 	add.w	r3, r7, #8
 8007c04:	4618      	mov	r0, r3
 8007c06:	f003 fa92 	bl	800b12e <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3370      	adds	r3, #112	; 0x70
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
    writeTestSuiteSummary();
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3374      	adds	r3, #116	; 0x74
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	4798      	blx	r3
    writeProperties();
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3378      	adds	r3, #120	; 0x78
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	4798      	blx	r3
    writeTestCases();
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	337c      	adds	r3, #124	; 0x7c
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
    writeFileEnding();
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	338c      	adds	r3, #140	; 0x8c
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	4798      	blx	r3
    closeFile();
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	336c      	adds	r3, #108	; 0x6c
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	4798      	blx	r3
}
 8007c52:	bf00      	nop
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd90      	pop	{r4, r7, pc}

08007c5a <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	3330      	adds	r3, #48	; 0x30
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f003 fae2 	bl	800b24c <_ZN12SimpleStringpLEPKc>
}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
}
 8007c9a:	bf00      	nop
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	6039      	str	r1, [r7, #0]
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 8007cd0:	b590      	push	{r4, r7, lr}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d113      	bne.n	8007d0e <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	3201      	adds	r2, #1
 8007cee:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 8007cf0:	f240 1233 	movw	r2, #307	; 0x133
 8007cf4:	4908      	ldr	r1, [pc, #32]	; (8007d18 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 8007cf6:	2034      	movs	r0, #52	; 0x34
 8007cf8:	f000 fa9e 	bl	8008238 <_ZnwjPKci>
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	4620      	mov	r0, r4
 8007d02:	f004 fd37 	bl	800c774 <_ZN11TestFailureC1ERKS_>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	60dc      	str	r4, [r3, #12]
    }
}
 8007d0e:	bf00      	nop
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd90      	pop	{r4, r7, pc}
 8007d16:	bf00      	nop
 8007d18:	080219d4 	.word	0x080219d4

08007d1c <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 8007d1c:	b5b0      	push	{r4, r5, r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 8007d26:	4b08      	ldr	r3, [pc, #32]	; (8007d48 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8007d28:	681d      	ldr	r5, [r3, #0]
 8007d2a:	6838      	ldr	r0, [r7, #0]
 8007d2c:	f003 f9d2 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8007d30:	4602      	mov	r2, r0
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	691c      	ldr	r4, [r3, #16]
 8007d36:	4905      	ldr	r1, [pc, #20]	; (8007d4c <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8007d38:	4610      	mov	r0, r2
 8007d3a:	47a8      	blx	r5
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bdb0      	pop	{r4, r5, r7, pc}
 8007d48:	200000b0 	.word	0x200000b0
 8007d4c:	08021c24 	.word	0x08021c24

08007d50 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 8007d50:	b590      	push	{r4, r7, lr}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 8007d5a:	4b08      	ldr	r3, [pc, #32]	; (8007d7c <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 8007d5c:	681c      	ldr	r4, [r3, #0]
 8007d5e:	6838      	ldr	r0, [r7, #0]
 8007d60:	f003 f9b8 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8007d64:	4602      	mov	r2, r0
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	47a0      	blx	r4
}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd90      	pop	{r4, r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	200000b4 	.word	0x200000b4

08007d80 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8007d88:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6912      	ldr	r2, [r2, #16]
 8007d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d92:	4610      	mov	r0, r2
 8007d94:	4798      	blx	r3
}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	200000b8 	.word	0x200000b8

08007da4 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]
        return false;
 8007db2:	2300      	movs	r3, #0
    }
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
    {
 8007dc8:	4a04      	ldr	r2, [pc, #16]	; (8007ddc <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	601a      	str	r2, [r3, #0]
    }
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	080251a4 	.word	0x080251a4

08007de0 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
    }
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff ffe9 	bl	8007dc0 <_ZN17MemoryLeakFailureD1Ev>
 8007dee:	2104      	movs	r1, #4
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fa35 	bl	8008260 <_ZdlPvj>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 8007e00:	b590      	push	{r4, r7, lr}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	687c      	ldr	r4, [r7, #4]
 8007e0a:	f000 fc71 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	4618      	mov	r0, r3
 8007e12:	f00c ff6c 	bl	8014cee <_ZN18MemoryLeakDetector8getMutexEv>
 8007e16:	4603      	mov	r3, r0
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f002 fb24 	bl	800a468 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4618      	mov	r0, r3
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd90      	pop	{r4, r7, pc}

08007e2a <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f002 fb29 	bl	800a48c <_ZN15ScopedMutexLockD1Ev>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 8007e44:	b590      	push	{r4, r7, lr}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af02      	add	r7, sp, #8
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 8007e50:	f000 fc4e 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007e54:	4604      	mov	r4, r0
 8007e56:	f006 f8df 	bl	800e018 <_Z25getCurrentMallocAllocatorv>
 8007e5a:	4601      	mov	r1, r0
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f00d f983 	bl	8015174 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8007e6e:	4603      	mov	r3, r0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd90      	pop	{r4, r7, pc}

08007e78 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8007e78:	b590      	push	{r4, r7, lr}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af02      	add	r7, sp, #8
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8007e84:	f000 fc34 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	68f9      	ldr	r1, [r7, #12]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f00c ffdd 	bl	8014e4c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 8007e92:	f000 fc2d 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007e96:	4604      	mov	r4, r0
 8007e98:	f006 f8be 	bl	800e018 <_Z25getCurrentMallocAllocatorv>
 8007e9c:	4601      	mov	r1, r0
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	9301      	str	r3, [sp, #4]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f00d f996 	bl	80151dc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8007eb0:	bf00      	nop
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd90      	pop	{r4, r7, pc}

08007eb8 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8007eb8:	b590      	push	{r4, r7, lr}
 8007eba:	b089      	sub	sp, #36	; 0x24
 8007ebc:	af04      	add	r7, sp, #16
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
 8007ec4:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 8007ec6:	f000 fc13 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007eca:	4604      	mov	r4, r0
 8007ecc:	f006 f8a4 	bl	800e018 <_Z25getCurrentMallocAllocatorv>
 8007ed0:	4601      	mov	r1, r0
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	9302      	str	r3, [sp, #8]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f00d f9de 	bl	80152a4 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 8007ee8:	4603      	mov	r3, r0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd90      	pop	{r4, r7, pc}
	...

08007ef4 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 8007f00:	4b04      	ldr	r3, [pc, #16]	; (8007f14 <_ZL13normal_mallocjPKcj+0x20>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	4798      	blx	r3
 8007f08:	4603      	mov	r3, r0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	200000c4 	.word	0x200000c4

08007f18 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 8007f26:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <_ZL14normal_reallocPvjPKcj+0x24>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68b9      	ldr	r1, [r7, #8]
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	4798      	blx	r3
 8007f30:	4603      	mov	r3, r0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	200000c8 	.word	0x200000c8

08007f40 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 8007f4c:	4b03      	ldr	r3, [pc, #12]	; (8007f5c <_ZL11normal_freePvPKcj+0x1c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	4798      	blx	r3
}
 8007f54:	bf00      	nop
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	200000cc 	.word	0x200000cc

08007f60 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8007f60:	b590      	push	{r4, r7, lr}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8007f68:	f107 0308 	add.w	r3, r7, #8
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7ff ff47 	bl	8007e00 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8007f72:	f000 fbbd 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007f76:	4604      	mov	r4, r0
 8007f78:	f005 ff9e 	bl	800deb8 <_Z22getCurrentNewAllocatorv>
 8007f7c:	4601      	mov	r1, r0
 8007f7e:	2300      	movs	r3, #0
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	4620      	mov	r0, r4
 8007f84:	f00d f864 	bl	8015050 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8007f88:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007f8a:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8007f8c:	f107 0308 	add.w	r3, r7, #8
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7ff ff4a 	bl	8007e2a <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8007f96:	4623      	mov	r3, r4
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd90      	pop	{r4, r7, pc}

08007fa0 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8007fa0:	b590      	push	{r4, r7, lr}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8007fa8:	f000 fba2 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007fac:	4604      	mov	r4, r0
 8007fae:	f005 ff83 	bl	800deb8 <_Z22getCurrentNewAllocatorv>
 8007fb2:	4601      	mov	r1, r0
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f00d f849 	bl	8015050 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8007fbe:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd90      	pop	{r4, r7, pc}

08007fca <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8007fca:	b590      	push	{r4, r7, lr}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8007fd2:	f000 fb8d 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	f005 ff6e 	bl	800deb8 <_Z22getCurrentNewAllocatorv>
 8007fdc:	4601      	mov	r1, r0
 8007fde:	2300      	movs	r3, #0
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f00d f834 	bl	8015050 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8007fe8:	4603      	mov	r3, r0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd90      	pop	{r4, r7, pc}

08007ff2 <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8007ff2:	b590      	push	{r4, r7, lr}
 8007ff4:	b089      	sub	sp, #36	; 0x24
 8007ff6:	af02      	add	r7, sp, #8
 8007ff8:	60f8      	str	r0, [r7, #12]
 8007ffa:	60b9      	str	r1, [r7, #8]
 8007ffc:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 8007ffe:	f000 fb77 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008002:	4604      	mov	r4, r0
 8008004:	f005 ff58 	bl	800deb8 <_Z22getCurrentNewAllocatorv>
 8008008:	4601      	mov	r1, r0
 800800a:	2300      	movs	r3, #0
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	4620      	mov	r0, r4
 8008018:	f00d f8ac 	bl	8015174 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800801c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800801e:	697b      	ldr	r3, [r7, #20]
}
 8008020:	4618      	mov	r0, r3
 8008022:	371c      	adds	r7, #28
 8008024:	46bd      	mov	sp, r7
 8008026:	bd90      	pop	{r4, r7, pc}

08008028 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8008028:	b590      	push	{r4, r7, lr}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8008030:	f000 fb5e 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008034:	4604      	mov	r4, r0
 8008036:	f005 ff97 	bl	800df68 <_Z27getCurrentNewArrayAllocatorv>
 800803a:	4601      	mov	r1, r0
 800803c:	2300      	movs	r3, #0
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	4620      	mov	r0, r4
 8008042:	f00d f805 	bl	8015050 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008046:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008048:	68fb      	ldr	r3, [r7, #12]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	bd90      	pop	{r4, r7, pc}

08008052 <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8008052:	b590      	push	{r4, r7, lr}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800805a:	f000 fb49 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800805e:	4604      	mov	r4, r0
 8008060:	f005 ff82 	bl	800df68 <_Z27getCurrentNewArrayAllocatorv>
 8008064:	4601      	mov	r1, r0
 8008066:	2300      	movs	r3, #0
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	4620      	mov	r0, r4
 800806c:	f00c fff0 	bl	8015050 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008070:	4603      	mov	r3, r0
}
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	bd90      	pop	{r4, r7, pc}

0800807a <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800807a:	b590      	push	{r4, r7, lr}
 800807c:	b089      	sub	sp, #36	; 0x24
 800807e:	af02      	add	r7, sp, #8
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8008086:	f000 fb33 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800808a:	4604      	mov	r4, r0
 800808c:	f005 ff6c 	bl	800df68 <_Z27getCurrentNewArrayAllocatorv>
 8008090:	4601      	mov	r1, r0
 8008092:	2300      	movs	r3, #0
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	4620      	mov	r0, r4
 80080a0:	f00d f868 	bl	8015174 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80080a4:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80080a6:	697b      	ldr	r3, [r7, #20]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	371c      	adds	r7, #28
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd90      	pop	{r4, r7, pc}

080080b0 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 80080b0:	b590      	push	{r4, r7, lr}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 80080b8:	f000 fb1a 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80080bc:	4603      	mov	r3, r0
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f00c fec3 	bl	8014e4c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 80080c6:	f000 fb13 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80080ca:	4604      	mov	r4, r0
 80080cc:	f005 fef4 	bl	800deb8 <_Z22getCurrentNewAllocatorv>
 80080d0:	4601      	mov	r1, r0
 80080d2:	2300      	movs	r3, #0
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	4620      	mov	r0, r4
 80080d8:	f00d f8ca 	bl	8015270 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd90      	pop	{r4, r7, pc}

080080e4 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 80080e4:	b590      	push	{r4, r7, lr}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 80080ec:	f000 fb00 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80080f0:	4603      	mov	r3, r0
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f00c fea9 	bl	8014e4c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 80080fa:	f000 faf9 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80080fe:	4604      	mov	r4, r0
 8008100:	f005 ff32 	bl	800df68 <_Z27getCurrentNewArrayAllocatorv>
 8008104:	4601      	mov	r1, r0
 8008106:	2300      	movs	r3, #0
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	4620      	mov	r0, r4
 800810c:	f00d f8b0 	bl	8015270 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	bd90      	pop	{r4, r7, pc}

08008118 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008120:	4b04      	ldr	r3, [pc, #16]	; (8008134 <_ZL19normal_operator_newj+0x1c>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	4798      	blx	r3
 8008128:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800812a:	68fb      	ldr	r3, [r7, #12]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	200000c4 	.word	0x200000c4

08008138 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <_ZL27normal_operator_new_nothrowj+0x1c>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	4798      	blx	r3
 8008148:	4603      	mov	r3, r0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	200000c4 	.word	0x200000c4

08008158 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008164:	4b04      	ldr	r3, [pc, #16]	; (8008178 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	4798      	blx	r3
 800816c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800816e:	697b      	ldr	r3, [r7, #20]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	200000c4 	.word	0x200000c4

0800817c <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008184:	4b04      	ldr	r3, [pc, #16]	; (8008198 <_ZL25normal_operator_new_arrayj+0x1c>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	4798      	blx	r3
 800818c:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800818e:	68fb      	ldr	r3, [r7, #12]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	200000c4 	.word	0x200000c4

0800819c <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 80081a4:	4b04      	ldr	r3, [pc, #16]	; (80081b8 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	4798      	blx	r3
 80081ac:	4603      	mov	r3, r0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	200000c4 	.word	0x200000c4

080081bc <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 80081c8:	4b04      	ldr	r3, [pc, #16]	; (80081dc <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	4798      	blx	r3
 80081d0:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80081d2:	697b      	ldr	r3, [r7, #20]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3718      	adds	r7, #24
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	200000c4 	.word	0x200000c4

080081e0 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 80081e8:	4b03      	ldr	r3, [pc, #12]	; (80081f8 <_ZL22normal_operator_deletePv+0x18>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	4798      	blx	r3
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	200000cc 	.word	0x200000cc

080081fc <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8008204:	4b03      	ldr	r3, [pc, #12]	; (8008214 <_ZL28normal_operator_delete_arrayPv+0x18>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	4798      	blx	r3
}
 800820c:	bf00      	nop
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	200000cc 	.word	0x200000cc

08008218 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8008220:	4b04      	ldr	r3, [pc, #16]	; (8008234 <_Znwj+0x1c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	4798      	blx	r3
 8008228:	4603      	mov	r3, r0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	20000028 	.word	0x20000028

08008238 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8008244:	4b05      	ldr	r3, [pc, #20]	; (800825c <_ZnwjPKci+0x24>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	68b9      	ldr	r1, [r7, #8]
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	4798      	blx	r3
 8008250:	4603      	mov	r3, r0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	20000030 	.word	0x20000030

08008260 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800826a:	4b04      	ldr	r3, [pc, #16]	; (800827c <_ZdlPvj+0x1c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
}
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20000040 	.word	0x20000040

08008280 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 800828c:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <_ZnajPKci+0x24>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	68b9      	ldr	r1, [r7, #8]
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	4798      	blx	r3
 8008298:	4603      	mov	r3, r0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	2000003c 	.word	0x2000003c

080082a8 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 80082b0:	4b03      	ldr	r3, [pc, #12]	; (80082c0 <_ZdaPv+0x18>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	4798      	blx	r3
}
 80082b8:	bf00      	nop
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	20000044 	.word	0x20000044

080082c4 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 80082ce:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <_ZdaPvj+0x1c>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	4798      	blx	r3
}
 80082d6:	bf00      	nop
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20000044 	.word	0x20000044

080082e4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 80082e4:	b480      	push	{r7}
 80082e6:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 80082e8:	4b12      	ldr	r3, [pc, #72]	; (8008334 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 80082ea:	4a13      	ldr	r2, [pc, #76]	; (8008338 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 80082ec:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 80082ee:	4b13      	ldr	r3, [pc, #76]	; (800833c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 80082f0:	4a13      	ldr	r2, [pc, #76]	; (8008340 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 80082f2:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 80082f4:	4b13      	ldr	r3, [pc, #76]	; (8008344 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 80082f6:	4a14      	ldr	r2, [pc, #80]	; (8008348 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 80082f8:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 80082fa:	4b14      	ldr	r3, [pc, #80]	; (800834c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 80082fc:	4a14      	ldr	r2, [pc, #80]	; (8008350 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 80082fe:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 8008300:	4b14      	ldr	r3, [pc, #80]	; (8008354 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 8008302:	4a15      	ldr	r2, [pc, #84]	; (8008358 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8008304:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 8008306:	4b15      	ldr	r3, [pc, #84]	; (800835c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8008308:	4a15      	ldr	r2, [pc, #84]	; (8008360 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 800830a:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 800830c:	4b15      	ldr	r3, [pc, #84]	; (8008364 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800830e:	4a16      	ldr	r2, [pc, #88]	; (8008368 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8008310:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 8008312:	4b16      	ldr	r3, [pc, #88]	; (800836c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8008314:	4a16      	ldr	r2, [pc, #88]	; (8008370 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 8008316:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8008318:	4b16      	ldr	r3, [pc, #88]	; (8008374 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 800831a:	4a17      	ldr	r2, [pc, #92]	; (8008378 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 800831c:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 800831e:	4b17      	ldr	r3, [pc, #92]	; (800837c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8008320:	4a17      	ldr	r2, [pc, #92]	; (8008380 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 8008322:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8008324:	4b17      	ldr	r3, [pc, #92]	; (8008384 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 8008326:	4a18      	ldr	r2, [pc, #96]	; (8008388 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8008328:	601a      	str	r2, [r3, #0]

#endif
}
 800832a:	bf00      	nop
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	20000028 	.word	0x20000028
 8008338:	08008119 	.word	0x08008119
 800833c:	2000002c 	.word	0x2000002c
 8008340:	08008139 	.word	0x08008139
 8008344:	20000030 	.word	0x20000030
 8008348:	08008159 	.word	0x08008159
 800834c:	20000034 	.word	0x20000034
 8008350:	0800817d 	.word	0x0800817d
 8008354:	20000038 	.word	0x20000038
 8008358:	0800819d 	.word	0x0800819d
 800835c:	2000003c 	.word	0x2000003c
 8008360:	080081bd 	.word	0x080081bd
 8008364:	20000040 	.word	0x20000040
 8008368:	080081e1 	.word	0x080081e1
 800836c:	20000044 	.word	0x20000044
 8008370:	080081fd 	.word	0x080081fd
 8008374:	20000010 	.word	0x20000010
 8008378:	08007ef5 	.word	0x08007ef5
 800837c:	20000018 	.word	0x20000018
 8008380:	08007f19 	.word	0x08007f19
 8008384:	20000014 	.word	0x20000014
 8008388:	08007f41 	.word	0x08007f41

0800838c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8008390:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a08      	ldr	r2, [pc, #32]	; (80083b8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d004      	beq.n	80083a4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800839a:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a07      	ldr	r2, [pc, #28]	; (80083bc <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d101      	bne.n	80083a8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e000      	b.n	80083aa <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 80083a8:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	20000028 	.word	0x20000028
 80083b8:	08007fa1 	.word	0x08007fa1
 80083bc:	08007f61 	.word	0x08007f61

080083c0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 80083c4:	4b1f      	ldr	r3, [pc, #124]	; (8008444 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3301      	adds	r3, #1
 80083ca:	4a1e      	ldr	r2, [pc, #120]	; (8008444 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	4b1d      	ldr	r3, [pc, #116]	; (8008444 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	bfcc      	ite	gt
 80083d6:	2301      	movgt	r3, #1
 80083d8:	2300      	movle	r3, #0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d12e      	bne.n	800843e <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 80083e0:	4b19      	ldr	r3, [pc, #100]	; (8008448 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a19      	ldr	r2, [pc, #100]	; (800844c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 80083e6:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 80083e8:	4b19      	ldr	r3, [pc, #100]	; (8008450 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a19      	ldr	r2, [pc, #100]	; (8008454 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 80083ee:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 80083f0:	4b19      	ldr	r3, [pc, #100]	; (8008458 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a19      	ldr	r2, [pc, #100]	; (800845c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 80083f6:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 80083f8:	4b19      	ldr	r3, [pc, #100]	; (8008460 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a19      	ldr	r2, [pc, #100]	; (8008464 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 80083fe:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 8008400:	4b19      	ldr	r3, [pc, #100]	; (8008468 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a19      	ldr	r2, [pc, #100]	; (800846c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8008406:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8008408:	4b19      	ldr	r3, [pc, #100]	; (8008470 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a19      	ldr	r2, [pc, #100]	; (8008474 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800840e:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8008410:	4b19      	ldr	r3, [pc, #100]	; (8008478 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a19      	ldr	r2, [pc, #100]	; (800847c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 8008416:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8008418:	4b19      	ldr	r3, [pc, #100]	; (8008480 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a19      	ldr	r2, [pc, #100]	; (8008484 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800841e:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8008420:	4b19      	ldr	r3, [pc, #100]	; (8008488 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a19      	ldr	r2, [pc, #100]	; (800848c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 8008426:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8008428:	4b19      	ldr	r3, [pc, #100]	; (8008490 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a19      	ldr	r2, [pc, #100]	; (8008494 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800842e:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 8008430:	4b19      	ldr	r3, [pc, #100]	; (8008498 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a19      	ldr	r2, [pc, #100]	; (800849c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 8008436:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8008438:	f7ff ff54 	bl	80082e4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 800843c:	e000      	b.n	8008440 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800843e:	bf00      	nop
#endif
}
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	200006e0 	.word	0x200006e0
 8008448:	20000028 	.word	0x20000028
 800844c:	20000048 	.word	0x20000048
 8008450:	2000002c 	.word	0x2000002c
 8008454:	2000004c 	.word	0x2000004c
 8008458:	20000030 	.word	0x20000030
 800845c:	20000050 	.word	0x20000050
 8008460:	20000034 	.word	0x20000034
 8008464:	20000054 	.word	0x20000054
 8008468:	20000038 	.word	0x20000038
 800846c:	20000058 	.word	0x20000058
 8008470:	2000003c 	.word	0x2000003c
 8008474:	2000005c 	.word	0x2000005c
 8008478:	20000040 	.word	0x20000040
 800847c:	20000060 	.word	0x20000060
 8008480:	20000044 	.word	0x20000044
 8008484:	20000064 	.word	0x20000064
 8008488:	20000010 	.word	0x20000010
 800848c:	2000001c 	.word	0x2000001c
 8008490:	20000018 	.word	0x20000018
 8008494:	20000024 	.word	0x20000024
 8008498:	20000014 	.word	0x20000014
 800849c:	20000020 	.word	0x20000020

080084a0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 80084a0:	b480      	push	{r7}
 80084a2:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 80084a4:	4b1f      	ldr	r3, [pc, #124]	; (8008524 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	4a1e      	ldr	r2, [pc, #120]	; (8008524 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	4b1d      	ldr	r3, [pc, #116]	; (8008524 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	bfcc      	ite	gt
 80084b6:	2301      	movgt	r3, #1
 80084b8:	2300      	movle	r3, #0
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d12c      	bne.n	800851a <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 80084c0:	4b19      	ldr	r3, [pc, #100]	; (8008528 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a19      	ldr	r2, [pc, #100]	; (800852c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 80084c6:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 80084c8:	4b19      	ldr	r3, [pc, #100]	; (8008530 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a19      	ldr	r2, [pc, #100]	; (8008534 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 80084ce:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 80084d0:	4b19      	ldr	r3, [pc, #100]	; (8008538 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a19      	ldr	r2, [pc, #100]	; (800853c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 80084d6:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 80084d8:	4b19      	ldr	r3, [pc, #100]	; (8008540 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a19      	ldr	r2, [pc, #100]	; (8008544 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 80084de:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 80084e0:	4b19      	ldr	r3, [pc, #100]	; (8008548 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a19      	ldr	r2, [pc, #100]	; (800854c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 80084e6:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 80084e8:	4b19      	ldr	r3, [pc, #100]	; (8008550 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a19      	ldr	r2, [pc, #100]	; (8008554 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 80084ee:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 80084f0:	4b19      	ldr	r3, [pc, #100]	; (8008558 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a19      	ldr	r2, [pc, #100]	; (800855c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 80084f6:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 80084f8:	4b19      	ldr	r3, [pc, #100]	; (8008560 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a19      	ldr	r2, [pc, #100]	; (8008564 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 80084fe:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 8008500:	4b19      	ldr	r3, [pc, #100]	; (8008568 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a19      	ldr	r2, [pc, #100]	; (800856c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 8008506:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 8008508:	4b19      	ldr	r3, [pc, #100]	; (8008570 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a19      	ldr	r2, [pc, #100]	; (8008574 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800850e:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 8008510:	4b19      	ldr	r3, [pc, #100]	; (8008578 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a19      	ldr	r2, [pc, #100]	; (800857c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	e000      	b.n	800851c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800851a:	bf00      	nop
#endif
}
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	200006e0 	.word	0x200006e0
 8008528:	20000048 	.word	0x20000048
 800852c:	20000028 	.word	0x20000028
 8008530:	2000004c 	.word	0x2000004c
 8008534:	2000002c 	.word	0x2000002c
 8008538:	20000050 	.word	0x20000050
 800853c:	20000030 	.word	0x20000030
 8008540:	20000054 	.word	0x20000054
 8008544:	20000034 	.word	0x20000034
 8008548:	20000058 	.word	0x20000058
 800854c:	20000038 	.word	0x20000038
 8008550:	2000005c 	.word	0x2000005c
 8008554:	2000003c 	.word	0x2000003c
 8008558:	20000060 	.word	0x20000060
 800855c:	20000040 	.word	0x20000040
 8008560:	20000064 	.word	0x20000064
 8008564:	20000044 	.word	0x20000044
 8008568:	2000001c 	.word	0x2000001c
 800856c:	20000010 	.word	0x20000010
 8008570:	20000024 	.word	0x20000024
 8008574:	20000018 	.word	0x20000018
 8008578:	20000020 	.word	0x20000020
 800857c:	20000014 	.word	0x20000014

08008580 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
    {
 8008588:	4a05      	ldr	r2, [pc, #20]	; (80085a0 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff fc15 	bl	8007dc0 <_ZN17MemoryLeakFailureD1Ev>
    }
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4618      	mov	r0, r3
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	08025190 	.word	0x08025190

080085a4 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
    }
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f7ff ffe7 	bl	8008580 <_ZN25MemoryLeakWarningReporterD1Ev>
 80085b2:	2104      	movs	r1, #4
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7ff fe53 	bl	8008260 <_ZdlPvj>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4618      	mov	r0, r3
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	4a04      	ldr	r2, [pc, #16]	; (80085e0 <_ZN14TestTerminatorC1Ev+0x1c>)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	08025b3c 	.word	0x08025b3c

080085e4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff ffe8 	bl	80085c4 <_ZN14TestTerminatorC1Ev>
 80085f4:	4a03      	ldr	r2, [pc, #12]	; (8008604 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4618      	mov	r0, r3
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	08025b14 	.word	0x08025b14

08008608 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 8008608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800860a:	b099      	sub	sp, #100	; 0x64
 800860c:	af02      	add	r7, sp, #8
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 8008612:	f009 fdb7 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8008616:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 8008618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	339c      	adds	r3, #156	; 0x9c
 800861e:	681c      	ldr	r4, [r3, #0]
 8008620:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008624:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008626:	4618      	mov	r0, r3
 8008628:	f008 fbc4 	bl	8010db4 <_ZNK10UtestShell7getNameEv>
 800862c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008630:	4618      	mov	r0, r3
 8008632:	f002 fd4f 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8008636:	4605      	mov	r5, r0
 8008638:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800863a:	f008 fc9b 	bl	8010f74 <_ZNK10UtestShell13getLineNumberEv>
 800863e:	4606      	mov	r6, r0
 8008640:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	4618      	mov	r0, r3
 8008648:	f002 f9b9 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800864c:	f107 000c 	add.w	r0, r7, #12
 8008650:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	4633      	mov	r3, r6
 8008658:	462a      	mov	r2, r5
 800865a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800865c:	f004 fd14 	bl	800d088 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8008660:	2300      	movs	r3, #0
 8008662:	653b      	str	r3, [r7, #80]	; 0x50
 8008664:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff ffbb 	bl	80085e4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800866e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008672:	f107 030c 	add.w	r3, r7, #12
 8008676:	4619      	mov	r1, r3
 8008678:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800867a:	47a0      	blx	r4
 800867c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008680:	4618      	mov	r0, r3
 8008682:	f009 fe79 	bl	8012378 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8008686:	f107 030c 	add.w	r3, r7, #12
 800868a:	4618      	mov	r0, r3
 800868c:	f000 f9ac 	bl	80089e8 <_ZN11FailFailureD1Ev>
 8008690:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008694:	4618      	mov	r0, r3
 8008696:	f002 fd4a 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800869a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800869e:	4618      	mov	r0, r3
 80086a0:	f002 fd45 	bl	800b12e <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 80086a4:	bf00      	nop
 80086a6:	375c      	adds	r7, #92	; 0x5c
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086ac <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	4a04      	ldr	r2, [pc, #16]	; (80086c8 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	601a      	str	r2, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4618      	mov	r0, r3
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	080251a4 	.word	0x080251a4

080086cc <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7ff ffe8 	bl	80086ac <_ZN17MemoryLeakFailureC1Ev>
 80086dc:	4a03      	ldr	r2, [pc, #12]	; (80086ec <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4618      	mov	r0, r3
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	08025190 	.word	0x08025190

080086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 80086f0:	b598      	push	{r3, r4, r7, lr}
 80086f2:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 80086f4:	4b11      	ldr	r3, [pc, #68]	; (800873c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d11b      	bne.n	8008734 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 80086fc:	f7ff fe60 	bl	80083c0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 8008700:	2004      	movs	r0, #4
 8008702:	f7ff fd89 	bl	8008218 <_Znwj>
 8008706:	4603      	mov	r3, r0
 8008708:	461c      	mov	r4, r3
 800870a:	4620      	mov	r0, r4
 800870c:	f7ff ffde 	bl	80086cc <_ZN25MemoryLeakWarningReporterC1Ev>
 8008710:	4b0b      	ldr	r3, [pc, #44]	; (8008740 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8008712:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 8008714:	f241 1050 	movw	r0, #4432	; 0x1150
 8008718:	f7ff fd7e 	bl	8008218 <_Znwj>
 800871c:	4603      	mov	r3, r0
 800871e:	461c      	mov	r4, r3
 8008720:	4b07      	ldr	r3, [pc, #28]	; (8008740 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4619      	mov	r1, r3
 8008726:	4620      	mov	r0, r4
 8008728:	f00c fa3e 	bl	8014ba8 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800872c:	4b03      	ldr	r3, [pc, #12]	; (800873c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800872e:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 8008730:	f7ff feb6 	bl	80084a0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 8008734:	4b01      	ldr	r3, [pc, #4]	; (800873c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8008736:	681b      	ldr	r3, [r3, #0]
}
 8008738:	4618      	mov	r0, r3
 800873a:	bd98      	pop	{r3, r4, r7, pc}
 800873c:	200006e8 	.word	0x200006e8
 8008740:	200006e4 	.word	0x200006e4

08008744 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	460b      	mov	r3, r1
 800874e:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	78fa      	ldrb	r2, [r7, #3]
 8008754:	765a      	strb	r2, [r3, #25]
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
	...

08008764 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 8008764:	b580      	push	{r7, lr}
 8008766:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 8008768:	f7ff fdbc 	bl	80082e4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800876c:	4b0b      	ldr	r3, [pc, #44]	; (800879c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d004      	beq.n	800877e <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	3204      	adds	r2, #4
 8008778:	6812      	ldr	r2, [r2, #0]
 800877a:	4618      	mov	r0, r3
 800877c:	4790      	blx	r2
    delete globalReporter;
 800877e:	4b08      	ldr	r3, [pc, #32]	; (80087a0 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d004      	beq.n	8008790 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	3204      	adds	r2, #4
 800878a:	6812      	ldr	r2, [r2, #0]
 800878c:	4618      	mov	r0, r3
 800878e:	4790      	blx	r2
    globalDetector = NULLPTR;
 8008790:	4b02      	ldr	r3, [pc, #8]	; (800879c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]
}
 8008796:	bf00      	nop
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	200006e8 	.word	0x200006e8
 80087a0:	200006e4 	.word	0x200006e4

080087a4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	68b9      	ldr	r1, [r7, #8]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f006 fdfd 	bl	800f3b4 <_ZN10TestPluginC1ERK12SimpleString>
 80087ba:	4a14      	ldr	r2, [pc, #80]	; (800880c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	761a      	strb	r2, [r3, #24]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	765a      	strb	r2, [r3, #25]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 80087d2:	4b0f      	ldr	r3, [pc, #60]	; (8008810 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d102      	bne.n	80087e0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 80087da:	4a0d      	ldr	r2, [pc, #52]	; (8008810 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	615a      	str	r2, [r3, #20]
 80087ec:	e004      	b.n	80087f8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 80087ee:	f7ff ff7f 	bl	80086f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80087f2:	4602      	mov	r2, r0
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	695b      	ldr	r3, [r3, #20]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f00c fa69 	bl	8014cd4 <_ZN18MemoryLeakDetector6enableEv>
}
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	080251b8 	.word	0x080251b8
 8008810:	200006ec 	.word	0x200006ec

08008814 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	4a09      	ldr	r2, [pc, #36]	; (8008844 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	7e5b      	ldrb	r3, [r3, #25]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800882a:	f7ff fd5b 	bl	80082e4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800882e:	f7ff ff99 	bl	8008764 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4618      	mov	r0, r3
 8008836:	f006 fdf9 	bl	800f42c <_ZN10TestPluginD1Ev>
    }
}
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4618      	mov	r0, r3
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	080251b8 	.word	0x080251b8

08008848 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
}
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff ffdf 	bl	8008814 <_ZN23MemoryLeakWarningPluginD1Ev>
 8008856:	2124      	movs	r1, #36	; 0x24
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff fd01 	bl	8008260 <_ZdlPvj>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	4618      	mov	r0, r3
 800887a:	f00c fa0e 	bl	8014c9a <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7fd ffb0 	bl	80067e4 <_ZNK10TestResult15getFailureCountEv>
 8008884:	4602      	mov	r2, r0
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	621a      	str	r2, [r3, #32]
}
 800888a:	bf00      	nop
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
	...

08008894 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 8008894:	b590      	push	{r4, r7, lr}
 8008896:	b097      	sub	sp, #92	; 0x5c
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f00c fa08 	bl	8014cba <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	2103      	movs	r1, #3
 80088b0:	4618      	mov	r0, r3
 80088b2:	f00c fda5 	bl	8015400 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 80088b6:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	7e1b      	ldrb	r3, [r3, #24]
 80088bc:	f083 0301 	eor.w	r3, r3, #1
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00e      	beq.n	80088e4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	69db      	ldr	r3, [r3, #28]
 80088ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d009      	beq.n	80088e4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6a1c      	ldr	r4, [r3, #32]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7fd ff85 	bl	80067e4 <_ZNK10TestResult15getFailureCountEv>
 80088da:	4603      	mov	r3, r0
 80088dc:	429c      	cmp	r4, r3
 80088de:	d101      	bne.n	80088e4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80088e0:	2301      	movs	r3, #1
 80088e2:	e000      	b.n	80088e6 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 80088e4:	2300      	movs	r3, #0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d04c      	beq.n	8008984 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 80088ea:	f7ff fd4f 	bl	800838c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d028      	beq.n	8008946 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	2103      	movs	r1, #3
 80088fa:	4618      	mov	r0, r3
 80088fc:	f00c fd45 	bl	801538a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8008900:	4602      	mov	r2, r0
 8008902:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008906:	4611      	mov	r1, r2
 8008908:	4618      	mov	r0, r3
 800890a:	f002 f858 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800890e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008912:	f107 0310 	add.w	r3, r7, #16
 8008916:	68b9      	ldr	r1, [r7, #8]
 8008918:	4618      	mov	r0, r3
 800891a:	f003 feaf 	bl	800c67c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800891e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008922:	4618      	mov	r0, r3
 8008924:	f002 fc03 	bl	800b12e <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3334      	adds	r3, #52	; 0x34
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f107 0210 	add.w	r2, r7, #16
 8008934:	4611      	mov	r1, r2
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800893a:	f107 0310 	add.w	r3, r7, #16
 800893e:	4618      	mov	r0, r3
 8008940:	f003 ff5c 	bl	800c7fc <_ZN11TestFailureD1Ev>
 8008944:	e01e      	b.n	8008984 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d01a      	beq.n	8008984 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3338      	adds	r3, #56	; 0x38
 8008954:	681c      	ldr	r4, [r3, #0]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	69db      	ldr	r3, [r3, #28]
 800895a:	461a      	mov	r2, r3
 800895c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008960:	4910      	ldr	r1, [pc, #64]	; (80089a4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 8008962:	4618      	mov	r0, r3
 8008964:	f003 f8ea 	bl	800bb3c <_Z16StringFromFormatPKcz>
 8008968:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800896c:	4618      	mov	r0, r3
 800896e:	f002 fbb1 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8008972:	4603      	mov	r3, r0
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	47a0      	blx	r4
 800897a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800897e:	4618      	mov	r0, r3
 8008980:	f002 fbd5 	bl	800b12e <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	4618      	mov	r0, r3
 800898a:	f00c fd13 	bl	80153b4 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	61da      	str	r2, [r3, #28]
}
 800899a:	bf00      	nop
 800899c:	375c      	adds	r7, #92	; 0x5c
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd90      	pop	{r4, r7, pc}
 80089a2:	bf00      	nop
 80089a4:	08021c28 	.word	0x08021c28

080089a8 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	2102      	movs	r1, #2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f00c fd21 	bl	8015400 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 80089be:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d007      	beq.n	80089d8 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	2102      	movs	r1, #2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f00c fcdb 	bl	801538a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 80089d4:	4603      	mov	r3, r0
 80089d6:	e000      	b.n	80089da <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 80089d8:	4b02      	ldr	r3, [pc, #8]	; (80089e4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	08021c68 	.word	0x08021c68

080089e8 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	4a05      	ldr	r2, [pc, #20]	; (8008a08 <_ZN11FailFailureD1Ev+0x20>)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	601a      	str	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f003 feff 	bl	800c7fc <_ZN11TestFailureD1Ev>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4618      	mov	r0, r3
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	08025200 	.word	0x08025200

08008a0c <_ZN11FailFailureD0Ev>:
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7ff ffe7 	bl	80089e8 <_ZN11FailFailureD1Ev>
 8008a1a:	2134      	movs	r1, #52	; 0x34
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff fc1f 	bl	8008260 <_ZdlPvj>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4618      	mov	r0, r3
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4618      	mov	r0, r3
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	4a06      	ldr	r2, [pc, #24]	; (8008a80 <_ZN19MockFailureReporterC1Ev+0x24>)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	711a      	strb	r2, [r3, #4]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4618      	mov	r0, r3
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	080263dc 	.word	0x080263dc

08008a84 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	4a04      	ldr	r2, [pc, #16]	; (8008aa0 <_ZN19MockFailureReporterD1Ev+0x1c>)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4618      	mov	r0, r3
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	080263dc 	.word	0x080263dc

08008aa4 <_ZN19MockFailureReporterD0Ev>:
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7ff ffe9 	bl	8008a84 <_ZN19MockFailureReporterD1Ev>
 8008ab2:	2108      	movs	r1, #8
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff fbd3 	bl	8008260 <_ZdlPvj>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	4a05      	ldr	r2, [pc, #20]	; (8008ae4 <_ZN11MockFailureD1Ev+0x20>)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	601a      	str	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f003 fe91 	bl	800c7fc <_ZN11TestFailureD1Ev>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4618      	mov	r0, r3
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	08025354 	.word	0x08025354

08008ae8 <_ZN11MockFailureD0Ev>:
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff ffe7 	bl	8008ac4 <_ZN11MockFailureD1Ev>
 8008af6:	2134      	movs	r1, #52	; 0x34
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7ff fbb1 	bl	8008260 <_ZdlPvj>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 8008b08:	b590      	push	{r4, r7, lr}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
 8008b12:	4a16      	ldr	r2, [pc, #88]	; (8008b6c <_ZN14MockNamedValueC1ERKS_+0x64>)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	601a      	str	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	1d1a      	adds	r2, r3, #4
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	3304      	adds	r3, #4
 8008b20:	4619      	mov	r1, r3
 8008b22:	4610      	mov	r0, r2
 8008b24:	f001 ff9f 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f103 020c 	add.w	r2, r3, #12
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	330c      	adds	r3, #12
 8008b32:	4619      	mov	r1, r3
 8008b34:	4610      	mov	r0, r2
 8008b36:	f001 ff96 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	f102 0418 	add.w	r4, r2, #24
 8008b42:	3318      	adds	r3, #24
 8008b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	629a      	str	r2, [r3, #40]	; 0x28
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	631a      	str	r2, [r3, #48]	; 0x30
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4618      	mov	r0, r3
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd90      	pop	{r4, r7, pc}
 8008b6c:	0802641c 	.word	0x0802641c

08008b70 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 8008b7a:	f107 030c 	add.w	r3, r7, #12
 8008b7e:	4916      	ldr	r1, [pc, #88]	; (8008bd8 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 8008b80:	4618      	mov	r0, r3
 8008b82:	f001 ff1c 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8008b86:	f107 030c 	add.w	r3, r7, #12
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f002 fb1f 	bl	800b1d0 <_ZneRK12SimpleStringS1_>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d005      	beq.n	8008ba4 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 8008b98:	6879      	ldr	r1, [r7, #4]
 8008b9a:	4810      	ldr	r0, [pc, #64]	; (8008bdc <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8008b9c:	f000 ff70 	bl	8009a80 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	e000      	b.n	8008ba6 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 8008ba4:	4b0d      	ldr	r3, [pc, #52]	; (8008bdc <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	f107 030c 	add.w	r3, r7, #12
 8008bac:	4618      	mov	r0, r3
 8008bae:	f002 fabe 	bl	800b12e <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	33a8      	adds	r3, #168	; 0xa8
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6978      	ldr	r0, [r7, #20]
 8008bbe:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	33ac      	adds	r3, #172	; 0xac
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6978      	ldr	r0, [r7, #20]
 8008bca:	4798      	blx	r3
    return mock_support;
 8008bcc:	697b      	ldr	r3, [r7, #20]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	08021c6c 	.word	0x08021c6c
 8008bdc:	200006f0 	.word	0x200006f0

08008be0 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 8008bea:	4a21      	ldr	r2, [pc, #132]	; (8008c70 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	605a      	str	r2, [r3, #4]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	609a      	str	r2, [r3, #8]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	731a      	strb	r2, [r3, #12]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f103 0218 	add.w	r2, r3, #24
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	615a      	str	r2, [r3, #20]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3318      	adds	r3, #24
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7ff ff23 	bl	8008a5c <_ZN19MockFailureReporterC1Ev>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	3320      	adds	r3, #32
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f010 fefc 	bl	8019a18 <_ZN21MockExpectedCallsListC1Ev>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	62da      	str	r2, [r3, #44]	; 0x2c
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	3330      	adds	r3, #48	; 0x30
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f014 fbea 	bl	801d414 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	3338      	adds	r3, #56	; 0x38
 8008c44:	4618      	mov	r0, r3
 8008c46:	f014 faf4 	bl	801d232 <_ZN18MockNamedValueListC1Ev>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	333c      	adds	r3, #60	; 0x3c
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f001 ff08 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 8008c5e:	2100      	movs	r1, #0
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f894 	bl	8008d8e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	0802522c 	.word	0x0802522c

08008c74 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	4a0d      	ldr	r2, [pc, #52]	; (8008cb4 <_ZN11MockSupportD1Ev+0x40>)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	333c      	adds	r3, #60	; 0x3c
 8008c86:	4618      	mov	r0, r3
 8008c88:	f002 fa51 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3330      	adds	r3, #48	; 0x30
 8008c90:	4618      	mov	r0, r3
 8008c92:	f014 fbd3 	bl	801d43c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3320      	adds	r3, #32
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f010 fed0 	bl	8019a40 <_ZN21MockExpectedCallsListD1Ev>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3318      	adds	r3, #24
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7ff feed 	bl	8008a84 <_ZN19MockFailureReporterD1Ev>
{
}
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	0802522c 	.word	0x0802522c

08008cb8 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
}
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7ff ffd7 	bl	8008c74 <_ZN11MockSupportD1Ev>
 8008cc6:	2148      	movs	r1, #72	; 0x48
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7ff fac9 	bl	8008260 <_ZdlPvj>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691a      	ldr	r2, [r3, #16]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	3310      	adds	r3, #16
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	78f9      	ldrb	r1, [r7, #3]
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4798      	blx	r3
}
 8008cf8:	bf00      	nop
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d102      	bne.n	8008d16 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3318      	adds	r3, #24
 8008d14:	e000      	b.n	8008d18 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00a      	beq.n	8008d3a <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	33c8      	adds	r3, #200	; 0xc8
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	6952      	ldr	r2, [r2, #20]
 8008d36:	4611      	mov	r1, r2
 8008d38:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	3338      	adds	r3, #56	; 0x38
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f014 fb0d 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 8008d44:	60f8      	str	r0, [r7, #12]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d01c      	beq.n	8008d86 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 8008d4c:	68f9      	ldr	r1, [r7, #12]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 ff26 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	bf14      	ite	ne
 8008d5a:	2301      	movne	r3, #1
 8008d5c:	2300      	moveq	r3, #0
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00b      	beq.n	8008d7c <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 8008d64:	68f9      	ldr	r1, [r7, #12]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 ff1a 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	32a4      	adds	r2, #164	; 0xa4
 8008d72:	6812      	ldr	r2, [r2, #0]
 8008d74:	6879      	ldr	r1, [r7, #4]
 8008d76:	6949      	ldr	r1, [r1, #20]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f014 f9f7 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	e7df      	b.n	8008d46 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 8008d86:	bf00      	nop
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b083      	sub	sp, #12
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d102      	bne.n	8008da4 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	e000      	b.n	8008da6 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	6113      	str	r3, [r2, #16]
}
 8008daa:	bf00      	nop
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b082      	sub	sp, #8
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	3330      	adds	r3, #48	; 0x30
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f012 fb10 	bl	801b3e8 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 8008dd0:	b590      	push	{r4, r7, lr}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	3330      	adds	r3, #48	; 0x30
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	68b9      	ldr	r1, [r7, #8]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f014 fb77 	bl	801d4d8 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3338      	adds	r3, #56	; 0x38
 8008dee:	4618      	mov	r0, r3
 8008df0:	f014 fab5 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 8008df4:	6178      	str	r0, [r7, #20]
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d01c      	beq.n	8008e36 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 8008dfc:	6979      	ldr	r1, [r7, #20]
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f000 fece 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	bf14      	ite	ne
 8008e0a:	2301      	movne	r3, #1
 8008e0c:	2300      	moveq	r3, #0
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00b      	beq.n	8008e2c <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 8008e14:	6979      	ldr	r1, [r7, #20]
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 fec2 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	32b0      	adds	r2, #176	; 0xb0
 8008e22:	6814      	ldr	r4, [r2, #0]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	68b9      	ldr	r1, [r7, #8]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008e2c:	6978      	ldr	r0, [r7, #20]
 8008e2e:	f014 f99f 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 8008e32:	6178      	str	r0, [r7, #20]
 8008e34:	e7df      	b.n	8008df6 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 8008e36:	bf00      	nop
 8008e38:	371c      	adds	r7, #28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd90      	pop	{r4, r7, pc}

08008e3e <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 8008e3e:	b590      	push	{r4, r7, lr}
 8008e40:	b087      	sub	sp, #28
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	60f8      	str	r0, [r7, #12]
 8008e46:	60b9      	str	r1, [r7, #8]
 8008e48:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3330      	adds	r3, #48	; 0x30
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	68b9      	ldr	r1, [r7, #8]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f014 fb5c 	bl	801d510 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3338      	adds	r3, #56	; 0x38
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f014 fa7e 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 8008e62:	6178      	str	r0, [r7, #20]
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d01c      	beq.n	8008ea4 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 8008e6a:	6979      	ldr	r1, [r7, #20]
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f000 fe97 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	bf14      	ite	ne
 8008e78:	2301      	movne	r3, #1
 8008e7a:	2300      	moveq	r3, #0
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00b      	beq.n	8008e9a <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 8008e82:	6979      	ldr	r1, [r7, #20]
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 fe8b 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	32b4      	adds	r2, #180	; 0xb4
 8008e90:	6814      	ldr	r4, [r2, #0]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	68b9      	ldr	r1, [r7, #8]
 8008e96:	4618      	mov	r0, r3
 8008e98:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008e9a:	6978      	ldr	r0, [r7, #20]
 8008e9c:	f014 f968 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 8008ea0:	6178      	str	r0, [r7, #20]
 8008ea2:	e7df      	b.n	8008e64 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 8008ea4:	bf00      	nop
 8008ea6:	371c      	adds	r7, #28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd90      	pop	{r4, r7, pc}

08008eac <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	3330      	adds	r3, #48	; 0x30
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f014 fb93 	bl	801d5e8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3338      	adds	r3, #56	; 0x38
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f014 fa49 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 8008ecc:	60f8      	str	r0, [r7, #12]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d01b      	beq.n	8008f0c <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 8008ed4:	68f9      	ldr	r1, [r7, #12]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fe62 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	bf14      	ite	ne
 8008ee2:	2301      	movne	r3, #1
 8008ee4:	2300      	moveq	r3, #0
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00a      	beq.n	8008f02 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 8008eec:	68f9      	ldr	r1, [r7, #12]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fe56 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	32b8      	adds	r2, #184	; 0xb8
 8008efa:	6812      	ldr	r2, [r2, #0]
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	4618      	mov	r0, r3
 8008f00:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f014 f934 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 8008f08:	60f8      	str	r0, [r7, #12]
 8008f0a:	e7e0      	b.n	8008ece <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 8008f0c:	bf00      	nop
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	3330      	adds	r3, #48	; 0x30
 8008f20:	4618      	mov	r0, r3
 8008f22:	f014 faba 	bl	801d49a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	3338      	adds	r3, #56	; 0x38
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f014 fa17 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 8008f30:	60f8      	str	r0, [r7, #12]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d01a      	beq.n	8008f6e <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 8008f38:	68f9      	ldr	r1, [r7, #12]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fe30 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	bf14      	ite	ne
 8008f46:	2301      	movne	r3, #1
 8008f48:	2300      	moveq	r3, #0
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d009      	beq.n	8008f64 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 8008f50:	68f9      	ldr	r1, [r7, #12]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fe24 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	32bc      	adds	r2, #188	; 0xbc
 8008f5e:	6812      	ldr	r2, [r2, #0]
 8008f60:	4618      	mov	r0, r3
 8008f62:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f014 f903 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	e7e1      	b.n	8008f32 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 8008f6e:	bf00      	nop
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b084      	sub	sp, #16
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d004      	beq.n	8008f90 <_ZN11MockSupport5clearEv+0x1a>
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	3204      	adds	r2, #4
 8008f8a:	6812      	ldr	r2, [r2, #0]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 8008f9e:	f00e fe0d 	bl	8017bbc <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	3320      	adds	r3, #32
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f011 f937 	bl	801a21a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	3338      	adds	r3, #56	; 0x38
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f014 f9c3 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d01a      	beq.n	8009016 <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 8008fe0:	68f9      	ldr	r1, [r7, #12]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fddc 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008fe8:	60b8      	str	r0, [r7, #8]
        if (support) {
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00d      	beq.n	800900c <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	339c      	adds	r3, #156	; 0x9c
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68b8      	ldr	r0, [r7, #8]
 8008ffa:	4798      	blx	r3
            delete support;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d004      	beq.n	800900c <_ZN11MockSupport5clearEv+0x96>
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	3204      	adds	r2, #4
 8009006:	6812      	ldr	r2, [r2, #0]
 8009008:	4618      	mov	r0, r3
 800900a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f014 f8af 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	e7e1      	b.n	8008fda <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	3338      	adds	r3, #56	; 0x38
 800901a:	4618      	mov	r0, r3
 800901c:	f014 f917 	bl	801d24e <_ZN18MockNamedValueList5clearEv>
}
 8009020:	bf00      	nop
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	731a      	strb	r2, [r3, #12]
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
	...

08009044 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 8009044:	b590      	push	{r4, r7, lr}
 8009046:	b089      	sub	sp, #36	; 0x24
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	333c      	adds	r3, #60	; 0x3c
 8009054:	4618      	mov	r0, r3
 8009056:	f002 f859 	bl	800b10c <_ZNK12SimpleString7isEmptyEv>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d004      	beq.n	800906a <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f001 fcff 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 8009068:	e021      	b.n	80090ae <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8009070:	f107 0318 	add.w	r3, r7, #24
 8009074:	4910      	ldr	r1, [pc, #64]	; (80090b8 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 8009076:	4618      	mov	r0, r3
 8009078:	f001 fca1 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800907c:	f107 0310 	add.w	r3, r7, #16
 8009080:	f107 0218 	add.w	r2, r7, #24
 8009084:	4621      	mov	r1, r4
 8009086:	4618      	mov	r0, r3
 8009088:	f002 f8b3 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f107 0110 	add.w	r1, r7, #16
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	4618      	mov	r0, r3
 8009096:	f002 f8ac 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800909a:	f107 0310 	add.w	r3, r7, #16
 800909e:	4618      	mov	r0, r3
 80090a0:	f002 f845 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80090a4:	f107 0318 	add.w	r3, r7, #24
 80090a8:	4618      	mov	r0, r3
 80090aa:	f002 f840 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	3724      	adds	r7, #36	; 0x24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd90      	pop	{r4, r7, pc}
 80090b6:	bf00      	nop
 80090b8:	08021c70 	.word	0x08021c70

080090bc <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3314      	adds	r3, #20
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	2101      	movs	r1, #1
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	4798      	blx	r3
 80090d6:	4603      	mov	r3, r0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3314      	adds	r3, #20
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	2100      	movs	r1, #0
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	4798      	blx	r3
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
	...

08009104 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 8009104:	b590      	push	{r4, r7, lr}
 8009106:	b089      	sub	sp, #36	; 0x24
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009116:	f083 0301 	eor.w	r3, r3, #1
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 8009120:	f010 fbf6 	bl	8019910 <_ZN23MockIgnoredExpectedCall8instanceEv>
 8009124:	4603      	mov	r3, r0
 8009126:	e041      	b.n	80091ac <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 fb1b 	bl	8009764 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800912e:	22a5      	movs	r2, #165	; 0xa5
 8009130:	4920      	ldr	r1, [pc, #128]	; (80091b4 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 8009132:	2070      	movs	r0, #112	; 0x70
 8009134:	f7ff f880 	bl	8008238 <_ZnwjPKci>
 8009138:	4604      	mov	r4, r0
 800913a:	68b9      	ldr	r1, [r7, #8]
 800913c:	4620      	mov	r0, r4
 800913e:	f00f f8f3 	bl	8018328 <_ZN23MockCheckedExpectedCallC1Ej>
 8009142:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3308      	adds	r3, #8
 800914a:	681c      	ldr	r4, [r3, #0]
 800914c:	f107 0314 	add.w	r3, r7, #20
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	68f9      	ldr	r1, [r7, #12]
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff ff75 	bl	8009044 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800915a:	f107 0314 	add.w	r3, r7, #20
 800915e:	4619      	mov	r1, r3
 8009160:	69f8      	ldr	r0, [r7, #28]
 8009162:	47a0      	blx	r4
 8009164:	f107 0314 	add.w	r3, r7, #20
 8009168:	4618      	mov	r0, r3
 800916a:	f001 ffe0 	bl	800b12e <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	7b1b      	ldrb	r3, [r3, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d013      	beq.n	800919e <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3310      	adds	r3, #16
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	6892      	ldr	r2, [r2, #8]
 8009182:	1c50      	adds	r0, r2, #1
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	6891      	ldr	r1, [r2, #8]
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	440a      	add	r2, r1
 800918c:	4601      	mov	r1, r0
 800918e:	69f8      	ldr	r0, [r7, #28]
 8009190:	4798      	blx	r3
        expectedCallOrder_ += amount;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	689a      	ldr	r2, [r3, #8]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	441a      	add	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3320      	adds	r3, #32
 80091a2:	69f9      	ldr	r1, [r7, #28]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f010 fd89 	bl	8019cbc <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 80091aa:	69fb      	ldr	r3, [r7, #28]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3724      	adds	r7, #36	; 0x24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd90      	pop	{r4, r7, pc}
 80091b4:	08021c74 	.word	0x08021c74

080091b8 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 80091b8:	b5b0      	push	{r4, r5, r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	1c5a      	adds	r2, r3, #1
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	605a      	str	r2, [r3, #4]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685d      	ldr	r5, [r3, #4]
 80091ce:	22b1      	movs	r2, #177	; 0xb1
 80091d0:	490a      	ldr	r1, [pc, #40]	; (80091fc <_ZN11MockSupport16createActualCallEv+0x44>)
 80091d2:	202c      	movs	r0, #44	; 0x2c
 80091d4:	f7ff f830 	bl	8008238 <_ZnwjPKci>
 80091d8:	4604      	mov	r4, r0
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691a      	ldr	r2, [r3, #16]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3320      	adds	r3, #32
 80091e2:	4629      	mov	r1, r5
 80091e4:	4620      	mov	r0, r4
 80091e6:	f00c fbdb 	bl	80159a0 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bdb0      	pop	{r4, r5, r7, pc}
 80091fa:	bf00      	nop
 80091fc:	08021c74 	.word	0x08021c74

08009200 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00d      	beq.n	8009230 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3320      	adds	r3, #32
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	4618      	mov	r0, r3
 800921c:	f010 fd2a 	bl	8019c74 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 8009220:	4603      	mov	r3, r0
 8009222:	f083 0301 	eor.w	r3, r3, #1
 8009226:	b2db      	uxtb	r3, r3
 8009228:	2b00      	cmp	r3, #0
 800922a:	d001      	beq.n	8009230 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800922c:	2301      	movs	r3, #1
 800922e:	e000      	b.n	8009232 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800923a:	b590      	push	{r4, r7, lr}
 800923c:	b087      	sub	sp, #28
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 8009244:	f107 030c 	add.w	r3, r7, #12
 8009248:	683a      	ldr	r2, [r7, #0]
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	4618      	mov	r0, r3
 800924e:	f7ff fef9 	bl	8009044 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009256:	2b00      	cmp	r3, #0
 8009258:	d014      	beq.n	8009284 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	33c4      	adds	r3, #196	; 0xc4
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4610      	mov	r0, r2
 800926a:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d004      	beq.n	800927e <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	3204      	adds	r2, #4
 8009278:	6812      	ldr	r2, [r2, #0]
 800927a:	4618      	mov	r0, r3
 800927c:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800928a:	f083 0301 	eor.w	r3, r3, #1
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b00      	cmp	r3, #0
 8009292:	d004      	beq.n	800929e <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 8009294:	f00e fcbe 	bl	8017c14 <_ZN21MockIgnoredActualCall8instanceEv>
 8009298:	4603      	mov	r3, r0
 800929a:	461c      	mov	r4, r3
 800929c:	e02f      	b.n	80092fe <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 80092a8:	f00e fc6e 	bl	8017b88 <_ZN19MockActualCallTrace8instanceEv>
 80092ac:	4603      	mov	r3, r0
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	3208      	adds	r2, #8
 80092b2:	6812      	ldr	r2, [r2, #0]
 80092b4:	f107 010c 	add.w	r1, r7, #12
 80092b8:	4618      	mov	r0, r3
 80092ba:	4790      	blx	r2
 80092bc:	4604      	mov	r4, r0
 80092be:	e01e      	b.n	80092fe <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 80092c0:	f107 030c 	add.w	r3, r7, #12
 80092c4:	4619      	mov	r1, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7ff ff9a 	bl	8009200 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d004      	beq.n	80092dc <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 80092d2:	f00e fc9f 	bl	8017c14 <_ZN21MockIgnoredActualCall8instanceEv>
 80092d6:	4603      	mov	r3, r0
 80092d8:	461c      	mov	r4, r3
 80092da:	e010      	b.n	80092fe <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	33c0      	adds	r3, #192	; 0xc0
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	4798      	blx	r3
 80092e8:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3308      	adds	r3, #8
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f107 020c 	add.w	r2, r7, #12
 80092f6:	4611      	mov	r1, r2
 80092f8:	6978      	ldr	r0, [r7, #20]
 80092fa:	4798      	blx	r3
    return *call;
 80092fc:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 80092fe:	f107 030c 	add.w	r3, r7, #12
 8009302:	4618      	mov	r0, r3
 8009304:	f001 ff13 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8009308:	4623      	mov	r3, r4
}
 800930a:	4618      	mov	r0, r3
 800930c:	371c      	adds	r7, #28
 800930e:	46bd      	mov	sp, r7
 8009310:	bd90      	pop	{r4, r7, pc}

08009312 <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	3338      	adds	r3, #56	; 0x38
 8009326:	4618      	mov	r0, r3
 8009328:	f014 f819 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 800932c:	60f8      	str	r0, [r7, #12]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d01a      	beq.n	800936a <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 8009334:	68f9      	ldr	r1, [r7, #12]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fc32 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	bf14      	ite	ne
 8009342:	2301      	movne	r3, #1
 8009344:	2300      	moveq	r3, #0
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b00      	cmp	r3, #0
 800934a:	d009      	beq.n	8009360 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800934c:	68f9      	ldr	r1, [r7, #12]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fc26 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009354:	4603      	mov	r3, r0
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	3290      	adds	r2, #144	; 0x90
 800935a:	6812      	ldr	r2, [r2, #0]
 800935c:	4618      	mov	r0, r3
 800935e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f013 ff05 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	e7e1      	b.n	800932e <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800936a:	bf00      	nop
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b084      	sub	sp, #16
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	3338      	adds	r3, #56	; 0x38
 8009386:	4618      	mov	r0, r3
 8009388:	f013 ffe9 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 800938c:	60f8      	str	r0, [r7, #12]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d01a      	beq.n	80093ca <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 8009394:	68f9      	ldr	r1, [r7, #12]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fc02 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	bf14      	ite	ne
 80093a2:	2301      	movne	r3, #1
 80093a4:	2300      	moveq	r3, #0
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d009      	beq.n	80093c0 <_ZN11MockSupport7disableEv+0x4e>
 80093ac:	68f9      	ldr	r1, [r7, #12]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fbf6 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80093b4:	4603      	mov	r3, r0
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	3284      	adds	r2, #132	; 0x84
 80093ba:	6812      	ldr	r2, [r2, #0]
 80093bc:	4618      	mov	r0, r3
 80093be:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f013 fed5 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	e7e1      	b.n	800938e <_ZN11MockSupport7disableEv+0x1c>
}
 80093ca:	bf00      	nop
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b084      	sub	sp, #16
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	3338      	adds	r3, #56	; 0x38
 80093e6:	4618      	mov	r0, r3
 80093e8:	f013 ffb9 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 80093ec:	60f8      	str	r0, [r7, #12]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d01a      	beq.n	800942a <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 80093f4:	68f9      	ldr	r1, [r7, #12]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fbd2 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	bf14      	ite	ne
 8009402:	2301      	movne	r3, #1
 8009404:	2300      	moveq	r3, #0
 8009406:	b2db      	uxtb	r3, r3
 8009408:	2b00      	cmp	r3, #0
 800940a:	d009      	beq.n	8009420 <_ZN11MockSupport6enableEv+0x4e>
 800940c:	68f9      	ldr	r1, [r7, #12]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fbc6 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009414:	4603      	mov	r3, r0
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	3288      	adds	r2, #136	; 0x88
 800941a:	6812      	ldr	r2, [r2, #0]
 800941c:	4618      	mov	r0, r3
 800941e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f013 fea5 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	e7e1      	b.n	80093ee <_ZN11MockSupport6enableEv+0x1c>
}
 800942a:	bf00      	nop
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b084      	sub	sp, #16
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	460b      	mov	r3, r1
 800943c:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	78fa      	ldrb	r2, [r7, #3]
 8009442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	3338      	adds	r3, #56	; 0x38
 800944a:	4618      	mov	r0, r3
 800944c:	f013 ff87 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 8009450:	60f8      	str	r0, [r7, #12]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d01b      	beq.n	8009490 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 8009458:	68f9      	ldr	r1, [r7, #12]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fba0 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	bf14      	ite	ne
 8009466:	2301      	movne	r3, #1
 8009468:	2300      	moveq	r3, #0
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00a      	beq.n	8009486 <_ZN11MockSupport7tracingEb+0x54>
 8009470:	68f9      	ldr	r1, [r7, #12]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fb94 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009478:	4603      	mov	r3, r0
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	328c      	adds	r2, #140	; 0x8c
 800947e:	6812      	ldr	r2, [r2, #0]
 8009480:	78f9      	ldrb	r1, [r7, #3]
 8009482:	4618      	mov	r0, r3
 8009484:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f013 fe72 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 800948c:	60f8      	str	r0, [r7, #12]
 800948e:	e7e0      	b.n	8009452 <_ZN11MockSupport7tracingEb+0x20>
}
 8009490:	bf00      	nop
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	3320      	adds	r3, #32
 80094a4:	4618      	mov	r0, r3
 80094a6:	f010 fbc1 	bl	8019c2c <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 80094aa:	4603      	mov	r3, r0
 80094ac:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	3338      	adds	r3, #56	; 0x38
 80094b2:	4618      	mov	r0, r3
 80094b4:	f013 ff53 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 80094b8:	60b8      	str	r0, [r7, #8]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d01f      	beq.n	8009500 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 80094c0:	68b9      	ldr	r1, [r7, #8]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fb6c 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	bf14      	ite	ne
 80094ce:	2301      	movne	r3, #1
 80094d0:	2300      	moveq	r3, #0
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00e      	beq.n	80094f6 <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 80094d8:	68b9      	ldr	r1, [r7, #8]
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fb60 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80094e0:	4603      	mov	r3, r0
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	3298      	adds	r2, #152	; 0x98
 80094e6:	6812      	ldr	r2, [r2, #0]
 80094e8:	4618      	mov	r0, r3
 80094ea:	4790      	blx	r2
 80094ec:	4603      	mov	r3, r0
 80094ee:	461a      	mov	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4413      	add	r3, r2
 80094f4:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80094f6:	68b8      	ldr	r0, [r7, #8]
 80094f8:	f013 fe3a 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 80094fc:	60b8      	str	r0, [r7, #8]
 80094fe:	e7dc      	b.n	80094ba <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	bf14      	ite	ne
 8009506:	2301      	movne	r3, #1
 8009508:	2300      	moveq	r3, #0
 800950a:	b2db      	uxtb	r3, r3
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009520:	2b00      	cmp	r3, #0
 8009522:	d010      	beq.n	8009546 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	33bc      	adds	r3, #188	; 0xbc
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4610      	mov	r0, r2
 8009534:	4798      	blx	r3
 8009536:	4603      	mov	r3, r0
 8009538:	f083 0301 	eor.w	r3, r3, #1
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 8009542:	2301      	movs	r3, #1
 8009544:	e000      	b.n	8009548 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 8009546:	2300      	movs	r3, #0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800954c:	2300      	movs	r3, #0
 800954e:	e02a      	b.n	80095a6 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	3338      	adds	r3, #56	; 0x38
 8009554:	4618      	mov	r0, r3
 8009556:	f013 ff02 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d020      	beq.n	80095a4 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 8009562:	68f9      	ldr	r1, [r7, #12]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fb1b 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00f      	beq.n	8009590 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 8009570:	68f9      	ldr	r1, [r7, #12]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fb14 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009578:	4603      	mov	r3, r0
 800957a:	4618      	mov	r0, r3
 800957c:	f7ff ffca 	bl	8009514 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 8009580:	4603      	mov	r3, r0
 8009582:	f083 0301 	eor.w	r3, r3, #1
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800958c:	2301      	movs	r3, #1
 800958e:	e000      	b.n	8009592 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 8009590:	2300      	movs	r3, #0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 8009596:	2300      	movs	r3, #0
 8009598:	e005      	b.n	80095a6 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f013 fde8 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	e7db      	b.n	800955c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 80095a4:	2301      	movs	r3, #1
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b092      	sub	sp, #72	; 0x48
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 80095b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80095ba:	4618      	mov	r0, r3
 80095bc:	f010 fa2c 	bl	8019a18 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f103 0220 	add.w	r2, r3, #32
 80095c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80095ca:	4611      	mov	r1, r2
 80095cc:	4618      	mov	r0, r3
 80095ce:	f010 fbf3 	bl	8019db8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	3338      	adds	r3, #56	; 0x38
 80095d6:	4618      	mov	r0, r3
 80095d8:	f013 fec1 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 80095dc:	6478      	str	r0, [r7, #68]	; 0x44
 80095de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d01d      	beq.n	8009620 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 80095e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fada 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bf14      	ite	ne
 80095f2:	2301      	movne	r3, #1
 80095f4:	2300      	moveq	r3, #0
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00c      	beq.n	8009616 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 80095fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 face 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009604:	4603      	mov	r3, r0
 8009606:	f103 0220 	add.w	r2, r3, #32
 800960a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800960e:	4611      	mov	r1, r2
 8009610:	4618      	mov	r0, r3
 8009612:	f010 fbd1 	bl	8019db8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009616:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009618:	f013 fdaa 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 800961c:	6478      	str	r0, [r7, #68]	; 0x44
 800961e:	e7de      	b.n	80095de <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	691a      	ldr	r2, [r3, #16]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	330c      	adds	r3, #12
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4610      	mov	r0, r2
 8009630:	4798      	blx	r3
 8009632:	4601      	mov	r1, r0
 8009634:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009638:	f107 0308 	add.w	r3, r7, #8
 800963c:	4618      	mov	r0, r3
 800963e:	f011 f9f5 	bl	801aa2c <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	33c4      	adds	r3, #196	; 0xc4
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f107 0208 	add.w	r2, r7, #8
 800964e:	4611      	mov	r1, r2
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8009654:	f107 0308 	add.w	r3, r7, #8
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fe6d 	bl	800a338 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800965e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009662:	4618      	mov	r0, r3
 8009664:	f010 f9ec 	bl	8019a40 <_ZN21MockExpectedCallsListD1Ev>
}
 8009668:	bf00      	nop
 800966a:	3748      	adds	r7, #72	; 0x48
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b092      	sub	sp, #72	; 0x48
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 8009678:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800967c:	4618      	mov	r0, r3
 800967e:	f010 f9cb 	bl	8019a18 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f103 0220 	add.w	r2, r3, #32
 8009688:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800968c:	4611      	mov	r1, r2
 800968e:	4618      	mov	r0, r3
 8009690:	f010 fb92 	bl	8019db8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	3338      	adds	r3, #56	; 0x38
 8009698:	4618      	mov	r0, r3
 800969a:	f013 fe60 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 800969e:	6478      	str	r0, [r7, #68]	; 0x44
 80096a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d01d      	beq.n	80096e2 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 80096a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 fa79 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	bf14      	ite	ne
 80096b4:	2301      	movne	r3, #1
 80096b6:	2300      	moveq	r3, #0
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00c      	beq.n	80096d8 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 80096be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fa6d 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80096c6:	4603      	mov	r3, r0
 80096c8:	f103 0220 	add.w	r2, r3, #32
 80096cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80096d0:	4611      	mov	r1, r2
 80096d2:	4618      	mov	r0, r3
 80096d4:	f010 fb70 	bl	8019db8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 80096d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80096da:	f013 fd49 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 80096de:	6478      	str	r0, [r7, #68]	; 0x44
 80096e0:	e7de      	b.n	80096a0 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	691a      	ldr	r2, [r3, #16]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	330c      	adds	r3, #12
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4610      	mov	r0, r2
 80096f2:	4798      	blx	r3
 80096f4:	4601      	mov	r1, r0
 80096f6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80096fa:	f107 0308 	add.w	r3, r7, #8
 80096fe:	4618      	mov	r0, r3
 8009700:	f011 fa38 	bl	801ab74 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	33c4      	adds	r3, #196	; 0xc4
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f107 0208 	add.w	r2, r7, #8
 8009710:	4611      	mov	r1, r2
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8009716:	f107 0308 	add.w	r3, r7, #8
 800971a:	4618      	mov	r0, r3
 800971c:	f000 fe2e 	bl	800a37c <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 8009720:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009724:	4618      	mov	r0, r3
 8009726:	f010 f98b 	bl	8019a40 <_ZN21MockExpectedCallsListD1Ev>
}
 800972a:	bf00      	nop
 800972c:	3748      	adds	r7, #72	; 0x48
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b082      	sub	sp, #8
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
    clear();
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	339c      	adds	r3, #156	; 0x9c
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	4798      	blx	r3
    activeReporter_->failTest(failure);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	691a      	ldr	r2, [r3, #16]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	3308      	adds	r3, #8
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	4610      	mov	r0, r2
 800975a:	4798      	blx	r3
}
 800975c:	bf00      	nop
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800976c:	f008 fd0a 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8009770:	4603      	mov	r3, r0
 8009772:	4618      	mov	r0, r3
 8009774:	f007 fb78 	bl	8010e68 <_ZN10UtestShell10countCheckEv>
}
 8009778:	bf00      	nop
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978c:	2b00      	cmp	r3, #0
 800978e:	d008      	beq.n	80097a2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	33c4      	adds	r3, #196	; 0xc4
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4610      	mov	r0, r2
 80097a0:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	3338      	adds	r3, #56	; 0x38
 80097a6:	4618      	mov	r0, r3
 80097a8:	f013 fdd9 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 80097ac:	60f8      	str	r0, [r7, #12]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d023      	beq.n	80097fc <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 80097b4:	68f9      	ldr	r1, [r7, #12]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f9f2 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d009      	beq.n	80097d6 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 80097c2:	68f9      	ldr	r1, [r7, #12]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f9eb 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80097ca:	4603      	mov	r3, r0
 80097cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 80097d2:	2301      	movs	r3, #1
 80097d4:	e000      	b.n	80097d8 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 80097d6:	2300      	movs	r3, #0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00a      	beq.n	80097f2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 80097dc:	68f9      	ldr	r1, [r7, #12]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f9de 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80097e4:	4603      	mov	r3, r0
 80097e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	32c4      	adds	r2, #196	; 0xc4
 80097ec:	6812      	ldr	r2, [r2, #0]
 80097ee:	4618      	mov	r0, r3
 80097f0:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f013 fcbc 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 80097f8:	60f8      	str	r0, [r7, #12]
 80097fa:	e7d8      	b.n	80097ae <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 80097fc:	bf00      	nop
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3320      	adds	r3, #32
 8009810:	4618      	mov	r0, r3
 8009812:	f010 f947 	bl	8019aa4 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800981c:	2301      	movs	r3, #1
 800981e:	e027      	b.n	8009870 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	3338      	adds	r3, #56	; 0x38
 8009824:	4618      	mov	r0, r3
 8009826:	f013 fd9a 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d01d      	beq.n	800986e <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 8009832:	68f9      	ldr	r1, [r7, #12]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f9b3 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00c      	beq.n	800985a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 8009840:	68f9      	ldr	r1, [r7, #12]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f9ac 	bl	8009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009848:	4603      	mov	r3, r0
 800984a:	4618      	mov	r0, r3
 800984c:	f7ff ffda 	bl	8009804 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 8009856:	2301      	movs	r3, #1
 8009858:	e000      	b.n	800985c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800985a:	2300      	movs	r3, #0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 8009860:	2301      	movs	r3, #1
 8009862:	e005      	b.n	8009870 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f013 fc83 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	e7de      	b.n	800982c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7ff ff7d 	bl	8009780 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7ff fe44 	bl	8009514 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00a      	beq.n	80098a8 <_ZN11MockSupport17checkExpectationsEv+0x30>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3398      	adds	r3, #152	; 0x98
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	4798      	blx	r3
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <_ZN11MockSupport17checkExpectationsEv+0x30>
 80098a4:	2301      	movs	r3, #1
 80098a6:	e000      	b.n	80098aa <_ZN11MockSupport17checkExpectationsEv+0x32>
 80098a8:	2300      	movs	r3, #0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d002      	beq.n	80098b4 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7ff fe7d 	bl	80095ae <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f7ff ffa5 	bl	8009804 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff fed5 	bl	8009670 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 80098c6:	bf00      	nop
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b082      	sub	sp, #8
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	3338      	adds	r3, #56	; 0x38
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	4618      	mov	r0, r3
 80098e0:	f013 fd0e 	bl	801d300 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	bf14      	ite	ne
 80098ea:	2301      	movne	r3, #1
 80098ec:	2300      	moveq	r3, #0
 80098ee:	b2db      	uxtb	r3, r3
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 80098f8:	b590      	push	{r4, r7, lr}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	3338      	adds	r3, #56	; 0x38
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	4618      	mov	r0, r3
 800990a:	f013 fcf9 	bl	801d300 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800990e:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d111      	bne.n	800993a <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 8009916:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800991a:	490a      	ldr	r1, [pc, #40]	; (8009944 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800991c:	2038      	movs	r0, #56	; 0x38
 800991e:	f7fe fc8b 	bl	8008238 <_ZnwjPKci>
 8009922:	4604      	mov	r4, r0
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	4620      	mov	r0, r4
 8009928:	f011 fd6e 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
 800992c:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	3338      	adds	r3, #56	; 0x38
 8009932:	68f9      	ldr	r1, [r7, #12]
 8009934:	4618      	mov	r0, r3
 8009936:	f013 fcad 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800993a:	68fb      	ldr	r3, [r7, #12]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	bd90      	pop	{r4, r7, pc}
 8009944:	08021c74 	.word	0x08021c74

08009948 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 8009956:	68b9      	ldr	r1, [r7, #8]
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f7ff ffcd 	bl	80098f8 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800995e:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3344      	adds	r3, #68	; 0x44
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	6879      	ldr	r1, [r7, #4]
 800996c:	6978      	ldr	r0, [r7, #20]
 800996e:	4798      	blx	r3
}
 8009970:	bf00      	nop
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b088      	sub	sp, #32
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	3338      	adds	r3, #56	; 0x38
 8009988:	6879      	ldr	r1, [r7, #4]
 800998a:	4618      	mov	r0, r3
 800998c:	f013 fcb8 	bl	801d300 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8009990:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d111      	bne.n	80099bc <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 8009998:	f107 0314 	add.w	r3, r7, #20
 800999c:	490b      	ldr	r1, [pc, #44]	; (80099cc <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800999e:	4618      	mov	r0, r3
 80099a0:	f001 f80d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80099a4:	f107 0314 	add.w	r3, r7, #20
 80099a8:	4619      	mov	r1, r3
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f011 fd2c 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
 80099b0:	f107 0314 	add.w	r3, r7, #20
 80099b4:	4618      	mov	r0, r3
 80099b6:	f001 fbba 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80099ba:	e003      	b.n	80099c4 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 80099bc:	69f9      	ldr	r1, [r7, #28]
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f7ff f8a2 	bl	8008b08 <_ZN14MockNamedValueC1ERKS_>
}
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	3720      	adds	r7, #32
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	08021c6c 	.word	0x08021c6c

080099d0 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 80099d0:	b590      	push	{r4, r7, lr}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 80099da:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80099de:	4927      	ldr	r1, [pc, #156]	; (8009a7c <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 80099e0:	2048      	movs	r0, #72	; 0x48
 80099e2:	f7fe fc29 	bl	8008238 <_ZnwjPKci>
 80099e6:	4604      	mov	r4, r0
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	4620      	mov	r0, r4
 80099ec:	f7ff f8f8 	bl	8008be0 <_ZN11MockSupportC1ERK12SimpleString>
 80099f0:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	33a4      	adds	r3, #164	; 0xa4
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	6952      	ldr	r2, [r2, #20]
 80099fe:	4611      	mov	r1, r2
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d005      	beq.n	8009a1a <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3390      	adds	r3, #144	; 0x90
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009a20:	f083 0301 	eor.w	r3, r3, #1
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d005      	beq.n	8009a36 <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	3384      	adds	r3, #132	; 0x84
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	7b1b      	ldrb	r3, [r3, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d005      	beq.n	8009a4a <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	3308      	adds	r3, #8
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	4798      	blx	r3

    newMock->tracing(tracing_);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	338c      	adds	r3, #140	; 0x8c
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8009a58:	4611      	mov	r1, r2
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	33b8      	adds	r3, #184	; 0xb8
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	3230      	adds	r2, #48	; 0x30
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	4798      	blx	r3
    return newMock;
 8009a70:	68fb      	ldr	r3, [r7, #12]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd90      	pop	{r4, r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	08021c74 	.word	0x08021c74

08009a80 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 8009a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a82:	b0ab      	sub	sp, #172	; 0xac
 8009a84:	af04      	add	r7, sp, #16
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 8009a8a:	f107 0308 	add.w	r3, r7, #8
 8009a8e:	4941      	ldr	r1, [pc, #260]	; (8009b94 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 ff94 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 8009a96:	f107 0308 	add.w	r3, r7, #8
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f001 fbc3 	bl	800b228 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 8009aa2:	f107 0308 	add.w	r3, r7, #8
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff ff10 	bl	80098ce <_ZN11MockSupport7hasDataERK12SimpleString>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d048      	beq.n	8009b46 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 8009ab4:	f008 fb66 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8009ab8:	4604      	mov	r4, r0
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	3324      	adds	r3, #36	; 0x24
 8009abe:	681d      	ldr	r5, [r3, #0]
 8009ac0:	f107 0318 	add.w	r3, r7, #24
 8009ac4:	f107 0208 	add.w	r2, r7, #8
 8009ac8:	6879      	ldr	r1, [r7, #4]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7ff ff54 	bl	8009978 <_ZN11MockSupport7getDataERK12SimpleString>
 8009ad0:	f107 0310 	add.w	r3, r7, #16
 8009ad4:	f107 0218 	add.w	r2, r7, #24
 8009ad8:	4611      	mov	r1, r2
 8009ada:	4618      	mov	r0, r3
 8009adc:	f011 ff63 	bl	801b9a6 <_ZNK14MockNamedValue7getTypeEv>
 8009ae0:	f107 0310 	add.w	r3, r7, #16
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f001 faf5 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8009aea:	4606      	mov	r6, r0
 8009aec:	f008 fb5a 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009af0:	4603      	mov	r3, r0
 8009af2:	9302      	str	r3, [sp, #8]
 8009af4:	f240 13bd 	movw	r3, #445	; 0x1bd
 8009af8:	9301      	str	r3, [sp, #4]
 8009afa:	4b27      	ldr	r3, [pc, #156]	; (8009b98 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	2300      	movs	r3, #0
 8009b00:	4632      	mov	r2, r6
 8009b02:	4926      	ldr	r1, [pc, #152]	; (8009b9c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 8009b04:	4620      	mov	r0, r4
 8009b06:	47a8      	blx	r5
 8009b08:	f107 0310 	add.w	r3, r7, #16
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f001 fb0e 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8009b12:	f107 0318 	add.w	r3, r7, #24
 8009b16:	4618      	mov	r0, r3
 8009b18:	f011 fca0 	bl	801b45c <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 8009b1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009b20:	f107 0208 	add.w	r2, r7, #8
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff ff26 	bl	8009978 <_ZN11MockSupport7getDataERK12SimpleString>
 8009b2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009b30:	4618      	mov	r0, r3
 8009b32:	f012 fa51 	bl	801bfd8 <_ZNK14MockNamedValue16getObjectPointerEv>
 8009b36:	4604      	mov	r4, r0
 8009b38:	bf00      	nop
 8009b3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f011 fc8c 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 8009b44:	e01b      	b.n	8009b7e <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7ff ff41 	bl	80099d0 <_ZN11MockSupport5cloneERK12SimpleString>
 8009b4e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 8009b52:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009b56:	4911      	ldr	r1, [pc, #68]	; (8009b9c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f000 ff30 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8009b5e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8009b62:	f107 0108 	add.w	r1, r7, #8
 8009b66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f7ff feec 	bl	8009948 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 8009b70:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009b74:	4618      	mov	r0, r3
 8009b76:	f001 fada 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return newMock;
 8009b7a:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 8009b7e:	f107 0308 	add.w	r3, r7, #8
 8009b82:	4618      	mov	r0, r3
 8009b84:	f001 fad3 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8009b88:	4623      	mov	r3, r4
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	379c      	adds	r7, #156	; 0x9c
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b92:	bf00      	nop
 8009b94:	08021c8c 	.word	0x08021c8c
 8009b98:	08021c74 	.word	0x08021c74
 8009b9c:	08021cac 	.word	0x08021cac

08009ba0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 8009ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ba4:	b08b      	sub	sp, #44	; 0x2c
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 8009bac:	2500      	movs	r5, #0
 8009bae:	2600      	movs	r6, #0
 8009bb0:	f107 0308 	add.w	r3, r7, #8
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f013 fb28 	bl	801d20c <_ZNK22MockNamedValueListNode7getTypeEv>
 8009bbc:	f04f 0801 	mov.w	r8, #1
 8009bc0:	f107 0310 	add.w	r3, r7, #16
 8009bc4:	492e      	ldr	r1, [pc, #184]	; (8009c80 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f000 fef9 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8009bcc:	f04f 0901 	mov.w	r9, #1
 8009bd0:	f107 0210 	add.w	r2, r7, #16
 8009bd4:	f107 0308 	add.w	r3, r7, #8
 8009bd8:	4611      	mov	r1, r2
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f001 fab3 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d01a      	beq.n	8009c1c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 8009be6:	f107 0318 	add.w	r3, r7, #24
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f013 fafa 	bl	801d1e6 <_ZNK22MockNamedValueListNode7getNameEv>
 8009bf2:	2501      	movs	r5, #1
 8009bf4:	f107 0320 	add.w	r3, r7, #32
 8009bf8:	4922      	ldr	r1, [pc, #136]	; (8009c84 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 fedf 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8009c00:	2601      	movs	r6, #1
 8009c02:	f107 0220 	add.w	r2, r7, #32
 8009c06:	f107 0318 	add.w	r3, r7, #24
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 ff54 	bl	800aaba <_ZNK12SimpleString8containsERKS_>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d001      	beq.n	8009c1c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 8009c18:	2401      	movs	r4, #1
 8009c1a:	e000      	b.n	8009c1e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 8009c1c:	2400      	movs	r4, #0
 8009c1e:	2e00      	cmp	r6, #0
 8009c20:	d004      	beq.n	8009c2c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 8009c22:	f107 0320 	add.w	r3, r7, #32
 8009c26:	4618      	mov	r0, r3
 8009c28:	f001 fa81 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8009c2c:	2d00      	cmp	r5, #0
 8009c2e:	d004      	beq.n	8009c3a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 8009c30:	f107 0318 	add.w	r3, r7, #24
 8009c34:	4618      	mov	r0, r3
 8009c36:	f001 fa7a 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8009c3a:	f1b9 0f00 	cmp.w	r9, #0
 8009c3e:	d004      	beq.n	8009c4a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 8009c40:	f107 0310 	add.w	r3, r7, #16
 8009c44:	4618      	mov	r0, r3
 8009c46:	f001 fa72 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8009c4a:	f1b8 0f00 	cmp.w	r8, #0
 8009c4e:	d004      	beq.n	8009c5a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 8009c50:	f107 0308 	add.w	r3, r7, #8
 8009c54:	4618      	mov	r0, r3
 8009c56:	f001 fa6a 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8009c5a:	2c00      	cmp	r4, #0
 8009c5c:	d00a      	beq.n	8009c74 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 8009c5e:	6838      	ldr	r0, [r7, #0]
 8009c60:	f013 fa92 	bl	801d188 <_ZN22MockNamedValueListNode4itemEv>
 8009c64:	4603      	mov	r3, r0
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	32a0      	adds	r2, #160	; 0xa0
 8009c6a:	6812      	ldr	r2, [r2, #0]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	4790      	blx	r2
 8009c70:	4603      	mov	r3, r0
 8009c72:	e000      	b.n	8009c76 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	372c      	adds	r7, #44	; 0x2c
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c80:	08021cac 	.word	0x08021cac
 8009c84:	08021c8c 	.word	0x08021c8c

08009c88 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00a      	beq.n	8009cb0 <_ZN11MockSupport11returnValueEv+0x28>
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	3354      	adds	r3, #84	; 0x54
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	4610      	mov	r0, r2
 8009cac:	4798      	blx	r3
 8009cae:	e010      	b.n	8009cd2 <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 8009cb0:	f107 0308 	add.w	r3, r7, #8
 8009cb4:	4909      	ldr	r1, [pc, #36]	; (8009cdc <_ZN11MockSupport11returnValueEv+0x54>)
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 fe81 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8009cbc:	f107 0308 	add.w	r3, r7, #8
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f011 fba0 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
 8009cc8:	f107 0308 	add.w	r3, r7, #8
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f001 fa2e 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	08021c6c 	.word	0x08021c6c

08009ce0 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 8009ce0:	b590      	push	{r4, r7, lr}
 8009ce2:	b091      	sub	sp, #68	; 0x44
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	3320      	adds	r3, #32
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f107 0208 	add.w	r2, r7, #8
 8009cf4:	6879      	ldr	r1, [r7, #4]
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	4798      	blx	r3
 8009cfa:	f107 0308 	add.w	r3, r7, #8
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f011 fe60 	bl	801b9c4 <_ZNK14MockNamedValue12getBoolValueEv>
 8009d04:	4603      	mov	r3, r0
 8009d06:	461c      	mov	r4, r3
 8009d08:	bf00      	nop
 8009d0a:	f107 0308 	add.w	r3, r7, #8
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f011 fba4 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 8009d14:	4623      	mov	r3, r4
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3744      	adds	r7, #68	; 0x44
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd90      	pop	{r4, r7, pc}

08009d1e <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 8009d1e:	b590      	push	{r4, r7, lr}
 8009d20:	b091      	sub	sp, #68	; 0x44
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3320      	adds	r3, #32
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f107 0208 	add.w	r2, r7, #8
 8009d32:	6879      	ldr	r1, [r7, #4]
 8009d34:	4610      	mov	r0, r2
 8009d36:	4798      	blx	r3
 8009d38:	f107 0308 	add.w	r3, r7, #8
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f011 fe69 	bl	801ba14 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8009d42:	4604      	mov	r4, r0
 8009d44:	bf00      	nop
 8009d46:	f107 0308 	add.w	r3, r7, #8
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f011 fb86 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 8009d50:	4623      	mov	r3, r4
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3744      	adds	r7, #68	; 0x44
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd90      	pop	{r4, r7, pc}

08009d5a <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 8009d5a:	b590      	push	{r4, r7, lr}
 8009d5c:	b091      	sub	sp, #68	; 0x44
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3320      	adds	r3, #32
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f107 0208 	add.w	r2, r7, #8
 8009d6e:	6879      	ldr	r1, [r7, #4]
 8009d70:	4610      	mov	r0, r2
 8009d72:	4798      	blx	r3
 8009d74:	f107 0308 	add.w	r3, r7, #8
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f011 fe9b 	bl	801bab4 <_ZNK14MockNamedValue11getIntValueEv>
 8009d7e:	4604      	mov	r4, r0
 8009d80:	bf00      	nop
 8009d82:	f107 0308 	add.w	r3, r7, #8
 8009d86:	4618      	mov	r0, r3
 8009d88:	f011 fb68 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 8009d8c:	4623      	mov	r3, r4
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3744      	adds	r7, #68	; 0x44
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd90      	pop	{r4, r7, pc}

08009d96 <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	331c      	adds	r3, #28
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	4798      	blx	r3
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d007      	beq.n	8009dc2 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	335c      	adds	r3, #92	; 0x5c
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	4798      	blx	r3
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	e000      	b.n	8009dc4 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 8009dc2:	683b      	ldr	r3, [r7, #0]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	331c      	adds	r3, #28
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	4798      	blx	r3
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00a      	beq.n	8009e00 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	3368      	adds	r3, #104	; 0x68
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	4798      	blx	r3
 8009df6:	eeb0 7a40 	vmov.f32	s14, s0
 8009dfa:	eef0 7a60 	vmov.f32	s15, s1
 8009dfe:	e001      	b.n	8009e04 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 8009e00:	ed97 7b00 	vldr	d7, [r7]
}
 8009e04:	eeb0 0a47 	vmov.f32	s0, s14
 8009e08:	eef0 0a67 	vmov.f32	s1, s15
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b082      	sub	sp, #8
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	331c      	adds	r3, #28
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	4798      	blx	r3
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d007      	beq.n	8009e3e <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3338      	adds	r3, #56	; 0x38
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	4798      	blx	r3
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	e000      	b.n	8009e40 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 8009e3e:	683b      	ldr	r3, [r7, #0]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	331c      	adds	r3, #28
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	4798      	blx	r3
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d007      	beq.n	8009e76 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	3324      	adds	r3, #36	; 0x24
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	4798      	blx	r3
 8009e72:	4603      	mov	r3, r0
 8009e74:	e000      	b.n	8009e78 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 8009e76:	78fb      	ldrb	r3, [r7, #3]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	331c      	adds	r3, #28
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	4798      	blx	r3
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d007      	beq.n	8009eac <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	332c      	adds	r3, #44	; 0x2c
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	4798      	blx	r3
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	e000      	b.n	8009eae <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 8009eac:	683b      	ldr	r3, [r7, #0]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b082      	sub	sp, #8
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	331c      	adds	r3, #28
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	4798      	blx	r3
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d007      	beq.n	8009ee2 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3334      	adds	r3, #52	; 0x34
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	4798      	blx	r3
 8009ede:	4603      	mov	r3, r0
 8009ee0:	e000      	b.n	8009ee4 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 8009ee2:	683b      	ldr	r3, [r7, #0]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	331c      	adds	r3, #28
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	4798      	blx	r3
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d007      	beq.n	8009f18 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3340      	adds	r3, #64	; 0x40
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	4798      	blx	r3
 8009f14:	4603      	mov	r3, r0
 8009f16:	e000      	b.n	8009f1a <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 8009f18:	683b      	ldr	r3, [r7, #0]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 8009f22:	b590      	push	{r4, r7, lr}
 8009f24:	b091      	sub	sp, #68	; 0x44
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3320      	adds	r3, #32
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f107 0208 	add.w	r2, r7, #8
 8009f36:	6879      	ldr	r1, [r7, #4]
 8009f38:	4610      	mov	r0, r2
 8009f3a:	4798      	blx	r3
 8009f3c:	f107 0308 	add.w	r3, r7, #8
 8009f40:	4618      	mov	r0, r3
 8009f42:	f011 fddf 	bl	801bb04 <_ZNK14MockNamedValue15getLongIntValueEv>
 8009f46:	4604      	mov	r4, r0
 8009f48:	bf00      	nop
 8009f4a:	f107 0308 	add.w	r3, r7, #8
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f011 fa84 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 8009f54:	4623      	mov	r3, r4
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3744      	adds	r7, #68	; 0x44
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd90      	pop	{r4, r7, pc}

08009f5e <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 8009f5e:	b590      	push	{r4, r7, lr}
 8009f60:	b091      	sub	sp, #68	; 0x44
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	3320      	adds	r3, #32
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f107 0208 	add.w	r2, r7, #8
 8009f72:	6879      	ldr	r1, [r7, #4]
 8009f74:	4610      	mov	r0, r2
 8009f76:	4798      	blx	r3
 8009f78:	f107 0308 	add.w	r3, r7, #8
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f011 fe23 	bl	801bbc8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8009f82:	4604      	mov	r4, r0
 8009f84:	bf00      	nop
 8009f86:	f107 0308 	add.w	r3, r7, #8
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f011 fa66 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 8009f90:	4623      	mov	r3, r4
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3744      	adds	r7, #68	; 0x44
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd90      	pop	{r4, r7, pc}
	...

08009f9c <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 8009f9c:	b5b0      	push	{r4, r5, r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af02      	add	r7, sp, #8
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8009fa6:	f008 f8ed 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8009faa:	4604      	mov	r4, r0
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	3368      	adds	r3, #104	; 0x68
 8009fb0:	681d      	ldr	r5, [r3, #0]
 8009fb2:	f008 f8f7 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	f240 2345 	movw	r3, #581	; 0x245
 8009fbe:	4a06      	ldr	r2, [pc, #24]	; (8009fd8 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 8009fc0:	4906      	ldr	r1, [pc, #24]	; (8009fdc <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	47a8      	blx	r5
    return cpputest_longlong(0);
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7fe fd2f 	bl	8008a2c <_ZN17cpputest_longlongC1Ei>
}
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	08021c74 	.word	0x08021c74
 8009fdc:	08021cb8 	.word	0x08021cb8

08009fe0 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 8009fe0:	b5b0      	push	{r4, r5, r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af02      	add	r7, sp, #8
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8009fea:	f008 f8cb 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8009fee:	4604      	mov	r4, r0
 8009ff0:	6823      	ldr	r3, [r4, #0]
 8009ff2:	3368      	adds	r3, #104	; 0x68
 8009ff4:	681d      	ldr	r5, [r3, #0]
 8009ff6:	f008 f8d5 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	9300      	str	r3, [sp, #0]
 8009ffe:	f240 234b 	movw	r3, #587	; 0x24b
 800a002:	4a06      	ldr	r2, [pc, #24]	; (800a01c <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800a004:	4906      	ldr	r1, [pc, #24]	; (800a020 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800a006:	4620      	mov	r0, r4
 800a008:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800a00a:	2100      	movs	r1, #0
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7fe fd19 	bl	8008a44 <_ZN18cpputest_ulonglongC1Ei>
}
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bdb0      	pop	{r4, r5, r7, pc}
 800a01a:	bf00      	nop
 800a01c:	08021c74 	.word	0x08021c74
 800a020:	08021cd8 	.word	0x08021cd8

0800a024 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800a024:	b5b0      	push	{r4, r5, r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af02      	add	r7, sp, #8
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	4639      	mov	r1, r7
 800a030:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800a034:	f008 f8a6 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 800a038:	4604      	mov	r4, r0
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	3368      	adds	r3, #104	; 0x68
 800a03e:	681d      	ldr	r5, [r3, #0]
 800a040:	f008 f8b0 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a044:	4603      	mov	r3, r0
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	f240 2351 	movw	r3, #593	; 0x251
 800a04c:	4a06      	ldr	r2, [pc, #24]	; (800a068 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800a04e:	4907      	ldr	r1, [pc, #28]	; (800a06c <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800a050:	4620      	mov	r0, r4
 800a052:	47a8      	blx	r5
    return defaultValue;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	461a      	mov	r2, r3
 800a058:	463b      	mov	r3, r7
 800a05a:	cb03      	ldmia	r3!, {r0, r1}
 800a05c:	6010      	str	r0, [r2, #0]
 800a05e:	6051      	str	r1, [r2, #4]
}
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bdb0      	pop	{r4, r5, r7, pc}
 800a068:	08021c74 	.word	0x08021c74
 800a06c:	08021cb8 	.word	0x08021cb8

0800a070 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800a070:	b5b0      	push	{r4, r5, r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af02      	add	r7, sp, #8
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	4639      	mov	r1, r7
 800a07c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800a080:	f008 f880 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 800a084:	4604      	mov	r4, r0
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	3368      	adds	r3, #104	; 0x68
 800a08a:	681d      	ldr	r5, [r3, #0]
 800a08c:	f008 f88a 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a090:	4603      	mov	r3, r0
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	f240 2357 	movw	r3, #599	; 0x257
 800a098:	4a06      	ldr	r2, [pc, #24]	; (800a0b4 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800a09a:	4907      	ldr	r1, [pc, #28]	; (800a0b8 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800a09c:	4620      	mov	r0, r4
 800a09e:	47a8      	blx	r5
    return defaultValue;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	463b      	mov	r3, r7
 800a0a6:	cb03      	ldmia	r3!, {r0, r1}
 800a0a8:	6010      	str	r0, [r2, #0]
 800a0aa:	6051      	str	r1, [r2, #4]
}
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bdb0      	pop	{r4, r5, r7, pc}
 800a0b4:	08021c74 	.word	0x08021c74
 800a0b8:	08021cd8 	.word	0x08021cd8

0800a0bc <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800a0bc:	b590      	push	{r4, r7, lr}
 800a0be:	b091      	sub	sp, #68	; 0x44
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	3320      	adds	r3, #32
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f107 0208 	add.w	r2, r7, #8
 800a0d0:	6879      	ldr	r1, [r7, #4]
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	4798      	blx	r3
 800a0d6:	f107 0308 	add.w	r3, r7, #8
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f011 fea8 	bl	801be30 <_ZNK14MockNamedValue14getStringValueEv>
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	bf00      	nop
 800a0e4:	f107 0308 	add.w	r3, r7, #8
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f011 f9b7 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 800a0ee:	4623      	mov	r3, r4
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3744      	adds	r7, #68	; 0x44
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd90      	pop	{r4, r7, pc}

0800a0f8 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	ed2d 8b02 	vpush	{d8}
 800a0fe:	b090      	sub	sp, #64	; 0x40
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3320      	adds	r3, #32
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f107 0208 	add.w	r2, r7, #8
 800a110:	6879      	ldr	r1, [r7, #4]
 800a112:	4610      	mov	r0, r2
 800a114:	4798      	blx	r3
 800a116:	f107 0308 	add.w	r3, r7, #8
 800a11a:	4618      	mov	r0, r3
 800a11c:	f011 fe2c 	bl	801bd78 <_ZNK14MockNamedValue14getDoubleValueEv>
 800a120:	eeb0 8a40 	vmov.f32	s16, s0
 800a124:	eef0 8a60 	vmov.f32	s17, s1
 800a128:	bf00      	nop
 800a12a:	f107 0308 	add.w	r3, r7, #8
 800a12e:	4618      	mov	r0, r3
 800a130:	f011 f994 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 800a134:	eeb0 7a48 	vmov.f32	s14, s16
 800a138:	eef0 7a68 	vmov.f32	s15, s17
}
 800a13c:	eeb0 0a47 	vmov.f32	s0, s14
 800a140:	eef0 0a67 	vmov.f32	s1, s15
 800a144:	3740      	adds	r7, #64	; 0x40
 800a146:	46bd      	mov	sp, r7
 800a148:	ecbd 8b02 	vpop	{d8}
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b082      	sub	sp, #8
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	331c      	adds	r3, #28
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	4798      	blx	r3
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d007      	beq.n	800a17a <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	336c      	adds	r3, #108	; 0x6c
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	4798      	blx	r3
 800a176:	4603      	mov	r3, r0
 800a178:	e000      	b.n	800a17c <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800a17a:	683b      	ldr	r3, [r7, #0]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	331c      	adds	r3, #28
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	4798      	blx	r3
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d007      	beq.n	800a1b0 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3378      	adds	r3, #120	; 0x78
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	4798      	blx	r3
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	e000      	b.n	800a1b2 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800a1b0:	683b      	ldr	r3, [r7, #0]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	331c      	adds	r3, #28
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	4798      	blx	r3
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d007      	beq.n	800a1e6 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	3380      	adds	r3, #128	; 0x80
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	4798      	blx	r3
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	e000      	b.n	800a1e8 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800a1e6:	683b      	ldr	r3, [r7, #0]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800a1f0:	b590      	push	{r4, r7, lr}
 800a1f2:	b091      	sub	sp, #68	; 0x44
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3320      	adds	r3, #32
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f107 0208 	add.w	r2, r7, #8
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	4610      	mov	r0, r2
 800a208:	4798      	blx	r3
 800a20a:	f107 0308 	add.w	r3, r7, #8
 800a20e:	4618      	mov	r0, r3
 800a210:	f011 fe36 	bl	801be80 <_ZNK14MockNamedValue15getPointerValueEv>
 800a214:	4604      	mov	r4, r0
 800a216:	bf00      	nop
 800a218:	f107 0308 	add.w	r3, r7, #8
 800a21c:	4618      	mov	r0, r3
 800a21e:	f011 f91d 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 800a222:	4623      	mov	r3, r4
}
 800a224:	4618      	mov	r0, r3
 800a226:	3744      	adds	r7, #68	; 0x44
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd90      	pop	{r4, r7, pc}

0800a22c <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800a22c:	b590      	push	{r4, r7, lr}
 800a22e:	b091      	sub	sp, #68	; 0x44
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	3320      	adds	r3, #32
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f107 0208 	add.w	r2, r7, #8
 800a240:	6879      	ldr	r1, [r7, #4]
 800a242:	4610      	mov	r0, r2
 800a244:	4798      	blx	r3
 800a246:	f107 0308 	add.w	r3, r7, #8
 800a24a:	4618      	mov	r0, r3
 800a24c:	f011 fe40 	bl	801bed0 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800a250:	4604      	mov	r4, r0
 800a252:	bf00      	nop
 800a254:	f107 0308 	add.w	r3, r7, #8
 800a258:	4618      	mov	r0, r3
 800a25a:	f011 f8ff 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 800a25e:	4623      	mov	r3, r4
}
 800a260:	4618      	mov	r0, r3
 800a262:	3744      	adds	r7, #68	; 0x44
 800a264:	46bd      	mov	sp, r7
 800a266:	bd90      	pop	{r4, r7, pc}

0800a268 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800a268:	b590      	push	{r4, r7, lr}
 800a26a:	b091      	sub	sp, #68	; 0x44
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3320      	adds	r3, #32
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f107 0208 	add.w	r2, r7, #8
 800a27c:	6879      	ldr	r1, [r7, #4]
 800a27e:	4610      	mov	r0, r2
 800a280:	4798      	blx	r3
 800a282:	f107 0308 	add.w	r3, r7, #8
 800a286:	4618      	mov	r0, r3
 800a288:	f011 fe4a 	bl	801bf20 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800a28c:	4604      	mov	r4, r0
 800a28e:	bf00      	nop
 800a290:	f107 0308 	add.w	r3, r7, #8
 800a294:	4618      	mov	r0, r3
 800a296:	f011 f8e1 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 800a29a:	4623      	mov	r3, r4
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3744      	adds	r7, #68	; 0x44
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd90      	pop	{r4, r7, pc}

0800a2a4 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00a      	beq.n	800a2ca <_ZN11MockSupport14hasReturnValueEv+0x26>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	3350      	adds	r3, #80	; 0x50
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	4798      	blx	r3
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	e000      	b.n	800a2cc <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <_Z41__static_initialization_and_destruction_0ii>:
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d115      	bne.n	800a310 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d110      	bne.n	800a310 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800a2ee:	f107 0308 	add.w	r3, r7, #8
 800a2f2:	490f      	ldr	r1, [pc, #60]	; (800a330 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 fb62 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800a2fa:	f107 0308 	add.w	r3, r7, #8
 800a2fe:	4619      	mov	r1, r3
 800a300:	480c      	ldr	r0, [pc, #48]	; (800a334 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a302:	f7fe fc6d 	bl	8008be0 <_ZN11MockSupportC1ERK12SimpleString>
 800a306:	f107 0308 	add.w	r3, r7, #8
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 ff0f 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d107      	bne.n	800a326 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d102      	bne.n	800a326 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800a320:	4804      	ldr	r0, [pc, #16]	; (800a334 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a322:	f7fe fca7 	bl	8008c74 <_ZN11MockSupportD1Ev>
}
 800a326:	bf00      	nop
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	08021c6c 	.word	0x08021c6c
 800a334:	200006f0 	.word	0x200006f0

0800a338 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	4a05      	ldr	r2, [pc, #20]	; (800a358 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	601a      	str	r2, [r3, #0]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fe fbbb 	bl	8008ac4 <_ZN11MockFailureD1Ev>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4618      	mov	r0, r3
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	08025328 	.word	0x08025328

0800a35c <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff ffe7 	bl	800a338 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800a36a:	2134      	movs	r1, #52	; 0x34
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7fd ff77 	bl	8008260 <_ZdlPvj>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	4a05      	ldr	r2, [pc, #20]	; (800a39c <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	601a      	str	r2, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fe fb99 	bl	8008ac4 <_ZN11MockFailureD1Ev>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4618      	mov	r0, r3
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	080252fc 	.word	0x080252fc

0800a3a0 <_ZN20MockCallOrderFailureD0Ev>:
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7ff ffe7 	bl	800a37c <_ZN20MockCallOrderFailureD1Ev>
 800a3ae:	2134      	movs	r1, #52	; 0x34
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7fd ff55 	bl	8008260 <_ZdlPvj>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	f7ff ff83 	bl	800a2d4 <_Z41__static_initialization_and_destruction_0ii>
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a3d8:	2000      	movs	r0, #0
 800a3da:	f7ff ff7b 	bl	800a2d4 <_Z41__static_initialization_and_destruction_0ii>
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800a3e8:	4b05      	ldr	r3, [pc, #20]	; (800a400 <_ZN11SimpleMutexC1Ev+0x20>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4798      	blx	r3
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	601a      	str	r2, [r3, #0]
}
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	200000ec 	.word	0x200000ec

0800a404 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800a40c:	4b05      	ldr	r3, [pc, #20]	; (800a424 <_ZN11SimpleMutexD1Ev+0x20>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	6812      	ldr	r2, [r2, #0]
 800a414:	4610      	mov	r0, r2
 800a416:	4798      	blx	r3
}
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4618      	mov	r0, r3
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	200000f8 	.word	0x200000f8

0800a428 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800a430:	4b04      	ldr	r3, [pc, #16]	; (800a444 <_ZN11SimpleMutex4LockEv+0x1c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	6812      	ldr	r2, [r2, #0]
 800a438:	4610      	mov	r0, r2
 800a43a:	4798      	blx	r3
}
 800a43c:	bf00      	nop
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	200000f0 	.word	0x200000f0

0800a448 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800a450:	4b04      	ldr	r3, [pc, #16]	; (800a464 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	6812      	ldr	r2, [r2, #0]
 800a458:	4610      	mov	r0, r2
 800a45a:	4798      	blx	r3
}
 800a45c:	bf00      	nop
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	200000f4 	.word	0x200000f4

0800a468 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	683a      	ldr	r2, [r7, #0]
 800a476:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7ff ffd3 	bl	800a428 <_ZN11SimpleMutex4LockEv>
}
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4618      	mov	r0, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4618      	mov	r0, r3
 800a49a:	f7ff ffd5 	bl	800a448 <_ZN11SimpleMutex6UnlockEv>
}
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800a4ac:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d103      	bne.n	800a4bc <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800a4b4:	f003 fd7a 	bl	800dfac <_Z24defaultNewArrayAllocatorv>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	e001      	b.n	800a4c0 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800a4bc:	4b01      	ldr	r3, [pc, #4]	; (800a4c4 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800a4be:	681b      	ldr	r3, [r3, #0]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	20000738 	.word	0x20000738

0800a4c8 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800a4c8:	b590      	push	{r4, r7, lr}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800a4d4:	f7ff ffe8 	bl	800a4a8 <_ZN12SimpleString18getStringAllocatorEv>
 800a4d8:	6803      	ldr	r3, [r0, #0]
 800a4da:	3308      	adds	r3, #8
 800a4dc:	681c      	ldr	r4, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68ba      	ldr	r2, [r7, #8]
 800a4e2:	68f9      	ldr	r1, [r7, #12]
 800a4e4:	47a0      	blx	r4
 800a4e6:	4603      	mov	r3, r0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3714      	adds	r7, #20
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd90      	pop	{r4, r7, pc}

0800a4f0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800a4f0:	b590      	push	{r4, r7, lr}
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	af02      	add	r7, sp, #8
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
 800a4fc:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800a4fe:	f7ff ffd3 	bl	800a4a8 <_ZN12SimpleString18getStringAllocatorEv>
 800a502:	6803      	ldr	r3, [r0, #0]
 800a504:	330c      	adds	r3, #12
 800a506:	681c      	ldr	r4, [r3, #0]
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	68f9      	ldr	r1, [r7, #12]
 800a512:	47a0      	blx	r4
}
 800a514:	bf00      	nop
 800a516:	3714      	adds	r7, #20
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd90      	pop	{r4, r7, pc}

0800a51c <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800a524:	2284      	movs	r2, #132	; 0x84
 800a526:	4906      	ldr	r1, [pc, #24]	; (800a540 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800a528:	2001      	movs	r0, #1
 800a52a:	f7ff ffcd 	bl	800a4c8 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800a52e:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	701a      	strb	r2, [r3, #0]
    return empty;
 800a536:	68fb      	ldr	r3, [r7, #12]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	08021d04 	.word	0x08021d04

0800a544 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	4618      	mov	r0, r3
 800a552:	f001 f809 	bl	800b568 <_ZN12SimpleString7isSpaceEc>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d003      	beq.n	800a564 <_ZN12SimpleString4AtoUEPKc+0x20>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3301      	adds	r3, #1
 800a560:	607b      	str	r3, [r7, #4]
 800a562:	e7f3      	b.n	800a54c <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800a564:	2300      	movs	r3, #0
 800a566:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 ffe7 	bl	800b540 <_ZN12SimpleString7isDigitEc>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d005      	beq.n	800a584 <_ZN12SimpleString4AtoUEPKc+0x40>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	2b2f      	cmp	r3, #47	; 0x2f
 800a57e:	d901      	bls.n	800a584 <_ZN12SimpleString4AtoUEPKc+0x40>
 800a580:	2301      	movs	r3, #1
 800a582:	e000      	b.n	800a586 <_ZN12SimpleString4AtoUEPKc+0x42>
 800a584:	2300      	movs	r3, #0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d010      	beq.n	800a5ac <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	4613      	mov	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	005b      	lsls	r3, r3, #1
 800a594:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	461a      	mov	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	4413      	add	r3, r2
 800a5a0:	3b30      	subs	r3, #48	; 0x30
 800a5a2:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	607b      	str	r3, [r7, #4]
 800a5aa:	e7dd      	b.n	800a568 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b084      	sub	sp, #16
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 ffd0 	bl	800b568 <_ZN12SimpleString7isSpaceEc>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d003      	beq.n	800a5d6 <_ZN12SimpleString4AtoIEPKc+0x20>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	607b      	str	r3, [r7, #4]
 800a5d4:	e7f3      	b.n	800a5be <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800a5dc:	7afb      	ldrb	r3, [r7, #11]
 800a5de:	2b2d      	cmp	r3, #45	; 0x2d
 800a5e0:	d002      	beq.n	800a5e8 <_ZN12SimpleString4AtoIEPKc+0x32>
 800a5e2:	7afb      	ldrb	r3, [r7, #11]
 800a5e4:	2b2b      	cmp	r3, #43	; 0x2b
 800a5e6:	d102      	bne.n	800a5ee <_ZN12SimpleString4AtoIEPKc+0x38>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 ffa2 	bl	800b540 <_ZN12SimpleString7isDigitEc>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00f      	beq.n	800a622 <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	4613      	mov	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	005b      	lsls	r3, r3, #1
 800a60c:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	3b30      	subs	r3, #48	; 0x30
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	4413      	add	r3, r2
 800a618:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	3301      	adds	r3, #1
 800a61e:	607b      	str	r3, [r7, #4]
 800a620:	e7e7      	b.n	800a5f2 <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800a622:	7afb      	ldrb	r3, [r7, #11]
 800a624:	2b2d      	cmp	r3, #45	; 0x2d
 800a626:	d102      	bne.n	800a62e <_ZN12SimpleString4AtoIEPKc+0x78>
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	425b      	negs	r3, r3
 800a62c:	e000      	b.n	800a630 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800a62e:	68fb      	ldr	r3, [r7, #12]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00c      	beq.n	800a664 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	781a      	ldrb	r2, [r3, #0]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d106      	bne.n	800a664 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	3301      	adds	r3, #1
 800a65a:	607b      	str	r3, [r7, #4]
       ++s2;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	3301      	adds	r3, #1
 800a660:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800a662:	e7ee      	b.n	800a642 <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	461a      	mov	r2, r3
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	1ad3      	subs	r3, r2, r3
}
 800a670:	4618      	mov	r0, r3
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b085      	sub	sp, #20
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800a684:	f04f 33ff 	mov.w	r3, #4294967295
 800a688:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3301      	adds	r3, #1
 800a68e:	60fb      	str	r3, [r7, #12]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	607a      	str	r2, [r7, #4]
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	bf14      	ite	ne
 800a69c:	2301      	movne	r3, #1
 800a69e:	2300      	moveq	r3, #0
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d000      	beq.n	800a6a8 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800a6a6:	e7f0      	b.n	800a68a <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3714      	adds	r7, #20
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b085      	sub	sp, #20
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	60f8      	str	r0, [r7, #12]
 800a6be:	60b9      	str	r1, [r7, #8]
 800a6c0:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d013      	beq.n	800a6f0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00f      	beq.n	800a6f0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	781a      	ldrb	r2, [r3, #0]
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d109      	bne.n	800a6f0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	607b      	str	r3, [r7, #4]
        ++s1;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	60fb      	str	r3, [r7, #12]
        ++s2;
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800a6ee:	e7e8      	b.n	800a6c2 <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d006      	beq.n	800a704 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	e000      	b.n	800a706 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3714      	adds	r7, #20
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr

0800a712 <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800a712:	b480      	push	{r7}
 800a714:	b087      	sub	sp, #28
 800a716:	af00      	add	r7, sp, #0
 800a718:	60f8      	str	r0, [r7, #12]
 800a71a:	60b9      	str	r1, [r7, #8]
 800a71c:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d002      	beq.n	800a72e <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d101      	bne.n	800a732 <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	e01e      	b.n	800a770 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	781a      	ldrb	r2, [r3, #0]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	3b01      	subs	r3, #1
 800a73e:	607b      	str	r3, [r7, #4]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d005      	beq.n	800a752 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800a74e:	2301      	movs	r3, #1
 800a750:	e000      	b.n	800a754 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800a752:	2300      	movs	r3, #0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00a      	beq.n	800a76e <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	3301      	adds	r3, #1
 800a75c:	60bb      	str	r3, [r7, #8]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	3301      	adds	r3, #1
 800a762:	60fb      	str	r3, [r7, #12]
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	781a      	ldrb	r2, [r3, #0]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800a76c:	e7e5      	b.n	800a73a <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800a76e:	697b      	ldr	r3, [r7, #20]
}
 800a770:	4618      	mov	r0, r3
 800a772:	371c      	adds	r7, #28
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d101      	bne.n	800a792 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	e01b      	b.n	800a7ca <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d016      	beq.n	800a7c8 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800a79a:	6838      	ldr	r0, [r7, #0]
 800a79c:	f7ff ff6e 	bl	800a67c <_ZN12SimpleString6StrLenEPKc>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	6839      	ldr	r1, [r7, #0]
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7ff ff85 	bl	800a6b6 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	bf0c      	ite	eq
 800a7b2:	2301      	moveq	r3, #1
 800a7b4:	2300      	movne	r3, #0
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d001      	beq.n	800a7c0 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	e004      	b.n	800a7ca <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	607b      	str	r3, [r7, #4]
 800a7c6:	e7e4      	b.n	800a792 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b082      	sub	sp, #8
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	4603      	mov	r3, r0
 800a7da:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800a7dc:	79fb      	ldrb	r3, [r7, #7]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 fed9 	bl	800b596 <_ZN12SimpleString7isUpperEc>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d003      	beq.n	800a7f2 <_ZN12SimpleString7ToLowerEc+0x20>
 800a7ea:	79fb      	ldrb	r3, [r7, #7]
 800a7ec:	3320      	adds	r3, #32
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	e000      	b.n	800a7f4 <_ZN12SimpleString7ToLowerEc+0x22>
 800a7f2:	79fb      	ldrb	r3, [r7, #7]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b087      	sub	sp, #28
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	613b      	str	r3, [r7, #16]

    while (n--)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	1e5a      	subs	r2, r3, #1
 800a814:	607a      	str	r2, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	bf14      	ite	ne
 800a81a:	2301      	movne	r3, #1
 800a81c:	2300      	moveq	r3, #0
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	2b00      	cmp	r3, #0
 800a822:	d013      	beq.n	800a84c <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	781a      	ldrb	r2, [r3, #0]
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d006      	beq.n	800a83e <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	461a      	mov	r2, r3
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	e007      	b.n	800a84e <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	3301      	adds	r3, #1
 800a842:	617b      	str	r3, [r7, #20]
            ++p2;
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	3301      	adds	r3, #1
 800a848:	613b      	str	r3, [r7, #16]
    while (n--)
 800a84a:	e7e1      	b.n	800a810 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	371c      	adds	r7, #28
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
	...

0800a85c <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00d      	beq.n	800a888 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6859      	ldr	r1, [r3, #4]
 800a874:	23ee      	movs	r3, #238	; 0xee
 800a876:	4a06      	ldr	r2, [pc, #24]	; (800a890 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800a878:	f7ff fe3a 	bl	800a4f0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	605a      	str	r2, [r3, #4]
    }
}
 800a888:	bf00      	nop
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	08021d04 	.word	0x08021d04

0800a894 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f7ff ffdd 	bl	800a85c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7ff fe37 	bl	800a51c <_ZNK12SimpleString14getEmptyStringEv>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	601a      	str	r2, [r3, #0]
}
 800a8b4:	bf00      	nop
 800a8b6:	3708      	adds	r7, #8
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f7ff ffc7 	bl	800a85c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	4619      	mov	r1, r3
 800a8da:	68b8      	ldr	r0, [r7, #8]
 800a8dc:	f000 fe12 	bl	800b504 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	601a      	str	r2, [r3, #0]
}
 800a8e6:	bf00      	nop
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
	...

0800a8f0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7ff ffae 	bl	800a85c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	f240 1209 	movw	r2, #265	; 0x109
 800a90e:	4907      	ldr	r1, [pc, #28]	; (800a92c <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff fdd9 	bl	800a4c8 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800a916:	4602      	mov	r2, r0
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2200      	movs	r2, #0
 800a922:	701a      	strb	r2, [r3, #0]
}
 800a924:	bf00      	nop
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	08021d04 	.word	0x08021d04

0800a930 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f7ff ff8d 	bl	800a85c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	601a      	str	r2, [r3, #0]
}
 800a94e:	bf00      	nop
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800a956:	b590      	push	{r4, r7, lr}
 800a958:	b083      	sub	sp, #12
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	681c      	ldr	r4, [r3, #0]
 800a964:	6838      	ldr	r0, [r7, #0]
 800a966:	f000 fbc1 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800a96a:	4603      	mov	r3, r0
 800a96c:	3301      	adds	r3, #1
 800a96e:	461a      	mov	r2, r3
 800a970:	4621      	mov	r1, r4
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7ff ffa2 	bl	800a8bc <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd90      	pop	{r4, r7, pc}

0800a980 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800a98a:	6838      	ldr	r0, [r7, #0]
 800a98c:	f7ff fe76 	bl	800a67c <_ZN12SimpleString6StrLenEPKc>
 800a990:	4603      	mov	r3, r0
 800a992:	3301      	adds	r3, #1
 800a994:	461a      	mov	r2, r3
 800a996:	6839      	ldr	r1, [r7, #0]
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f7ff ff8f 	bl	800a8bc <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b083      	sub	sp, #12
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
    return buffer_;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	370c      	adds	r7, #12
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b082      	sub	sp, #8
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	601a      	str	r2, [r3, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d103      	bne.n	800a9e2 <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7ff ff5a 	bl	800a894 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800a9e0:	e003      	b.n	800a9ea <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f7ff ffcb 	bl	800a980 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	601a      	str	r2, [r3, #0]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800aa0c:	68b8      	ldr	r0, [r7, #8]
 800aa0e:	f7ff fe35 	bl	800a67c <_ZN12SimpleString6StrLenEPKc>
 800aa12:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	fb02 f303 	mul.w	r3, r2, r3
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	4619      	mov	r1, r3
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f7ff ff65 	bl	800a8f0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	61bb      	str	r3, [r7, #24]
 800aa30:	69ba      	ldr	r2, [r7, #24]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d20e      	bcs.n	800aa56 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	68b9      	ldr	r1, [r7, #8]
 800aa40:	69f8      	ldr	r0, [r7, #28]
 800aa42:	f7ff fe66 	bl	800a712 <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800aa46:	69fa      	ldr	r2, [r7, #28]
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	3301      	adds	r3, #1
 800aa52:	61bb      	str	r3, [r7, #24]
 800aa54:	e7ec      	b.n	800aa30 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	701a      	strb	r2, [r3, #0]
}
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3720      	adds	r7, #32
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b082      	sub	sp, #8
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	601a      	str	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800aa7c:	6838      	ldr	r0, [r7, #0]
 800aa7e:	f7ff ff92 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800aa82:	4603      	mov	r3, r0
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff ff7a 	bl	800a980 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d003      	beq.n	800aab0 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f7ff ff53 	bl	800a956 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800aab0:	687b      	ldr	r3, [r7, #4]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3708      	adds	r7, #8
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800aaba:	b590      	push	{r4, r7, lr}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f7ff ff6e 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800aaca:	4604      	mov	r4, r0
 800aacc:	6838      	ldr	r0, [r7, #0]
 800aace:	f7ff ff6a 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800aad2:	4603      	mov	r3, r0
 800aad4:	4619      	mov	r1, r3
 800aad6:	4620      	mov	r0, r4
 800aad8:	f7ff fe50 	bl	800a77c <_ZN12SimpleString6StrStrEPKcS1_>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	bf14      	ite	ne
 800aae2:	2301      	movne	r3, #1
 800aae4:	2300      	moveq	r3, #0
 800aae6:	b2db      	uxtb	r3, r3
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd90      	pop	{r4, r7, pc}

0800aaf0 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800aaf0:	b590      	push	{r4, r7, lr}
 800aaf2:	b087      	sub	sp, #28
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800aafa:	f107 0308 	add.w	r3, r7, #8
 800aafe:	6879      	ldr	r1, [r7, #4]
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 fabb 	bl	800b07c <_ZNK12SimpleString9lowerCaseEv>
 800ab06:	f107 0310 	add.w	r3, r7, #16
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 fab5 	bl	800b07c <_ZNK12SimpleString9lowerCaseEv>
 800ab12:	f107 0210 	add.w	r2, r7, #16
 800ab16:	f107 0308 	add.w	r3, r7, #8
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7ff ffcc 	bl	800aaba <_ZNK12SimpleString8containsERKS_>
 800ab22:	4603      	mov	r3, r0
 800ab24:	461c      	mov	r4, r3
 800ab26:	bf00      	nop
 800ab28:	f107 0310 	add.w	r3, r7, #16
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 fafe 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800ab32:	f107 0308 	add.w	r3, r7, #8
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 faf9 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800ab3c:	4623      	mov	r3, r4
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	371c      	adds	r7, #28
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd90      	pop	{r4, r7, pc}

0800ab46 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800ab46:	b590      	push	{r4, r7, lr}
 800ab48:	b083      	sub	sp, #12
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800ab50:	6838      	ldr	r0, [r7, #0]
 800ab52:	f000 facb 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	bf0c      	ite	eq
 800ab5c:	2301      	moveq	r3, #1
 800ab5e:	2300      	movne	r3, #0
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <_ZNK12SimpleString10startsWithERKS_+0x24>
 800ab66:	2301      	movs	r3, #1
 800ab68:	e022      	b.n	800abb0 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fabe 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	bf0c      	ite	eq
 800ab76:	2301      	moveq	r3, #1
 800ab78:	2300      	movne	r3, #0
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d001      	beq.n	800ab84 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800ab80:	2300      	movs	r3, #0
 800ab82:	e015      	b.n	800abb0 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f7ff ff0e 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	6838      	ldr	r0, [r7, #0]
 800ab8e:	f7ff ff0a 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800ab92:	4603      	mov	r3, r0
 800ab94:	4619      	mov	r1, r3
 800ab96:	4620      	mov	r0, r4
 800ab98:	f7ff fdf0 	bl	800a77c <_ZN12SimpleString6StrStrEPKcS1_>
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f7ff ff01 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800aba4:	4603      	mov	r3, r0
 800aba6:	429c      	cmp	r4, r3
 800aba8:	bf0c      	ite	eq
 800abaa:	2301      	moveq	r3, #1
 800abac:	2300      	movne	r3, #0
 800abae:	b2db      	uxtb	r3, r3
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd90      	pop	{r4, r7, pc}

0800abb8 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800abb8:	b590      	push	{r4, r7, lr}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fa92 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800abc8:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800abca:	6838      	ldr	r0, [r7, #0]
 800abcc:	f000 fa8e 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800abd0:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <_ZNK12SimpleString8endsWithERKS_+0x24>
 800abd8:	2301      	movs	r3, #1
 800abda:	e020      	b.n	800ac1e <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d101      	bne.n	800abe6 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800abe2:	2300      	movs	r3, #0
 800abe4:	e01b      	b.n	800ac1e <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	429a      	cmp	r2, r3
 800abec:	d201      	bcs.n	800abf2 <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800abee:	2300      	movs	r3, #0
 800abf0:	e015      	b.n	800ac1e <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7ff fed7 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800abf8:	4601      	mov	r1, r0
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	18cc      	adds	r4, r1, r3
 800ac02:	6838      	ldr	r0, [r7, #0]
 800ac04:	f7ff fecf 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f7ff fd13 	bl	800a638 <_ZN12SimpleString6StrCmpEPKcS1_>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	bf0c      	ite	eq
 800ac18:	2301      	moveq	r3, #1
 800ac1a:	2300      	movne	r3, #0
 800ac1c:	b2db      	uxtb	r3, r3
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd90      	pop	{r4, r7, pc}

0800ac26 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b086      	sub	sp, #24
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7ff feb6 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800ac3a:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	60fb      	str	r3, [r7, #12]
    if (*str){
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d008      	beq.n	800ac5a <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800ac48:	6838      	ldr	r0, [r7, #0]
 800ac4a:	f7ff feac 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	4619      	mov	r1, r3
 800ac52:	6938      	ldr	r0, [r7, #16]
 800ac54:	f7ff fd92 	bl	800a77c <_ZN12SimpleString6StrStrEPKcS1_>
 800ac58:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d014      	beq.n	800ac8c <_ZNK12SimpleString5countERKS_+0x66>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d011      	beq.n	800ac8c <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	613b      	str	r3, [r7, #16]
        str++;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	613b      	str	r3, [r7, #16]
        num++;
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	3301      	adds	r3, #1
 800ac76:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800ac78:	6838      	ldr	r0, [r7, #0]
 800ac7a:	f7ff fe94 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	4619      	mov	r1, r3
 800ac82:	6938      	ldr	r0, [r7, #16]
 800ac84:	f7ff fd7a 	bl	800a77c <_ZN12SimpleString6StrStrEPKcS1_>
 800ac88:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800ac8a:	e7e6      	b.n	800ac5a <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800ac8c:	697b      	ldr	r3, [r7, #20]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3718      	adds	r7, #24
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800ac96:	b590      	push	{r4, r7, lr}
 800ac98:	b091      	sub	sp, #68	; 0x44
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800aca2:	68b9      	ldr	r1, [r7, #8]
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f7ff ffbe 	bl	800ac26 <_ZNK12SimpleString5countERKS_>
 800acaa:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800acac:	68b9      	ldr	r1, [r7, #8]
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f7ff ff82 	bl	800abb8 <_ZNK12SimpleString8endsWithERKS_>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800acba:	2300      	movs	r3, #0
 800acbc:	e000      	b.n	800acc0 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800acbe:	2301      	movs	r3, #1
 800acc0:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800acc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc6:	4413      	add	r3, r2
 800acc8:	4619      	mov	r1, r3
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f001 f95c 	bl	800bf88 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f7ff fe68 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800acd6:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800acd8:	2300      	movs	r3, #0
 800acda:	63bb      	str	r3, [r7, #56]	; 0x38
 800acdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d235      	bcs.n	800ad50 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800ace4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace6:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800ace8:	68b8      	ldr	r0, [r7, #8]
 800acea:	f7ff fe5c 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800acee:	4603      	mov	r3, r0
 800acf0:	4619      	mov	r1, r3
 800acf2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800acf4:	f7ff fd42 	bl	800a77c <_ZN12SimpleString6StrStrEPKcS1_>
 800acf8:	4603      	mov	r3, r0
 800acfa:	3301      	adds	r3, #1
 800acfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800acfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f001 f9db 	bl	800c0bc <_ZN22SimpleStringCollectionixEj>
 800ad06:	4604      	mov	r4, r0
 800ad08:	f107 031c 	add.w	r3, r7, #28
 800ad0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7ff fe55 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800ad14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	f107 0014 	add.w	r0, r7, #20
 800ad1e:	f107 011c 	add.w	r1, r7, #28
 800ad22:	2200      	movs	r2, #0
 800ad24:	f000 fb0c 	bl	800b340 <_ZNK12SimpleString9subStringEjj>
 800ad28:	f107 0314 	add.w	r3, r7, #20
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f7ff feb1 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800ad34:	f107 0314 	add.w	r3, r7, #20
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f000 f9f8 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800ad3e:	f107 031c 	add.w	r3, r7, #28
 800ad42:	4618      	mov	r0, r3
 800ad44:	f000 f9f3 	bl	800b12e <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800ad48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad4e:	e7c5      	b.n	800acdc <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800ad50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d015      	beq.n	800ad82 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800ad56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f001 f9af 	bl	800c0bc <_ZN22SimpleStringCollectionixEj>
 800ad5e:	4604      	mov	r4, r0
 800ad60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7ff fe29 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800ad6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad70:	4619      	mov	r1, r3
 800ad72:	4620      	mov	r0, r4
 800ad74:	f7ff fe8f 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800ad78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f000 f9d6 	bl	800b12e <_ZN12SimpleStringD1Ev>
    }
}
 800ad82:	bf00      	nop
 800ad84:	3744      	adds	r7, #68	; 0x44
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd90      	pop	{r4, r7, pc}

0800ad8a <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b084      	sub	sp, #16
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
 800ad92:	460b      	mov	r3, r1
 800ad94:	70fb      	strb	r3, [r7, #3]
 800ad96:	4613      	mov	r3, r2
 800ad98:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f9a6 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800ada0:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800ada2:	2300      	movs	r3, #0
 800ada4:	60fb      	str	r3, [r7, #12]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d218      	bcs.n	800ade0 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7ff fdf9 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800adb4:	4602      	mov	r2, r0
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4413      	add	r3, r2
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	78fa      	ldrb	r2, [r7, #3]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	bf0c      	ite	eq
 800adc2:	2301      	moveq	r3, #1
 800adc4:	2300      	movne	r3, #0
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d005      	beq.n	800add8 <_ZN12SimpleString7replaceEcc+0x4e>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4413      	add	r3, r2
 800add4:	78ba      	ldrb	r2, [r7, #2]
 800add6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	3301      	adds	r3, #1
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	e7e2      	b.n	800ada6 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800ade0:	bf00      	nop
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b08e      	sub	sp, #56	; 0x38
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800adf4:	f107 0310 	add.w	r3, r7, #16
 800adf8:	68b9      	ldr	r1, [r7, #8]
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7ff fddf 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800ae00:	f107 0310 	add.w	r3, r7, #16
 800ae04:	4619      	mov	r1, r3
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f7ff ff0d 	bl	800ac26 <_ZNK12SimpleString5countERKS_>
 800ae0c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ae0e:	f107 0310 	add.w	r3, r7, #16
 800ae12:	4618      	mov	r0, r3
 800ae14:	f000 f98b 	bl	800b12e <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800ae18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d071      	beq.n	800af02 <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f000 f964 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800ae24:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800ae26:	68b8      	ldr	r0, [r7, #8]
 800ae28:	f7ff fc28 	bl	800a67c <_ZN12SimpleString6StrLenEPKc>
 800ae2c:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7ff fc24 	bl	800a67c <_ZN12SimpleString6StrLenEPKc>
 800ae34:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800ae36:	6a3b      	ldr	r3, [r7, #32]
 800ae38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae3a:	fb02 f203 	mul.w	r2, r2, r3
 800ae3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae40:	441a      	add	r2, r3
 800ae42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae46:	fb01 f303 	mul.w	r3, r1, r3
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d951      	bls.n	800aefa <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800ae56:	f240 129d 	movw	r2, #413	; 0x19d
 800ae5a:	492c      	ldr	r1, [pc, #176]	; (800af0c <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800ae5c:	69f8      	ldr	r0, [r7, #28]
 800ae5e:	f7ff fb33 	bl	800a4c8 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800ae62:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800ae64:	2300      	movs	r3, #0
 800ae66:	637b      	str	r3, [r7, #52]	; 0x34
 800ae68:	2300      	movs	r3, #0
 800ae6a:	633b      	str	r3, [r7, #48]	; 0x30
 800ae6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d236      	bcs.n	800aee2 <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f7ff fd96 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7e:	4413      	add	r3, r2
 800ae80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae82:	68b9      	ldr	r1, [r7, #8]
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff fc16 	bl	800a6b6 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	bf0c      	ite	eq
 800ae90:	2301      	moveq	r3, #1
 800ae92:	2300      	movne	r3, #0
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d011      	beq.n	800aebe <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800ae9a:	69ba      	ldr	r2, [r7, #24]
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9e:	18d0      	adds	r0, r2, r3
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	3301      	adds	r3, #1
 800aea4:	461a      	mov	r2, r3
 800aea6:	6879      	ldr	r1, [r7, #4]
 800aea8:	f7ff fc33 	bl	800a712 <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800aeac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeae:	6a3b      	ldr	r3, [r7, #32]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800aeb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb8:	4413      	add	r3, r2
 800aeba:	637b      	str	r3, [r7, #52]	; 0x34
 800aebc:	e7d6      	b.n	800ae6c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f7ff fd71 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800aec4:	4602      	mov	r2, r0
 800aec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec8:	441a      	add	r2, r3
 800aeca:	69b9      	ldr	r1, [r7, #24]
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	440b      	add	r3, r1
 800aed0:	7812      	ldrb	r2, [r2, #0]
 800aed2:	701a      	strb	r2, [r3, #0]
                j++;
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	3301      	adds	r3, #1
 800aed8:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800aeda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aedc:	3301      	adds	r3, #1
 800aede:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800aee0:	e7c4      	b.n	800ae6c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	3b01      	subs	r3, #1
 800aee6:	69ba      	ldr	r2, [r7, #24]
 800aee8:	4413      	add	r3, r2
 800aeea:	2200      	movs	r2, #0
 800aeec:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800aeee:	69fa      	ldr	r2, [r7, #28]
 800aef0:	69b9      	ldr	r1, [r7, #24]
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f7ff fd1c 	bl	800a930 <_ZN12SimpleString19setInternalBufferToEPcj>
 800aef8:	e004      	b.n	800af04 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f7ff fcca 	bl	800a894 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800af00:	e000      	b.n	800af04 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800af02:	bf00      	nop
}
 800af04:	3738      	adds	r7, #56	; 0x38
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	08021d04 	.word	0x08021d04

0800af10 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800af10:	b590      	push	{r4, r7, lr}
 800af12:	b089      	sub	sp, #36	; 0x24
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800af1a:	493b      	ldr	r1, [pc, #236]	; (800b008 <_ZNK12SimpleString9printableEv+0xf8>)
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff fd4e 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800af22:	6838      	ldr	r0, [r7, #0]
 800af24:	f000 f876 	bl	800b014 <_ZNK12SimpleString16getPrintableSizeEv>
 800af28:	4603      	mov	r3, r0
 800af2a:	3301      	adds	r3, #1
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7ff fcde 	bl	800a8f0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800af34:	6838      	ldr	r0, [r7, #0]
 800af36:	f000 f8d9 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800af3a:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800af40:	2300      	movs	r3, #0
 800af42:	61bb      	str	r3, [r7, #24]
 800af44:	69ba      	ldr	r2, [r7, #24]
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d252      	bcs.n	800aff2 <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	4413      	add	r3, r2
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800af58:	7cfb      	ldrb	r3, [r7, #19]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 fb43 	bl	800b5e6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d012      	beq.n	800af8c <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	18d0      	adds	r0, r2, r3
 800af6e:	7cfb      	ldrb	r3, [r7, #19]
 800af70:	3b07      	subs	r3, #7
 800af72:	b2db      	uxtb	r3, r3
 800af74:	461a      	mov	r2, r3
 800af76:	4b25      	ldr	r3, [pc, #148]	; (800b00c <_ZNK12SimpleString9printableEv+0xfc>)
 800af78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af7c:	2202      	movs	r2, #2
 800af7e:	4619      	mov	r1, r3
 800af80:	f7ff fbc7 	bl	800a712 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	3302      	adds	r3, #2
 800af88:	61fb      	str	r3, [r7, #28]
 800af8a:	e02e      	b.n	800afea <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800af8c:	7cfb      	ldrb	r3, [r7, #19]
 800af8e:	4618      	mov	r0, r3
 800af90:	f000 fb15 	bl	800b5be <_ZN12SimpleString9isControlEc>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d01e      	beq.n	800afd8 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800af9a:	7cfa      	ldrb	r2, [r7, #19]
 800af9c:	f107 0308 	add.w	r3, r7, #8
 800afa0:	491b      	ldr	r1, [pc, #108]	; (800b010 <_ZNK12SimpleString9printableEv+0x100>)
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 fdca 	bl	800bb3c <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	18d4      	adds	r4, r2, r3
 800afb0:	f107 0308 	add.w	r3, r7, #8
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 f88d 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800afba:	4603      	mov	r3, r0
 800afbc:	2204      	movs	r2, #4
 800afbe:	4619      	mov	r1, r3
 800afc0:	4620      	mov	r0, r4
 800afc2:	f7ff fba6 	bl	800a712 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	3304      	adds	r3, #4
 800afca:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800afcc:	f107 0308 	add.w	r3, r7, #8
 800afd0:	4618      	mov	r0, r3
 800afd2:	f000 f8ac 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800afd6:	e008      	b.n	800afea <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	4413      	add	r3, r2
 800afe0:	7cfa      	ldrb	r2, [r7, #19]
 800afe2:	701a      	strb	r2, [r3, #0]
            j++;
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	3301      	adds	r3, #1
 800afe8:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	3301      	adds	r3, #1
 800afee:	61bb      	str	r3, [r7, #24]
 800aff0:	e7a8      	b.n	800af44 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	4413      	add	r3, r2
 800affa:	2200      	movs	r2, #0
 800affc:	701a      	strb	r2, [r3, #0]

    return result;
 800affe:	bf00      	nop
}
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	3724      	adds	r7, #36	; 0x24
 800b004:	46bd      	mov	sp, r7
 800b006:	bd90      	pop	{r4, r7, pc}
 800b008:	08021dc4 	.word	0x08021dc4
 800b00c:	20000068 	.word	0x20000068
 800b010:	08021dc8 	.word	0x08021dc8

0800b014 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 f865 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800b022:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800b028:	2300      	movs	r3, #0
 800b02a:	613b      	str	r3, [r7, #16]
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	429a      	cmp	r2, r3
 800b032:	d21e      	bcs.n	800b072 <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	4413      	add	r3, r2
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800b040:	7afb      	ldrb	r3, [r7, #11]
 800b042:	4618      	mov	r0, r3
 800b044:	f000 facf 	bl	800b5e6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	3301      	adds	r3, #1
 800b052:	617b      	str	r3, [r7, #20]
 800b054:	e009      	b.n	800b06a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800b056:	7afb      	ldrb	r3, [r7, #11]
 800b058:	4618      	mov	r0, r3
 800b05a:	f000 fab0 	bl	800b5be <_ZN12SimpleString9isControlEc>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	3303      	adds	r3, #3
 800b068:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	3301      	adds	r3, #1
 800b06e:	613b      	str	r3, [r7, #16]
 800b070:	e7dc      	b.n	800b02c <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800b072:	697b      	ldr	r3, [r7, #20]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800b07c:	b590      	push	{r4, r7, lr}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800b086:	6839      	ldr	r1, [r7, #0]
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff fcec 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 f82c 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800b094:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800b096:	2300      	movs	r3, #0
 800b098:	60fb      	str	r3, [r7, #12]
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d213      	bcs.n	800b0ca <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f7ff fc7f 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	7819      	ldrb	r1, [r3, #0]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	18d4      	adds	r4, r2, r3
 800b0b8:	4608      	mov	r0, r1
 800b0ba:	f7ff fb8a 	bl	800a7d2 <_ZN12SimpleString7ToLowerEc>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	60fb      	str	r3, [r7, #12]
 800b0c8:	e7e7      	b.n	800b09a <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800b0ca:	bf00      	nop
}
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	3714      	adds	r7, #20
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd90      	pop	{r4, r7, pc}

0800b0d4 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f7ff fc62 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800b0e2:	4603      	mov	r3, r0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7ff fc56 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7ff fabd 	bl	800a67c <_ZN12SimpleString6StrLenEPKc>
 800b102:	4603      	mov	r3, r0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3708      	adds	r7, #8
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f7ff ffe9 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	bf0c      	ite	eq
 800b120:	2301      	moveq	r3, #1
 800b122:	2300      	movne	r3, #0
 800b124:	b2db      	uxtb	r3, r3
}
 800b126:	4618      	mov	r0, r3
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800b12e:	b580      	push	{r7, lr}
 800b130:	b082      	sub	sp, #8
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7ff fb90 	bl	800a85c <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4618      	mov	r0, r3
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800b146:	b590      	push	{r4, r7, lr}
 800b148:	b083      	sub	sp, #12
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7ff ffbf 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800b156:	4604      	mov	r4, r0
 800b158:	6838      	ldr	r0, [r7, #0]
 800b15a:	f7ff ffbb 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800b15e:	4603      	mov	r3, r0
 800b160:	4619      	mov	r1, r3
 800b162:	4620      	mov	r0, r4
 800b164:	f7ff fa68 	bl	800a638 <_ZN12SimpleString6StrCmpEPKcS1_>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	bf0c      	ite	eq
 800b16e:	2301      	moveq	r3, #1
 800b170:	2300      	movne	r3, #0
 800b172:	b2db      	uxtb	r3, r3
}
 800b174:	4618      	mov	r0, r3
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd90      	pop	{r4, r7, pc}

0800b17c <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800b17c:	b590      	push	{r4, r7, lr}
 800b17e:	b087      	sub	sp, #28
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800b186:	f107 0308 	add.w	r3, r7, #8
 800b18a:	6879      	ldr	r1, [r7, #4]
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7ff ff75 	bl	800b07c <_ZNK12SimpleString9lowerCaseEv>
 800b192:	f107 0310 	add.w	r3, r7, #16
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	4618      	mov	r0, r3
 800b19a:	f7ff ff6f 	bl	800b07c <_ZNK12SimpleString9lowerCaseEv>
 800b19e:	f107 0210 	add.w	r2, r7, #16
 800b1a2:	f107 0308 	add.w	r3, r7, #8
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7ff ffcc 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	461c      	mov	r4, r3
 800b1b2:	f107 0310 	add.w	r3, r7, #16
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7ff ffb9 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800b1bc:	f107 0308 	add.w	r3, r7, #8
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff ffb4 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800b1c6:	4623      	mov	r3, r4
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	371c      	adds	r7, #28
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd90      	pop	{r4, r7, pc}

0800b1d0 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800b1da:	6839      	ldr	r1, [r7, #0]
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f7ff ffb2 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	f083 0301 	eor.w	r3, r3, #1
 800b1e8:	b2db      	uxtb	r3, r3
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	60f8      	str	r0, [r7, #12]
 800b1fa:	60b9      	str	r1, [r7, #8]
 800b1fc:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800b1fe:	68b8      	ldr	r0, [r7, #8]
 800b200:	f7ff fbd1 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800b204:	4603      	mov	r3, r0
 800b206:	4619      	mov	r1, r3
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f7ff fbd8 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7ff fbc9 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800b214:	4603      	mov	r3, r0
 800b216:	4619      	mov	r1, r3
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f000 f817 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    return t;
 800b21e:	bf00      	nop
}
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800b232:	6838      	ldr	r0, [r7, #0]
 800b234:	f7ff fbb7 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800b238:	4603      	mov	r3, r0
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f805 	bl	800b24c <_ZN12SimpleStringpLEPKc>
 800b242:	4603      	mov	r3, r0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7ff ff48 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800b25c:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800b25e:	6838      	ldr	r0, [r7, #0]
 800b260:	f7ff fa0c 	bl	800a67c <_ZN12SimpleString6StrLenEPKc>
 800b264:	4603      	mov	r3, r0
 800b266:	3301      	adds	r3, #1
 800b268:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800b26a:	697a      	ldr	r2, [r7, #20]
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	4413      	add	r3, r2
 800b270:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7ff fb97 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800b278:	4603      	mov	r3, r0
 800b27a:	68f9      	ldr	r1, [r7, #12]
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 f941 	bl	800b504 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800b282:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	4413      	add	r3, r2
 800b28a:	693a      	ldr	r2, [r7, #16]
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	4618      	mov	r0, r3
 800b290:	f7ff fa3f 	bl	800a712 <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	68b9      	ldr	r1, [r7, #8]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7ff fb49 	bl	800a930 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800b29e:	687b      	ldr	r3, [r7, #4]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3718      	adds	r7, #24
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800b2a8:	b590      	push	{r4, r7, lr}
 800b2aa:	b08b      	sub	sp, #44	; 0x2c
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f7ff ff18 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800b2bc:	4604      	mov	r4, r0
 800b2be:	68b8      	ldr	r0, [r7, #8]
 800b2c0:	f7ff ff14 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	429c      	cmp	r4, r3
 800b2c8:	bf8c      	ite	hi
 800b2ca:	2301      	movhi	r3, #1
 800b2cc:	2300      	movls	r3, #0
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d006      	beq.n	800b2e2 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800b2d4:	79fb      	ldrb	r3, [r7, #7]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	68f9      	ldr	r1, [r7, #12]
 800b2da:	68b8      	ldr	r0, [r7, #8]
 800b2dc:	f7ff ffe4 	bl	800b2a8 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800b2e0:	e02b      	b.n	800b33a <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800b2e2:	79fb      	ldrb	r3, [r7, #7]
 800b2e4:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800b2ea:	68b8      	ldr	r0, [r7, #8]
 800b2ec:	f7ff fefe 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f7ff fefa 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	1ae2      	subs	r2, r4, r3
 800b2fc:	f107 0114 	add.w	r1, r7, #20
 800b300:	f107 0320 	add.w	r3, r7, #32
 800b304:	4618      	mov	r0, r3
 800b306:	f7ff fb75 	bl	800a9f4 <_ZN12SimpleStringC1EPKcj>
 800b30a:	f107 0318 	add.w	r3, r7, #24
 800b30e:	f107 0120 	add.w	r1, r7, #32
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	4618      	mov	r0, r3
 800b316:	f7ff ff6c 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800b31a:	f107 0318 	add.w	r3, r7, #24
 800b31e:	4619      	mov	r1, r3
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	f7ff fbb8 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800b326:	f107 0318 	add.w	r3, r7, #24
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7ff feff 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800b330:	f107 0320 	add.w	r3, r7, #32
 800b334:	4618      	mov	r0, r3
 800b336:	f7ff fefa 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800b33a:	372c      	adds	r7, #44	; 0x2c
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd90      	pop	{r4, r7, pc}

0800b340 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	607a      	str	r2, [r7, #4]
 800b34c:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800b34e:	68b8      	ldr	r0, [r7, #8]
 800b350:	f7ff fecc 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800b354:	4603      	mov	r3, r0
 800b356:	3b01      	subs	r3, #1
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	bf8c      	ite	hi
 800b35e:	2301      	movhi	r3, #1
 800b360:	2300      	movls	r3, #0
 800b362:	b2db      	uxtb	r3, r3
 800b364:	2b00      	cmp	r3, #0
 800b366:	d004      	beq.n	800b372 <_ZNK12SimpleString9subStringEjj+0x32>
 800b368:	4919      	ldr	r1, [pc, #100]	; (800b3d0 <_ZNK12SimpleString9subStringEjj+0x90>)
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f7ff fb27 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800b370:	e029      	b.n	800b3c6 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800b372:	68b8      	ldr	r0, [r7, #8]
 800b374:	f7ff fb17 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800b378:	4602      	mov	r2, r0
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	441a      	add	r2, r3
 800b37e:	f107 0310 	add.w	r3, r7, #16
 800b382:	4611      	mov	r1, r2
 800b384:	4618      	mov	r0, r3
 800b386:	f7ff fb1a 	bl	800a9be <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800b38a:	f107 0310 	add.w	r3, r7, #16
 800b38e:	4618      	mov	r0, r3
 800b390:	f7ff feac 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800b394:	4602      	mov	r2, r0
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	4293      	cmp	r3, r2
 800b39a:	bf34      	ite	cc
 800b39c:	2301      	movcc	r3, #1
 800b39e:	2300      	movcs	r3, #0
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d004      	beq.n	800b3b0 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	701a      	strb	r2, [r3, #0]

    return newString;
 800b3b0:	f107 0310 	add.w	r3, r7, #16
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f7ff fb55 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800b3bc:	f107 0310 	add.w	r3, r7, #16
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7ff feb4 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	3718      	adds	r7, #24
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	08021dc4 	.word	0x08021dc4

0800b3d4 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	68b9      	ldr	r1, [r7, #8]
 800b3ea:	f7ff ffa9 	bl	800b340 <_ZNK12SimpleString9subStringEjj>
}
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b082      	sub	sp, #8
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
 800b3fe:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f7ff fad0 	bl	800a9a6 <_ZNK12SimpleString9getBufferEv>
 800b406:	4602      	mov	r2, r0
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	4413      	add	r3, r2
 800b40c:	781b      	ldrb	r3, [r3, #0]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b082      	sub	sp, #8
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	460b      	mov	r3, r1
 800b420:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800b422:	78fb      	ldrb	r3, [r7, #3]
 800b424:	461a      	mov	r2, r3
 800b426:	2100      	movs	r1, #0
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 f805 	bl	800b438 <_ZNK12SimpleString8findFromEjc>
 800b42e:	4603      	mov	r3, r0
}
 800b430:	4618      	mov	r0, r3
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	4613      	mov	r3, r2
 800b444:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f7ff fe50 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800b44c:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	617b      	str	r3, [r7, #20]
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	429a      	cmp	r2, r3
 800b458:	d213      	bcs.n	800b482 <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800b45a:	6979      	ldr	r1, [r7, #20]
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	f7ff ffca 	bl	800b3f6 <_ZNK12SimpleString2atEj>
 800b462:	4603      	mov	r3, r0
 800b464:	461a      	mov	r2, r3
 800b466:	79fb      	ldrb	r3, [r7, #7]
 800b468:	4293      	cmp	r3, r2
 800b46a:	bf0c      	ite	eq
 800b46c:	2301      	moveq	r3, #1
 800b46e:	2300      	movne	r3, #0
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <_ZNK12SimpleString8findFromEjc+0x42>
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	e005      	b.n	800b486 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	3301      	adds	r3, #1
 800b47e:	617b      	str	r3, [r7, #20]
 800b480:	e7e7      	b.n	800b452 <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800b482:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b486:	4618      	mov	r0, r3
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
	...

0800b490 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	4611      	mov	r1, r2
 800b49c:	461a      	mov	r2, r3
 800b49e:	460b      	mov	r3, r1
 800b4a0:	71fb      	strb	r3, [r7, #7]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800b4a6:	79fb      	ldrb	r3, [r7, #7]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	68b8      	ldr	r0, [r7, #8]
 800b4ac:	f7ff ffb3 	bl	800b416 <_ZNK12SimpleString4findEc>
 800b4b0:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b8:	d104      	bne.n	800b4c4 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800b4ba:	4911      	ldr	r1, [pc, #68]	; (800b500 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800b4bc:	68f8      	ldr	r0, [r7, #12]
 800b4be:	f7ff fa7e 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800b4c2:	e019      	b.n	800b4f8 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800b4c4:	79bb      	ldrb	r3, [r7, #6]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	6979      	ldr	r1, [r7, #20]
 800b4ca:	68b8      	ldr	r0, [r7, #8]
 800b4cc:	f7ff ffb4 	bl	800b438 <_ZNK12SimpleString8findFromEjc>
 800b4d0:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d8:	d106      	bne.n	800b4e8 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	697a      	ldr	r2, [r7, #20]
 800b4de:	68b9      	ldr	r1, [r7, #8]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7ff ff77 	bl	800b3d4 <_ZNK12SimpleString9subStringEj>
 800b4e6:	e007      	b.n	800b4f8 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	68b9      	ldr	r1, [r7, #8]
 800b4f4:	f7ff ff24 	bl	800b340 <_ZNK12SimpleString9subStringEjj>
}
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	3718      	adds	r7, #24
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	08021dc4 	.word	0x08021dc4

0800b504 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800b50e:	f240 2275 	movw	r2, #629	; 0x275
 800b512:	490a      	ldr	r1, [pc, #40]	; (800b53c <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800b514:	6838      	ldr	r0, [r7, #0]
 800b516:	f7fe ffd7 	bl	800a4c8 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b51a:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800b51c:	683a      	ldr	r2, [r7, #0]
 800b51e:	6879      	ldr	r1, [r7, #4]
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f7ff f8f6 	bl	800a712 <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	3b01      	subs	r3, #1
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	4413      	add	r3, r2
 800b52e:	2200      	movs	r2, #0
 800b530:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800b532:	68fb      	ldr	r3, [r7, #12]
}
 800b534:	4618      	mov	r0, r3
 800b536:	3710      	adds	r7, #16
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	08021d04 	.word	0x08021d04

0800b540 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	4603      	mov	r3, r0
 800b548:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800b54a:	79fb      	ldrb	r3, [r7, #7]
 800b54c:	2b2f      	cmp	r3, #47	; 0x2f
 800b54e:	d904      	bls.n	800b55a <_ZN12SimpleString7isDigitEc+0x1a>
 800b550:	79fb      	ldrb	r3, [r7, #7]
 800b552:	2b39      	cmp	r3, #57	; 0x39
 800b554:	d801      	bhi.n	800b55a <_ZN12SimpleString7isDigitEc+0x1a>
 800b556:	2301      	movs	r3, #1
 800b558:	e000      	b.n	800b55c <_ZN12SimpleString7isDigitEc+0x1c>
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	4603      	mov	r3, r0
 800b570:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800b572:	79fb      	ldrb	r3, [r7, #7]
 800b574:	2b20      	cmp	r3, #32
 800b576:	d005      	beq.n	800b584 <_ZN12SimpleString7isSpaceEc+0x1c>
 800b578:	79fb      	ldrb	r3, [r7, #7]
 800b57a:	2b08      	cmp	r3, #8
 800b57c:	d904      	bls.n	800b588 <_ZN12SimpleString7isSpaceEc+0x20>
 800b57e:	79fb      	ldrb	r3, [r7, #7]
 800b580:	2b0d      	cmp	r3, #13
 800b582:	d801      	bhi.n	800b588 <_ZN12SimpleString7isSpaceEc+0x20>
 800b584:	2301      	movs	r3, #1
 800b586:	e000      	b.n	800b58a <_ZN12SimpleString7isSpaceEc+0x22>
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	370c      	adds	r7, #12
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800b596:	b480      	push	{r7}
 800b598:	b083      	sub	sp, #12
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	4603      	mov	r3, r0
 800b59e:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800b5a0:	79fb      	ldrb	r3, [r7, #7]
 800b5a2:	2b40      	cmp	r3, #64	; 0x40
 800b5a4:	d904      	bls.n	800b5b0 <_ZN12SimpleString7isUpperEc+0x1a>
 800b5a6:	79fb      	ldrb	r3, [r7, #7]
 800b5a8:	2b5a      	cmp	r3, #90	; 0x5a
 800b5aa:	d801      	bhi.n	800b5b0 <_ZN12SimpleString7isUpperEc+0x1a>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e000      	b.n	800b5b2 <_ZN12SimpleString7isUpperEc+0x1c>
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	370c      	adds	r7, #12
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b083      	sub	sp, #12
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800b5c8:	79fb      	ldrb	r3, [r7, #7]
 800b5ca:	2b1f      	cmp	r3, #31
 800b5cc:	d902      	bls.n	800b5d4 <_ZN12SimpleString9isControlEc+0x16>
 800b5ce:	79fb      	ldrb	r3, [r7, #7]
 800b5d0:	2b7f      	cmp	r3, #127	; 0x7f
 800b5d2:	d101      	bne.n	800b5d8 <_ZN12SimpleString9isControlEc+0x1a>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e000      	b.n	800b5da <_ZN12SimpleString9isControlEc+0x1c>
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	370c      	adds	r7, #12
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr

0800b5e6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800b5e6:	b480      	push	{r7}
 800b5e8:	b083      	sub	sp, #12
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800b5f0:	79fb      	ldrb	r3, [r7, #7]
 800b5f2:	2b06      	cmp	r3, #6
 800b5f4:	d904      	bls.n	800b600 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800b5f6:	79fb      	ldrb	r3, [r7, #7]
 800b5f8:	2b0d      	cmp	r3, #13
 800b5fa:	d801      	bhi.n	800b600 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e000      	b.n	800b602 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	370c      	adds	r7, #12
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
	...

0800b610 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800b61c:	78fb      	ldrb	r3, [r7, #3]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <_Z10StringFromb+0x16>
 800b622:	4a06      	ldr	r2, [pc, #24]	; (800b63c <_Z10StringFromb+0x2c>)
 800b624:	e000      	b.n	800b628 <_Z10StringFromb+0x18>
 800b626:	4a06      	ldr	r2, [pc, #24]	; (800b640 <_Z10StringFromb+0x30>)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4906      	ldr	r1, [pc, #24]	; (800b644 <_Z10StringFromb+0x34>)
 800b62c:	4618      	mov	r0, r3
 800b62e:	f000 fa85 	bl	800bb3c <_Z16StringFromFormatPKcz>
}
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	08021dd0 	.word	0x08021dd0
 800b640:	08021dd8 	.word	0x08021dd8
 800b644:	08021de0 	.word	0x08021de0

0800b648 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7ff f9b2 	bl	800a9be <_ZN12SimpleStringC1EPKc>
}
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
	...

0800b664 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800b664:	b590      	push	{r4, r7, lr}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800b66e:	2400      	movs	r4, #0
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00e      	beq.n	800b694 <_Z25PrintableStringFromOrNullPKc+0x30>
 800b676:	f107 0308 	add.w	r3, r7, #8
 800b67a:	6839      	ldr	r1, [r7, #0]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7ff ffe3 	bl	800b648 <_Z10StringFromPKc>
 800b682:	2401      	movs	r4, #1
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f107 0208 	add.w	r2, r7, #8
 800b68a:	4611      	mov	r1, r2
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7ff fc3f 	bl	800af10 <_ZNK12SimpleString9printableEv>
 800b692:	e004      	b.n	800b69e <_Z25PrintableStringFromOrNullPKc+0x3a>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4908      	ldr	r1, [pc, #32]	; (800b6b8 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800b698:	4618      	mov	r0, r3
 800b69a:	f7ff ffd5 	bl	800b648 <_Z10StringFromPKc>
 800b69e:	2c00      	cmp	r4, #0
 800b6a0:	d004      	beq.n	800b6ac <_Z25PrintableStringFromOrNullPKc+0x48>
 800b6a2:	f107 0308 	add.w	r3, r7, #8
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7ff fd41 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800b6ac:	bf00      	nop
}
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd90      	pop	{r4, r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	08021de4 	.word	0x08021de4

0800b6bc <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	683a      	ldr	r2, [r7, #0]
 800b6ca:	4904      	ldr	r1, [pc, #16]	; (800b6dc <_Z10StringFromi+0x20>)
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f000 fa35 	bl	800bb3c <_Z16StringFromFormatPKcz>
}
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	08021dec 	.word	0x08021dec

0800b6e0 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	4904      	ldr	r1, [pc, #16]	; (800b700 <_Z10StringFroml+0x20>)
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 fa23 	bl	800bb3c <_Z16StringFromFormatPKcz>
}
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	08021df0 	.word	0x08021df0

0800b704 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b086      	sub	sp, #24
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800b70e:	f107 0308 	add.w	r3, r7, #8
 800b712:	4910      	ldr	r1, [pc, #64]	; (800b754 <_Z10StringFromPKv+0x50>)
 800b714:	4618      	mov	r0, r3
 800b716:	f7ff f952 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800b71a:	f107 0310 	add.w	r3, r7, #16
 800b71e:	6839      	ldr	r1, [r7, #0]
 800b720:	4618      	mov	r0, r3
 800b722:	f000 f9a1 	bl	800ba68 <_Z13HexStringFromPKv>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f107 0210 	add.w	r2, r7, #16
 800b72c:	f107 0108 	add.w	r1, r7, #8
 800b730:	4618      	mov	r0, r3
 800b732:	f7ff fd5e 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800b736:	f107 0310 	add.w	r3, r7, #16
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7ff fcf7 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800b740:	f107 0308 	add.w	r3, r7, #8
 800b744:	4618      	mov	r0, r3
 800b746:	f7ff fcf2 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800b74a:	bf00      	nop
}
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	3718      	adds	r7, #24
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	08021df4 	.word	0x08021df4

0800b758 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800b762:	f107 0308 	add.w	r3, r7, #8
 800b766:	4910      	ldr	r1, [pc, #64]	; (800b7a8 <_Z10StringFromPFvvE+0x50>)
 800b768:	4618      	mov	r0, r3
 800b76a:	f7ff f928 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800b76e:	f107 0310 	add.w	r3, r7, #16
 800b772:	6839      	ldr	r1, [r7, #0]
 800b774:	4618      	mov	r0, r3
 800b776:	f000 f98b 	bl	800ba90 <_Z13HexStringFromPFvvE>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f107 0210 	add.w	r2, r7, #16
 800b780:	f107 0108 	add.w	r1, r7, #8
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff fd34 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800b78a:	f107 0310 	add.w	r3, r7, #16
 800b78e:	4618      	mov	r0, r3
 800b790:	f7ff fccd 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800b794:	f107 0308 	add.w	r3, r7, #8
 800b798:	4618      	mov	r0, r3
 800b79a:	f7ff fcc8 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800b79e:	bf00      	nop
}
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	3718      	adds	r7, #24
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	08021df4 	.word	0x08021df4

0800b7ac <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	4904      	ldr	r1, [pc, #16]	; (800b7cc <_Z13HexStringFroml+0x20>)
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f000 f9bd 	bl	800bb3c <_Z16StringFromFormatPKcz>
}
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	08021df8 	.word	0x08021df8

0800b7d0 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	683a      	ldr	r2, [r7, #0]
 800b7de:	4904      	ldr	r1, [pc, #16]	; (800b7f0 <_Z13HexStringFromi+0x20>)
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f000 f9ab 	bl	800bb3c <_Z16StringFromFormatPKcz>
}
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	08021dfc 	.word	0x08021dfc

0800b7f4 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800b800:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4912      	ldr	r1, [pc, #72]	; (800b850 <_Z13HexStringFroma+0x5c>)
 800b808:	4618      	mov	r0, r3
 800b80a:	f000 f997 	bl	800bb3c <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800b80e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b812:	2b00      	cmp	r3, #0
 800b814:	da16      	bge.n	800b844 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff fc68 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800b81c:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	1e9a      	subs	r2, r3, #2
 800b822:	f107 030c 	add.w	r3, r7, #12
 800b826:	6879      	ldr	r1, [r7, #4]
 800b828:	4618      	mov	r0, r3
 800b82a:	f7ff fdd3 	bl	800b3d4 <_ZNK12SimpleString9subStringEj>
 800b82e:	f107 030c 	add.w	r3, r7, #12
 800b832:	4619      	mov	r1, r3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f7ff f92e 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800b83a:	f107 030c 	add.w	r3, r7, #12
 800b83e:	4618      	mov	r0, r3
 800b840:	f7ff fc75 	bl	800b12e <_ZN12SimpleStringD1Ev>
    }
    return result;
 800b844:	bf00      	nop
}
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	3718      	adds	r7, #24
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	08021dfc 	.word	0x08021dfc

0800b854 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	683a      	ldr	r2, [r7, #0]
 800b862:	4904      	ldr	r1, [pc, #16]	; (800b874 <_Z13HexStringFromm+0x20>)
 800b864:	4618      	mov	r0, r3
 800b866:	f000 f969 	bl	800bb3c <_Z16StringFromFormatPKcz>
}
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	08021df8 	.word	0x08021df8

0800b878 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	683a      	ldr	r2, [r7, #0]
 800b886:	4904      	ldr	r1, [pc, #16]	; (800b898 <_Z13HexStringFromj+0x20>)
 800b888:	4618      	mov	r0, r3
 800b88a:	f000 f957 	bl	800bb3c <_Z16StringFromFormatPKcz>
}
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	08021dfc 	.word	0x08021dfc

0800b89c <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800b8a6:	f107 0308 	add.w	r3, r7, #8
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7ff ff8f 	bl	800b7d0 <_Z13HexStringFromi>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f107 0208 	add.w	r2, r7, #8
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f000 f87e 	bl	800b9bc <_Z26BracketsFormattedHexString12SimpleString>
 800b8c0:	f107 0308 	add.w	r3, r7, #8
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7ff fc32 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800b8ca:	bf00      	nop
}
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800b8de:	f107 0308 	add.w	r3, r7, #8
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff ffc7 	bl	800b878 <_Z13HexStringFromj>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f107 0208 	add.w	r2, r7, #8
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f000 f862 	bl	800b9bc <_Z26BracketsFormattedHexString12SimpleString>
 800b8f8:	f107 0308 	add.w	r3, r7, #8
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7ff fc16 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800b902:	bf00      	nop
}
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800b916:	f107 0308 	add.w	r3, r7, #8
 800b91a:	6839      	ldr	r1, [r7, #0]
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7ff ff45 	bl	800b7ac <_Z13HexStringFroml>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f107 0208 	add.w	r2, r7, #8
 800b928:	4611      	mov	r1, r2
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 f846 	bl	800b9bc <_Z26BracketsFormattedHexString12SimpleString>
 800b930:	f107 0308 	add.w	r3, r7, #8
 800b934:	4618      	mov	r0, r3
 800b936:	f7ff fbfa 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800b93a:	bf00      	nop
}
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800b94e:	f107 0308 	add.w	r3, r7, #8
 800b952:	6839      	ldr	r1, [r7, #0]
 800b954:	4618      	mov	r0, r3
 800b956:	f7ff ff7d 	bl	800b854 <_Z13HexStringFromm>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f107 0208 	add.w	r2, r7, #8
 800b960:	4611      	mov	r1, r2
 800b962:	4618      	mov	r0, r3
 800b964:	f000 f82a 	bl	800b9bc <_Z26BracketsFormattedHexString12SimpleString>
 800b968:	f107 0308 	add.w	r3, r7, #8
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7ff fbde 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800b972:	bf00      	nop
}
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	460b      	mov	r3, r1
 800b986:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800b988:	f107 0308 	add.w	r3, r7, #8
 800b98c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b990:	4611      	mov	r1, r2
 800b992:	4618      	mov	r0, r3
 800b994:	f7ff ff2e 	bl	800b7f4 <_Z13HexStringFroma>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f107 0208 	add.w	r2, r7, #8
 800b99e:	4611      	mov	r1, r2
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f000 f80b 	bl	800b9bc <_Z26BracketsFormattedHexString12SimpleString>
 800b9a6:	f107 0308 	add.w	r3, r7, #8
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7ff fbbf 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800b9b0:	bf00      	nop
}
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
	...

0800b9bc <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b088      	sub	sp, #32
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800b9c6:	f107 0310 	add.w	r3, r7, #16
 800b9ca:	4917      	ldr	r1, [pc, #92]	; (800ba28 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7fe fff6 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800b9d2:	f107 0308 	add.w	r3, r7, #8
 800b9d6:	f107 0110 	add.w	r1, r7, #16
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff fc08 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800b9e2:	f107 0318 	add.w	r3, r7, #24
 800b9e6:	4911      	ldr	r1, [pc, #68]	; (800ba2c <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7fe ffe8 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f107 0218 	add.w	r2, r7, #24
 800b9f4:	f107 0108 	add.w	r1, r7, #8
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff fbfa 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800b9fe:	f107 0318 	add.w	r3, r7, #24
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7ff fb93 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800ba08:	f107 0308 	add.w	r3, r7, #8
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7ff fb8e 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800ba12:	f107 0310 	add.w	r3, r7, #16
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7ff fb89 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800ba1c:	bf00      	nop
}
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	3720      	adds	r7, #32
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	08021e00 	.word	0x08021e00
 800ba2c:	08021e04 	.word	0x08021e04

0800ba30 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800ba38:	1d3b      	adds	r3, r7, #4
 800ba3a:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3714      	adds	r7, #20
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800ba54:	1d3b      	adds	r3, r7, #4
 800ba56:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3714      	adds	r7, #20
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800ba72:	6838      	ldr	r0, [r7, #0]
 800ba74:	f7ff ffdc 	bl	800ba30 <_ZL25convertPointerToLongValuePKv>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4903      	ldr	r1, [pc, #12]	; (800ba8c <_Z13HexStringFromPKv+0x24>)
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f000 f85c 	bl	800bb3c <_Z16StringFromFormatPKcz>
}
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	08021df8 	.word	0x08021df8

0800ba90 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800ba9a:	6838      	ldr	r0, [r7, #0]
 800ba9c:	f7ff ffd6 	bl	800ba4c <_ZL33convertFunctionPointerToLongValuePFvvE>
 800baa0:	4602      	mov	r2, r0
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4903      	ldr	r1, [pc, #12]	; (800bab4 <_Z13HexStringFromPFvvE+0x24>)
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 f848 	bl	800bb3c <_Z16StringFromFormatPKcz>
}
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	3708      	adds	r7, #8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	08021df8 	.word	0x08021df8

0800bab8 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af02      	add	r7, sp, #8
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	ed87 0b00 	vstr	d0, [r7]
 800bac4:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800bac6:	4b18      	ldr	r3, [pc, #96]	; (800bb28 <_Z10StringFromdi+0x70>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	ed97 0b00 	vldr	d0, [r7]
 800bace:	4798      	blx	r3
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	bf14      	ite	ne
 800bad6:	2301      	movne	r3, #1
 800bad8:	2300      	moveq	r3, #0
 800bada:	b2db      	uxtb	r3, r3
 800badc:	2b00      	cmp	r3, #0
 800bade:	d004      	beq.n	800baea <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800bae0:	4912      	ldr	r1, [pc, #72]	; (800bb2c <_Z10StringFromdi+0x74>)
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f7fe ff6b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800bae8:	e01a      	b.n	800bb20 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800baea:	4b11      	ldr	r3, [pc, #68]	; (800bb30 <_Z10StringFromdi+0x78>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	ed97 0b00 	vldr	d0, [r7]
 800baf2:	4798      	blx	r3
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	bf14      	ite	ne
 800bafa:	2301      	movne	r3, #1
 800bafc:	2300      	moveq	r3, #0
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d004      	beq.n	800bb0e <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800bb04:	490b      	ldr	r1, [pc, #44]	; (800bb34 <_Z10StringFromdi+0x7c>)
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f7fe ff59 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800bb0c:	e008      	b.n	800bb20 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb14:	e9cd 2300 	strd	r2, r3, [sp]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	4907      	ldr	r1, [pc, #28]	; (800bb38 <_Z10StringFromdi+0x80>)
 800bb1c:	f000 f80e 	bl	800bb3c <_Z16StringFromFormatPKcz>
}
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	3710      	adds	r7, #16
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	200000e4 	.word	0x200000e4
 800bb2c:	08021e38 	.word	0x08021e38
 800bb30:	200000e8 	.word	0x200000e8
 800bb34:	08021e4c 	.word	0x08021e4c
 800bb38:	08021e5c 	.word	0x08021e5c

0800bb3c <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800bb3c:	b40e      	push	{r1, r2, r3}
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b087      	sub	sp, #28
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800bb46:	4910      	ldr	r1, [pc, #64]	; (800bb88 <_Z16StringFromFormatPKcz+0x4c>)
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f7fe ff38 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800bb4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb52:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800bb54:	f107 0310 	add.w	r3, r7, #16
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f000 f839 	bl	800bbd4 <_Z17VStringFromFormatPKcSt9__va_list>
 800bb62:	f107 0310 	add.w	r3, r7, #16
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7fe ff94 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800bb6e:	f107 0310 	add.w	r3, r7, #16
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7ff fadb 	bl	800b12e <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800bb78:	bf00      	nop
}
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	371c      	adds	r7, #28
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb84:	b003      	add	sp, #12
 800bb86:	4770      	bx	lr
 800bb88:	08021dc4 	.word	0x08021dc4

0800bb8c <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	683a      	ldr	r2, [r7, #0]
 800bb9a:	4904      	ldr	r1, [pc, #16]	; (800bbac <_Z10StringFromj+0x20>)
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7ff ffcd 	bl	800bb3c <_Z16StringFromFormatPKcz>
}
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	08021e68 	.word	0x08021e68

0800bbb0 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	683a      	ldr	r2, [r7, #0]
 800bbbe:	4904      	ldr	r1, [pc, #16]	; (800bbd0 <_Z10StringFromm+0x20>)
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7ff ffbb 	bl	800bb3c <_Z16StringFromFormatPKcz>
}
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	08021e6c 	.word	0x08021e6c

0800bbd4 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800bbd4:	b590      	push	{r4, r7, lr}
 800bbd6:	b0a7      	sub	sp, #156	; 0x9c
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800bbe4:	492e      	ldr	r1, [pc, #184]	; (800bca0 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f7fe fee9 	bl	800a9be <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800bbec:	4b2d      	ldr	r3, [pc, #180]	; (800bca4 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800bbee:	681c      	ldr	r4, [r3, #0]
 800bbf0:	f107 0014 	add.w	r0, r7, #20
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	68ba      	ldr	r2, [r7, #8]
 800bbf8:	2164      	movs	r1, #100	; 0x64
 800bbfa:	47a0      	blx	r4
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800bc02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bc06:	2b63      	cmp	r3, #99	; 0x63
 800bc08:	d813      	bhi.n	800bc32 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800bc0a:	f107 0214 	add.w	r2, r7, #20
 800bc0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800bc12:	4611      	mov	r1, r2
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fe fed2 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800bc1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800bc1e:	4619      	mov	r1, r3
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	f7fe ff38 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800bc26:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7ff fa7f 	bl	800b12e <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800bc30:	e031      	b.n	800bc96 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800bc32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bc36:	3301      	adds	r3, #1
 800bc38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800bc3c:	f240 32c3 	movw	r2, #963	; 0x3c3
 800bc40:	4919      	ldr	r1, [pc, #100]	; (800bca8 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800bc42:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800bc46:	f7fe fc3f 	bl	800a4c8 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800bc4a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800bc4e:	4b15      	ldr	r3, [pc, #84]	; (800bca4 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800bc50:	681c      	ldr	r4, [r3, #0]
 800bc52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc5a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800bc5e:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800bc60:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800bc64:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fe fea8 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800bc6e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800bc72:	4619      	mov	r1, r3
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f7fe ff0e 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800bc7a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7ff fa55 	bl	800b12e <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800bc84:	f240 33c7 	movw	r3, #967	; 0x3c7
 800bc88:	4a07      	ldr	r2, [pc, #28]	; (800bca8 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800bc8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc8e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800bc92:	f7fe fc2d 	bl	800a4f0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800bc96:	bf00      	nop
}
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	379c      	adds	r7, #156	; 0x9c
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd90      	pop	{r4, r7, pc}
 800bca0:	08021dc4 	.word	0x08021dc4
 800bca4:	200000ac 	.word	0x200000ac
 800bca8:	08021d04 	.word	0x08021d04

0800bcac <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b08a      	sub	sp, #40	; 0x28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800bcb8:	491f      	ldr	r1, [pc, #124]	; (800bd38 <_Z16StringFromBinaryPKhj+0x8c>)
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f7fe fe7f 	bl	800a9be <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	627b      	str	r3, [r7, #36]	; 0x24
 800bcc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d219      	bcs.n	800bd00 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd0:	4413      	add	r3, r2
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	f107 0314 	add.w	r3, r7, #20
 800bcda:	4918      	ldr	r1, [pc, #96]	; (800bd3c <_Z16StringFromBinaryPKhj+0x90>)
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7ff ff2d 	bl	800bb3c <_Z16StringFromFormatPKcz>
 800bce2:	f107 0314 	add.w	r3, r7, #20
 800bce6:	4619      	mov	r1, r3
 800bce8:	68f8      	ldr	r0, [r7, #12]
 800bcea:	f7ff fa9d 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800bcee:	f107 0314 	add.w	r3, r7, #20
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7ff fa1b 	bl	800b12e <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	627b      	str	r3, [r7, #36]	; 0x24
 800bcfe:	e7e1      	b.n	800bcc4 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f7ff f9f3 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800bd06:	4603      	mov	r3, r0
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	f107 001c 	add.w	r0, r7, #28
 800bd0e:	2200      	movs	r2, #0
 800bd10:	68f9      	ldr	r1, [r7, #12]
 800bd12:	f7ff fb15 	bl	800b340 <_ZNK12SimpleString9subStringEjj>
 800bd16:	f107 031c 	add.w	r3, r7, #28
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f7fe feba 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800bd22:	f107 031c 	add.w	r3, r7, #28
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7ff fa01 	bl	800b12e <_ZN12SimpleStringD1Ev>

    return result;
 800bd2c:	bf00      	nop
}
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	3728      	adds	r7, #40	; 0x28
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	08021dc4 	.word	0x08021dc4
 800bd3c:	08021e70 	.word	0x08021e70

0800bd40 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d006      	beq.n	800bd60 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	68b9      	ldr	r1, [r7, #8]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7ff ffa7 	bl	800bcac <_Z16StringFromBinaryPKhj>
 800bd5e:	e004      	b.n	800bd6a <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	4904      	ldr	r1, [pc, #16]	; (800bd74 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7ff fc6f 	bl	800b648 <_Z10StringFromPKc>
}
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	08021de4 	.word	0x08021de4

0800bd78 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b088      	sub	sp, #32
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	4913      	ldr	r1, [pc, #76]	; (800bdd8 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7ff fed6 	bl	800bb3c <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b80      	cmp	r3, #128	; 0x80
 800bd94:	bf28      	it	cs
 800bd96:	2380      	movcs	r3, #128	; 0x80
 800bd98:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800bd9a:	f107 0314 	add.w	r3, r7, #20
 800bd9e:	69fa      	ldr	r2, [r7, #28]
 800bda0:	68b9      	ldr	r1, [r7, #8]
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7ff ffcc 	bl	800bd40 <_Z22StringFromBinaryOrNullPKhj>
 800bda8:	f107 0314 	add.w	r3, r7, #20
 800bdac:	4619      	mov	r1, r3
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f7ff fa3a 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800bdb4:	f107 0314 	add.w	r3, r7, #20
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7ff f9b8 	bl	800b12e <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	69fb      	ldr	r3, [r7, #28]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d903      	bls.n	800bdce <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800bdc6:	4905      	ldr	r1, [pc, #20]	; (800bddc <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f7ff fa3f 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800bdce:	bf00      	nop
}
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	3720      	adds	r7, #32
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	08021e78 	.word	0x08021e78
 800bddc:	08021e94 	.word	0x08021e94

0800bde0 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d006      	beq.n	800be00 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	68b9      	ldr	r1, [r7, #8]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7ff ffbd 	bl	800bd78 <_Z24StringFromBinaryWithSizePKhj>
 800bdfe:	e004      	b.n	800be0a <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4904      	ldr	r1, [pc, #16]	; (800be14 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800be04:	4618      	mov	r0, r3
 800be06:	f7ff fc1f 	bl	800b648 <_Z10StringFromPKc>
}
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	08021de4 	.word	0x08021de4

0800be18 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b088      	sub	sp, #32
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
 800be24:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800be26:	4925      	ldr	r1, [pc, #148]	; (800bebc <_Z20StringFromMaskedBitsmmj+0xa4>)
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f7fe fdc8 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2b04      	cmp	r3, #4
 800be32:	d802      	bhi.n	800be3a <_Z20StringFromMaskedBitsmmj+0x22>
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	00db      	lsls	r3, r3, #3
 800be38:	e000      	b.n	800be3c <_Z20StringFromMaskedBitsmmj+0x24>
 800be3a:	2320      	movs	r3, #32
 800be3c:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	3b01      	subs	r3, #1
 800be42:	2201      	movs	r2, #1
 800be44:	fa02 f303 	lsl.w	r3, r2, r3
 800be48:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800be4a:	2300      	movs	r3, #0
 800be4c:	61fb      	str	r3, [r7, #28]
 800be4e:	69fa      	ldr	r2, [r7, #28]
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	429a      	cmp	r2, r3
 800be54:	d22d      	bcs.n	800beb2 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	4013      	ands	r3, r2
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00c      	beq.n	800be7a <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	4013      	ands	r3, r2
 800be66:	2b00      	cmp	r3, #0
 800be68:	d001      	beq.n	800be6e <_Z20StringFromMaskedBitsmmj+0x56>
 800be6a:	4b15      	ldr	r3, [pc, #84]	; (800bec0 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800be6c:	e000      	b.n	800be70 <_Z20StringFromMaskedBitsmmj+0x58>
 800be6e:	4b15      	ldr	r3, [pc, #84]	; (800bec4 <_Z20StringFromMaskedBitsmmj+0xac>)
 800be70:	4619      	mov	r1, r3
 800be72:	68f8      	ldr	r0, [r7, #12]
 800be74:	f7ff f9ea 	bl	800b24c <_ZN12SimpleStringpLEPKc>
 800be78:	e003      	b.n	800be82 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800be7a:	4913      	ldr	r1, [pc, #76]	; (800bec8 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f7ff f9e5 	bl	800b24c <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	f003 0307 	and.w	r3, r3, #7
 800be88:	2b07      	cmp	r3, #7
 800be8a:	d108      	bne.n	800be9e <_Z20StringFromMaskedBitsmmj+0x86>
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	3b01      	subs	r3, #1
 800be90:	69fa      	ldr	r2, [r7, #28]
 800be92:	429a      	cmp	r2, r3
 800be94:	d003      	beq.n	800be9e <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800be96:	490d      	ldr	r1, [pc, #52]	; (800becc <_Z20StringFromMaskedBitsmmj+0xb4>)
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	f7ff f9d7 	bl	800b24c <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	005b      	lsls	r3, r3, #1
 800bea2:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	005b      	lsls	r3, r3, #1
 800bea8:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	3301      	adds	r3, #1
 800beae:	61fb      	str	r3, [r7, #28]
 800beb0:	e7cd      	b.n	800be4e <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800beb2:	bf00      	nop
}
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	3720      	adds	r7, #32
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	08021dc4 	.word	0x08021dc4
 800bec0:	08021e9c 	.word	0x08021e9c
 800bec4:	08021ea0 	.word	0x08021ea0
 800bec8:	08021ea4 	.word	0x08021ea4
 800becc:	08021ea8 	.word	0x08021ea8

0800bed0 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800beda:	683a      	ldr	r2, [r7, #0]
 800bedc:	4b18      	ldr	r3, [pc, #96]	; (800bf40 <_Z23StringFromOrdinalNumberj+0x70>)
 800bede:	fba3 1302 	umull	r1, r3, r3, r2
 800bee2:	08d9      	lsrs	r1, r3, #3
 800bee4:	460b      	mov	r3, r1
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	440b      	add	r3, r1
 800beea:	005b      	lsls	r3, r3, #1
 800beec:	1ad3      	subs	r3, r2, r3
 800beee:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	2b0a      	cmp	r3, #10
 800bef4:	d905      	bls.n	800bf02 <_Z23StringFromOrdinalNumberj+0x32>
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2b0d      	cmp	r3, #13
 800befa:	d802      	bhi.n	800bf02 <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800befc:	4b11      	ldr	r3, [pc, #68]	; (800bf44 <_Z23StringFromOrdinalNumberj+0x74>)
 800befe:	60fb      	str	r3, [r7, #12]
 800bf00:	e013      	b.n	800bf2a <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	2b03      	cmp	r3, #3
 800bf06:	d102      	bne.n	800bf0e <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800bf08:	4b0f      	ldr	r3, [pc, #60]	; (800bf48 <_Z23StringFromOrdinalNumberj+0x78>)
 800bf0a:	60fb      	str	r3, [r7, #12]
 800bf0c:	e00d      	b.n	800bf2a <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d102      	bne.n	800bf1a <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800bf14:	4b0d      	ldr	r3, [pc, #52]	; (800bf4c <_Z23StringFromOrdinalNumberj+0x7c>)
 800bf16:	60fb      	str	r3, [r7, #12]
 800bf18:	e007      	b.n	800bf2a <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d102      	bne.n	800bf26 <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800bf20:	4b0b      	ldr	r3, [pc, #44]	; (800bf50 <_Z23StringFromOrdinalNumberj+0x80>)
 800bf22:	60fb      	str	r3, [r7, #12]
 800bf24:	e001      	b.n	800bf2a <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800bf26:	4b07      	ldr	r3, [pc, #28]	; (800bf44 <_Z23StringFromOrdinalNumberj+0x74>)
 800bf28:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	683a      	ldr	r2, [r7, #0]
 800bf30:	4908      	ldr	r1, [pc, #32]	; (800bf54 <_Z23StringFromOrdinalNumberj+0x84>)
 800bf32:	f7ff fe03 	bl	800bb3c <_Z16StringFromFormatPKcz>
}
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	cccccccd 	.word	0xcccccccd
 800bf44:	08021eac 	.word	0x08021eac
 800bf48:	08021eb0 	.word	0x08021eb0
 800bf4c:	08021eb4 	.word	0x08021eb4
 800bf50:	08021eb8 	.word	0x08021eb8
 800bf54:	08021ebc 	.word	0x08021ebc

0800bf58 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	3304      	adds	r3, #4
 800bf64:	4907      	ldr	r1, [pc, #28]	; (800bf84 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fe fd29 	bl	800a9be <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	60da      	str	r2, [r3, #12]
}
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	08021dc4 	.word	0x08021dc4

0800bf88 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800bf88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d01e      	beq.n	800bfd8 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	3b04      	subs	r3, #4
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	00db      	lsls	r3, r3, #3
 800bfa8:	18d4      	adds	r4, r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	429c      	cmp	r4, r3
 800bfb0:	d004      	beq.n	800bfbc <_ZN22SimpleStringCollection8allocateEj+0x34>
 800bfb2:	3c08      	subs	r4, #8
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f7ff f8ba 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800bfba:	e7f6      	b.n	800bfaa <_ZN22SimpleStringCollection8allocateEj+0x22>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f1a3 0208 	sub.w	r2, r3, #8
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	3b04      	subs	r3, #4
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	00db      	lsls	r3, r3, #3
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	4610      	mov	r0, r2
 800bfd4:	f7fc f976 	bl	80082c4 <_ZdaPvj>

    size_ = _size;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	683a      	ldr	r2, [r7, #0]
 800bfdc:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	68dc      	ldr	r4, [r3, #12]
 800bfe2:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800bfe6:	d202      	bcs.n	800bfee <_ZN22SimpleStringCollection8allocateEj+0x66>
 800bfe8:	1c63      	adds	r3, r4, #1
 800bfea:	00db      	lsls	r3, r3, #3
 800bfec:	e001      	b.n	800bff2 <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800bfee:	f04f 33ff 	mov.w	r3, #4294967295
 800bff2:	f240 4227 	movw	r2, #1063	; 0x427
 800bff6:	4910      	ldr	r1, [pc, #64]	; (800c038 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fc f941 	bl	8008280 <_ZnajPKci>
 800bffe:	4605      	mov	r5, r0
 800c000:	1d2b      	adds	r3, r5, #4
 800c002:	3b04      	subs	r3, #4
 800c004:	2208      	movs	r2, #8
 800c006:	601a      	str	r2, [r3, #0]
 800c008:	1d2b      	adds	r3, r5, #4
 800c00a:	601c      	str	r4, [r3, #0]
 800c00c:	f105 0308 	add.w	r3, r5, #8
 800c010:	1e62      	subs	r2, r4, #1
 800c012:	4614      	mov	r4, r2
 800c014:	461e      	mov	r6, r3
 800c016:	2c00      	cmp	r4, #0
 800c018:	db06      	blt.n	800c028 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800c01a:	4908      	ldr	r1, [pc, #32]	; (800c03c <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800c01c:	4630      	mov	r0, r6
 800c01e:	f7fe fcce 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800c022:	3608      	adds	r6, #8
 800c024:	3c01      	subs	r4, #1
 800c026:	e7f6      	b.n	800c016 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800c028:	f105 0208 	add.w	r2, r5, #8
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	601a      	str	r2, [r3, #0]
}
 800c030:	bf00      	nop
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c038:	08021d04 	.word	0x08021d04
 800c03c:	08021dc4 	.word	0x08021dc4

0800c040 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800c040:	b590      	push	{r4, r7, lr}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d01e      	beq.n	800c08e <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	3b04      	subs	r3, #4
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	00db      	lsls	r3, r3, #3
 800c05e:	18d4      	adds	r4, r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	429c      	cmp	r4, r3
 800c066:	d004      	beq.n	800c072 <_ZN22SimpleStringCollectionD1Ev+0x32>
 800c068:	3c08      	subs	r4, #8
 800c06a:	4620      	mov	r0, r4
 800c06c:	f7ff f85f 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800c070:	e7f6      	b.n	800c060 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f1a3 0208 	sub.w	r2, r3, #8
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	3b04      	subs	r3, #4
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	3301      	adds	r3, #1
 800c084:	00db      	lsls	r3, r3, #3
 800c086:	4619      	mov	r1, r3
 800c088:	4610      	mov	r0, r2
 800c08a:	f7fc f91b 	bl	80082c4 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	3304      	adds	r3, #4
 800c092:	4618      	mov	r0, r3
 800c094:	f7ff f84b 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4618      	mov	r0, r3
 800c09c:	370c      	adds	r7, #12
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd90      	pop	{r4, r7, pc}

0800c0a2 <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800c0a2:	b480      	push	{r7}
 800c0a4:	b083      	sub	sp, #12
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
    return size_;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	68db      	ldr	r3, [r3, #12]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	370c      	adds	r7, #12
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
	...

0800c0bc <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800c0bc:	b590      	push	{r4, r7, lr}
 800c0be:	b085      	sub	sp, #20
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	683a      	ldr	r2, [r7, #0]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d315      	bcc.n	800c0fc <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	1d1c      	adds	r4, r3, #4
 800c0d4:	f107 0308 	add.w	r3, r7, #8
 800c0d8:	490d      	ldr	r1, [pc, #52]	; (800c110 <_ZN22SimpleStringCollectionixEj+0x54>)
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fe fc6f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800c0e0:	f107 0308 	add.w	r3, r7, #8
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	f7fe fcd5 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800c0ec:	f107 0308 	add.w	r3, r7, #8
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7ff f81c 	bl	800b12e <_ZN12SimpleStringD1Ev>
        return empty_;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	e004      	b.n	800c106 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	00db      	lsls	r3, r3, #3
 800c104:	4413      	add	r3, r2
}
 800c106:	4618      	mov	r0, r3
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd90      	pop	{r4, r7, pc}
 800c10e:	bf00      	nop
 800c110:	08021dc4 	.word	0x08021dc4

0800c114 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fa fb88 	bl	8006834 <_ZN17ConsoleTestOutputC1Ev>
 800c124:	4a08      	ldr	r2, [pc, #32]	; (800c148 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	601a      	str	r2, [r3, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	611a      	str	r2, [r3, #16]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	3314      	adds	r3, #20
 800c134:	4905      	ldr	r1, [pc, #20]	; (800c14c <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800c136:	4618      	mov	r0, r3
 800c138:	f7fe fc41 	bl	800a9be <_ZN12SimpleStringC1EPKc>
{
}
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4618      	mov	r0, r3
 800c140:	3708      	adds	r7, #8
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	08025380 	.word	0x08025380
 800c14c:	08021ec4 	.word	0x08021ec4

0800c150 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	4a08      	ldr	r2, [pc, #32]	; (800c17c <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	601a      	str	r2, [r3, #0]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	3314      	adds	r3, #20
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe ffe3 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7fa fb74 	bl	8006858 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4618      	mov	r0, r3
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	08025380 	.word	0x08025380

0800c180 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
}
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7ff ffe1 	bl	800c150 <_ZN18TeamCityTestOutputD1Ev>
 800c18e:	211c      	movs	r1, #28
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7fc f865 	bl	8008260 <_ZdlPvj>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4618      	mov	r0, r3
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	332c      	adds	r3, #44	; 0x2c
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	492b      	ldr	r1, [pc, #172]	; (800c264 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800c1b6:	4610      	mov	r0, r2
 800c1b8:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800c1ba:	f107 0308 	add.w	r3, r7, #8
 800c1be:	6839      	ldr	r1, [r7, #0]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f004 fdf7 	bl	8010db4 <_ZNK10UtestShell7getNameEv>
 800c1c6:	f107 0308 	add.w	r3, r7, #8
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fe ff82 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 f919 	bl	800c40c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c1da:	f107 0308 	add.w	r3, r7, #8
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fe ffa5 	bl	800b12e <_ZN12SimpleStringD1Ev>
    print("']\n");
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	332c      	adds	r3, #44	; 0x2c
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	491e      	ldr	r1, [pc, #120]	; (800c268 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800c1f0:	4610      	mov	r0, r2
 800c1f2:	4798      	blx	r3
    if (!test.willRun()) {
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	3318      	adds	r3, #24
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	6838      	ldr	r0, [r7, #0]
 800c1fe:	4798      	blx	r3
 800c200:	4603      	mov	r3, r0
 800c202:	f083 0301 	eor.w	r3, r3, #1
 800c206:	b2db      	uxtb	r3, r3
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d024      	beq.n	800c256 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	332c      	adds	r3, #44	; 0x2c
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4915      	ldr	r1, [pc, #84]	; (800c26c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800c218:	4610      	mov	r0, r2
 800c21a:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800c21c:	f107 0310 	add.w	r3, r7, #16
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	4618      	mov	r0, r3
 800c224:	f004 fdc6 	bl	8010db4 <_ZNK10UtestShell7getNameEv>
 800c228:	f107 0310 	add.w	r3, r7, #16
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fe ff51 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800c232:	4603      	mov	r3, r0
 800c234:	4619      	mov	r1, r3
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f8e8 	bl	800c40c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c23c:	f107 0310 	add.w	r3, r7, #16
 800c240:	4618      	mov	r0, r3
 800c242:	f7fe ff74 	bl	800b12e <_ZN12SimpleStringD1Ev>
        print("']\n");
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	332c      	adds	r3, #44	; 0x2c
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4905      	ldr	r1, [pc, #20]	; (800c268 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800c252:	4610      	mov	r0, r2
 800c254:	4798      	blx	r3
    }
    currtest_ = &test;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	683a      	ldr	r2, [r7, #0]
 800c25a:	611a      	str	r2, [r3, #16]
}
 800c25c:	bf00      	nop
 800c25e:	3718      	adds	r7, #24
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	08021ec8 	.word	0x08021ec8
 800c268:	08021ee8 	.word	0x08021ee8
 800c26c:	08021eec 	.word	0x08021eec

0800c270 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800c270:	b5b0      	push	{r4, r5, r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	691b      	ldr	r3, [r3, #16]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d03b      	beq.n	800c2fa <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	332c      	adds	r3, #44	; 0x2c
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	491d      	ldr	r1, [pc, #116]	; (800c304 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800c28e:	4610      	mov	r0, r2
 800c290:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	691a      	ldr	r2, [r3, #16]
 800c296:	f107 0308 	add.w	r3, r7, #8
 800c29a:	4611      	mov	r1, r2
 800c29c:	4618      	mov	r0, r3
 800c29e:	f004 fd89 	bl	8010db4 <_ZNK10UtestShell7getNameEv>
 800c2a2:	f107 0308 	add.w	r3, r7, #8
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fe ff14 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 f8ab 	bl	800c40c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c2b6:	f107 0308 	add.w	r3, r7, #8
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fe ff37 	bl	800b12e <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	332c      	adds	r3, #44	; 0x2c
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	490f      	ldr	r1, [pc, #60]	; (800c308 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800c2cc:	4610      	mov	r0, r2
 800c2ce:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800c2d0:	687d      	ldr	r5, [r7, #4]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	3334      	adds	r3, #52	; 0x34
 800c2d8:	681c      	ldr	r4, [r3, #0]
 800c2da:	6838      	ldr	r0, [r7, #0]
 800c2dc:	f004 fa0a 	bl	80106f4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	47a0      	blx	r4
    print("']\n");
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	332c      	adds	r3, #44	; 0x2c
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4906      	ldr	r1, [pc, #24]	; (800c30c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	4798      	blx	r3
 800c2f8:	e000      	b.n	800c2fc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800c2fa:	bf00      	nop
}
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bdb0      	pop	{r4, r5, r7, pc}
 800c302:	bf00      	nop
 800c304:	08021f0c 	.word	0x08021f0c
 800c308:	08021f2c 	.word	0x08021f2c
 800c30c:	08021ee8 	.word	0x08021ee8

0800c310 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800c310:	b590      	push	{r4, r7, lr}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f103 0414 	add.w	r4, r3, #20
 800c320:	f107 0308 	add.w	r3, r7, #8
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	4618      	mov	r0, r3
 800c328:	f004 fd53 	bl	8010dd2 <_ZNK10UtestShell8getGroupEv>
 800c32c:	f107 0308 	add.w	r3, r7, #8
 800c330:	4619      	mov	r1, r3
 800c332:	4620      	mov	r0, r4
 800c334:	f7fe fbaf 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800c338:	f107 0308 	add.w	r3, r7, #8
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7fe fef6 	bl	800b12e <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	332c      	adds	r3, #44	; 0x2c
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	490c      	ldr	r1, [pc, #48]	; (800c380 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800c34e:	4610      	mov	r0, r2
 800c350:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	3314      	adds	r3, #20
 800c356:	4618      	mov	r0, r3
 800c358:	f7fe febc 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800c35c:	4603      	mov	r3, r0
 800c35e:	4619      	mov	r1, r3
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 f853 	bl	800c40c <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	332c      	adds	r3, #44	; 0x2c
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4904      	ldr	r1, [pc, #16]	; (800c384 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800c372:	4610      	mov	r0, r2
 800c374:	4798      	blx	r3
}
 800c376:	bf00      	nop
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd90      	pop	{r4, r7, pc}
 800c37e:	bf00      	nop
 800c380:	08021f3c 	.word	0x08021f3c
 800c384:	08021ee8 	.word	0x08021ee8

0800c388 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800c388:	b590      	push	{r4, r7, lr}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f103 0414 	add.w	r4, r3, #20
 800c398:	f107 0308 	add.w	r3, r7, #8
 800c39c:	4918      	ldr	r1, [pc, #96]	; (800c400 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fe fb0d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800c3a4:	f107 0308 	add.w	r3, r7, #8
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f7fe fecb 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	461c      	mov	r4, r3
 800c3b4:	f107 0308 	add.w	r3, r7, #8
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fe feb8 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800c3be:	2c00      	cmp	r4, #0
 800c3c0:	d11a      	bne.n	800c3f8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	332c      	adds	r3, #44	; 0x2c
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	490d      	ldr	r1, [pc, #52]	; (800c404 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800c3ce:	4610      	mov	r0, r2
 800c3d0:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	3314      	adds	r3, #20
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7fe fe7c 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	4619      	mov	r1, r3
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 f813 	bl	800c40c <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	332c      	adds	r3, #44	; 0x2c
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4905      	ldr	r1, [pc, #20]	; (800c408 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800c3f2:	4610      	mov	r0, r2
 800c3f4:	4798      	blx	r3
 800c3f6:	e000      	b.n	800c3fa <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800c3f8:	bf00      	nop
}
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd90      	pop	{r4, r7, pc}
 800c400:	08021ec4 	.word	0x08021ec4
 800c404:	08021f60 	.word	0x08021f60
 800c408:	08021ee8 	.word	0x08021ee8

0800c40c <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
    while (*s) {
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d03f      	beq.n	800c49e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	2b27      	cmp	r3, #39	; 0x27
 800c424:	d00b      	beq.n	800c43e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	2b7c      	cmp	r3, #124	; 0x7c
 800c42c:	d007      	beq.n	800c43e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	2b5b      	cmp	r3, #91	; 0x5b
 800c434:	d003      	beq.n	800c43e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	2b5d      	cmp	r3, #93	; 0x5d
 800c43c:	d107      	bne.n	800c44e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800c43e:	237c      	movs	r3, #124	; 0x7c
 800c440:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800c448:	2300      	movs	r3, #0
 800c44a:	73bb      	strb	r3, [r7, #14]
 800c44c:	e01a      	b.n	800c484 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	2b0d      	cmp	r3, #13
 800c454:	d106      	bne.n	800c464 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800c456:	237c      	movs	r3, #124	; 0x7c
 800c458:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800c45a:	2372      	movs	r3, #114	; 0x72
 800c45c:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800c45e:	2300      	movs	r3, #0
 800c460:	73bb      	strb	r3, [r7, #14]
 800c462:	e00f      	b.n	800c484 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	2b0a      	cmp	r3, #10
 800c46a:	d106      	bne.n	800c47a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800c46c:	237c      	movs	r3, #124	; 0x7c
 800c46e:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800c470:	236e      	movs	r3, #110	; 0x6e
 800c472:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800c474:	2300      	movs	r3, #0
 800c476:	73bb      	strb	r3, [r7, #14]
 800c478:	e004      	b.n	800c484 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800c480:	2300      	movs	r3, #0
 800c482:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	3328      	adds	r3, #40	; 0x28
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f107 010c 	add.w	r1, r7, #12
 800c492:	4610      	mov	r0, r2
 800c494:	4798      	blx	r3
        s++;
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	3301      	adds	r3, #1
 800c49a:	603b      	str	r3, [r7, #0]
    while (*s) {
 800c49c:	e7bb      	b.n	800c416 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800c49e:	bf00      	nop
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
	...

0800c4a8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800c4a8:	b5b0      	push	{r4, r5, r7, lr}
 800c4aa:	b08a      	sub	sp, #40	; 0x28
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	332c      	adds	r3, #44	; 0x2c
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4968      	ldr	r1, [pc, #416]	; (800c660 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800c4be:	4610      	mov	r0, r2
 800c4c0:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	3310      	adds	r3, #16
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f107 0208 	add.w	r2, r7, #8
 800c4ce:	6839      	ldr	r1, [r7, #0]
 800c4d0:	4610      	mov	r0, r2
 800c4d2:	4798      	blx	r3
 800c4d4:	f107 0308 	add.w	r3, r7, #8
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f7fe fdfb 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7ff ff92 	bl	800c40c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c4e8:	f107 0308 	add.w	r3, r7, #8
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7fe fe1e 	bl	800b12e <_ZN12SimpleStringD1Ev>
    print("' message='");
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	332c      	adds	r3, #44	; 0x2c
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4959      	ldr	r1, [pc, #356]	; (800c664 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800c4fe:	4610      	mov	r0, r2
 800c500:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800c502:	6838      	ldr	r0, [r7, #0]
 800c504:	f000 fa15 	bl	800c932 <_ZNK11TestFailure17isOutsideTestFileEv>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d105      	bne.n	800c51a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800c50e:	6838      	ldr	r0, [r7, #0]
 800c510:	f000 fa21 	bl	800c956 <_ZNK11TestFailure18isInHelperFunctionEv>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d001      	beq.n	800c51e <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800c51a:	2301      	movs	r3, #1
 800c51c:	e000      	b.n	800c520 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800c51e:	2300      	movs	r3, #0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d042      	beq.n	800c5aa <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	332c      	adds	r3, #44	; 0x2c
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	494e      	ldr	r1, [pc, #312]	; (800c668 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800c530:	4610      	mov	r0, r2
 800c532:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800c534:	687d      	ldr	r5, [r7, #4]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	332c      	adds	r3, #44	; 0x2c
 800c53c:	681c      	ldr	r4, [r3, #0]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	331c      	adds	r3, #28
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f107 0210 	add.w	r2, r7, #16
 800c54a:	6839      	ldr	r1, [r7, #0]
 800c54c:	4610      	mov	r0, r2
 800c54e:	4798      	blx	r3
 800c550:	f107 0310 	add.w	r3, r7, #16
 800c554:	4618      	mov	r0, r3
 800c556:	f7fe fdbd 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800c55a:	4603      	mov	r3, r0
 800c55c:	4619      	mov	r1, r3
 800c55e:	4628      	mov	r0, r5
 800c560:	47a0      	blx	r4
 800c562:	f107 0310 	add.w	r3, r7, #16
 800c566:	4618      	mov	r0, r3
 800c568:	f7fe fde1 	bl	800b12e <_ZN12SimpleStringD1Ev>
        print(":");
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	332c      	adds	r3, #44	; 0x2c
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	493d      	ldr	r1, [pc, #244]	; (800c66c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800c578:	4610      	mov	r0, r2
 800c57a:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800c57c:	687d      	ldr	r5, [r7, #4]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	3334      	adds	r3, #52	; 0x34
 800c584:	681c      	ldr	r4, [r3, #0]
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	3320      	adds	r3, #32
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	6838      	ldr	r0, [r7, #0]
 800c590:	4798      	blx	r3
 800c592:	4603      	mov	r3, r0
 800c594:	4619      	mov	r1, r3
 800c596:	4628      	mov	r0, r5
 800c598:	47a0      	blx	r4
        print("): ");
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	332c      	adds	r3, #44	; 0x2c
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4932      	ldr	r1, [pc, #200]	; (800c670 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800c5a6:	4610      	mov	r0, r2
 800c5a8:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	3308      	adds	r3, #8
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f107 0218 	add.w	r2, r7, #24
 800c5b6:	6839      	ldr	r1, [r7, #0]
 800c5b8:	4610      	mov	r0, r2
 800c5ba:	4798      	blx	r3
 800c5bc:	f107 0318 	add.w	r3, r7, #24
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7fe fd87 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f7ff ff1e 	bl	800c40c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c5d0:	f107 0318 	add.w	r3, r7, #24
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7fe fdaa 	bl	800b12e <_ZN12SimpleStringD1Ev>
    print(":");
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	332c      	adds	r3, #44	; 0x2c
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4921      	ldr	r1, [pc, #132]	; (800c66c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800c5e6:	4610      	mov	r0, r2
 800c5e8:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800c5ea:	687d      	ldr	r5, [r7, #4]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	3334      	adds	r3, #52	; 0x34
 800c5f2:	681c      	ldr	r4, [r3, #0]
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	3314      	adds	r3, #20
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	6838      	ldr	r0, [r7, #0]
 800c5fe:	4798      	blx	r3
 800c600:	4603      	mov	r3, r0
 800c602:	4619      	mov	r1, r3
 800c604:	4628      	mov	r0, r5
 800c606:	47a0      	blx	r4

    print("' details='");
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	332c      	adds	r3, #44	; 0x2c
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4918      	ldr	r1, [pc, #96]	; (800c674 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800c614:	4610      	mov	r0, r2
 800c616:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	3318      	adds	r3, #24
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f107 0220 	add.w	r2, r7, #32
 800c624:	6839      	ldr	r1, [r7, #0]
 800c626:	4610      	mov	r0, r2
 800c628:	4798      	blx	r3
 800c62a:	f107 0320 	add.w	r3, r7, #32
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fe fd50 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800c634:	4603      	mov	r3, r0
 800c636:	4619      	mov	r1, r3
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f7ff fee7 	bl	800c40c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c63e:	f107 0320 	add.w	r3, r7, #32
 800c642:	4618      	mov	r0, r3
 800c644:	f7fe fd73 	bl	800b12e <_ZN12SimpleStringD1Ev>
    print("']\n");
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	332c      	adds	r3, #44	; 0x2c
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4909      	ldr	r1, [pc, #36]	; (800c678 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800c654:	4610      	mov	r0, r2
 800c656:	4798      	blx	r3
}
 800c658:	bf00      	nop
 800c65a:	3728      	adds	r7, #40	; 0x28
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bdb0      	pop	{r4, r5, r7, pc}
 800c660:	08021f84 	.word	0x08021f84
 800c664:	08021fa4 	.word	0x08021fa4
 800c668:	08021fb0 	.word	0x08021fb0
 800c66c:	08021fc0 	.word	0x08021fc0
 800c670:	08021fc4 	.word	0x08021fc4
 800c674:	08021fc8 	.word	0x08021fc8
 800c678:	08021ee8 	.word	0x08021ee8

0800c67c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800c688:	4a1a      	ldr	r2, [pc, #104]	; (800c6f4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	601a      	str	r2, [r3, #0]
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	3314      	adds	r3, #20
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	68fa      	ldr	r2, [r7, #12]
 800c698:	3204      	adds	r2, #4
 800c69a:	68b9      	ldr	r1, [r7, #8]
 800c69c:	4610      	mov	r0, r2
 800c69e:	4798      	blx	r3
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	330c      	adds	r3, #12
 800c6a4:	68b9      	ldr	r1, [r7, #8]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f004 fb84 	bl	8010db4 <_ZNK10UtestShell7getNameEv>
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	3314      	adds	r3, #20
 800c6b0:	68b9      	ldr	r1, [r7, #8]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f004 fc4f 	bl	8010f56 <_ZNK10UtestShell7getFileEv>
 800c6b8:	68b8      	ldr	r0, [r7, #8]
 800c6ba:	f004 fc5b 	bl	8010f74 <_ZNK10UtestShell13getLineNumberEv>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	61da      	str	r2, [r3, #28]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	3320      	adds	r3, #32
 800c6c8:	68b9      	ldr	r1, [r7, #8]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f004 fc43 	bl	8010f56 <_ZNK10UtestShell7getFileEv>
 800c6d0:	68b8      	ldr	r0, [r7, #8]
 800c6d2:	f004 fc4f 	bl	8010f74 <_ZNK10UtestShell13getLineNumberEv>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	629a      	str	r2, [r3, #40]	; 0x28
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	332c      	adds	r3, #44	; 0x2c
 800c6e0:	6879      	ldr	r1, [r7, #4]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7fe f9bf 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
{
}
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	0802564c 	.word	0x0802564c

0800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	607a      	str	r2, [r7, #4]
 800c704:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800c706:	4a19      	ldr	r2, [pc, #100]	; (800c76c <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	601a      	str	r2, [r3, #0]
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	3314      	adds	r3, #20
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	3204      	adds	r2, #4
 800c718:	68b9      	ldr	r1, [r7, #8]
 800c71a:	4610      	mov	r0, r2
 800c71c:	4798      	blx	r3
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	330c      	adds	r3, #12
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	4618      	mov	r0, r3
 800c726:	f004 fb45 	bl	8010db4 <_ZNK10UtestShell7getNameEv>
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	3314      	adds	r3, #20
 800c72e:	6879      	ldr	r1, [r7, #4]
 800c730:	4618      	mov	r0, r3
 800c732:	f7fe f944 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	683a      	ldr	r2, [r7, #0]
 800c73a:	61da      	str	r2, [r3, #28]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	3320      	adds	r3, #32
 800c740:	68b9      	ldr	r1, [r7, #8]
 800c742:	4618      	mov	r0, r3
 800c744:	f004 fc07 	bl	8010f56 <_ZNK10UtestShell7getFileEv>
 800c748:	68b8      	ldr	r0, [r7, #8]
 800c74a:	f004 fc13 	bl	8010f74 <_ZNK10UtestShell13getLineNumberEv>
 800c74e:	4602      	mov	r2, r0
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	629a      	str	r2, [r3, #40]	; 0x28
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	332c      	adds	r3, #44	; 0x2c
 800c758:	4905      	ldr	r1, [pc, #20]	; (800c770 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fe f92f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
{
}
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	0802564c 	.word	0x0802564c
 800c770:	08021fd4 	.word	0x08021fd4

0800c774 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800c77e:	4a1e      	ldr	r2, [pc, #120]	; (800c7f8 <_ZN11TestFailureC1ERKS_+0x84>)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	601a      	str	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	1d1a      	adds	r2, r3, #4
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	3304      	adds	r3, #4
 800c78c:	4619      	mov	r1, r3
 800c78e:	4610      	mov	r0, r2
 800c790:	f7fe f969 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f103 020c 	add.w	r2, r3, #12
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	330c      	adds	r3, #12
 800c79e:	4619      	mov	r1, r3
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	f7fe f960 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f103 0214 	add.w	r2, r3, #20
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	3314      	adds	r3, #20
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	f7fe f957 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	69da      	ldr	r2, [r3, #28]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	61da      	str	r2, [r3, #28]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f103 0220 	add.w	r2, r3, #32
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	3320      	adds	r3, #32
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	f7fe f94a 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	629a      	str	r2, [r3, #40]	; 0x28
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	332c      	adds	r3, #44	; 0x2c
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	4610      	mov	r0, r2
 800c7e8:	f7fe f93d 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
{
}
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	0802564c 	.word	0x0802564c

0800c7fc <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	4a10      	ldr	r2, [pc, #64]	; (800c848 <_ZN11TestFailureD1Ev+0x4c>)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	601a      	str	r2, [r3, #0]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	332c      	adds	r3, #44	; 0x2c
 800c80e:	4618      	mov	r0, r3
 800c810:	f7fe fc8d 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	3320      	adds	r3, #32
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fe fc88 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3314      	adds	r3, #20
 800c822:	4618      	mov	r0, r3
 800c824:	f7fe fc83 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	330c      	adds	r3, #12
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7fe fc7e 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	3304      	adds	r3, #4
 800c836:	4618      	mov	r0, r3
 800c838:	f7fe fc79 	bl	800b12e <_ZN12SimpleStringD1Ev>
{
}
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	4618      	mov	r0, r3
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	0802564c 	.word	0x0802564c

0800c84c <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
}
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7ff ffd1 	bl	800c7fc <_ZN11TestFailureD1Ev>
 800c85a:	2134      	movs	r1, #52	; 0x34
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f7fb fcff 	bl	8008260 <_ZdlPvj>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4618      	mov	r0, r3
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
    return fileName_;
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	3314      	adds	r3, #20
 800c87a:	4619      	mov	r1, r3
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7fe f8f2 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
}
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b082      	sub	sp, #8
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	3320      	adds	r3, #32
 800c898:	4619      	mov	r1, r3
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f7fe f8e3 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
}
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
    return testName_;
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	3304      	adds	r3, #4
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f7fe f8d4 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
}
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b082      	sub	sp, #8
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
 800c8ce:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	330c      	adds	r3, #12
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f7fe f8c5 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
}
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	69db      	ldr	r3, [r3, #28]
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800c908:	4618      	mov	r0, r3
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
    return message_;
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	332c      	adds	r3, #44	; 0x2c
 800c922:	4619      	mov	r1, r3
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f7fe f89e 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
}
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b082      	sub	sp, #8
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f103 0220 	add.w	r2, r3, #32
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	3314      	adds	r3, #20
 800c944:	4619      	mov	r1, r3
 800c946:	4610      	mov	r0, r2
 800c948:	f7fe fc42 	bl	800b1d0 <_ZneRK12SimpleStringS1_>
 800c94c:	4603      	mov	r3, r0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3708      	adds	r7, #8
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800c956:	b480      	push	{r7}
 800c958:	b083      	sub	sp, #12
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	69da      	ldr	r2, [r3, #28]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c966:	429a      	cmp	r2, r3
 800c968:	bf34      	ite	cc
 800c96a:	2301      	movcc	r3, #1
 800c96c:	2300      	movcs	r3, #0
 800c96e:	b2db      	uxtb	r3, r3
}
 800c970:	4618      	mov	r0, r3
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800c97c:	b590      	push	{r4, r7, lr}
 800c97e:	b085      	sub	sp, #20
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
 800c988:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f7fe fba2 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800c990:	4604      	mov	r4, r0
 800c992:	6838      	ldr	r0, [r7, #0]
 800c994:	f7fe fb9e 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800c998:	4603      	mov	r3, r0
 800c99a:	68f8      	ldr	r0, [r7, #12]
 800c99c:	4622      	mov	r2, r4
 800c99e:	4903      	ldr	r1, [pc, #12]	; (800c9ac <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800c9a0:	f7ff f8cc 	bl	800bb3c <_Z16StringFromFormatPKcz>
}
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	3714      	adds	r7, #20
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd90      	pop	{r4, r7, pc}
 800c9ac:	08021fe0 	.word	0x08021fe0

0800c9b0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800c9b0:	b590      	push	{r4, r7, lr}
 800c9b2:	b097      	sub	sp, #92	; 0x5c
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
 800c9bc:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800c9be:	494c      	ldr	r1, [pc, #304]	; (800caf0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f7fd fffc 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800c9c6:	2314      	movs	r3, #20
 800c9c8:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800c9ca:	230a      	movs	r3, #10
 800c9cc:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800c9ce:	f107 0320 	add.w	r3, r7, #32
 800c9d2:	220a      	movs	r2, #10
 800c9d4:	4947      	ldr	r1, [pc, #284]	; (800caf4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fe f80c 	bl	800a9f4 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800c9dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9e0:	f107 0120 	add.w	r1, r7, #32
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7fe fc03 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800c9ec:	f107 0318 	add.w	r3, r7, #24
 800c9f0:	f107 0220 	add.w	r2, r7, #32
 800c9f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fe fbfa 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800c9fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fe fb93 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800ca08:	f107 0310 	add.w	r3, r7, #16
 800ca0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca0e:	493a      	ldr	r1, [pc, #232]	; (800caf8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7ff f893 	bl	800bb3c <_Z16StringFromFormatPKcz>

    result += "\n";
 800ca16:	4939      	ldr	r1, [pc, #228]	; (800cafc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f7fe fc17 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800ca1e:	f107 0310 	add.w	r3, r7, #16
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fe fb56 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800ca28:	4604      	mov	r4, r0
 800ca2a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800ca2e:	f107 0118 	add.w	r1, r7, #24
 800ca32:	2314      	movs	r3, #20
 800ca34:	683a      	ldr	r2, [r7, #0]
 800ca36:	f7fe fc83 	bl	800b340 <_ZNK12SimpleString9subStringEjj>
 800ca3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fe fb48 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800ca44:	4603      	mov	r3, r0
 800ca46:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ca4a:	4622      	mov	r2, r4
 800ca4c:	492c      	ldr	r1, [pc, #176]	; (800cb00 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800ca4e:	f7ff f875 	bl	800bb3c <_Z16StringFromFormatPKcz>
 800ca52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ca56:	4619      	mov	r1, r3
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f7fe fbe5 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800ca5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fe fb63 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800ca68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7fe fb5e 	bl	800b12e <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800ca72:	f107 0310 	add.w	r3, r7, #16
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7fe fb38 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	f103 020a 	add.w	r2, r3, #10
 800ca82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ca86:	491b      	ldr	r1, [pc, #108]	; (800caf4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7fd ffb3 	bl	800a9f4 <_ZN12SimpleStringC1EPKcj>
 800ca8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fe fb1e 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ca9e:	4919      	ldr	r1, [pc, #100]	; (800cb04 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7ff f84b 	bl	800bb3c <_Z16StringFromFormatPKcz>
 800caa6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800caaa:	4619      	mov	r1, r3
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f7fe fbbb 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800cab2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fe fb39 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800cabc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7fe fb34 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return result;
 800cac6:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800cac8:	f107 0310 	add.w	r3, r7, #16
 800cacc:	4618      	mov	r0, r3
 800cace:	f7fe fb2e 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800cad2:	f107 0318 	add.w	r3, r7, #24
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7fe fb29 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800cadc:	f107 0320 	add.w	r3, r7, #32
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fe fb24 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return result;
 800cae6:	bf00      	nop
}
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	375c      	adds	r7, #92	; 0x5c
 800caec:	46bd      	mov	sp, r7
 800caee:	bd90      	pop	{r4, r7, pc}
 800caf0:	08022000 	.word	0x08022000
 800caf4:	08022004 	.word	0x08022004
 800caf8:	08022008 	.word	0x08022008
 800cafc:	08022030 	.word	0x08022030
 800cb00:	08022034 	.word	0x08022034
 800cb04:	0802203c 	.word	0x0802203c

0800cb08 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800cb08:	b590      	push	{r4, r7, lr}
 800cb0a:	b087      	sub	sp, #28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800cb14:	491a      	ldr	r1, [pc, #104]	; (800cb80 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f7fd ff51 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f7fe faf5 	bl	800b10c <_ZNK12SimpleString7isEmptyEv>
 800cb22:	4603      	mov	r3, r0
 800cb24:	f083 0301 	eor.w	r3, r3, #1
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d022      	beq.n	800cb74 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800cb2e:	f107 0310 	add.w	r3, r7, #16
 800cb32:	4914      	ldr	r1, [pc, #80]	; (800cb84 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7fd ff42 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800cb3a:	f107 0310 	add.w	r3, r7, #16
 800cb3e:	4619      	mov	r1, r3
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f7fe f800 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 800cb46:	4603      	mov	r3, r0
 800cb48:	f083 0301 	eor.w	r3, r3, #1
 800cb4c:	b2dc      	uxtb	r4, r3
 800cb4e:	f107 0310 	add.w	r3, r7, #16
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7fe faeb 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800cb58:	2c00      	cmp	r4, #0
 800cb5a:	d003      	beq.n	800cb64 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800cb5c:	490a      	ldr	r1, [pc, #40]	; (800cb88 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f7fe fb74 	bl	800b24c <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800cb64:	6879      	ldr	r1, [r7, #4]
 800cb66:	68f8      	ldr	r0, [r7, #12]
 800cb68:	f7fe fb5e 	bl	800b228 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800cb6c:	4907      	ldr	r1, [pc, #28]	; (800cb8c <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f7fe fb6c 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800cb74:	bf00      	nop
}
 800cb76:	68f8      	ldr	r0, [r7, #12]
 800cb78:	371c      	adds	r7, #28
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd90      	pop	{r4, r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	08022000 	.word	0x08022000
 800cb84:	08022044 	.word	0x08022044
 800cb88:	08022050 	.word	0x08022050
 800cb8c:	0802205c 	.word	0x0802205c

0800cb90 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800cb90:	b590      	push	{r4, r7, lr}
 800cb92:	b089      	sub	sp, #36	; 0x24
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
 800cb9c:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	68b9      	ldr	r1, [r7, #8]
 800cba6:	f7ff fda7 	bl	800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cbaa:	4a19      	ldr	r2, [pc, #100]	; (800cc10 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cbb6:	68f9      	ldr	r1, [r7, #12]
 800cbb8:	f107 0310 	add.w	r3, r7, #16
 800cbbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7ff ffa2 	bl	800cb08 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cbc4:	f107 0310 	add.w	r3, r7, #16
 800cbc8:	4619      	mov	r1, r3
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f7fd ff63 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800cbd0:	f107 0310 	add.w	r3, r7, #16
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7fe faaa 	bl	800b12e <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cbe0:	68f9      	ldr	r1, [r7, #12]
 800cbe2:	f107 0018 	add.w	r0, r7, #24
 800cbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbea:	f7ff fec7 	bl	800c97c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800cbee:	f107 0318 	add.w	r3, r7, #24
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f7fe fb17 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800cbfa:	f107 0318 	add.w	r3, r7, #24
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fe fa95 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	4618      	mov	r0, r3
 800cc08:	3724      	adds	r7, #36	; 0x24
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd90      	pop	{r4, r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	08025620 	.word	0x08025620

0800cc14 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800cc14:	b5b0      	push	{r4, r5, r7, lr}
 800cc16:	b094      	sub	sp, #80	; 0x50
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6278      	str	r0, [r7, #36]	; 0x24
 800cc1c:	6239      	str	r1, [r7, #32]
 800cc1e:	61fa      	str	r2, [r7, #28]
 800cc20:	61bb      	str	r3, [r7, #24]
 800cc22:	ed87 0b04 	vstr	d0, [r7, #16]
 800cc26:	ed87 1b02 	vstr	d1, [r7, #8]
 800cc2a:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800cc2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc30:	69bb      	ldr	r3, [r7, #24]
 800cc32:	69fa      	ldr	r2, [r7, #28]
 800cc34:	6a39      	ldr	r1, [r7, #32]
 800cc36:	f7ff fd5f 	bl	800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cc3a:	4a4a      	ldr	r2, [pc, #296]	; (800cd64 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cc46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cc4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7ff ff5a 	bl	800cb08 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cc54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cc58:	4619      	mov	r1, r3
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f7fd ff1b 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800cc60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fe fa62 	bl	800b12e <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cc70:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800cc72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cc76:	2107      	movs	r1, #7
 800cc78:	ed97 0b04 	vldr	d0, [r7, #16]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7fe ff1b 	bl	800bab8 <_Z10StringFromdi>
 800cc82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cc86:	2107      	movs	r1, #7
 800cc88:	ed97 0b02 	vldr	d0, [r7, #8]
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7fe ff13 	bl	800bab8 <_Z10StringFromdi>
 800cc92:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800cc96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cc9a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800cc9e:	4629      	mov	r1, r5
 800cca0:	f7ff fe6c 	bl	800c97c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800cca4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cca8:	4619      	mov	r1, r3
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f7fe fabc 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800ccb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7fe fa3a 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800ccba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7fe fa35 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800ccc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7fe fa30 	bl	800b12e <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800ccce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd0:	332c      	adds	r3, #44	; 0x2c
 800ccd2:	4925      	ldr	r1, [pc, #148]	; (800cd68 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7fe fab9 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800ccda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccdc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cce0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cce4:	2107      	movs	r1, #7
 800cce6:	ed97 0b00 	vldr	d0, [r7]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fe fee4 	bl	800bab8 <_Z10StringFromdi>
 800ccf0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	f7fe fa96 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800ccfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7fe fa14 	bl	800b12e <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800cd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd08:	332c      	adds	r3, #44	; 0x2c
 800cd0a:	4918      	ldr	r1, [pc, #96]	; (800cd6c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fe fa9d 	bl	800b24c <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800cd12:	4b17      	ldr	r3, [pc, #92]	; (800cd70 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	ed97 0b04 	vldr	d0, [r7, #16]
 800cd1a:	4798      	blx	r3
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d10f      	bne.n	800cd42 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800cd22:	4b13      	ldr	r3, [pc, #76]	; (800cd70 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	ed97 0b02 	vldr	d0, [r7, #8]
 800cd2a:	4798      	blx	r3
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d107      	bne.n	800cd42 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800cd32:	4b0f      	ldr	r3, [pc, #60]	; (800cd70 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	ed97 0b00 	vldr	d0, [r7]
 800cd3a:	4798      	blx	r3
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d001      	beq.n	800cd46 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800cd42:	2301      	movs	r3, #1
 800cd44:	e000      	b.n	800cd48 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800cd46:	2300      	movs	r3, #0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d005      	beq.n	800cd58 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800cd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4e:	332c      	adds	r3, #44	; 0x2c
 800cd50:	4908      	ldr	r1, [pc, #32]	; (800cd74 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fe fa7a 	bl	800b24c <_ZN12SimpleStringpLEPKc>
}
 800cd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3750      	adds	r7, #80	; 0x50
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bdb0      	pop	{r4, r5, r7, pc}
 800cd62:	bf00      	nop
 800cd64:	080255f4 	.word	0x080255f4
 800cd68:	08022060 	.word	0x08022060
 800cd6c:	08022078 	.word	0x08022078
 800cd70:	200000e4 	.word	0x200000e4
 800cd74:	0802207c 	.word	0x0802207c

0800cd78 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800cd78:	b590      	push	{r4, r7, lr}
 800cd7a:	b093      	sub	sp, #76	; 0x4c
 800cd7c:	af02      	add	r7, sp, #8
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	607a      	str	r2, [r7, #4]
 800cd84:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	68b9      	ldr	r1, [r7, #8]
 800cd8e:	f7ff fcb3 	bl	800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cd92:	4a4f      	ldr	r2, [pc, #316]	; (800ced0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cd9e:	68f9      	ldr	r1, [r7, #12]
 800cda0:	f107 0320 	add.w	r3, r7, #32
 800cda4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7ff feae 	bl	800cb08 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cdac:	f107 0320 	add.w	r3, r7, #32
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f7fd fe6f 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800cdb8:	f107 0320 	add.w	r3, r7, #32
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7fe f9b6 	bl	800b12e <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800cdc2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cdc4:	f7fe f986 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	f107 0318 	add.w	r3, r7, #24
 800cdce:	4611      	mov	r1, r2
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fe fc47 	bl	800b664 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800cdd6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cdd8:	f7fe f97c 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800cddc:	4602      	mov	r2, r0
 800cdde:	f107 0310 	add.w	r3, r7, #16
 800cde2:	4611      	mov	r1, r2
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7fe fc3d 	bl	800b664 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cdf0:	68f9      	ldr	r1, [r7, #12]
 800cdf2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cdf6:	f107 0310 	add.w	r3, r7, #16
 800cdfa:	f107 0218 	add.w	r2, r7, #24
 800cdfe:	f7ff fdbd 	bl	800c97c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ce02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce06:	4619      	mov	r1, r3
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f7fe fa0d 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800ce0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7fe f98b 	bl	800b12e <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800ce18:	2300      	movs	r3, #0
 800ce1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce1e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ce20:	f7fe fae9 	bl	800b3f6 <_ZNK12SimpleString2atEj>
 800ce24:	4603      	mov	r3, r0
 800ce26:	461c      	mov	r4, r3
 800ce28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce2a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ce2c:	f7fe fae3 	bl	800b3f6 <_ZNK12SimpleString2atEj>
 800ce30:	4603      	mov	r3, r0
 800ce32:	429c      	cmp	r4, r3
 800ce34:	bf0c      	ite	eq
 800ce36:	2301      	moveq	r3, #1
 800ce38:	2300      	movne	r3, #0
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d003      	beq.n	800ce48 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800ce40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce42:	3301      	adds	r3, #1
 800ce44:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce46:	e7e9      	b.n	800ce1c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800ce48:	2300      	movs	r3, #0
 800ce4a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce4c:	f107 0310 	add.w	r3, r7, #16
 800ce50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7fe facf 	bl	800b3f6 <_ZNK12SimpleString2atEj>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	461c      	mov	r4, r3
 800ce5c:	f107 0318 	add.w	r3, r7, #24
 800ce60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fe fac7 	bl	800b3f6 <_ZNK12SimpleString2atEj>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	429c      	cmp	r4, r3
 800ce6c:	bf0c      	ite	eq
 800ce6e:	2301      	moveq	r3, #1
 800ce70:	2300      	movne	r3, #0
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d003      	beq.n	800ce80 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800ce78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce7e:	e7e5      	b.n	800ce4c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ce86:	68f9      	ldr	r1, [r7, #12]
 800ce88:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ce8c:	f107 0210 	add.w	r2, r7, #16
 800ce90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce92:	9300      	str	r3, [sp, #0]
 800ce94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce96:	f7ff fd8b 	bl	800c9b0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800ce9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce9e:	4619      	mov	r1, r3
 800cea0:	4620      	mov	r0, r4
 800cea2:	f7fe f9c1 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800cea6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7fe f93f 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800ceb0:	f107 0310 	add.w	r3, r7, #16
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7fe f93a 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800ceba:	f107 0318 	add.w	r3, r7, #24
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fe f935 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	4618      	mov	r0, r3
 800cec8:	3744      	adds	r7, #68	; 0x44
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd90      	pop	{r4, r7, pc}
 800cece:	bf00      	nop
 800ced0:	080255c8 	.word	0x080255c8

0800ced4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800ced4:	b590      	push	{r4, r7, lr}
 800ced6:	b087      	sub	sp, #28
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]
 800cee0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	68b9      	ldr	r1, [r7, #8]
 800ceea:	f7ff fc05 	bl	800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ceee:	4a1a      	ldr	r2, [pc, #104]	; (800cf58 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cefa:	68f9      	ldr	r1, [r7, #12]
 800cefc:	f107 0310 	add.w	r3, r7, #16
 800cf00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7ff fe00 	bl	800cb08 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cf08:	f107 0310 	add.w	r3, r7, #16
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	4620      	mov	r0, r4
 800cf10:	f7fd fdc1 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800cf14:	f107 0310 	add.w	r3, r7, #16
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7fe f908 	bl	800b12e <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	332c      	adds	r3, #44	; 0x2c
 800cf22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7fe f97f 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	332c      	adds	r3, #44	; 0x2c
 800cf2e:	490b      	ldr	r1, [pc, #44]	; (800cf5c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7fe f98b 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	332c      	adds	r3, #44	; 0x2c
 800cf3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fe f973 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	332c      	adds	r3, #44	; 0x2c
 800cf46:	4906      	ldr	r1, [pc, #24]	; (800cf60 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7fe f97f 	bl	800b24c <_ZN12SimpleStringpLEPKc>
}
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	4618      	mov	r0, r3
 800cf52:	371c      	adds	r7, #28
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd90      	pop	{r4, r7, pc}
 800cf58:	0802559c 	.word	0x0802559c
 800cf5c:	080220a0 	.word	0x080220a0
 800cf60:	080220a4 	.word	0x080220a4

0800cf64 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800cf64:	b5b0      	push	{r4, r5, r7, lr}
 800cf66:	b088      	sub	sp, #32
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	607a      	str	r2, [r7, #4]
 800cf70:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	68b9      	ldr	r1, [r7, #8]
 800cf7a:	f7ff fbbd 	bl	800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cf7e:	4a1c      	ldr	r2, [pc, #112]	; (800cff0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cf8a:	68f9      	ldr	r1, [r7, #12]
 800cf8c:	f107 0310 	add.w	r3, r7, #16
 800cf90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7ff fdb8 	bl	800cb08 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cf98:	f107 0310 	add.w	r3, r7, #16
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	f7fd fd79 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800cfa4:	f107 0310 	add.w	r3, r7, #16
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7fe f8c0 	bl	800b12e <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cfb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cfb6:	f7fe f88d 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800cfba:	4605      	mov	r5, r0
 800cfbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfbe:	f7fe f889 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	f107 0018 	add.w	r0, r7, #24
 800cfc8:	462a      	mov	r2, r5
 800cfca:	490a      	ldr	r1, [pc, #40]	; (800cff4 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800cfcc:	f7fe fdb6 	bl	800bb3c <_Z16StringFromFormatPKcz>
 800cfd0:	f107 0318 	add.w	r3, r7, #24
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f7fe f926 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800cfdc:	f107 0318 	add.w	r3, r7, #24
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fe f8a4 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3720      	adds	r7, #32
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bdb0      	pop	{r4, r5, r7, pc}
 800cff0:	08025570 	.word	0x08025570
 800cff4:	080220b0 	.word	0x080220b0

0800cff8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800cff8:	b590      	push	{r4, r7, lr}
 800cffa:	b087      	sub	sp, #28
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
 800d004:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d006:	68f8      	ldr	r0, [r7, #12]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	68b9      	ldr	r1, [r7, #8]
 800d00e:	f7ff fb73 	bl	800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d012:	4a1a      	ldr	r2, [pc, #104]	; (800d07c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d01e:	68f9      	ldr	r1, [r7, #12]
 800d020:	f107 0310 	add.w	r3, r7, #16
 800d024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d026:	4618      	mov	r0, r3
 800d028:	f7ff fd6e 	bl	800cb08 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d02c:	f107 0310 	add.w	r3, r7, #16
 800d030:	4619      	mov	r1, r3
 800d032:	4620      	mov	r0, r4
 800d034:	f7fd fd2f 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800d038:	f107 0310 	add.w	r3, r7, #16
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7fe f876 	bl	800b12e <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	332c      	adds	r3, #44	; 0x2c
 800d046:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fe f8ed 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	332c      	adds	r3, #44	; 0x2c
 800d052:	490b      	ldr	r1, [pc, #44]	; (800d080 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800d054:	4618      	mov	r0, r3
 800d056:	f7fe f8f9 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	332c      	adds	r3, #44	; 0x2c
 800d05e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d060:	4618      	mov	r0, r3
 800d062:	f7fe f8e1 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	332c      	adds	r3, #44	; 0x2c
 800d06a:	4906      	ldr	r1, [pc, #24]	; (800d084 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7fe f8ed 	bl	800b24c <_ZN12SimpleStringpLEPKc>
}
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	4618      	mov	r0, r3
 800d076:	371c      	adds	r7, #28
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd90      	pop	{r4, r7, pc}
 800d07c:	08025544 	.word	0x08025544
 800d080:	080220a0 	.word	0x080220a0
 800d084:	080220a4 	.word	0x080220a4

0800d088 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
 800d094:	603b      	str	r3, [r7, #0]
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	68b9      	ldr	r1, [r7, #8]
 800d09e:	f7ff fb2b 	bl	800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d0a2:	4a07      	ldr	r2, [pc, #28]	; (800d0c0 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	332c      	adds	r3, #44	; 0x2c
 800d0ac:	69b9      	ldr	r1, [r7, #24]
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fd fcf1 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
}
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	08025200 	.word	0x08025200

0800d0c4 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800d0c4:	b590      	push	{r4, r7, lr}
 800d0c6:	b09d      	sub	sp, #116	; 0x74
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
 800d0d0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	68b9      	ldr	r1, [r7, #8]
 800d0da:	f7ff fb0d 	bl	800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d0de:	4a5d      	ldr	r2, [pc, #372]	; (800d254 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d0ea:	68f9      	ldr	r1, [r7, #12]
 800d0ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d0f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7ff fd07 	bl	800cb08 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d0fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d0fe:	4619      	mov	r1, r3
 800d100:	4620      	mov	r0, r4
 800d102:	f7fd fcc8 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800d106:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fe f80f 	bl	800b12e <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800d110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d114:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fe fae1 	bl	800b6e0 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800d11e:	f107 0320 	add.w	r3, r7, #32
 800d122:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d126:	4618      	mov	r0, r3
 800d128:	f7fe fada 	bl	800b6e0 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800d12c:	f107 0120 	add.w	r1, r7, #32
 800d130:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d134:	2220      	movs	r2, #32
 800d136:	4618      	mov	r0, r3
 800d138:	f7fe f8b6 	bl	800b2a8 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d13c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d140:	4945      	ldr	r1, [pc, #276]	; (800d258 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800d142:	4618      	mov	r0, r3
 800d144:	f7fd fc3b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800d148:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d14c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d150:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d154:	4618      	mov	r0, r3
 800d156:	f7fe f84c 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800d15a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d15e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d162:	4618      	mov	r0, r3
 800d164:	f7fe fbd2 	bl	800b90c <_Z30BracketsFormattedHexStringFroml>
 800d168:	f107 0318 	add.w	r3, r7, #24
 800d16c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d170:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d174:	4618      	mov	r0, r3
 800d176:	f7fe f83c 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800d17a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fd ffd5 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800d184:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d188:	4618      	mov	r0, r3
 800d18a:	f7fd ffd0 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800d18e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d192:	4618      	mov	r0, r3
 800d194:	f7fd ffcb 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d198:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d19c:	492e      	ldr	r1, [pc, #184]	; (800d258 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fd fc0d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800d1a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d1a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d1ac:	f107 0120 	add.w	r1, r7, #32
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7fe f81e 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800d1b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d1ba:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fe fba4 	bl	800b90c <_Z30BracketsFormattedHexStringFroml>
 800d1c4:	f107 0310 	add.w	r3, r7, #16
 800d1c8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d1cc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7fe f80e 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800d1d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fd ffa7 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800d1e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7fd ffa2 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800d1ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7fd ff9d 	bl	800b12e <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d1fa:	68f9      	ldr	r1, [r7, #12]
 800d1fc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800d200:	f107 0318 	add.w	r3, r7, #24
 800d204:	f107 0210 	add.w	r2, r7, #16
 800d208:	f7ff fbb8 	bl	800c97c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d20c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d210:	4619      	mov	r1, r3
 800d212:	4620      	mov	r0, r4
 800d214:	f7fe f808 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800d218:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fd ff86 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d222:	f107 0310 	add.w	r3, r7, #16
 800d226:	4618      	mov	r0, r3
 800d228:	f7fd ff81 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d22c:	f107 0318 	add.w	r3, r7, #24
 800d230:	4618      	mov	r0, r3
 800d232:	f7fd ff7c 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800d236:	f107 0320 	add.w	r3, r7, #32
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7fd ff77 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800d240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d244:	4618      	mov	r0, r3
 800d246:	f7fd ff72 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	4618      	mov	r0, r3
 800d24e:	3774      	adds	r7, #116	; 0x74
 800d250:	46bd      	mov	sp, r7
 800d252:	bd90      	pop	{r4, r7, pc}
 800d254:	08025518 	.word	0x08025518
 800d258:	08022004 	.word	0x08022004

0800d25c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800d25c:	b590      	push	{r4, r7, lr}
 800d25e:	b09d      	sub	sp, #116	; 0x74
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	607a      	str	r2, [r7, #4]
 800d268:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d26a:	68f8      	ldr	r0, [r7, #12]
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	68b9      	ldr	r1, [r7, #8]
 800d272:	f7ff fa41 	bl	800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d276:	4a5d      	ldr	r2, [pc, #372]	; (800d3ec <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d282:	68f9      	ldr	r1, [r7, #12]
 800d284:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d288:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7ff fc3b 	bl	800cb08 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d292:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d296:	4619      	mov	r1, r3
 800d298:	4620      	mov	r0, r4
 800d29a:	f7fd fbfc 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800d29e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fd ff43 	bl	800b12e <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800d2a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d2ac:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7fe fc7d 	bl	800bbb0 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800d2b6:	f107 0320 	add.w	r3, r7, #32
 800d2ba:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fe fc76 	bl	800bbb0 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800d2c4:	f107 0120 	add.w	r1, r7, #32
 800d2c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d2cc:	2220      	movs	r2, #32
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fd ffea 	bl	800b2a8 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d2d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d2d8:	4945      	ldr	r1, [pc, #276]	; (800d3f0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7fd fb6f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800d2e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d2e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d2e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7fd ff80 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800d2f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d2f6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7fe fb22 	bl	800b944 <_Z30BracketsFormattedHexStringFromm>
 800d300:	f107 0318 	add.w	r3, r7, #24
 800d304:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d308:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7fd ff70 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800d312:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d316:	4618      	mov	r0, r3
 800d318:	f7fd ff09 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800d31c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d320:	4618      	mov	r0, r3
 800d322:	f7fd ff04 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800d326:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fd feff 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d330:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d334:	492e      	ldr	r1, [pc, #184]	; (800d3f0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800d336:	4618      	mov	r0, r3
 800d338:	f7fd fb41 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800d33c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d340:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d344:	f107 0120 	add.w	r1, r7, #32
 800d348:	4618      	mov	r0, r3
 800d34a:	f7fd ff52 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800d34e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d352:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d356:	4618      	mov	r0, r3
 800d358:	f7fe faf4 	bl	800b944 <_Z30BracketsFormattedHexStringFromm>
 800d35c:	f107 0310 	add.w	r3, r7, #16
 800d360:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d364:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d368:	4618      	mov	r0, r3
 800d36a:	f7fd ff42 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800d36e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d372:	4618      	mov	r0, r3
 800d374:	f7fd fedb 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800d378:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7fd fed6 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800d382:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d386:	4618      	mov	r0, r3
 800d388:	f7fd fed1 	bl	800b12e <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d392:	68f9      	ldr	r1, [r7, #12]
 800d394:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800d398:	f107 0318 	add.w	r3, r7, #24
 800d39c:	f107 0210 	add.w	r2, r7, #16
 800d3a0:	f7ff faec 	bl	800c97c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d3a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f7fd ff3c 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800d3b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7fd feba 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d3ba:	f107 0310 	add.w	r3, r7, #16
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7fd feb5 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d3c4:	f107 0318 	add.w	r3, r7, #24
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fd feb0 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800d3ce:	f107 0320 	add.w	r3, r7, #32
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fd feab 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800d3d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7fd fea6 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3774      	adds	r7, #116	; 0x74
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd90      	pop	{r4, r7, pc}
 800d3ec:	080254ec 	.word	0x080254ec
 800d3f0:	08022004 	.word	0x08022004

0800d3f4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800d3f4:	b590      	push	{r4, r7, lr}
 800d3f6:	b09d      	sub	sp, #116	; 0x74
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	607a      	str	r2, [r7, #4]
 800d400:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	68b9      	ldr	r1, [r7, #8]
 800d40a:	f7ff f975 	bl	800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d40e:	4a5f      	ldr	r2, [pc, #380]	; (800d58c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d41a:	68f9      	ldr	r1, [r7, #12]
 800d41c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d420:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d424:	4618      	mov	r0, r3
 800d426:	f7ff fb6f 	bl	800cb08 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d42a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d42e:	4619      	mov	r1, r3
 800d430:	4620      	mov	r0, r4
 800d432:	f7fd fb30 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800d436:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d43a:	4618      	mov	r0, r3
 800d43c:	f7fd fe77 	bl	800b12e <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800d440:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800d444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d448:	4611      	mov	r1, r2
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe f936 	bl	800b6bc <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800d450:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800d454:	f107 0320 	add.w	r3, r7, #32
 800d458:	4611      	mov	r1, r2
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fe f92e 	bl	800b6bc <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800d460:	f107 0120 	add.w	r1, r7, #32
 800d464:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d468:	2220      	movs	r2, #32
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fd ff1c 	bl	800b2a8 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d470:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d474:	4946      	ldr	r1, [pc, #280]	; (800d590 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800d476:	4618      	mov	r0, r3
 800d478:	f7fd faa1 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800d47c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d480:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d484:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d488:	4618      	mov	r0, r3
 800d48a:	f7fd feb2 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800d48e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d492:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800d496:	4611      	mov	r1, r2
 800d498:	4618      	mov	r0, r3
 800d49a:	f7fe fa6f 	bl	800b97c <_Z30BracketsFormattedHexStringFroma>
 800d49e:	f107 0318 	add.w	r3, r7, #24
 800d4a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d4a6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fd fea1 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800d4b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7fd fe3a 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800d4ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fd fe35 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800d4c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7fd fe30 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d4ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d4d2:	492f      	ldr	r1, [pc, #188]	; (800d590 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7fd fa72 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800d4da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d4de:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d4e2:	f107 0120 	add.w	r1, r7, #32
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7fd fe83 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800d4ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d4f0:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800d4f4:	4611      	mov	r1, r2
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fe fa40 	bl	800b97c <_Z30BracketsFormattedHexStringFroma>
 800d4fc:	f107 0310 	add.w	r3, r7, #16
 800d500:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d504:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d508:	4618      	mov	r0, r3
 800d50a:	f7fd fe72 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 800d50e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d512:	4618      	mov	r0, r3
 800d514:	f7fd fe0b 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800d518:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7fd fe06 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800d522:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d526:	4618      	mov	r0, r3
 800d528:	f7fd fe01 	bl	800b12e <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d532:	68f9      	ldr	r1, [r7, #12]
 800d534:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800d538:	f107 0318 	add.w	r3, r7, #24
 800d53c:	f107 0210 	add.w	r2, r7, #16
 800d540:	f7ff fa1c 	bl	800c97c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d544:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d548:	4619      	mov	r1, r3
 800d54a:	4620      	mov	r0, r4
 800d54c:	f7fd fe6c 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800d550:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d554:	4618      	mov	r0, r3
 800d556:	f7fd fdea 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d55a:	f107 0310 	add.w	r3, r7, #16
 800d55e:	4618      	mov	r0, r3
 800d560:	f7fd fde5 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d564:	f107 0318 	add.w	r3, r7, #24
 800d568:	4618      	mov	r0, r3
 800d56a:	f7fd fde0 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800d56e:	f107 0320 	add.w	r3, r7, #32
 800d572:	4618      	mov	r0, r3
 800d574:	f7fd fddb 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800d578:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7fd fdd6 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	4618      	mov	r0, r3
 800d586:	3774      	adds	r7, #116	; 0x74
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd90      	pop	{r4, r7, pc}
 800d58c:	080254c0 	.word	0x080254c0
 800d590:	08022004 	.word	0x08022004

0800d594 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800d594:	b590      	push	{r4, r7, lr}
 800d596:	b093      	sub	sp, #76	; 0x4c
 800d598:	af02      	add	r7, sp, #8
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	607a      	str	r2, [r7, #4]
 800d5a0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	68b9      	ldr	r1, [r7, #8]
 800d5aa:	f7ff f8a5 	bl	800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d5ae:	4a4a      	ldr	r2, [pc, #296]	; (800d6d8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d5ba:	68f9      	ldr	r1, [r7, #12]
 800d5bc:	f107 0320 	add.w	r3, r7, #32
 800d5c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7ff faa0 	bl	800cb08 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d5c8:	f107 0320 	add.w	r3, r7, #32
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	f7fd fa61 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800d5d4:	f107 0320 	add.w	r3, r7, #32
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7fd fda8 	bl	800b12e <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800d5de:	f107 0318 	add.w	r3, r7, #24
 800d5e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7fe f83d 	bl	800b664 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800d5ea:	f107 0310 	add.w	r3, r7, #16
 800d5ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7fe f837 	bl	800b664 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d5fc:	68f9      	ldr	r1, [r7, #12]
 800d5fe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d602:	f107 0310 	add.w	r3, r7, #16
 800d606:	f107 0218 	add.w	r2, r7, #24
 800d60a:	f7ff f9b7 	bl	800c97c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d60e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d612:	4619      	mov	r1, r3
 800d614:	4620      	mov	r0, r4
 800d616:	f7fd fe07 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800d61a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fd fd85 	bl	800b12e <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800d624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d626:	2b00      	cmp	r3, #0
 800d628:	d046      	beq.n	800d6b8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800d62a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d043      	beq.n	800d6b8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800d630:	2300      	movs	r3, #0
 800d632:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d634:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d638:	4413      	add	r3, r2
 800d63a:	781a      	ldrb	r2, [r3, #0]
 800d63c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d640:	440b      	add	r3, r1
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	429a      	cmp	r2, r3
 800d646:	d103      	bne.n	800d650 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800d648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d64a:	3301      	adds	r3, #1
 800d64c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d64e:	e7f1      	b.n	800d634 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800d650:	2300      	movs	r3, #0
 800d652:	63bb      	str	r3, [r7, #56]	; 0x38
 800d654:	f107 0310 	add.w	r3, r7, #16
 800d658:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fd fecb 	bl	800b3f6 <_ZNK12SimpleString2atEj>
 800d660:	4603      	mov	r3, r0
 800d662:	461c      	mov	r4, r3
 800d664:	f107 0318 	add.w	r3, r7, #24
 800d668:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fd fec3 	bl	800b3f6 <_ZNK12SimpleString2atEj>
 800d670:	4603      	mov	r3, r0
 800d672:	429c      	cmp	r4, r3
 800d674:	bf0c      	ite	eq
 800d676:	2301      	moveq	r3, #1
 800d678:	2300      	movne	r3, #0
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d003      	beq.n	800d688 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800d680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d682:	3301      	adds	r3, #1
 800d684:	63bb      	str	r3, [r7, #56]	; 0x38
 800d686:	e7e5      	b.n	800d654 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d68e:	68f9      	ldr	r1, [r7, #12]
 800d690:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d694:	f107 0210 	add.w	r2, r7, #16
 800d698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d69a:	9300      	str	r3, [sp, #0]
 800d69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69e:	f7ff f987 	bl	800c9b0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800d6a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f7fd fdbd 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800d6ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7fd fd3b 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800d6b8:	f107 0310 	add.w	r3, r7, #16
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7fd fd36 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800d6c2:	f107 0318 	add.w	r3, r7, #24
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7fd fd31 	bl	800b12e <_ZN12SimpleStringD1Ev>
    }
}
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3744      	adds	r7, #68	; 0x44
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd90      	pop	{r4, r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	08025494 	.word	0x08025494

0800d6dc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800d6dc:	b590      	push	{r4, r7, lr}
 800d6de:	b093      	sub	sp, #76	; 0x4c
 800d6e0:	af02      	add	r7, sp, #8
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
 800d6e8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	68b9      	ldr	r1, [r7, #8]
 800d6f2:	f7ff f801 	bl	800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d6f6:	4a55      	ldr	r2, [pc, #340]	; (800d84c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d702:	68f9      	ldr	r1, [r7, #12]
 800d704:	f107 0320 	add.w	r3, r7, #32
 800d708:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7ff f9fc 	bl	800cb08 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d710:	f107 0320 	add.w	r3, r7, #32
 800d714:	4619      	mov	r1, r3
 800d716:	4620      	mov	r0, r4
 800d718:	f7fd f9bd 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800d71c:	f107 0320 	add.w	r3, r7, #32
 800d720:	4618      	mov	r0, r3
 800d722:	f7fd fd04 	bl	800b12e <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800d726:	f107 0318 	add.w	r3, r7, #24
 800d72a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7fd ff99 	bl	800b664 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800d732:	f107 0310 	add.w	r3, r7, #16
 800d736:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fd ff93 	bl	800b664 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d744:	68f9      	ldr	r1, [r7, #12]
 800d746:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d74a:	f107 0310 	add.w	r3, r7, #16
 800d74e:	f107 0218 	add.w	r2, r7, #24
 800d752:	f7ff f913 	bl	800c97c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d75a:	4619      	mov	r1, r3
 800d75c:	4620      	mov	r0, r4
 800d75e:	f7fd fd63 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800d762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d766:	4618      	mov	r0, r3
 800d768:	f7fd fce1 	bl	800b12e <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800d76c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d05c      	beq.n	800d82c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800d772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d774:	2b00      	cmp	r3, #0
 800d776:	d059      	beq.n	800d82c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800d778:	2300      	movs	r3, #0
 800d77a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d77c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d780:	4413      	add	r3, r2
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	4618      	mov	r0, r3
 800d786:	f7fd f824 	bl	800a7d2 <_ZN12SimpleString7ToLowerEc>
 800d78a:	4603      	mov	r3, r0
 800d78c:	461c      	mov	r4, r3
 800d78e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d792:	4413      	add	r3, r2
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	4618      	mov	r0, r3
 800d798:	f7fd f81b 	bl	800a7d2 <_ZN12SimpleString7ToLowerEc>
 800d79c:	4603      	mov	r3, r0
 800d79e:	429c      	cmp	r4, r3
 800d7a0:	bf0c      	ite	eq
 800d7a2:	2301      	moveq	r3, #1
 800d7a4:	2300      	movne	r3, #0
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d003      	beq.n	800d7b4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800d7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7b2:	e7e3      	b.n	800d77c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800d7b8:	f107 0310 	add.w	r3, r7, #16
 800d7bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fd fe19 	bl	800b3f6 <_ZNK12SimpleString2atEj>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fd f803 	bl	800a7d2 <_ZN12SimpleString7ToLowerEc>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	461c      	mov	r4, r3
 800d7d0:	f107 0318 	add.w	r3, r7, #24
 800d7d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7fd fe0d 	bl	800b3f6 <_ZNK12SimpleString2atEj>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fc fff7 	bl	800a7d2 <_ZN12SimpleString7ToLowerEc>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	429c      	cmp	r4, r3
 800d7e8:	bf0c      	ite	eq
 800d7ea:	2301      	moveq	r3, #1
 800d7ec:	2300      	movne	r3, #0
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d003      	beq.n	800d7fc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800d7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d7fa:	e7dd      	b.n	800d7b8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d802:	68f9      	ldr	r1, [r7, #12]
 800d804:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d808:	f107 0210 	add.w	r2, r7, #16
 800d80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d80e:	9300      	str	r3, [sp, #0]
 800d810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d812:	f7ff f8cd 	bl	800c9b0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800d816:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d81a:	4619      	mov	r1, r3
 800d81c:	4620      	mov	r0, r4
 800d81e:	f7fd fd03 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800d822:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d826:	4618      	mov	r0, r3
 800d828:	f7fd fc81 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800d82c:	f107 0310 	add.w	r3, r7, #16
 800d830:	4618      	mov	r0, r3
 800d832:	f7fd fc7c 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800d836:	f107 0318 	add.w	r3, r7, #24
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7fd fc77 	bl	800b12e <_ZN12SimpleStringD1Ev>
    }
}
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	4618      	mov	r0, r3
 800d844:	3744      	adds	r7, #68	; 0x44
 800d846:	46bd      	mov	sp, r7
 800d848:	bd90      	pop	{r4, r7, pc}
 800d84a:	bf00      	nop
 800d84c:	08025468 	.word	0x08025468

0800d850 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800d850:	b5b0      	push	{r4, r5, r7, lr}
 800d852:	b092      	sub	sp, #72	; 0x48
 800d854:	af02      	add	r7, sp, #8
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
 800d85c:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800d85e:	68f8      	ldr	r0, [r7, #12]
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	68b9      	ldr	r1, [r7, #8]
 800d866:	f7fe ff47 	bl	800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d86a:	4a40      	ldr	r2, [pc, #256]	; (800d96c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d876:	68f9      	ldr	r1, [r7, #12]
 800d878:	f107 031c 	add.w	r3, r7, #28
 800d87c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d87e:	4618      	mov	r0, r3
 800d880:	f7ff f942 	bl	800cb08 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d884:	f107 031c 	add.w	r3, r7, #28
 800d888:	4619      	mov	r1, r3
 800d88a:	4620      	mov	r0, r4
 800d88c:	f7fd f903 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800d890:	f107 031c 	add.w	r3, r7, #28
 800d894:	4618      	mov	r0, r3
 800d896:	f7fd fc4a 	bl	800b12e <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800d89a:	f107 0314 	add.w	r3, r7, #20
 800d89e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fe fa4c 	bl	800bd40 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d8ae:	68fd      	ldr	r5, [r7, #12]
 800d8b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d8b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7fe fa41 	bl	800bd40 <_Z22StringFromBinaryOrNullPKhj>
 800d8be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d8c2:	f107 0314 	add.w	r3, r7, #20
 800d8c6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d8ca:	4629      	mov	r1, r5
 800d8cc:	f7ff f856 	bl	800c97c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d8d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	f7fd fca6 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800d8dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7fd fc24 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800d8e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7fd fc1f 	bl	800b12e <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800d8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d02f      	beq.n	800d956 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800d8f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d02c      	beq.n	800d956 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d900:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d904:	4413      	add	r3, r2
 800d906:	781a      	ldrb	r2, [r3, #0]
 800d908:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d90c:	440b      	add	r3, r1
 800d90e:	781b      	ldrb	r3, [r3, #0]
 800d910:	429a      	cmp	r2, r3
 800d912:	d103      	bne.n	800d91c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800d914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d916:	3301      	adds	r3, #1
 800d918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d91a:	e7f1      	b.n	800d900 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d922:	68f9      	ldr	r1, [r7, #12]
 800d924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d926:	4613      	mov	r3, r2
 800d928:	005b      	lsls	r3, r3, #1
 800d92a:	4413      	add	r3, r2
 800d92c:	1c5d      	adds	r5, r3, #1
 800d92e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800d932:	f107 0214 	add.w	r2, r7, #20
 800d936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d938:	9300      	str	r3, [sp, #0]
 800d93a:	462b      	mov	r3, r5
 800d93c:	f7ff f838 	bl	800c9b0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800d940:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d944:	4619      	mov	r1, r3
 800d946:	4620      	mov	r0, r4
 800d948:	f7fd fc6e 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800d94c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d950:	4618      	mov	r0, r3
 800d952:	f7fd fbec 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800d956:	f107 0314 	add.w	r3, r7, #20
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7fd fbe7 	bl	800b12e <_ZN12SimpleStringD1Ev>
	}
}
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	4618      	mov	r0, r3
 800d964:	3740      	adds	r7, #64	; 0x40
 800d966:	46bd      	mov	sp, r7
 800d968:	bdb0      	pop	{r4, r5, r7, pc}
 800d96a:	bf00      	nop
 800d96c:	0802543c 	.word	0x0802543c

0800d970 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800d970:	b5b0      	push	{r4, r5, r7, lr}
 800d972:	b08c      	sub	sp, #48	; 0x30
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	607a      	str	r2, [r7, #4]
 800d97c:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	68b9      	ldr	r1, [r7, #8]
 800d986:	f7fe feb7 	bl	800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d98a:	4a26      	ldr	r2, [pc, #152]	; (800da24 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d996:	68f9      	ldr	r1, [r7, #12]
 800d998:	f107 0310 	add.w	r3, r7, #16
 800d99c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7ff f8b2 	bl	800cb08 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d9a4:	f107 0310 	add.w	r3, r7, #16
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	f7fd f873 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800d9b0:	f107 0310 	add.w	r3, r7, #16
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7fd fbba 	bl	800b12e <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d9c0:	68fd      	ldr	r5, [r7, #12]
 800d9c2:	f107 0020 	add.w	r0, r7, #32
 800d9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d9cc:	f7fe fa24 	bl	800be18 <_Z20StringFromMaskedBitsmmj>
 800d9d0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d9d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9da:	f7fe fa1d 	bl	800be18 <_Z20StringFromMaskedBitsmmj>
 800d9de:	f107 0018 	add.w	r0, r7, #24
 800d9e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d9e6:	f107 0220 	add.w	r2, r7, #32
 800d9ea:	4629      	mov	r1, r5
 800d9ec:	f7fe ffc6 	bl	800c97c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d9f0:	f107 0318 	add.w	r3, r7, #24
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f7fd fc16 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800d9fc:	f107 0318 	add.w	r3, r7, #24
 800da00:	4618      	mov	r0, r3
 800da02:	f7fd fb94 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800da06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fd fb8f 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800da10:	f107 0320 	add.w	r3, r7, #32
 800da14:	4618      	mov	r0, r3
 800da16:	f7fd fb8a 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	4618      	mov	r0, r3
 800da1e:	3730      	adds	r7, #48	; 0x30
 800da20:	46bd      	mov	sp, r7
 800da22:	bdb0      	pop	{r4, r5, r7, pc}
 800da24:	08025410 	.word	0x08025410

0800da28 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800da28:	b590      	push	{r4, r7, lr}
 800da2a:	b089      	sub	sp, #36	; 0x24
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
 800da34:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800da36:	68f8      	ldr	r0, [r7, #12]
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	687a      	ldr	r2, [r7, #4]
 800da3c:	68b9      	ldr	r1, [r7, #8]
 800da3e:	f7fe fe5b 	bl	800c6f8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800da42:	4a1a      	ldr	r2, [pc, #104]	; (800daac <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800da4e:	68f9      	ldr	r1, [r7, #12]
 800da50:	f107 0310 	add.w	r3, r7, #16
 800da54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da56:	4618      	mov	r0, r3
 800da58:	f7ff f856 	bl	800cb08 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800da5c:	f107 0310 	add.w	r3, r7, #16
 800da60:	4619      	mov	r1, r3
 800da62:	4620      	mov	r0, r4
 800da64:	f7fd f817 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800da68:	f107 0310 	add.w	r3, r7, #16
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fd fb5e 	bl	800b12e <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800da78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da7a:	f7fd fb2b 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800da7e:	4602      	mov	r2, r0
 800da80:	f107 0318 	add.w	r3, r7, #24
 800da84:	490a      	ldr	r1, [pc, #40]	; (800dab0 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800da86:	4618      	mov	r0, r3
 800da88:	f7fe f858 	bl	800bb3c <_Z16StringFromFormatPKcz>
 800da8c:	f107 0318 	add.w	r3, r7, #24
 800da90:	4619      	mov	r1, r3
 800da92:	4620      	mov	r0, r4
 800da94:	f7fd fbc8 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800da98:	f107 0318 	add.w	r3, r7, #24
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fd fb46 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	4618      	mov	r0, r3
 800daa6:	3724      	adds	r7, #36	; 0x24
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd90      	pop	{r4, r7, pc}
 800daac:	080253e4 	.word	0x080253e4
 800dab0:	080220d4 	.word	0x080220d4

0800dab4 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	4a05      	ldr	r2, [pc, #20]	; (800dad4 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	601a      	str	r2, [r3, #0]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7fe fe99 	bl	800c7fc <_ZN11TestFailureD1Ev>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4618      	mov	r0, r3
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	080253e4 	.word	0x080253e4

0800dad8 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f7ff ffe7 	bl	800dab4 <_ZN25FeatureUnsupportedFailureD1Ev>
 800dae6:	2134      	movs	r1, #52	; 0x34
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f7fa fbb9 	bl	8008260 <_ZdlPvj>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4618      	mov	r0, r3
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	4a05      	ldr	r2, [pc, #20]	; (800db18 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	601a      	str	r2, [r3, #0]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fe fe77 	bl	800c7fc <_ZN11TestFailureD1Ev>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4618      	mov	r0, r3
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	08025410 	.word	0x08025410

0800db1c <_ZN16BitsEqualFailureD0Ev>:
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7ff ffe7 	bl	800daf8 <_ZN16BitsEqualFailureD1Ev>
 800db2a:	2134      	movs	r1, #52	; 0x34
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f7fa fb97 	bl	8008260 <_ZdlPvj>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	4618      	mov	r0, r3
 800db36:	3708      	adds	r7, #8
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	4a05      	ldr	r2, [pc, #20]	; (800db5c <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	601a      	str	r2, [r3, #0]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fe fe55 	bl	800c7fc <_ZN11TestFailureD1Ev>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	4618      	mov	r0, r3
 800db56:	3708      	adds	r7, #8
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	0802543c 	.word	0x0802543c

0800db60 <_ZN18BinaryEqualFailureD0Ev>:
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7ff ffe7 	bl	800db3c <_ZN18BinaryEqualFailureD1Ev>
 800db6e:	2134      	movs	r1, #52	; 0x34
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f7fa fb75 	bl	8008260 <_ZdlPvj>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	4618      	mov	r0, r3
 800db7a:	3708      	adds	r7, #8
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	4a05      	ldr	r2, [pc, #20]	; (800dba0 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	601a      	str	r2, [r3, #0]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	4618      	mov	r0, r3
 800db92:	f7fe fe33 	bl	800c7fc <_ZN11TestFailureD1Ev>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	4618      	mov	r0, r3
 800db9a:	3708      	adds	r7, #8
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	08025468 	.word	0x08025468

0800dba4 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f7ff ffe7 	bl	800db80 <_ZN24StringEqualNoCaseFailureD1Ev>
 800dbb2:	2134      	movs	r1, #52	; 0x34
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f7fa fb53 	bl	8008260 <_ZdlPvj>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	4a05      	ldr	r2, [pc, #20]	; (800dbe4 <_ZN18StringEqualFailureD1Ev+0x20>)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	601a      	str	r2, [r3, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7fe fe11 	bl	800c7fc <_ZN11TestFailureD1Ev>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	08025494 	.word	0x08025494

0800dbe8 <_ZN18StringEqualFailureD0Ev>:
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7ff ffe7 	bl	800dbc4 <_ZN18StringEqualFailureD1Ev>
 800dbf6:	2134      	movs	r1, #52	; 0x34
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f7fa fb31 	bl	8008260 <_ZdlPvj>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4618      	mov	r0, r3
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	4a05      	ldr	r2, [pc, #20]	; (800dc28 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	601a      	str	r2, [r3, #0]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7fe fdef 	bl	800c7fc <_ZN11TestFailureD1Ev>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4618      	mov	r0, r3
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	080254c0 	.word	0x080254c0

0800dc2c <_ZN23SignedBytesEqualFailureD0Ev>:
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f7ff ffe7 	bl	800dc08 <_ZN23SignedBytesEqualFailureD1Ev>
 800dc3a:	2134      	movs	r1, #52	; 0x34
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f7fa fb0f 	bl	8008260 <_ZdlPvj>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	4618      	mov	r0, r3
 800dc46:	3708      	adds	r7, #8
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	4a05      	ldr	r2, [pc, #20]	; (800dc6c <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	601a      	str	r2, [r3, #0]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7fe fdcd 	bl	800c7fc <_ZN11TestFailureD1Ev>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	4618      	mov	r0, r3
 800dc66:	3708      	adds	r7, #8
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}
 800dc6c:	080254ec 	.word	0x080254ec

0800dc70 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f7ff ffe7 	bl	800dc4c <_ZN25UnsignedLongsEqualFailureD1Ev>
 800dc7e:	2134      	movs	r1, #52	; 0x34
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f7fa faed 	bl	8008260 <_ZdlPvj>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3708      	adds	r7, #8
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	4a05      	ldr	r2, [pc, #20]	; (800dcb0 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	601a      	str	r2, [r3, #0]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7fe fdab 	bl	800c7fc <_ZN11TestFailureD1Ev>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3708      	adds	r7, #8
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	08025518 	.word	0x08025518

0800dcb4 <_ZN17LongsEqualFailureD0Ev>:
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f7ff ffe7 	bl	800dc90 <_ZN17LongsEqualFailureD1Ev>
 800dcc2:	2134      	movs	r1, #52	; 0x34
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f7fa facb 	bl	8008260 <_ZdlPvj>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	4618      	mov	r0, r3
 800dcce:	3708      	adds	r7, #8
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	4a05      	ldr	r2, [pc, #20]	; (800dcf4 <_ZN12CheckFailureD1Ev+0x20>)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	601a      	str	r2, [r3, #0]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7fe fd89 	bl	800c7fc <_ZN11TestFailureD1Ev>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	4618      	mov	r0, r3
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	08025544 	.word	0x08025544

0800dcf8 <_ZN12CheckFailureD0Ev>:
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f7ff ffe7 	bl	800dcd4 <_ZN12CheckFailureD1Ev>
 800dd06:	2134      	movs	r1, #52	; 0x34
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f7fa faa9 	bl	8008260 <_ZdlPvj>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	4618      	mov	r0, r3
 800dd12:	3708      	adds	r7, #8
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	4a05      	ldr	r2, [pc, #20]	; (800dd38 <_ZN15ContainsFailureD1Ev+0x20>)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	601a      	str	r2, [r3, #0]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7fe fd67 	bl	800c7fc <_ZN11TestFailureD1Ev>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	4618      	mov	r0, r3
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	08025570 	.word	0x08025570

0800dd3c <_ZN15ContainsFailureD0Ev>:
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f7ff ffe7 	bl	800dd18 <_ZN15ContainsFailureD1Ev>
 800dd4a:	2134      	movs	r1, #52	; 0x34
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f7fa fa87 	bl	8008260 <_ZdlPvj>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	4618      	mov	r0, r3
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	4a05      	ldr	r2, [pc, #20]	; (800dd7c <_ZN17ComparisonFailureD1Ev+0x20>)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	601a      	str	r2, [r3, #0]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7fe fd45 	bl	800c7fc <_ZN11TestFailureD1Ev>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	4618      	mov	r0, r3
 800dd76:	3708      	adds	r7, #8
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	0802559c 	.word	0x0802559c

0800dd80 <_ZN17ComparisonFailureD0Ev>:
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7ff ffe7 	bl	800dd5c <_ZN17ComparisonFailureD1Ev>
 800dd8e:	2134      	movs	r1, #52	; 0x34
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7fa fa65 	bl	8008260 <_ZdlPvj>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	4a05      	ldr	r2, [pc, #20]	; (800ddc0 <_ZN17CheckEqualFailureD1Ev+0x20>)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	601a      	str	r2, [r3, #0]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7fe fd23 	bl	800c7fc <_ZN11TestFailureD1Ev>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3708      	adds	r7, #8
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	080255c8 	.word	0x080255c8

0800ddc4 <_ZN17CheckEqualFailureD0Ev>:
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f7ff ffe7 	bl	800dda0 <_ZN17CheckEqualFailureD1Ev>
 800ddd2:	2134      	movs	r1, #52	; 0x34
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f7fa fa43 	bl	8008260 <_ZdlPvj>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	4a05      	ldr	r2, [pc, #20]	; (800de04 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	601a      	str	r2, [r3, #0]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fe fd01 	bl	800c7fc <_ZN11TestFailureD1Ev>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3708      	adds	r7, #8
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}
 800de04:	080255f4 	.word	0x080255f4

0800de08 <_ZN19DoublesEqualFailureD0Ev>:
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7ff ffe7 	bl	800dde4 <_ZN19DoublesEqualFailureD1Ev>
 800de16:	2134      	movs	r1, #52	; 0x34
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f7fa fa21 	bl	8008260 <_ZdlPvj>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4618      	mov	r0, r3
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	4a05      	ldr	r2, [pc, #20]	; (800de48 <_ZN13EqualsFailureD1Ev+0x20>)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	601a      	str	r2, [r3, #0]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	4618      	mov	r0, r3
 800de3a:	f7fe fcdf 	bl	800c7fc <_ZN11TestFailureD1Ev>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4618      	mov	r0, r3
 800de42:	3708      	adds	r7, #8
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	08025620 	.word	0x08025620

0800de4c <_ZN13EqualsFailureD0Ev>:
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f7ff ffe7 	bl	800de28 <_ZN13EqualsFailureD1Ev>
 800de5a:	2134      	movs	r1, #52	; 0x34
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f7fa f9ff 	bl	8008260 <_ZdlPvj>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	4618      	mov	r0, r3
 800de66:	3708      	adds	r7, #8
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800de6c:	b5b0      	push	{r4, r5, r7, lr}
 800de6e:	b086      	sub	sp, #24
 800de70:	af02      	add	r7, sp, #8
 800de72:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800de74:	4b0d      	ldr	r3, [pc, #52]	; (800deac <_ZL13checkedMallocj+0x40>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	4798      	blx	r3
 800de7c:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d10e      	bne.n	800dea2 <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800de84:	f004 f97e 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 800de88:	4604      	mov	r4, r0
 800de8a:	6823      	ldr	r3, [r4, #0]
 800de8c:	3368      	adds	r3, #104	; 0x68
 800de8e:	681d      	ldr	r5, [r3, #0]
 800de90:	f004 f988 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800de94:	4603      	mov	r3, r0
 800de96:	9300      	str	r3, [sp, #0]
 800de98:	2325      	movs	r3, #37	; 0x25
 800de9a:	4a05      	ldr	r2, [pc, #20]	; (800deb0 <_ZL13checkedMallocj+0x44>)
 800de9c:	4905      	ldr	r1, [pc, #20]	; (800deb4 <_ZL13checkedMallocj+0x48>)
 800de9e:	4620      	mov	r0, r4
 800dea0:	47a8      	blx	r5
    return mem;
 800dea2:	68fb      	ldr	r3, [r7, #12]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3710      	adds	r7, #16
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bdb0      	pop	{r4, r5, r7, pc}
 800deac:	200000c4 	.word	0x200000c4
 800deb0:	08022148 	.word	0x08022148
 800deb4:	08022168 	.word	0x08022168

0800deb8 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800debc:	4b04      	ldr	r3, [pc, #16]	; (800ded0 <_Z22getCurrentNewAllocatorv+0x18>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d101      	bne.n	800dec8 <_Z22getCurrentNewAllocatorv+0x10>
 800dec4:	f000 f806 	bl	800ded4 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800dec8:	4b01      	ldr	r3, [pc, #4]	; (800ded0 <_Z22getCurrentNewAllocatorv+0x18>)
 800deca:	681b      	ldr	r3, [r3, #0]
}
 800decc:	4618      	mov	r0, r3
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	2000073c 	.word	0x2000073c

0800ded4 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800ded8:	f000 f810 	bl	800defc <_Z19defaultNewAllocatorv>
 800dedc:	4603      	mov	r3, r0
 800dede:	4a02      	ldr	r2, [pc, #8]	; (800dee8 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800dee0:	6013      	str	r3, [r2, #0]
}
 800dee2:	bf00      	nop
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	2000073c 	.word	0x2000073c

0800deec <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800deec:	b580      	push	{r7, lr}
 800deee:	af00      	add	r7, sp, #0
 800def0:	4801      	ldr	r0, [pc, #4]	; (800def8 <__tcf_0+0xc>)
 800def2:	f000 f909 	bl	800e108 <_ZN19TestMemoryAllocatorD1Ev>
 800def6:	bd80      	pop	{r7, pc}
 800def8:	20000748 	.word	0x20000748

0800defc <_Z19defaultNewAllocatorv>:
{
 800defc:	b580      	push	{r7, lr}
 800defe:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800df00:	4b13      	ldr	r3, [pc, #76]	; (800df50 <_Z19defaultNewAllocatorv+0x54>)
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	f3bf 8f5b 	dmb	ish
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	f003 0301 	and.w	r3, r3, #1
 800df0e:	2b00      	cmp	r3, #0
 800df10:	bf0c      	ite	eq
 800df12:	2301      	moveq	r3, #1
 800df14:	2300      	movne	r3, #0
 800df16:	b2db      	uxtb	r3, r3
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d016      	beq.n	800df4a <_Z19defaultNewAllocatorv+0x4e>
 800df1c:	480c      	ldr	r0, [pc, #48]	; (800df50 <_Z19defaultNewAllocatorv+0x54>)
 800df1e:	f00f fc0f 	bl	801d740 <__cxa_guard_acquire>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	bf14      	ite	ne
 800df28:	2301      	movne	r3, #1
 800df2a:	2300      	moveq	r3, #0
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00b      	beq.n	800df4a <_Z19defaultNewAllocatorv+0x4e>
 800df32:	4b08      	ldr	r3, [pc, #32]	; (800df54 <_Z19defaultNewAllocatorv+0x58>)
 800df34:	4a08      	ldr	r2, [pc, #32]	; (800df58 <_Z19defaultNewAllocatorv+0x5c>)
 800df36:	4909      	ldr	r1, [pc, #36]	; (800df5c <_Z19defaultNewAllocatorv+0x60>)
 800df38:	4809      	ldr	r0, [pc, #36]	; (800df60 <_Z19defaultNewAllocatorv+0x64>)
 800df3a:	f000 f8c5 	bl	800e0c8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800df3e:	4804      	ldr	r0, [pc, #16]	; (800df50 <_Z19defaultNewAllocatorv+0x54>)
 800df40:	f00f fc0a 	bl	801d758 <__cxa_guard_release>
 800df44:	4807      	ldr	r0, [pc, #28]	; (800df64 <_Z19defaultNewAllocatorv+0x68>)
 800df46:	f00f fc2e 	bl	801d7a6 <atexit>
    return &allocator;
 800df4a:	4b05      	ldr	r3, [pc, #20]	; (800df60 <_Z19defaultNewAllocatorv+0x64>)
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	2000075c 	.word	0x2000075c
 800df54:	08022188 	.word	0x08022188
 800df58:	08022190 	.word	0x08022190
 800df5c:	08022194 	.word	0x08022194
 800df60:	20000748 	.word	0x20000748
 800df64:	0800deed 	.word	0x0800deed

0800df68 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800df6c:	4b04      	ldr	r3, [pc, #16]	; (800df80 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d101      	bne.n	800df78 <_Z27getCurrentNewArrayAllocatorv+0x10>
 800df74:	f000 f806 	bl	800df84 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800df78:	4b01      	ldr	r3, [pc, #4]	; (800df80 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800df7a:	681b      	ldr	r3, [r3, #0]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	20000740 	.word	0x20000740

0800df84 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800df84:	b580      	push	{r7, lr}
 800df86:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800df88:	f000 f810 	bl	800dfac <_Z24defaultNewArrayAllocatorv>
 800df8c:	4603      	mov	r3, r0
 800df8e:	4a02      	ldr	r2, [pc, #8]	; (800df98 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800df90:	6013      	str	r3, [r2, #0]
}
 800df92:	bf00      	nop
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	20000740 	.word	0x20000740

0800df9c <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800df9c:	b580      	push	{r7, lr}
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	4801      	ldr	r0, [pc, #4]	; (800dfa8 <__tcf_1+0xc>)
 800dfa2:	f000 f8b1 	bl	800e108 <_ZN19TestMemoryAllocatorD1Ev>
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	20000760 	.word	0x20000760

0800dfac <_Z24defaultNewArrayAllocatorv>:
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800dfb0:	4b13      	ldr	r3, [pc, #76]	; (800e000 <_Z24defaultNewArrayAllocatorv+0x54>)
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	f3bf 8f5b 	dmb	ish
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	f003 0301 	and.w	r3, r3, #1
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	bf0c      	ite	eq
 800dfc2:	2301      	moveq	r3, #1
 800dfc4:	2300      	movne	r3, #0
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d016      	beq.n	800dffa <_Z24defaultNewArrayAllocatorv+0x4e>
 800dfcc:	480c      	ldr	r0, [pc, #48]	; (800e000 <_Z24defaultNewArrayAllocatorv+0x54>)
 800dfce:	f00f fbb7 	bl	801d740 <__cxa_guard_acquire>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	bf14      	ite	ne
 800dfd8:	2301      	movne	r3, #1
 800dfda:	2300      	moveq	r3, #0
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d00b      	beq.n	800dffa <_Z24defaultNewArrayAllocatorv+0x4e>
 800dfe2:	4b08      	ldr	r3, [pc, #32]	; (800e004 <_Z24defaultNewArrayAllocatorv+0x58>)
 800dfe4:	4a08      	ldr	r2, [pc, #32]	; (800e008 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800dfe6:	4909      	ldr	r1, [pc, #36]	; (800e00c <_Z24defaultNewArrayAllocatorv+0x60>)
 800dfe8:	4809      	ldr	r0, [pc, #36]	; (800e010 <_Z24defaultNewArrayAllocatorv+0x64>)
 800dfea:	f000 f86d 	bl	800e0c8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800dfee:	4804      	ldr	r0, [pc, #16]	; (800e000 <_Z24defaultNewArrayAllocatorv+0x54>)
 800dff0:	f00f fbb2 	bl	801d758 <__cxa_guard_release>
 800dff4:	4807      	ldr	r0, [pc, #28]	; (800e014 <_Z24defaultNewArrayAllocatorv+0x68>)
 800dff6:	f00f fbd6 	bl	801d7a6 <atexit>
    return &allocator;
 800dffa:	4b05      	ldr	r3, [pc, #20]	; (800e010 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	20000774 	.word	0x20000774
 800e004:	080221ac 	.word	0x080221ac
 800e008:	080221b8 	.word	0x080221b8
 800e00c:	080221c0 	.word	0x080221c0
 800e010:	20000760 	.word	0x20000760
 800e014:	0800df9d 	.word	0x0800df9d

0800e018 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800e01c:	4b04      	ldr	r3, [pc, #16]	; (800e030 <_Z25getCurrentMallocAllocatorv+0x18>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d101      	bne.n	800e028 <_Z25getCurrentMallocAllocatorv+0x10>
 800e024:	f000 f806 	bl	800e034 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800e028:	4b01      	ldr	r3, [pc, #4]	; (800e030 <_Z25getCurrentMallocAllocatorv+0x18>)
 800e02a:	681b      	ldr	r3, [r3, #0]
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	bd80      	pop	{r7, pc}
 800e030:	20000744 	.word	0x20000744

0800e034 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800e034:	b580      	push	{r7, lr}
 800e036:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800e038:	f000 f810 	bl	800e05c <_Z22defaultMallocAllocatorv>
 800e03c:	4603      	mov	r3, r0
 800e03e:	4a02      	ldr	r2, [pc, #8]	; (800e048 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800e040:	6013      	str	r3, [r2, #0]
}
 800e042:	bf00      	nop
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	20000744 	.word	0x20000744

0800e04c <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800e04c:	b580      	push	{r7, lr}
 800e04e:	af00      	add	r7, sp, #0
 800e050:	4801      	ldr	r0, [pc, #4]	; (800e058 <__tcf_2+0xc>)
 800e052:	f000 f859 	bl	800e108 <_ZN19TestMemoryAllocatorD1Ev>
 800e056:	bd80      	pop	{r7, pc}
 800e058:	20000778 	.word	0x20000778

0800e05c <_Z22defaultMallocAllocatorv>:
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800e060:	4b13      	ldr	r3, [pc, #76]	; (800e0b0 <_Z22defaultMallocAllocatorv+0x54>)
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	f3bf 8f5b 	dmb	ish
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	f003 0301 	and.w	r3, r3, #1
 800e06e:	2b00      	cmp	r3, #0
 800e070:	bf0c      	ite	eq
 800e072:	2301      	moveq	r3, #1
 800e074:	2300      	movne	r3, #0
 800e076:	b2db      	uxtb	r3, r3
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d016      	beq.n	800e0aa <_Z22defaultMallocAllocatorv+0x4e>
 800e07c:	480c      	ldr	r0, [pc, #48]	; (800e0b0 <_Z22defaultMallocAllocatorv+0x54>)
 800e07e:	f00f fb5f 	bl	801d740 <__cxa_guard_acquire>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	bf14      	ite	ne
 800e088:	2301      	movne	r3, #1
 800e08a:	2300      	moveq	r3, #0
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00b      	beq.n	800e0aa <_Z22defaultMallocAllocatorv+0x4e>
 800e092:	4b08      	ldr	r3, [pc, #32]	; (800e0b4 <_Z22defaultMallocAllocatorv+0x58>)
 800e094:	4a08      	ldr	r2, [pc, #32]	; (800e0b8 <_Z22defaultMallocAllocatorv+0x5c>)
 800e096:	4909      	ldr	r1, [pc, #36]	; (800e0bc <_Z22defaultMallocAllocatorv+0x60>)
 800e098:	4809      	ldr	r0, [pc, #36]	; (800e0c0 <_Z22defaultMallocAllocatorv+0x64>)
 800e09a:	f000 f815 	bl	800e0c8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800e09e:	4804      	ldr	r0, [pc, #16]	; (800e0b0 <_Z22defaultMallocAllocatorv+0x54>)
 800e0a0:	f00f fb5a 	bl	801d758 <__cxa_guard_release>
 800e0a4:	4807      	ldr	r0, [pc, #28]	; (800e0c4 <_Z22defaultMallocAllocatorv+0x68>)
 800e0a6:	f00f fb7e 	bl	801d7a6 <atexit>
    return &allocator;
 800e0aa:	4b05      	ldr	r3, [pc, #20]	; (800e0c0 <_Z22defaultMallocAllocatorv+0x64>)
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	2000078c 	.word	0x2000078c
 800e0b4:	080221dc 	.word	0x080221dc
 800e0b8:	080221e4 	.word	0x080221e4
 800e0bc:	080221ec 	.word	0x080221ec
 800e0c0:	20000778 	.word	0x20000778
 800e0c4:	0800e04d 	.word	0x0800e04d

0800e0c8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800e0c8:	b480      	push	{r7}
 800e0ca:	b085      	sub	sp, #20
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	607a      	str	r2, [r7, #4]
 800e0d4:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800e0d6:	4a0b      	ldr	r2, [pc, #44]	; (800e104 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	601a      	str	r2, [r3, #0]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	68ba      	ldr	r2, [r7, #8]
 800e0e0:	605a      	str	r2, [r3, #4]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	609a      	str	r2, [r3, #8]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	683a      	ldr	r2, [r7, #0]
 800e0ec:	60da      	str	r2, [r3, #12]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	741a      	strb	r2, [r3, #16]
{
}
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3714      	adds	r7, #20
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e100:	4770      	bx	lr
 800e102:	bf00      	nop
 800e104:	080256ac 	.word	0x080256ac

0800e108 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800e108:	b480      	push	{r7}
 800e10a:	b083      	sub	sp, #12
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	4a06      	ldr	r2, [pc, #24]	; (800e12c <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2201      	movs	r2, #1
 800e11a:	741a      	strb	r2, [r3, #16]
}
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	4618      	mov	r0, r3
 800e120:	370c      	adds	r7, #12
 800e122:	46bd      	mov	sp, r7
 800e124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e128:	4770      	bx	lr
 800e12a:	bf00      	nop
 800e12c:	080256ac 	.word	0x080256ac

0800e130 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
}
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f7ff ffe5 	bl	800e108 <_ZN19TestMemoryAllocatorD1Ev>
 800e13e:	2114      	movs	r1, #20
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f7fa f88d 	bl	8008260 <_ZdlPvj>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	4618      	mov	r0, r3
 800e14a:	3708      	adds	r7, #8
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	7c1b      	ldrb	r3, [r3, #16]
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	370c      	adds	r7, #12
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800e168:	b590      	push	{r4, r7, lr}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	3310      	adds	r3, #16
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	4798      	blx	r3
 800e17e:	4604      	mov	r4, r0
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	3310      	adds	r3, #16
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	6838      	ldr	r0, [r7, #0]
 800e18a:	4798      	blx	r3
 800e18c:	4603      	mov	r3, r0
 800e18e:	4619      	mov	r1, r3
 800e190:	4620      	mov	r0, r4
 800e192:	f7fc fa51 	bl	800a638 <_ZN12SimpleString6StrCmpEPKcS1_>
 800e196:	4603      	mov	r3, r0
 800e198:	2b00      	cmp	r3, #0
 800e19a:	bf0c      	ite	eq
 800e19c:	2301      	moveq	r3, #1
 800e19e:	2300      	movne	r3, #0
 800e1a0:	b2db      	uxtb	r3, r3
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	370c      	adds	r7, #12
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd90      	pop	{r4, r7, pc}
	...

0800e1ac <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800e1ac:	b590      	push	{r4, r7, lr}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	3308      	adds	r3, #8
 800e1bc:	681c      	ldr	r4, [r3, #0]
 800e1be:	2301      	movs	r3, #1
 800e1c0:	4a04      	ldr	r2, [pc, #16]	; (800e1d4 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800e1c2:	6839      	ldr	r1, [r7, #0]
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	47a0      	blx	r4
 800e1c8:	4603      	mov	r3, r0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	370c      	adds	r7, #12
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd90      	pop	{r4, r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	08022208 	.word	0x08022208

0800e1d8 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800e1d8:	b590      	push	{r4, r7, lr}
 800e1da:	b085      	sub	sp, #20
 800e1dc:	af02      	add	r7, sp, #8
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	330c      	adds	r3, #12
 800e1e8:	681c      	ldr	r4, [r3, #0]
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	9300      	str	r3, [sp, #0]
 800e1ee:	4b04      	ldr	r3, [pc, #16]	; (800e200 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	6839      	ldr	r1, [r7, #0]
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	47a0      	blx	r4
}
 800e1f8:	bf00      	nop
 800e1fa:	370c      	adds	r7, #12
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd90      	pop	{r4, r7, pc}
 800e200:	08022208 	.word	0x08022208

0800e204 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	607a      	str	r2, [r7, #4]
 800e210:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800e212:	68b8      	ldr	r0, [r7, #8]
 800e214:	f7ff fe2a 	bl	800de6c <_ZL13checkedMallocj>
 800e218:	4603      	mov	r3, r0
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3710      	adds	r7, #16
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
	...

0800e224 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
 800e230:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800e232:	4b04      	ldr	r3, [pc, #16]	; (800e244 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	68b8      	ldr	r0, [r7, #8]
 800e238:	4798      	blx	r3
}
 800e23a:	bf00      	nop
 800e23c:	3710      	adds	r7, #16
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	200000cc 	.word	0x200000cc

0800e248 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800e248:	b480      	push	{r7}
 800e24a:	b083      	sub	sp, #12
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
    return name_;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	685b      	ldr	r3, [r3, #4]
}
 800e254:	4618      	mov	r0, r3
 800e256:	370c      	adds	r7, #12
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr

0800e260 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800e260:	b480      	push	{r7}
 800e262:	b083      	sub	sp, #12
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	689b      	ldr	r3, [r3, #8]
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800e278:	b480      	push	{r7}
 800e27a:	b083      	sub	sp, #12
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
    return free_name_;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	68db      	ldr	r3, [r3, #12]
}
 800e284:	4618      	mov	r0, r3
 800e286:	370c      	adds	r7, #12
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr

0800e290 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800e290:	b480      	push	{r7}
 800e292:	b083      	sub	sp, #12
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
    return this;
 800e298:	687b      	ldr	r3, [r7, #4]
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	370c      	adds	r7, #12
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a4:	4770      	bx	lr
	...

0800e2a8 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	4a05      	ldr	r2, [pc, #20]	; (800e2c8 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	601a      	str	r2, [r3, #0]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7ff ff25 	bl	800e108 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3708      	adds	r7, #8
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	08025678 	.word	0x08025678

0800e2cc <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
}
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7ff ffe7 	bl	800e2a8 <_ZN20NullUnknownAllocatorD1Ev>
 800e2da:	2114      	movs	r1, #20
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f7f9 ffbf 	bl	8008260 <_ZdlPvj>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b085      	sub	sp, #20
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	607a      	str	r2, [r7, #4]
 800e2f8:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800e2fa:	2300      	movs	r3, #0
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3714      	adds	r7, #20
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800e308:	b480      	push	{r7}
 800e30a:	b085      	sub	sp, #20
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	607a      	str	r2, [r7, #4]
 800e314:	603b      	str	r3, [r7, #0]
}
 800e316:	bf00      	nop
 800e318:	3714      	adds	r7, #20
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
	...

0800e324 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	4b06      	ldr	r3, [pc, #24]	; (800e348 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800e330:	4a05      	ldr	r2, [pc, #20]	; (800e348 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800e332:	4906      	ldr	r1, [pc, #24]	; (800e34c <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800e334:	f7ff fec8 	bl	800e0c8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800e338:	4a05      	ldr	r2, [pc, #20]	; (800e350 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	601a      	str	r2, [r3, #0]
{
}
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	4618      	mov	r0, r3
 800e342:	3708      	adds	r7, #8
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	0802223c 	.word	0x0802223c
 800e34c:	08022244 	.word	0x08022244
 800e350:	08025678 	.word	0x08025678

0800e354 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800e354:	b580      	push	{r7, lr}
 800e356:	af00      	add	r7, sp, #0
 800e358:	4801      	ldr	r0, [pc, #4]	; (800e360 <__tcf_3+0xc>)
 800e35a:	f7ff ffa5 	bl	800e2a8 <_ZN20NullUnknownAllocatorD1Ev>
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	20000790 	.word	0x20000790

0800e364 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800e364:	b580      	push	{r7, lr}
 800e366:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800e368:	4b12      	ldr	r3, [pc, #72]	; (800e3b4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	f3bf 8f5b 	dmb	ish
 800e370:	b2db      	uxtb	r3, r3
 800e372:	f003 0301 	and.w	r3, r3, #1
 800e376:	2b00      	cmp	r3, #0
 800e378:	bf0c      	ite	eq
 800e37a:	2301      	moveq	r3, #1
 800e37c:	2300      	movne	r3, #0
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	2b00      	cmp	r3, #0
 800e382:	d013      	beq.n	800e3ac <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800e384:	480b      	ldr	r0, [pc, #44]	; (800e3b4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800e386:	f00f f9db 	bl	801d740 <__cxa_guard_acquire>
 800e38a:	4603      	mov	r3, r0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	bf14      	ite	ne
 800e390:	2301      	movne	r3, #1
 800e392:	2300      	moveq	r3, #0
 800e394:	b2db      	uxtb	r3, r3
 800e396:	2b00      	cmp	r3, #0
 800e398:	d008      	beq.n	800e3ac <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800e39a:	4807      	ldr	r0, [pc, #28]	; (800e3b8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800e39c:	f7ff ffc2 	bl	800e324 <_ZN20NullUnknownAllocatorC1Ev>
 800e3a0:	4804      	ldr	r0, [pc, #16]	; (800e3b4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800e3a2:	f00f f9d9 	bl	801d758 <__cxa_guard_release>
 800e3a6:	4805      	ldr	r0, [pc, #20]	; (800e3bc <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800e3a8:	f00f f9fd 	bl	801d7a6 <atexit>
    return &allocator;
 800e3ac:	4b02      	ldr	r3, [pc, #8]	; (800e3b8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	200007a4 	.word	0x200007a4
 800e3b8:	20000790 	.word	0x20000790
 800e3bc:	0800e355 	.word	0x0800e355

0800e3c0 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
        return testCount_;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	689b      	ldr	r3, [r3, #8]
    }
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	370c      	adds	r7, #12
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800e3d8:	b480      	push	{r7}
 800e3da:	b083      	sub	sp, #12
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	699b      	ldr	r3, [r3, #24]
    }
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	370c      	adds	r7, #12
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800e3f4:	4b05      	ldr	r3, [pc, #20]	; (800e40c <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	2b02      	cmp	r3, #2
 800e3fa:	d103      	bne.n	800e404 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800e3fc:	f004 fa4a 	bl	8012894 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800e400:	4603      	mov	r3, r0
 800e402:	e001      	b.n	800e408 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800e404:	4b01      	ldr	r3, [pc, #4]	; (800e40c <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800e406:	781b      	ldrb	r3, [r3, #0]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	20000084 	.word	0x20000084

0800e410 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800e418:	4a0a      	ldr	r2, [pc, #40]	; (800e444 <_ZN10TestOutputC1Ev+0x34>)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	601a      	str	r2, [r3, #0]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	605a      	str	r2, [r3, #4]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2200      	movs	r2, #0
 800e428:	721a      	strb	r2, [r3, #8]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2200      	movs	r2, #0
 800e42e:	725a      	strb	r2, [r3, #9]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	4a05      	ldr	r2, [pc, #20]	; (800e448 <_ZN10TestOutputC1Ev+0x38>)
 800e434:	60da      	str	r2, [r3, #12]
{
}
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4618      	mov	r0, r3
 800e43a:	370c      	adds	r7, #12
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr
 800e444:	080257b0 	.word	0x080257b0
 800e448:	08022644 	.word	0x08022644

0800e44c <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	4a04      	ldr	r2, [pc, #16]	; (800e468 <_ZN10TestOutputD1Ev+0x1c>)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	601a      	str	r2, [r3, #0]
{
}
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	4618      	mov	r0, r3
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr
 800e468:	080257b0 	.word	0x080257b0

0800e46c <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b083      	sub	sp, #12
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	460b      	mov	r3, r1
 800e476:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	78fa      	ldrb	r2, [r7, #3]
 800e47c:	721a      	strb	r2, [r3, #8]
}
 800e47e:	bf00      	nop
 800e480:	370c      	adds	r7, #12
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr

0800e48a <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800e48a:	b480      	push	{r7}
 800e48c:	b083      	sub	sp, #12
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
    color_ = true;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2201      	movs	r2, #1
 800e496:	725a      	strb	r2, [r3, #9]
}
 800e498:	bf00      	nop
 800e49a:	370c      	adds	r7, #12
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr

0800e4a4 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	3328      	adds	r3, #40	; 0x28
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	6839      	ldr	r1, [r7, #0]
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	4798      	blx	r3
}
 800e4bc:	bf00      	nop
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800e4c4:	b590      	push	{r4, r7, lr}
 800e4c6:	b085      	sub	sp, #20
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	332c      	adds	r3, #44	; 0x2c
 800e4d4:	681c      	ldr	r4, [r3, #0]
 800e4d6:	f107 0308 	add.w	r3, r7, #8
 800e4da:	6839      	ldr	r1, [r7, #0]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7fd f8ff 	bl	800b6e0 <_Z10StringFroml>
 800e4e2:	f107 0308 	add.w	r3, r7, #8
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fc fdf4 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	47a0      	blx	r4
 800e4f4:	f107 0308 	add.w	r3, r7, #8
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7fc fe18 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800e4fe:	bf00      	nop
 800e500:	3714      	adds	r7, #20
 800e502:	46bd      	mov	sp, r7
 800e504:	bd90      	pop	{r4, r7, pc}

0800e506 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800e506:	b590      	push	{r4, r7, lr}
 800e508:	b085      	sub	sp, #20
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
 800e50e:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	332c      	adds	r3, #44	; 0x2c
 800e516:	681c      	ldr	r4, [r3, #0]
 800e518:	f107 0308 	add.w	r3, r7, #8
 800e51c:	6839      	ldr	r1, [r7, #0]
 800e51e:	4618      	mov	r0, r3
 800e520:	f7fd fb34 	bl	800bb8c <_Z10StringFromj>
 800e524:	f107 0308 	add.w	r3, r7, #8
 800e528:	4618      	mov	r0, r3
 800e52a:	f7fc fdd3 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800e52e:	4603      	mov	r3, r0
 800e530:	4619      	mov	r1, r3
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	47a0      	blx	r4
 800e536:	f107 0308 	add.w	r3, r7, #8
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7fc fdf7 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800e540:	bf00      	nop
 800e542:	3714      	adds	r7, #20
 800e544:	46bd      	mov	sp, r7
 800e546:	bd90      	pop	{r4, r7, pc}

0800e548 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800e548:	b590      	push	{r4, r7, lr}
 800e54a:	b087      	sub	sp, #28
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	332c      	adds	r3, #44	; 0x2c
 800e55a:	681c      	ldr	r4, [r3, #0]
 800e55c:	f107 0310 	add.w	r3, r7, #16
 800e560:	2106      	movs	r1, #6
 800e562:	ed97 0b00 	vldr	d0, [r7]
 800e566:	4618      	mov	r0, r3
 800e568:	f7fd faa6 	bl	800bab8 <_Z10StringFromdi>
 800e56c:	f107 0310 	add.w	r3, r7, #16
 800e570:	4618      	mov	r0, r3
 800e572:	f7fc fdaf 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800e576:	4603      	mov	r3, r0
 800e578:	4619      	mov	r1, r3
 800e57a:	68f8      	ldr	r0, [r7, #12]
 800e57c:	47a0      	blx	r4
 800e57e:	f107 0310 	add.w	r3, r7, #16
 800e582:	4618      	mov	r0, r3
 800e584:	f7fc fdd3 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800e588:	bf00      	nop
 800e58a:	371c      	adds	r7, #28
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd90      	pop	{r4, r7, pc}

0800e590 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
    p.print(s);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	332c      	adds	r3, #44	; 0x2c
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	6839      	ldr	r1, [r7, #0]
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	4798      	blx	r3
    return p;
 800e5a8:	687b      	ldr	r3, [r7, #4]
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3708      	adds	r7, #8
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
	...

0800e5b4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800e5b4:	b590      	push	{r4, r7, lr}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	7a1b      	ldrb	r3, [r3, #8]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d01a      	beq.n	800e5fc <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	332c      	adds	r3, #44	; 0x2c
 800e5cc:	681c      	ldr	r4, [r3, #0]
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	3314      	adds	r3, #20
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f107 0208 	add.w	r2, r7, #8
 800e5da:	6839      	ldr	r1, [r7, #0]
 800e5dc:	4610      	mov	r0, r2
 800e5de:	4798      	blx	r3
 800e5e0:	f107 0308 	add.w	r3, r7, #8
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7fc fd75 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	47a0      	blx	r4
 800e5f2:	f107 0308 	add.w	r3, r7, #8
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7fc fd99 	bl	800b12e <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	3318      	adds	r3, #24
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	6838      	ldr	r0, [r7, #0]
 800e606:	4798      	blx	r3
 800e608:	4603      	mov	r3, r0
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d007      	beq.n	800e61e <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	3344      	adds	r3, #68	; 0x44
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4907      	ldr	r1, [pc, #28]	; (800e634 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800e61c:	e006      	b.n	800e62c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	3344      	adds	r3, #68	; 0x44
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4904      	ldr	r1, [pc, #16]	; (800e638 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	4798      	blx	r3
}
 800e62c:	bf00      	nop
 800e62e:	3714      	adds	r7, #20
 800e630:	46bd      	mov	sp, r7
 800e632:	bd90      	pop	{r4, r7, pc}
 800e634:	08022644 	.word	0x08022644
 800e638:	08022648 	.word	0x08022648

0800e63c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800e63c:	b590      	push	{r4, r7, lr}
 800e63e:	b083      	sub	sp, #12
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	7a1b      	ldrb	r3, [r3, #8]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d019      	beq.n	800e682 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	332c      	adds	r3, #44	; 0x2c
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	4910      	ldr	r1, [pc, #64]	; (800e698 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	3334      	adds	r3, #52	; 0x34
 800e662:	681c      	ldr	r4, [r3, #0]
 800e664:	6838      	ldr	r0, [r7, #0]
 800e666:	f002 f845 	bl	80106f4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800e66a:	4603      	mov	r3, r0
 800e66c:	4619      	mov	r1, r3
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	47a0      	blx	r4
        print(" ms\n");
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	332c      	adds	r3, #44	; 0x2c
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	4908      	ldr	r1, [pc, #32]	; (800e69c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800e680:	e005      	b.n	800e68e <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	3358      	adds	r3, #88	; 0x58
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	4798      	blx	r3
}
 800e68e:	bf00      	nop
 800e690:	370c      	adds	r7, #12
 800e692:	46bd      	mov	sp, r7
 800e694:	bd90      	pop	{r4, r7, pc}
 800e696:	bf00      	nop
 800e698:	0802264c 	.word	0x0802264c
 800e69c:	08022650 	.word	0x08022650

0800e6a0 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	332c      	adds	r3, #44	; 0x2c
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	68d2      	ldr	r2, [r2, #12]
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	1c5a      	adds	r2, r3, #1
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	605a      	str	r2, [r3, #4]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	685a      	ldr	r2, [r3, #4]
 800e6c8:	4b0d      	ldr	r3, [pc, #52]	; (800e700 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800e6ca:	fb83 1302 	smull	r1, r3, r3, r2
 800e6ce:	1119      	asrs	r1, r3, #4
 800e6d0:	17d3      	asrs	r3, r2, #31
 800e6d2:	1acb      	subs	r3, r1, r3
 800e6d4:	2132      	movs	r1, #50	; 0x32
 800e6d6:	fb01 f303 	mul.w	r3, r1, r3
 800e6da:	1ad3      	subs	r3, r2, r3
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	bf0c      	ite	eq
 800e6e0:	2301      	moveq	r3, #1
 800e6e2:	2300      	movne	r3, #0
 800e6e4:	b2db      	uxtb	r3, r3
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d006      	beq.n	800e6f8 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	332c      	adds	r3, #44	; 0x2c
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4904      	ldr	r1, [pc, #16]	; (800e704 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	4798      	blx	r3
}
 800e6f8:	bf00      	nop
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	51eb851f 	.word	0x51eb851f
 800e704:	08022658 	.word	0x08022658

0800e708 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	683a      	ldr	r2, [r7, #0]
 800e716:	60da      	str	r2, [r3, #12]
}
 800e718:	bf00      	nop
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
}
 800e72c:	bf00      	nop
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
}
 800e742:	bf00      	nop
 800e744:	370c      	adds	r7, #12
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr

0800e74e <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800e74e:	b480      	push	{r7}
 800e750:	b083      	sub	sp, #12
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
 800e756:	6039      	str	r1, [r7, #0]
}
 800e758:	bf00      	nop
 800e75a:	370c      	adds	r7, #12
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800e764:	b590      	push	{r4, r7, lr}
 800e766:	b085      	sub	sp, #20
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	6039      	str	r1, [r7, #0]
    print("\n");
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	332c      	adds	r3, #44	; 0x2c
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	496f      	ldr	r1, [pc, #444]	; (800e934 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800e77c:	6838      	ldr	r0, [r7, #0]
 800e77e:	f7f8 f83d 	bl	80067fc <_ZNK10TestResult9isFailureEv>
 800e782:	4603      	mov	r3, r0
 800e784:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800e786:	6838      	ldr	r0, [r7, #0]
 800e788:	f7f8 f82c 	bl	80067e4 <_ZNK10TestResult15getFailureCountEv>
 800e78c:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800e78e:	7bfb      	ldrb	r3, [r7, #15]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d02b      	beq.n	800e7ec <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	7a5b      	ldrb	r3, [r3, #9]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d006      	beq.n	800e7aa <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	332c      	adds	r3, #44	; 0x2c
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	4964      	ldr	r1, [pc, #400]	; (800e938 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	4798      	blx	r3
        }
        print("Errors (");
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	332c      	adds	r3, #44	; 0x2c
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	4962      	ldr	r1, [pc, #392]	; (800e93c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	4798      	blx	r3
        if (failureCount > 0) {
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00e      	beq.n	800e7dc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	3334      	adds	r3, #52	; 0x34
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	68b9      	ldr	r1, [r7, #8]
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	4798      	blx	r3
            print(" failures, ");
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	332c      	adds	r3, #44	; 0x2c
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	495a      	ldr	r1, [pc, #360]	; (800e940 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	4798      	blx	r3
 800e7da:	e019      	b.n	800e810 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	332c      	adds	r3, #44	; 0x2c
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4957      	ldr	r1, [pc, #348]	; (800e944 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	4798      	blx	r3
 800e7ea:	e011      	b.n	800e810 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	7a5b      	ldrb	r3, [r3, #9]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d006      	beq.n	800e802 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	332c      	adds	r3, #44	; 0x2c
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4952      	ldr	r1, [pc, #328]	; (800e948 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	4798      	blx	r3
        }
        print("OK (");
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	332c      	adds	r3, #44	; 0x2c
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	4950      	ldr	r1, [pc, #320]	; (800e94c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	4798      	blx	r3
    }
    print(result.getTestCount());
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	3334      	adds	r3, #52	; 0x34
 800e816:	681c      	ldr	r4, [r3, #0]
 800e818:	6838      	ldr	r0, [r7, #0]
 800e81a:	f7ff fdd1 	bl	800e3c0 <_ZNK10TestResult12getTestCountEv>
 800e81e:	4603      	mov	r3, r0
 800e820:	4619      	mov	r1, r3
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	47a0      	blx	r4
    print(" tests, ");
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	332c      	adds	r3, #44	; 0x2c
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	4948      	ldr	r1, [pc, #288]	; (800e950 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	4798      	blx	r3
    print(result.getRunCount());
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	3334      	adds	r3, #52	; 0x34
 800e83a:	681c      	ldr	r4, [r3, #0]
 800e83c:	6838      	ldr	r0, [r7, #0]
 800e83e:	f7f7 ffb9 	bl	80067b4 <_ZNK10TestResult11getRunCountEv>
 800e842:	4603      	mov	r3, r0
 800e844:	4619      	mov	r1, r3
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	47a0      	blx	r4
    print(" ran, ");
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	332c      	adds	r3, #44	; 0x2c
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	4940      	ldr	r1, [pc, #256]	; (800e954 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	4798      	blx	r3
    print(result.getCheckCount());
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	3334      	adds	r3, #52	; 0x34
 800e85e:	681c      	ldr	r4, [r3, #0]
 800e860:	6838      	ldr	r0, [r7, #0]
 800e862:	f7f8 fc13 	bl	800708c <_ZNK10TestResult13getCheckCountEv>
 800e866:	4603      	mov	r3, r0
 800e868:	4619      	mov	r1, r3
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	47a0      	blx	r4
    print(" checks, ");
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	332c      	adds	r3, #44	; 0x2c
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4938      	ldr	r1, [pc, #224]	; (800e958 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	4798      	blx	r3
    print(result.getIgnoredCount());
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	3334      	adds	r3, #52	; 0x34
 800e882:	681c      	ldr	r4, [r3, #0]
 800e884:	6838      	ldr	r0, [r7, #0]
 800e886:	f7f7 ffa1 	bl	80067cc <_ZNK10TestResult15getIgnoredCountEv>
 800e88a:	4603      	mov	r3, r0
 800e88c:	4619      	mov	r1, r3
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	47a0      	blx	r4
    print(" ignored, ");
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	332c      	adds	r3, #44	; 0x2c
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4930      	ldr	r1, [pc, #192]	; (800e95c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	3334      	adds	r3, #52	; 0x34
 800e8a6:	681c      	ldr	r4, [r3, #0]
 800e8a8:	6838      	ldr	r0, [r7, #0]
 800e8aa:	f7ff fd95 	bl	800e3d8 <_ZNK10TestResult19getFilteredOutCountEv>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	47a0      	blx	r4
    print(" filtered out, ");
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	332c      	adds	r3, #44	; 0x2c
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	4928      	ldr	r1, [pc, #160]	; (800e960 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	3334      	adds	r3, #52	; 0x34
 800e8ca:	681c      	ldr	r4, [r3, #0]
 800e8cc:	6838      	ldr	r0, [r7, #0]
 800e8ce:	f001 ff05 	bl	80106dc <_ZNK10TestResult21getTotalExecutionTimeEv>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	47a0      	blx	r4
    print(" ms)");
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	332c      	adds	r3, #44	; 0x2c
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	4920      	ldr	r1, [pc, #128]	; (800e964 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	4798      	blx	r3
    if (color_) {
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	7a5b      	ldrb	r3, [r3, #9]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d006      	beq.n	800e8fe <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	332c      	adds	r3, #44	; 0x2c
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	491b      	ldr	r1, [pc, #108]	; (800e968 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800e8fe:	7bfb      	ldrb	r3, [r7, #15]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d009      	beq.n	800e918 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d106      	bne.n	800e918 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	332c      	adds	r3, #44	; 0x2c
 800e910:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800e912:	4916      	ldr	r1, [pc, #88]	; (800e96c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	4798      	blx	r3
    }
    print("\n\n");
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	332c      	adds	r3, #44	; 0x2c
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	4913      	ldr	r1, [pc, #76]	; (800e970 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	4798      	blx	r3

    dotCount_ = 0;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	605a      	str	r2, [r3, #4]
}
 800e92c:	bf00      	nop
 800e92e:	3714      	adds	r7, #20
 800e930:	46bd      	mov	sp, r7
 800e932:	bd90      	pop	{r4, r7, pc}
 800e934:	08022658 	.word	0x08022658
 800e938:	0802265c 	.word	0x0802265c
 800e93c:	08022664 	.word	0x08022664
 800e940:	08022670 	.word	0x08022670
 800e944:	0802267c 	.word	0x0802267c
 800e948:	0802268c 	.word	0x0802268c
 800e94c:	08022694 	.word	0x08022694
 800e950:	0802269c 	.word	0x0802269c
 800e954:	080226a8 	.word	0x080226a8
 800e958:	080226b0 	.word	0x080226b0
 800e95c:	080226bc 	.word	0x080226bc
 800e960:	080226c8 	.word	0x080226c8
 800e964:	080226d8 	.word	0x080226d8
 800e968:	080226e0 	.word	0x080226e0
 800e96c:	080226e4 	.word	0x080226e4
 800e970:	08022788 	.word	0x08022788

0800e974 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2b01      	cmp	r3, #1
 800e984:	d922      	bls.n	800e9cc <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	332c      	adds	r3, #44	; 0x2c
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4911      	ldr	r1, [pc, #68]	; (800e9d4 <_ZN10TestOutput12printTestRunEjj+0x60>)
 800e990:	68f8      	ldr	r0, [r7, #12]
 800e992:	4798      	blx	r3
        print(number);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	3334      	adds	r3, #52	; 0x34
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	68b9      	ldr	r1, [r7, #8]
 800e99e:	68f8      	ldr	r0, [r7, #12]
 800e9a0:	4798      	blx	r3
        print(" of ");
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	332c      	adds	r3, #44	; 0x2c
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	490b      	ldr	r1, [pc, #44]	; (800e9d8 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	4798      	blx	r3
        print(total);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	3334      	adds	r3, #52	; 0x34
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	6879      	ldr	r1, [r7, #4]
 800e9ba:	68f8      	ldr	r0, [r7, #12]
 800e9bc:	4798      	blx	r3
        print("\n");
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	332c      	adds	r3, #44	; 0x2c
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	4905      	ldr	r1, [pc, #20]	; (800e9dc <_ZN10TestOutput12printTestRunEjj+0x68>)
 800e9c8:	68f8      	ldr	r0, [r7, #12]
 800e9ca:	4798      	blx	r3
    }
}
 800e9cc:	bf00      	nop
 800e9ce:	3710      	adds	r7, #16
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	0802278c 	.word	0x0802278c
 800e9d8:	08022798 	.word	0x08022798
 800e9dc:	08022658 	.word	0x08022658

0800e9e0 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800e9ea:	6838      	ldr	r0, [r7, #0]
 800e9ec:	f7fd ffa1 	bl	800c932 <_ZNK11TestFailure17isOutsideTestFileEv>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d105      	bne.n	800ea02 <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800e9f6:	6838      	ldr	r0, [r7, #0]
 800e9f8:	f7fd ffad 	bl	800c956 <_ZNK11TestFailure18isInHelperFunctionEv>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d001      	beq.n	800ea06 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800ea02:	2301      	movs	r3, #1
 800ea04:	e000      	b.n	800ea08 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800ea06:	2300      	movs	r3, #0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d004      	beq.n	800ea16 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800ea0c:	6839      	ldr	r1, [r7, #0]
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f000 f81d 	bl	800ea4e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800ea14:	e003      	b.n	800ea1e <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800ea16:	6839      	ldr	r1, [r7, #0]
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f000 f86b 	bl	800eaf4 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	3318      	adds	r3, #24
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f107 0208 	add.w	r2, r7, #8
 800ea2a:	6839      	ldr	r1, [r7, #0]
 800ea2c:	4610      	mov	r0, r2
 800ea2e:	4798      	blx	r3
 800ea30:	f107 0308 	add.w	r3, r7, #8
 800ea34:	4619      	mov	r1, r3
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f000 f8b2 	bl	800eba0 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800ea3c:	f107 0308 	add.w	r3, r7, #8
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7fc fb74 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800ea46:	bf00      	nop
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b088      	sub	sp, #32
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	331c      	adds	r3, #28
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	f107 0208 	add.w	r2, r7, #8
 800ea64:	6839      	ldr	r1, [r7, #0]
 800ea66:	4610      	mov	r0, r2
 800ea68:	4798      	blx	r3
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	3320      	adds	r3, #32
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	6838      	ldr	r0, [r7, #0]
 800ea74:	4798      	blx	r3
 800ea76:	4602      	mov	r2, r0
 800ea78:	f107 0308 	add.w	r3, r7, #8
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 f8be 	bl	800ec00 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800ea84:	f107 0308 	add.w	r3, r7, #8
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7fc fb50 	bl	800b12e <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	330c      	adds	r3, #12
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f107 0210 	add.w	r2, r7, #16
 800ea9a:	6839      	ldr	r1, [r7, #0]
 800ea9c:	4610      	mov	r0, r2
 800ea9e:	4798      	blx	r3
 800eaa0:	f107 0310 	add.w	r3, r7, #16
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f000 f85c 	bl	800eb64 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800eaac:	f107 0310 	add.w	r3, r7, #16
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fc fb3c 	bl	800b12e <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	3308      	adds	r3, #8
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f107 0218 	add.w	r2, r7, #24
 800eac2:	6839      	ldr	r1, [r7, #0]
 800eac4:	4610      	mov	r0, r2
 800eac6:	4798      	blx	r3
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	3314      	adds	r3, #20
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	6838      	ldr	r0, [r7, #0]
 800ead2:	4798      	blx	r3
 800ead4:	4602      	mov	r2, r0
 800ead6:	f107 0318 	add.w	r3, r7, #24
 800eada:	4619      	mov	r1, r3
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 f88f 	bl	800ec00 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800eae2:	f107 0318 	add.w	r3, r7, #24
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7fc fb21 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800eaec:	bf00      	nop
 800eaee:	3720      	adds	r7, #32
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b086      	sub	sp, #24
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	3308      	adds	r3, #8
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f107 0208 	add.w	r2, r7, #8
 800eb0a:	6839      	ldr	r1, [r7, #0]
 800eb0c:	4610      	mov	r0, r2
 800eb0e:	4798      	blx	r3
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	3314      	adds	r3, #20
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	6838      	ldr	r0, [r7, #0]
 800eb1a:	4798      	blx	r3
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	f107 0308 	add.w	r3, r7, #8
 800eb22:	4619      	mov	r1, r3
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 f86b 	bl	800ec00 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800eb2a:	f107 0308 	add.w	r3, r7, #8
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7fc fafd 	bl	800b12e <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	330c      	adds	r3, #12
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f107 0210 	add.w	r2, r7, #16
 800eb40:	6839      	ldr	r1, [r7, #0]
 800eb42:	4610      	mov	r0, r2
 800eb44:	4798      	blx	r3
 800eb46:	f107 0310 	add.w	r3, r7, #16
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f000 f809 	bl	800eb64 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800eb52:	f107 0310 	add.w	r3, r7, #16
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7fc fae9 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800eb5c:	bf00      	nop
 800eb5e:	3718      	adds	r7, #24
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800eb64:	b590      	push	{r4, r7, lr}
 800eb66:	b083      	sub	sp, #12
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	332c      	adds	r3, #44	; 0x2c
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4909      	ldr	r1, [pc, #36]	; (800eb9c <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	4798      	blx	r3
    print(testName.asCharString());
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	332c      	adds	r3, #44	; 0x2c
 800eb82:	681c      	ldr	r4, [r3, #0]
 800eb84:	6838      	ldr	r0, [r7, #0]
 800eb86:	f7fc faa5 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	47a0      	blx	r4
}
 800eb92:	bf00      	nop
 800eb94:	370c      	adds	r7, #12
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd90      	pop	{r4, r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	080227a0 	.word	0x080227a0

0800eba0 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800eba0:	b590      	push	{r4, r7, lr}
 800eba2:	b083      	sub	sp, #12
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
    print("\n");
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	332c      	adds	r3, #44	; 0x2c
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	4910      	ldr	r1, [pc, #64]	; (800ebf4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	4798      	blx	r3
    print("\t");
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	332c      	adds	r3, #44	; 0x2c
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	490d      	ldr	r1, [pc, #52]	; (800ebf8 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	4798      	blx	r3
    print(reason.asCharString());
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	332c      	adds	r3, #44	; 0x2c
 800ebcc:	681c      	ldr	r4, [r3, #0]
 800ebce:	6838      	ldr	r0, [r7, #0]
 800ebd0:	f7fc fa80 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	47a0      	blx	r4
    print("\n\n");
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	332c      	adds	r3, #44	; 0x2c
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4905      	ldr	r1, [pc, #20]	; (800ebfc <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	4798      	blx	r3
}
 800ebea:	bf00      	nop
 800ebec:	370c      	adds	r7, #12
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd90      	pop	{r4, r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	08022658 	.word	0x08022658
 800ebf8:	080227b0 	.word	0x080227b0
 800ebfc:	08022788 	.word	0x08022788

0800ec00 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800ec00:	b590      	push	{r4, r7, lr}
 800ec02:	b089      	sub	sp, #36	; 0x24
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800ec0c:	f7ff fbf0 	bl	800e3f0 <_ZN10TestOutput21getWorkingEnvironmentEv>
 800ec10:	4603      	mov	r3, r0
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	bf0c      	ite	eq
 800ec16:	2301      	moveq	r3, #1
 800ec18:	2300      	movne	r3, #0
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d015      	beq.n	800ec4c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	3354      	adds	r3, #84	; 0x54
 800ec26:	681c      	ldr	r4, [r3, #0]
 800ec28:	f107 0310 	add.w	r3, r7, #16
 800ec2c:	68b9      	ldr	r1, [r7, #8]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7fb ff19 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 800ec34:	f107 0310 	add.w	r3, r7, #16
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	68f8      	ldr	r0, [r7, #12]
 800ec3e:	47a0      	blx	r4
 800ec40:	f107 0310 	add.w	r3, r7, #16
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7fc fa72 	bl	800b12e <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800ec4a:	e014      	b.n	800ec76 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	3350      	adds	r3, #80	; 0x50
 800ec52:	681c      	ldr	r4, [r3, #0]
 800ec54:	f107 0318 	add.w	r3, r7, #24
 800ec58:	68b9      	ldr	r1, [r7, #8]
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7fb ff03 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 800ec60:	f107 0318 	add.w	r3, r7, #24
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	4619      	mov	r1, r3
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	47a0      	blx	r4
 800ec6c:	f107 0318 	add.w	r3, r7, #24
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7fc fa5c 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800ec76:	bf00      	nop
 800ec78:	3724      	adds	r7, #36	; 0x24
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd90      	pop	{r4, r7, pc}
	...

0800ec80 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800ec80:	b590      	push	{r4, r7, lr}
 800ec82:	b085      	sub	sp, #20
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	60f8      	str	r0, [r7, #12]
 800ec88:	60b9      	str	r1, [r7, #8]
 800ec8a:	607a      	str	r2, [r7, #4]
    print("\n");
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	332c      	adds	r3, #44	; 0x2c
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4916      	ldr	r1, [pc, #88]	; (800ecf0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800ec96:	68f8      	ldr	r0, [r7, #12]
 800ec98:	4798      	blx	r3
    print(file.asCharString());
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	332c      	adds	r3, #44	; 0x2c
 800eca0:	681c      	ldr	r4, [r3, #0]
 800eca2:	68b8      	ldr	r0, [r7, #8]
 800eca4:	f7fc fa16 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	4619      	mov	r1, r3
 800ecac:	68f8      	ldr	r0, [r7, #12]
 800ecae:	47a0      	blx	r4
    print(":");
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	332c      	adds	r3, #44	; 0x2c
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	490e      	ldr	r1, [pc, #56]	; (800ecf4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800ecba:	68f8      	ldr	r0, [r7, #12]
 800ecbc:	4798      	blx	r3
    print(lineNumber);
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	3334      	adds	r3, #52	; 0x34
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	6879      	ldr	r1, [r7, #4]
 800ecc8:	68f8      	ldr	r0, [r7, #12]
 800ecca:	4798      	blx	r3
    print(":");
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	332c      	adds	r3, #44	; 0x2c
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4907      	ldr	r1, [pc, #28]	; (800ecf4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800ecd6:	68f8      	ldr	r0, [r7, #12]
 800ecd8:	4798      	blx	r3
    print(" error:");
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	332c      	adds	r3, #44	; 0x2c
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	4905      	ldr	r1, [pc, #20]	; (800ecf8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	4798      	blx	r3
}
 800ece8:	bf00      	nop
 800ecea:	3714      	adds	r7, #20
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd90      	pop	{r4, r7, pc}
 800ecf0:	08022658 	.word	0x08022658
 800ecf4:	080227b4 	.word	0x080227b4
 800ecf8:	080227b8 	.word	0x080227b8

0800ecfc <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800ecfc:	b590      	push	{r4, r7, lr}
 800ecfe:	b085      	sub	sp, #20
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	60f8      	str	r0, [r7, #12]
 800ed04:	60b9      	str	r1, [r7, #8]
 800ed06:	607a      	str	r2, [r7, #4]
    print("\n");
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	332c      	adds	r3, #44	; 0x2c
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4916      	ldr	r1, [pc, #88]	; (800ed6c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	4798      	blx	r3
    print(file.asCharString());
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	332c      	adds	r3, #44	; 0x2c
 800ed1c:	681c      	ldr	r4, [r3, #0]
 800ed1e:	68b8      	ldr	r0, [r7, #8]
 800ed20:	f7fc f9d8 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800ed24:	4603      	mov	r3, r0
 800ed26:	4619      	mov	r1, r3
 800ed28:	68f8      	ldr	r0, [r7, #12]
 800ed2a:	47a0      	blx	r4
    print("(");
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	332c      	adds	r3, #44	; 0x2c
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	490e      	ldr	r1, [pc, #56]	; (800ed70 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800ed36:	68f8      	ldr	r0, [r7, #12]
 800ed38:	4798      	blx	r3
    print(lineNumber);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	3334      	adds	r3, #52	; 0x34
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	6879      	ldr	r1, [r7, #4]
 800ed44:	68f8      	ldr	r0, [r7, #12]
 800ed46:	4798      	blx	r3
    print("):");
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	332c      	adds	r3, #44	; 0x2c
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4908      	ldr	r1, [pc, #32]	; (800ed74 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	4798      	blx	r3
    print(" error:");
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	332c      	adds	r3, #44	; 0x2c
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	4906      	ldr	r1, [pc, #24]	; (800ed78 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	4798      	blx	r3
}
 800ed64:	bf00      	nop
 800ed66:	3714      	adds	r7, #20
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd90      	pop	{r4, r7, pc}
 800ed6c:	08022658 	.word	0x08022658
 800ed70:	080227c0 	.word	0x080227c0
 800ed74:	080227c4 	.word	0x080227c4
 800ed78:	080227b8 	.word	0x080227b8

0800ed7c <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	7a1b      	ldrb	r3, [r3, #8]
 800ed8a:	2b02      	cmp	r3, #2
 800ed8c:	d106      	bne.n	800ed9c <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	3328      	adds	r3, #40	; 0x28
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	6839      	ldr	r1, [r7, #0]
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	4798      	blx	r3
}
 800ed9c:	bf00      	nop
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
    while (*s) {
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d009      	beq.n	800edca <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800edb6:	4b0a      	ldr	r3, [pc, #40]	; (800ede0 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	683a      	ldr	r2, [r7, #0]
 800edbc:	7812      	ldrb	r2, [r2, #0]
 800edbe:	4610      	mov	r0, r2
 800edc0:	4798      	blx	r3
        s++;
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	3301      	adds	r3, #1
 800edc6:	603b      	str	r3, [r7, #0]
    while (*s) {
 800edc8:	e7f1      	b.n	800edae <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	334c      	adds	r3, #76	; 0x4c
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	4798      	blx	r3
}
 800edd6:	bf00      	nop
 800edd8:	3708      	adds	r7, #8
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	200000bc 	.word	0x200000bc

0800ede4 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800edec:	4b03      	ldr	r3, [pc, #12]	; (800edfc <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4798      	blx	r3
}
 800edf2:	bf00      	nop
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	200000c0 	.word	0x200000c0

0800ee00 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7ff fb00 	bl	800e410 <_ZN10TestOutputC1Ev>
 800ee10:	4a06      	ldr	r2, [pc, #24]	; (800ee2c <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	601a      	str	r2, [r3, #0]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	611a      	str	r2, [r3, #16]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	615a      	str	r2, [r3, #20]
{
}
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	4618      	mov	r0, r3
 800ee26:	3708      	adds	r7, #8
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	080256e0 	.word	0x080256e0

0800ee30 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b082      	sub	sp, #8
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	4a0e      	ldr	r2, [pc, #56]	; (800ee74 <_ZN19CompositeTestOutputD1Ev+0x44>)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	691b      	ldr	r3, [r3, #16]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d004      	beq.n	800ee50 <_ZN19CompositeTestOutputD1Ev+0x20>
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	3204      	adds	r2, #4
 800ee4a:	6812      	ldr	r2, [r2, #0]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	4790      	blx	r2
  delete outputTwo_;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	695b      	ldr	r3, [r3, #20]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d004      	beq.n	800ee62 <_ZN19CompositeTestOutputD1Ev+0x32>
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	3204      	adds	r2, #4
 800ee5c:	6812      	ldr	r2, [r2, #0]
 800ee5e:	4618      	mov	r0, r3
 800ee60:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7ff faf1 	bl	800e44c <_ZN10TestOutputD1Ev>
}
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3708      	adds	r7, #8
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}
 800ee74:	080256e0 	.word	0x080256e0

0800ee78 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
}
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f7ff ffd5 	bl	800ee30 <_ZN19CompositeTestOutputD1Ev>
 800ee86:	2118      	movs	r1, #24
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f7f9 f9e9 	bl	8008260 <_ZdlPvj>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	4618      	mov	r0, r3
 800ee92:	3708      	adds	r7, #8
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	691b      	ldr	r3, [r3, #16]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d004      	beq.n	800eeb4 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	3204      	adds	r2, #4
 800eeae:	6812      	ldr	r2, [r2, #0]
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	4790      	blx	r2
  outputOne_ = output;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	683a      	ldr	r2, [r7, #0]
 800eeb8:	611a      	str	r2, [r3, #16]
}
 800eeba:	bf00      	nop
 800eebc:	3708      	adds	r7, #8
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}

0800eec2 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800eec2:	b580      	push	{r7, lr}
 800eec4:	b082      	sub	sp, #8
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
 800eeca:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	695b      	ldr	r3, [r3, #20]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d004      	beq.n	800eede <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800eed4:	681a      	ldr	r2, [r3, #0]
 800eed6:	3204      	adds	r2, #4
 800eed8:	6812      	ldr	r2, [r2, #0]
 800eeda:	4618      	mov	r0, r3
 800eedc:	4790      	blx	r2
  outputTwo_ = output;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	683a      	ldr	r2, [r7, #0]
 800eee2:	615a      	str	r2, [r3, #20]
}
 800eee4:	bf00      	nop
 800eee6:	3708      	adds	r7, #8
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	691b      	ldr	r3, [r3, #16]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d008      	beq.n	800ef0e <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	691a      	ldr	r2, [r3, #16]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	691b      	ldr	r3, [r3, #16]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	3308      	adds	r3, #8
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4610      	mov	r0, r2
 800ef0c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	695b      	ldr	r3, [r3, #20]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d008      	beq.n	800ef28 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	695a      	ldr	r2, [r3, #20]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	695b      	ldr	r3, [r3, #20]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	3308      	adds	r3, #8
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4610      	mov	r0, r2
 800ef26:	4798      	blx	r3
}
 800ef28:	bf00      	nop
 800ef2a:	3708      	adds	r7, #8
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	691b      	ldr	r3, [r3, #16]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d009      	beq.n	800ef56 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	691a      	ldr	r2, [r3, #16]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	691b      	ldr	r3, [r3, #16]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	330c      	adds	r3, #12
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	6839      	ldr	r1, [r7, #0]
 800ef52:	4610      	mov	r0, r2
 800ef54:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	695b      	ldr	r3, [r3, #20]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d009      	beq.n	800ef72 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	695a      	ldr	r2, [r3, #20]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	695b      	ldr	r3, [r3, #20]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	330c      	adds	r3, #12
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	6839      	ldr	r1, [r7, #0]
 800ef6e:	4610      	mov	r0, r2
 800ef70:	4798      	blx	r3
}
 800ef72:	bf00      	nop
 800ef74:	3708      	adds	r7, #8
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b082      	sub	sp, #8
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
 800ef82:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	691b      	ldr	r3, [r3, #16]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d009      	beq.n	800efa0 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	691a      	ldr	r2, [r3, #16]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	691b      	ldr	r3, [r3, #16]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	3310      	adds	r3, #16
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	6839      	ldr	r1, [r7, #0]
 800ef9c:	4610      	mov	r0, r2
 800ef9e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	695b      	ldr	r3, [r3, #20]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d009      	beq.n	800efbc <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	695a      	ldr	r2, [r3, #20]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	695b      	ldr	r3, [r3, #20]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	3310      	adds	r3, #16
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	6839      	ldr	r1, [r7, #0]
 800efb8:	4610      	mov	r0, r2
 800efba:	4798      	blx	r3
}
 800efbc:	bf00      	nop
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	691b      	ldr	r3, [r3, #16]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d009      	beq.n	800efea <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	691a      	ldr	r2, [r3, #16]
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	691b      	ldr	r3, [r3, #16]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	3314      	adds	r3, #20
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	6839      	ldr	r1, [r7, #0]
 800efe6:	4610      	mov	r0, r2
 800efe8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	695b      	ldr	r3, [r3, #20]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d009      	beq.n	800f006 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	695a      	ldr	r2, [r3, #20]
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	695b      	ldr	r3, [r3, #20]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	3314      	adds	r3, #20
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	6839      	ldr	r1, [r7, #0]
 800f002:	4610      	mov	r0, r2
 800f004:	4798      	blx	r3
}
 800f006:	bf00      	nop
 800f008:	3708      	adds	r7, #8
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}

0800f00e <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800f00e:	b580      	push	{r7, lr}
 800f010:	b082      	sub	sp, #8
 800f012:	af00      	add	r7, sp, #0
 800f014:	6078      	str	r0, [r7, #4]
 800f016:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	691b      	ldr	r3, [r3, #16]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d009      	beq.n	800f034 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	691a      	ldr	r2, [r3, #16]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	691b      	ldr	r3, [r3, #16]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	3318      	adds	r3, #24
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	6839      	ldr	r1, [r7, #0]
 800f030:	4610      	mov	r0, r2
 800f032:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	695b      	ldr	r3, [r3, #20]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d009      	beq.n	800f050 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	695a      	ldr	r2, [r3, #20]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	695b      	ldr	r3, [r3, #20]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	3318      	adds	r3, #24
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	6839      	ldr	r1, [r7, #0]
 800f04c:	4610      	mov	r0, r2
 800f04e:	4798      	blx	r3
}
 800f050:	bf00      	nop
 800f052:	3708      	adds	r7, #8
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}

0800f058 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b082      	sub	sp, #8
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	691b      	ldr	r3, [r3, #16]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d009      	beq.n	800f07e <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	691a      	ldr	r2, [r3, #16]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	691b      	ldr	r3, [r3, #16]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	331c      	adds	r3, #28
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	6839      	ldr	r1, [r7, #0]
 800f07a:	4610      	mov	r0, r2
 800f07c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	695b      	ldr	r3, [r3, #20]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d009      	beq.n	800f09a <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	695a      	ldr	r2, [r3, #20]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	695b      	ldr	r3, [r3, #20]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	331c      	adds	r3, #28
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	6839      	ldr	r1, [r7, #0]
 800f096:	4610      	mov	r0, r2
 800f098:	4798      	blx	r3
}
 800f09a:	bf00      	nop
 800f09c:	3708      	adds	r7, #8
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b082      	sub	sp, #8
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d009      	beq.n	800f0ca <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	691a      	ldr	r2, [r3, #16]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	691b      	ldr	r3, [r3, #16]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	3320      	adds	r3, #32
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	78f9      	ldrb	r1, [r7, #3]
 800f0c6:	4610      	mov	r0, r2
 800f0c8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	695b      	ldr	r3, [r3, #20]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d009      	beq.n	800f0e6 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	695a      	ldr	r2, [r3, #20]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	695b      	ldr	r3, [r3, #20]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	3320      	adds	r3, #32
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	78f9      	ldrb	r1, [r7, #3]
 800f0e2:	4610      	mov	r0, r2
 800f0e4:	4798      	blx	r3
}
 800f0e6:	bf00      	nop
 800f0e8:	3708      	adds	r7, #8
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}

0800f0ee <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800f0ee:	b580      	push	{r7, lr}
 800f0f0:	b082      	sub	sp, #8
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	691b      	ldr	r3, [r3, #16]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d008      	beq.n	800f110 <_ZN19CompositeTestOutput5colorEv+0x22>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	691a      	ldr	r2, [r3, #16]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	691b      	ldr	r3, [r3, #16]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	3324      	adds	r3, #36	; 0x24
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	4610      	mov	r0, r2
 800f10e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	695b      	ldr	r3, [r3, #20]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d008      	beq.n	800f12a <_ZN19CompositeTestOutput5colorEv+0x3c>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	695a      	ldr	r2, [r3, #20]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	695b      	ldr	r3, [r3, #20]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	3324      	adds	r3, #36	; 0x24
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	4610      	mov	r0, r2
 800f128:	4798      	blx	r3
}
 800f12a:	bf00      	nop
 800f12c:	3708      	adds	r7, #8
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}

0800f132 <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800f132:	b580      	push	{r7, lr}
 800f134:	b082      	sub	sp, #8
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
 800f13a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	691b      	ldr	r3, [r3, #16]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d009      	beq.n	800f158 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	691a      	ldr	r2, [r3, #16]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	691b      	ldr	r3, [r3, #16]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	3328      	adds	r3, #40	; 0x28
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	6839      	ldr	r1, [r7, #0]
 800f154:	4610      	mov	r0, r2
 800f156:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	695b      	ldr	r3, [r3, #20]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d009      	beq.n	800f174 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	695a      	ldr	r2, [r3, #20]
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	695b      	ldr	r3, [r3, #20]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	3328      	adds	r3, #40	; 0x28
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	6839      	ldr	r1, [r7, #0]
 800f170:	4610      	mov	r0, r2
 800f172:	4798      	blx	r3
}
 800f174:	bf00      	nop
 800f176:	3708      	adds	r7, #8
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	691b      	ldr	r3, [r3, #16]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d009      	beq.n	800f1a2 <_ZN19CompositeTestOutput5printEPKc+0x26>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	691a      	ldr	r2, [r3, #16]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	691b      	ldr	r3, [r3, #16]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	332c      	adds	r3, #44	; 0x2c
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	6839      	ldr	r1, [r7, #0]
 800f19e:	4610      	mov	r0, r2
 800f1a0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	695b      	ldr	r3, [r3, #20]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d009      	beq.n	800f1be <_ZN19CompositeTestOutput5printEPKc+0x42>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	695a      	ldr	r2, [r3, #20]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	695b      	ldr	r3, [r3, #20]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	332c      	adds	r3, #44	; 0x2c
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	6839      	ldr	r1, [r7, #0]
 800f1ba:	4610      	mov	r0, r2
 800f1bc:	4798      	blx	r3
}
 800f1be:	bf00      	nop
 800f1c0:	3708      	adds	r7, #8
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b082      	sub	sp, #8
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
 800f1ce:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	691b      	ldr	r3, [r3, #16]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d009      	beq.n	800f1ec <_ZN19CompositeTestOutput5printEl+0x26>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	691a      	ldr	r2, [r3, #16]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	691b      	ldr	r3, [r3, #16]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	3330      	adds	r3, #48	; 0x30
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	6839      	ldr	r1, [r7, #0]
 800f1e8:	4610      	mov	r0, r2
 800f1ea:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	695b      	ldr	r3, [r3, #20]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d009      	beq.n	800f208 <_ZN19CompositeTestOutput5printEl+0x42>
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	695a      	ldr	r2, [r3, #20]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	695b      	ldr	r3, [r3, #20]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	3330      	adds	r3, #48	; 0x30
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	6839      	ldr	r1, [r7, #0]
 800f204:	4610      	mov	r0, r2
 800f206:	4798      	blx	r3
}
 800f208:	bf00      	nop
 800f20a:	3708      	adds	r7, #8
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	691b      	ldr	r3, [r3, #16]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d009      	beq.n	800f236 <_ZN19CompositeTestOutput5printEj+0x26>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	691a      	ldr	r2, [r3, #16]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	691b      	ldr	r3, [r3, #16]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	3334      	adds	r3, #52	; 0x34
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6839      	ldr	r1, [r7, #0]
 800f232:	4610      	mov	r0, r2
 800f234:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	695b      	ldr	r3, [r3, #20]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d009      	beq.n	800f252 <_ZN19CompositeTestOutput5printEj+0x42>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	695a      	ldr	r2, [r3, #20]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	695b      	ldr	r3, [r3, #20]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	3334      	adds	r3, #52	; 0x34
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	6839      	ldr	r1, [r7, #0]
 800f24e:	4610      	mov	r0, r2
 800f250:	4798      	blx	r3
}
 800f252:	bf00      	nop
 800f254:	3708      	adds	r7, #8
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}

0800f25a <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b084      	sub	sp, #16
 800f25e:	af00      	add	r7, sp, #0
 800f260:	60f8      	str	r0, [r7, #12]
 800f262:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	691b      	ldr	r3, [r3, #16]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d00a      	beq.n	800f284 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	691a      	ldr	r2, [r3, #16]
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	691b      	ldr	r3, [r3, #16]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	3338      	adds	r3, #56	; 0x38
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	ed97 0b00 	vldr	d0, [r7]
 800f280:	4610      	mov	r0, r2
 800f282:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	695b      	ldr	r3, [r3, #20]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d00a      	beq.n	800f2a2 <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	695a      	ldr	r2, [r3, #20]
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	695b      	ldr	r3, [r3, #20]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	3338      	adds	r3, #56	; 0x38
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	ed97 0b00 	vldr	d0, [r7]
 800f29e:	4610      	mov	r0, r2
 800f2a0:	4798      	blx	r3
}
 800f2a2:	bf00      	nop
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}

0800f2aa <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800f2aa:	b580      	push	{r7, lr}
 800f2ac:	b082      	sub	sp, #8
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	6078      	str	r0, [r7, #4]
 800f2b2:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	691b      	ldr	r3, [r3, #16]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d009      	beq.n	800f2d0 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	691a      	ldr	r2, [r3, #16]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	691b      	ldr	r3, [r3, #16]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	333c      	adds	r3, #60	; 0x3c
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	6839      	ldr	r1, [r7, #0]
 800f2cc:	4610      	mov	r0, r2
 800f2ce:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	695b      	ldr	r3, [r3, #20]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d009      	beq.n	800f2ec <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	695a      	ldr	r2, [r3, #20]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	695b      	ldr	r3, [r3, #20]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	333c      	adds	r3, #60	; 0x3c
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	6839      	ldr	r1, [r7, #0]
 800f2e8:	4610      	mov	r0, r2
 800f2ea:	4798      	blx	r3
}
 800f2ec:	bf00      	nop
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	691b      	ldr	r3, [r3, #16]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d009      	beq.n	800f31a <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	691a      	ldr	r2, [r3, #16]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	691b      	ldr	r3, [r3, #16]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	3344      	adds	r3, #68	; 0x44
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	6839      	ldr	r1, [r7, #0]
 800f316:	4610      	mov	r0, r2
 800f318:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	695b      	ldr	r3, [r3, #20]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d009      	beq.n	800f336 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	695a      	ldr	r2, [r3, #20]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	695b      	ldr	r3, [r3, #20]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	3344      	adds	r3, #68	; 0x44
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	6839      	ldr	r1, [r7, #0]
 800f332:	4610      	mov	r0, r2
 800f334:	4798      	blx	r3
}
 800f336:	bf00      	nop
 800f338:	3708      	adds	r7, #8
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}

0800f33e <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800f33e:	b580      	push	{r7, lr}
 800f340:	b082      	sub	sp, #8
 800f342:	af00      	add	r7, sp, #0
 800f344:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	691b      	ldr	r3, [r3, #16]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d008      	beq.n	800f360 <_ZN19CompositeTestOutput5flushEv+0x22>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	691a      	ldr	r2, [r3, #16]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	691b      	ldr	r3, [r3, #16]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	334c      	adds	r3, #76	; 0x4c
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4610      	mov	r0, r2
 800f35e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	695b      	ldr	r3, [r3, #20]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d008      	beq.n	800f37a <_ZN19CompositeTestOutput5flushEv+0x3c>
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	695a      	ldr	r2, [r3, #20]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	695b      	ldr	r3, [r3, #20]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	334c      	adds	r3, #76	; 0x4c
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	4610      	mov	r0, r2
 800f378:	4798      	blx	r3
}
 800f37a:	bf00      	nop
 800f37c:	3708      	adds	r7, #8
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}

0800f382 <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800f382:	b480      	push	{r7}
 800f384:	b085      	sub	sp, #20
 800f386:	af00      	add	r7, sp, #0
 800f388:	60f8      	str	r0, [r7, #12]
 800f38a:	60b9      	str	r1, [r7, #8]
 800f38c:	607a      	str	r2, [r7, #4]
    }
 800f38e:	bf00      	nop
 800f390:	3714      	adds	r7, #20
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr

0800f39a <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800f39a:	b480      	push	{r7}
 800f39c:	b085      	sub	sp, #20
 800f39e:	af00      	add	r7, sp, #0
 800f3a0:	60f8      	str	r0, [r7, #12]
 800f3a2:	60b9      	str	r1, [r7, #8]
 800f3a4:	607a      	str	r2, [r7, #4]
    }
 800f3a6:	bf00      	nop
 800f3a8:	3714      	adds	r7, #20
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr
	...

0800f3b4 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
 800f3bc:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800f3be:	4a0b      	ldr	r2, [pc, #44]	; (800f3ec <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	601a      	str	r2, [r3, #0]
 800f3c4:	f000 f9ce 	bl	800f764 <_ZN14NullTestPlugin8instanceEv>
 800f3c8:	4602      	mov	r2, r0
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	605a      	str	r2, [r3, #4]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	3308      	adds	r3, #8
 800f3d2:	6839      	ldr	r1, [r7, #0]
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7fb fb46 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2201      	movs	r2, #1
 800f3de:	741a      	strb	r2, [r3, #16]
{
}
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3708      	adds	r7, #8
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	0802589c 	.word	0x0802589c

0800f3f0 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800f3fa:	4a0a      	ldr	r2, [pc, #40]	; (800f424 <_ZN10TestPluginC1EPS_+0x34>)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	601a      	str	r2, [r3, #0]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	683a      	ldr	r2, [r7, #0]
 800f404:	605a      	str	r2, [r3, #4]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	3308      	adds	r3, #8
 800f40a:	4907      	ldr	r1, [pc, #28]	; (800f428 <_ZN10TestPluginC1EPS_+0x38>)
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7fb fad6 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2201      	movs	r2, #1
 800f416:	741a      	strb	r2, [r3, #16]
{
}
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	4618      	mov	r0, r3
 800f41c:	3708      	adds	r7, #8
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	0802589c 	.word	0x0802589c
 800f428:	080227c8 	.word	0x080227c8

0800f42c <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	4a06      	ldr	r2, [pc, #24]	; (800f450 <_ZN10TestPluginD1Ev+0x24>)
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	601a      	str	r2, [r3, #0]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	3308      	adds	r3, #8
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fb fe75 	bl	800b12e <_ZN12SimpleStringD1Ev>
{
}
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	4618      	mov	r0, r3
 800f448:	3708      	adds	r7, #8
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	0802589c 	.word	0x0802589c

0800f454 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
}
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f7ff ffe5 	bl	800f42c <_ZN10TestPluginD1Ev>
 800f462:	2114      	movs	r1, #20
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f7f8 fefb 	bl	8008260 <_ZdlPvj>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	4618      	mov	r0, r3
 800f46e:	3708      	adds	r7, #8
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800f474:	b480      	push	{r7}
 800f476:	b083      	sub	sp, #12
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	683a      	ldr	r2, [r7, #0]
 800f482:	605a      	str	r2, [r3, #4]
    return this;
 800f484:	687b      	ldr	r3, [r7, #4]
}
 800f486:	4618      	mov	r0, r3
 800f488:	370c      	adds	r7, #12
 800f48a:	46bd      	mov	sp, r7
 800f48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f490:	4770      	bx	lr

0800f492 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800f492:	b580      	push	{r7, lr}
 800f494:	b084      	sub	sp, #16
 800f496:	af00      	add	r7, sp, #0
 800f498:	60f8      	str	r0, [r7, #12]
 800f49a:	60b9      	str	r1, [r7, #8]
 800f49c:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	7c1b      	ldrb	r3, [r3, #16]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d007      	beq.n	800f4b6 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	3308      	adds	r3, #8
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	687a      	ldr	r2, [r7, #4]
 800f4b0:	68b9      	ldr	r1, [r7, #8]
 800f4b2:	68f8      	ldr	r0, [r7, #12]
 800f4b4:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	6858      	ldr	r0, [r3, #4]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	3314      	adds	r3, #20
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	68b9      	ldr	r1, [r7, #8]
 800f4c8:	4798      	blx	r3
}
 800f4ca:	bf00      	nop
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}

0800f4d2 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800f4d2:	b580      	push	{r7, lr}
 800f4d4:	b084      	sub	sp, #16
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	60f8      	str	r0, [r7, #12]
 800f4da:	60b9      	str	r1, [r7, #8]
 800f4dc:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	6858      	ldr	r0, [r3, #4]
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	3318      	adds	r3, #24
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	68b9      	ldr	r1, [r7, #8]
 800f4f0:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	7c1b      	ldrb	r3, [r3, #16]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d007      	beq.n	800f50a <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	330c      	adds	r3, #12
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	68b9      	ldr	r1, [r7, #8]
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	4798      	blx	r3
}
 800f50a:	bf00      	nop
 800f50c:	3710      	adds	r7, #16
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}

0800f512 <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800f512:	b590      	push	{r4, r7, lr}
 800f514:	b085      	sub	sp, #20
 800f516:	af00      	add	r7, sp, #0
 800f518:	60f8      	str	r0, [r7, #12]
 800f51a:	60b9      	str	r1, [r7, #8]
 800f51c:	607a      	str	r2, [r7, #4]
 800f51e:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	331c      	adds	r3, #28
 800f526:	681c      	ldr	r4, [r3, #0]
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	68b9      	ldr	r1, [r7, #8]
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	47a0      	blx	r4
 800f532:	4603      	mov	r3, r0
}
 800f534:	4618      	mov	r0, r3
 800f536:	3714      	adds	r7, #20
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd90      	pop	{r4, r7, pc}

0800f53c <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800f53c:	b590      	push	{r4, r7, lr}
 800f53e:	b085      	sub	sp, #20
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]
 800f548:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	3310      	adds	r3, #16
 800f550:	681c      	ldr	r4, [r3, #0]
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	68b9      	ldr	r1, [r7, #8]
 800f558:	68f8      	ldr	r0, [r7, #12]
 800f55a:	47a0      	blx	r4
 800f55c:	4603      	mov	r3, r0
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d001      	beq.n	800f566 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800f562:	2301      	movs	r3, #1
 800f564:	e011      	b.n	800f58a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	685b      	ldr	r3, [r3, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d00c      	beq.n	800f588 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	6858      	ldr	r0, [r3, #4]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	685b      	ldr	r3, [r3, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	331c      	adds	r3, #28
 800f57a:	681c      	ldr	r4, [r3, #0]
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	68b9      	ldr	r1, [r7, #8]
 800f582:	47a0      	blx	r4
 800f584:	4603      	mov	r3, r0
 800f586:	e000      	b.n	800f58a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800f588:	2300      	movs	r3, #0
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3714      	adds	r7, #20
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd90      	pop	{r4, r7, pc}

0800f592 <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800f592:	b480      	push	{r7}
 800f594:	b083      	sub	sp, #12
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
    return name_;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	3308      	adds	r3, #8
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	370c      	adds	r7, #12
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr

0800f5aa <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800f5aa:	b580      	push	{r7, lr}
 800f5ac:	b082      	sub	sp, #8
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
 800f5b2:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	3308      	adds	r3, #8
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	6838      	ldr	r0, [r7, #0]
 800f5bc:	f7fb fdc3 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d001      	beq.n	800f5ca <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	e00d      	b.n	800f5e6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d007      	beq.n	800f5e2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	685b      	ldr	r3, [r3, #4]
 800f5d6:	6839      	ldr	r1, [r7, #0]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7ff ffe6 	bl	800f5aa <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	e001      	b.n	800f5e6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	685b      	ldr	r3, [r3, #4]
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3708      	adds	r7, #8
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}

0800f5ee <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800f5ee:	b480      	push	{r7}
 800f5f0:	b083      	sub	sp, #12
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
    return next_;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	685b      	ldr	r3, [r3, #4]
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	370c      	adds	r7, #12
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr

0800f606 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b084      	sub	sp, #16
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
 800f60e:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800f610:	2300      	movs	r3, #0
 800f612:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d00e      	beq.n	800f63a <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	4618      	mov	r0, r3
 800f622:	f7ff ffb6 	bl	800f592 <_ZN10TestPlugin7getNameEv>
 800f626:	4603      	mov	r3, r0
 800f628:	6839      	ldr	r1, [r7, #0]
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7fb fd8b 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	d001      	beq.n	800f63a <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800f636:	2301      	movs	r3, #1
 800f638:	e000      	b.n	800f63c <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800f63a:	2300      	movs	r3, #0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d007      	beq.n	800f650 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	685a      	ldr	r2, [r3, #4]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800f650:	68fb      	ldr	r3, [r7, #12]
}
 800f652:	4618      	mov	r0, r3
 800f654:	3710      	adds	r7, #16
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}

0800f65a <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 800f65a:	b480      	push	{r7}
 800f65c:	b083      	sub	sp, #12
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2200      	movs	r2, #0
 800f666:	741a      	strb	r2, [r3, #16]
}
 800f668:	bf00      	nop
 800f66a:	370c      	adds	r7, #12
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr

0800f674 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2201      	movs	r2, #1
 800f680:	741a      	strb	r2, [r3, #16]
}
 800f682:	bf00      	nop
 800f684:	370c      	adds	r7, #12
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr

0800f68e <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 800f68e:	b480      	push	{r7}
 800f690:	b083      	sub	sp, #12
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
    return enabled_;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	7c1b      	ldrb	r3, [r3, #16]
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	370c      	adds	r7, #12
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr
	...

0800f6a8 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b082      	sub	sp, #8
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6839      	ldr	r1, [r7, #0]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7ff fe7c 	bl	800f3b4 <_ZN10TestPluginC1ERK12SimpleString>
 800f6bc:	4a05      	ldr	r2, [pc, #20]	; (800f6d4 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 800f6c2:	4b05      	ldr	r3, [pc, #20]	; (800f6d8 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	601a      	str	r2, [r3, #0]
}
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3708      	adds	r7, #8
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	08025858 	.word	0x08025858
 800f6d8:	200007a8 	.word	0x200007a8

0800f6dc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b087      	sub	sp, #28
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	60f8      	str	r0, [r7, #12]
 800f6e4:	60b9      	str	r1, [r7, #8]
 800f6e6:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800f6e8:	4b0e      	ldr	r3, [pc, #56]	; (800f724 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	3b01      	subs	r3, #1
 800f6ee:	617b      	str	r3, [r7, #20]
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	db0d      	blt.n	800f712 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 800f6f6:	4a0c      	ldr	r2, [pc, #48]	; (800f728 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f6fe:	490a      	ldr	r1, [pc, #40]	; (800f728 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	00db      	lsls	r3, r3, #3
 800f704:	440b      	add	r3, r1
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	3b01      	subs	r3, #1
 800f70e:	617b      	str	r3, [r7, #20]
 800f710:	e7ee      	b.n	800f6f0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 800f712:	4b04      	ldr	r3, [pc, #16]	; (800f724 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800f714:	2200      	movs	r2, #0
 800f716:	601a      	str	r2, [r3, #0]
}
 800f718:	bf00      	nop
 800f71a:	371c      	adds	r7, #28
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr
 800f724:	200007a8 	.word	0x200007a8
 800f728:	200007ac 	.word	0x200007ac

0800f72c <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b082      	sub	sp, #8
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2100      	movs	r1, #0
 800f738:	4618      	mov	r0, r3
 800f73a:	f7ff fe59 	bl	800f3f0 <_ZN10TestPluginC1EPS_>
 800f73e:	4a04      	ldr	r2, [pc, #16]	; (800f750 <_ZN14NullTestPluginC1Ev+0x24>)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	601a      	str	r2, [r3, #0]
{
}
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	4618      	mov	r0, r3
 800f748:	3708      	adds	r7, #8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	08025814 	.word	0x08025814

0800f754 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 800f754:	b580      	push	{r7, lr}
 800f756:	af00      	add	r7, sp, #0
 800f758:	4801      	ldr	r0, [pc, #4]	; (800f760 <__tcf_0+0xc>)
 800f75a:	f000 f849 	bl	800f7f0 <_ZN14NullTestPluginD1Ev>
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	200008ac 	.word	0x200008ac

0800f764 <_ZN14NullTestPlugin8instanceEv>:
{
 800f764:	b580      	push	{r7, lr}
 800f766:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 800f768:	4b12      	ldr	r3, [pc, #72]	; (800f7b4 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	f3bf 8f5b 	dmb	ish
 800f770:	b2db      	uxtb	r3, r3
 800f772:	f003 0301 	and.w	r3, r3, #1
 800f776:	2b00      	cmp	r3, #0
 800f778:	bf0c      	ite	eq
 800f77a:	2301      	moveq	r3, #1
 800f77c:	2300      	movne	r3, #0
 800f77e:	b2db      	uxtb	r3, r3
 800f780:	2b00      	cmp	r3, #0
 800f782:	d013      	beq.n	800f7ac <_ZN14NullTestPlugin8instanceEv+0x48>
 800f784:	480b      	ldr	r0, [pc, #44]	; (800f7b4 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800f786:	f00d ffdb 	bl	801d740 <__cxa_guard_acquire>
 800f78a:	4603      	mov	r3, r0
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	bf14      	ite	ne
 800f790:	2301      	movne	r3, #1
 800f792:	2300      	moveq	r3, #0
 800f794:	b2db      	uxtb	r3, r3
 800f796:	2b00      	cmp	r3, #0
 800f798:	d008      	beq.n	800f7ac <_ZN14NullTestPlugin8instanceEv+0x48>
 800f79a:	4807      	ldr	r0, [pc, #28]	; (800f7b8 <_ZN14NullTestPlugin8instanceEv+0x54>)
 800f79c:	f7ff ffc6 	bl	800f72c <_ZN14NullTestPluginC1Ev>
 800f7a0:	4804      	ldr	r0, [pc, #16]	; (800f7b4 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800f7a2:	f00d ffd9 	bl	801d758 <__cxa_guard_release>
 800f7a6:	4805      	ldr	r0, [pc, #20]	; (800f7bc <_ZN14NullTestPlugin8instanceEv+0x58>)
 800f7a8:	f00d fffd 	bl	801d7a6 <atexit>
    return &_instance;
 800f7ac:	4b02      	ldr	r3, [pc, #8]	; (800f7b8 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	200008c0 	.word	0x200008c0
 800f7b8:	200008ac 	.word	0x200008ac
 800f7bc:	0800f755 	.word	0x0800f755

0800f7c0 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b085      	sub	sp, #20
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
}
 800f7cc:	bf00      	nop
 800f7ce:	3714      	adds	r7, #20
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr

0800f7d8 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b085      	sub	sp, #20
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	60b9      	str	r1, [r7, #8]
 800f7e2:	607a      	str	r2, [r7, #4]
}
 800f7e4:	bf00      	nop
 800f7e6:	3714      	adds	r7, #20
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr

0800f7f0 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b082      	sub	sp, #8
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
 800f7f8:	4a05      	ldr	r2, [pc, #20]	; (800f810 <_ZN14NullTestPluginD1Ev+0x20>)
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	601a      	str	r2, [r3, #0]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4618      	mov	r0, r3
 800f802:	f7ff fe13 	bl	800f42c <_ZN10TestPluginD1Ev>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4618      	mov	r0, r3
 800f80a:	3708      	adds	r7, #8
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	08025814 	.word	0x08025814

0800f814 <_ZN14NullTestPluginD0Ev>:
 800f814:	b580      	push	{r7, lr}
 800f816:	b082      	sub	sp, #8
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f7ff ffe7 	bl	800f7f0 <_ZN14NullTestPluginD1Ev>
 800f822:	2114      	movs	r1, #20
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f7f8 fd1b 	bl	8008260 <_ZdlPvj>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4618      	mov	r0, r3
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 800f83c:	4a0f      	ldr	r2, [pc, #60]	; (800f87c <_ZN12TestRegistryC1Ev+0x48>)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	601a      	str	r2, [r3, #0]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2200      	movs	r2, #0
 800f846:	605a      	str	r2, [r3, #4]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2200      	movs	r2, #0
 800f84c:	609a      	str	r2, [r3, #8]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2200      	movs	r2, #0
 800f852:	60da      	str	r2, [r3, #12]
 800f854:	f7ff ff86 	bl	800f764 <_ZN14NullTestPlugin8instanceEv>
 800f858:	4602      	mov	r2, r0
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	611a      	str	r2, [r3, #16]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2200      	movs	r2, #0
 800f862:	751a      	strb	r2, [r3, #20]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2200      	movs	r2, #0
 800f868:	619a      	str	r2, [r3, #24]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2200      	movs	r2, #0
 800f86e:	771a      	strb	r2, [r3, #28]
{
}
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4618      	mov	r0, r3
 800f874:	3708      	adds	r7, #8
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	080258e0 	.word	0x080258e0

0800f880 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 800f880:	b480      	push	{r7}
 800f882:	b083      	sub	sp, #12
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	4a04      	ldr	r2, [pc, #16]	; (800f89c <_ZN12TestRegistryD1Ev+0x1c>)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	601a      	str	r2, [r3, #0]
{
}
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	4618      	mov	r0, r3
 800f892:	370c      	adds	r7, #12
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr
 800f89c:	080258e0 	.word	0x080258e0

0800f8a0 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
}
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7ff ffe9 	bl	800f880 <_ZN12TestRegistryD1Ev>
 800f8ae:	2120      	movs	r1, #32
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f7f8 fcd5 	bl	8008260 <_ZdlPvj>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3708      	adds	r7, #8
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	3308      	adds	r3, #8
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	6852      	ldr	r2, [r2, #4]
 800f8d6:	4611      	mov	r1, r2
 800f8d8:	6838      	ldr	r0, [r7, #0]
 800f8da:	4798      	blx	r3
 800f8dc:	4602      	mov	r2, r0
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	605a      	str	r2, [r3, #4]
}
 800f8e2:	bf00      	nop
 800f8e4:	3708      	adds	r7, #8
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}

0800f8ea <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 800f8ea:	b580      	push	{r7, lr}
 800f8ec:	b084      	sub	sp, #16
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	6078      	str	r0, [r7, #4]
 800f8f2:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	3308      	adds	r3, #8
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	6838      	ldr	r0, [r7, #0]
 800f902:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	60bb      	str	r3, [r7, #8]
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d05c      	beq.n	800f9ca <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	7d1b      	ldrb	r3, [r3, #20]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d005      	beq.n	800f924 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	3380      	adds	r3, #128	; 0x80
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	68b8      	ldr	r0, [r7, #8]
 800f922:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	7f1b      	ldrb	r3, [r3, #28]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d005      	beq.n	800f938 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	3384      	adds	r3, #132	; 0x84
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	68b8      	ldr	r0, [r7, #8]
 800f936:	4798      	blx	r3

        if (groupStart) {
 800f938:	7bfb      	ldrb	r3, [r7, #15]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d008      	beq.n	800f950 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	3310      	adds	r3, #16
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	68b9      	ldr	r1, [r7, #8]
 800f948:	6838      	ldr	r0, [r7, #0]
 800f94a:	4798      	blx	r3
            groupStart = false;
 800f94c:	2300      	movs	r3, #0
 800f94e:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	3320      	adds	r3, #32
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	6838      	ldr	r0, [r7, #0]
 800f95a:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 800f95c:	683a      	ldr	r2, [r7, #0]
 800f95e:	68b9      	ldr	r1, [r7, #8]
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f000 fb79 	bl	8010058 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d016      	beq.n	800f99a <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	3318      	adds	r3, #24
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	68b9      	ldr	r1, [r7, #8]
 800f976:	6838      	ldr	r0, [r7, #0]
 800f978:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	3390      	adds	r3, #144	; 0x90
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	687a      	ldr	r2, [r7, #4]
 800f984:	6911      	ldr	r1, [r2, #16]
 800f986:	683a      	ldr	r2, [r7, #0]
 800f988:	68b8      	ldr	r0, [r7, #8]
 800f98a:	4798      	blx	r3
            result.currentTestEnded(test);
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	331c      	adds	r3, #28
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	68b9      	ldr	r1, [r7, #8]
 800f996:	6838      	ldr	r0, [r7, #0]
 800f998:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 800f99a:	68b9      	ldr	r1, [r7, #8]
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f000 fa5b 	bl	800fe58 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d008      	beq.n	800f9ba <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	3314      	adds	r3, #20
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	68b9      	ldr	r1, [r7, #8]
 800f9b6:	6838      	ldr	r0, [r7, #0]
 800f9b8:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	330c      	adds	r3, #12
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	68b8      	ldr	r0, [r7, #8]
 800f9c4:	4798      	blx	r3
 800f9c6:	60b8      	str	r0, [r7, #8]
 800f9c8:	e79f      	b.n	800f90a <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	330c      	adds	r3, #12
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	6838      	ldr	r0, [r7, #0]
 800f9d4:	4798      	blx	r3
    currentRepetition_++;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	699b      	ldr	r3, [r3, #24]
 800f9da:	1c5a      	adds	r2, r3, #1
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	619a      	str	r2, [r3, #24]
}
 800f9e0:	bf00      	nop
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 800f9e8:	b590      	push	{r4, r7, lr}
 800f9ea:	b08f      	sub	sp, #60	; 0x3c
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 800f9f2:	f107 0314 	add.w	r3, r7, #20
 800f9f6:	4953      	ldr	r1, [pc, #332]	; (800fb44 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7fa ffe0 	bl	800a9be <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	637b      	str	r3, [r7, #52]	; 0x34
 800fa04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d04d      	beq.n	800faa6 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 800fa0a:	f107 030c 	add.w	r3, r7, #12
 800fa0e:	494d      	ldr	r1, [pc, #308]	; (800fb44 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7fa ffd4 	bl	800a9be <_ZN12SimpleStringC1EPKc>
        gname += "#";
 800fa16:	f107 030c 	add.w	r3, r7, #12
 800fa1a:	494b      	ldr	r1, [pc, #300]	; (800fb48 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fb fc15 	bl	800b24c <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 800fa22:	f107 031c 	add.w	r3, r7, #28
 800fa26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f001 f9d2 	bl	8010dd2 <_ZNK10UtestShell8getGroupEv>
 800fa2e:	f107 021c 	add.w	r2, r7, #28
 800fa32:	f107 030c 	add.w	r3, r7, #12
 800fa36:	4611      	mov	r1, r2
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fb fbf5 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800fa3e:	f107 031c 	add.w	r3, r7, #28
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7fb fb73 	bl	800b12e <_ZN12SimpleStringD1Ev>
        gname += "#";
 800fa48:	f107 030c 	add.w	r3, r7, #12
 800fa4c:	493e      	ldr	r1, [pc, #248]	; (800fb48 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7fb fbfc 	bl	800b24c <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 800fa54:	f107 020c 	add.w	r2, r7, #12
 800fa58:	f107 0314 	add.w	r3, r7, #20
 800fa5c:	4611      	mov	r1, r2
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7fb f82b 	bl	800aaba <_ZNK12SimpleString8containsERKS_>
 800fa64:	4603      	mov	r3, r0
 800fa66:	f083 0301 	eor.w	r3, r3, #1
 800fa6a:	b2db      	uxtb	r3, r3
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d00d      	beq.n	800fa8c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 800fa70:	f107 020c 	add.w	r2, r7, #12
 800fa74:	f107 0314 	add.w	r3, r7, #20
 800fa78:	4611      	mov	r1, r2
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7fb fbd4 	bl	800b228 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 800fa80:	f107 0314 	add.w	r3, r7, #20
 800fa84:	4931      	ldr	r1, [pc, #196]	; (800fb4c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7fb fbe0 	bl	800b24c <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 800fa8c:	f107 030c 	add.w	r3, r7, #12
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7fb fb4c 	bl	800b12e <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800fa96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	330c      	adds	r3, #12
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800faa0:	4798      	blx	r3
 800faa2:	6378      	str	r0, [r7, #52]	; 0x34
 800faa4:	e7ae      	b.n	800fa04 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 800faa6:	f107 0314 	add.w	r3, r7, #20
 800faaa:	4a26      	ldr	r2, [pc, #152]	; (800fb44 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800faac:	4926      	ldr	r1, [pc, #152]	; (800fb48 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fb f99a 	bl	800ade8 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 800fab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fab8:	4924      	ldr	r1, [pc, #144]	; (800fb4c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800faba:	4618      	mov	r0, r3
 800fabc:	f7fa ff7f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800fac0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fac4:	f107 0314 	add.w	r3, r7, #20
 800fac8:	4611      	mov	r1, r2
 800faca:	4618      	mov	r0, r3
 800facc:	f7fb f874 	bl	800abb8 <_ZNK12SimpleString8endsWithERKS_>
 800fad0:	4603      	mov	r3, r0
 800fad2:	461c      	mov	r4, r3
 800fad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fad8:	4618      	mov	r0, r3
 800fada:	f7fb fb28 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800fade:	2c00      	cmp	r4, #0
 800fae0:	d01a      	beq.n	800fb18 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 800fae2:	f107 0314 	add.w	r3, r7, #20
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fb fb00 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800faec:	4603      	mov	r3, r0
 800faee:	3b01      	subs	r3, #1
 800faf0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800faf4:	f107 0114 	add.w	r1, r7, #20
 800faf8:	2200      	movs	r2, #0
 800fafa:	f7fb fc21 	bl	800b340 <_ZNK12SimpleString9subStringEjj>
 800fafe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fb02:	f107 0314 	add.w	r3, r7, #20
 800fb06:	4611      	mov	r1, r2
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7fa ffc4 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800fb0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7fb fb0b 	bl	800b12e <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	3338      	adds	r3, #56	; 0x38
 800fb1e:	681c      	ldr	r4, [r3, #0]
 800fb20:	f107 0314 	add.w	r3, r7, #20
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7fb fad5 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	6838      	ldr	r0, [r7, #0]
 800fb30:	47a0      	blx	r4
    SimpleString groupList;
 800fb32:	f107 0314 	add.w	r3, r7, #20
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7fb faf9 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800fb3c:	bf00      	nop
 800fb3e:	373c      	adds	r7, #60	; 0x3c
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd90      	pop	{r4, r7, pc}
 800fb44:	08022818 	.word	0x08022818
 800fb48:	0802281c 	.word	0x0802281c
 800fb4c:	08022820 	.word	0x08022820

0800fb50 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 800fb50:	b590      	push	{r4, r7, lr}
 800fb52:	b091      	sub	sp, #68	; 0x44
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 800fb5a:	f107 0314 	add.w	r3, r7, #20
 800fb5e:	4964      	ldr	r1, [pc, #400]	; (800fcf0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7fa ff2c 	bl	800a9be <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d06e      	beq.n	800fc50 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 800fb72:	683a      	ldr	r2, [r7, #0]
 800fb74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 fa6e 	bl	8010058 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d05e      	beq.n	800fc40 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 800fb82:	f107 030c 	add.w	r3, r7, #12
 800fb86:	495a      	ldr	r1, [pc, #360]	; (800fcf0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7fa ff18 	bl	800a9be <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 800fb8e:	f107 030c 	add.w	r3, r7, #12
 800fb92:	4958      	ldr	r1, [pc, #352]	; (800fcf4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fb fb59 	bl	800b24c <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 800fb9a:	f107 031c 	add.w	r3, r7, #28
 800fb9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fba0:	4618      	mov	r0, r3
 800fba2:	f001 f916 	bl	8010dd2 <_ZNK10UtestShell8getGroupEv>
 800fba6:	f107 021c 	add.w	r2, r7, #28
 800fbaa:	f107 030c 	add.w	r3, r7, #12
 800fbae:	4611      	mov	r1, r2
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7fb fb39 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800fbb6:	f107 031c 	add.w	r3, r7, #28
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fb fab7 	bl	800b12e <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 800fbc0:	f107 030c 	add.w	r3, r7, #12
 800fbc4:	494c      	ldr	r1, [pc, #304]	; (800fcf8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7fb fb40 	bl	800b24c <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 800fbcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fbd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f001 f8ee 	bl	8010db4 <_ZNK10UtestShell7getNameEv>
 800fbd8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fbdc:	f107 030c 	add.w	r3, r7, #12
 800fbe0:	4611      	mov	r1, r2
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f7fb fb20 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800fbe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fbec:	4618      	mov	r0, r3
 800fbee:	f7fb fa9e 	bl	800b12e <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 800fbf2:	f107 030c 	add.w	r3, r7, #12
 800fbf6:	493f      	ldr	r1, [pc, #252]	; (800fcf4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7fb fb27 	bl	800b24c <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 800fbfe:	f107 020c 	add.w	r2, r7, #12
 800fc02:	f107 0314 	add.w	r3, r7, #20
 800fc06:	4611      	mov	r1, r2
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7fa ff56 	bl	800aaba <_ZNK12SimpleString8containsERKS_>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	f083 0301 	eor.w	r3, r3, #1
 800fc14:	b2db      	uxtb	r3, r3
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d00d      	beq.n	800fc36 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 800fc1a:	f107 020c 	add.w	r2, r7, #12
 800fc1e:	f107 0314 	add.w	r3, r7, #20
 800fc22:	4611      	mov	r1, r2
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7fb faff 	bl	800b228 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 800fc2a:	f107 0314 	add.w	r3, r7, #20
 800fc2e:	4933      	ldr	r1, [pc, #204]	; (800fcfc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7fb fb0b 	bl	800b24c <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 800fc36:	f107 030c 	add.w	r3, r7, #12
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7fb fa77 	bl	800b12e <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800fc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	330c      	adds	r3, #12
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fc4a:	4798      	blx	r3
 800fc4c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800fc4e:	e78d      	b.n	800fb6c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 800fc50:	f107 0314 	add.w	r3, r7, #20
 800fc54:	4a26      	ldr	r2, [pc, #152]	; (800fcf0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800fc56:	4927      	ldr	r1, [pc, #156]	; (800fcf4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7fb f8c5 	bl	800ade8 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 800fc5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fc62:	4926      	ldr	r1, [pc, #152]	; (800fcfc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7fa feaa 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 800fc6a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fc6e:	f107 0314 	add.w	r3, r7, #20
 800fc72:	4611      	mov	r1, r2
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7fa ff9f 	bl	800abb8 <_ZNK12SimpleString8endsWithERKS_>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	461c      	mov	r4, r3
 800fc7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7fb fa53 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800fc88:	2c00      	cmp	r4, #0
 800fc8a:	d01a      	beq.n	800fcc2 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 800fc8c:	f107 0314 	add.w	r3, r7, #20
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7fb fa2b 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 800fc96:	4603      	mov	r3, r0
 800fc98:	3b01      	subs	r3, #1
 800fc9a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800fc9e:	f107 0114 	add.w	r1, r7, #20
 800fca2:	2200      	movs	r2, #0
 800fca4:	f7fb fb4c 	bl	800b340 <_ZNK12SimpleString9subStringEjj>
 800fca8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800fcac:	f107 0314 	add.w	r3, r7, #20
 800fcb0:	4611      	mov	r1, r2
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7fa feef 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 800fcb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7fb fa36 	bl	800b12e <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	3338      	adds	r3, #56	; 0x38
 800fcc8:	681c      	ldr	r4, [r3, #0]
 800fcca:	f107 0314 	add.w	r3, r7, #20
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7fb fa00 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	6838      	ldr	r0, [r7, #0]
 800fcda:	47a0      	blx	r4
    SimpleString groupAndNameList;
 800fcdc:	f107 0314 	add.w	r3, r7, #20
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7fb fa24 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800fce6:	bf00      	nop
 800fce8:	3744      	adds	r7, #68	; 0x44
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd90      	pop	{r4, r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	08022818 	.word	0x08022818
 800fcf4:	0802281c 	.word	0x0802281c
 800fcf8:	08022824 	.word	0x08022824
 800fcfc:	08022820 	.word	0x08022820

0800fd00 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 800fd00:	b590      	push	{r4, r7, lr}
 800fd02:	b091      	sub	sp, #68	; 0x44
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 800fd0a:	f107 0314 	add.w	r3, r7, #20
 800fd0e:	494f      	ldr	r1, [pc, #316]	; (800fe4c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800fd10:	4618      	mov	r0, r3
 800fd12:	f7fa fe54 	bl	800a9be <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d07d      	beq.n	800fe1e <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 800fd22:	f107 030c 	add.w	r3, r7, #12
 800fd26:	4949      	ldr	r1, [pc, #292]	; (800fe4c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7fa fe48 	bl	800a9be <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 800fd2e:	f107 031c 	add.w	r3, r7, #28
 800fd32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd34:	4618      	mov	r0, r3
 800fd36:	f001 f84c 	bl	8010dd2 <_ZNK10UtestShell8getGroupEv>
 800fd3a:	f107 021c 	add.w	r2, r7, #28
 800fd3e:	f107 030c 	add.w	r3, r7, #12
 800fd42:	4611      	mov	r1, r2
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7fb fa6f 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800fd4a:	f107 031c 	add.w	r3, r7, #28
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7fb f9ed 	bl	800b12e <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800fd54:	f107 030c 	add.w	r3, r7, #12
 800fd58:	493d      	ldr	r1, [pc, #244]	; (800fe50 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7fb fa76 	bl	800b24c <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 800fd60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd66:	4618      	mov	r0, r3
 800fd68:	f001 f824 	bl	8010db4 <_ZNK10UtestShell7getNameEv>
 800fd6c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fd70:	f107 030c 	add.w	r3, r7, #12
 800fd74:	4611      	mov	r1, r2
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fb fa56 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800fd7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7fb f9d4 	bl	800b12e <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800fd86:	f107 030c 	add.w	r3, r7, #12
 800fd8a:	4931      	ldr	r1, [pc, #196]	; (800fe50 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7fb fa5d 	bl	800b24c <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 800fd92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fd96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f001 f8dc 	bl	8010f56 <_ZNK10UtestShell7getFileEv>
 800fd9e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fda2:	f107 030c 	add.w	r3, r7, #12
 800fda6:	4611      	mov	r1, r2
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7fb fa3d 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800fdae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7fb f9bb 	bl	800b12e <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800fdb8:	f107 030c 	add.w	r3, r7, #12
 800fdbc:	4924      	ldr	r1, [pc, #144]	; (800fe50 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7fb fa44 	bl	800b24c <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 800fdc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fdc6:	f001 f8d5 	bl	8010f74 <_ZNK10UtestShell13getLineNumberEv>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	461a      	mov	r2, r3
 800fdce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fdd2:	4920      	ldr	r1, [pc, #128]	; (800fe54 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7fb feb1 	bl	800bb3c <_Z16StringFromFormatPKcz>
 800fdda:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800fdde:	f107 030c 	add.w	r3, r7, #12
 800fde2:	4611      	mov	r1, r2
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7fb fa1f 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 800fdea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7fb f99d 	bl	800b12e <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 800fdf4:	f107 020c 	add.w	r2, r7, #12
 800fdf8:	f107 0314 	add.w	r3, r7, #20
 800fdfc:	4611      	mov	r1, r2
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7fb fa12 	bl	800b228 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 800fe04:	f107 030c 	add.w	r3, r7, #12
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fb f990 	bl	800b12e <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800fe0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	330c      	adds	r3, #12
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fe18:	4798      	blx	r3
 800fe1a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800fe1c:	e77e      	b.n	800fd1c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	3338      	adds	r3, #56	; 0x38
 800fe24:	681c      	ldr	r4, [r3, #0]
 800fe26:	f107 0314 	add.w	r3, r7, #20
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7fb f952 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 800fe30:	4603      	mov	r3, r0
 800fe32:	4619      	mov	r1, r3
 800fe34:	6838      	ldr	r0, [r7, #0]
 800fe36:	47a0      	blx	r4
    SimpleString testLocations;
 800fe38:	f107 0314 	add.w	r3, r7, #20
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7fb f976 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 800fe42:	bf00      	nop
 800fe44:	3744      	adds	r7, #68	; 0x44
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd90      	pop	{r4, r7, pc}
 800fe4a:	bf00      	nop
 800fe4c:	08022818 	.word	0x08022818
 800fe50:	08022824 	.word	0x08022824
 800fe54:	08022828 	.word	0x08022828

0800fe58 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 800fe58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe5a:	b087      	sub	sp, #28
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 800fe62:	2400      	movs	r4, #0
 800fe64:	2500      	movs	r5, #0
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d028      	beq.n	800febe <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	330c      	adds	r3, #12
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	6838      	ldr	r0, [r7, #0]
 800fe76:	4798      	blx	r3
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d01f      	beq.n	800febe <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800fe7e:	f107 0308 	add.w	r3, r7, #8
 800fe82:	6839      	ldr	r1, [r7, #0]
 800fe84:	4618      	mov	r0, r3
 800fe86:	f000 ffa4 	bl	8010dd2 <_ZNK10UtestShell8getGroupEv>
 800fe8a:	2401      	movs	r4, #1
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	330c      	adds	r3, #12
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	6838      	ldr	r0, [r7, #0]
 800fe96:	4798      	blx	r3
 800fe98:	4602      	mov	r2, r0
 800fe9a:	f107 0310 	add.w	r3, r7, #16
 800fe9e:	4611      	mov	r1, r2
 800fea0:	4618      	mov	r0, r3
 800fea2:	f000 ff96 	bl	8010dd2 <_ZNK10UtestShell8getGroupEv>
 800fea6:	2501      	movs	r5, #1
 800fea8:	f107 0210 	add.w	r2, r7, #16
 800feac:	f107 0308 	add.w	r3, r7, #8
 800feb0:	4611      	mov	r1, r2
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7fb f98c 	bl	800b1d0 <_ZneRK12SimpleStringS1_>
 800feb8:	4603      	mov	r3, r0
 800feba:	2b00      	cmp	r3, #0
 800febc:	d001      	beq.n	800fec2 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 800febe:	2601      	movs	r6, #1
 800fec0:	e000      	b.n	800fec4 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 800fec2:	2600      	movs	r6, #0
 800fec4:	2d00      	cmp	r5, #0
 800fec6:	d004      	beq.n	800fed2 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 800fec8:	f107 0310 	add.w	r3, r7, #16
 800fecc:	4618      	mov	r0, r3
 800fece:	f7fb f92e 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800fed2:	2c00      	cmp	r4, #0
 800fed4:	d004      	beq.n	800fee0 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 800fed6:	f107 0308 	add.w	r3, r7, #8
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fb f927 	bl	800b12e <_ZN12SimpleStringD1Ev>
 800fee0:	4633      	mov	r3, r6
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	371c      	adds	r7, #28
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800feea <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 800feea:	b580      	push	{r7, lr}
 800feec:	b082      	sub	sp, #8
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d00a      	beq.n	800ff10 <_ZN12TestRegistry10countTestsEv+0x26>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	685a      	ldr	r2, [r3, #4]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	685b      	ldr	r3, [r3, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	3310      	adds	r3, #16
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	4610      	mov	r0, r2
 800ff0a:	4798      	blx	r3
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	e000      	b.n	800ff12 <_ZN12TestRegistry10countTestsEv+0x28>
 800ff10:	2300      	movs	r3, #0
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3708      	adds	r7, #8
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
	...

0800ff1c <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	4801      	ldr	r0, [pc, #4]	; (800ff28 <__tcf_0+0xc>)
 800ff22:	f7ff fcad 	bl	800f880 <_ZN12TestRegistryD1Ev>
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	200008c8 	.word	0x200008c8

0800ff2c <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 800ff30:	4b15      	ldr	r3, [pc, #84]	; (800ff88 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	f3bf 8f5b 	dmb	ish
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	f003 0301 	and.w	r3, r3, #1
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	bf0c      	ite	eq
 800ff42:	2301      	moveq	r3, #1
 800ff44:	2300      	movne	r3, #0
 800ff46:	b2db      	uxtb	r3, r3
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d013      	beq.n	800ff74 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800ff4c:	480e      	ldr	r0, [pc, #56]	; (800ff88 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800ff4e:	f00d fbf7 	bl	801d740 <__cxa_guard_acquire>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	bf14      	ite	ne
 800ff58:	2301      	movne	r3, #1
 800ff5a:	2300      	moveq	r3, #0
 800ff5c:	b2db      	uxtb	r3, r3
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d008      	beq.n	800ff74 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800ff62:	480a      	ldr	r0, [pc, #40]	; (800ff8c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 800ff64:	f7ff fc66 	bl	800f834 <_ZN12TestRegistryC1Ev>
 800ff68:	4807      	ldr	r0, [pc, #28]	; (800ff88 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800ff6a:	f00d fbf5 	bl	801d758 <__cxa_guard_release>
 800ff6e:	4808      	ldr	r0, [pc, #32]	; (800ff90 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 800ff70:	f00d fc19 	bl	801d7a6 <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 800ff74:	4b07      	ldr	r3, [pc, #28]	; (800ff94 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d002      	beq.n	800ff82 <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 800ff7c:	4b05      	ldr	r3, [pc, #20]	; (800ff94 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	e000      	b.n	800ff84 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 800ff82:	4b02      	ldr	r3, [pc, #8]	; (800ff8c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	200008e8 	.word	0x200008e8
 800ff8c:	200008c8 	.word	0x200008c8
 800ff90:	0800ff1d 	.word	0x0800ff1d
 800ff94:	200008c4 	.word	0x200008c4

0800ff98 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b083      	sub	sp, #12
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 800ffa2:	4a04      	ldr	r2, [pc, #16]	; (800ffb4 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	6013      	str	r3, [r2, #0]
}
 800ffa8:	bf00      	nop
 800ffaa:	370c      	adds	r7, #12
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr
 800ffb4:	200008c4 	.word	0x200008c4

0800ffb8 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d00a      	beq.n	800ffde <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	685a      	ldr	r2, [r3, #4]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	330c      	adds	r3, #12
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	4610      	mov	r0, r2
 800ffd8:	4798      	blx	r3
 800ffda:	4603      	mov	r3, r0
 800ffdc:	e000      	b.n	800ffe0 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 800ffde:	2300      	movs	r3, #0
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	6053      	str	r3, [r2, #4]

}
 800ffe4:	bf00      	nop
 800ffe6:	3708      	adds	r7, #8
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}

0800ffec <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b083      	sub	sp, #12
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	683a      	ldr	r2, [r7, #0]
 800fffa:	609a      	str	r2, [r3, #8]
}
 800fffc:	bf00      	nop
 800fffe:	370c      	adds	r7, #12
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr

08010008 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	683a      	ldr	r2, [r7, #0]
 8010016:	60da      	str	r2, [r3, #12]
}
 8010018:	bf00      	nop
 801001a:	370c      	adds	r7, #12
 801001c:	46bd      	mov	sp, r7
 801001e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010022:	4770      	bx	lr

08010024 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2201      	movs	r2, #1
 8010030:	771a      	strb	r2, [r3, #28]
}
 8010032:	bf00      	nop
 8010034:	370c      	adds	r7, #12
 8010036:	46bd      	mov	sp, r7
 8010038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003c:	4770      	bx	lr

0801003e <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 801003e:	b480      	push	{r7}
 8010040:	b083      	sub	sp, #12
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2201      	movs	r2, #1
 801004a:	751a      	strb	r2, [r3, #20]
}
 801004c:	bf00      	nop
 801004e:	370c      	adds	r7, #12
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr

08010058 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
 801005e:	60f8      	str	r0, [r7, #12]
 8010060:	60b9      	str	r1, [r7, #8]
 8010062:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	68d9      	ldr	r1, [r3, #12]
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	689b      	ldr	r3, [r3, #8]
 801006c:	461a      	mov	r2, r3
 801006e:	68b8      	ldr	r0, [r7, #8]
 8010070:	f000 ffbb 	bl	8010fea <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8010074:	4603      	mov	r3, r0
 8010076:	2b00      	cmp	r3, #0
 8010078:	d001      	beq.n	801007e <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 801007a:	2301      	movs	r3, #1
 801007c:	e006      	b.n	801008c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	332c      	adds	r3, #44	; 0x2c
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	4798      	blx	r3
        return false;
 801008a:	2300      	movs	r3, #0
    }
}
 801008c:	4618      	mov	r0, r3
 801008e:	3710      	adds	r7, #16
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b082      	sub	sp, #8
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 801009c:	f7ff fb62 	bl	800f764 <_ZN14NullTestPlugin8instanceEv>
 80100a0:	4602      	mov	r2, r0
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	611a      	str	r2, [r3, #16]
}
 80100a6:	bf00      	nop
 80100a8:	3708      	adds	r7, #8
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}

080100ae <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 80100ae:	b580      	push	{r7, lr}
 80100b0:	b082      	sub	sp, #8
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	6078      	str	r0, [r7, #4]
 80100b6:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	3324      	adds	r3, #36	; 0x24
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	6912      	ldr	r2, [r2, #16]
 80100c4:	4611      	mov	r1, r2
 80100c6:	6838      	ldr	r0, [r7, #0]
 80100c8:	4798      	blx	r3
 80100ca:	4602      	mov	r2, r0
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	611a      	str	r2, [r3, #16]
}
 80100d0:	bf00      	nop
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 80100d8:	b480      	push	{r7}
 80100da:	b083      	sub	sp, #12
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	691b      	ldr	r3, [r3, #16]
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	370c      	adds	r7, #12
 80100e8:	46bd      	mov	sp, r7
 80100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ee:	4770      	bx	lr

080100f0 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	691b      	ldr	r3, [r3, #16]
 80100fe:	6839      	ldr	r1, [r7, #0]
 8010100:	4618      	mov	r0, r3
 8010102:	f7ff fa52 	bl	800f5aa <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8010106:	4603      	mov	r3, r0
}
 8010108:	4618      	mov	r0, r3
 801010a:	3708      	adds	r7, #8
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b082      	sub	sp, #8
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	691a      	ldr	r2, [r3, #16]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	691b      	ldr	r3, [r3, #16]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	3328      	adds	r3, #40	; 0x28
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	6839      	ldr	r1, [r7, #0]
 801012a:	4610      	mov	r0, r2
 801012c:	4798      	blx	r3
 801012e:	4602      	mov	r2, r0
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	691b      	ldr	r3, [r3, #16]
 8010134:	429a      	cmp	r2, r3
 8010136:	bf0c      	ite	eq
 8010138:	2301      	moveq	r3, #1
 801013a:	2300      	movne	r3, #0
 801013c:	b2db      	uxtb	r3, r3
 801013e:	2b00      	cmp	r3, #0
 8010140:	d00b      	beq.n	801015a <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	691a      	ldr	r2, [r3, #16]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	691b      	ldr	r3, [r3, #16]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	332c      	adds	r3, #44	; 0x2c
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	4610      	mov	r0, r2
 8010152:	4798      	blx	r3
 8010154:	4602      	mov	r2, r0
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	691b      	ldr	r3, [r3, #16]
 801015e:	4618      	mov	r0, r3
 8010160:	f7ff fa17 	bl	800f592 <_ZN10TestPlugin7getNameEv>
 8010164:	4603      	mov	r3, r0
 8010166:	6839      	ldr	r1, [r7, #0]
 8010168:	4618      	mov	r0, r3
 801016a:	f7fa ffec 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801016e:	4603      	mov	r3, r0
 8010170:	2b00      	cmp	r3, #0
 8010172:	d00b      	beq.n	801018c <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	691a      	ldr	r2, [r3, #16]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	691b      	ldr	r3, [r3, #16]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	332c      	adds	r3, #44	; 0x2c
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	4610      	mov	r0, r2
 8010184:	4798      	blx	r3
 8010186:	4602      	mov	r2, r0
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	691a      	ldr	r2, [r3, #16]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	691b      	ldr	r3, [r3, #16]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	3328      	adds	r3, #40	; 0x28
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	6839      	ldr	r1, [r7, #0]
 801019c:	4610      	mov	r0, r2
 801019e:	4798      	blx	r3
}
 80101a0:	bf00      	nop
 80101a2:	3708      	adds	r7, #8
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b084      	sub	sp, #16
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
    int count = 0;
 80101b0:	2300      	movs	r3, #0
 80101b2:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	691b      	ldr	r3, [r3, #16]
 80101b8:	60bb      	str	r3, [r7, #8]
 80101ba:	f7ff fad3 	bl	800f764 <_ZN14NullTestPlugin8instanceEv>
 80101be:	4602      	mov	r2, r0
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	4293      	cmp	r3, r2
 80101c4:	bf14      	ite	ne
 80101c6:	2301      	movne	r3, #1
 80101c8:	2300      	moveq	r3, #0
 80101ca:	b2db      	uxtb	r3, r3
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d00a      	beq.n	80101e6 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	3301      	adds	r3, #1
 80101d4:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	332c      	adds	r3, #44	; 0x2c
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	68b8      	ldr	r0, [r7, #8]
 80101e0:	4798      	blx	r3
 80101e2:	60b8      	str	r0, [r7, #8]
 80101e4:	e7e9      	b.n	80101ba <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 80101e6:	68fb      	ldr	r3, [r7, #12]
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3710      	adds	r7, #16
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 80101f0:	b480      	push	{r7}
 80101f2:	b083      	sub	sp, #12
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
    return tests_;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	685b      	ldr	r3, [r3, #4]
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	370c      	adds	r7, #12
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr

08010208 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b084      	sub	sp, #16
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	334c      	adds	r3, #76	; 0x4c
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	4798      	blx	r3
 801021e:	4602      	mov	r2, r0
 8010220:	f107 0308 	add.w	r3, r7, #8
 8010224:	4611      	mov	r1, r2
 8010226:	4618      	mov	r0, r3
 8010228:	f002 f8f8 	bl	801241c <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 801022c:	f107 0308 	add.w	r3, r7, #8
 8010230:	6839      	ldr	r1, [r7, #0]
 8010232:	4618      	mov	r0, r3
 8010234:	f002 f980 	bl	8012538 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8010238:	f107 0308 	add.w	r3, r7, #8
 801023c:	4618      	mov	r0, r3
 801023e:	f002 fa13 	bl	8012668 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8010242:	4602      	mov	r2, r0
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8010248:	f107 0308 	add.w	r3, r7, #8
 801024c:	4618      	mov	r0, r3
 801024e:	f002 f939 	bl	80124c4 <_ZN22UtestShellPointerArrayD1Ev>
}
 8010252:	bf00      	nop
 8010254:	3710      	adds	r7, #16
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}

0801025a <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 801025a:	b580      	push	{r7, lr}
 801025c:	b084      	sub	sp, #16
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	334c      	adds	r3, #76	; 0x4c
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	4798      	blx	r3
 801026e:	4602      	mov	r2, r0
 8010270:	f107 0308 	add.w	r3, r7, #8
 8010274:	4611      	mov	r1, r2
 8010276:	4618      	mov	r0, r3
 8010278:	f002 f8d0 	bl	801241c <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 801027c:	f107 0308 	add.w	r3, r7, #8
 8010280:	4618      	mov	r0, r3
 8010282:	f002 f995 	bl	80125b0 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 8010286:	f107 0308 	add.w	r3, r7, #8
 801028a:	4618      	mov	r0, r3
 801028c:	f002 f9ec 	bl	8012668 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8010290:	4602      	mov	r2, r0
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8010296:	f107 0308 	add.w	r3, r7, #8
 801029a:	4618      	mov	r0, r3
 801029c:	f002 f912 	bl	80124c4 <_ZN22UtestShellPointerArrayD1Ev>
}
 80102a0:	bf00      	nop
 80102a2:	3710      	adds	r7, #16
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}

080102a8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b084      	sub	sp, #16
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d00b      	beq.n	80102d6 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	330c      	adds	r3, #12
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	68f8      	ldr	r0, [r7, #12]
 80102c8:	4798      	blx	r3
 80102ca:	4602      	mov	r2, r0
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d001      	beq.n	80102d6 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 80102d2:	2301      	movs	r3, #1
 80102d4:	e000      	b.n	80102d8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 80102d6:	2300      	movs	r3, #0
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d007      	beq.n	80102ec <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	330c      	adds	r3, #12
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	68f8      	ldr	r0, [r7, #12]
 80102e6:	4798      	blx	r3
 80102e8:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 80102ea:	e7e5      	b.n	80102b8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 80102ec:	68fb      	ldr	r3, [r7, #12]
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3710      	adds	r7, #16
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}

080102f6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 80102f6:	b590      	push	{r4, r7, lr}
 80102f8:	b087      	sub	sp, #28
 80102fa:	af00      	add	r7, sp, #0
 80102fc:	6078      	str	r0, [r7, #4]
 80102fe:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	617b      	str	r3, [r7, #20]
    while (current) {
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d01e      	beq.n	801034a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 801030c:	f107 030c 	add.w	r3, r7, #12
 8010310:	6979      	ldr	r1, [r7, #20]
 8010312:	4618      	mov	r0, r3
 8010314:	f000 fd4e 	bl	8010db4 <_ZNK10UtestShell7getNameEv>
 8010318:	f107 030c 	add.w	r3, r7, #12
 801031c:	6839      	ldr	r1, [r7, #0]
 801031e:	4618      	mov	r0, r3
 8010320:	f7fa ff11 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8010324:	4603      	mov	r3, r0
 8010326:	461c      	mov	r4, r3
 8010328:	f107 030c 	add.w	r3, r7, #12
 801032c:	4618      	mov	r0, r3
 801032e:	f7fa fefe 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8010332:	2c00      	cmp	r4, #0
 8010334:	d001      	beq.n	801033a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	e008      	b.n	801034c <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	330c      	adds	r3, #12
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	6978      	ldr	r0, [r7, #20]
 8010344:	4798      	blx	r3
 8010346:	6178      	str	r0, [r7, #20]
    while (current) {
 8010348:	e7dd      	b.n	8010306 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 801034a:	2300      	movs	r3, #0
}
 801034c:	4618      	mov	r0, r3
 801034e:	371c      	adds	r7, #28
 8010350:	46bd      	mov	sp, r7
 8010352:	bd90      	pop	{r4, r7, pc}

08010354 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8010354:	b590      	push	{r4, r7, lr}
 8010356:	b087      	sub	sp, #28
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
 801035c:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	617b      	str	r3, [r7, #20]
    while (current) {
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d01e      	beq.n	80103a8 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 801036a:	f107 030c 	add.w	r3, r7, #12
 801036e:	6979      	ldr	r1, [r7, #20]
 8010370:	4618      	mov	r0, r3
 8010372:	f000 fd2e 	bl	8010dd2 <_ZNK10UtestShell8getGroupEv>
 8010376:	f107 030c 	add.w	r3, r7, #12
 801037a:	6839      	ldr	r1, [r7, #0]
 801037c:	4618      	mov	r0, r3
 801037e:	f7fa fee2 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8010382:	4603      	mov	r3, r0
 8010384:	461c      	mov	r4, r3
 8010386:	f107 030c 	add.w	r3, r7, #12
 801038a:	4618      	mov	r0, r3
 801038c:	f7fa fecf 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8010390:	2c00      	cmp	r4, #0
 8010392:	d001      	beq.n	8010398 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	e008      	b.n	80103aa <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	330c      	adds	r3, #12
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	6978      	ldr	r0, [r7, #20]
 80103a2:	4798      	blx	r3
 80103a4:	6178      	str	r0, [r7, #20]
    while (current) {
 80103a6:	e7dd      	b.n	8010364 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 80103a8:	2300      	movs	r3, #0
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	371c      	adds	r7, #28
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd90      	pop	{r4, r7, pc}
	...

080103b4 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 80103b4:	b480      	push	{r7}
 80103b6:	b083      	sub	sp, #12
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 80103be:	4a18      	ldr	r2, [pc, #96]	; (8010420 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	601a      	str	r2, [r3, #0]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	683a      	ldr	r2, [r7, #0]
 80103c8:	605a      	str	r2, [r3, #4]
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2200      	movs	r2, #0
 80103ce:	609a      	str	r2, [r3, #8]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2200      	movs	r2, #0
 80103d4:	60da      	str	r2, [r3, #12]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2200      	movs	r2, #0
 80103da:	611a      	str	r2, [r3, #16]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2200      	movs	r2, #0
 80103e0:	615a      	str	r2, [r3, #20]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2200      	movs	r2, #0
 80103e6:	619a      	str	r2, [r3, #24]
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2200      	movs	r2, #0
 80103ec:	61da      	str	r2, [r3, #28]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2200      	movs	r2, #0
 80103f2:	621a      	str	r2, [r3, #32]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2200      	movs	r2, #0
 80103f8:	625a      	str	r2, [r3, #36]	; 0x24
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2200      	movs	r2, #0
 80103fe:	629a      	str	r2, [r3, #40]	; 0x28
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2200      	movs	r2, #0
 8010404:	62da      	str	r2, [r3, #44]	; 0x2c
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2200      	movs	r2, #0
 801040a:	631a      	str	r2, [r3, #48]	; 0x30
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2200      	movs	r2, #0
 8010410:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	370c      	adds	r7, #12
 8010418:	46bd      	mov	sp, r7
 801041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041e:	4770      	bx	lr
 8010420:	0802594c 	.word	0x0802594c

08010424 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 8010424:	b480      	push	{r7}
 8010426:	b083      	sub	sp, #12
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	4a04      	ldr	r2, [pc, #16]	; (8010440 <_ZN10TestResultD1Ev+0x1c>)
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	601a      	str	r2, [r3, #0]
{
}
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	4618      	mov	r0, r3
 8010436:	370c      	adds	r7, #12
 8010438:	46bd      	mov	sp, r7
 801043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043e:	4770      	bx	lr
 8010440:	0802594c 	.word	0x0802594c

08010444 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
}
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f7ff ffe9 	bl	8010424 <_ZN10TestResultD1Ev>
 8010452:	2138      	movs	r1, #56	; 0x38
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f7f7 ff03 	bl	8008260 <_ZdlPvj>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	4618      	mov	r0, r3
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	685a      	ldr	r2, [r3, #4]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	3318      	adds	r3, #24
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	6839      	ldr	r1, [r7, #0]
 801047e:	4610      	mov	r0, r2
 8010480:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8010482:	4b05      	ldr	r3, [pc, #20]	; (8010498 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	4798      	blx	r3
 8010488:	4603      	mov	r3, r0
 801048a:	461a      	mov	r2, r3
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010490:	bf00      	nop
 8010492:	3708      	adds	r7, #8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}
 8010498:	200000a4 	.word	0x200000a4

0801049c <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b082      	sub	sp, #8
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 80104a6:	4b0c      	ldr	r3, [pc, #48]	; (80104d8 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	4798      	blx	r3
 80104ac:	4603      	mov	r3, r0
 80104ae:	461a      	mov	r2, r3
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104b4:	1ad2      	subs	r2, r2, r3
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	685a      	ldr	r2, [r3, #4]
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	685b      	ldr	r3, [r3, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	331c      	adds	r3, #28
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	6879      	ldr	r1, [r7, #4]
 80104ca:	4610      	mov	r0, r2
 80104cc:	4798      	blx	r3
}
 80104ce:	bf00      	nop
 80104d0:	3708      	adds	r7, #8
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	bf00      	nop
 80104d8:	200000a4 	.word	0x200000a4

080104dc <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b082      	sub	sp, #8
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	685a      	ldr	r2, [r3, #4]
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	3310      	adds	r3, #16
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	6839      	ldr	r1, [r7, #0]
 80104f6:	4610      	mov	r0, r2
 80104f8:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80104fa:	4b05      	ldr	r3, [pc, #20]	; (8010510 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	4798      	blx	r3
 8010500:	4603      	mov	r3, r0
 8010502:	461a      	mov	r2, r3
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010508:	bf00      	nop
 801050a:	3708      	adds	r7, #8
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}
 8010510:	200000a4 	.word	0x200000a4

08010514 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	6039      	str	r1, [r7, #0]
    output_.print(text);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	685a      	ldr	r2, [r3, #4]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	332c      	adds	r3, #44	; 0x2c
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	6839      	ldr	r1, [r7, #0]
 801052e:	4610      	mov	r0, r2
 8010530:	4798      	blx	r3
}
 8010532:	bf00      	nop
 8010534:	3708      	adds	r7, #8
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}

0801053a <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 801053a:	b580      	push	{r7, lr}
 801053c:	b082      	sub	sp, #8
 801053e:	af00      	add	r7, sp, #0
 8010540:	6078      	str	r0, [r7, #4]
 8010542:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	685a      	ldr	r2, [r3, #4]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	685b      	ldr	r3, [r3, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	3348      	adds	r3, #72	; 0x48
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	6839      	ldr	r1, [r7, #0]
 8010554:	4610      	mov	r0, r2
 8010556:	4798      	blx	r3
}
 8010558:	bf00      	nop
 801055a:	3708      	adds	r7, #8
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}

08010560 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b082      	sub	sp, #8
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 801056a:	4b0c      	ldr	r3, [pc, #48]	; (801059c <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	4798      	blx	r3
 8010570:	4603      	mov	r3, r0
 8010572:	461a      	mov	r2, r3
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010578:	1ad2      	subs	r2, r2, r3
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	685a      	ldr	r2, [r3, #4]
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	3314      	adds	r3, #20
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	6879      	ldr	r1, [r7, #4]
 801058e:	4610      	mov	r0, r2
 8010590:	4798      	blx	r3

}
 8010592:	bf00      	nop
 8010594:	3708      	adds	r7, #8
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop
 801059c:	200000a4 	.word	0x200000a4

080105a0 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b082      	sub	sp, #8
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	685a      	ldr	r2, [r3, #4]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	333c      	adds	r3, #60	; 0x3c
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	6839      	ldr	r1, [r7, #0]
 80105ba:	4610      	mov	r0, r2
 80105bc:	4798      	blx	r3
    failureCount_++;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	695b      	ldr	r3, [r3, #20]
 80105c2:	1c5a      	adds	r2, r3, #1
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	615a      	str	r2, [r3, #20]
}
 80105c8:	bf00      	nop
 80105ca:	3708      	adds	r7, #8
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 80105d0:	b480      	push	{r7}
 80105d2:	b083      	sub	sp, #12
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
    testCount_++;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	689b      	ldr	r3, [r3, #8]
 80105dc:	1c5a      	adds	r2, r3, #1
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	609a      	str	r2, [r3, #8]
}
 80105e2:	bf00      	nop
 80105e4:	370c      	adds	r7, #12
 80105e6:	46bd      	mov	sp, r7
 80105e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ec:	4770      	bx	lr

080105ee <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 80105ee:	b480      	push	{r7}
 80105f0:	b083      	sub	sp, #12
 80105f2:	af00      	add	r7, sp, #0
 80105f4:	6078      	str	r0, [r7, #4]
    runCount_++;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	68db      	ldr	r3, [r3, #12]
 80105fa:	1c5a      	adds	r2, r3, #1
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	60da      	str	r2, [r3, #12]
}
 8010600:	bf00      	nop
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr

0801060c <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 801060c:	b480      	push	{r7}
 801060e:	b083      	sub	sp, #12
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
    checkCount_++;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	691b      	ldr	r3, [r3, #16]
 8010618:	1c5a      	adds	r2, r3, #1
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	611a      	str	r2, [r3, #16]
}
 801061e:	bf00      	nop
 8010620:	370c      	adds	r7, #12
 8010622:	46bd      	mov	sp, r7
 8010624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010628:	4770      	bx	lr

0801062a <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 801062a:	b480      	push	{r7}
 801062c:	b083      	sub	sp, #12
 801062e:	af00      	add	r7, sp, #0
 8010630:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	699b      	ldr	r3, [r3, #24]
 8010636:	1c5a      	adds	r2, r3, #1
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	619a      	str	r2, [r3, #24]
}
 801063c:	bf00      	nop
 801063e:	370c      	adds	r7, #12
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	69db      	ldr	r3, [r3, #28]
 8010654:	1c5a      	adds	r2, r3, #1
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	61da      	str	r2, [r3, #28]
}
 801065a:	bf00      	nop
 801065c:	370c      	adds	r7, #12
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr
	...

08010668 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8010670:	4b09      	ldr	r3, [pc, #36]	; (8010698 <_ZN10TestResult12testsStartedEv+0x30>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	4798      	blx	r3
 8010676:	4603      	mov	r3, r0
 8010678:	461a      	mov	r2, r3
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	685a      	ldr	r2, [r3, #4]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	685b      	ldr	r3, [r3, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	3308      	adds	r3, #8
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	4610      	mov	r0, r2
 801068e:	4798      	blx	r3
}
 8010690:	bf00      	nop
 8010692:	3708      	adds	r7, #8
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}
 8010698:	200000a4 	.word	0x200000a4

0801069c <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b084      	sub	sp, #16
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 80106a4:	4b0c      	ldr	r3, [pc, #48]	; (80106d8 <_ZN10TestResult10testsEndedEv+0x3c>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	4798      	blx	r3
 80106aa:	4603      	mov	r3, r0
 80106ac:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106b2:	68fa      	ldr	r2, [r7, #12]
 80106b4:	1ad2      	subs	r2, r2, r3
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	685a      	ldr	r2, [r3, #4]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	330c      	adds	r3, #12
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	6879      	ldr	r1, [r7, #4]
 80106ca:	4610      	mov	r0, r2
 80106cc:	4798      	blx	r3
}
 80106ce:	bf00      	nop
 80106d0:	3710      	adds	r7, #16
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
 80106d6:	bf00      	nop
 80106d8:	200000a4 	.word	0x200000a4

080106dc <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 80106dc:	b480      	push	{r7}
 80106de:	b083      	sub	sp, #12
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6a1b      	ldr	r3, [r3, #32]
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	370c      	adds	r7, #12
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr

080106f4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 80106f4:	b480      	push	{r7}
 80106f6:	b083      	sub	sp, #12
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8010700:	4618      	mov	r0, r3
 8010702:	370c      	adds	r7, #12
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr

0801070c <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8010718:	4618      	mov	r0, r3
 801071a:	370c      	adds	r7, #12
 801071c:	46bd      	mov	sp, r7
 801071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010722:	4770      	bx	lr

08010724 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 8010724:	b590      	push	{r4, r7, lr}
 8010726:	b087      	sub	sp, #28
 8010728:	af00      	add	r7, sp, #0
 801072a:	ed87 0b04 	vstr	d0, [r7, #16]
 801072e:	ed87 1b02 	vstr	d1, [r7, #8]
 8010732:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 8010736:	4b2c      	ldr	r3, [pc, #176]	; (80107e8 <_Z13doubles_equalddd+0xc4>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	ed97 0b04 	vldr	d0, [r7, #16]
 801073e:	4798      	blx	r3
 8010740:	4603      	mov	r3, r0
 8010742:	2b00      	cmp	r3, #0
 8010744:	d10f      	bne.n	8010766 <_Z13doubles_equalddd+0x42>
 8010746:	4b28      	ldr	r3, [pc, #160]	; (80107e8 <_Z13doubles_equalddd+0xc4>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	ed97 0b02 	vldr	d0, [r7, #8]
 801074e:	4798      	blx	r3
 8010750:	4603      	mov	r3, r0
 8010752:	2b00      	cmp	r3, #0
 8010754:	d107      	bne.n	8010766 <_Z13doubles_equalddd+0x42>
 8010756:	4b24      	ldr	r3, [pc, #144]	; (80107e8 <_Z13doubles_equalddd+0xc4>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	ed97 0b00 	vldr	d0, [r7]
 801075e:	4798      	blx	r3
 8010760:	4603      	mov	r3, r0
 8010762:	2b00      	cmp	r3, #0
 8010764:	d001      	beq.n	801076a <_Z13doubles_equalddd+0x46>
 8010766:	2301      	movs	r3, #1
 8010768:	e000      	b.n	801076c <_Z13doubles_equalddd+0x48>
 801076a:	2300      	movs	r3, #0
 801076c:	2b00      	cmp	r3, #0
 801076e:	d001      	beq.n	8010774 <_Z13doubles_equalddd+0x50>
        return false;
 8010770:	2300      	movs	r3, #0
 8010772:	e035      	b.n	80107e0 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8010774:	4b1d      	ldr	r3, [pc, #116]	; (80107ec <_Z13doubles_equalddd+0xc8>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	ed97 0b04 	vldr	d0, [r7, #16]
 801077c:	4798      	blx	r3
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	d009      	beq.n	8010798 <_Z13doubles_equalddd+0x74>
 8010784:	4b19      	ldr	r3, [pc, #100]	; (80107ec <_Z13doubles_equalddd+0xc8>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	ed97 0b02 	vldr	d0, [r7, #8]
 801078c:	4798      	blx	r3
 801078e:	4603      	mov	r3, r0
 8010790:	2b00      	cmp	r3, #0
 8010792:	d001      	beq.n	8010798 <_Z13doubles_equalddd+0x74>
 8010794:	2301      	movs	r3, #1
 8010796:	e000      	b.n	801079a <_Z13doubles_equalddd+0x76>
 8010798:	2300      	movs	r3, #0
 801079a:	2b00      	cmp	r3, #0
 801079c:	d001      	beq.n	80107a2 <_Z13doubles_equalddd+0x7e>
    {
        return true;
 801079e:	2301      	movs	r3, #1
 80107a0:	e01e      	b.n	80107e0 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 80107a2:	4b13      	ldr	r3, [pc, #76]	; (80107f0 <_Z13doubles_equalddd+0xcc>)
 80107a4:	681c      	ldr	r4, [r3, #0]
 80107a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80107aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80107ae:	f7ef fdab 	bl	8000308 <__aeabi_dsub>
 80107b2:	4602      	mov	r2, r0
 80107b4:	460b      	mov	r3, r1
 80107b6:	ec43 2b17 	vmov	d7, r2, r3
 80107ba:	eeb0 0a47 	vmov.f32	s0, s14
 80107be:	eef0 0a67 	vmov.f32	s1, s15
 80107c2:	47a0      	blx	r4
 80107c4:	ec53 2b10 	vmov	r2, r3, d0
 80107c8:	2101      	movs	r1, #1
 80107ca:	460c      	mov	r4, r1
 80107cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80107d0:	f7ef ffc6 	bl	8000760 <__aeabi_dcmpge>
 80107d4:	4603      	mov	r3, r0
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d101      	bne.n	80107de <_Z13doubles_equalddd+0xba>
 80107da:	2300      	movs	r3, #0
 80107dc:	461c      	mov	r4, r3
 80107de:	b2e3      	uxtb	r3, r4
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	371c      	adds	r7, #28
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd90      	pop	{r4, r7, pc}
 80107e8:	200000e4 	.word	0x200000e4
 80107ec:	200000e8 	.word	0x200000e8
 80107f0:	200000d8 	.word	0x200000d8

080107f4 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 80107f4:	b480      	push	{r7}
 80107f6:	b083      	sub	sp, #12
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	332c      	adds	r3, #44	; 0x2c
    }
 8010800:	4618      	mov	r0, r3
 8010802:	370c      	adds	r7, #12
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr

0801080c <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
    {
 8010814:	4a0a      	ldr	r2, [pc, #40]	; (8010840 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	601a      	str	r2, [r3, #0]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	332c      	adds	r3, #44	; 0x2c
 801081e:	4618      	mov	r0, r3
 8010820:	f7ff fe00 	bl	8010424 <_ZN10TestResultD1Ev>
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	331c      	adds	r3, #28
 8010828:	4618      	mov	r0, r3
 801082a:	f7f6 f815 	bl	8006858 <_ZN17ConsoleTestOutputD1Ev>
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	4618      	mov	r0, r3
 8010832:	f000 f943 	bl	8010abc <_ZN10UtestShellD1Ev>
    }
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	4618      	mov	r0, r3
 801083a:	3708      	adds	r7, #8
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}
 8010840:	08025994 	.word	0x08025994

08010844 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
    }
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f7ff ffdd 	bl	801080c <_ZN22OutsideTestRunnerUTestD1Ev>
 8010852:	2164      	movs	r1, #100	; 0x64
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f7f7 fd03 	bl	8008260 <_ZdlPvj>
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	4618      	mov	r0, r3
 801085e:	3708      	adds	r7, #8
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af02      	add	r7, sp, #8
 801086a:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	2300      	movs	r3, #0
 8010870:	9300      	str	r3, [sp, #0]
 8010872:	4b0d      	ldr	r3, [pc, #52]	; (80108a8 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8010874:	4a0d      	ldr	r2, [pc, #52]	; (80108ac <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 8010876:	490e      	ldr	r1, [pc, #56]	; (80108b0 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8010878:	f000 f8f8 	bl	8010a6c <_ZN10UtestShellC1EPKcS1_S1_j>
 801087c:	4a0d      	ldr	r2, [pc, #52]	; (80108b4 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	601a      	str	r2, [r3, #0]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	331c      	adds	r3, #28
 8010886:	4618      	mov	r0, r3
 8010888:	f7f5 ffd4 	bl	8006834 <_ZN17ConsoleTestOutputC1Ev>
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	331c      	adds	r3, #28
 8010896:	4619      	mov	r1, r3
 8010898:	4610      	mov	r0, r2
 801089a:	f7ff fd8b 	bl	80103b4 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	4618      	mov	r0, r3
 80108a2:	3708      	adds	r7, #8
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	0802282c 	.word	0x0802282c
 80108ac:	0802283c 	.word	0x0802283c
 80108b0:	0802287c 	.word	0x0802287c
 80108b4:	08025994 	.word	0x08025994

080108b8 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 80108b8:	b580      	push	{r7, lr}
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	4801      	ldr	r0, [pc, #4]	; (80108c4 <__tcf_0+0xc>)
 80108be:	f7ff ffa5 	bl	801080c <_ZN22OutsideTestRunnerUTestD1Ev>
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	200008ec 	.word	0x200008ec

080108c8 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 80108cc:	4b12      	ldr	r3, [pc, #72]	; (8010918 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	f3bf 8f5b 	dmb	ish
 80108d4:	b2db      	uxtb	r3, r3
 80108d6:	f003 0301 	and.w	r3, r3, #1
 80108da:	2b00      	cmp	r3, #0
 80108dc:	bf0c      	ite	eq
 80108de:	2301      	moveq	r3, #1
 80108e0:	2300      	movne	r3, #0
 80108e2:	b2db      	uxtb	r3, r3
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d013      	beq.n	8010910 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80108e8:	480b      	ldr	r0, [pc, #44]	; (8010918 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80108ea:	f00c ff29 	bl	801d740 <__cxa_guard_acquire>
 80108ee:	4603      	mov	r3, r0
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	bf14      	ite	ne
 80108f4:	2301      	movne	r3, #1
 80108f6:	2300      	moveq	r3, #0
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d008      	beq.n	8010910 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80108fe:	4807      	ldr	r0, [pc, #28]	; (801091c <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 8010900:	f7ff ffb0 	bl	8010864 <_ZN22OutsideTestRunnerUTestC1Ev>
 8010904:	4804      	ldr	r0, [pc, #16]	; (8010918 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8010906:	f00c ff27 	bl	801d758 <__cxa_guard_release>
 801090a:	4805      	ldr	r0, [pc, #20]	; (8010920 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 801090c:	f00c ff4b 	bl	801d7a6 <atexit>
    return instance_;
 8010910:	4b02      	ldr	r3, [pc, #8]	; (801091c <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 8010912:	4618      	mov	r0, r3
 8010914:	bd80      	pop	{r7, pc}
 8010916:	bf00      	nop
 8010918:	20000950 	.word	0x20000950
 801091c:	200008ec 	.word	0x200008ec
 8010920:	080108b9 	.word	0x080108b9

08010924 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 8010924:	b580      	push	{r7, lr}
 8010926:	b082      	sub	sp, #8
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	330c      	adds	r3, #12
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	4798      	blx	r3
    }
 8010938:	bf00      	nop
 801093a:	3708      	adds	r7, #8
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8010940:	b580      	push	{r7, lr}
 8010942:	b082      	sub	sp, #8
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	3314      	adds	r3, #20
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	4798      	blx	r3
    }
 8010954:	bf00      	nop
 8010956:	3708      	adds	r7, #8
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 801095c:	b580      	push	{r7, lr}
 801095e:	b082      	sub	sp, #8
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	3310      	adds	r3, #16
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	4798      	blx	r3
    }
 8010970:	bf00      	nop
 8010972:	3708      	adds	r7, #8
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8010978:	b480      	push	{r7}
 801097a:	b085      	sub	sp, #20
 801097c:	af00      	add	r7, sp, #0
 801097e:	60f8      	str	r0, [r7, #12]
 8010980:	60b9      	str	r1, [r7, #8]
 8010982:	607a      	str	r2, [r7, #4]
 8010984:	603b      	str	r3, [r7, #0]
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	68ba      	ldr	r2, [r7, #8]
 801098a:	601a      	str	r2, [r3, #0]
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	687a      	ldr	r2, [r7, #4]
 8010990:	605a      	str	r2, [r3, #4]
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	683a      	ldr	r2, [r7, #0]
 8010996:	609a      	str	r2, [r3, #8]
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	4618      	mov	r0, r3
 801099c:	3714      	adds	r7, #20
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr

080109a6 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 80109a6:	b580      	push	{r7, lr}
 80109a8:	b086      	sub	sp, #24
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	689b      	ldr	r3, [r3, #8]
 80109c2:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 80109c4:	693b      	ldr	r3, [r7, #16]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	3394      	adds	r3, #148	; 0x94
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	68ba      	ldr	r2, [r7, #8]
 80109ce:	68f9      	ldr	r1, [r7, #12]
 80109d0:	6938      	ldr	r0, [r7, #16]
 80109d2:	4798      	blx	r3
    }
 80109d4:	bf00      	nop
 80109d6:	3718      	adds	r7, #24
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 80109dc:	b580      	push	{r7, lr}
 80109de:	b086      	sub	sp, #24
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	689b      	ldr	r3, [r3, #8]
 80109f8:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 80109fa:	4b05      	ldr	r3, [pc, #20]	; (8010a10 <helperDoRunOneTestSeperateProcess+0x34>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	68ba      	ldr	r2, [r7, #8]
 8010a00:	68f9      	ldr	r1, [r7, #12]
 8010a02:	6938      	ldr	r0, [r7, #16]
 8010a04:	4798      	blx	r3
    }
 8010a06:	bf00      	nop
 8010a08:	3718      	adds	r7, #24
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	20000098 	.word	0x20000098

08010a14 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 8010a14:	b480      	push	{r7}
 8010a16:	b083      	sub	sp, #12
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8010a1c:	4a0f      	ldr	r2, [pc, #60]	; (8010a5c <_ZN10UtestShellC1Ev+0x48>)
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	601a      	str	r2, [r3, #0]
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	4a0e      	ldr	r2, [pc, #56]	; (8010a60 <_ZN10UtestShellC1Ev+0x4c>)
 8010a26:	605a      	str	r2, [r3, #4]
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	4a0e      	ldr	r2, [pc, #56]	; (8010a64 <_ZN10UtestShellC1Ev+0x50>)
 8010a2c:	609a      	str	r2, [r3, #8]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	4a0d      	ldr	r2, [pc, #52]	; (8010a68 <_ZN10UtestShellC1Ev+0x54>)
 8010a32:	60da      	str	r2, [r3, #12]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2200      	movs	r2, #0
 8010a38:	611a      	str	r2, [r3, #16]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	615a      	str	r2, [r3, #20]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2200      	movs	r2, #0
 8010a44:	761a      	strb	r2, [r3, #24]
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	765a      	strb	r2, [r3, #25]
{
}
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	370c      	adds	r7, #12
 8010a52:	46bd      	mov	sp, r7
 8010a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a58:	4770      	bx	lr
 8010a5a:	bf00      	nop
 8010a5c:	08025a54 	.word	0x08025a54
 8010a60:	080228c8 	.word	0x080228c8
 8010a64:	080228dc 	.word	0x080228dc
 8010a68:	080228ec 	.word	0x080228ec

08010a6c <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8010a6c:	b480      	push	{r7}
 8010a6e:	b085      	sub	sp, #20
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	60b9      	str	r1, [r7, #8]
 8010a76:	607a      	str	r2, [r7, #4]
 8010a78:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8010a7a:	4a0f      	ldr	r2, [pc, #60]	; (8010ab8 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	601a      	str	r2, [r3, #0]
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	68ba      	ldr	r2, [r7, #8]
 8010a84:	605a      	str	r2, [r3, #4]
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	687a      	ldr	r2, [r7, #4]
 8010a8a:	609a      	str	r2, [r3, #8]
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	683a      	ldr	r2, [r7, #0]
 8010a90:	60da      	str	r2, [r3, #12]
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	69ba      	ldr	r2, [r7, #24]
 8010a96:	611a      	str	r2, [r3, #16]
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	615a      	str	r2, [r3, #20]
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	761a      	strb	r2, [r3, #24]
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	765a      	strb	r2, [r3, #25]
{
}
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	4618      	mov	r0, r3
 8010aae:	3714      	adds	r7, #20
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab6:	4770      	bx	lr
 8010ab8:	08025a54 	.word	0x08025a54

08010abc <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8010abc:	b480      	push	{r7}
 8010abe:	b083      	sub	sp, #12
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	4a04      	ldr	r2, [pc, #16]	; (8010ad8 <_ZN10UtestShellD1Ev+0x1c>)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	601a      	str	r2, [r3, #0]
{
}
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	4618      	mov	r0, r3
 8010ace:	370c      	adds	r7, #12
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad6:	4770      	bx	lr
 8010ad8:	08025a54 	.word	0x08025a54

08010adc <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
}
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f7ff ffe9 	bl	8010abc <_ZN10UtestShellD1Ev>
 8010aea:	211c      	movs	r1, #28
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f7f7 fbb7 	bl	8008260 <_ZdlPvj>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	4618      	mov	r0, r3
 8010af6:	3708      	adds	r7, #8
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}

08010afc <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b082      	sub	sp, #8
 8010b00:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 8010b02:	2300      	movs	r3, #0
 8010b04:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	3310      	adds	r3, #16
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	4798      	blx	r3
}
 8010b12:	bf00      	nop
 8010b14:	3708      	adds	r7, #8
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
	...

08010b1c <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 8010b20:	4b02      	ldr	r3, [pc, #8]	; (8010b2c <_ZN10UtestShell5crashEv+0x10>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	4798      	blx	r3
}
 8010b26:	bf00      	nop
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	20000094 	.word	0x20000094

08010b30 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b088      	sub	sp, #32
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	60f8      	str	r0, [r7, #12]
 8010b38:	60b9      	str	r1, [r7, #8]
 8010b3a:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	2200      	movs	r2, #0
 8010b40:	765a      	strb	r2, [r3, #25]
    result.countRun();
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	3324      	adds	r3, #36	; 0x24
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 8010b4e:	f107 0014 	add.w	r0, r7, #20
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	68ba      	ldr	r2, [r7, #8]
 8010b56:	68f9      	ldr	r1, [r7, #12]
 8010b58:	f7ff ff0e 	bl	8010978 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	337c      	adds	r3, #124	; 0x7c
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	68f8      	ldr	r0, [r7, #12]
 8010b66:	4798      	blx	r3
 8010b68:	4603      	mov	r3, r0
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d007      	beq.n	8010b7e <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 8010b6e:	4b09      	ldr	r3, [pc, #36]	; (8010b94 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f107 0214 	add.w	r2, r7, #20
 8010b76:	4611      	mov	r1, r2
 8010b78:	4807      	ldr	r0, [pc, #28]	; (8010b98 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 8010b7a:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8010b7c:	e006      	b.n	8010b8c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 8010b7e:	4b05      	ldr	r3, [pc, #20]	; (8010b94 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	f107 0214 	add.w	r2, r7, #20
 8010b86:	4611      	mov	r1, r2
 8010b88:	4804      	ldr	r0, [pc, #16]	; (8010b9c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 8010b8a:	4798      	blx	r3
}
 8010b8c:	bf00      	nop
 8010b8e:	3720      	adds	r7, #32
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}
 8010b94:	200000a0 	.word	0x200000a0
 8010b98:	080109dd 	.word	0x080109dd
 8010b9c:	080109a7 	.word	0x080109a7

08010ba0 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8010ba0:	b590      	push	{r4, r7, lr}
 8010ba2:	b083      	sub	sp, #12
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
    return new Utest();
 8010ba8:	22d3      	movs	r2, #211	; 0xd3
 8010baa:	4906      	ldr	r1, [pc, #24]	; (8010bc4 <_ZN10UtestShell10createTestEv+0x24>)
 8010bac:	2004      	movs	r0, #4
 8010bae:	f7f7 fb43 	bl	8008238 <_ZnwjPKci>
 8010bb2:	4604      	mov	r4, r0
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f001 fb0f 	bl	80121d8 <_ZN5UtestC1Ev>
 8010bba:	4623      	mov	r3, r4
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	370c      	adds	r7, #12
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd90      	pop	{r4, r7, pc}
 8010bc4:	080228fc 	.word	0x080228fc

08010bc8 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6039      	str	r1, [r7, #0]
    delete test;
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d004      	beq.n	8010be2 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	3204      	adds	r2, #4
 8010bdc:	6812      	ldr	r2, [r2, #0]
 8010bde:	4618      	mov	r0, r3
 8010be0:	4790      	blx	r2
}
 8010be2:	bf00      	nop
 8010be4:	3708      	adds	r7, #8
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
	...

08010bec <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b088      	sub	sp, #32
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	60f8      	str	r0, [r7, #12]
 8010bf4:	60b9      	str	r1, [r7, #8]
 8010bf6:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	333c      	adds	r3, #60	; 0x3c
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4940      	ldr	r1, [pc, #256]	; (8010d04 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	3314      	adds	r3, #20
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	687a      	ldr	r2, [r7, #4]
 8010c10:	68f9      	ldr	r1, [r7, #12]
 8010c12:	68b8      	ldr	r0, [r7, #8]
 8010c14:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	333c      	adds	r3, #60	; 0x3c
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	493a      	ldr	r1, [pc, #232]	; (8010d08 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 8010c24:	f001 faae 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8010c28:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8010c2a:	68f8      	ldr	r0, [r7, #12]
 8010c2c:	f001 fa90 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 8010c30:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 8010c32:	6879      	ldr	r1, [r7, #4]
 8010c34:	68f8      	ldr	r0, [r7, #12]
 8010c36:	f001 fa6b 	bl	8012110 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8010c3a:	68f9      	ldr	r1, [r7, #12]
 8010c3c:	68f8      	ldr	r0, [r7, #12]
 8010c3e:	f001 fa77 	bl	8012130 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	333c      	adds	r3, #60	; 0x3c
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	4930      	ldr	r1, [pc, #192]	; (8010d0c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	4798      	blx	r3
    Utest* testToRun = createTest();
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	3388      	adds	r3, #136	; 0x88
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	68f8      	ldr	r0, [r7, #12]
 8010c5a:	4798      	blx	r3
 8010c5c:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	333c      	adds	r3, #60	; 0x3c
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	492a      	ldr	r1, [pc, #168]	; (8010d10 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	333c      	adds	r3, #60	; 0x3c
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	4927      	ldr	r1, [pc, #156]	; (8010d14 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	4798      	blx	r3
    testToRun->run();
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	3308      	adds	r3, #8
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	6978      	ldr	r0, [r7, #20]
 8010c84:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	333c      	adds	r3, #60	; 0x3c
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	4922      	ldr	r1, [pc, #136]	; (8010d18 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8010c94:	69f9      	ldr	r1, [r7, #28]
 8010c96:	68f8      	ldr	r0, [r7, #12]
 8010c98:	f001 fa4a 	bl	8012130 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8010c9c:	69b9      	ldr	r1, [r7, #24]
 8010c9e:	68f8      	ldr	r0, [r7, #12]
 8010ca0:	f001 fa36 	bl	8012110 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	333c      	adds	r3, #60	; 0x3c
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	491b      	ldr	r1, [pc, #108]	; (8010d1c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	4798      	blx	r3
    destroyTest(testToRun);
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	338c      	adds	r3, #140	; 0x8c
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	6979      	ldr	r1, [r7, #20]
 8010cbc:	68f8      	ldr	r0, [r7, #12]
 8010cbe:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	333c      	adds	r3, #60	; 0x3c
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	4915      	ldr	r1, [pc, #84]	; (8010d20 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	333c      	adds	r3, #60	; 0x3c
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	4913      	ldr	r1, [pc, #76]	; (8010d24 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	3318      	adds	r3, #24
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	68f9      	ldr	r1, [r7, #12]
 8010ce8:	68b8      	ldr	r0, [r7, #8]
 8010cea:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	333c      	adds	r3, #60	; 0x3c
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	490c      	ldr	r1, [pc, #48]	; (8010d28 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	4798      	blx	r3
}
 8010cfa:	bf00      	nop
 8010cfc:	3720      	adds	r7, #32
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	08022910 	.word	0x08022910
 8010d08:	08022934 	.word	0x08022934
 8010d0c:	08022954 	.word	0x08022954
 8010d10:	08022970 	.word	0x08022970
 8010d14:	0802298c 	.word	0x0802298c
 8010d18:	080229a8 	.word	0x080229a8
 8010d1c:	080229c0 	.word	0x080229c0
 8010d20:	080229dc 	.word	0x080229dc
 8010d24:	080229f8 	.word	0x080229f8
 8010d28:	08022a1c 	.word	0x08022a1c

08010d2c <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	b083      	sub	sp, #12
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
    return next_;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	695b      	ldr	r3, [r3, #20]
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	370c      	adds	r7, #12
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d42:	4770      	bx	lr

08010d44 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b083      	sub	sp, #12
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	6039      	str	r1, [r7, #0]
    next_ = test;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	683a      	ldr	r2, [r7, #0]
 8010d52:	615a      	str	r2, [r3, #20]
    return this;
 8010d54:	687b      	ldr	r3, [r7, #4]
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	370c      	adds	r7, #12
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d60:	4770      	bx	lr

08010d62 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 8010d62:	b580      	push	{r7, lr}
 8010d64:	b082      	sub	sp, #8
 8010d66:	af00      	add	r7, sp, #0
 8010d68:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	695b      	ldr	r3, [r3, #20]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d00b      	beq.n	8010d8a <_ZN10UtestShell10countTestsEv+0x28>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	695a      	ldr	r2, [r3, #20]
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	695b      	ldr	r3, [r3, #20]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	3310      	adds	r3, #16
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	4610      	mov	r0, r2
 8010d82:	4798      	blx	r3
 8010d84:	4603      	mov	r3, r0
 8010d86:	3301      	adds	r3, #1
 8010d88:	e000      	b.n	8010d8c <_ZN10UtestShell10countTestsEv+0x2a>
 8010d8a:	2301      	movs	r3, #1
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3708      	adds	r7, #8
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}

08010d94 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b082      	sub	sp, #8
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	6039      	str	r1, [r7, #0]
    return "TEST";
 8010d9e:	4904      	ldr	r1, [pc, #16]	; (8010db0 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f7f9 fe0c 	bl	800a9be <_ZN12SimpleStringC1EPKc>
}
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	3708      	adds	r7, #8
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	08022a40 	.word	0x08022a40

08010db4 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
 8010dbc:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	689b      	ldr	r3, [r3, #8]
 8010dc2:	4619      	mov	r1, r3
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f7f9 fdfa 	bl	800a9be <_ZN12SimpleStringC1EPKc>
}
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	3708      	adds	r7, #8
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b082      	sub	sp, #8
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
 8010dda:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	685b      	ldr	r3, [r3, #4]
 8010de0:	4619      	mov	r1, r3
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	f7f9 fdeb 	bl	800a9be <_ZN12SimpleStringC1EPKc>
}
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	3708      	adds	r7, #8
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}

08010df0 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	33a0      	adds	r3, #160	; 0xa0
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	687a      	ldr	r2, [r7, #4]
 8010e04:	6839      	ldr	r1, [r7, #0]
 8010e06:	4610      	mov	r0, r2
 8010e08:	4798      	blx	r3
    formattedName += "(";
 8010e0a:	490e      	ldr	r1, [pc, #56]	; (8010e44 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f7fa fa1d 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	4619      	mov	r1, r3
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f7fa fa17 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 8010e1e:	490a      	ldr	r1, [pc, #40]	; (8010e48 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f7fa fa13 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	689b      	ldr	r3, [r3, #8]
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f7fa fa0d 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 8010e32:	4906      	ldr	r1, [pc, #24]	; (8010e4c <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f7fa fa09 	bl	800b24c <_ZN12SimpleStringpLEPKc>

    return formattedName;
 8010e3a:	bf00      	nop
}
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	3708      	adds	r7, #8
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	08022a48 	.word	0x08022a48
 8010e48:	08022a4c 	.word	0x08022a4c
 8010e4c:	08022a50 	.word	0x08022a50

08010e50 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8010e50:	b480      	push	{r7}
 8010e52:	b083      	sub	sp, #12
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	7e5b      	ldrb	r3, [r3, #25]
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	370c      	adds	r7, #12
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr

08010e68 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f001 f96d 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 8010e76:	4603      	mov	r3, r0
 8010e78:	681a      	ldr	r2, [r3, #0]
 8010e7a:	3228      	adds	r2, #40	; 0x28
 8010e7c:	6812      	ldr	r2, [r2, #0]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	4790      	blx	r2
}
 8010e82:	bf00      	nop
 8010e84:	3708      	adds	r7, #8
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 8010e8a:	b480      	push	{r7}
 8010e8c:	b083      	sub	sp, #12
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
    return true;
 8010e92:	2301      	movs	r3, #1
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	370c      	adds	r7, #12
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr

08010ea0 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	7e1b      	ldrb	r3, [r3, #24]
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	370c      	adds	r7, #12
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr

08010eb8 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b083      	sub	sp, #12
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	761a      	strb	r2, [r3, #24]
}
 8010ec6:	bf00      	nop
 8010ec8:	370c      	adds	r7, #12
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr

08010ed2 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 8010ed2:	b480      	push	{r7}
 8010ed4:	b083      	sub	sp, #12
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	6078      	str	r0, [r7, #4]

}
 8010eda:	bf00      	nop
 8010edc:	370c      	adds	r7, #12
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee4:	4770      	bx	lr

08010ee6 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 8010ee6:	b480      	push	{r7}
 8010ee8:	b083      	sub	sp, #12
 8010eea:	af00      	add	r7, sp, #0
 8010eec:	6078      	str	r0, [r7, #4]
 8010eee:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	683a      	ldr	r2, [r7, #0]
 8010ef4:	60da      	str	r2, [r3, #12]
}
 8010ef6:	bf00      	nop
 8010ef8:	370c      	adds	r7, #12
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr

08010f02 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 8010f02:	b480      	push	{r7}
 8010f04:	b083      	sub	sp, #12
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	6078      	str	r0, [r7, #4]
 8010f0a:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	683a      	ldr	r2, [r7, #0]
 8010f10:	611a      	str	r2, [r3, #16]
}
 8010f12:	bf00      	nop
 8010f14:	370c      	adds	r7, #12
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr

08010f1e <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 8010f1e:	b480      	push	{r7}
 8010f20:	b083      	sub	sp, #12
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	6078      	str	r0, [r7, #4]
 8010f26:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	683a      	ldr	r2, [r7, #0]
 8010f2c:	605a      	str	r2, [r3, #4]
}
 8010f2e:	bf00      	nop
 8010f30:	370c      	adds	r7, #12
 8010f32:	46bd      	mov	sp, r7
 8010f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f38:	4770      	bx	lr

08010f3a <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8010f3a:	b480      	push	{r7}
 8010f3c:	b083      	sub	sp, #12
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	6078      	str	r0, [r7, #4]
 8010f42:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	683a      	ldr	r2, [r7, #0]
 8010f48:	609a      	str	r2, [r3, #8]
}
 8010f4a:	bf00      	nop
 8010f4c:	370c      	adds	r7, #12
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f54:	4770      	bx	lr

08010f56 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b082      	sub	sp, #8
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
 8010f5e:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	68db      	ldr	r3, [r3, #12]
 8010f64:	4619      	mov	r1, r3
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f7f9 fd29 	bl	800a9be <_ZN12SimpleStringC1EPKc>
}
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	3708      	adds	r7, #8
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}

08010f74 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8010f74:	b480      	push	{r7}
 8010f76:	b083      	sub	sp, #12
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	691b      	ldr	r3, [r3, #16]
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	370c      	adds	r7, #12
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr

08010f8c <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8010f8c:	b590      	push	{r4, r7, lr}
 8010f8e:	b087      	sub	sp, #28
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	60f8      	str	r0, [r7, #12]
 8010f94:	60b9      	str	r1, [r7, #8]
 8010f96:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d101      	bne.n	8010fa2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	e01f      	b.n	8010fe2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d01b      	beq.n	8010fe0 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8010fa8:	f107 0310 	add.w	r3, r7, #16
 8010fac:	68b9      	ldr	r1, [r7, #8]
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f7f9 fd05 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8010fb4:	f107 0310 	add.w	r3, r7, #16
 8010fb8:	4619      	mov	r1, r3
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f00c fb93 	bl	801d6e6 <_ZNK10TestFilter5matchERK12SimpleString>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	461c      	mov	r4, r3
 8010fc4:	f107 0310 	add.w	r3, r7, #16
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7fa f8b0 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8010fce:	2c00      	cmp	r4, #0
 8010fd0:	d001      	beq.n	8010fd6 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	e005      	b.n	8010fe2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f00c fb5f 	bl	801d69a <_ZNK10TestFilter7getNextEv>
 8010fdc:	6078      	str	r0, [r7, #4]
 8010fde:	e7e0      	b.n	8010fa2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 8010fe0:	2300      	movs	r3, #0
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	371c      	adds	r7, #28
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd90      	pop	{r4, r7, pc}

08010fea <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 8010fea:	b580      	push	{r7, lr}
 8010fec:	b084      	sub	sp, #16
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	60f8      	str	r0, [r7, #12]
 8010ff2:	60b9      	str	r1, [r7, #8]
 8010ff4:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	685b      	ldr	r3, [r3, #4]
 8010ffa:	68ba      	ldr	r2, [r7, #8]
 8010ffc:	4619      	mov	r1, r3
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	f7ff ffc4 	bl	8010f8c <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8011004:	4603      	mov	r3, r0
 8011006:	2b00      	cmp	r3, #0
 8011008:	d00b      	beq.n	8011022 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	689b      	ldr	r3, [r3, #8]
 801100e:	687a      	ldr	r2, [r7, #4]
 8011010:	4619      	mov	r1, r3
 8011012:	68f8      	ldr	r0, [r7, #12]
 8011014:	f7ff ffba 	bl	8010f8c <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8011018:	4603      	mov	r3, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	d001      	beq.n	8011022 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 801101e:	2301      	movs	r3, #1
 8011020:	e000      	b.n	8011024 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 8011022:	2300      	movs	r3, #0
}
 8011024:	4618      	mov	r0, r3
 8011026:	3710      	adds	r7, #16
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 801102c:	b590      	push	{r4, r7, lr}
 801102e:	b083      	sub	sp, #12
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	339c      	adds	r3, #156	; 0x9c
 801103c:	681c      	ldr	r4, [r3, #0]
 801103e:	f001 f8b1 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8011042:	4603      	mov	r3, r0
 8011044:	461a      	mov	r2, r3
 8011046:	6839      	ldr	r1, [r7, #0]
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 801104c:	bf00      	nop
 801104e:	370c      	adds	r7, #12
 8011050:	46bd      	mov	sp, r7
 8011052:	bd90      	pop	{r4, r7, pc}

08011054 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	60b9      	str	r1, [r7, #8]
 801105e:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	2201      	movs	r2, #1
 8011064:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8011066:	68f8      	ldr	r0, [r7, #12]
 8011068:	f001 f872 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 801106c:	4603      	mov	r3, r0
 801106e:	681a      	ldr	r2, [r3, #0]
 8011070:	3234      	adds	r2, #52	; 0x34
 8011072:	6812      	ldr	r2, [r2, #0]
 8011074:	68b9      	ldr	r1, [r7, #8]
 8011076:	4618      	mov	r0, r3
 8011078:	4790      	blx	r2
    terminator.exitCurrentTest();
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8011084:	bf00      	nop
 8011086:	3710      	adds	r7, #16
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b082      	sub	sp, #8
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
 8011094:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	6838      	ldr	r0, [r7, #0]
 801109e:	4798      	blx	r3
} // LCOV_EXCL_LINE
 80110a0:	bf00      	nop
 80110a2:	3708      	adds	r7, #8
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80110a8:	b590      	push	{r4, r7, lr}
 80110aa:	b09d      	sub	sp, #116	; 0x74
 80110ac:	af04      	add	r7, sp, #16
 80110ae:	60f8      	str	r0, [r7, #12]
 80110b0:	607a      	str	r2, [r7, #4]
 80110b2:	603b      	str	r3, [r7, #0]
 80110b4:	460b      	mov	r3, r1
 80110b6:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80110b8:	68f8      	ldr	r0, [r7, #12]
 80110ba:	f001 f849 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 80110be:	4603      	mov	r3, r0
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	3228      	adds	r2, #40	; 0x28
 80110c4:	6812      	ldr	r2, [r2, #0]
 80110c6:	4618      	mov	r0, r3
 80110c8:	4790      	blx	r2
    if (!condition)
 80110ca:	7afb      	ldrb	r3, [r7, #11]
 80110cc:	f083 0301 	eor.w	r3, r3, #1
 80110d0:	b2db      	uxtb	r3, r3
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d03f      	beq.n	8011156 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	339c      	adds	r3, #156	; 0x9c
 80110dc:	681c      	ldr	r4, [r3, #0]
 80110de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80110e2:	6879      	ldr	r1, [r7, #4]
 80110e4:	4618      	mov	r0, r3
 80110e6:	f7f9 fc6a 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80110ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80110ee:	6839      	ldr	r1, [r7, #0]
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7f9 fc64 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80110f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80110fa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7f9 fc5e 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011102:	f107 0014 	add.w	r0, r7, #20
 8011106:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801110a:	9302      	str	r3, [sp, #8]
 801110c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011110:	9301      	str	r3, [sp, #4]
 8011112:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011116:	9300      	str	r3, [sp, #0]
 8011118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801111a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801111c:	68f9      	ldr	r1, [r7, #12]
 801111e:	f7fb ff6b 	bl	800cff8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011122:	f107 0314 	add.w	r3, r7, #20
 8011126:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011128:	4619      	mov	r1, r3
 801112a:	68f8      	ldr	r0, [r7, #12]
 801112c:	47a0      	blx	r4
 801112e:	f107 0314 	add.w	r3, r7, #20
 8011132:	4618      	mov	r0, r3
 8011134:	f7fc fdce 	bl	800dcd4 <_ZN12CheckFailureD1Ev>
 8011138:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801113c:	4618      	mov	r0, r3
 801113e:	f7f9 fff6 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011142:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011146:	4618      	mov	r0, r3
 8011148:	f7f9 fff1 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801114c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011150:	4618      	mov	r0, r3
 8011152:	f7f9 ffec 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8011156:	bf00      	nop
 8011158:	3764      	adds	r7, #100	; 0x64
 801115a:	46bd      	mov	sp, r7
 801115c:	bd90      	pop	{r4, r7, pc}

0801115e <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801115e:	b590      	push	{r4, r7, lr}
 8011160:	b097      	sub	sp, #92	; 0x5c
 8011162:	af02      	add	r7, sp, #8
 8011164:	60f8      	str	r0, [r7, #12]
 8011166:	60b9      	str	r1, [r7, #8]
 8011168:	607a      	str	r2, [r7, #4]
 801116a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801116c:	68f8      	ldr	r0, [r7, #12]
 801116e:	f000 ffef 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 8011172:	4603      	mov	r3, r0
 8011174:	681a      	ldr	r2, [r3, #0]
 8011176:	3228      	adds	r2, #40	; 0x28
 8011178:	6812      	ldr	r2, [r2, #0]
 801117a:	4618      	mov	r0, r3
 801117c:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	339c      	adds	r3, #156	; 0x9c
 8011184:	681c      	ldr	r4, [r3, #0]
 8011186:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801118a:	68b9      	ldr	r1, [r7, #8]
 801118c:	4618      	mov	r0, r3
 801118e:	f7f9 fc16 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011192:	f107 0014 	add.w	r0, r7, #20
 8011196:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801119a:	9300      	str	r3, [sp, #0]
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	687a      	ldr	r2, [r7, #4]
 80111a0:	68f9      	ldr	r1, [r7, #12]
 80111a2:	f7fb ff71 	bl	800d088 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 80111a6:	f107 0314 	add.w	r3, r7, #20
 80111aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80111ac:	4619      	mov	r1, r3
 80111ae:	68f8      	ldr	r0, [r7, #12]
 80111b0:	47a0      	blx	r4
 80111b2:	f107 0314 	add.w	r3, r7, #20
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7f7 fc16 	bl	80089e8 <_ZN11FailFailureD1Ev>
 80111bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7f9 ffb4 	bl	800b12e <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 80111c6:	bf00      	nop
 80111c8:	3754      	adds	r7, #84	; 0x54
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd90      	pop	{r4, r7, pc}

080111ce <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80111ce:	b590      	push	{r4, r7, lr}
 80111d0:	b0a7      	sub	sp, #156	; 0x9c
 80111d2:	af04      	add	r7, sp, #16
 80111d4:	60f8      	str	r0, [r7, #12]
 80111d6:	60b9      	str	r1, [r7, #8]
 80111d8:	607a      	str	r2, [r7, #4]
 80111da:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80111dc:	68f8      	ldr	r0, [r7, #12]
 80111de:	f000 ffb7 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 80111e2:	4603      	mov	r3, r0
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	3228      	adds	r2, #40	; 0x28
 80111e8:	6812      	ldr	r2, [r2, #0]
 80111ea:	4618      	mov	r0, r3
 80111ec:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d102      	bne.n	80111fa <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d068      	beq.n	80112cc <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d002      	beq.n	8011206 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d12a      	bne.n	801125c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	339c      	adds	r3, #156	; 0x9c
 801120c:	681c      	ldr	r4, [r3, #0]
 801120e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011212:	6839      	ldr	r1, [r7, #0]
 8011214:	4618      	mov	r0, r3
 8011216:	f7f9 fbd2 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801121a:	f107 0010 	add.w	r0, r7, #16
 801121e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011222:	9302      	str	r3, [sp, #8]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	9301      	str	r3, [sp, #4]
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	9300      	str	r3, [sp, #0]
 801122c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011230:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011234:	68f9      	ldr	r1, [r7, #12]
 8011236:	f7fc f9ad 	bl	800d594 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801123a:	f107 0310 	add.w	r3, r7, #16
 801123e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8011242:	4619      	mov	r1, r3
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	47a0      	blx	r4
 8011248:	f107 0310 	add.w	r3, r7, #16
 801124c:	4618      	mov	r0, r3
 801124e:	f7fc fcb9 	bl	800dbc4 <_ZN18StringEqualFailureD1Ev>
 8011252:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011256:	4618      	mov	r0, r3
 8011258:	f7f9 ff69 	bl	800b12e <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 801125c:	6879      	ldr	r1, [r7, #4]
 801125e:	68b8      	ldr	r0, [r7, #8]
 8011260:	f7f9 f9ea 	bl	800a638 <_ZN12SimpleString6StrCmpEPKcS1_>
 8011264:	4603      	mov	r3, r0
 8011266:	2b00      	cmp	r3, #0
 8011268:	bf14      	ite	ne
 801126a:	2301      	movne	r3, #1
 801126c:	2300      	moveq	r3, #0
 801126e:	b2db      	uxtb	r3, r3
 8011270:	2b00      	cmp	r3, #0
 8011272:	d02c      	beq.n	80112ce <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	339c      	adds	r3, #156	; 0x9c
 801127a:	681c      	ldr	r4, [r3, #0]
 801127c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011280:	6839      	ldr	r1, [r7, #0]
 8011282:	4618      	mov	r0, r3
 8011284:	f7f9 fb9b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011288:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801128c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011290:	9302      	str	r3, [sp, #8]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	9301      	str	r3, [sp, #4]
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	9300      	str	r3, [sp, #0]
 801129a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801129e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80112a2:	68f9      	ldr	r1, [r7, #12]
 80112a4:	f7fc f976 	bl	800d594 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80112a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80112ac:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80112b0:	4619      	mov	r1, r3
 80112b2:	68f8      	ldr	r0, [r7, #12]
 80112b4:	47a0      	blx	r4
 80112b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80112ba:	4618      	mov	r0, r3
 80112bc:	f7fc fc82 	bl	800dbc4 <_ZN18StringEqualFailureD1Ev>
 80112c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7f9 ff32 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80112ca:	e000      	b.n	80112ce <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80112cc:	bf00      	nop
}
 80112ce:	378c      	adds	r7, #140	; 0x8c
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd90      	pop	{r4, r7, pc}

080112d4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80112d4:	b590      	push	{r4, r7, lr}
 80112d6:	b0a7      	sub	sp, #156	; 0x9c
 80112d8:	af04      	add	r7, sp, #16
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	60b9      	str	r1, [r7, #8]
 80112de:	607a      	str	r2, [r7, #4]
 80112e0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80112e2:	68f8      	ldr	r0, [r7, #12]
 80112e4:	f000 ff34 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 80112e8:	4603      	mov	r3, r0
 80112ea:	681a      	ldr	r2, [r3, #0]
 80112ec:	3228      	adds	r2, #40	; 0x28
 80112ee:	6812      	ldr	r2, [r2, #0]
 80112f0:	4618      	mov	r0, r3
 80112f2:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d102      	bne.n	8011300 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d06b      	beq.n	80113d8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d002      	beq.n	801130c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d12b      	bne.n	8011364 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	339c      	adds	r3, #156	; 0x9c
 8011312:	681c      	ldr	r4, [r3, #0]
 8011314:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011318:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801131c:	4618      	mov	r0, r3
 801131e:	f7f9 fb4e 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011322:	f107 0010 	add.w	r0, r7, #16
 8011326:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801132a:	9302      	str	r3, [sp, #8]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	9301      	str	r3, [sp, #4]
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	9300      	str	r3, [sp, #0]
 8011334:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011338:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801133c:	68f9      	ldr	r1, [r7, #12]
 801133e:	f7fc f929 	bl	800d594 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011342:	f107 0310 	add.w	r3, r7, #16
 8011346:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801134a:	4619      	mov	r1, r3
 801134c:	68f8      	ldr	r0, [r7, #12]
 801134e:	47a0      	blx	r4
 8011350:	f107 0310 	add.w	r3, r7, #16
 8011354:	4618      	mov	r0, r3
 8011356:	f7fc fc35 	bl	800dbc4 <_ZN18StringEqualFailureD1Ev>
 801135a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801135e:	4618      	mov	r0, r3
 8011360:	f7f9 fee5 	bl	800b12e <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8011364:	683a      	ldr	r2, [r7, #0]
 8011366:	6879      	ldr	r1, [r7, #4]
 8011368:	68b8      	ldr	r0, [r7, #8]
 801136a:	f7f9 f9a4 	bl	800a6b6 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 801136e:	4603      	mov	r3, r0
 8011370:	2b00      	cmp	r3, #0
 8011372:	bf14      	ite	ne
 8011374:	2301      	movne	r3, #1
 8011376:	2300      	moveq	r3, #0
 8011378:	b2db      	uxtb	r3, r3
 801137a:	2b00      	cmp	r3, #0
 801137c:	d02d      	beq.n	80113da <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	339c      	adds	r3, #156	; 0x9c
 8011384:	681c      	ldr	r4, [r3, #0]
 8011386:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801138a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801138e:	4618      	mov	r0, r3
 8011390:	f7f9 fb15 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011394:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8011398:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801139c:	9302      	str	r3, [sp, #8]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	9301      	str	r3, [sp, #4]
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	9300      	str	r3, [sp, #0]
 80113a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80113aa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80113ae:	68f9      	ldr	r1, [r7, #12]
 80113b0:	f7fc f8f0 	bl	800d594 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80113b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80113b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80113bc:	4619      	mov	r1, r3
 80113be:	68f8      	ldr	r0, [r7, #12]
 80113c0:	47a0      	blx	r4
 80113c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80113c6:	4618      	mov	r0, r3
 80113c8:	f7fc fbfc 	bl	800dbc4 <_ZN18StringEqualFailureD1Ev>
 80113cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7f9 feac 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80113d6:	e000      	b.n	80113da <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80113d8:	bf00      	nop
}
 80113da:	378c      	adds	r7, #140	; 0x8c
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd90      	pop	{r4, r7, pc}

080113e0 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80113e0:	b590      	push	{r4, r7, lr}
 80113e2:	b0ab      	sub	sp, #172	; 0xac
 80113e4:	af04      	add	r7, sp, #16
 80113e6:	60f8      	str	r0, [r7, #12]
 80113e8:	60b9      	str	r1, [r7, #8]
 80113ea:	607a      	str	r2, [r7, #4]
 80113ec:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80113ee:	68f8      	ldr	r0, [r7, #12]
 80113f0:	f000 feae 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 80113f4:	4603      	mov	r3, r0
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	3228      	adds	r2, #40	; 0x28
 80113fa:	6812      	ldr	r2, [r2, #0]
 80113fc:	4618      	mov	r0, r3
 80113fe:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d102      	bne.n	801140c <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d07c      	beq.n	8011506 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d002      	beq.n	8011418 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d128      	bne.n	801146a <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	3398      	adds	r3, #152	; 0x98
 801141e:	681c      	ldr	r4, [r3, #0]
 8011420:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011424:	6839      	ldr	r1, [r7, #0]
 8011426:	4618      	mov	r0, r3
 8011428:	f7f9 fac9 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801142c:	f107 0010 	add.w	r0, r7, #16
 8011430:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011434:	9302      	str	r3, [sp, #8]
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	9301      	str	r3, [sp, #4]
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	9300      	str	r3, [sp, #0]
 801143e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011442:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011446:	68f9      	ldr	r1, [r7, #12]
 8011448:	f7fc f948 	bl	800d6dc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801144c:	f107 0310 	add.w	r3, r7, #16
 8011450:	4619      	mov	r1, r3
 8011452:	68f8      	ldr	r0, [r7, #12]
 8011454:	47a0      	blx	r4
 8011456:	f107 0310 	add.w	r3, r7, #16
 801145a:	4618      	mov	r0, r3
 801145c:	f7fc fb90 	bl	800db80 <_ZN24StringEqualNoCaseFailureD1Ev>
 8011460:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011464:	4618      	mov	r0, r3
 8011466:	f7f9 fe62 	bl	800b12e <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 801146a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801146e:	68b9      	ldr	r1, [r7, #8]
 8011470:	4618      	mov	r0, r3
 8011472:	f7f9 faa4 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011476:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801147a:	6879      	ldr	r1, [r7, #4]
 801147c:	4618      	mov	r0, r3
 801147e:	f7f9 fa9e 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011482:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8011486:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801148a:	4611      	mov	r1, r2
 801148c:	4618      	mov	r0, r3
 801148e:	f7f9 fe75 	bl	800b17c <_ZNK12SimpleString12equalsNoCaseERKS_>
 8011492:	4603      	mov	r3, r0
 8011494:	f083 0301 	eor.w	r3, r3, #1
 8011498:	b2dc      	uxtb	r4, r3
 801149a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801149e:	4618      	mov	r0, r3
 80114a0:	f7f9 fe45 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80114a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7f9 fe40 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80114ae:	2c00      	cmp	r4, #0
 80114b0:	d02a      	beq.n	8011508 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	3398      	adds	r3, #152	; 0x98
 80114b8:	681c      	ldr	r4, [r3, #0]
 80114ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80114be:	6839      	ldr	r1, [r7, #0]
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7f9 fa7c 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80114c6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80114ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80114ce:	9302      	str	r3, [sp, #8]
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	9301      	str	r3, [sp, #4]
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	9300      	str	r3, [sp, #0]
 80114d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80114dc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80114e0:	68f9      	ldr	r1, [r7, #12]
 80114e2:	f7fc f8fb 	bl	800d6dc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80114e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80114ea:	4619      	mov	r1, r3
 80114ec:	68f8      	ldr	r0, [r7, #12]
 80114ee:	47a0      	blx	r4
 80114f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7fc fb43 	bl	800db80 <_ZN24StringEqualNoCaseFailureD1Ev>
 80114fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80114fe:	4618      	mov	r0, r3
 8011500:	f7f9 fe15 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011504:	e000      	b.n	8011508 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011506:	bf00      	nop
}
 8011508:	379c      	adds	r7, #156	; 0x9c
 801150a:	46bd      	mov	sp, r7
 801150c:	bd90      	pop	{r4, r7, pc}

0801150e <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 801150e:	b590      	push	{r4, r7, lr}
 8011510:	b0b3      	sub	sp, #204	; 0xcc
 8011512:	af04      	add	r7, sp, #16
 8011514:	60f8      	str	r0, [r7, #12]
 8011516:	60b9      	str	r1, [r7, #8]
 8011518:	607a      	str	r2, [r7, #4]
 801151a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801151c:	68f8      	ldr	r0, [r7, #12]
 801151e:	f000 fe17 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 8011522:	4603      	mov	r3, r0
 8011524:	681a      	ldr	r2, [r3, #0]
 8011526:	3228      	adds	r2, #40	; 0x28
 8011528:	6812      	ldr	r2, [r2, #0]
 801152a:	4618      	mov	r0, r3
 801152c:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d103      	bne.n	801153c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	2b00      	cmp	r3, #0
 8011538:	f000 80ad 	beq.w	8011696 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d002      	beq.n	8011548 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d140      	bne.n	80115ca <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	3398      	adds	r3, #152	; 0x98
 801154e:	681c      	ldr	r4, [r3, #0]
 8011550:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011554:	68b9      	ldr	r1, [r7, #8]
 8011556:	4618      	mov	r0, r3
 8011558:	f7f9 fa31 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801155c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011560:	6879      	ldr	r1, [r7, #4]
 8011562:	4618      	mov	r0, r3
 8011564:	f7f9 fa2b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011568:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801156c:	6839      	ldr	r1, [r7, #0]
 801156e:	4618      	mov	r0, r3
 8011570:	f7f9 fa25 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011574:	f107 0010 	add.w	r0, r7, #16
 8011578:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801157c:	9302      	str	r3, [sp, #8]
 801157e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011582:	9301      	str	r3, [sp, #4]
 8011584:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011588:	9300      	str	r3, [sp, #0]
 801158a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801158e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011592:	68f9      	ldr	r1, [r7, #12]
 8011594:	f7fb fce6 	bl	800cf64 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011598:	f107 0310 	add.w	r3, r7, #16
 801159c:	4619      	mov	r1, r3
 801159e:	68f8      	ldr	r0, [r7, #12]
 80115a0:	47a0      	blx	r4
 80115a2:	f107 0310 	add.w	r3, r7, #16
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7fc fbb6 	bl	800dd18 <_ZN15ContainsFailureD1Ev>
 80115ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7f9 fdbc 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80115b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7f9 fdb7 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80115c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7f9 fdb2 	bl	800b12e <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 80115ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80115ce:	6879      	ldr	r1, [r7, #4]
 80115d0:	4618      	mov	r0, r3
 80115d2:	f7f9 f9f4 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80115d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80115da:	68b9      	ldr	r1, [r7, #8]
 80115dc:	4618      	mov	r0, r3
 80115de:	f7f9 f9ee 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80115e2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80115e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80115ea:	4611      	mov	r1, r2
 80115ec:	4618      	mov	r0, r3
 80115ee:	f7f9 fa64 	bl	800aaba <_ZNK12SimpleString8containsERKS_>
 80115f2:	4603      	mov	r3, r0
 80115f4:	f083 0301 	eor.w	r3, r3, #1
 80115f8:	b2dc      	uxtb	r4, r3
 80115fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80115fe:	4618      	mov	r0, r3
 8011600:	f7f9 fd95 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011604:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011608:	4618      	mov	r0, r3
 801160a:	f7f9 fd90 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801160e:	2c00      	cmp	r4, #0
 8011610:	d042      	beq.n	8011698 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	3398      	adds	r3, #152	; 0x98
 8011618:	681c      	ldr	r4, [r3, #0]
 801161a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801161e:	68b9      	ldr	r1, [r7, #8]
 8011620:	4618      	mov	r0, r3
 8011622:	f7f9 f9cc 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011626:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801162a:	6879      	ldr	r1, [r7, #4]
 801162c:	4618      	mov	r0, r3
 801162e:	f7f9 f9c6 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011632:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011636:	6839      	ldr	r1, [r7, #0]
 8011638:	4618      	mov	r0, r3
 801163a:	f7f9 f9c0 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801163e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8011642:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011646:	9302      	str	r3, [sp, #8]
 8011648:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801164c:	9301      	str	r3, [sp, #4]
 801164e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011652:	9300      	str	r3, [sp, #0]
 8011654:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011658:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801165c:	68f9      	ldr	r1, [r7, #12]
 801165e:	f7fb fc81 	bl	800cf64 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011662:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011666:	4619      	mov	r1, r3
 8011668:	68f8      	ldr	r0, [r7, #12]
 801166a:	47a0      	blx	r4
 801166c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011670:	4618      	mov	r0, r3
 8011672:	f7fc fb51 	bl	800dd18 <_ZN15ContainsFailureD1Ev>
 8011676:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801167a:	4618      	mov	r0, r3
 801167c:	f7f9 fd57 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011680:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011684:	4618      	mov	r0, r3
 8011686:	f7f9 fd52 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801168a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801168e:	4618      	mov	r0, r3
 8011690:	f7f9 fd4d 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011694:	e000      	b.n	8011698 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011696:	bf00      	nop
}
 8011698:	37bc      	adds	r7, #188	; 0xbc
 801169a:	46bd      	mov	sp, r7
 801169c:	bd90      	pop	{r4, r7, pc}

0801169e <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 801169e:	b590      	push	{r4, r7, lr}
 80116a0:	b0b3      	sub	sp, #204	; 0xcc
 80116a2:	af04      	add	r7, sp, #16
 80116a4:	60f8      	str	r0, [r7, #12]
 80116a6:	60b9      	str	r1, [r7, #8]
 80116a8:	607a      	str	r2, [r7, #4]
 80116aa:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80116ac:	68f8      	ldr	r0, [r7, #12]
 80116ae:	f000 fd4f 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 80116b2:	4603      	mov	r3, r0
 80116b4:	681a      	ldr	r2, [r3, #0]
 80116b6:	3228      	adds	r2, #40	; 0x28
 80116b8:	6812      	ldr	r2, [r2, #0]
 80116ba:	4618      	mov	r0, r3
 80116bc:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d103      	bne.n	80116cc <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	f000 80ad 	beq.w	8011826 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d002      	beq.n	80116d8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d140      	bne.n	801175a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	3398      	adds	r3, #152	; 0x98
 80116de:	681c      	ldr	r4, [r3, #0]
 80116e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80116e4:	68b9      	ldr	r1, [r7, #8]
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7f9 f969 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80116ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80116f0:	6879      	ldr	r1, [r7, #4]
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7f9 f963 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80116f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80116fc:	6839      	ldr	r1, [r7, #0]
 80116fe:	4618      	mov	r0, r3
 8011700:	f7f9 f95d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011704:	f107 0010 	add.w	r0, r7, #16
 8011708:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801170c:	9302      	str	r3, [sp, #8]
 801170e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011712:	9301      	str	r3, [sp, #4]
 8011714:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011718:	9300      	str	r3, [sp, #0]
 801171a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801171e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011722:	68f9      	ldr	r1, [r7, #12]
 8011724:	f7fb fc1e 	bl	800cf64 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011728:	f107 0310 	add.w	r3, r7, #16
 801172c:	4619      	mov	r1, r3
 801172e:	68f8      	ldr	r0, [r7, #12]
 8011730:	47a0      	blx	r4
 8011732:	f107 0310 	add.w	r3, r7, #16
 8011736:	4618      	mov	r0, r3
 8011738:	f7fc faee 	bl	800dd18 <_ZN15ContainsFailureD1Ev>
 801173c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011740:	4618      	mov	r0, r3
 8011742:	f7f9 fcf4 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011746:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801174a:	4618      	mov	r0, r3
 801174c:	f7f9 fcef 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011750:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011754:	4618      	mov	r0, r3
 8011756:	f7f9 fcea 	bl	800b12e <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 801175a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801175e:	6879      	ldr	r1, [r7, #4]
 8011760:	4618      	mov	r0, r3
 8011762:	f7f9 f92c 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011766:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801176a:	68b9      	ldr	r1, [r7, #8]
 801176c:	4618      	mov	r0, r3
 801176e:	f7f9 f926 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011772:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8011776:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801177a:	4611      	mov	r1, r2
 801177c:	4618      	mov	r0, r3
 801177e:	f7f9 f9b7 	bl	800aaf0 <_ZNK12SimpleString14containsNoCaseERKS_>
 8011782:	4603      	mov	r3, r0
 8011784:	f083 0301 	eor.w	r3, r3, #1
 8011788:	b2dc      	uxtb	r4, r3
 801178a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801178e:	4618      	mov	r0, r3
 8011790:	f7f9 fccd 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011794:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011798:	4618      	mov	r0, r3
 801179a:	f7f9 fcc8 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801179e:	2c00      	cmp	r4, #0
 80117a0:	d042      	beq.n	8011828 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	3398      	adds	r3, #152	; 0x98
 80117a8:	681c      	ldr	r4, [r3, #0]
 80117aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80117ae:	68b9      	ldr	r1, [r7, #8]
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7f9 f904 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80117b6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80117ba:	6879      	ldr	r1, [r7, #4]
 80117bc:	4618      	mov	r0, r3
 80117be:	f7f9 f8fe 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80117c2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80117c6:	6839      	ldr	r1, [r7, #0]
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7f9 f8f8 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80117ce:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80117d2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80117d6:	9302      	str	r3, [sp, #8]
 80117d8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80117dc:	9301      	str	r3, [sp, #4]
 80117de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80117e2:	9300      	str	r3, [sp, #0]
 80117e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80117e8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80117ec:	68f9      	ldr	r1, [r7, #12]
 80117ee:	f7fb fbb9 	bl	800cf64 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80117f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80117f6:	4619      	mov	r1, r3
 80117f8:	68f8      	ldr	r0, [r7, #12]
 80117fa:	47a0      	blx	r4
 80117fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011800:	4618      	mov	r0, r3
 8011802:	f7fc fa89 	bl	800dd18 <_ZN15ContainsFailureD1Ev>
 8011806:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801180a:	4618      	mov	r0, r3
 801180c:	f7f9 fc8f 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011810:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011814:	4618      	mov	r0, r3
 8011816:	f7f9 fc8a 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801181a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801181e:	4618      	mov	r0, r3
 8011820:	f7f9 fc85 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011824:	e000      	b.n	8011828 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011826:	bf00      	nop
}
 8011828:	37bc      	adds	r7, #188	; 0xbc
 801182a:	46bd      	mov	sp, r7
 801182c:	bd90      	pop	{r4, r7, pc}

0801182e <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801182e:	b590      	push	{r4, r7, lr}
 8011830:	b099      	sub	sp, #100	; 0x64
 8011832:	af04      	add	r7, sp, #16
 8011834:	60f8      	str	r0, [r7, #12]
 8011836:	60b9      	str	r1, [r7, #8]
 8011838:	607a      	str	r2, [r7, #4]
 801183a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801183c:	68f8      	ldr	r0, [r7, #12]
 801183e:	f000 fc87 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 8011842:	4603      	mov	r3, r0
 8011844:	681a      	ldr	r2, [r3, #0]
 8011846:	3228      	adds	r2, #40	; 0x28
 8011848:	6812      	ldr	r2, [r2, #0]
 801184a:	4618      	mov	r0, r3
 801184c:	4790      	blx	r2
    if (expected != actual)
 801184e:	68ba      	ldr	r2, [r7, #8]
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	429a      	cmp	r2, r3
 8011854:	d027      	beq.n	80118a6 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	339c      	adds	r3, #156	; 0x9c
 801185c:	681c      	ldr	r4, [r3, #0]
 801185e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011862:	6839      	ldr	r1, [r7, #0]
 8011864:	4618      	mov	r0, r3
 8011866:	f7f9 f8aa 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801186a:	f107 0014 	add.w	r0, r7, #20
 801186e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011872:	9302      	str	r3, [sp, #8]
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	9301      	str	r3, [sp, #4]
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	9300      	str	r3, [sp, #0]
 801187c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801187e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011880:	68f9      	ldr	r1, [r7, #12]
 8011882:	f7fb fc1f 	bl	800d0c4 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8011886:	f107 0314 	add.w	r3, r7, #20
 801188a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801188c:	4619      	mov	r1, r3
 801188e:	68f8      	ldr	r0, [r7, #12]
 8011890:	47a0      	blx	r4
 8011892:	f107 0314 	add.w	r3, r7, #20
 8011896:	4618      	mov	r0, r3
 8011898:	f7fc f9fa 	bl	800dc90 <_ZN17LongsEqualFailureD1Ev>
 801189c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7f9 fc44 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 80118a6:	bf00      	nop
 80118a8:	3754      	adds	r7, #84	; 0x54
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd90      	pop	{r4, r7, pc}

080118ae <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80118ae:	b590      	push	{r4, r7, lr}
 80118b0:	b099      	sub	sp, #100	; 0x64
 80118b2:	af04      	add	r7, sp, #16
 80118b4:	60f8      	str	r0, [r7, #12]
 80118b6:	60b9      	str	r1, [r7, #8]
 80118b8:	607a      	str	r2, [r7, #4]
 80118ba:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80118bc:	68f8      	ldr	r0, [r7, #12]
 80118be:	f000 fc47 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 80118c2:	4603      	mov	r3, r0
 80118c4:	681a      	ldr	r2, [r3, #0]
 80118c6:	3228      	adds	r2, #40	; 0x28
 80118c8:	6812      	ldr	r2, [r2, #0]
 80118ca:	4618      	mov	r0, r3
 80118cc:	4790      	blx	r2
    if (expected != actual)
 80118ce:	68ba      	ldr	r2, [r7, #8]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d027      	beq.n	8011926 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	339c      	adds	r3, #156	; 0x9c
 80118dc:	681c      	ldr	r4, [r3, #0]
 80118de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80118e2:	6839      	ldr	r1, [r7, #0]
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7f9 f86a 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80118ea:	f107 0014 	add.w	r0, r7, #20
 80118ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80118f2:	9302      	str	r3, [sp, #8]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	9301      	str	r3, [sp, #4]
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	9300      	str	r3, [sp, #0]
 80118fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80118fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011900:	68f9      	ldr	r1, [r7, #12]
 8011902:	f7fb fcab 	bl	800d25c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 8011906:	f107 0314 	add.w	r3, r7, #20
 801190a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801190c:	4619      	mov	r1, r3
 801190e:	68f8      	ldr	r0, [r7, #12]
 8011910:	47a0      	blx	r4
 8011912:	f107 0314 	add.w	r3, r7, #20
 8011916:	4618      	mov	r0, r3
 8011918:	f7fc f998 	bl	800dc4c <_ZN25UnsignedLongsEqualFailureD1Ev>
 801191c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011920:	4618      	mov	r0, r3
 8011922:	f7f9 fc04 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8011926:	bf00      	nop
 8011928:	3754      	adds	r7, #84	; 0x54
 801192a:	46bd      	mov	sp, r7
 801192c:	bd90      	pop	{r4, r7, pc}
	...

08011930 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011930:	b082      	sub	sp, #8
 8011932:	b590      	push	{r4, r7, lr}
 8011934:	b099      	sub	sp, #100	; 0x64
 8011936:	af02      	add	r7, sp, #8
 8011938:	60f8      	str	r0, [r7, #12]
 801193a:	1d38      	adds	r0, r7, #4
 801193c:	e880 0006 	stmia.w	r0, {r1, r2}
 8011940:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8011942:	68f8      	ldr	r0, [r7, #12]
 8011944:	f000 fc04 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 8011948:	4603      	mov	r3, r0
 801194a:	681a      	ldr	r2, [r3, #0]
 801194c:	3228      	adds	r2, #40	; 0x28
 801194e:	6812      	ldr	r2, [r2, #0]
 8011950:	4618      	mov	r0, r3
 8011952:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	339c      	adds	r3, #156	; 0x9c
 801195a:	681c      	ldr	r4, [r3, #0]
 801195c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011960:	4919      	ldr	r1, [pc, #100]	; (80119c8 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8011962:	4618      	mov	r0, r3
 8011964:	f7f9 f82b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011968:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801196c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801196e:	4618      	mov	r0, r3
 8011970:	f7f9 f825 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011974:	f107 0014 	add.w	r0, r7, #20
 8011978:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801197c:	9301      	str	r3, [sp, #4]
 801197e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011982:	9300      	str	r3, [sp, #0]
 8011984:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011986:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011988:	68f9      	ldr	r1, [r7, #12]
 801198a:	f7fc f84d 	bl	800da28 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 801198e:	f107 0314 	add.w	r3, r7, #20
 8011992:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011996:	4619      	mov	r1, r3
 8011998:	68f8      	ldr	r0, [r7, #12]
 801199a:	47a0      	blx	r4
 801199c:	f107 0314 	add.w	r3, r7, #20
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7fc f887 	bl	800dab4 <_ZN25FeatureUnsupportedFailureD1Ev>
 80119a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7f9 fbbf 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80119b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7f9 fbba 	bl	800b12e <_ZN12SimpleStringD1Ev>
#endif
}
 80119ba:	bf00      	nop
 80119bc:	375c      	adds	r7, #92	; 0x5c
 80119be:	46bd      	mov	sp, r7
 80119c0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80119c4:	b002      	add	sp, #8
 80119c6:	4770      	bx	lr
 80119c8:	08022a54 	.word	0x08022a54

080119cc <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80119cc:	b082      	sub	sp, #8
 80119ce:	b590      	push	{r4, r7, lr}
 80119d0:	b099      	sub	sp, #100	; 0x64
 80119d2:	af02      	add	r7, sp, #8
 80119d4:	60f8      	str	r0, [r7, #12]
 80119d6:	1d38      	adds	r0, r7, #4
 80119d8:	e880 0006 	stmia.w	r0, {r1, r2}
 80119dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 80119de:	68f8      	ldr	r0, [r7, #12]
 80119e0:	f000 fbb6 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 80119e4:	4603      	mov	r3, r0
 80119e6:	681a      	ldr	r2, [r3, #0]
 80119e8:	3228      	adds	r2, #40	; 0x28
 80119ea:	6812      	ldr	r2, [r2, #0]
 80119ec:	4618      	mov	r0, r3
 80119ee:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	339c      	adds	r3, #156	; 0x9c
 80119f6:	681c      	ldr	r4, [r3, #0]
 80119f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80119fc:	4919      	ldr	r1, [pc, #100]	; (8011a64 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7f8 ffdd 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011a04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011a08:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7f8 ffd7 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011a10:	f107 0014 	add.w	r0, r7, #20
 8011a14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011a18:	9301      	str	r3, [sp, #4]
 8011a1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011a1e:	9300      	str	r3, [sp, #0]
 8011a20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011a22:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011a24:	68f9      	ldr	r1, [r7, #12]
 8011a26:	f7fb ffff 	bl	800da28 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8011a2a:	f107 0314 	add.w	r3, r7, #20
 8011a2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011a32:	4619      	mov	r1, r3
 8011a34:	68f8      	ldr	r0, [r7, #12]
 8011a36:	47a0      	blx	r4
 8011a38:	f107 0314 	add.w	r3, r7, #20
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7fc f839 	bl	800dab4 <_ZN25FeatureUnsupportedFailureD1Ev>
 8011a42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7f9 fb71 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011a4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011a50:	4618      	mov	r0, r3
 8011a52:	f7f9 fb6c 	bl	800b12e <_ZN12SimpleStringD1Ev>
#endif
}
 8011a56:	bf00      	nop
 8011a58:	375c      	adds	r7, #92	; 0x5c
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8011a60:	b002      	add	sp, #8
 8011a62:	4770      	bx	lr
 8011a64:	08022a54 	.word	0x08022a54

08011a68 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011a68:	b590      	push	{r4, r7, lr}
 8011a6a:	b099      	sub	sp, #100	; 0x64
 8011a6c:	af04      	add	r7, sp, #16
 8011a6e:	60f8      	str	r0, [r7, #12]
 8011a70:	607b      	str	r3, [r7, #4]
 8011a72:	460b      	mov	r3, r1
 8011a74:	72fb      	strb	r3, [r7, #11]
 8011a76:	4613      	mov	r3, r2
 8011a78:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 8011a7a:	68f8      	ldr	r0, [r7, #12]
 8011a7c:	f000 fb68 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 8011a80:	4603      	mov	r3, r0
 8011a82:	681a      	ldr	r2, [r3, #0]
 8011a84:	3228      	adds	r2, #40	; 0x28
 8011a86:	6812      	ldr	r2, [r2, #0]
 8011a88:	4618      	mov	r0, r3
 8011a8a:	4790      	blx	r2
    if (expected != actual)
 8011a8c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8011a90:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d029      	beq.n	8011aec <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	339c      	adds	r3, #156	; 0x9c
 8011a9e:	681c      	ldr	r4, [r3, #0]
 8011aa0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011aa4:	6879      	ldr	r1, [r7, #4]
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f7f8 ff89 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011aac:	f107 0014 	add.w	r0, r7, #20
 8011ab0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011ab4:	9302      	str	r3, [sp, #8]
 8011ab6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8011aba:	9301      	str	r3, [sp, #4]
 8011abc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011ac0:	9300      	str	r3, [sp, #0]
 8011ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ac4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011ac6:	68f9      	ldr	r1, [r7, #12]
 8011ac8:	f7fb fc94 	bl	800d3f4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8011acc:	f107 0314 	add.w	r3, r7, #20
 8011ad0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	68f8      	ldr	r0, [r7, #12]
 8011ad6:	47a0      	blx	r4
 8011ad8:	f107 0314 	add.w	r3, r7, #20
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7fc f893 	bl	800dc08 <_ZN23SignedBytesEqualFailureD1Ev>
 8011ae2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f7f9 fb21 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8011aec:	bf00      	nop
 8011aee:	3754      	adds	r7, #84	; 0x54
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd90      	pop	{r4, r7, pc}

08011af4 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011af4:	b590      	push	{r4, r7, lr}
 8011af6:	b09d      	sub	sp, #116	; 0x74
 8011af8:	af04      	add	r7, sp, #16
 8011afa:	60f8      	str	r0, [r7, #12]
 8011afc:	60b9      	str	r1, [r7, #8]
 8011afe:	607a      	str	r2, [r7, #4]
 8011b00:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011b02:	68f8      	ldr	r0, [r7, #12]
 8011b04:	f000 fb24 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	681a      	ldr	r2, [r3, #0]
 8011b0c:	3228      	adds	r2, #40	; 0x28
 8011b0e:	6812      	ldr	r2, [r2, #0]
 8011b10:	4618      	mov	r0, r3
 8011b12:	4790      	blx	r2
    if (expected != actual)
 8011b14:	68ba      	ldr	r2, [r7, #8]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	d03f      	beq.n	8011b9c <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	339c      	adds	r3, #156	; 0x9c
 8011b22:	681c      	ldr	r4, [r3, #0]
 8011b24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011b28:	68b9      	ldr	r1, [r7, #8]
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7f9 fdea 	bl	800b704 <_Z10StringFromPKv>
 8011b30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011b34:	6879      	ldr	r1, [r7, #4]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7f9 fde4 	bl	800b704 <_Z10StringFromPKv>
 8011b3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011b40:	6839      	ldr	r1, [r7, #0]
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7f8 ff3b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011b48:	f107 0014 	add.w	r0, r7, #20
 8011b4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011b50:	9302      	str	r3, [sp, #8]
 8011b52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011b56:	9301      	str	r3, [sp, #4]
 8011b58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011b5c:	9300      	str	r3, [sp, #0]
 8011b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011b60:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011b62:	68f9      	ldr	r1, [r7, #12]
 8011b64:	f7fb f814 	bl	800cb90 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011b68:	f107 0314 	add.w	r3, r7, #20
 8011b6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011b6e:	4619      	mov	r1, r3
 8011b70:	68f8      	ldr	r0, [r7, #12]
 8011b72:	47a0      	blx	r4
 8011b74:	f107 0314 	add.w	r3, r7, #20
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f7fc f955 	bl	800de28 <_ZN13EqualsFailureD1Ev>
 8011b7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011b82:	4618      	mov	r0, r3
 8011b84:	f7f9 fad3 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011b88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7f9 face 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011b92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7f9 fac9 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8011b9c:	bf00      	nop
 8011b9e:	3764      	adds	r7, #100	; 0x64
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd90      	pop	{r4, r7, pc}

08011ba4 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011ba4:	b590      	push	{r4, r7, lr}
 8011ba6:	b09d      	sub	sp, #116	; 0x74
 8011ba8:	af04      	add	r7, sp, #16
 8011baa:	60f8      	str	r0, [r7, #12]
 8011bac:	60b9      	str	r1, [r7, #8]
 8011bae:	607a      	str	r2, [r7, #4]
 8011bb0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011bb2:	68f8      	ldr	r0, [r7, #12]
 8011bb4:	f000 facc 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	681a      	ldr	r2, [r3, #0]
 8011bbc:	3228      	adds	r2, #40	; 0x28
 8011bbe:	6812      	ldr	r2, [r2, #0]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	4790      	blx	r2
    if (expected != actual)
 8011bc4:	68ba      	ldr	r2, [r7, #8]
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d03f      	beq.n	8011c4c <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	339c      	adds	r3, #156	; 0x9c
 8011bd2:	681c      	ldr	r4, [r3, #0]
 8011bd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011bd8:	68b9      	ldr	r1, [r7, #8]
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7f9 fdbc 	bl	800b758 <_Z10StringFromPFvvE>
 8011be0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011be4:	6879      	ldr	r1, [r7, #4]
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7f9 fdb6 	bl	800b758 <_Z10StringFromPFvvE>
 8011bec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011bf0:	6839      	ldr	r1, [r7, #0]
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7f8 fee3 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011bf8:	f107 0014 	add.w	r0, r7, #20
 8011bfc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011c00:	9302      	str	r3, [sp, #8]
 8011c02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011c06:	9301      	str	r3, [sp, #4]
 8011c08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c0c:	9300      	str	r3, [sp, #0]
 8011c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c10:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011c12:	68f9      	ldr	r1, [r7, #12]
 8011c14:	f7fa ffbc 	bl	800cb90 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011c18:	f107 0314 	add.w	r3, r7, #20
 8011c1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011c1e:	4619      	mov	r1, r3
 8011c20:	68f8      	ldr	r0, [r7, #12]
 8011c22:	47a0      	blx	r4
 8011c24:	f107 0314 	add.w	r3, r7, #20
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7fc f8fd 	bl	800de28 <_ZN13EqualsFailureD1Ev>
 8011c2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7f9 fa7b 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011c38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7f9 fa76 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011c42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7f9 fa71 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8011c4c:	bf00      	nop
 8011c4e:	3764      	adds	r7, #100	; 0x64
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd90      	pop	{r4, r7, pc}

08011c54 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011c54:	b590      	push	{r4, r7, lr}
 8011c56:	b09d      	sub	sp, #116	; 0x74
 8011c58:	af02      	add	r7, sp, #8
 8011c5a:	6278      	str	r0, [r7, #36]	; 0x24
 8011c5c:	ed87 0b06 	vstr	d0, [r7, #24]
 8011c60:	ed87 1b04 	vstr	d1, [r7, #16]
 8011c64:	ed87 2b02 	vstr	d2, [r7, #8]
 8011c68:	6239      	str	r1, [r7, #32]
 8011c6a:	607a      	str	r2, [r7, #4]
 8011c6c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011c6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c70:	f000 fa6e 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 8011c74:	4603      	mov	r3, r0
 8011c76:	681a      	ldr	r2, [r3, #0]
 8011c78:	3228      	adds	r2, #40	; 0x28
 8011c7a:	6812      	ldr	r2, [r2, #0]
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8011c80:	ed97 2b02 	vldr	d2, [r7, #8]
 8011c84:	ed97 1b04 	vldr	d1, [r7, #16]
 8011c88:	ed97 0b06 	vldr	d0, [r7, #24]
 8011c8c:	f7fe fd4a 	bl	8010724 <_Z13doubles_equalddd>
 8011c90:	4603      	mov	r3, r0
 8011c92:	f083 0301 	eor.w	r3, r3, #1
 8011c96:	b2db      	uxtb	r3, r3
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d029      	beq.n	8011cf0 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8011c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	339c      	adds	r3, #156	; 0x9c
 8011ca2:	681c      	ldr	r4, [r3, #0]
 8011ca4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011ca8:	6a39      	ldr	r1, [r7, #32]
 8011caa:	4618      	mov	r0, r3
 8011cac:	f7f8 fe87 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011cb0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8011cb4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011cb8:	9300      	str	r3, [sp, #0]
 8011cba:	ed97 2b02 	vldr	d2, [r7, #8]
 8011cbe:	ed97 1b04 	vldr	d1, [r7, #16]
 8011cc2:	ed97 0b06 	vldr	d0, [r7, #24]
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	687a      	ldr	r2, [r7, #4]
 8011cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011ccc:	f7fa ffa2 	bl	800cc14 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 8011cd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011cd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cda:	47a0      	blx	r4
 8011cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7fc f87f 	bl	800dde4 <_ZN19DoublesEqualFailureD1Ev>
 8011ce6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7f9 fa1f 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8011cf0:	bf00      	nop
 8011cf2:	376c      	adds	r7, #108	; 0x6c
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd90      	pop	{r4, r7, pc}

08011cf8 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011cf8:	b590      	push	{r4, r7, lr}
 8011cfa:	b0a7      	sub	sp, #156	; 0x9c
 8011cfc:	af04      	add	r7, sp, #16
 8011cfe:	60f8      	str	r0, [r7, #12]
 8011d00:	60b9      	str	r1, [r7, #8]
 8011d02:	607a      	str	r2, [r7, #4]
 8011d04:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011d06:	68f8      	ldr	r0, [r7, #12]
 8011d08:	f000 fa22 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	681a      	ldr	r2, [r3, #0]
 8011d10:	3228      	adds	r2, #40	; 0x28
 8011d12:	6812      	ldr	r2, [r2, #0]
 8011d14:	4618      	mov	r0, r3
 8011d16:	4790      	blx	r2
	if (length == 0) return;
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d075      	beq.n	8011e0a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d102      	bne.n	8011d2a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d071      	beq.n	8011e0e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d002      	beq.n	8011d36 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d12d      	bne.n	8011d92 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	339c      	adds	r3, #156	; 0x9c
 8011d3c:	681c      	ldr	r4, [r3, #0]
 8011d3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011d42:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011d46:	4618      	mov	r0, r3
 8011d48:	f7f8 fe39 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011d4c:	f107 0010 	add.w	r0, r7, #16
 8011d50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011d54:	9303      	str	r3, [sp, #12]
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	9302      	str	r3, [sp, #8]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	9301      	str	r3, [sp, #4]
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	9300      	str	r3, [sp, #0]
 8011d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011d66:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011d6a:	68f9      	ldr	r1, [r7, #12]
 8011d6c:	f7fb fd70 	bl	800d850 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8011d70:	f107 0310 	add.w	r3, r7, #16
 8011d74:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011d78:	4619      	mov	r1, r3
 8011d7a:	68f8      	ldr	r0, [r7, #12]
 8011d7c:	47a0      	blx	r4
 8011d7e:	f107 0310 	add.w	r3, r7, #16
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7fb feda 	bl	800db3c <_ZN18BinaryEqualFailureD1Ev>
 8011d88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7f9 f9ce 	bl	800b12e <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 8011d92:	683a      	ldr	r2, [r7, #0]
 8011d94:	6879      	ldr	r1, [r7, #4]
 8011d96:	68b8      	ldr	r0, [r7, #8]
 8011d98:	f7f8 fd30 	bl	800a7fc <_ZN12SimpleString6MemCmpEPKvS1_j>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	bf14      	ite	ne
 8011da2:	2301      	movne	r3, #1
 8011da4:	2300      	moveq	r3, #0
 8011da6:	b2db      	uxtb	r3, r3
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d031      	beq.n	8011e10 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	339c      	adds	r3, #156	; 0x9c
 8011db2:	681c      	ldr	r4, [r3, #0]
 8011db4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011db8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f7f8 fdfe 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011dc2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8011dc6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011dca:	9303      	str	r3, [sp, #12]
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	9302      	str	r3, [sp, #8]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	9301      	str	r3, [sp, #4]
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	9300      	str	r3, [sp, #0]
 8011dd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011ddc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011de0:	68f9      	ldr	r1, [r7, #12]
 8011de2:	f7fb fd35 	bl	800d850 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8011de6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011dea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011dee:	4619      	mov	r1, r3
 8011df0:	68f8      	ldr	r0, [r7, #12]
 8011df2:	47a0      	blx	r4
 8011df4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7fb fe9f 	bl	800db3c <_ZN18BinaryEqualFailureD1Ev>
 8011dfe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7f9 f993 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011e08:	e002      	b.n	8011e10 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 8011e0a:	bf00      	nop
 8011e0c:	e000      	b.n	8011e10 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011e0e:	bf00      	nop
}
 8011e10:	378c      	adds	r7, #140	; 0x8c
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd90      	pop	{r4, r7, pc}

08011e16 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011e16:	b590      	push	{r4, r7, lr}
 8011e18:	b09b      	sub	sp, #108	; 0x6c
 8011e1a:	af06      	add	r7, sp, #24
 8011e1c:	60f8      	str	r0, [r7, #12]
 8011e1e:	60b9      	str	r1, [r7, #8]
 8011e20:	607a      	str	r2, [r7, #4]
 8011e22:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011e24:	68f8      	ldr	r0, [r7, #12]
 8011e26:	f000 f993 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	681a      	ldr	r2, [r3, #0]
 8011e2e:	3228      	adds	r2, #40	; 0x28
 8011e30:	6812      	ldr	r2, [r2, #0]
 8011e32:	4618      	mov	r0, r3
 8011e34:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 8011e36:	68ba      	ldr	r2, [r7, #8]
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	405a      	eors	r2, r3
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	4013      	ands	r3, r2
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d02b      	beq.n	8011e9c <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	339c      	adds	r3, #156	; 0x9c
 8011e4a:	681c      	ldr	r4, [r3, #0]
 8011e4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e50:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7f8 fdb3 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011e58:	f107 0014 	add.w	r0, r7, #20
 8011e5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e60:	9304      	str	r3, [sp, #16]
 8011e62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e64:	9303      	str	r3, [sp, #12]
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	9302      	str	r3, [sp, #8]
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	9301      	str	r3, [sp, #4]
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	9300      	str	r3, [sp, #0]
 8011e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011e76:	68f9      	ldr	r1, [r7, #12]
 8011e78:	f7fb fd7a 	bl	800d970 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 8011e7c:	f107 0314 	add.w	r3, r7, #20
 8011e80:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011e82:	4619      	mov	r1, r3
 8011e84:	68f8      	ldr	r0, [r7, #12]
 8011e86:	47a0      	blx	r4
 8011e88:	f107 0314 	add.w	r3, r7, #20
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7fb fe33 	bl	800daf8 <_ZN16BitsEqualFailureD1Ev>
 8011e92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7f9 f949 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8011e9c:	bf00      	nop
 8011e9e:	3754      	adds	r7, #84	; 0x54
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd90      	pop	{r4, r7, pc}

08011ea4 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8011ea4:	b590      	push	{r4, r7, lr}
 8011ea6:	b09d      	sub	sp, #116	; 0x74
 8011ea8:	af04      	add	r7, sp, #16
 8011eaa:	60f8      	str	r0, [r7, #12]
 8011eac:	607a      	str	r2, [r7, #4]
 8011eae:	603b      	str	r3, [r7, #0]
 8011eb0:	460b      	mov	r3, r1
 8011eb2:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8011eb4:	68f8      	ldr	r0, [r7, #12]
 8011eb6:	f000 f94b 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	681a      	ldr	r2, [r3, #0]
 8011ebe:	3228      	adds	r2, #40	; 0x28
 8011ec0:	6812      	ldr	r2, [r2, #0]
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	4790      	blx	r2
    if (failed)
 8011ec6:	7afb      	ldrb	r3, [r7, #11]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d03f      	beq.n	8011f4c <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	339c      	adds	r3, #156	; 0x9c
 8011ed2:	681c      	ldr	r4, [r3, #0]
 8011ed4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011ed8:	6879      	ldr	r1, [r7, #4]
 8011eda:	4618      	mov	r0, r3
 8011edc:	f7f8 fd6f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011ee0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011ee4:	6839      	ldr	r1, [r7, #0]
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7f8 fd69 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011eec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011ef0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7f8 fd63 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011ef8:	f107 0014 	add.w	r0, r7, #20
 8011efc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011f00:	9302      	str	r3, [sp, #8]
 8011f02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011f06:	9301      	str	r3, [sp, #4]
 8011f08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f0c:	9300      	str	r3, [sp, #0]
 8011f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f10:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011f12:	68f9      	ldr	r1, [r7, #12]
 8011f14:	f7fa ff30 	bl	800cd78 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011f18:	f107 0314 	add.w	r3, r7, #20
 8011f1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011f1e:	4619      	mov	r1, r3
 8011f20:	68f8      	ldr	r0, [r7, #12]
 8011f22:	47a0      	blx	r4
 8011f24:	f107 0314 	add.w	r3, r7, #20
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f7fb ff39 	bl	800dda0 <_ZN17CheckEqualFailureD1Ev>
 8011f2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7f9 f8fb 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011f38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f7f9 f8f6 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011f42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7f9 f8f1 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8011f4c:	bf00      	nop
 8011f4e:	3764      	adds	r7, #100	; 0x64
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd90      	pop	{r4, r7, pc}

08011f54 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8011f54:	b590      	push	{r4, r7, lr}
 8011f56:	b09d      	sub	sp, #116	; 0x74
 8011f58:	af04      	add	r7, sp, #16
 8011f5a:	60f8      	str	r0, [r7, #12]
 8011f5c:	607a      	str	r2, [r7, #4]
 8011f5e:	603b      	str	r3, [r7, #0]
 8011f60:	460b      	mov	r3, r1
 8011f62:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8011f64:	68f8      	ldr	r0, [r7, #12]
 8011f66:	f000 f8f3 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	681a      	ldr	r2, [r3, #0]
 8011f6e:	3228      	adds	r2, #40	; 0x28
 8011f70:	6812      	ldr	r2, [r2, #0]
 8011f72:	4618      	mov	r0, r3
 8011f74:	4790      	blx	r2
    if (!comparison)
 8011f76:	7afb      	ldrb	r3, [r7, #11]
 8011f78:	f083 0301 	eor.w	r3, r3, #1
 8011f7c:	b2db      	uxtb	r3, r3
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d03f      	beq.n	8012002 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	339c      	adds	r3, #156	; 0x9c
 8011f88:	681c      	ldr	r4, [r3, #0]
 8011f8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f8e:	6879      	ldr	r1, [r7, #4]
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7f8 fd14 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011f96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011f9a:	6839      	ldr	r1, [r7, #0]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7f8 fd0e 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011fa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011fa6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7f8 fd08 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8011fae:	f107 0014 	add.w	r0, r7, #20
 8011fb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011fb6:	9302      	str	r3, [sp, #8]
 8011fb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011fbc:	9301      	str	r3, [sp, #4]
 8011fbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011fc2:	9300      	str	r3, [sp, #0]
 8011fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011fc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011fc8:	68f9      	ldr	r1, [r7, #12]
 8011fca:	f7fa ff83 	bl	800ced4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011fce:	f107 0314 	add.w	r3, r7, #20
 8011fd2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	68f8      	ldr	r0, [r7, #12]
 8011fd8:	47a0      	blx	r4
 8011fda:	f107 0314 	add.w	r3, r7, #20
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7fb febc 	bl	800dd5c <_ZN17ComparisonFailureD1Ev>
 8011fe4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7f9 f8a0 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011fee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7f9 f89b 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8011ff8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7f9 f896 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8012002:	bf00      	nop
 8012004:	3764      	adds	r7, #100	; 0x64
 8012006:	46bd      	mov	sp, r7
 8012008:	bd90      	pop	{r4, r7, pc}
	...

0801200c <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 801200c:	b5b0      	push	{r4, r5, r7, lr}
 801200e:	b088      	sub	sp, #32
 8012010:	af00      	add	r7, sp, #0
 8012012:	60f8      	str	r0, [r7, #12]
 8012014:	60b9      	str	r1, [r7, #8]
 8012016:	607a      	str	r2, [r7, #4]
 8012018:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 801201a:	f107 0310 	add.w	r3, r7, #16
 801201e:	4924      	ldr	r1, [pc, #144]	; (80120b0 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 8012020:	4618      	mov	r0, r3
 8012022:	f7f8 fccc 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8012026:	f107 0310 	add.w	r3, r7, #16
 801202a:	6879      	ldr	r1, [r7, #4]
 801202c:	4618      	mov	r0, r3
 801202e:	f7f9 f90d 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 8012032:	f107 0310 	add.w	r3, r7, #16
 8012036:	491f      	ldr	r1, [pc, #124]	; (80120b4 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8012038:	4618      	mov	r0, r3
 801203a:	f7f9 f907 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 801203e:	f107 0318 	add.w	r3, r7, #24
 8012042:	6839      	ldr	r1, [r7, #0]
 8012044:	4618      	mov	r0, r3
 8012046:	f7f9 fda1 	bl	800bb8c <_Z10StringFromj>
 801204a:	f107 0218 	add.w	r2, r7, #24
 801204e:	f107 0310 	add.w	r3, r7, #16
 8012052:	4611      	mov	r1, r2
 8012054:	4618      	mov	r0, r3
 8012056:	f7f9 f8e7 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801205a:	f107 0318 	add.w	r3, r7, #24
 801205e:	4618      	mov	r0, r3
 8012060:	f7f9 f865 	bl	800b12e <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8012064:	f107 0310 	add.w	r3, r7, #16
 8012068:	4913      	ldr	r1, [pc, #76]	; (80120b8 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 801206a:	4618      	mov	r0, r3
 801206c:	f7f9 f8ee 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8012070:	f107 0310 	add.w	r3, r7, #16
 8012074:	68b9      	ldr	r1, [r7, #8]
 8012076:	4618      	mov	r0, r3
 8012078:	f7f9 f8e8 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 801207c:	68f8      	ldr	r0, [r7, #12]
 801207e:	f000 f867 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 8012082:	4604      	mov	r4, r0
 8012084:	6823      	ldr	r3, [r4, #0]
 8012086:	3338      	adds	r3, #56	; 0x38
 8012088:	681d      	ldr	r5, [r3, #0]
 801208a:	f107 0310 	add.w	r3, r7, #16
 801208e:	4618      	mov	r0, r3
 8012090:	f7f9 f820 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8012094:	4603      	mov	r3, r0
 8012096:	4619      	mov	r1, r3
 8012098:	4620      	mov	r0, r4
 801209a:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 801209c:	f107 0310 	add.w	r3, r7, #16
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7f9 f844 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 80120a6:	bf00      	nop
 80120a8:	3720      	adds	r7, #32
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bdb0      	pop	{r4, r5, r7, pc}
 80120ae:	bf00      	nop
 80120b0:	08022a6c 	.word	0x08022a6c
 80120b4:	08022a70 	.word	0x08022a70
 80120b8:	08022a74 	.word	0x08022a74

080120bc <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 80120bc:	b590      	push	{r4, r7, lr}
 80120be:	b085      	sub	sp, #20
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	60f8      	str	r0, [r7, #12]
 80120c4:	60b9      	str	r1, [r7, #8]
 80120c6:	607a      	str	r2, [r7, #4]
 80120c8:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	3370      	adds	r3, #112	; 0x70
 80120d0:	681c      	ldr	r4, [r3, #0]
 80120d2:	68b8      	ldr	r0, [r7, #8]
 80120d4:	f7f8 fffe 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 80120d8:	4601      	mov	r1, r0
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	687a      	ldr	r2, [r7, #4]
 80120de:	68f8      	ldr	r0, [r7, #12]
 80120e0:	47a0      	blx	r4
}
 80120e2:	bf00      	nop
 80120e4:	3714      	adds	r7, #20
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd90      	pop	{r4, r7, pc}

080120ea <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 80120ea:	b580      	push	{r7, lr}
 80120ec:	b082      	sub	sp, #8
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	6078      	str	r0, [r7, #4]
 80120f2:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f000 f82b 	bl	8012150 <_ZN10UtestShell13getTestResultEv>
 80120fa:	4603      	mov	r3, r0
 80120fc:	681a      	ldr	r2, [r3, #0]
 80120fe:	323c      	adds	r2, #60	; 0x3c
 8012100:	6812      	ldr	r2, [r2, #0]
 8012102:	6839      	ldr	r1, [r7, #0]
 8012104:	4618      	mov	r0, r3
 8012106:	4790      	blx	r2
}
 8012108:	bf00      	nop
 801210a:	3708      	adds	r7, #8
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}

08012110 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8012110:	b480      	push	{r7}
 8012112:	b083      	sub	sp, #12
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 801211a:	4a04      	ldr	r2, [pc, #16]	; (801212c <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	6013      	str	r3, [r2, #0]
}
 8012120:	bf00      	nop
 8012122:	370c      	adds	r7, #12
 8012124:	46bd      	mov	sp, r7
 8012126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212a:	4770      	bx	lr
 801212c:	20000954 	.word	0x20000954

08012130 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8012130:	b480      	push	{r7}
 8012132:	b083      	sub	sp, #12
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
 8012138:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 801213a:	4a04      	ldr	r2, [pc, #16]	; (801214c <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	6013      	str	r3, [r2, #0]
}
 8012140:	bf00      	nop
 8012142:	370c      	adds	r7, #12
 8012144:	46bd      	mov	sp, r7
 8012146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214a:	4770      	bx	lr
 801214c:	20000958 	.word	0x20000958

08012150 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8012158:	4b09      	ldr	r3, [pc, #36]	; (8012180 <_ZN10UtestShell13getTestResultEv+0x30>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d109      	bne.n	8012174 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8012160:	f7fe fbb2 	bl	80108c8 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8012164:	4603      	mov	r3, r0
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	32a4      	adds	r2, #164	; 0xa4
 801216a:	6812      	ldr	r2, [r2, #0]
 801216c:	4618      	mov	r0, r3
 801216e:	4790      	blx	r2
 8012170:	4603      	mov	r3, r0
 8012172:	e001      	b.n	8012178 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8012174:	4b02      	ldr	r3, [pc, #8]	; (8012180 <_ZN10UtestShell13getTestResultEv+0x30>)
 8012176:	681b      	ldr	r3, [r3, #0]
}
 8012178:	4618      	mov	r0, r3
 801217a:	3708      	adds	r7, #8
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}
 8012180:	20000954 	.word	0x20000954

08012184 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8012184:	b580      	push	{r7, lr}
 8012186:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8012188:	4b05      	ldr	r3, [pc, #20]	; (80121a0 <_ZN10UtestShell10getCurrentEv+0x1c>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d103      	bne.n	8012198 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8012190:	f7fe fb9a 	bl	80108c8 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8012194:	4603      	mov	r3, r0
 8012196:	e001      	b.n	801219c <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8012198:	4b01      	ldr	r3, [pc, #4]	; (80121a0 <_ZN10UtestShell10getCurrentEv+0x1c>)
 801219a:	681b      	ldr	r3, [r3, #0]
}
 801219c:	4618      	mov	r0, r3
 801219e:	bd80      	pop	{r7, pc}
 80121a0:	20000958 	.word	0x20000958

080121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 80121a4:	b480      	push	{r7}
 80121a6:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 80121a8:	4b03      	ldr	r3, [pc, #12]	; (80121b8 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 80121aa:	681b      	ldr	r3, [r3, #0]
}
 80121ac:	4618      	mov	r0, r3
 80121ae:	46bd      	mov	sp, r7
 80121b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b4:	4770      	bx	lr
 80121b6:	bf00      	nop
 80121b8:	20000090 	.word	0x20000090

080121bc <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 80121bc:	b480      	push	{r7}
 80121be:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 80121c0:	4b03      	ldr	r3, [pc, #12]	; (80121d0 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 80121c2:	4a04      	ldr	r2, [pc, #16]	; (80121d4 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 80121c4:	601a      	str	r2, [r3, #0]
}
 80121c6:	bf00      	nop
 80121c8:	46bd      	mov	sp, r7
 80121ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ce:	4770      	bx	lr
 80121d0:	20000090 	.word	0x20000090
 80121d4:	2000008c 	.word	0x2000008c

080121d8 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 80121d8:	b480      	push	{r7}
 80121da:	b083      	sub	sp, #12
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	4a04      	ldr	r2, [pc, #16]	; (80121f4 <_ZN5UtestC1Ev+0x1c>)
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	601a      	str	r2, [r3, #0]
{
}
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	4618      	mov	r0, r3
 80121ea:	370c      	adds	r7, #12
 80121ec:	46bd      	mov	sp, r7
 80121ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f2:	4770      	bx	lr
 80121f4:	08025b50 	.word	0x08025b50

080121f8 <_ZN5UtestD1Ev>:

Utest::~Utest()
 80121f8:	b480      	push	{r7}
 80121fa:	b083      	sub	sp, #12
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
 8012200:	4a04      	ldr	r2, [pc, #16]	; (8012214 <_ZN5UtestD1Ev+0x1c>)
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	601a      	str	r2, [r3, #0]
{
}
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	4618      	mov	r0, r3
 801220a:	370c      	adds	r7, #12
 801220c:	46bd      	mov	sp, r7
 801220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012212:	4770      	bx	lr
 8012214:	08025b50 	.word	0x08025b50

08012218 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8012218:	b580      	push	{r7, lr}
 801221a:	b082      	sub	sp, #8
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
}
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f7ff ffe9 	bl	80121f8 <_ZN5UtestD1Ev>
 8012226:	2104      	movs	r1, #4
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	f7f6 f819 	bl	8008260 <_ZdlPvj>
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	4618      	mov	r0, r3
 8012232:	3708      	adds	r7, #8
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}

08012238 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b082      	sub	sp, #8
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8012240:	4b0d      	ldr	r3, [pc, #52]	; (8012278 <_ZN5Utest3runEv+0x40>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	6879      	ldr	r1, [r7, #4]
 8012246:	480d      	ldr	r0, [pc, #52]	; (801227c <_ZN5Utest3runEv+0x44>)
 8012248:	4798      	blx	r3
 801224a:	4603      	mov	r3, r0
 801224c:	2b00      	cmp	r3, #0
 801224e:	bf14      	ite	ne
 8012250:	2301      	movne	r3, #1
 8012252:	2300      	moveq	r3, #0
 8012254:	b2db      	uxtb	r3, r3
 8012256:	2b00      	cmp	r3, #0
 8012258:	d004      	beq.n	8012264 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 801225a:	4b07      	ldr	r3, [pc, #28]	; (8012278 <_ZN5Utest3runEv+0x40>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	6879      	ldr	r1, [r7, #4]
 8012260:	4807      	ldr	r0, [pc, #28]	; (8012280 <_ZN5Utest3runEv+0x48>)
 8012262:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8012264:	4b04      	ldr	r3, [pc, #16]	; (8012278 <_ZN5Utest3runEv+0x40>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	6879      	ldr	r1, [r7, #4]
 801226a:	4806      	ldr	r0, [pc, #24]	; (8012284 <_ZN5Utest3runEv+0x4c>)
 801226c:	4798      	blx	r3
}
 801226e:	bf00      	nop
 8012270:	3708      	adds	r7, #8
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}
 8012276:	bf00      	nop
 8012278:	200000a0 	.word	0x200000a0
 801227c:	08010925 	.word	0x08010925
 8012280:	08010941 	.word	0x08010941
 8012284:	0801095d 	.word	0x0801095d

08012288 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8012288:	b480      	push	{r7}
 801228a:	b083      	sub	sp, #12
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
}
 8012290:	bf00      	nop
 8012292:	370c      	adds	r7, #12
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr

0801229c <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 801229c:	b480      	push	{r7}
 801229e:	b083      	sub	sp, #12
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
}
 80122a4:	bf00      	nop
 80122a6:	370c      	adds	r7, #12
 80122a8:	46bd      	mov	sp, r7
 80122aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ae:	4770      	bx	lr

080122b0 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 80122b0:	b480      	push	{r7}
 80122b2:	b083      	sub	sp, #12
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
}
 80122b8:	bf00      	nop
 80122ba:	370c      	adds	r7, #12
 80122bc:	46bd      	mov	sp, r7
 80122be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c2:	4770      	bx	lr

080122c4 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 80122c4:	b480      	push	{r7}
 80122c6:	b083      	sub	sp, #12
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	4a04      	ldr	r2, [pc, #16]	; (80122e0 <_ZN14TestTerminatorD1Ev+0x1c>)
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	601a      	str	r2, [r3, #0]
{
}
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	4618      	mov	r0, r3
 80122d6:	370c      	adds	r7, #12
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr
 80122e0:	08025b3c 	.word	0x08025b3c

080122e4 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b084      	sub	sp, #16
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 80122ec:	2300      	movs	r3, #0
 80122ee:	60fb      	str	r3, [r7, #12]
 80122f0:	f107 030c 	add.w	r3, r7, #12
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7f6 f975 	bl	80085e4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 80122fa:	f107 030c 	add.w	r3, r7, #12
 80122fe:	4618      	mov	r0, r3
 8012300:	f000 f82c 	bl	801235c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8012304:	f107 030c 	add.w	r3, r7, #12
 8012308:	4618      	mov	r0, r3
 801230a:	f000 f835 	bl	8012378 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 801230e:	bf00      	nop
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
	...

08012318 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
 8012320:	4a05      	ldr	r2, [pc, #20]	; (8012338 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	601a      	str	r2, [r3, #0]
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	4618      	mov	r0, r3
 801232a:	f7ff ffcb 	bl	80122c4 <_ZN14TestTerminatorD1Ev>
{
}
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	4618      	mov	r0, r3
 8012332:	3708      	adds	r7, #8
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}
 8012338:	08025b28 	.word	0x08025b28

0801233c <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 801233c:	b580      	push	{r7, lr}
 801233e:	b082      	sub	sp, #8
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
}
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f7ff ffe7 	bl	8012318 <_ZN20NormalTestTerminatorD1Ev>
 801234a:	2104      	movs	r1, #4
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f7f5 ff87 	bl	8008260 <_ZdlPvj>
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	4618      	mov	r0, r3
 8012356:	3708      	adds	r7, #8
 8012358:	46bd      	mov	sp, r7
 801235a:	bd80      	pop	{r7, pc}

0801235c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b082      	sub	sp, #8
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8012364:	4b03      	ldr	r3, [pc, #12]	; (8012374 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	4798      	blx	r3
} // LCOV_EXCL_LINE
 801236a:	bf00      	nop
 801236c:	3708      	adds	r7, #8
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}
 8012372:	bf00      	nop
 8012374:	2000009c 	.word	0x2000009c

08012378 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	4a05      	ldr	r2, [pc, #20]	; (8012398 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	601a      	str	r2, [r3, #0]
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	4618      	mov	r0, r3
 801238a:	f7ff ff9b 	bl	80122c4 <_ZN14TestTerminatorD1Ev>
{
}
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	4618      	mov	r0, r3
 8012392:	3708      	adds	r7, #8
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}
 8012398:	08025b14 	.word	0x08025b14

0801239c <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
}
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f7ff ffe7 	bl	8012378 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 80123aa:	2104      	movs	r1, #4
 80123ac:	6878      	ldr	r0, [r7, #4]
 80123ae:	f7f5 ff57 	bl	8008260 <_ZdlPvj>
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	4618      	mov	r0, r3
 80123b6:	3708      	adds	r7, #8
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}

080123bc <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b082      	sub	sp, #8
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 80123c4:	f7fe fbaa 	bl	8010b1c <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	4618      	mov	r0, r3
 80123cc:	f7ff ff8a 	bl	80122e4 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 80123d0:	bf00      	nop
 80123d2:	3708      	adds	r7, #8
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	4a05      	ldr	r2, [pc, #20]	; (80123f8 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	601a      	str	r2, [r3, #0]
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7ff ff95 	bl	8012318 <_ZN20NormalTestTerminatorD1Ev>
{
}
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	4618      	mov	r0, r3
 80123f2:	3708      	adds	r7, #8
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}
 80123f8:	08025b00 	.word	0x08025b00

080123fc <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b082      	sub	sp, #8
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
}
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f7ff ffe7 	bl	80123d8 <_ZN22CrashingTestTerminatorD1Ev>
 801240a:	2104      	movs	r1, #4
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f7f5 ff27 	bl	8008260 <_ZdlPvj>
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	4618      	mov	r0, r3
 8012416:	3708      	adds	r7, #8
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 801241c:	b580      	push	{r7, lr}
 801241e:	b084      	sub	sp, #16
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
 8012424:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2200      	movs	r2, #0
 801242a:	601a      	str	r2, [r3, #0]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2200      	movs	r2, #0
 8012430:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d007      	beq.n	8012448 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	3310      	adds	r3, #16
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	6838      	ldr	r0, [r7, #0]
 8012442:	4798      	blx	r3
 8012444:	4603      	mov	r3, r0
 8012446:	e000      	b.n	801244a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8012448:	2300      	movs	r3, #0
 801244a:	687a      	ldr	r2, [r7, #4]
 801244c:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	685b      	ldr	r3, [r3, #4]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d02d      	beq.n	80124b2 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	685b      	ldr	r3, [r3, #4]
 801245a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 801245e:	4293      	cmp	r3, r2
 8012460:	d201      	bcs.n	8012466 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 8012462:	009b      	lsls	r3, r3, #2
 8012464:	e001      	b.n	801246a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8012466:	f04f 33ff 	mov.w	r3, #4294967295
 801246a:	f240 3237 	movw	r2, #823	; 0x337
 801246e:	4914      	ldr	r1, [pc, #80]	; (80124c0 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8012470:	4618      	mov	r0, r3
 8012472:	f7f5 ff05 	bl	8008280 <_ZnajPKci>
 8012476:	4602      	mov	r2, r0
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8012480:	2300      	movs	r3, #0
 8012482:	60bb      	str	r3, [r7, #8]
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	685b      	ldr	r3, [r3, #4]
 8012488:	68ba      	ldr	r2, [r7, #8]
 801248a:	429a      	cmp	r2, r3
 801248c:	d212      	bcs.n	80124b4 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681a      	ldr	r2, [r3, #0]
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	009b      	lsls	r3, r3, #2
 8012496:	4413      	add	r3, r2
 8012498:	68fa      	ldr	r2, [r7, #12]
 801249a:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	330c      	adds	r3, #12
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	68f8      	ldr	r0, [r7, #12]
 80124a6:	4798      	blx	r3
 80124a8:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	3301      	adds	r3, #1
 80124ae:	60bb      	str	r3, [r7, #8]
 80124b0:	e7e8      	b.n	8012484 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 80124b2:	bf00      	nop
    }
}
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	4618      	mov	r0, r3
 80124b8:	3710      	adds	r7, #16
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	080228fc 	.word	0x080228fc

080124c4 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b082      	sub	sp, #8
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d004      	beq.n	80124de <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	4618      	mov	r0, r3
 80124da:	f7f5 fee5 	bl	80082a8 <_ZdaPv>
}
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	4618      	mov	r0, r3
 80124e2:	3708      	adds	r7, #8
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 80124e8:	b480      	push	{r7}
 80124ea:	b087      	sub	sp, #28
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	681a      	ldr	r2, [r3, #0]
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	009b      	lsls	r3, r3, #2
 80124fc:	4413      	add	r3, r2
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	681a      	ldr	r2, [r3, #0]
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	009b      	lsls	r3, r3, #2
 801250a:	4413      	add	r3, r2
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	681a      	ldr	r2, [r3, #0]
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	009b      	lsls	r3, r3, #2
 8012518:	4413      	add	r3, r2
 801251a:	697a      	ldr	r2, [r7, #20]
 801251c:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	681a      	ldr	r2, [r3, #0]
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	009b      	lsls	r3, r3, #2
 8012526:	4413      	add	r3, r2
 8012528:	693a      	ldr	r2, [r7, #16]
 801252a:	601a      	str	r2, [r3, #0]
}
 801252c:	bf00      	nop
 801252e:	371c      	adds	r7, #28
 8012530:	46bd      	mov	sp, r7
 8012532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012536:	4770      	bx	lr

08012538 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b084      	sub	sp, #16
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	685b      	ldr	r3, [r3, #4]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d028      	beq.n	801259c <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 801254a:	4b17      	ldr	r3, [pc, #92]	; (80125a8 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	6838      	ldr	r0, [r7, #0]
 8012550:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	685b      	ldr	r3, [r3, #4]
 8012556:	3b01      	subs	r3, #1
 8012558:	60fb      	str	r3, [r7, #12]
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d019      	beq.n	8012594 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d01b      	beq.n	80125a0 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8012568:	4b10      	ldr	r3, [pc, #64]	; (80125ac <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	4798      	blx	r3
 801256e:	4603      	mov	r3, r0
 8012570:	461a      	mov	r2, r3
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	3301      	adds	r3, #1
 8012576:	fbb2 f1f3 	udiv	r1, r2, r3
 801257a:	fb03 f301 	mul.w	r3, r3, r1
 801257e:	1ad3      	subs	r3, r2, r3
 8012580:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 8012582:	68ba      	ldr	r2, [r7, #8]
 8012584:	68f9      	ldr	r1, [r7, #12]
 8012586:	6878      	ldr	r0, [r7, #4]
 8012588:	f7ff ffae 	bl	80124e8 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	3b01      	subs	r3, #1
 8012590:	60fb      	str	r3, [r7, #12]
 8012592:	e7e2      	b.n	801255a <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f000 f834 	bl	8012602 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 801259a:	e002      	b.n	80125a2 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 801259c:	bf00      	nop
 801259e:	e000      	b.n	80125a2 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 80125a0:	bf00      	nop
}
 80125a2:	3710      	adds	r7, #16
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bd80      	pop	{r7, pc}
 80125a8:	200000dc 	.word	0x200000dc
 80125ac:	200000e0 	.word	0x200000e0

080125b0 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b086      	sub	sp, #24
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d01c      	beq.n	80125fa <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	685b      	ldr	r3, [r3, #4]
 80125c4:	085b      	lsrs	r3, r3, #1
 80125c6:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 80125c8:	2300      	movs	r3, #0
 80125ca:	617b      	str	r3, [r7, #20]
 80125cc:	697a      	ldr	r2, [r7, #20]
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d20e      	bcs.n	80125f2 <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	685a      	ldr	r2, [r3, #4]
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	1ad3      	subs	r3, r2, r3
 80125dc:	3b01      	subs	r3, #1
 80125de:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 80125e0:	68fa      	ldr	r2, [r7, #12]
 80125e2:	6979      	ldr	r1, [r7, #20]
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f7ff ff7f 	bl	80124e8 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	3301      	adds	r3, #1
 80125ee:	617b      	str	r3, [r7, #20]
 80125f0:	e7ec      	b.n	80125cc <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f000 f805 	bl	8012602 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 80125f8:	e000      	b.n	80125fc <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 80125fa:	bf00      	nop
}
 80125fc:	3718      	adds	r7, #24
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}

08012602 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 8012602:	b580      	push	{r7, lr}
 8012604:	b084      	sub	sp, #16
 8012606:	af00      	add	r7, sp, #0
 8012608:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 801260a:	2300      	movs	r3, #0
 801260c:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801260e:	2300      	movs	r3, #0
 8012610:	60bb      	str	r3, [r7, #8]
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	68ba      	ldr	r2, [r7, #8]
 8012618:	429a      	cmp	r2, r3
 801261a:	d221      	bcs.n	8012660 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681a      	ldr	r2, [r3, #0]
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6859      	ldr	r1, [r3, #4]
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	1acb      	subs	r3, r1, r3
 8012628:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801262c:	3b01      	subs	r3, #1
 801262e:	009b      	lsls	r3, r3, #2
 8012630:	4413      	add	r3, r2
 8012632:	6818      	ldr	r0, [r3, #0]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681a      	ldr	r2, [r3, #0]
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6859      	ldr	r1, [r3, #4]
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	1acb      	subs	r3, r1, r3
 8012640:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012644:	3b01      	subs	r3, #1
 8012646:	009b      	lsls	r3, r3, #2
 8012648:	4413      	add	r3, r2
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	3308      	adds	r3, #8
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	68f9      	ldr	r1, [r7, #12]
 8012654:	4798      	blx	r3
 8012656:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8012658:	68bb      	ldr	r3, [r7, #8]
 801265a:	3301      	adds	r3, #1
 801265c:	60bb      	str	r3, [r7, #8]
 801265e:	e7d8      	b.n	8012612 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8012660:	bf00      	nop
 8012662:	3710      	adds	r7, #16
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}

08012668 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
    return get(0);
 8012670:	2100      	movs	r1, #0
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f000 f805 	bl	8012682 <_ZNK22UtestShellPointerArray3getEj>
 8012678:	4603      	mov	r3, r0
}
 801267a:	4618      	mov	r0, r3
 801267c:	3708      	adds	r7, #8
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}

08012682 <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 8012682:	b480      	push	{r7}
 8012684:	b083      	sub	sp, #12
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
 801268a:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	683a      	ldr	r2, [r7, #0]
 8012692:	429a      	cmp	r2, r3
 8012694:	d301      	bcc.n	801269a <_ZNK22UtestShellPointerArray3getEj+0x18>
 8012696:	2300      	movs	r3, #0
 8012698:	e005      	b.n	80126a6 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	009b      	lsls	r3, r3, #2
 80126a2:	4413      	add	r3, r2
 80126a4:	681b      	ldr	r3, [r3, #0]
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	370c      	adds	r7, #12
 80126aa:	46bd      	mov	sp, r7
 80126ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b0:	4770      	bx	lr
	...

080126b4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b084      	sub	sp, #16
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	60f8      	str	r0, [r7, #12]
 80126bc:	60b9      	str	r1, [r7, #8]
 80126be:	607a      	str	r2, [r7, #4]
 80126c0:	603b      	str	r3, [r7, #0]
 80126c2:	4a10      	ldr	r2, [pc, #64]	; (8012704 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 80126c8:	6879      	ldr	r1, [r7, #4]
 80126ca:	68b8      	ldr	r0, [r7, #8]
 80126cc:	f7fe fc27 	bl	8010f1e <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 80126d0:	6839      	ldr	r1, [r7, #0]
 80126d2:	68b8      	ldr	r0, [r7, #8]
 80126d4:	f7fe fc31 	bl	8010f3a <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 80126d8:	69b9      	ldr	r1, [r7, #24]
 80126da:	68b8      	ldr	r0, [r7, #8]
 80126dc:	f7fe fc03 	bl	8010ee6 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 80126e0:	69f9      	ldr	r1, [r7, #28]
 80126e2:	68b8      	ldr	r0, [r7, #8]
 80126e4:	f7fe fc0d 	bl	8010f02 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 80126e8:	f7fd fc20 	bl	800ff2c <_ZN12TestRegistry18getCurrentRegistryEv>
 80126ec:	4603      	mov	r3, r0
 80126ee:	681a      	ldr	r2, [r3, #0]
 80126f0:	3208      	adds	r2, #8
 80126f2:	6812      	ldr	r2, [r2, #0]
 80126f4:	68b9      	ldr	r1, [r7, #8]
 80126f6:	4618      	mov	r0, r3
 80126f8:	4790      	blx	r2
}
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	4618      	mov	r0, r3
 80126fe:	3710      	adds	r7, #16
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}
 8012704:	08025a44 	.word	0x08025a44

08012708 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8012708:	b480      	push	{r7}
 801270a:	b083      	sub	sp, #12
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
 8012710:	4a04      	ldr	r2, [pc, #16]	; (8012724 <_ZN13TestInstallerD1Ev+0x1c>)
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	601a      	str	r2, [r3, #0]
{
}
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	4618      	mov	r0, r3
 801271a:	370c      	adds	r7, #12
 801271c:	46bd      	mov	sp, r7
 801271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012722:	4770      	bx	lr
 8012724:	08025a44 	.word	0x08025a44

08012728 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
}
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f7ff ffe9 	bl	8012708 <_ZN13TestInstallerD1Ev>
 8012736:	2104      	movs	r1, #4
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f7f5 fd91 	bl	8008260 <_ZdlPvj>
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	4618      	mov	r0, r3
 8012742:	3708      	adds	r7, #8
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}

08012748 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d10a      	bne.n	801276e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801275e:	4293      	cmp	r3, r2
 8012760:	d105      	bne.n	801276e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8012762:	4805      	ldr	r0, [pc, #20]	; (8012778 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8012764:	f7ff fe38 	bl	80123d8 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8012768:	4804      	ldr	r0, [pc, #16]	; (801277c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 801276a:	f7ff fdd5 	bl	8012318 <_ZN20NormalTestTerminatorD1Ev>
}
 801276e:	bf00      	nop
 8012770:	3708      	adds	r7, #8
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}
 8012776:	bf00      	nop
 8012778:	2000008c 	.word	0x2000008c
 801277c:	20000088 	.word	0x20000088

08012780 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8012780:	b580      	push	{r7, lr}
 8012782:	af00      	add	r7, sp, #0
 8012784:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012788:	2001      	movs	r0, #1
 801278a:	f7ff ffdd 	bl	8012748 <_Z41__static_initialization_and_destruction_0ii>
 801278e:	bd80      	pop	{r7, pc}

08012790 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8012790:	b580      	push	{r7, lr}
 8012792:	af00      	add	r7, sp, #0
 8012794:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012798:	2000      	movs	r0, #0
 801279a:	f7ff ffd5 	bl	8012748 <_Z41__static_initialization_and_destruction_0ii>
 801279e:	bd80      	pop	{r7, pc}

080127a0 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80127a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127a2:	b083      	sub	sp, #12
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	ed87 0b00 	vstr	d0, [r7]
 80127aa:	683c      	ldr	r4, [r7, #0]
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80127b2:	2301      	movs	r3, #1
 80127b4:	461e      	mov	r6, r3
 80127b6:	f04f 32ff 	mov.w	r2, #4294967295
 80127ba:	4b10      	ldr	r3, [pc, #64]	; (80127fc <_ZSt5isinfd+0x5c>)
 80127bc:	4620      	mov	r0, r4
 80127be:	4629      	mov	r1, r5
 80127c0:	f7ed ffe2 	bl	8000788 <__aeabi_dcmpun>
 80127c4:	4603      	mov	r3, r0
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d10b      	bne.n	80127e2 <_ZSt5isinfd+0x42>
 80127ca:	f04f 32ff 	mov.w	r2, #4294967295
 80127ce:	4b0b      	ldr	r3, [pc, #44]	; (80127fc <_ZSt5isinfd+0x5c>)
 80127d0:	4620      	mov	r0, r4
 80127d2:	4629      	mov	r1, r5
 80127d4:	f7ed ffba 	bl	800074c <__aeabi_dcmple>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d101      	bne.n	80127e2 <_ZSt5isinfd+0x42>
 80127de:	2300      	movs	r3, #0
 80127e0:	461e      	mov	r6, r3
 80127e2:	b2f3      	uxtb	r3, r6
 80127e4:	f083 0301 	eor.w	r3, r3, #1
 80127e8:	b2db      	uxtb	r3, r3
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	bf14      	ite	ne
 80127ee:	2301      	movne	r3, #1
 80127f0:	2300      	moveq	r3, #0
 80127f2:	b2db      	uxtb	r3, r3
 80127f4:	4618      	mov	r0, r3
 80127f6:	370c      	adds	r7, #12
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127fc:	7fefffff 	.word	0x7fefffff

08012800 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8012800:	b590      	push	{r4, r7, lr}
 8012802:	b083      	sub	sp, #12
 8012804:	af00      	add	r7, sp, #0
 8012806:	ed87 0b00 	vstr	d0, [r7]
 801280a:	2301      	movs	r3, #1
 801280c:	461c      	mov	r4, r3
 801280e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012812:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012816:	f7ed ffb7 	bl	8000788 <__aeabi_dcmpun>
 801281a:	4603      	mov	r3, r0
 801281c:	2b00      	cmp	r3, #0
 801281e:	d101      	bne.n	8012824 <_ZSt5isnand+0x24>
 8012820:	2300      	movs	r3, #0
 8012822:	461c      	mov	r4, r3
 8012824:	b2e3      	uxtb	r3, r4
 8012826:	2b00      	cmp	r3, #0
 8012828:	bf14      	ite	ne
 801282a:	2301      	movne	r3, #1
 801282c:	2300      	moveq	r3, #0
 801282e:	b2db      	uxtb	r3, r3
 8012830:	4618      	mov	r0, r3
 8012832:	370c      	adds	r7, #12
 8012834:	46bd      	mov	sp, r7
 8012836:	bd90      	pop	{r4, r7, pc}

08012838 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8012838:	b590      	push	{r4, r7, lr}
 801283a:	b095      	sub	sp, #84	; 0x54
 801283c:	af00      	add	r7, sp, #0
 801283e:	60f8      	str	r0, [r7, #12]
 8012840:	60b9      	str	r1, [r7, #8]
 8012842:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	3334      	adds	r3, #52	; 0x34
 801284a:	681c      	ldr	r4, [r3, #0]
 801284c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012850:	490f      	ldr	r1, [pc, #60]	; (8012890 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8012852:	4618      	mov	r0, r3
 8012854:	f7f8 f8b3 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012858:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801285c:	f107 0314 	add.w	r3, r7, #20
 8012860:	68f9      	ldr	r1, [r7, #12]
 8012862:	4618      	mov	r0, r3
 8012864:	f7f9 ff0a 	bl	800c67c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8012868:	f107 0314 	add.w	r3, r7, #20
 801286c:	4619      	mov	r1, r3
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	47a0      	blx	r4
 8012872:	f107 0314 	add.w	r3, r7, #20
 8012876:	4618      	mov	r0, r3
 8012878:	f7f9 ffc0 	bl	800c7fc <_ZN11TestFailureD1Ev>
 801287c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012880:	4618      	mov	r0, r3
 8012882:	f7f8 fc54 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8012886:	bf00      	nop
 8012888:	3754      	adds	r7, #84	; 0x54
 801288a:	46bd      	mov	sp, r7
 801288c:	bd90      	pop	{r4, r7, pc}
 801288e:	bf00      	nop
 8012890:	08022a84 	.word	0x08022a84

08012894 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8012894:	b480      	push	{r7}
 8012896:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8012898:	2301      	movs	r3, #1
}
 801289a:	4618      	mov	r0, r3
 801289c:	46bd      	mov	sp, r7
 801289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a2:	4770      	bx	lr

080128a4 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b082      	sub	sp, #8
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 80128ae:	4b13      	ldr	r3, [pc, #76]	; (80128fc <PlatformSpecificSetJmpImplementation+0x58>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	225c      	movs	r2, #92	; 0x5c
 80128b4:	fb02 f303 	mul.w	r3, r2, r3
 80128b8:	4a11      	ldr	r2, [pc, #68]	; (8012900 <PlatformSpecificSetJmpImplementation+0x5c>)
 80128ba:	4413      	add	r3, r2
 80128bc:	4618      	mov	r0, r3
 80128be:	f7ed fcaf 	bl	8000220 <setjmp>
 80128c2:	4603      	mov	r3, r0
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	bf0c      	ite	eq
 80128c8:	2301      	moveq	r3, #1
 80128ca:	2300      	movne	r3, #0
 80128cc:	b2db      	uxtb	r3, r3
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d00e      	beq.n	80128f0 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 80128d2:	4b0a      	ldr	r3, [pc, #40]	; (80128fc <PlatformSpecificSetJmpImplementation+0x58>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	3301      	adds	r3, #1
 80128d8:	4a08      	ldr	r2, [pc, #32]	; (80128fc <PlatformSpecificSetJmpImplementation+0x58>)
 80128da:	6013      	str	r3, [r2, #0]
        function(data);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6838      	ldr	r0, [r7, #0]
 80128e0:	4798      	blx	r3
        jmp_buf_index--;
 80128e2:	4b06      	ldr	r3, [pc, #24]	; (80128fc <PlatformSpecificSetJmpImplementation+0x58>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	3b01      	subs	r3, #1
 80128e8:	4a04      	ldr	r2, [pc, #16]	; (80128fc <PlatformSpecificSetJmpImplementation+0x58>)
 80128ea:	6013      	str	r3, [r2, #0]
        return 1;
 80128ec:	2301      	movs	r3, #1
 80128ee:	e000      	b.n	80128f2 <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 80128f0:	2300      	movs	r3, #0
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	3708      	adds	r7, #8
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}
 80128fa:	bf00      	nop
 80128fc:	20000cf4 	.word	0x20000cf4
 8012900:	2000095c 	.word	0x2000095c

08012904 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 8012904:	b580      	push	{r7, lr}
 8012906:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8012908:	4b07      	ldr	r3, [pc, #28]	; (8012928 <PlatformSpecificLongJmpImplementation+0x24>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	3b01      	subs	r3, #1
 801290e:	4a06      	ldr	r2, [pc, #24]	; (8012928 <PlatformSpecificLongJmpImplementation+0x24>)
 8012910:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 8012912:	4b05      	ldr	r3, [pc, #20]	; (8012928 <PlatformSpecificLongJmpImplementation+0x24>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	225c      	movs	r2, #92	; 0x5c
 8012918:	fb02 f303 	mul.w	r3, r2, r3
 801291c:	4a03      	ldr	r2, [pc, #12]	; (801292c <PlatformSpecificLongJmpImplementation+0x28>)
 801291e:	4413      	add	r3, r2
 8012920:	2101      	movs	r1, #1
 8012922:	4618      	mov	r0, r3
 8012924:	f7ed fc82 	bl	800022c <longjmp>
 8012928:	20000cf4 	.word	0x20000cf4
 801292c:	2000095c 	.word	0x2000095c

08012930 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8012930:	b480      	push	{r7}
 8012932:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8012934:	2300      	movs	r3, #0
#endif
}
 8012936:	4618      	mov	r0, r3
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr

08012940 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b084      	sub	sp, #16
 8012944:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8012946:	2000      	movs	r0, #0
 8012948:	f00e ec1e 	blx	8021188 <__time_veneer>
 801294c:	4602      	mov	r2, r0
 801294e:	460b      	mov	r3, r1
 8012950:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8012954:	463b      	mov	r3, r7
 8012956:	4618      	mov	r0, r3
 8012958:	f00b fb76 	bl	801e048 <localtime>
 801295c:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	4a04      	ldr	r2, [pc, #16]	; (8012974 <TimeStringImplementation+0x34>)
 8012962:	2150      	movs	r1, #80	; 0x50
 8012964:	4804      	ldr	r0, [pc, #16]	; (8012978 <TimeStringImplementation+0x38>)
 8012966:	f00c fc57 	bl	801f218 <strftime>
    return dateTime;
 801296a:	4b03      	ldr	r3, [pc, #12]	; (8012978 <TimeStringImplementation+0x38>)
}
 801296c:	4618      	mov	r0, r3
 801296e:	3710      	adds	r7, #16
 8012970:	46bd      	mov	sp, r7
 8012972:	bd80      	pop	{r7, pc}
 8012974:	08022ac0 	.word	0x08022ac0
 8012978:	20000cf8 	.word	0x20000cf8

0801297c <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8012986:	6839      	ldr	r1, [r7, #0]
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f00b f993 	bl	801dcb4 <fopen>
 801298e:	4603      	mov	r3, r0
#endif
}
 8012990:	4618      	mov	r0, r3
 8012992:	3708      	adds	r7, #8
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}

08012998 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
 80129a0:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 80129a2:	6839      	ldr	r1, [r7, #0]
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	f00b f9f3 	bl	801dd90 <fputs>
}
 80129aa:	bf00      	nop
 80129ac:	3708      	adds	r7, #8
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}

080129b2 <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 80129b2:	b580      	push	{r7, lr}
 80129b4:	b082      	sub	sp, #8
 80129b6:	af00      	add	r7, sp, #0
 80129b8:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f00a ff74 	bl	801d8a8 <fclose>
}
 80129c0:	bf00      	nop
 80129c2:	3708      	adds	r7, #8
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}

080129c8 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	af00      	add	r7, sp, #0
  fflush(stdout);
 80129cc:	4b03      	ldr	r3, [pc, #12]	; (80129dc <PlatformSpecificFlushImplementation+0x14>)
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	689b      	ldr	r3, [r3, #8]
 80129d2:	4618      	mov	r0, r3
 80129d4:	f00b f832 	bl	801da3c <fflush>
}
 80129d8:	bf00      	nop
 80129da:	bd80      	pop	{r7, pc}
 80129dc:	20000104 	.word	0x20000104

080129e0 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 80129ea:	ed97 0b00 	vldr	d0, [r7]
 80129ee:	f7ff ff07 	bl	8012800 <_ZSt5isnand>
 80129f2:	4603      	mov	r3, r0
}
 80129f4:	4618      	mov	r0, r3
 80129f6:	3708      	adds	r7, #8
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}

080129fc <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b082      	sub	sp, #8
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 8012a06:	ed97 0b00 	vldr	d0, [r7]
 8012a0a:	f7ff fec9 	bl	80127a0 <_ZSt5isinfd>
 8012a0e:	4603      	mov	r3, r0
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	3708      	adds	r7, #8
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}

08012a18 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8012a18:	b480      	push	{r7}
 8012a1a:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8012a1c:	2300      	movs	r3, #0
#endif

}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	46bd      	mov	sp, r7
 8012a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a26:	4770      	bx	lr

08012a28 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8012a28:	b480      	push	{r7}
 8012a2a:	b083      	sub	sp, #12
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
}
 8012a30:	bf00      	nop
 8012a32:	370c      	adds	r7, #12
 8012a34:	46bd      	mov	sp, r7
 8012a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3a:	4770      	bx	lr

08012a3c <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8012a3c:	b480      	push	{r7}
 8012a3e:	b083      	sub	sp, #12
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
}
 8012a44:	bf00      	nop
 8012a46:	370c      	adds	r7, #12
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4e:	4770      	bx	lr

08012a50 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8012a50:	b480      	push	{r7}
 8012a52:	b083      	sub	sp, #12
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
}
 8012a58:	bf00      	nop
 8012a5a:	370c      	adds	r7, #12
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a62:	4770      	bx	lr

08012a64 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b084      	sub	sp, #16
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	60f8      	str	r0, [r7, #12]
 8012a6c:	60b9      	str	r1, [r7, #8]
 8012a6e:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8012a70:	4a25      	ldr	r2, [pc, #148]	; (8012b08 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	601a      	str	r2, [r3, #0]
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	68ba      	ldr	r2, [r7, #8]
 8012a7a:	605a      	str	r2, [r3, #4]
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	687a      	ldr	r2, [r7, #4]
 8012a80:	609a      	str	r2, [r3, #8]
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	2200      	movs	r2, #0
 8012a86:	731a      	strb	r2, [r3, #12]
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	735a      	strb	r2, [r3, #13]
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	2200      	movs	r2, #0
 8012a92:	739a      	strb	r2, [r3, #14]
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	2200      	movs	r2, #0
 8012a98:	73da      	strb	r2, [r3, #15]
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	741a      	strb	r2, [r3, #16]
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	745a      	strb	r2, [r3, #17]
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	749a      	strb	r2, [r3, #18]
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	2200      	movs	r2, #0
 8012ab0:	74da      	strb	r2, [r3, #19]
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	751a      	strb	r2, [r3, #20]
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	2200      	movs	r2, #0
 8012abc:	755a      	strb	r2, [r3, #21]
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	759a      	strb	r2, [r3, #22]
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	75da      	strb	r2, [r3, #23]
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	2200      	movs	r2, #0
 8012ace:	761a      	strb	r2, [r3, #24]
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	2201      	movs	r2, #1
 8012ad4:	61da      	str	r2, [r3, #28]
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	621a      	str	r2, [r3, #32]
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	625a      	str	r2, [r3, #36]	; 0x24
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	2200      	movs	r2, #0
 8012aec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	3330      	adds	r3, #48	; 0x30
 8012af4:	4905      	ldr	r1, [pc, #20]	; (8012b0c <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 8012af6:	4618      	mov	r0, r3
 8012af8:	f7f7 ff61 	bl	800a9be <_ZN12SimpleStringC1EPKc>
{
}
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	4618      	mov	r0, r3
 8012b00:	3710      	adds	r7, #16
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}
 8012b06:	bf00      	nop
 8012b08:	08025b70 	.word	0x08025b70
 8012b0c:	08022ad4 	.word	0x08022ad4

08012b10 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7f8 fb07 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	4618      	mov	r0, r3
 8012b24:	3708      	adds	r7, #8
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
	...

08012b2c <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8012b2c:	b590      	push	{r4, r7, lr}
 8012b2e:	b085      	sub	sp, #20
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	4a20      	ldr	r2, [pc, #128]	; (8012bb8 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d015      	beq.n	8012b6e <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b46:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f00a fda4 	bl	801d69a <_ZNK10TestFilter7getNextEv>
 8012b52:	4602      	mov	r2, r0
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8012b58:	68fc      	ldr	r4, [r7, #12]
 8012b5a:	2c00      	cmp	r4, #0
 8012b5c:	d0ed      	beq.n	8012b3a <_ZN20CommandLineArgumentsD1Ev+0xe>
 8012b5e:	4620      	mov	r0, r4
 8012b60:	f7ff ffd6 	bl	8012b10 <_ZN10TestFilterD1Ev>
 8012b64:	2110      	movs	r1, #16
 8012b66:	4620      	mov	r0, r4
 8012b68:	f7f5 fb7a 	bl	8008260 <_ZdlPvj>
    while(groupFilters_) {
 8012b6c:	e7e5      	b.n	8012b3a <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d015      	beq.n	8012ba2 <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b7a:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b80:	4618      	mov	r0, r3
 8012b82:	f00a fd8a 	bl	801d69a <_ZNK10TestFilter7getNextEv>
 8012b86:	4602      	mov	r2, r0
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8012b8c:	68bc      	ldr	r4, [r7, #8]
 8012b8e:	2c00      	cmp	r4, #0
 8012b90:	d0ed      	beq.n	8012b6e <_ZN20CommandLineArgumentsD1Ev+0x42>
 8012b92:	4620      	mov	r0, r4
 8012b94:	f7ff ffbc 	bl	8012b10 <_ZN10TestFilterD1Ev>
 8012b98:	2110      	movs	r1, #16
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	f7f5 fb60 	bl	8008260 <_ZdlPvj>
    while(nameFilters_) {
 8012ba0:	e7e5      	b.n	8012b6e <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	3330      	adds	r3, #48	; 0x30
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7f8 fac1 	bl	800b12e <_ZN12SimpleStringD1Ev>
    }
}
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	4618      	mov	r0, r3
 8012bb0:	3714      	adds	r7, #20
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd90      	pop	{r4, r7, pc}
 8012bb6:	bf00      	nop
 8012bb8:	08025b70 	.word	0x08025b70

08012bbc <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b082      	sub	sp, #8
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
}
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f7ff ffb1 	bl	8012b2c <_ZN20CommandLineArgumentsD1Ev>
 8012bca:	2138      	movs	r1, #56	; 0x38
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f7f5 fb47 	bl	8008260 <_ZdlPvj>
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	3708      	adds	r7, #8
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}

08012bdc <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 8012bdc:	b5b0      	push	{r4, r5, r7, lr}
 8012bde:	b0be      	sub	sp, #248	; 0xf8
 8012be0:	af02      	add	r7, sp, #8
 8012be2:	6078      	str	r0, [r7, #4]
 8012be4:	6039      	str	r1, [r7, #0]
 8012be6:	2400      	movs	r4, #0
    bool correctParameters = true;
 8012be8:	2301      	movs	r3, #1
 8012bea:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 8012bee:	2301      	movs	r3, #1
 8012bf0:	613b      	str	r3, [r7, #16]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	685a      	ldr	r2, [r3, #4]
 8012bf6:	693b      	ldr	r3, [r7, #16]
 8012bf8:	429a      	cmp	r2, r3
 8012bfa:	f340 83a4 	ble.w	8013346 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	689a      	ldr	r2, [r3, #8]
 8012c02:	693b      	ldr	r3, [r7, #16]
 8012c04:	009b      	lsls	r3, r3, #2
 8012c06:	4413      	add	r3, r2
 8012c08:	681a      	ldr	r2, [r3, #0]
 8012c0a:	f107 0308 	add.w	r3, r7, #8
 8012c0e:	4611      	mov	r1, r2
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7f7 fed4 	bl	800a9be <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8012c16:	f107 0314 	add.w	r3, r7, #20
 8012c1a:	49c8      	ldr	r1, [pc, #800]	; (8012f3c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7f7 fece 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012c22:	f107 0214 	add.w	r2, r7, #20
 8012c26:	f107 0308 	add.w	r3, r7, #8
 8012c2a:	4611      	mov	r1, r2
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7f8 fa8a 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8012c32:	4603      	mov	r3, r0
 8012c34:	461d      	mov	r5, r3
 8012c36:	f107 0314 	add.w	r3, r7, #20
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7f8 fa77 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012c40:	2d00      	cmp	r5, #0
 8012c42:	d006      	beq.n	8012c52 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2201      	movs	r2, #1
 8012c48:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012c50:	e366      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8012c52:	f107 031c 	add.w	r3, r7, #28
 8012c56:	49ba      	ldr	r1, [pc, #744]	; (8012f40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7f7 feb0 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012c5e:	f107 021c 	add.w	r2, r7, #28
 8012c62:	f107 0308 	add.w	r3, r7, #8
 8012c66:	4611      	mov	r1, r2
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f7f8 fa6c 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	461d      	mov	r5, r3
 8012c72:	f107 031c 	add.w	r3, r7, #28
 8012c76:	4618      	mov	r0, r3
 8012c78:	f7f8 fa59 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012c7c:	2d00      	cmp	r5, #0
 8012c7e:	d003      	beq.n	8012c88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2201      	movs	r2, #1
 8012c84:	735a      	strb	r2, [r3, #13]
 8012c86:	e34b      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8012c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012c8c:	49ad      	ldr	r1, [pc, #692]	; (8012f44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f7f7 fe95 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012c94:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012c98:	f107 0308 	add.w	r3, r7, #8
 8012c9c:	4611      	mov	r1, r2
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7f8 fa51 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	461d      	mov	r5, r3
 8012ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012cac:	4618      	mov	r0, r3
 8012cae:	f7f8 fa3e 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012cb2:	2d00      	cmp	r5, #0
 8012cb4:	d003      	beq.n	8012cbe <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2201      	movs	r2, #1
 8012cba:	739a      	strb	r2, [r3, #14]
 8012cbc:	e330      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 8012cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012cc2:	49a1      	ldr	r1, [pc, #644]	; (8012f48 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7f7 fe7a 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012cca:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012cce:	f107 0308 	add.w	r3, r7, #8
 8012cd2:	4611      	mov	r1, r2
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f7f8 fa36 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	461d      	mov	r5, r3
 8012cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f7f8 fa23 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012ce8:	2d00      	cmp	r5, #0
 8012cea:	d003      	beq.n	8012cf4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	2201      	movs	r2, #1
 8012cf0:	73da      	strb	r2, [r3, #15]
 8012cf2:	e315      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 8012cf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012cf8:	4994      	ldr	r1, [pc, #592]	; (8012f4c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7f7 fe5f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012d00:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012d04:	f107 0308 	add.w	r3, r7, #8
 8012d08:	4611      	mov	r1, r2
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7f8 fa1b 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8012d10:	4603      	mov	r3, r0
 8012d12:	461d      	mov	r5, r3
 8012d14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7f8 fa08 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012d1e:	2d00      	cmp	r5, #0
 8012d20:	d003      	beq.n	8012d2a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2201      	movs	r2, #1
 8012d26:	741a      	strb	r2, [r3, #16]
 8012d28:	e2fa      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8012d2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012d2e:	4988      	ldr	r1, [pc, #544]	; (8012f50 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 8012d30:	4618      	mov	r0, r3
 8012d32:	f7f7 fe44 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012d36:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8012d3a:	f107 0308 	add.w	r3, r7, #8
 8012d3e:	4611      	mov	r1, r2
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7f8 fa00 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8012d46:	4603      	mov	r3, r0
 8012d48:	461d      	mov	r5, r3
 8012d4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f7f8 f9ed 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012d54:	2d00      	cmp	r5, #0
 8012d56:	d003      	beq.n	8012d60 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	755a      	strb	r2, [r3, #21]
 8012d5e:	e2df      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8012d60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012d64:	497b      	ldr	r1, [pc, #492]	; (8012f54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7f7 fe29 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012d6c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012d70:	f107 0308 	add.w	r3, r7, #8
 8012d74:	4611      	mov	r1, r2
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7f8 f9e5 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	461d      	mov	r5, r3
 8012d80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7f8 f9d2 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012d8a:	2d00      	cmp	r5, #0
 8012d8c:	d003      	beq.n	8012d96 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	2201      	movs	r2, #1
 8012d92:	745a      	strb	r2, [r3, #17]
 8012d94:	e2c4      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8012d96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012d9a:	496f      	ldr	r1, [pc, #444]	; (8012f58 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7f7 fe0e 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012da2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012da6:	f107 0308 	add.w	r3, r7, #8
 8012daa:	4611      	mov	r1, r2
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7f8 f9ca 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8012db2:	4603      	mov	r3, r0
 8012db4:	461d      	mov	r5, r3
 8012db6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7f8 f9b7 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012dc0:	2d00      	cmp	r5, #0
 8012dc2:	d003      	beq.n	8012dcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	2201      	movs	r2, #1
 8012dc8:	749a      	strb	r2, [r3, #18]
 8012dca:	e2a9      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 8012dcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012dd0:	4962      	ldr	r1, [pc, #392]	; (8012f5c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7f7 fdf3 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012dd8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8012ddc:	f107 0308 	add.w	r3, r7, #8
 8012de0:	4611      	mov	r1, r2
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7f8 f9af 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8012de8:	4603      	mov	r3, r0
 8012dea:	461d      	mov	r5, r3
 8012dec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7f8 f99c 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012df6:	2d00      	cmp	r5, #0
 8012df8:	d003      	beq.n	8012e02 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2201      	movs	r2, #1
 8012dfe:	74da      	strb	r2, [r3, #19]
 8012e00:	e28e      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 8012e02:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012e06:	4956      	ldr	r1, [pc, #344]	; (8012f60 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f7f7 fdd8 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012e0e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8012e12:	f107 0308 	add.w	r3, r7, #8
 8012e16:	4611      	mov	r1, r2
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7f8 f994 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	461d      	mov	r5, r3
 8012e22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7f8 f981 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012e2c:	2d00      	cmp	r5, #0
 8012e2e:	d003      	beq.n	8012e38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	2201      	movs	r2, #1
 8012e34:	751a      	strb	r2, [r3, #20]
 8012e36:	e273      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8012e38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012e3c:	4949      	ldr	r1, [pc, #292]	; (8012f64 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7f7 fdbd 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012e44:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8012e48:	f107 0308 	add.w	r3, r7, #8
 8012e4c:	4611      	mov	r1, r2
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7f8 f979 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8012e54:	4603      	mov	r3, r0
 8012e56:	461d      	mov	r5, r3
 8012e58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f7f8 f966 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012e62:	2d00      	cmp	r5, #0
 8012e64:	d003      	beq.n	8012e6e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2201      	movs	r2, #1
 8012e6a:	759a      	strb	r2, [r3, #22]
 8012e6c:	e258      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 8012e6e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012e72:	493d      	ldr	r1, [pc, #244]	; (8012f68 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7f7 fda2 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012e7a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8012e7e:	f107 0308 	add.w	r3, r7, #8
 8012e82:	4611      	mov	r1, r2
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7f7 fe5e 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	461d      	mov	r5, r3
 8012e8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7f8 f94b 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012e98:	2d00      	cmp	r5, #0
 8012e9a:	d009      	beq.n	8012eb0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6859      	ldr	r1, [r3, #4]
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	689a      	ldr	r2, [r3, #8]
 8012ea4:	f107 0310 	add.w	r3, r7, #16
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f000 fb33 	bl	8013514 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 8012eae:	e237      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8012eb0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8012eb4:	492d      	ldr	r1, [pc, #180]	; (8012f6c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7f7 fd81 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012ebc:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8012ec0:	f107 0308 	add.w	r3, r7, #8
 8012ec4:	4611      	mov	r1, r2
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f7f7 fe3d 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	461d      	mov	r5, r3
 8012ed0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f7f8 f92a 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012eda:	2d00      	cmp	r5, #0
 8012edc:	d009      	beq.n	8012ef2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	6859      	ldr	r1, [r3, #4]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	689a      	ldr	r2, [r3, #8]
 8012ee6:	f107 0310 	add.w	r3, r7, #16
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f000 fc40 	bl	8013770 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 8012ef0:	e216      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 8012ef2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012ef6:	491e      	ldr	r1, [pc, #120]	; (8012f70 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f7f7 fd60 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012efe:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8012f02:	f107 0308 	add.w	r3, r7, #8
 8012f06:	4611      	mov	r1, r2
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7f7 fe1c 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	461d      	mov	r5, r3
 8012f12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012f16:	4618      	mov	r0, r3
 8012f18:	f7f8 f909 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012f1c:	2d00      	cmp	r5, #0
 8012f1e:	d029      	beq.n	8012f74 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6859      	ldr	r1, [r3, #4]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	689a      	ldr	r2, [r3, #8]
 8012f28:	f107 0310 	add.w	r3, r7, #16
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	f000 fc61 	bl	80137f4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 8012f32:	4603      	mov	r3, r0
 8012f34:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012f38:	e1f2      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8012f3a:	bf00      	nop
 8012f3c:	08022ad8 	.word	0x08022ad8
 8012f40:	08022adc 	.word	0x08022adc
 8012f44:	08022ae0 	.word	0x08022ae0
 8012f48:	08022ae4 	.word	0x08022ae4
 8012f4c:	08022ae8 	.word	0x08022ae8
 8012f50:	08022aec 	.word	0x08022aec
 8012f54:	08022af0 	.word	0x08022af0
 8012f58:	08022af4 	.word	0x08022af4
 8012f5c:	08022af8 	.word	0x08022af8
 8012f60:	08022afc 	.word	0x08022afc
 8012f64:	08022b00 	.word	0x08022b00
 8012f68:	08022b04 	.word	0x08022b04
 8012f6c:	08022b08 	.word	0x08022b08
 8012f70:	08022b0c 	.word	0x08022b0c
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8012f74:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012f78:	49b9      	ldr	r1, [pc, #740]	; (8013260 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f7f7 fd1f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012f80:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8012f84:	f107 0308 	add.w	r3, r7, #8
 8012f88:	4611      	mov	r1, r2
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7f7 fddb 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 8012f90:	4603      	mov	r3, r0
 8012f92:	461d      	mov	r5, r3
 8012f94:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f7f8 f8c8 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012f9e:	2d00      	cmp	r5, #0
 8012fa0:	d009      	beq.n	8012fb6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6859      	ldr	r1, [r3, #4]
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	689a      	ldr	r2, [r3, #8]
 8012faa:	f107 0310 	add.w	r3, r7, #16
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f000 fccc 	bl	801394c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8012fb4:	e1b4      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8012fb6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012fba:	49aa      	ldr	r1, [pc, #680]	; (8013264 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7f7 fcfe 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8012fc2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8012fc6:	f107 0308 	add.w	r3, r7, #8
 8012fca:	4611      	mov	r1, r2
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7f7 fdba 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	461d      	mov	r5, r3
 8012fd6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7f8 f8a7 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8012fe0:	2d00      	cmp	r5, #0
 8012fe2:	d009      	beq.n	8012ff8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	6859      	ldr	r1, [r3, #4]
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	689a      	ldr	r2, [r3, #8]
 8012fec:	f107 0310 	add.w	r3, r7, #16
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f000 fcf1 	bl	80139d8 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 8012ff6:	e193      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8012ff8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8012ffc:	499a      	ldr	r1, [pc, #616]	; (8013268 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 8012ffe:	4618      	mov	r0, r3
 8013000:	f7f7 fcdd 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013004:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8013008:	f107 0308 	add.w	r3, r7, #8
 801300c:	4611      	mov	r1, r2
 801300e:	4618      	mov	r0, r3
 8013010:	f7f7 fd99 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 8013014:	4603      	mov	r3, r0
 8013016:	461d      	mov	r5, r3
 8013018:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801301c:	4618      	mov	r0, r3
 801301e:	f7f8 f886 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8013022:	2d00      	cmp	r5, #0
 8013024:	d009      	beq.n	801303a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6859      	ldr	r1, [r3, #4]
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	689a      	ldr	r2, [r3, #8]
 801302e:	f107 0310 	add.w	r3, r7, #16
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f000 fd16 	bl	8013a64 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8013038:	e172      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 801303a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801303e:	498b      	ldr	r1, [pc, #556]	; (801326c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8013040:	4618      	mov	r0, r3
 8013042:	f7f7 fcbc 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013046:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801304a:	f107 0308 	add.w	r3, r7, #8
 801304e:	4611      	mov	r1, r2
 8013050:	4618      	mov	r0, r3
 8013052:	f7f7 fd78 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 8013056:	4603      	mov	r3, r0
 8013058:	461d      	mov	r5, r3
 801305a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801305e:	4618      	mov	r0, r3
 8013060:	f7f8 f865 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8013064:	2d00      	cmp	r5, #0
 8013066:	d009      	beq.n	801307c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6859      	ldr	r1, [r3, #4]
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	689a      	ldr	r2, [r3, #8]
 8013070:	f107 0310 	add.w	r3, r7, #16
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f000 fd3d 	bl	8013af4 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 801307a:	e151      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 801307c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013080:	497b      	ldr	r1, [pc, #492]	; (8013270 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8013082:	4618      	mov	r0, r3
 8013084:	f7f7 fc9b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013088:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 801308c:	f107 0308 	add.w	r3, r7, #8
 8013090:	4611      	mov	r1, r2
 8013092:	4618      	mov	r0, r3
 8013094:	f7f7 fd57 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 8013098:	4603      	mov	r3, r0
 801309a:	461d      	mov	r5, r3
 801309c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80130a0:	4618      	mov	r0, r3
 80130a2:	f7f8 f844 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80130a6:	2d00      	cmp	r5, #0
 80130a8:	d009      	beq.n	80130be <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	6859      	ldr	r1, [r3, #4]
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	689a      	ldr	r2, [r3, #8]
 80130b2:	f107 0310 	add.w	r3, r7, #16
 80130b6:	6878      	ldr	r0, [r7, #4]
 80130b8:	f000 fd5e 	bl	8013b78 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 80130bc:	e130      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 80130be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80130c2:	496c      	ldr	r1, [pc, #432]	; (8013274 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7f7 fc7a 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80130ca:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80130ce:	f107 0308 	add.w	r3, r7, #8
 80130d2:	4611      	mov	r1, r2
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7f7 fd36 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 80130da:	4603      	mov	r3, r0
 80130dc:	461d      	mov	r5, r3
 80130de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7f8 f823 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80130e8:	2d00      	cmp	r5, #0
 80130ea:	d009      	beq.n	8013100 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	6859      	ldr	r1, [r3, #4]
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	689a      	ldr	r2, [r3, #8]
 80130f4:	f107 0310 	add.w	r3, r7, #16
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f000 fd83 	bl	8013c04 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 80130fe:	e10f      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8013100:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013104:	495c      	ldr	r1, [pc, #368]	; (8013278 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8013106:	4618      	mov	r0, r3
 8013108:	f7f7 fc59 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801310c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8013110:	f107 0308 	add.w	r3, r7, #8
 8013114:	4611      	mov	r1, r2
 8013116:	4618      	mov	r0, r3
 8013118:	f7f7 fd15 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 801311c:	4603      	mov	r3, r0
 801311e:	461d      	mov	r5, r3
 8013120:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013124:	4618      	mov	r0, r3
 8013126:	f7f8 f802 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801312a:	2d00      	cmp	r5, #0
 801312c:	d009      	beq.n	8013142 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	6859      	ldr	r1, [r3, #4]
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	689a      	ldr	r2, [r3, #8]
 8013136:	f107 0310 	add.w	r3, r7, #16
 801313a:	6878      	ldr	r0, [r7, #4]
 801313c:	f000 fda8 	bl	8013c90 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8013140:	e0ee      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8013142:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013146:	494d      	ldr	r1, [pc, #308]	; (801327c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8013148:	4618      	mov	r0, r3
 801314a:	f7f7 fc38 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801314e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8013152:	f107 0308 	add.w	r3, r7, #8
 8013156:	4611      	mov	r1, r2
 8013158:	4618      	mov	r0, r3
 801315a:	f7f7 fcf4 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 801315e:	4603      	mov	r3, r0
 8013160:	461d      	mov	r5, r3
 8013162:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013166:	4618      	mov	r0, r3
 8013168:	f7f7 ffe1 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801316c:	2d00      	cmp	r5, #0
 801316e:	d00c      	beq.n	801318a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	6859      	ldr	r1, [r3, #4]
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	689a      	ldr	r2, [r3, #8]
 8013178:	f107 0310 	add.w	r3, r7, #16
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f000 fa29 	bl	80135d4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8013182:	4603      	mov	r3, r0
 8013184:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013188:	e0ca      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 801318a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801318e:	493c      	ldr	r1, [pc, #240]	; (8013280 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8013190:	4618      	mov	r0, r3
 8013192:	f7f7 fc14 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013196:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801319a:	f107 0308 	add.w	r3, r7, #8
 801319e:	4611      	mov	r1, r2
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7f7 fcd0 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 80131a6:	4603      	mov	r3, r0
 80131a8:	461d      	mov	r5, r3
 80131aa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7f7 ffbd 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80131b4:	2d00      	cmp	r5, #0
 80131b6:	d00b      	beq.n	80131d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	6859      	ldr	r1, [r3, #4]
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	689a      	ldr	r2, [r3, #8]
 80131c0:	f107 0310 	add.w	r3, r7, #16
 80131c4:	482e      	ldr	r0, [pc, #184]	; (8013280 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 80131c6:	9000      	str	r0, [sp, #0]
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f000 fda9 	bl	8013d20 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 80131ce:	e0a7      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 80131d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80131d4:	492b      	ldr	r1, [pc, #172]	; (8013284 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7f7 fbf1 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80131dc:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80131e0:	f107 0308 	add.w	r3, r7, #8
 80131e4:	4611      	mov	r1, r2
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7f7 fcad 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 80131ec:	4603      	mov	r3, r0
 80131ee:	461d      	mov	r5, r3
 80131f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7f7 ff9a 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80131fa:	2d00      	cmp	r5, #0
 80131fc:	d00b      	beq.n	8013216 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	6859      	ldr	r1, [r3, #4]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	689a      	ldr	r2, [r3, #8]
 8013206:	f107 0310 	add.w	r3, r7, #16
 801320a:	481e      	ldr	r0, [pc, #120]	; (8013284 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 801320c:	9000      	str	r0, [sp, #0]
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f000 fd86 	bl	8013d20 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8013214:	e084      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8013216:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801321a:	491b      	ldr	r1, [pc, #108]	; (8013288 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 801321c:	4618      	mov	r0, r3
 801321e:	f7f7 fbce 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013222:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8013226:	f107 0308 	add.w	r3, r7, #8
 801322a:	4611      	mov	r1, r2
 801322c:	4618      	mov	r0, r3
 801322e:	f7f7 fc8a 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 8013232:	4603      	mov	r3, r0
 8013234:	461d      	mov	r5, r3
 8013236:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801323a:	4618      	mov	r0, r3
 801323c:	f7f7 ff77 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8013240:	2d00      	cmp	r5, #0
 8013242:	d023      	beq.n	801328c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6859      	ldr	r1, [r3, #4]
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	689a      	ldr	r2, [r3, #8]
 801324c:	f107 0310 	add.w	r3, r7, #16
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	f000 fe3b 	bl	8013ecc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8013256:	4603      	mov	r3, r0
 8013258:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801325c:	e060      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 801325e:	bf00      	nop
 8013260:	08022b10 	.word	0x08022b10
 8013264:	08022b14 	.word	0x08022b14
 8013268:	08022b18 	.word	0x08022b18
 801326c:	08022b20 	.word	0x08022b20
 8013270:	08022b24 	.word	0x08022b24
 8013274:	08022b28 	.word	0x08022b28
 8013278:	08022b2c 	.word	0x08022b2c
 801327c:	08022b34 	.word	0x08022b34
 8013280:	08022b38 	.word	0x08022b38
 8013284:	08022b40 	.word	0x08022b40
 8013288:	08022b50 	.word	0x08022b50
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 801328c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8013290:	4930      	ldr	r1, [pc, #192]	; (8013354 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8013292:	4618      	mov	r0, r3
 8013294:	f7f7 fb93 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013298:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801329c:	f107 0308 	add.w	r3, r7, #8
 80132a0:	4611      	mov	r1, r2
 80132a2:	4618      	mov	r0, r3
 80132a4:	f7f7 fc4f 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 80132a8:	4603      	mov	r3, r0
 80132aa:	461d      	mov	r5, r3
 80132ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7f7 ff3c 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80132b6:	2d00      	cmp	r5, #0
 80132b8:	d00e      	beq.n	80132d8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	331c      	adds	r3, #28
 80132c0:	681d      	ldr	r5, [r3, #0]
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	6859      	ldr	r1, [r3, #4]
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	689a      	ldr	r2, [r3, #8]
 80132ca:	693b      	ldr	r3, [r7, #16]
 80132cc:	6838      	ldr	r0, [r7, #0]
 80132ce:	47a8      	blx	r5
 80132d0:	4603      	mov	r3, r0
 80132d2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80132d6:	e023      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 80132d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80132dc:	491e      	ldr	r1, [pc, #120]	; (8013358 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 80132de:	4618      	mov	r0, r3
 80132e0:	f7f7 fb6d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80132e4:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80132e8:	f107 0308 	add.w	r3, r7, #8
 80132ec:	4611      	mov	r1, r2
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7f7 fc29 	bl	800ab46 <_ZNK12SimpleString10startsWithERKS_>
 80132f4:	4603      	mov	r3, r0
 80132f6:	461d      	mov	r5, r3
 80132f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80132fc:	4618      	mov	r0, r3
 80132fe:	f7f7 ff16 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8013302:	2d00      	cmp	r5, #0
 8013304:	d009      	beq.n	801331a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	6859      	ldr	r1, [r3, #4]
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	689a      	ldr	r2, [r3, #8]
 801330e:	f107 0310 	add.w	r3, r7, #16
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f000 fd98 	bl	8013e48 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8013318:	e002      	b.n	8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 801331a:	2300      	movs	r3, #0
 801331c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8013320:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8013324:	2b00      	cmp	r3, #0
 8013326:	d102      	bne.n	801332e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8013328:	2400      	movs	r4, #0
 801332a:	2500      	movs	r5, #0
 801332c:	e000      	b.n	8013330 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 801332e:	2501      	movs	r5, #1
 8013330:	f107 0308 	add.w	r3, r7, #8
 8013334:	4618      	mov	r0, r3
 8013336:	f7f7 fefa 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801333a:	2d01      	cmp	r5, #1
 801333c:	d104      	bne.n	8013348 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 801333e:	693b      	ldr	r3, [r7, #16]
 8013340:	3301      	adds	r3, #1
 8013342:	613b      	str	r3, [r7, #16]
 8013344:	e455      	b.n	8012bf2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8013346:	2401      	movs	r4, #1
 8013348:	4623      	mov	r3, r4
}
 801334a:	4618      	mov	r0, r3
 801334c:	37f0      	adds	r7, #240	; 0xf0
 801334e:	46bd      	mov	sp, r7
 8013350:	bdb0      	pop	{r4, r5, r7, pc}
 8013352:	bf00      	nop
 8013354:	08022ae8 	.word	0x08022ae8
 8013358:	08022b54 	.word	0x08022b54

0801335c <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 801335c:	b480      	push	{r7}
 801335e:	b083      	sub	sp, #12
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8013364:	4b03      	ldr	r3, [pc, #12]	; (8013374 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8013366:	4618      	mov	r0, r3
 8013368:	370c      	adds	r7, #12
 801336a:	46bd      	mov	sp, r7
 801336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013370:	4770      	bx	lr
 8013372:	bf00      	nop
 8013374:	08022b58 	.word	0x08022b58

08013378 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8013378:	b480      	push	{r7}
 801337a:	b083      	sub	sp, #12
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8013380:	4b03      	ldr	r3, [pc, #12]	; (8013390 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8013382:	4618      	mov	r0, r3
 8013384:	370c      	adds	r7, #12
 8013386:	46bd      	mov	sp, r7
 8013388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338c:	4770      	bx	lr
 801338e:	bf00      	nop
 8013390:	08022c88 	.word	0x08022c88

08013394 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8013394:	b480      	push	{r7}
 8013396:	b083      	sub	sp, #12
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
    return needHelp_;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	7b1b      	ldrb	r3, [r3, #12]
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	370c      	adds	r7, #12
 80133a4:	46bd      	mov	sp, r7
 80133a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133aa:	4770      	bx	lr

080133ac <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 80133ac:	b480      	push	{r7}
 80133ae:	b083      	sub	sp, #12
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
    return verbose_;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	7b5b      	ldrb	r3, [r3, #13]
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	370c      	adds	r7, #12
 80133bc:	46bd      	mov	sp, r7
 80133be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c2:	4770      	bx	lr

080133c4 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 80133c4:	b480      	push	{r7}
 80133c6:	b083      	sub	sp, #12
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	7b9b      	ldrb	r3, [r3, #14]
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	370c      	adds	r7, #12
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr

080133dc <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 80133dc:	b480      	push	{r7}
 80133de:	b083      	sub	sp, #12
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
    return color_;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	7bdb      	ldrb	r3, [r3, #15]
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	370c      	adds	r7, #12
 80133ec:	46bd      	mov	sp, r7
 80133ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f2:	4770      	bx	lr

080133f4 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 80133f4:	b480      	push	{r7}
 80133f6:	b083      	sub	sp, #12
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	7c5b      	ldrb	r3, [r3, #17]
}
 8013400:	4618      	mov	r0, r3
 8013402:	370c      	adds	r7, #12
 8013404:	46bd      	mov	sp, r7
 8013406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340a:	4770      	bx	lr

0801340c <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 801340c:	b480      	push	{r7}
 801340e:	b083      	sub	sp, #12
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	7c9b      	ldrb	r3, [r3, #18]
}
 8013418:	4618      	mov	r0, r3
 801341a:	370c      	adds	r7, #12
 801341c:	46bd      	mov	sp, r7
 801341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013422:	4770      	bx	lr

08013424 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8013424:	b480      	push	{r7}
 8013426:	b083      	sub	sp, #12
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	7cdb      	ldrb	r3, [r3, #19]
}
 8013430:	4618      	mov	r0, r3
 8013432:	370c      	adds	r7, #12
 8013434:	46bd      	mov	sp, r7
 8013436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343a:	4770      	bx	lr

0801343c <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 801343c:	b480      	push	{r7}
 801343e:	b083      	sub	sp, #12
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	7d1b      	ldrb	r3, [r3, #20]
}
 8013448:	4618      	mov	r0, r3
 801344a:	370c      	adds	r7, #12
 801344c:	46bd      	mov	sp, r7
 801344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013452:	4770      	bx	lr

08013454 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8013454:	b480      	push	{r7}
 8013456:	b083      	sub	sp, #12
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	7c1b      	ldrb	r3, [r3, #16]
}
 8013460:	4618      	mov	r0, r3
 8013462:	370c      	adds	r7, #12
 8013464:	46bd      	mov	sp, r7
 8013466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346a:	4770      	bx	lr

0801346c <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 801346c:	b480      	push	{r7}
 801346e:	b083      	sub	sp, #12
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
    return repeat_;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	69db      	ldr	r3, [r3, #28]
}
 8013478:	4618      	mov	r0, r3
 801347a:	370c      	adds	r7, #12
 801347c:	46bd      	mov	sp, r7
 801347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013482:	4770      	bx	lr

08013484 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8013484:	b480      	push	{r7}
 8013486:	b083      	sub	sp, #12
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
    return reversing_;
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	7d5b      	ldrb	r3, [r3, #21]
}
 8013490:	4618      	mov	r0, r3
 8013492:	370c      	adds	r7, #12
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr

0801349c <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 801349c:	b480      	push	{r7}
 801349e:	b083      	sub	sp, #12
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	7d9b      	ldrb	r3, [r3, #22]
}
 80134a8:	4618      	mov	r0, r3
 80134aa:	370c      	adds	r7, #12
 80134ac:	46bd      	mov	sp, r7
 80134ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b2:	4770      	bx	lr

080134b4 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 80134b4:	b480      	push	{r7}
 80134b6:	b083      	sub	sp, #12
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
    return shuffling_;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	7ddb      	ldrb	r3, [r3, #23]
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	370c      	adds	r7, #12
 80134c4:	46bd      	mov	sp, r7
 80134c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ca:	4770      	bx	lr

080134cc <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 80134cc:	b480      	push	{r7}
 80134ce:	b083      	sub	sp, #12
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6a1b      	ldr	r3, [r3, #32]
}
 80134d8:	4618      	mov	r0, r3
 80134da:	370c      	adds	r7, #12
 80134dc:	46bd      	mov	sp, r7
 80134de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e2:	4770      	bx	lr

080134e4 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 80134e4:	b480      	push	{r7}
 80134e6:	b083      	sub	sp, #12
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80134f0:	4618      	mov	r0, r3
 80134f2:	370c      	adds	r7, #12
 80134f4:	46bd      	mov	sp, r7
 80134f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fa:	4770      	bx	lr

080134fc <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 80134fc:	b480      	push	{r7}
 80134fe:	b083      	sub	sp, #12
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8013508:	4618      	mov	r0, r3
 801350a:	370c      	adds	r7, #12
 801350c:	46bd      	mov	sp, r7
 801350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013512:	4770      	bx	lr

08013514 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b086      	sub	sp, #24
 8013518:	af00      	add	r7, sp, #0
 801351a:	60f8      	str	r0, [r7, #12]
 801351c:	60b9      	str	r1, [r7, #8]
 801351e:	607a      	str	r2, [r7, #4]
 8013520:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	2200      	movs	r2, #0
 8013526:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	009b      	lsls	r3, r3, #2
 801352e:	687a      	ldr	r2, [r7, #4]
 8013530:	4413      	add	r3, r2
 8013532:	681a      	ldr	r2, [r3, #0]
 8013534:	f107 0310 	add.w	r3, r7, #16
 8013538:	4611      	mov	r1, r2
 801353a:	4618      	mov	r0, r3
 801353c:	f7f7 fa3f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8013540:	f107 0310 	add.w	r3, r7, #16
 8013544:	4618      	mov	r0, r3
 8013546:	f7f7 fdd1 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 801354a:	4603      	mov	r3, r0
 801354c:	2b02      	cmp	r3, #2
 801354e:	bf8c      	ite	hi
 8013550:	2301      	movhi	r3, #1
 8013552:	2300      	movls	r3, #0
 8013554:	b2db      	uxtb	r3, r3
 8013556:	2b00      	cmp	r3, #0
 8013558:	d00e      	beq.n	8013578 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	009b      	lsls	r3, r3, #2
 8013560:	687a      	ldr	r2, [r7, #4]
 8013562:	4413      	add	r3, r2
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	3302      	adds	r3, #2
 8013568:	4618      	mov	r0, r3
 801356a:	f7f7 f824 	bl	800a5b6 <_ZN12SimpleString4AtoIEPKc>
 801356e:	4603      	mov	r3, r0
 8013570:	461a      	mov	r2, r3
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	61da      	str	r2, [r3, #28]
 8013576:	e01c      	b.n	80135b2 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	3301      	adds	r3, #1
 801357e:	68ba      	ldr	r2, [r7, #8]
 8013580:	429a      	cmp	r2, r3
 8013582:	dd16      	ble.n	80135b2 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8013584:	683b      	ldr	r3, [r7, #0]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	3301      	adds	r3, #1
 801358a:	009b      	lsls	r3, r3, #2
 801358c:	687a      	ldr	r2, [r7, #4]
 801358e:	4413      	add	r3, r2
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	4618      	mov	r0, r3
 8013594:	f7f7 f80f 	bl	800a5b6 <_ZN12SimpleString4AtoIEPKc>
 8013598:	4603      	mov	r3, r0
 801359a:	461a      	mov	r2, r3
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	69db      	ldr	r3, [r3, #28]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d004      	beq.n	80135b2 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	1c5a      	adds	r2, r3, #1
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	69db      	ldr	r3, [r3, #28]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d102      	bne.n	80135c0 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	2202      	movs	r2, #2
 80135be:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 80135c0:	f107 0310 	add.w	r3, r7, #16
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7f7 fdb2 	bl	800b12e <_ZN12SimpleStringD1Ev>

}
 80135ca:	bf00      	nop
 80135cc:	3718      	adds	r7, #24
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}
	...

080135d4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 80135d4:	b590      	push	{r4, r7, lr}
 80135d6:	b089      	sub	sp, #36	; 0x24
 80135d8:	af00      	add	r7, sp, #0
 80135da:	60f8      	str	r0, [r7, #12]
 80135dc:	60b9      	str	r1, [r7, #8]
 80135de:	607a      	str	r2, [r7, #4]
 80135e0:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	2201      	movs	r2, #1
 80135e6:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 80135e8:	4b34      	ldr	r3, [pc, #208]	; (80136bc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	4798      	blx	r3
 80135ee:	4603      	mov	r3, r0
 80135f0:	461a      	mov	r2, r3
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	6a1b      	ldr	r3, [r3, #32]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d104      	bne.n	8013608 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	6a1b      	ldr	r3, [r3, #32]
 8013602:	1c5a      	adds	r2, r3, #1
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	009b      	lsls	r3, r3, #2
 801360e:	687a      	ldr	r2, [r7, #4]
 8013610:	4413      	add	r3, r2
 8013612:	681a      	ldr	r2, [r3, #0]
 8013614:	f107 0314 	add.w	r3, r7, #20
 8013618:	4611      	mov	r1, r2
 801361a:	4618      	mov	r0, r3
 801361c:	f7f7 f9cf 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8013620:	f107 0314 	add.w	r3, r7, #20
 8013624:	4618      	mov	r0, r3
 8013626:	f7f7 fd61 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 801362a:	4603      	mov	r3, r0
 801362c:	2b02      	cmp	r3, #2
 801362e:	bf8c      	ite	hi
 8013630:	2301      	movhi	r3, #1
 8013632:	2300      	movls	r3, #0
 8013634:	b2db      	uxtb	r3, r3
 8013636:	2b00      	cmp	r3, #0
 8013638:	d010      	beq.n	801365c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	2201      	movs	r2, #1
 801363e:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	009b      	lsls	r3, r3, #2
 8013646:	687a      	ldr	r2, [r7, #4]
 8013648:	4413      	add	r3, r2
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	3302      	adds	r3, #2
 801364e:	4618      	mov	r0, r3
 8013650:	f7f6 ff78 	bl	800a544 <_ZN12SimpleString4AtoUEPKc>
 8013654:	4602      	mov	r2, r0
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	621a      	str	r2, [r3, #32]
 801365a:	e01e      	b.n	801369a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	3301      	adds	r3, #1
 8013662:	68ba      	ldr	r2, [r7, #8]
 8013664:	429a      	cmp	r2, r3
 8013666:	dd18      	ble.n	801369a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	3301      	adds	r3, #1
 801366e:	009b      	lsls	r3, r3, #2
 8013670:	687a      	ldr	r2, [r7, #4]
 8013672:	4413      	add	r3, r2
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	4618      	mov	r0, r3
 8013678:	f7f6 ff64 	bl	800a544 <_ZN12SimpleString4AtoUEPKc>
 801367c:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 801367e:	69fb      	ldr	r3, [r7, #28]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d00a      	beq.n	801369a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	2201      	movs	r2, #1
 8013688:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	69fa      	ldr	r2, [r7, #28]
 801368e:	621a      	str	r2, [r3, #32]
            i++;
 8013690:	683b      	ldr	r3, [r7, #0]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	1c5a      	adds	r2, r3, #1
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	6a1b      	ldr	r3, [r3, #32]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	bf14      	ite	ne
 80136a2:	2301      	movne	r3, #1
 80136a4:	2300      	moveq	r3, #0
 80136a6:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 80136a8:	f107 0314 	add.w	r3, r7, #20
 80136ac:	4618      	mov	r0, r3
 80136ae:	f7f7 fd3e 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 80136b2:	4623      	mov	r3, r4
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3724      	adds	r7, #36	; 0x24
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd90      	pop	{r4, r7, pc}
 80136bc:	200000a4 	.word	0x200000a4

080136c0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b088      	sub	sp, #32
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	60f8      	str	r0, [r7, #12]
 80136c8:	60b9      	str	r1, [r7, #8]
 80136ca:	607a      	str	r2, [r7, #4]
 80136cc:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 80136ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80136d0:	f7f7 fd0c 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 80136d4:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 80136d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	009b      	lsls	r3, r3, #2
 80136dc:	683a      	ldr	r2, [r7, #0]
 80136de:	4413      	add	r3, r2
 80136e0:	681a      	ldr	r2, [r3, #0]
 80136e2:	f107 0314 	add.w	r3, r7, #20
 80136e6:	4611      	mov	r1, r2
 80136e8:	4618      	mov	r0, r3
 80136ea:	f7f7 f968 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 80136ee:	f107 0314 	add.w	r3, r7, #20
 80136f2:	4618      	mov	r0, r3
 80136f4:	f7f7 fcfa 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 80136f8:	4602      	mov	r2, r0
 80136fa:	69fb      	ldr	r3, [r7, #28]
 80136fc:	4293      	cmp	r3, r2
 80136fe:	bf34      	ite	cc
 8013700:	2301      	movcc	r3, #1
 8013702:	2300      	movcs	r3, #0
 8013704:	b2db      	uxtb	r3, r3
 8013706:	2b00      	cmp	r3, #0
 8013708:	d00c      	beq.n	8013724 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 801370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	009b      	lsls	r3, r3, #2
 8013710:	683a      	ldr	r2, [r7, #0]
 8013712:	4413      	add	r3, r2
 8013714:	681a      	ldr	r2, [r3, #0]
 8013716:	69fb      	ldr	r3, [r7, #28]
 8013718:	4413      	add	r3, r2
 801371a:	4619      	mov	r1, r3
 801371c:	68f8      	ldr	r0, [r7, #12]
 801371e:	f7f7 f94e 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013722:	e019      	b.n	8013758 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8013724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	3301      	adds	r3, #1
 801372a:	687a      	ldr	r2, [r7, #4]
 801372c:	429a      	cmp	r2, r3
 801372e:	dd0f      	ble.n	8013750 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8013730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	1c5a      	adds	r2, r3, #1
 8013736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013738:	601a      	str	r2, [r3, #0]
 801373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	009b      	lsls	r3, r3, #2
 8013740:	683a      	ldr	r2, [r7, #0]
 8013742:	4413      	add	r3, r2
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	4619      	mov	r1, r3
 8013748:	68f8      	ldr	r0, [r7, #12]
 801374a:	f7f7 f938 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801374e:	e003      	b.n	8013758 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8013750:	4906      	ldr	r1, [pc, #24]	; (801376c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8013752:	68f8      	ldr	r0, [r7, #12]
 8013754:	f7f7 f933 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8013758:	f107 0314 	add.w	r3, r7, #20
 801375c:	4618      	mov	r0, r3
 801375e:	f7f7 fce6 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8013762:	68f8      	ldr	r0, [r7, #12]
 8013764:	3720      	adds	r7, #32
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}
 801376a:	bf00      	nop
 801376c:	08022ad4 	.word	0x08022ad4

08013770 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8013770:	b5b0      	push	{r4, r5, r7, lr}
 8013772:	b08c      	sub	sp, #48	; 0x30
 8013774:	af02      	add	r7, sp, #8
 8013776:	60f8      	str	r0, [r7, #12]
 8013778:	60b9      	str	r1, [r7, #8]
 801377a:	607a      	str	r2, [r7, #4]
 801377c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 801377e:	f107 031c 	add.w	r3, r7, #28
 8013782:	491a      	ldr	r1, [pc, #104]	; (80137ec <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8013784:	4618      	mov	r0, r3
 8013786:	f7f7 f91a 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801378a:	f107 0014 	add.w	r0, r7, #20
 801378e:	f107 031c 	add.w	r3, r7, #28
 8013792:	9301      	str	r3, [sp, #4]
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	9300      	str	r3, [sp, #0]
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	68ba      	ldr	r2, [r7, #8]
 801379c:	68f9      	ldr	r1, [r7, #12]
 801379e:	f7ff ff8f 	bl	80136c0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80137a2:	f107 0514 	add.w	r5, r7, #20
 80137a6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80137aa:	4911      	ldr	r1, [pc, #68]	; (80137f0 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 80137ac:	2010      	movs	r0, #16
 80137ae:	f7f4 fd43 	bl	8008238 <_ZnwjPKci>
 80137b2:	4604      	mov	r4, r0
 80137b4:	4629      	mov	r1, r5
 80137b6:	4620      	mov	r0, r4
 80137b8:	f009 ff40 	bl	801d63c <_ZN10TestFilterC1ERK12SimpleString>
 80137bc:	627c      	str	r4, [r7, #36]	; 0x24
 80137be:	f107 0314 	add.w	r3, r7, #20
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7f7 fcb3 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80137c8:	f107 031c 	add.w	r3, r7, #28
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7f7 fcae 	bl	800b12e <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137d6:	4619      	mov	r1, r3
 80137d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137da:	f009 ff4f 	bl	801d67c <_ZN10TestFilter3addEPS_>
 80137de:	4602      	mov	r2, r0
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80137e4:	bf00      	nop
 80137e6:	3728      	adds	r7, #40	; 0x28
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bdb0      	pop	{r4, r5, r7, pc}
 80137ec:	08022b08 	.word	0x08022b08
 80137f0:	0802349c 	.word	0x0802349c

080137f4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 80137f4:	b5b0      	push	{r4, r5, r7, lr}
 80137f6:	b092      	sub	sp, #72	; 0x48
 80137f8:	af02      	add	r7, sp, #8
 80137fa:	60f8      	str	r0, [r7, #12]
 80137fc:	60b9      	str	r1, [r7, #8]
 80137fe:	607a      	str	r2, [r7, #4]
 8013800:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8013802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013806:	494e      	ldr	r1, [pc, #312]	; (8013940 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8013808:	4618      	mov	r0, r3
 801380a:	f7f7 f8d8 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801380e:	f107 0020 	add.w	r0, r7, #32
 8013812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013816:	9301      	str	r3, [sp, #4]
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	9300      	str	r3, [sp, #0]
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	68ba      	ldr	r2, [r7, #8]
 8013820:	68f9      	ldr	r1, [r7, #12]
 8013822:	f7ff ff4d 	bl	80136c0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801382a:	4618      	mov	r0, r3
 801382c:	f7f7 fc7f 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8013830:	f107 0310 	add.w	r3, r7, #16
 8013834:	4618      	mov	r0, r3
 8013836:	f7f8 fb8f 	bl	800bf58 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 801383a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801383e:	4941      	ldr	r1, [pc, #260]	; (8013944 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8013840:	4618      	mov	r0, r3
 8013842:	f7f7 f8bc 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013846:	f107 0210 	add.w	r2, r7, #16
 801384a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801384e:	f107 0320 	add.w	r3, r7, #32
 8013852:	4618      	mov	r0, r3
 8013854:	f7f7 fa1f 	bl	800ac96 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8013858:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801385c:	4618      	mov	r0, r3
 801385e:	f7f7 fc66 	bl	800b12e <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8013862:	f107 0310 	add.w	r3, r7, #16
 8013866:	4618      	mov	r0, r3
 8013868:	f7f8 fc1b 	bl	800c0a2 <_ZNK22SimpleStringCollection4sizeEv>
 801386c:	4603      	mov	r3, r0
 801386e:	2b02      	cmp	r3, #2
 8013870:	bf14      	ite	ne
 8013872:	2301      	movne	r3, #1
 8013874:	2300      	moveq	r3, #0
 8013876:	b2db      	uxtb	r3, r3
 8013878:	2b00      	cmp	r3, #0
 801387a:	d001      	beq.n	8013880 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 801387c:	2400      	movs	r4, #0
 801387e:	e04f      	b.n	8013920 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8013880:	f107 0310 	add.w	r3, r7, #16
 8013884:	2100      	movs	r1, #0
 8013886:	4618      	mov	r0, r3
 8013888:	f7f8 fc18 	bl	800c0bc <_ZN22SimpleStringCollectionixEj>
 801388c:	4604      	mov	r4, r0
 801388e:	f107 0310 	add.w	r3, r7, #16
 8013892:	2100      	movs	r1, #0
 8013894:	4618      	mov	r0, r3
 8013896:	f7f8 fc11 	bl	800c0bc <_ZN22SimpleStringCollectionixEj>
 801389a:	4603      	mov	r3, r0
 801389c:	4618      	mov	r0, r3
 801389e:	f7f7 fc25 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 80138a2:	4603      	mov	r3, r0
 80138a4:	3b01      	subs	r3, #1
 80138a6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80138aa:	2200      	movs	r2, #0
 80138ac:	4621      	mov	r1, r4
 80138ae:	f7f7 fd47 	bl	800b340 <_ZNK12SimpleString9subStringEjj>
 80138b2:	f107 0538 	add.w	r5, r7, #56	; 0x38
 80138b6:	f44f 728f 	mov.w	r2, #286	; 0x11e
 80138ba:	4923      	ldr	r1, [pc, #140]	; (8013948 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80138bc:	2010      	movs	r0, #16
 80138be:	f7f4 fcbb 	bl	8008238 <_ZnwjPKci>
 80138c2:	4604      	mov	r4, r0
 80138c4:	4629      	mov	r1, r5
 80138c6:	4620      	mov	r0, r4
 80138c8:	f009 feb8 	bl	801d63c <_ZN10TestFilterC1ERK12SimpleString>
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138d0:	4619      	mov	r1, r3
 80138d2:	4620      	mov	r0, r4
 80138d4:	f009 fed2 	bl	801d67c <_ZN10TestFilter3addEPS_>
 80138d8:	4602      	mov	r2, r0
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	625a      	str	r2, [r3, #36]	; 0x24
 80138de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7f7 fc23 	bl	800b12e <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 80138e8:	f107 0310 	add.w	r3, r7, #16
 80138ec:	2101      	movs	r1, #1
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7f8 fbe4 	bl	800c0bc <_ZN22SimpleStringCollectionixEj>
 80138f4:	4605      	mov	r5, r0
 80138f6:	f240 121f 	movw	r2, #287	; 0x11f
 80138fa:	4913      	ldr	r1, [pc, #76]	; (8013948 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80138fc:	2010      	movs	r0, #16
 80138fe:	f7f4 fc9b 	bl	8008238 <_ZnwjPKci>
 8013902:	4604      	mov	r4, r0
 8013904:	4629      	mov	r1, r5
 8013906:	4620      	mov	r0, r4
 8013908:	f009 fe98 	bl	801d63c <_ZN10TestFilterC1ERK12SimpleString>
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013910:	4619      	mov	r1, r3
 8013912:	4620      	mov	r0, r4
 8013914:	f009 feb2 	bl	801d67c <_ZN10TestFilter3addEPS_>
 8013918:	4602      	mov	r2, r0
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 801391e:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8013920:	f107 0310 	add.w	r3, r7, #16
 8013924:	4618      	mov	r0, r3
 8013926:	f7f8 fb8b 	bl	800c040 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 801392a:	f107 0320 	add.w	r3, r7, #32
 801392e:	4618      	mov	r0, r3
 8013930:	f7f7 fbfd 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8013934:	4623      	mov	r3, r4
}
 8013936:	4618      	mov	r0, r3
 8013938:	3740      	adds	r7, #64	; 0x40
 801393a:	46bd      	mov	sp, r7
 801393c:	bdb0      	pop	{r4, r5, r7, pc}
 801393e:	bf00      	nop
 8013940:	08022b0c 	.word	0x08022b0c
 8013944:	080234bc 	.word	0x080234bc
 8013948:	0802349c 	.word	0x0802349c

0801394c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 801394c:	b5b0      	push	{r4, r5, r7, lr}
 801394e:	b08c      	sub	sp, #48	; 0x30
 8013950:	af02      	add	r7, sp, #8
 8013952:	60f8      	str	r0, [r7, #12]
 8013954:	60b9      	str	r1, [r7, #8]
 8013956:	607a      	str	r2, [r7, #4]
 8013958:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 801395a:	f107 031c 	add.w	r3, r7, #28
 801395e:	491c      	ldr	r1, [pc, #112]	; (80139d0 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8013960:	4618      	mov	r0, r3
 8013962:	f7f7 f82c 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013966:	f107 0014 	add.w	r0, r7, #20
 801396a:	f107 031c 	add.w	r3, r7, #28
 801396e:	9301      	str	r3, [sp, #4]
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	9300      	str	r3, [sp, #0]
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	68ba      	ldr	r2, [r7, #8]
 8013978:	68f9      	ldr	r1, [r7, #12]
 801397a:	f7ff fea1 	bl	80136c0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801397e:	f107 0514 	add.w	r5, r7, #20
 8013982:	f240 1225 	movw	r2, #293	; 0x125
 8013986:	4913      	ldr	r1, [pc, #76]	; (80139d4 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8013988:	2010      	movs	r0, #16
 801398a:	f7f4 fc55 	bl	8008238 <_ZnwjPKci>
 801398e:	4604      	mov	r4, r0
 8013990:	4629      	mov	r1, r5
 8013992:	4620      	mov	r0, r4
 8013994:	f009 fe52 	bl	801d63c <_ZN10TestFilterC1ERK12SimpleString>
 8013998:	627c      	str	r4, [r7, #36]	; 0x24
 801399a:	f107 0314 	add.w	r3, r7, #20
 801399e:	4618      	mov	r0, r3
 80139a0:	f7f7 fbc5 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80139a4:	f107 031c 	add.w	r3, r7, #28
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7f7 fbc0 	bl	800b12e <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 80139ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139b0:	f009 fe7f 	bl	801d6b2 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139b8:	4619      	mov	r1, r3
 80139ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139bc:	f009 fe5e 	bl	801d67c <_ZN10TestFilter3addEPS_>
 80139c0:	4602      	mov	r2, r0
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80139c6:	bf00      	nop
 80139c8:	3728      	adds	r7, #40	; 0x28
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bdb0      	pop	{r4, r5, r7, pc}
 80139ce:	bf00      	nop
 80139d0:	08022b10 	.word	0x08022b10
 80139d4:	0802349c 	.word	0x0802349c

080139d8 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 80139d8:	b5b0      	push	{r4, r5, r7, lr}
 80139da:	b08c      	sub	sp, #48	; 0x30
 80139dc:	af02      	add	r7, sp, #8
 80139de:	60f8      	str	r0, [r7, #12]
 80139e0:	60b9      	str	r1, [r7, #8]
 80139e2:	607a      	str	r2, [r7, #4]
 80139e4:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 80139e6:	f107 031c 	add.w	r3, r7, #28
 80139ea:	491c      	ldr	r1, [pc, #112]	; (8013a5c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7f6 ffe6 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80139f2:	f107 0014 	add.w	r0, r7, #20
 80139f6:	f107 031c 	add.w	r3, r7, #28
 80139fa:	9301      	str	r3, [sp, #4]
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	9300      	str	r3, [sp, #0]
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	68ba      	ldr	r2, [r7, #8]
 8013a04:	68f9      	ldr	r1, [r7, #12]
 8013a06:	f7ff fe5b 	bl	80136c0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013a0a:	f107 0514 	add.w	r5, r7, #20
 8013a0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013a12:	4913      	ldr	r1, [pc, #76]	; (8013a60 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8013a14:	2010      	movs	r0, #16
 8013a16:	f7f4 fc0f 	bl	8008238 <_ZnwjPKci>
 8013a1a:	4604      	mov	r4, r0
 8013a1c:	4629      	mov	r1, r5
 8013a1e:	4620      	mov	r0, r4
 8013a20:	f009 fe0c 	bl	801d63c <_ZN10TestFilterC1ERK12SimpleString>
 8013a24:	627c      	str	r4, [r7, #36]	; 0x24
 8013a26:	f107 0314 	add.w	r3, r7, #20
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f7f7 fb7f 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8013a30:	f107 031c 	add.w	r3, r7, #28
 8013a34:	4618      	mov	r0, r3
 8013a36:	f7f7 fb7a 	bl	800b12e <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8013a3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a3c:	f009 fe46 	bl	801d6cc <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a44:	4619      	mov	r1, r3
 8013a46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a48:	f009 fe18 	bl	801d67c <_ZN10TestFilter3addEPS_>
 8013a4c:	4602      	mov	r2, r0
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013a52:	bf00      	nop
 8013a54:	3728      	adds	r7, #40	; 0x28
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bdb0      	pop	{r4, r5, r7, pc}
 8013a5a:	bf00      	nop
 8013a5c:	08022b14 	.word	0x08022b14
 8013a60:	0802349c 	.word	0x0802349c

08013a64 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8013a64:	b5b0      	push	{r4, r5, r7, lr}
 8013a66:	b08c      	sub	sp, #48	; 0x30
 8013a68:	af02      	add	r7, sp, #8
 8013a6a:	60f8      	str	r0, [r7, #12]
 8013a6c:	60b9      	str	r1, [r7, #8]
 8013a6e:	607a      	str	r2, [r7, #4]
 8013a70:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8013a72:	f107 031c 	add.w	r3, r7, #28
 8013a76:	491d      	ldr	r1, [pc, #116]	; (8013aec <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7f6 ffa0 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013a7e:	f107 0014 	add.w	r0, r7, #20
 8013a82:	f107 031c 	add.w	r3, r7, #28
 8013a86:	9301      	str	r3, [sp, #4]
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	9300      	str	r3, [sp, #0]
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	68ba      	ldr	r2, [r7, #8]
 8013a90:	68f9      	ldr	r1, [r7, #12]
 8013a92:	f7ff fe15 	bl	80136c0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013a96:	f107 0514 	add.w	r5, r7, #20
 8013a9a:	f240 1233 	movw	r2, #307	; 0x133
 8013a9e:	4914      	ldr	r1, [pc, #80]	; (8013af0 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8013aa0:	2010      	movs	r0, #16
 8013aa2:	f7f4 fbc9 	bl	8008238 <_ZnwjPKci>
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	4629      	mov	r1, r5
 8013aaa:	4620      	mov	r0, r4
 8013aac:	f009 fdc6 	bl	801d63c <_ZN10TestFilterC1ERK12SimpleString>
 8013ab0:	627c      	str	r4, [r7, #36]	; 0x24
 8013ab2:	f107 0314 	add.w	r3, r7, #20
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7f7 fb39 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8013abc:	f107 031c 	add.w	r3, r7, #28
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f7f7 fb34 	bl	800b12e <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8013ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ac8:	f009 fdf3 	bl	801d6b2 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8013acc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ace:	f009 fdfd 	bl	801d6cc <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ad6:	4619      	mov	r1, r3
 8013ad8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ada:	f009 fdcf 	bl	801d67c <_ZN10TestFilter3addEPS_>
 8013ade:	4602      	mov	r2, r0
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013ae4:	bf00      	nop
 8013ae6:	3728      	adds	r7, #40	; 0x28
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bdb0      	pop	{r4, r5, r7, pc}
 8013aec:	08022b18 	.word	0x08022b18
 8013af0:	0802349c 	.word	0x0802349c

08013af4 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 8013af4:	b5b0      	push	{r4, r5, r7, lr}
 8013af6:	b08c      	sub	sp, #48	; 0x30
 8013af8:	af02      	add	r7, sp, #8
 8013afa:	60f8      	str	r0, [r7, #12]
 8013afc:	60b9      	str	r1, [r7, #8]
 8013afe:	607a      	str	r2, [r7, #4]
 8013b00:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 8013b02:	f107 031c 	add.w	r3, r7, #28
 8013b06:	491a      	ldr	r1, [pc, #104]	; (8013b70 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7f6 ff58 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013b0e:	f107 0014 	add.w	r0, r7, #20
 8013b12:	f107 031c 	add.w	r3, r7, #28
 8013b16:	9301      	str	r3, [sp, #4]
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	9300      	str	r3, [sp, #0]
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	68ba      	ldr	r2, [r7, #8]
 8013b20:	68f9      	ldr	r1, [r7, #12]
 8013b22:	f7ff fdcd 	bl	80136c0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013b26:	f107 0514 	add.w	r5, r7, #20
 8013b2a:	f240 123b 	movw	r2, #315	; 0x13b
 8013b2e:	4911      	ldr	r1, [pc, #68]	; (8013b74 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8013b30:	2010      	movs	r0, #16
 8013b32:	f7f4 fb81 	bl	8008238 <_ZnwjPKci>
 8013b36:	4604      	mov	r4, r0
 8013b38:	4629      	mov	r1, r5
 8013b3a:	4620      	mov	r0, r4
 8013b3c:	f009 fd7e 	bl	801d63c <_ZN10TestFilterC1ERK12SimpleString>
 8013b40:	627c      	str	r4, [r7, #36]	; 0x24
 8013b42:	f107 0314 	add.w	r3, r7, #20
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7f7 faf1 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8013b4c:	f107 031c 	add.w	r3, r7, #28
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7f7 faec 	bl	800b12e <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b5e:	f009 fd8d 	bl	801d67c <_ZN10TestFilter3addEPS_>
 8013b62:	4602      	mov	r2, r0
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013b68:	bf00      	nop
 8013b6a:	3728      	adds	r7, #40	; 0x28
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8013b70:	08022b20 	.word	0x08022b20
 8013b74:	0802349c 	.word	0x0802349c

08013b78 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8013b78:	b5b0      	push	{r4, r5, r7, lr}
 8013b7a:	b08c      	sub	sp, #48	; 0x30
 8013b7c:	af02      	add	r7, sp, #8
 8013b7e:	60f8      	str	r0, [r7, #12]
 8013b80:	60b9      	str	r1, [r7, #8]
 8013b82:	607a      	str	r2, [r7, #4]
 8013b84:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8013b86:	f107 031c 	add.w	r3, r7, #28
 8013b8a:	491c      	ldr	r1, [pc, #112]	; (8013bfc <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f7f6 ff16 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013b92:	f107 0014 	add.w	r0, r7, #20
 8013b96:	f107 031c 	add.w	r3, r7, #28
 8013b9a:	9301      	str	r3, [sp, #4]
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	9300      	str	r3, [sp, #0]
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	68ba      	ldr	r2, [r7, #8]
 8013ba4:	68f9      	ldr	r1, [r7, #12]
 8013ba6:	f7ff fd8b 	bl	80136c0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013baa:	f107 0514 	add.w	r5, r7, #20
 8013bae:	f240 1241 	movw	r2, #321	; 0x141
 8013bb2:	4913      	ldr	r1, [pc, #76]	; (8013c00 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8013bb4:	2010      	movs	r0, #16
 8013bb6:	f7f4 fb3f 	bl	8008238 <_ZnwjPKci>
 8013bba:	4604      	mov	r4, r0
 8013bbc:	4629      	mov	r1, r5
 8013bbe:	4620      	mov	r0, r4
 8013bc0:	f009 fd3c 	bl	801d63c <_ZN10TestFilterC1ERK12SimpleString>
 8013bc4:	627c      	str	r4, [r7, #36]	; 0x24
 8013bc6:	f107 0314 	add.w	r3, r7, #20
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f7f7 faaf 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8013bd0:	f107 031c 	add.w	r3, r7, #28
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f7f7 faaa 	bl	800b12e <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 8013bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013bdc:	f009 fd69 	bl	801d6b2 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013be4:	4619      	mov	r1, r3
 8013be6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013be8:	f009 fd48 	bl	801d67c <_ZN10TestFilter3addEPS_>
 8013bec:	4602      	mov	r2, r0
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013bf2:	bf00      	nop
 8013bf4:	3728      	adds	r7, #40	; 0x28
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8013bfa:	bf00      	nop
 8013bfc:	08022b24 	.word	0x08022b24
 8013c00:	0802349c 	.word	0x0802349c

08013c04 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 8013c04:	b5b0      	push	{r4, r5, r7, lr}
 8013c06:	b08c      	sub	sp, #48	; 0x30
 8013c08:	af02      	add	r7, sp, #8
 8013c0a:	60f8      	str	r0, [r7, #12]
 8013c0c:	60b9      	str	r1, [r7, #8]
 8013c0e:	607a      	str	r2, [r7, #4]
 8013c10:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 8013c12:	f107 031c 	add.w	r3, r7, #28
 8013c16:	491c      	ldr	r1, [pc, #112]	; (8013c88 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f7f6 fed0 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013c1e:	f107 0014 	add.w	r0, r7, #20
 8013c22:	f107 031c 	add.w	r3, r7, #28
 8013c26:	9301      	str	r3, [sp, #4]
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	9300      	str	r3, [sp, #0]
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	68ba      	ldr	r2, [r7, #8]
 8013c30:	68f9      	ldr	r1, [r7, #12]
 8013c32:	f7ff fd45 	bl	80136c0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013c36:	f107 0514 	add.w	r5, r7, #20
 8013c3a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8013c3e:	4913      	ldr	r1, [pc, #76]	; (8013c8c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8013c40:	2010      	movs	r0, #16
 8013c42:	f7f4 faf9 	bl	8008238 <_ZnwjPKci>
 8013c46:	4604      	mov	r4, r0
 8013c48:	4629      	mov	r1, r5
 8013c4a:	4620      	mov	r0, r4
 8013c4c:	f009 fcf6 	bl	801d63c <_ZN10TestFilterC1ERK12SimpleString>
 8013c50:	627c      	str	r4, [r7, #36]	; 0x24
 8013c52:	f107 0314 	add.w	r3, r7, #20
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7f7 fa69 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8013c5c:	f107 031c 	add.w	r3, r7, #28
 8013c60:	4618      	mov	r0, r3
 8013c62:	f7f7 fa64 	bl	800b12e <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8013c66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c68:	f009 fd30 	bl	801d6cc <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c70:	4619      	mov	r1, r3
 8013c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c74:	f009 fd02 	bl	801d67c <_ZN10TestFilter3addEPS_>
 8013c78:	4602      	mov	r2, r0
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013c7e:	bf00      	nop
 8013c80:	3728      	adds	r7, #40	; 0x28
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bdb0      	pop	{r4, r5, r7, pc}
 8013c86:	bf00      	nop
 8013c88:	08022b28 	.word	0x08022b28
 8013c8c:	0802349c 	.word	0x0802349c

08013c90 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8013c90:	b5b0      	push	{r4, r5, r7, lr}
 8013c92:	b08c      	sub	sp, #48	; 0x30
 8013c94:	af02      	add	r7, sp, #8
 8013c96:	60f8      	str	r0, [r7, #12]
 8013c98:	60b9      	str	r1, [r7, #8]
 8013c9a:	607a      	str	r2, [r7, #4]
 8013c9c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 8013c9e:	f107 031c 	add.w	r3, r7, #28
 8013ca2:	491d      	ldr	r1, [pc, #116]	; (8013d18 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f7f6 fe8a 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013caa:	f107 0014 	add.w	r0, r7, #20
 8013cae:	f107 031c 	add.w	r3, r7, #28
 8013cb2:	9301      	str	r3, [sp, #4]
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	9300      	str	r3, [sp, #0]
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	68ba      	ldr	r2, [r7, #8]
 8013cbc:	68f9      	ldr	r1, [r7, #12]
 8013cbe:	f7ff fcff 	bl	80136c0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013cc2:	f107 0514 	add.w	r5, r7, #20
 8013cc6:	f240 124f 	movw	r2, #335	; 0x14f
 8013cca:	4914      	ldr	r1, [pc, #80]	; (8013d1c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8013ccc:	2010      	movs	r0, #16
 8013cce:	f7f4 fab3 	bl	8008238 <_ZnwjPKci>
 8013cd2:	4604      	mov	r4, r0
 8013cd4:	4629      	mov	r1, r5
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	f009 fcb0 	bl	801d63c <_ZN10TestFilterC1ERK12SimpleString>
 8013cdc:	627c      	str	r4, [r7, #36]	; 0x24
 8013cde:	f107 0314 	add.w	r3, r7, #20
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	f7f7 fa23 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8013ce8:	f107 031c 	add.w	r3, r7, #28
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7f7 fa1e 	bl	800b12e <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8013cf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013cf4:	f009 fcea 	bl	801d6cc <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 8013cf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013cfa:	f009 fcda 	bl	801d6b2 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d02:	4619      	mov	r1, r3
 8013d04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d06:	f009 fcb9 	bl	801d67c <_ZN10TestFilter3addEPS_>
 8013d0a:	4602      	mov	r2, r0
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013d10:	bf00      	nop
 8013d12:	3728      	adds	r7, #40	; 0x28
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bdb0      	pop	{r4, r5, r7, pc}
 8013d18:	08022b2c 	.word	0x08022b2c
 8013d1c:	0802349c 	.word	0x0802349c

08013d20 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 8013d20:	b5b0      	push	{r4, r5, r7, lr}
 8013d22:	b092      	sub	sp, #72	; 0x48
 8013d24:	af02      	add	r7, sp, #8
 8013d26:	60f8      	str	r0, [r7, #12]
 8013d28:	60b9      	str	r1, [r7, #8]
 8013d2a:	607a      	str	r2, [r7, #4]
 8013d2c:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8013d2e:	f107 0320 	add.w	r3, r7, #32
 8013d32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7f6 fe42 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013d3a:	f107 0018 	add.w	r0, r7, #24
 8013d3e:	f107 0320 	add.w	r3, r7, #32
 8013d42:	9301      	str	r3, [sp, #4]
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	9300      	str	r3, [sp, #0]
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	68ba      	ldr	r2, [r7, #8]
 8013d4c:	68f9      	ldr	r1, [r7, #12]
 8013d4e:	f7ff fcb7 	bl	80136c0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013d52:	f107 0320 	add.w	r3, r7, #32
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7f7 f9e9 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8013d5c:	f107 0010 	add.w	r0, r7, #16
 8013d60:	f107 0118 	add.w	r1, r7, #24
 8013d64:	2329      	movs	r3, #41	; 0x29
 8013d66:	222c      	movs	r2, #44	; 0x2c
 8013d68:	f7f7 fb92 	bl	800b490 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8013d6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013d70:	f107 0110 	add.w	r1, r7, #16
 8013d74:	2202      	movs	r2, #2
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7f7 fb2c 	bl	800b3d4 <_ZNK12SimpleString9subStringEj>
 8013d7c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013d80:	f107 0310 	add.w	r3, r7, #16
 8013d84:	4611      	mov	r1, r2
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7f6 fe85 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 8013d8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7f7 f9cc 	bl	800b12e <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8013d96:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8013d9a:	492a      	ldr	r1, [pc, #168]	; (8013e44 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8013d9c:	2010      	movs	r0, #16
 8013d9e:	f7f4 fa4b 	bl	8008238 <_ZnwjPKci>
 8013da2:	4604      	mov	r4, r0
 8013da4:	f107 0310 	add.w	r3, r7, #16
 8013da8:	4619      	mov	r1, r3
 8013daa:	4620      	mov	r0, r4
 8013dac:	f009 fc46 	bl	801d63c <_ZN10TestFilterC1ERK12SimpleString>
 8013db0:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 8013db2:	f107 0318 	add.w	r3, r7, #24
 8013db6:	2100      	movs	r1, #0
 8013db8:	4618      	mov	r0, r3
 8013dba:	f7f7 fb1c 	bl	800b3f6 <_ZNK12SimpleString2atEj>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	461a      	mov	r2, r3
 8013dc2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8013dc6:	f107 0118 	add.w	r1, r7, #24
 8013dca:	232c      	movs	r3, #44	; 0x2c
 8013dcc:	f7f7 fb60 	bl	800b490 <_ZNK12SimpleString17subStringFromTillEcc>
 8013dd0:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8013dd4:	f240 125b 	movw	r2, #347	; 0x15b
 8013dd8:	491a      	ldr	r1, [pc, #104]	; (8013e44 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8013dda:	2010      	movs	r0, #16
 8013ddc:	f7f4 fa2c 	bl	8008238 <_ZnwjPKci>
 8013de0:	4604      	mov	r4, r0
 8013de2:	4629      	mov	r1, r5
 8013de4:	4620      	mov	r0, r4
 8013de6:	f009 fc29 	bl	801d63c <_ZN10TestFilterC1ERK12SimpleString>
 8013dea:	63bc      	str	r4, [r7, #56]	; 0x38
 8013dec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013df0:	4618      	mov	r0, r3
 8013df2:	f7f7 f99c 	bl	800b12e <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 8013df6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013df8:	f009 fc5b 	bl	801d6b2 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 8013dfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013dfe:	f009 fc58 	bl	801d6b2 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e06:	4619      	mov	r1, r3
 8013e08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013e0a:	f009 fc37 	bl	801d67c <_ZN10TestFilter3addEPS_>
 8013e0e:	4602      	mov	r2, r0
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e18:	4619      	mov	r1, r3
 8013e1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013e1c:	f009 fc2e 	bl	801d67c <_ZN10TestFilter3addEPS_>
 8013e20:	4602      	mov	r2, r0
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8013e26:	f107 0310 	add.w	r3, r7, #16
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f7f7 f97f 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8013e30:	f107 0318 	add.w	r3, r7, #24
 8013e34:	4618      	mov	r0, r3
 8013e36:	f7f7 f97a 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8013e3a:	bf00      	nop
 8013e3c:	3740      	adds	r7, #64	; 0x40
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bdb0      	pop	{r4, r5, r7, pc}
 8013e42:	bf00      	nop
 8013e44:	0802349c 	.word	0x0802349c

08013e48 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8013e48:	b590      	push	{r4, r7, lr}
 8013e4a:	b08b      	sub	sp, #44	; 0x2c
 8013e4c:	af02      	add	r7, sp, #8
 8013e4e:	60f8      	str	r0, [r7, #12]
 8013e50:	60b9      	str	r1, [r7, #8]
 8013e52:	607a      	str	r2, [r7, #4]
 8013e54:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8013e56:	f107 0318 	add.w	r3, r7, #24
 8013e5a:	491b      	ldr	r1, [pc, #108]	; (8013ec8 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f7f6 fdae 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013e62:	f107 0010 	add.w	r0, r7, #16
 8013e66:	f107 0318 	add.w	r3, r7, #24
 8013e6a:	9301      	str	r3, [sp, #4]
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	9300      	str	r3, [sp, #0]
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	68ba      	ldr	r2, [r7, #8]
 8013e74:	68f9      	ldr	r1, [r7, #12]
 8013e76:	f7ff fc23 	bl	80136c0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013e7a:	f107 0318 	add.w	r3, r7, #24
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f7f7 f955 	bl	800b12e <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8013e84:	f107 0310 	add.w	r3, r7, #16
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7f7 f92f 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	bf0c      	ite	eq
 8013e94:	2301      	moveq	r3, #1
 8013e96:	2300      	movne	r3, #0
 8013e98:	b2db      	uxtb	r3, r3
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d001      	beq.n	8013ea2 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 8013e9e:	2400      	movs	r4, #0
 8013ea0:	e008      	b.n	8013eb4 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	3330      	adds	r3, #48	; 0x30
 8013ea6:	f107 0210 	add.w	r2, r7, #16
 8013eaa:	4611      	mov	r1, r2
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7f6 fdf2 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8013eb2:	2401      	movs	r4, #1
 8013eb4:	f107 0310 	add.w	r3, r7, #16
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7f7 f938 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8013ebe:	2c01      	cmp	r4, #1
}
 8013ec0:	3724      	adds	r7, #36	; 0x24
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd90      	pop	{r4, r7, pc}
 8013ec6:	bf00      	nop
 8013ec8:	08022b54 	.word	0x08022b54

08013ecc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8013ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ece:	b093      	sub	sp, #76	; 0x4c
 8013ed0:	af02      	add	r7, sp, #8
 8013ed2:	60f8      	str	r0, [r7, #12]
 8013ed4:	60b9      	str	r1, [r7, #8]
 8013ed6:	607a      	str	r2, [r7, #4]
 8013ed8:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8013eda:	f107 0318 	add.w	r3, r7, #24
 8013ede:	4953      	ldr	r1, [pc, #332]	; (801402c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7f6 fd6c 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013ee6:	f107 0010 	add.w	r0, r7, #16
 8013eea:	f107 0318 	add.w	r3, r7, #24
 8013eee:	9301      	str	r3, [sp, #4]
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	9300      	str	r3, [sp, #0]
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	68ba      	ldr	r2, [r7, #8]
 8013ef8:	68f9      	ldr	r1, [r7, #12]
 8013efa:	f7ff fbe1 	bl	80136c0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013efe:	f107 0318 	add.w	r3, r7, #24
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7f7 f913 	bl	800b12e <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8013f08:	f107 0310 	add.w	r3, r7, #16
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f7f7 f8ed 	bl	800b0ec <_ZNK12SimpleString4sizeEv>
 8013f12:	4603      	mov	r3, r0
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	bf0c      	ite	eq
 8013f18:	2301      	moveq	r3, #1
 8013f1a:	2300      	movne	r3, #0
 8013f1c:	b2db      	uxtb	r3, r3
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d001      	beq.n	8013f26 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 8013f22:	2400      	movs	r4, #0
 8013f24:	e078      	b.n	8014018 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8013f26:	2500      	movs	r5, #0
 8013f28:	f107 0320 	add.w	r3, r7, #32
 8013f2c:	4940      	ldr	r1, [pc, #256]	; (8014030 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f7f6 fd45 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013f34:	2601      	movs	r6, #1
 8013f36:	f107 0220 	add.w	r2, r7, #32
 8013f3a:	f107 0310 	add.w	r3, r7, #16
 8013f3e:	4611      	mov	r1, r2
 8013f40:	4618      	mov	r0, r3
 8013f42:	f7f7 f900 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8013f46:	4603      	mov	r3, r0
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d111      	bne.n	8013f70 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8013f4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013f50:	4938      	ldr	r1, [pc, #224]	; (8014034 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8013f52:	4618      	mov	r0, r3
 8013f54:	f7f6 fd33 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013f58:	2501      	movs	r5, #1
 8013f5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013f5e:	f107 0310 	add.w	r3, r7, #16
 8013f62:	4611      	mov	r1, r2
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7f7 f8ee 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d001      	beq.n	8013f74 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8013f70:	2401      	movs	r4, #1
 8013f72:	e000      	b.n	8013f76 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8013f74:	2400      	movs	r4, #0
 8013f76:	2d00      	cmp	r5, #0
 8013f78:	d004      	beq.n	8013f84 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8013f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f7f7 f8d5 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8013f84:	2e00      	cmp	r6, #0
 8013f86:	d004      	beq.n	8013f92 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8013f88:	f107 0320 	add.w	r3, r7, #32
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f7f7 f8ce 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8013f92:	2c00      	cmp	r4, #0
 8013f94:	d005      	beq.n	8013fa2 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	2200      	movs	r2, #0
 8013f9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8013f9e:	2401      	movs	r4, #1
 8013fa0:	e03a      	b.n	8014018 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8013fa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013fa6:	4924      	ldr	r1, [pc, #144]	; (8014038 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7f6 fd08 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013fae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013fb2:	f107 0310 	add.w	r3, r7, #16
 8013fb6:	4611      	mov	r1, r2
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f7f7 f8c4 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	461c      	mov	r4, r3
 8013fc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7f7 f8b1 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8013fcc:	2c00      	cmp	r4, #0
 8013fce:	d005      	beq.n	8013fdc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	2201      	movs	r2, #1
 8013fd4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8013fd8:	2401      	movs	r4, #1
 8013fda:	e01d      	b.n	8014018 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8013fdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013fe0:	4916      	ldr	r1, [pc, #88]	; (801403c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7f6 fceb 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8013fe8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8013fec:	f107 0310 	add.w	r3, r7, #16
 8013ff0:	4611      	mov	r1, r2
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7f7 f8a7 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	461c      	mov	r4, r3
 8013ffc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014000:	4618      	mov	r0, r3
 8014002:	f7f7 f894 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8014006:	2c00      	cmp	r4, #0
 8014008:	d005      	beq.n	8014016 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	2202      	movs	r2, #2
 801400e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8014012:	2401      	movs	r4, #1
 8014014:	e000      	b.n	8014018 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8014016:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8014018:	f107 0310 	add.w	r3, r7, #16
 801401c:	4618      	mov	r0, r3
 801401e:	f7f7 f886 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8014022:	4623      	mov	r3, r4
}
 8014024:	4618      	mov	r0, r3
 8014026:	3744      	adds	r7, #68	; 0x44
 8014028:	46bd      	mov	sp, r7
 801402a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801402c:	08022b50 	.word	0x08022b50
 8014030:	080234c0 	.word	0x080234c0
 8014034:	080234c8 	.word	0x080234c8
 8014038:	080234d0 	.word	0x080234d0
 801403c:	080234d8 	.word	0x080234d8

08014040 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8014040:	b480      	push	{r7}
 8014042:	b083      	sub	sp, #12
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801404e:	2b01      	cmp	r3, #1
 8014050:	bf0c      	ite	eq
 8014052:	2301      	moveq	r3, #1
 8014054:	2300      	movne	r3, #0
 8014056:	b2db      	uxtb	r3, r3
}
 8014058:	4618      	mov	r0, r3
 801405a:	370c      	adds	r7, #12
 801405c:	46bd      	mov	sp, r7
 801405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014062:	4770      	bx	lr

08014064 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8014064:	b480      	push	{r7}
 8014066:	b083      	sub	sp, #12
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014072:	2b02      	cmp	r3, #2
 8014074:	bf0c      	ite	eq
 8014076:	2301      	moveq	r3, #1
 8014078:	2300      	movne	r3, #0
 801407a:	b2db      	uxtb	r3, r3
}
 801407c:	4618      	mov	r0, r3
 801407e:	370c      	adds	r7, #12
 8014080:	46bd      	mov	sp, r7
 8014082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014086:	4770      	bx	lr

08014088 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8014088:	b480      	push	{r7}
 801408a:	b083      	sub	sp, #12
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
    return packageName_;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	3330      	adds	r3, #48	; 0x30
}
 8014094:	4618      	mov	r0, r3
 8014096:	370c      	adds	r7, #12
 8014098:	46bd      	mov	sp, r7
 801409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409e:	4770      	bx	lr

080140a0 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 80140a0:	b480      	push	{r7}
 80140a2:	b083      	sub	sp, #12
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	2200      	movs	r2, #0
 80140ac:	601a      	str	r2, [r3, #0]
    {}
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	4618      	mov	r0, r3
 80140b2:	370c      	adds	r7, #12
 80140b4:	46bd      	mov	sp, r7
 80140b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ba:	4770      	bx	lr

080140bc <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 80140bc:	b480      	push	{r7}
 80140be:	b083      	sub	sp, #12
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80140ca:	2200      	movs	r2, #0
 80140cc:	601a      	str	r2, [r3, #0]
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80140d4:	3304      	adds	r3, #4
 80140d6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80140da:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	2200      	movs	r2, #0
 80140e0:	701a      	strb	r2, [r3, #0]
}
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	4618      	mov	r0, r3
 80140e6:	370c      	adds	r7, #12
 80140e8:	46bd      	mov	sp, r7
 80140ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ee:	4770      	bx	lr

080140f0 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 80140f0:	b480      	push	{r7}
 80140f2:	b083      	sub	sp, #12
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80140fe:	2200      	movs	r2, #0
 8014100:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	2200      	movs	r2, #0
 8014106:	701a      	strb	r2, [r3, #0]
}
 8014108:	bf00      	nop
 801410a:	370c      	adds	r7, #12
 801410c:	46bd      	mov	sp, r7
 801410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014112:	4770      	bx	lr

08014114 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8014114:	b40e      	push	{r1, r2, r3}
 8014116:	b590      	push	{r4, r7, lr}
 8014118:	b086      	sub	sp, #24
 801411a:	af00      	add	r7, sp, #0
 801411c:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014124:	3304      	adds	r3, #4
 8014126:	681a      	ldr	r2, [r3, #0]
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	1ad3      	subs	r3, r2, r3
 8014132:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d032      	beq.n	80141a0 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 801413a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801413e:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8014140:	4b1b      	ldr	r3, [pc, #108]	; (80141b0 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8014142:	681c      	ldr	r4, [r3, #0]
 8014144:	687a      	ldr	r2, [r7, #4]
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	18d0      	adds	r0, r2, r3
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	1c59      	adds	r1, r3, #1
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014158:	47a0      	blx	r4
 801415a:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 801415c:	693b      	ldr	r3, [r7, #16]
 801415e:	2b00      	cmp	r3, #0
 8014160:	dd09      	ble.n	8014176 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014168:	681a      	ldr	r2, [r3, #0]
 801416a:	693b      	ldr	r3, [r7, #16]
 801416c:	441a      	add	r2, r3
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014174:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801417c:	681a      	ldr	r2, [r3, #0]
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014184:	3304      	adds	r3, #4
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	429a      	cmp	r2, r3
 801418a:	d90a      	bls.n	80141a2 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014192:	3304      	adds	r3, #4
 8014194:	681a      	ldr	r2, [r3, #0]
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801419c:	601a      	str	r2, [r3, #0]
 801419e:	e000      	b.n	80141a2 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 80141a0:	bf00      	nop
    va_end(arguments);
}
 80141a2:	3718      	adds	r7, #24
 80141a4:	46bd      	mov	sp, r7
 80141a6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80141aa:	b003      	add	sp, #12
 80141ac:	4770      	bx	lr
 80141ae:	bf00      	nop
 80141b0:	200000ac 	.word	0x200000ac

080141b4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b08c      	sub	sp, #48	; 0x30
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	60f8      	str	r0, [r7, #12]
 80141bc:	60b9      	str	r1, [r7, #8]
 80141be:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 80141c4:	2310      	movs	r3, #16
 80141c6:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 80141c8:	2300      	movs	r3, #0
 80141ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 80141cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	429a      	cmp	r2, r3
 80141d2:	d273      	bcs.n	80142bc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 80141d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141d6:	493b      	ldr	r1, [pc, #236]	; (80142c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 80141d8:	68f8      	ldr	r0, [r7, #12]
 80141da:	f7ff ff9b 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 80141de:	687a      	ldr	r2, [r7, #4]
 80141e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141e2:	1ad3      	subs	r3, r2, r3
 80141e4:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 80141e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e8:	2b10      	cmp	r3, #16
 80141ea:	d901      	bls.n	80141f0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 80141ec:	2310      	movs	r3, #16
 80141ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 80141f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f2:	f1c3 0310 	rsb	r3, r3, #16
 80141f6:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 80141f8:	2300      	movs	r3, #0
 80141fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80141fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014200:	429a      	cmp	r2, r3
 8014202:	d215      	bcs.n	8014230 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8014204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014208:	4413      	add	r3, r2
 801420a:	69fa      	ldr	r2, [r7, #28]
 801420c:	4413      	add	r3, r2
 801420e:	781b      	ldrb	r3, [r3, #0]
 8014210:	461a      	mov	r2, r3
 8014212:	492d      	ldr	r1, [pc, #180]	; (80142c8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8014214:	68f8      	ldr	r0, [r7, #12]
 8014216:	f7ff ff7d 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 801421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801421c:	2b07      	cmp	r3, #7
 801421e:	d103      	bne.n	8014228 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8014220:	492a      	ldr	r1, [pc, #168]	; (80142cc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8014222:	68f8      	ldr	r0, [r7, #12]
 8014224:	f7ff ff76 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8014228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801422a:	3301      	adds	r3, #1
 801422c:	62bb      	str	r3, [r7, #40]	; 0x28
 801422e:	e7e5      	b.n	80141fc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8014230:	2300      	movs	r3, #0
 8014232:	62bb      	str	r3, [r7, #40]	; 0x28
 8014234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	429a      	cmp	r2, r3
 801423a:	d207      	bcs.n	801424c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 801423c:	4924      	ldr	r1, [pc, #144]	; (80142d0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 801423e:	68f8      	ldr	r0, [r7, #12]
 8014240:	f7ff ff68 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8014244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014246:	3301      	adds	r3, #1
 8014248:	62bb      	str	r3, [r7, #40]	; 0x28
 801424a:	e7f3      	b.n	8014234 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	2b08      	cmp	r3, #8
 8014250:	d903      	bls.n	801425a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8014252:	491e      	ldr	r1, [pc, #120]	; (80142cc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8014254:	68f8      	ldr	r0, [r7, #12]
 8014256:	f7ff ff5d 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 801425a:	491e      	ldr	r1, [pc, #120]	; (80142d4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 801425c:	68f8      	ldr	r0, [r7, #12]
 801425e:	f7ff ff59 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8014262:	2300      	movs	r3, #0
 8014264:	62bb      	str	r3, [r7, #40]	; 0x28
 8014266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801426a:	429a      	cmp	r2, r3
 801426c:	d21d      	bcs.n	80142aa <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 801426e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014272:	4413      	add	r3, r2
 8014274:	69fa      	ldr	r2, [r7, #28]
 8014276:	4413      	add	r3, r2
 8014278:	781b      	ldrb	r3, [r3, #0]
 801427a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 801427e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014282:	2b1f      	cmp	r3, #31
 8014284:	d903      	bls.n	801428e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8014286:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801428a:	2b7e      	cmp	r3, #126	; 0x7e
 801428c:	d902      	bls.n	8014294 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 801428e:	232e      	movs	r3, #46	; 0x2e
 8014290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8014294:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014298:	461a      	mov	r2, r3
 801429a:	490f      	ldr	r1, [pc, #60]	; (80142d8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 801429c:	68f8      	ldr	r0, [r7, #12]
 801429e:	f7ff ff39 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80142a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a4:	3301      	adds	r3, #1
 80142a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80142a8:	e7dd      	b.n	8014266 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 80142aa:	490c      	ldr	r1, [pc, #48]	; (80142dc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 80142ac:	68f8      	ldr	r0, [r7, #12]
 80142ae:	f7ff ff31 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 80142b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b6:	4413      	add	r3, r2
 80142b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 80142ba:	e787      	b.n	80141cc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 80142bc:	bf00      	nop
 80142be:	3730      	adds	r7, #48	; 0x30
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd80      	pop	{r7, pc}
 80142c4:	080234f0 	.word	0x080234f0
 80142c8:	080234fc 	.word	0x080234fc
 80142cc:	08023504 	.word	0x08023504
 80142d0:	08023508 	.word	0x08023508
 80142d4:	0802350c 	.word	0x0802350c
 80142d8:	08023510 	.word	0x08023510
 80142dc:	08023514 	.word	0x08023514

080142e0 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 80142e0:	b480      	push	{r7}
 80142e2:	b083      	sub	sp, #12
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
    return buffer_;
 80142e8:	687b      	ldr	r3, [r7, #4]
}
 80142ea:	4618      	mov	r0, r3
 80142ec:	370c      	adds	r7, #12
 80142ee:	46bd      	mov	sp, r7
 80142f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f4:	4770      	bx	lr

080142f6 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 80142f6:	b480      	push	{r7}
 80142f8:	b083      	sub	sp, #12
 80142fa:	af00      	add	r7, sp, #0
 80142fc:	6078      	str	r0, [r7, #4]
 80142fe:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014306:	3304      	adds	r3, #4
 8014308:	683a      	ldr	r2, [r7, #0]
 801430a:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014312:	3304      	adds	r3, #4
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801431a:	d306      	bcc.n	801432a <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014322:	3304      	adds	r3, #4
 8014324:	f640 72ff 	movw	r2, #4095	; 0xfff
 8014328:	601a      	str	r2, [r3, #0]
}
 801432a:	bf00      	nop
 801432c:	370c      	adds	r7, #12
 801432e:	46bd      	mov	sp, r7
 8014330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014334:	4770      	bx	lr

08014336 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8014336:	b480      	push	{r7}
 8014338:	b083      	sub	sp, #12
 801433a:	af00      	add	r7, sp, #0
 801433c:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014344:	3304      	adds	r3, #4
 8014346:	f640 72ff 	movw	r2, #4095	; 0xfff
 801434a:	601a      	str	r2, [r3, #0]
}
 801434c:	bf00      	nop
 801434e:	370c      	adds	r7, #12
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr

08014358 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8014358:	b480      	push	{r7}
 801435a:	b083      	sub	sp, #12
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014366:	681a      	ldr	r2, [r3, #0]
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801436e:	3304      	adds	r3, #4
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	429a      	cmp	r2, r3
 8014374:	bf2c      	ite	cs
 8014376:	2301      	movcs	r3, #1
 8014378:	2300      	movcc	r3, #0
 801437a:	b2db      	uxtb	r3, r3
}
 801437c:	4618      	mov	r0, r3
 801437e:	370c      	adds	r7, #12
 8014380:	46bd      	mov	sp, r7
 8014382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014386:	4770      	bx	lr

08014388 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8014388:	b580      	push	{r7, lr}
 801438a:	b082      	sub	sp, #8
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2200      	movs	r2, #0
 8014394:	601a      	str	r2, [r3, #0]
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	2200      	movs	r2, #0
 801439a:	711a      	strb	r2, [r3, #4]
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	3308      	adds	r3, #8
 80143a0:	4618      	mov	r0, r3
 80143a2:	f7ff fe8b 	bl	80140bc <_ZN18SimpleStringBufferC1Ev>
{
}
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	4618      	mov	r0, r3
 80143aa:	3708      	adds	r7, #8
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}

080143b0 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 80143b0:	b5b0      	push	{r4, r5, r7, lr}
 80143b2:	b086      	sub	sp, #24
 80143b4:	af02      	add	r7, sp, #8
 80143b6:	60f8      	str	r0, [r7, #12]
 80143b8:	60b9      	str	r1, [r7, #8]
 80143ba:	607a      	str	r2, [r7, #4]
 80143bc:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	f103 0408 	add.w	r4, r3, #8
 80143c4:	687d      	ldr	r5, [r7, #4]
 80143c6:	6a3b      	ldr	r3, [r7, #32]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	3314      	adds	r3, #20
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	6a38      	ldr	r0, [r7, #32]
 80143d0:	4798      	blx	r3
 80143d2:	4603      	mov	r3, r0
 80143d4:	9301      	str	r3, [sp, #4]
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	9300      	str	r3, [sp, #0]
 80143da:	462b      	mov	r3, r5
 80143dc:	68ba      	ldr	r2, [r7, #8]
 80143de:	4904      	ldr	r1, [pc, #16]	; (80143f0 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 80143e0:	4620      	mov	r0, r4
 80143e2:	f7ff fe97 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80143e6:	bf00      	nop
 80143e8:	3710      	adds	r7, #16
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bdb0      	pop	{r4, r5, r7, pc}
 80143ee:	bf00      	nop
 80143f0:	08023518 	.word	0x08023518

080143f4 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 80143f4:	b5b0      	push	{r4, r5, r7, lr}
 80143f6:	b086      	sub	sp, #24
 80143f8:	af02      	add	r7, sp, #8
 80143fa:	60f8      	str	r0, [r7, #12]
 80143fc:	60b9      	str	r1, [r7, #8]
 80143fe:	607a      	str	r2, [r7, #4]
 8014400:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	f103 0408 	add.w	r4, r3, #8
 8014408:	687d      	ldr	r5, [r7, #4]
 801440a:	683b      	ldr	r3, [r7, #0]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	3318      	adds	r3, #24
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	6838      	ldr	r0, [r7, #0]
 8014414:	4798      	blx	r3
 8014416:	4603      	mov	r3, r0
 8014418:	9300      	str	r3, [sp, #0]
 801441a:	462b      	mov	r3, r5
 801441c:	68ba      	ldr	r2, [r7, #8]
 801441e:	4904      	ldr	r1, [pc, #16]	; (8014430 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8014420:	4620      	mov	r0, r4
 8014422:	f7ff fe77 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014426:	bf00      	nop
 8014428:	3710      	adds	r7, #16
 801442a:	46bd      	mov	sp, r7
 801442c:	bdb0      	pop	{r4, r5, r7, pc}
 801442e:	bf00      	nop
 8014430:	08023550 	.word	0x08023550

08014434 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b082      	sub	sp, #8
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	3308      	adds	r3, #8
 8014440:	4903      	ldr	r1, [pc, #12]	; (8014450 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8014442:	4618      	mov	r0, r3
 8014444:	f7ff fe66 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014448:	bf00      	nop
 801444a:	3708      	adds	r7, #8
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}
 8014450:	08023580 	.word	0x08023580

08014454 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b084      	sub	sp, #16
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2200      	movs	r2, #0
 8014460:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	2200      	movs	r2, #0
 8014466:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8014468:	2367      	movs	r3, #103	; 0x67
 801446a:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	f203 1311 	addw	r3, r3, #273	; 0x111
 8014472:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	f103 0208 	add.w	r2, r3, #8
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8014480:	4619      	mov	r1, r3
 8014482:	4610      	mov	r0, r2
 8014484:	f7ff ff37 	bl	80142f6 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8014488:	bf00      	nop
 801448a:	3710      	adds	r7, #16
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}

08014490 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8014490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014492:	b089      	sub	sp, #36	; 0x24
 8014494:	af04      	add	r7, sp, #16
 8014496:	60f8      	str	r0, [r7, #12]
 8014498:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d102      	bne.n	80144a8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 80144a2:	68f8      	ldr	r0, [r7, #12]
 80144a4:	f000 f882 	bl	80145ac <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	1c5a      	adds	r2, r3, #1
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	f103 0508 	add.w	r5, r3, #8
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80144c6:	68bb      	ldr	r3, [r7, #8]
 80144c8:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80144ca:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	695a      	ldr	r2, [r3, #20]
 80144d0:	68bb      	ldr	r3, [r7, #8]
 80144d2:	695b      	ldr	r3, [r3, #20]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	3314      	adds	r3, #20
 80144d8:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80144da:	4610      	mov	r0, r2
 80144dc:	4798      	blx	r3
 80144de:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80144e0:	68bb      	ldr	r3, [r7, #8]
 80144e2:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80144e4:	9303      	str	r3, [sp, #12]
 80144e6:	9202      	str	r2, [sp, #8]
 80144e8:	683a      	ldr	r2, [r7, #0]
 80144ea:	9201      	str	r2, [sp, #4]
 80144ec:	9400      	str	r4, [sp, #0]
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	4632      	mov	r2, r6
 80144f2:	4915      	ldr	r1, [pc, #84]	; (8014548 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 80144f4:	4628      	mov	r0, r5
 80144f6:	f7ff fe0d 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	f103 0008 	add.w	r0, r3, #8
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	6899      	ldr	r1, [r3, #8]
 8014504:	68bb      	ldr	r3, [r7, #8]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	461a      	mov	r2, r3
 801450a:	f7ff fe53 	bl	80141b4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	695a      	ldr	r2, [r3, #20]
 8014512:	68bb      	ldr	r3, [r7, #8]
 8014514:	695b      	ldr	r3, [r3, #20]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	3314      	adds	r3, #20
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	4610      	mov	r0, r2
 801451e:	4798      	blx	r3
 8014520:	4603      	mov	r3, r0
 8014522:	490a      	ldr	r1, [pc, #40]	; (801454c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8014524:	4618      	mov	r0, r3
 8014526:	f7f6 f887 	bl	800a638 <_ZN12SimpleString6StrCmpEPKcS1_>
 801452a:	4603      	mov	r3, r0
 801452c:	2b00      	cmp	r3, #0
 801452e:	bf0c      	ite	eq
 8014530:	2301      	moveq	r3, #1
 8014532:	2300      	movne	r3, #0
 8014534:	b2db      	uxtb	r3, r3
 8014536:	2b00      	cmp	r3, #0
 8014538:	d002      	beq.n	8014540 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	2201      	movs	r2, #1
 801453e:	711a      	strb	r2, [r3, #4]
}
 8014540:	bf00      	nop
 8014542:	3714      	adds	r7, #20
 8014544:	46bd      	mov	sp, r7
 8014546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014548:	080235a0 	.word	0x080235a0
 801454c:	08023600 	.word	0x08023600

08014550 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b084      	sub	sp, #16
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d103      	bne.n	8014568 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8014560:	6878      	ldr	r0, [r7, #4]
 8014562:	f7ff ff67 	bl	8014434 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8014566:	e01e      	b.n	80145a6 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	3308      	adds	r3, #8
 801456c:	4618      	mov	r0, r3
 801456e:	f7ff fef3 	bl	8014358 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8014572:	4603      	mov	r3, r0
 8014574:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	3308      	adds	r3, #8
 801457a:	4618      	mov	r0, r3
 801457c:	f7ff fedb 	bl	8014336 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8014580:	7bfb      	ldrb	r3, [r7, #15]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d002      	beq.n	801458c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f000 f820 	bl	80145cc <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	4619      	mov	r1, r3
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	f000 f82a 	bl	80145ec <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	791b      	ldrb	r3, [r3, #4]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d002      	beq.n	80145a6 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 80145a0:	6878      	ldr	r0, [r7, #4]
 80145a2:	f000 f839 	bl	8014618 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 80145a6:	3710      	adds	r7, #16
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}

080145ac <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b082      	sub	sp, #8
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	3308      	adds	r3, #8
 80145b8:	4903      	ldr	r1, [pc, #12]	; (80145c8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 80145ba:	4618      	mov	r0, r3
 80145bc:	f7ff fdaa 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80145c0:	bf00      	nop
 80145c2:	3708      	adds	r7, #8
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd80      	pop	{r7, pc}
 80145c8:	08023608 	.word	0x08023608

080145cc <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b082      	sub	sp, #8
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	3308      	adds	r3, #8
 80145d8:	4903      	ldr	r1, [pc, #12]	; (80145e8 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 80145da:	4618      	mov	r0, r3
 80145dc:	f7ff fd9a 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80145e0:	bf00      	nop
 80145e2:	3708      	adds	r7, #8
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}
 80145e8:	08023620 	.word	0x08023620

080145ec <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b082      	sub	sp, #8
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
 80145f4:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f103 0008 	add.w	r0, r3, #8
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	4a04      	ldr	r2, [pc, #16]	; (8014610 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8014600:	4904      	ldr	r1, [pc, #16]	; (8014614 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8014602:	f7ff fd87 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014606:	bf00      	nop
 8014608:	3708      	adds	r7, #8
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}
 801460e:	bf00      	nop
 8014610:	08023668 	.word	0x08023668
 8014614:	08023680 	.word	0x08023680

08014618 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b082      	sub	sp, #8
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	3308      	adds	r3, #8
 8014624:	4903      	ldr	r1, [pc, #12]	; (8014634 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 8014626:	4618      	mov	r0, r3
 8014628:	f7ff fd74 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801462c:	bf00      	nop
 801462e:	3708      	adds	r7, #8
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}
 8014634:	08023688 	.word	0x08023688

08014638 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b08a      	sub	sp, #40	; 0x28
 801463c:	af06      	add	r7, sp, #24
 801463e:	60f8      	str	r0, [r7, #12]
 8014640:	60b9      	str	r1, [r7, #8]
 8014642:	607a      	str	r2, [r7, #4]
 8014644:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 8014646:	f7f9 fe8d 	bl	800e364 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 801464a:	4602      	mov	r2, r0
 801464c:	69bb      	ldr	r3, [r7, #24]
 801464e:	9305      	str	r3, [sp, #20]
 8014650:	683b      	ldr	r3, [r7, #0]
 8014652:	9304      	str	r3, [sp, #16]
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	9303      	str	r3, [sp, #12]
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	9302      	str	r3, [sp, #8]
 801465c:	9201      	str	r2, [sp, #4]
 801465e:	2300      	movs	r3, #0
 8014660:	9300      	str	r3, [sp, #0]
 8014662:	2300      	movs	r3, #0
 8014664:	4a04      	ldr	r2, [pc, #16]	; (8014678 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8014666:	4905      	ldr	r1, [pc, #20]	; (801467c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8014668:	68f8      	ldr	r0, [r7, #12]
 801466a:	f000 f855 	bl	8014718 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801466e:	bf00      	nop
 8014670:	3710      	adds	r7, #16
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
 8014676:	bf00      	nop
 8014678:	080234e4 	.word	0x080234e4
 801467c:	0802379c 	.word	0x0802379c

08014680 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8014680:	b590      	push	{r4, r7, lr}
 8014682:	b08b      	sub	sp, #44	; 0x2c
 8014684:	af06      	add	r7, sp, #24
 8014686:	60f8      	str	r0, [r7, #12]
 8014688:	60b9      	str	r1, [r7, #8]
 801468a:	607a      	str	r2, [r7, #4]
 801468c:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	68d8      	ldr	r0, [r3, #12]
 8014692:	68bb      	ldr	r3, [r7, #8]
 8014694:	691c      	ldr	r4, [r3, #16]
 8014696:	68bb      	ldr	r3, [r7, #8]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	68ba      	ldr	r2, [r7, #8]
 801469c:	6952      	ldr	r2, [r2, #20]
 801469e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80146a0:	9105      	str	r1, [sp, #20]
 80146a2:	6a39      	ldr	r1, [r7, #32]
 80146a4:	9104      	str	r1, [sp, #16]
 80146a6:	6839      	ldr	r1, [r7, #0]
 80146a8:	9103      	str	r1, [sp, #12]
 80146aa:	6879      	ldr	r1, [r7, #4]
 80146ac:	9102      	str	r1, [sp, #8]
 80146ae:	9201      	str	r2, [sp, #4]
 80146b0:	9300      	str	r3, [sp, #0]
 80146b2:	4623      	mov	r3, r4
 80146b4:	4602      	mov	r2, r0
 80146b6:	4904      	ldr	r1, [pc, #16]	; (80146c8 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80146b8:	68f8      	ldr	r0, [r7, #12]
 80146ba:	f000 f82d 	bl	8014718 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80146be:	bf00      	nop
 80146c0:	3714      	adds	r7, #20
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd90      	pop	{r4, r7, pc}
 80146c6:	bf00      	nop
 80146c8:	080237c0 	.word	0x080237c0

080146cc <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80146cc:	b590      	push	{r4, r7, lr}
 80146ce:	b08b      	sub	sp, #44	; 0x2c
 80146d0:	af06      	add	r7, sp, #24
 80146d2:	60f8      	str	r0, [r7, #12]
 80146d4:	60b9      	str	r1, [r7, #8]
 80146d6:	607a      	str	r2, [r7, #4]
 80146d8:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	68d8      	ldr	r0, [r3, #12]
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	691c      	ldr	r4, [r3, #16]
 80146e2:	68bb      	ldr	r3, [r7, #8]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	68ba      	ldr	r2, [r7, #8]
 80146e8:	6952      	ldr	r2, [r2, #20]
 80146ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80146ec:	9105      	str	r1, [sp, #20]
 80146ee:	6a39      	ldr	r1, [r7, #32]
 80146f0:	9104      	str	r1, [sp, #16]
 80146f2:	6839      	ldr	r1, [r7, #0]
 80146f4:	9103      	str	r1, [sp, #12]
 80146f6:	6879      	ldr	r1, [r7, #4]
 80146f8:	9102      	str	r1, [sp, #8]
 80146fa:	9201      	str	r2, [sp, #4]
 80146fc:	9300      	str	r3, [sp, #0]
 80146fe:	4623      	mov	r3, r4
 8014700:	4602      	mov	r2, r0
 8014702:	4904      	ldr	r1, [pc, #16]	; (8014714 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8014704:	68f8      	ldr	r0, [r7, #12]
 8014706:	f000 f807 	bl	8014718 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801470a:	bf00      	nop
 801470c:	3714      	adds	r7, #20
 801470e:	46bd      	mov	sp, r7
 8014710:	bd90      	pop	{r4, r7, pc}
 8014712:	bf00      	nop
 8014714:	080237e8 	.word	0x080237e8

08014718 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8014718:	b590      	push	{r4, r7, lr}
 801471a:	b087      	sub	sp, #28
 801471c:	af02      	add	r7, sp, #8
 801471e:	60f8      	str	r0, [r7, #12]
 8014720:	60b9      	str	r1, [r7, #8]
 8014722:	607a      	str	r2, [r7, #4]
 8014724:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	3308      	adds	r3, #8
 801472a:	68ba      	ldr	r2, [r7, #8]
 801472c:	4910      	ldr	r1, [pc, #64]	; (8014770 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 801472e:	4618      	mov	r0, r3
 8014730:	f7ff fcf0 	bl	8014114 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8014734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014736:	9300      	str	r3, [sp, #0]
 8014738:	6a3b      	ldr	r3, [r7, #32]
 801473a:	683a      	ldr	r2, [r7, #0]
 801473c:	6879      	ldr	r1, [r7, #4]
 801473e:	68f8      	ldr	r0, [r7, #12]
 8014740:	f7ff fe36 	bl	80143b0 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8014744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801474a:	68f8      	ldr	r0, [r7, #12]
 801474c:	f7ff fe52 	bl	80143f4 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8014750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	3308      	adds	r3, #8
 8014756:	681c      	ldr	r4, [r3, #0]
 8014758:	68f8      	ldr	r0, [r7, #12]
 801475a:	f000 f80b 	bl	8014774 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 801475e:	4603      	mov	r3, r0
 8014760:	4619      	mov	r1, r3
 8014762:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014764:	47a0      	blx	r4
}
 8014766:	bf00      	nop
 8014768:	3714      	adds	r7, #20
 801476a:	46bd      	mov	sp, r7
 801476c:	bd90      	pop	{r4, r7, pc}
 801476e:	bf00      	nop
 8014770:	08023814 	.word	0x08023814

08014774 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b082      	sub	sp, #8
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	3308      	adds	r3, #8
 8014780:	4618      	mov	r0, r3
 8014782:	f7ff fdad 	bl	80142e0 <_ZN18SimpleStringBuffer8toStringEv>
 8014786:	4603      	mov	r3, r0
}
 8014788:	4618      	mov	r0, r3
 801478a:	3708      	adds	r7, #8
 801478c:	46bd      	mov	sp, r7
 801478e:	bd80      	pop	{r7, pc}

08014790 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b082      	sub	sp, #8
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	3308      	adds	r3, #8
 801479c:	4618      	mov	r0, r3
 801479e:	f7ff fca7 	bl	80140f0 <_ZN18SimpleStringBuffer5clearEv>
}
 80147a2:	bf00      	nop
 80147a4:	3708      	adds	r7, #8
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}

080147aa <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 80147aa:	b480      	push	{r7}
 80147ac:	b085      	sub	sp, #20
 80147ae:	af00      	add	r7, sp, #0
 80147b0:	60f8      	str	r0, [r7, #12]
 80147b2:	60b9      	str	r1, [r7, #8]
 80147b4:	607a      	str	r2, [r7, #4]
 80147b6:	603b      	str	r3, [r7, #0]
    number_ = number;
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	687a      	ldr	r2, [r7, #4]
 80147bc:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	68ba      	ldr	r2, [r7, #8]
 80147c2:	609a      	str	r2, [r3, #8]
    size_ = size;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	683a      	ldr	r2, [r7, #0]
 80147c8:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	69ba      	ldr	r2, [r7, #24]
 80147ce:	615a      	str	r2, [r3, #20]
    period_ = period;
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	7f3a      	ldrb	r2, [r7, #28]
 80147d4:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80147dc:	765a      	strb	r2, [r3, #25]
    file_ = file;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147e2:	60da      	str	r2, [r3, #12]
    line_ = line;
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147e8:	611a      	str	r2, [r3, #16]
}
 80147ea:	bf00      	nop
 80147ec:	3714      	adds	r7, #20
 80147ee:	46bd      	mov	sp, r7
 80147f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f4:	4770      	bx	lr

080147f6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80147f6:	b480      	push	{r7}
 80147f8:	b085      	sub	sp, #20
 80147fa:	af00      	add	r7, sp, #0
 80147fc:	60f8      	str	r0, [r7, #12]
 80147fe:	60b9      	str	r1, [r7, #8]
 8014800:	4613      	mov	r3, r2
 8014802:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8014804:	79fb      	ldrb	r3, [r7, #7]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d00b      	beq.n	8014822 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 801480a:	68bb      	ldr	r3, [r7, #8]
 801480c:	7e1b      	ldrb	r3, [r3, #24]
 801480e:	79fa      	ldrb	r2, [r7, #7]
 8014810:	429a      	cmp	r2, r3
 8014812:	d006      	beq.n	8014822 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8014814:	68bb      	ldr	r3, [r7, #8]
 8014816:	7e1b      	ldrb	r3, [r3, #24]
 8014818:	2b01      	cmp	r3, #1
 801481a:	d004      	beq.n	8014826 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 801481c:	79fb      	ldrb	r3, [r7, #7]
 801481e:	2b02      	cmp	r3, #2
 8014820:	d101      	bne.n	8014826 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8014822:	2301      	movs	r3, #1
 8014824:	e000      	b.n	8014828 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8014826:	2300      	movs	r3, #0
}
 8014828:	4618      	mov	r0, r3
 801482a:	3714      	adds	r7, #20
 801482c:	46bd      	mov	sp, r7
 801482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014832:	4770      	bx	lr

08014834 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8014834:	b480      	push	{r7}
 8014836:	b083      	sub	sp, #12
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
 801483c:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	681a      	ldr	r2, [r3, #0]
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	61da      	str	r2, [r3, #28]
    head_ = node;
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	683a      	ldr	r2, [r7, #0]
 801484a:	601a      	str	r2, [r3, #0]
}
 801484c:	bf00      	nop
 801484e:	370c      	adds	r7, #12
 8014850:	46bd      	mov	sp, r7
 8014852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014856:	4770      	bx	lr

08014858 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8014858:	b480      	push	{r7}
 801485a:	b085      	sub	sp, #20
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8014868:	2300      	movs	r3, #0
 801486a:	60bb      	str	r3, [r7, #8]
    while (cur) {
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d019      	beq.n	80148a6 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	689b      	ldr	r3, [r3, #8]
 8014876:	683a      	ldr	r2, [r7, #0]
 8014878:	429a      	cmp	r2, r3
 801487a:	d10e      	bne.n	801489a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d005      	beq.n	801488e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	69da      	ldr	r2, [r3, #28]
 8014886:	68bb      	ldr	r3, [r7, #8]
 8014888:	61da      	str	r2, [r3, #28]
                return cur;
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	e00c      	b.n	80148a8 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	69da      	ldr	r2, [r3, #28]
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	601a      	str	r2, [r3, #0]
                return cur;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	e006      	b.n	80148a8 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	69db      	ldr	r3, [r3, #28]
 80148a2:	60fb      	str	r3, [r7, #12]
    while (cur) {
 80148a4:	e7e2      	b.n	801486c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 80148a6:	2300      	movs	r3, #0
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	3714      	adds	r7, #20
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr

080148b4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 80148b4:	b480      	push	{r7}
 80148b6:	b085      	sub	sp, #20
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d00a      	beq.n	80148e0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	689b      	ldr	r3, [r3, #8]
 80148ce:	683a      	ldr	r2, [r7, #0]
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d101      	bne.n	80148d8 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	e004      	b.n	80148e2 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	69db      	ldr	r3, [r3, #28]
 80148dc:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80148de:	e7f1      	b.n	80148c4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 80148e0:	2300      	movs	r3, #0
}
 80148e2:	4618      	mov	r0, r3
 80148e4:	3714      	adds	r7, #20
 80148e6:	46bd      	mov	sp, r7
 80148e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ec:	4770      	bx	lr

080148ee <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80148ee:	b580      	push	{r7, lr}
 80148f0:	b086      	sub	sp, #24
 80148f2:	af00      	add	r7, sp, #0
 80148f4:	60f8      	str	r0, [r7, #12]
 80148f6:	60b9      	str	r1, [r7, #8]
 80148f8:	4613      	mov	r3, r2
 80148fa:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	617b      	str	r3, [r7, #20]
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d00e      	beq.n	8014924 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 8014906:	79fb      	ldrb	r3, [r7, #7]
 8014908:	461a      	mov	r2, r3
 801490a:	6979      	ldr	r1, [r7, #20]
 801490c:	68f8      	ldr	r0, [r7, #12]
 801490e:	f7ff ff72 	bl	80147f6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014912:	4603      	mov	r3, r0
 8014914:	2b00      	cmp	r3, #0
 8014916:	d001      	beq.n	801491c <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8014918:	697b      	ldr	r3, [r7, #20]
 801491a:	e004      	b.n	8014926 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 801491c:	697b      	ldr	r3, [r7, #20]
 801491e:	69db      	ldr	r3, [r3, #28]
 8014920:	617b      	str	r3, [r7, #20]
 8014922:	e7ed      	b.n	8014900 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8014924:	2300      	movs	r3, #0
}
 8014926:	4618      	mov	r0, r3
 8014928:	3718      	adds	r7, #24
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}

0801492e <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 801492e:	b580      	push	{r7, lr}
 8014930:	b082      	sub	sp, #8
 8014932:	af00      	add	r7, sp, #0
 8014934:	6078      	str	r0, [r7, #4]
 8014936:	460b      	mov	r3, r1
 8014938:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	78fa      	ldrb	r2, [r7, #3]
 8014940:	4619      	mov	r1, r3
 8014942:	6878      	ldr	r0, [r7, #4]
 8014944:	f7ff ffd3 	bl	80148ee <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014948:	4603      	mov	r3, r0
}
 801494a:	4618      	mov	r0, r3
 801494c:	3708      	adds	r7, #8
 801494e:	46bd      	mov	sp, r7
 8014950:	bd80      	pop	{r7, pc}

08014952 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8014952:	b580      	push	{r7, lr}
 8014954:	b084      	sub	sp, #16
 8014956:	af00      	add	r7, sp, #0
 8014958:	60f8      	str	r0, [r7, #12]
 801495a:	60b9      	str	r1, [r7, #8]
 801495c:	4613      	mov	r3, r2
 801495e:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	69db      	ldr	r3, [r3, #28]
 8014964:	79fa      	ldrb	r2, [r7, #7]
 8014966:	4619      	mov	r1, r3
 8014968:	68f8      	ldr	r0, [r7, #12]
 801496a:	f7ff ffc0 	bl	80148ee <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801496e:	4603      	mov	r3, r0
}
 8014970:	4618      	mov	r0, r3
 8014972:	3710      	adds	r7, #16
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}

08014978 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b084      	sub	sp, #16
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
 8014980:	460b      	mov	r3, r1
 8014982:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8014984:	2300      	movs	r3, #0
 8014986:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	60bb      	str	r3, [r7, #8]
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d00f      	beq.n	80149b4 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8014994:	78fb      	ldrb	r3, [r7, #3]
 8014996:	461a      	mov	r2, r3
 8014998:	68b9      	ldr	r1, [r7, #8]
 801499a:	6878      	ldr	r0, [r7, #4]
 801499c:	f7ff ff2b 	bl	80147f6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80149a0:	4603      	mov	r3, r0
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d002      	beq.n	80149ac <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	3301      	adds	r3, #1
 80149aa:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 80149ac:	68bb      	ldr	r3, [r7, #8]
 80149ae:	69db      	ldr	r3, [r3, #28]
 80149b0:	60bb      	str	r3, [r7, #8]
 80149b2:	e7ec      	b.n	801498e <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 80149b4:	68fb      	ldr	r3, [r7, #12]
}
 80149b6:	4618      	mov	r0, r3
 80149b8:	3710      	adds	r7, #16
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}
	...

080149c0 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 80149c0:	b480      	push	{r7}
 80149c2:	b083      	sub	sp, #12
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	6078      	str	r0, [r7, #4]
 80149c8:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 80149ca:	6839      	ldr	r1, [r7, #0]
 80149cc:	4b09      	ldr	r3, [pc, #36]	; (80149f4 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 80149ce:	fba3 2301 	umull	r2, r3, r3, r1
 80149d2:	1aca      	subs	r2, r1, r3
 80149d4:	0852      	lsrs	r2, r2, #1
 80149d6:	4413      	add	r3, r2
 80149d8:	099a      	lsrs	r2, r3, #6
 80149da:	4613      	mov	r3, r2
 80149dc:	00db      	lsls	r3, r3, #3
 80149de:	4413      	add	r3, r2
 80149e0:	00db      	lsls	r3, r3, #3
 80149e2:	4413      	add	r3, r2
 80149e4:	1aca      	subs	r2, r1, r3
 80149e6:	4613      	mov	r3, r2
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	370c      	adds	r7, #12
 80149ec:	46bd      	mov	sp, r7
 80149ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f2:	4770      	bx	lr
 80149f4:	c0e07039 	.word	0xc0e07039

080149f8 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
 8014a00:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8014a02:	683b      	ldr	r3, [r7, #0]
 8014a04:	689b      	ldr	r3, [r3, #8]
 8014a06:	4619      	mov	r1, r3
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f7ff ffd9 	bl	80149c0 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	009b      	lsls	r3, r3, #2
 8014a12:	687a      	ldr	r2, [r7, #4]
 8014a14:	4413      	add	r3, r2
 8014a16:	6839      	ldr	r1, [r7, #0]
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f7ff ff0b 	bl	8014834 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8014a1e:	bf00      	nop
 8014a20:	3708      	adds	r7, #8
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}

08014a26 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8014a26:	b580      	push	{r7, lr}
 8014a28:	b082      	sub	sp, #8
 8014a2a:	af00      	add	r7, sp, #0
 8014a2c:	6078      	str	r0, [r7, #4]
 8014a2e:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8014a30:	6839      	ldr	r1, [r7, #0]
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f7ff ffc4 	bl	80149c0 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	009b      	lsls	r3, r3, #2
 8014a3c:	687a      	ldr	r2, [r7, #4]
 8014a3e:	4413      	add	r3, r2
 8014a40:	6839      	ldr	r1, [r7, #0]
 8014a42:	4618      	mov	r0, r3
 8014a44:	f7ff ff08 	bl	8014858 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8014a48:	4603      	mov	r3, r0
}
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	3708      	adds	r7, #8
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	bd80      	pop	{r7, pc}

08014a52 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8014a52:	b580      	push	{r7, lr}
 8014a54:	b082      	sub	sp, #8
 8014a56:	af00      	add	r7, sp, #0
 8014a58:	6078      	str	r0, [r7, #4]
 8014a5a:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8014a5c:	6839      	ldr	r1, [r7, #0]
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f7ff ffae 	bl	80149c0 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014a64:	4603      	mov	r3, r0
 8014a66:	009b      	lsls	r3, r3, #2
 8014a68:	687a      	ldr	r2, [r7, #4]
 8014a6a:	4413      	add	r3, r2
 8014a6c:	6839      	ldr	r1, [r7, #0]
 8014a6e:	4618      	mov	r0, r3
 8014a70:	f7ff ff20 	bl	80148b4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8014a74:	4603      	mov	r3, r0
}
 8014a76:	4618      	mov	r0, r3
 8014a78:	3708      	adds	r7, #8
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}

08014a7e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8014a7e:	b580      	push	{r7, lr}
 8014a80:	b084      	sub	sp, #16
 8014a82:	af00      	add	r7, sp, #0
 8014a84:	6078      	str	r0, [r7, #4]
 8014a86:	460b      	mov	r3, r1
 8014a88:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8014a8e:	2300      	movs	r3, #0
 8014a90:	60bb      	str	r3, [r7, #8]
 8014a92:	68bb      	ldr	r3, [r7, #8]
 8014a94:	2b48      	cmp	r3, #72	; 0x48
 8014a96:	dc10      	bgt.n	8014aba <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8014a98:	68bb      	ldr	r3, [r7, #8]
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	687a      	ldr	r2, [r7, #4]
 8014a9e:	4413      	add	r3, r2
 8014aa0:	78fa      	ldrb	r2, [r7, #3]
 8014aa2:	4611      	mov	r1, r2
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f7ff ff67 	bl	8014978 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8014aaa:	4602      	mov	r2, r0
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	4413      	add	r3, r2
 8014ab0:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8014ab2:	68bb      	ldr	r3, [r7, #8]
 8014ab4:	3301      	adds	r3, #1
 8014ab6:	60bb      	str	r3, [r7, #8]
 8014ab8:	e7eb      	b.n	8014a92 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8014aba:	68fb      	ldr	r3, [r7, #12]
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	3710      	adds	r7, #16
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}

08014ac4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b084      	sub	sp, #16
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	460b      	mov	r3, r1
 8014ace:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	60fb      	str	r3, [r7, #12]
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	2b48      	cmp	r3, #72	; 0x48
 8014ad8:	dc12      	bgt.n	8014b00 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	009b      	lsls	r3, r3, #2
 8014ade:	687a      	ldr	r2, [r7, #4]
 8014ae0:	4413      	add	r3, r2
 8014ae2:	78fa      	ldrb	r2, [r7, #3]
 8014ae4:	4611      	mov	r1, r2
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7ff ff21 	bl	801492e <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8014aec:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 8014aee:	68bb      	ldr	r3, [r7, #8]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d001      	beq.n	8014af8 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8014af4:	68bb      	ldr	r3, [r7, #8]
 8014af6:	e004      	b.n	8014b02 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	3301      	adds	r3, #1
 8014afc:	60fb      	str	r3, [r7, #12]
 8014afe:	e7e9      	b.n	8014ad4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8014b00:	2300      	movs	r3, #0
}
 8014b02:	4618      	mov	r0, r3
 8014b04:	3710      	adds	r7, #16
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}

08014b0a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8014b0a:	b580      	push	{r7, lr}
 8014b0c:	b086      	sub	sp, #24
 8014b0e:	af00      	add	r7, sp, #0
 8014b10:	60f8      	str	r0, [r7, #12]
 8014b12:	60b9      	str	r1, [r7, #8]
 8014b14:	4613      	mov	r3, r2
 8014b16:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	689b      	ldr	r3, [r3, #8]
 8014b1c:	4619      	mov	r1, r3
 8014b1e:	68f8      	ldr	r0, [r7, #12]
 8014b20:	f7ff ff4e 	bl	80149c0 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014b24:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8014b26:	697b      	ldr	r3, [r7, #20]
 8014b28:	009b      	lsls	r3, r3, #2
 8014b2a:	68fa      	ldr	r2, [r7, #12]
 8014b2c:	4413      	add	r3, r2
 8014b2e:	79fa      	ldrb	r2, [r7, #7]
 8014b30:	68b9      	ldr	r1, [r7, #8]
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7ff ff0d 	bl	8014952 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014b38:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8014b3a:	693b      	ldr	r3, [r7, #16]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d001      	beq.n	8014b44 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8014b40:	693b      	ldr	r3, [r7, #16]
 8014b42:	e019      	b.n	8014b78 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8014b44:	697b      	ldr	r3, [r7, #20]
 8014b46:	3301      	adds	r3, #1
 8014b48:	617b      	str	r3, [r7, #20]
 8014b4a:	697b      	ldr	r3, [r7, #20]
 8014b4c:	2b48      	cmp	r3, #72	; 0x48
 8014b4e:	d812      	bhi.n	8014b76 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8014b50:	697b      	ldr	r3, [r7, #20]
 8014b52:	009b      	lsls	r3, r3, #2
 8014b54:	68fa      	ldr	r2, [r7, #12]
 8014b56:	4413      	add	r3, r2
 8014b58:	79fa      	ldrb	r2, [r7, #7]
 8014b5a:	4611      	mov	r1, r2
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f7ff fee6 	bl	801492e <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8014b62:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8014b64:	693b      	ldr	r3, [r7, #16]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d001      	beq.n	8014b6e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8014b6a:	693b      	ldr	r3, [r7, #16]
 8014b6c:	e004      	b.n	8014b78 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8014b6e:	697b      	ldr	r3, [r7, #20]
 8014b70:	3301      	adds	r3, #1
 8014b72:	617b      	str	r3, [r7, #20]
 8014b74:	e7e9      	b.n	8014b4a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8014b76:	2300      	movs	r3, #0
}
 8014b78:	4618      	mov	r0, r3
 8014b7a:	3718      	adds	r7, #24
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}

08014b80 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8014b80:	b5b0      	push	{r4, r5, r7, lr}
 8014b82:	b082      	sub	sp, #8
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	2448      	movs	r4, #72	; 0x48
 8014b8c:	461d      	mov	r5, r3
 8014b8e:	2c00      	cmp	r4, #0
 8014b90:	db05      	blt.n	8014b9e <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8014b92:	4628      	mov	r0, r5
 8014b94:	f7ff fa84 	bl	80140a0 <_ZN22MemoryLeakDetectorListC1Ev>
 8014b98:	3504      	adds	r5, #4
 8014b9a:	3c01      	subs	r4, #1
 8014b9c:	e7f7      	b.n	8014b8e <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	3708      	adds	r7, #8
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bdb0      	pop	{r4, r5, r7, pc}

08014ba8 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8014ba8:	b590      	push	{r4, r7, lr}
 8014baa:	b083      	sub	sp, #12
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
 8014bb0:	6039      	str	r1, [r7, #0]
 8014bb2:	4a1d      	ldr	r2, [pc, #116]	; (8014c28 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	601a      	str	r2, [r3, #0]
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	330c      	adds	r3, #12
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f7ff fbe3 	bl	8014388 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014bc8:	331c      	adds	r3, #28
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7ff ffd8 	bl	8014b80 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014bd6:	2201      	movs	r2, #1
 8014bd8:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014be0:	3304      	adds	r3, #4
 8014be2:	2201      	movs	r2, #1
 8014be4:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	2201      	movs	r2, #1
 8014bea:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014bf2:	3308      	adds	r3, #8
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	683a      	ldr	r2, [r7, #0]
 8014bfc:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 8014bfe:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8014c02:	490a      	ldr	r1, [pc, #40]	; (8014c2c <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8014c04:	2004      	movs	r0, #4
 8014c06:	f7f3 fb17 	bl	8008238 <_ZnwjPKci>
 8014c0a:	4604      	mov	r4, r0
 8014c0c:	4620      	mov	r0, r4
 8014c0e:	f7f5 fbe7 	bl	800a3e0 <_ZN11SimpleMutexC1Ev>
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014c18:	330c      	adds	r3, #12
 8014c1a:	601c      	str	r4, [r3, #0]
}
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	4618      	mov	r0, r3
 8014c20:	370c      	adds	r7, #12
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd90      	pop	{r4, r7, pc}
 8014c26:	bf00      	nop
 8014c28:	08025b84 	.word	0x08025b84
 8014c2c:	08023818 	.word	0x08023818

08014c30 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8014c30:	b590      	push	{r4, r7, lr}
 8014c32:	b083      	sub	sp, #12
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
 8014c38:	4a0e      	ldr	r2, [pc, #56]	; (8014c74 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014c44:	330c      	adds	r3, #12
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d00d      	beq.n	8014c68 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014c52:	330c      	adds	r3, #12
 8014c54:	681c      	ldr	r4, [r3, #0]
 8014c56:	2c00      	cmp	r4, #0
 8014c58:	d006      	beq.n	8014c68 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8014c5a:	4620      	mov	r0, r4
 8014c5c:	f7f5 fbd2 	bl	800a404 <_ZN11SimpleMutexD1Ev>
 8014c60:	2104      	movs	r1, #4
 8014c62:	4620      	mov	r0, r4
 8014c64:	f7f3 fafc 	bl	8008260 <_ZdlPvj>
    }
}
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	370c      	adds	r7, #12
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd90      	pop	{r4, r7, pc}
 8014c72:	bf00      	nop
 8014c74:	08025b84 	.word	0x08025b84

08014c78 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b082      	sub	sp, #8
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
}
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f7ff ffd5 	bl	8014c30 <_ZN18MemoryLeakDetectorD1Ev>
 8014c86:	f241 1150 	movw	r1, #4432	; 0x1150
 8014c8a:	6878      	ldr	r0, [r7, #4]
 8014c8c:	f7f3 fae8 	bl	8008260 <_ZdlPvj>
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	4618      	mov	r0, r3
 8014c94:	3708      	adds	r7, #8
 8014c96:	46bd      	mov	sp, r7
 8014c98:	bd80      	pop	{r7, pc}

08014c9a <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8014c9a:	b580      	push	{r7, lr}
 8014c9c:	b082      	sub	sp, #8
 8014c9e:	af00      	add	r7, sp, #0
 8014ca0:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	330c      	adds	r3, #12
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f7ff fd72 	bl	8014790 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	2203      	movs	r2, #3
 8014cb0:	721a      	strb	r2, [r3, #8]
}
 8014cb2:	bf00      	nop
 8014cb4:	3708      	adds	r7, #8
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}

08014cba <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8014cba:	b480      	push	{r7}
 8014cbc:	b083      	sub	sp, #12
 8014cbe:	af00      	add	r7, sp, #0
 8014cc0:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	2202      	movs	r2, #2
 8014cc6:	721a      	strb	r2, [r3, #8]
}
 8014cc8:	bf00      	nop
 8014cca:	370c      	adds	r7, #12
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd2:	4770      	bx	lr

08014cd4 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8014cd4:	b480      	push	{r7}
 8014cd6:	b083      	sub	sp, #12
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	2202      	movs	r2, #2
 8014ce0:	721a      	strb	r2, [r3, #8]
}
 8014ce2:	bf00      	nop
 8014ce4:	370c      	adds	r7, #12
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cec:	4770      	bx	lr

08014cee <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 8014cee:	b480      	push	{r7}
 8014cf0:	b083      	sub	sp, #12
 8014cf2:	af00      	add	r7, sp, #0
 8014cf4:	6078      	str	r0, [r7, #4]
    return mutex_;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014cfc:	330c      	adds	r3, #12
 8014cfe:	681b      	ldr	r3, [r3, #0]
}
 8014d00:	4618      	mov	r0, r3
 8014d02:	370c      	adds	r7, #12
 8014d04:	46bd      	mov	sp, r7
 8014d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0a:	4770      	bx	lr

08014d0c <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8014d0c:	b480      	push	{r7}
 8014d0e:	b083      	sub	sp, #12
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	f023 0303 	bic.w	r3, r3, #3
 8014d1a:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	370c      	adds	r7, #12
 8014d20:	46bd      	mov	sp, r7
 8014d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d26:	4770      	bx	lr

08014d28 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b082      	sub	sp, #8
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
 8014d30:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 8014d32:	683b      	ldr	r3, [r7, #0]
 8014d34:	3303      	adds	r3, #3
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7ff ffe8 	bl	8014d0c <_ZL31calculateVoidPointerAlignedSizej>
 8014d3c:	4603      	mov	r3, r0
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3708      	adds	r7, #8
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}

08014d46 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8014d46:	b580      	push	{r7, lr}
 8014d48:	b084      	sub	sp, #16
 8014d4a:	af00      	add	r7, sp, #0
 8014d4c:	60f8      	str	r0, [r7, #12]
 8014d4e:	60b9      	str	r1, [r7, #8]
 8014d50:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8014d52:	6879      	ldr	r1, [r7, #4]
 8014d54:	68f8      	ldr	r0, [r7, #12]
 8014d56:	f7ff ffe7 	bl	8014d28 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8014d5a:	4602      	mov	r2, r0
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	4413      	add	r3, r2
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	3710      	adds	r7, #16
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}

08014d68 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b08a      	sub	sp, #40	; 0x28
 8014d6c:	af06      	add	r7, sp, #24
 8014d6e:	60f8      	str	r0, [r7, #12]
 8014d70:	60b9      	str	r1, [r7, #8]
 8014d72:	607a      	str	r2, [r7, #4]
 8014d74:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014d7c:	3304      	adds	r3, #4
 8014d7e:	681a      	ldr	r2, [r3, #0]
 8014d80:	1c51      	adds	r1, r2, #1
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014d88:	3304      	adds	r3, #4
 8014d8a:	6019      	str	r1, [r3, #0]
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	7a19      	ldrb	r1, [r3, #8]
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014d96:	3308      	adds	r3, #8
 8014d98:	781b      	ldrb	r3, [r3, #0]
 8014d9a:	6a38      	ldr	r0, [r7, #32]
 8014d9c:	9004      	str	r0, [sp, #16]
 8014d9e:	69f8      	ldr	r0, [r7, #28]
 8014da0:	9003      	str	r0, [sp, #12]
 8014da2:	9302      	str	r3, [sp, #8]
 8014da4:	9101      	str	r1, [sp, #4]
 8014da6:	69bb      	ldr	r3, [r7, #24]
 8014da8:	9300      	str	r3, [sp, #0]
 8014daa:	683b      	ldr	r3, [r7, #0]
 8014dac:	6879      	ldr	r1, [r7, #4]
 8014dae:	68b8      	ldr	r0, [r7, #8]
 8014db0:	f7ff fcfb 	bl	80147aa <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8014db4:	68bb      	ldr	r3, [r7, #8]
 8014db6:	689a      	ldr	r2, [r3, #8]
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	4413      	add	r3, r2
 8014dbe:	4619      	mov	r1, r3
 8014dc0:	68f8      	ldr	r0, [r7, #12]
 8014dc2:	f000 f861 	bl	8014e88 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014dcc:	331c      	adds	r3, #28
 8014dce:	68b9      	ldr	r1, [r7, #8]
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f7ff fe11 	bl	80149f8 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8014dd6:	bf00      	nop
 8014dd8:	3710      	adds	r7, #16
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}

08014dde <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8014dde:	b580      	push	{r7, lr}
 8014de0:	b08a      	sub	sp, #40	; 0x28
 8014de2:	af04      	add	r7, sp, #16
 8014de4:	60f8      	str	r0, [r7, #12]
 8014de6:	60b9      	str	r1, [r7, #8]
 8014de8:	607a      	str	r2, [r7, #4]
 8014dea:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8014dec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014df0:	9302      	str	r3, [sp, #8]
 8014df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014df4:	9301      	str	r3, [sp, #4]
 8014df6:	6a3b      	ldr	r3, [r7, #32]
 8014df8:	9300      	str	r3, [sp, #0]
 8014dfa:	683b      	ldr	r3, [r7, #0]
 8014dfc:	687a      	ldr	r2, [r7, #4]
 8014dfe:	68b9      	ldr	r1, [r7, #8]
 8014e00:	68f8      	ldr	r0, [r7, #12]
 8014e02:	f000 f96f 	bl	80150e4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8014e06:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d101      	bne.n	8014e12 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 8014e0e:	2300      	movs	r3, #0
 8014e10:	e017      	b.n	8014e42 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 8014e12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014e16:	9300      	str	r3, [sp, #0]
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	683a      	ldr	r2, [r7, #0]
 8014e1c:	68b9      	ldr	r1, [r7, #8]
 8014e1e:	68f8      	ldr	r0, [r7, #12]
 8014e20:	f000 f98a 	bl	8015138 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8014e24:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8014e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e28:	9302      	str	r3, [sp, #8]
 8014e2a:	6a3b      	ldr	r3, [r7, #32]
 8014e2c:	9301      	str	r3, [sp, #4]
 8014e2e:	68bb      	ldr	r3, [r7, #8]
 8014e30:	9300      	str	r3, [sp, #0]
 8014e32:	683b      	ldr	r3, [r7, #0]
 8014e34:	697a      	ldr	r2, [r7, #20]
 8014e36:	6939      	ldr	r1, [r7, #16]
 8014e38:	68f8      	ldr	r0, [r7, #12]
 8014e3a:	f7ff ff95 	bl	8014d68 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8014e3e:	693b      	ldr	r3, [r7, #16]
 8014e40:	689b      	ldr	r3, [r3, #8]
}
 8014e42:	4618      	mov	r0, r3
 8014e44:	3718      	adds	r7, #24
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}
	...

08014e4c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b084      	sub	sp, #16
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
 8014e54:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014e5c:	331c      	adds	r3, #28
 8014e5e:	6839      	ldr	r1, [r7, #0]
 8014e60:	4618      	mov	r0, r3
 8014e62:	f7ff fdf6 	bl	8014a52 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8014e66:	60f8      	str	r0, [r7, #12]
  if (node)
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d006      	beq.n	8014e7c <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 8014e6e:	4b05      	ldr	r3, [pc, #20]	; (8014e84 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	68fa      	ldr	r2, [r7, #12]
 8014e74:	6812      	ldr	r2, [r2, #0]
 8014e76:	21cd      	movs	r1, #205	; 0xcd
 8014e78:	6838      	ldr	r0, [r7, #0]
 8014e7a:	4798      	blx	r3
#endif
}
 8014e7c:	bf00      	nop
 8014e7e:	3710      	adds	r7, #16
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	200000d4 	.word	0x200000d4

08014e88 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8014e88:	b480      	push	{r7}
 8014e8a:	b085      	sub	sp, #20
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
 8014e90:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8014e92:	2300      	movs	r3, #0
 8014e94:	60fb      	str	r3, [r7, #12]
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	2b02      	cmp	r3, #2
 8014e9a:	d812      	bhi.n	8014ec2 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8014e9c:	68f9      	ldr	r1, [r7, #12]
 8014e9e:	4b0c      	ldr	r3, [pc, #48]	; (8014ed0 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8014ea0:	fba3 2301 	umull	r2, r3, r3, r1
 8014ea4:	085a      	lsrs	r2, r3, #1
 8014ea6:	4613      	mov	r3, r2
 8014ea8:	005b      	lsls	r3, r3, #1
 8014eaa:	4413      	add	r3, r2
 8014eac:	1aca      	subs	r2, r1, r3
 8014eae:	6839      	ldr	r1, [r7, #0]
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	440b      	add	r3, r1
 8014eb4:	4907      	ldr	r1, [pc, #28]	; (8014ed4 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8014eb6:	5c8a      	ldrb	r2, [r1, r2]
 8014eb8:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	3301      	adds	r3, #1
 8014ebe:	60fb      	str	r3, [r7, #12]
 8014ec0:	e7e9      	b.n	8014e96 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8014ec2:	bf00      	nop
 8014ec4:	3714      	adds	r7, #20
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ecc:	4770      	bx	lr
 8014ece:	bf00      	nop
 8014ed0:	aaaaaaab 	.word	0xaaaaaaab
 8014ed4:	08025b78 	.word	0x08025b78

08014ed8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8014ed8:	b480      	push	{r7}
 8014eda:	b085      	sub	sp, #20
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
 8014ee0:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	60fb      	str	r3, [r7, #12]
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	2b02      	cmp	r3, #2
 8014eea:	d816      	bhi.n	8014f1a <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8014eec:	683a      	ldr	r2, [r7, #0]
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	7818      	ldrb	r0, [r3, #0]
 8014ef4:	68f9      	ldr	r1, [r7, #12]
 8014ef6:	4b0c      	ldr	r3, [pc, #48]	; (8014f28 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8014ef8:	fba3 2301 	umull	r2, r3, r3, r1
 8014efc:	085a      	lsrs	r2, r3, #1
 8014efe:	4613      	mov	r3, r2
 8014f00:	005b      	lsls	r3, r3, #1
 8014f02:	4413      	add	r3, r2
 8014f04:	1aca      	subs	r2, r1, r3
 8014f06:	4b09      	ldr	r3, [pc, #36]	; (8014f2c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8014f08:	5c9b      	ldrb	r3, [r3, r2]
 8014f0a:	4298      	cmp	r0, r3
 8014f0c:	d001      	beq.n	8014f12 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	e004      	b.n	8014f1c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	3301      	adds	r3, #1
 8014f16:	60fb      	str	r3, [r7, #12]
 8014f18:	e7e5      	b.n	8014ee6 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8014f1a:	2301      	movs	r3, #1
}
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	3714      	adds	r7, #20
 8014f20:	46bd      	mov	sp, r7
 8014f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f26:	4770      	bx	lr
 8014f28:	aaaaaaab 	.word	0xaaaaaaab
 8014f2c:	08025b78 	.word	0x08025b78

08014f30 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b084      	sub	sp, #16
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	60f8      	str	r0, [r7, #12]
 8014f38:	60b9      	str	r1, [r7, #8]
 8014f3a:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8014f3c:	68ba      	ldr	r2, [r7, #8]
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	429a      	cmp	r2, r3
 8014f42:	d101      	bne.n	8014f48 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8014f44:	2301      	movs	r3, #1
 8014f46:	e013      	b.n	8014f70 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014f4e:	781b      	ldrb	r3, [r3, #0]
 8014f50:	f083 0301 	eor.w	r3, r3, #1
 8014f54:	b2db      	uxtb	r3, r3
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d001      	beq.n	8014f5e <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	e008      	b.n	8014f70 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	331c      	adds	r3, #28
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	68b9      	ldr	r1, [r7, #8]
 8014f68:	6878      	ldr	r0, [r7, #4]
 8014f6a:	4798      	blx	r3
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	bf00      	nop
}
 8014f70:	4618      	mov	r0, r3
 8014f72:	3710      	adds	r7, #16
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}

08014f78 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8014f78:	b590      	push	{r4, r7, lr}
 8014f7a:	b087      	sub	sp, #28
 8014f7c:	af02      	add	r7, sp, #8
 8014f7e:	60f8      	str	r0, [r7, #12]
 8014f80:	60b9      	str	r1, [r7, #8]
 8014f82:	607a      	str	r2, [r7, #4]
 8014f84:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	695a      	ldr	r2, [r3, #20]
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	695b      	ldr	r3, [r3, #20]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	3328      	adds	r3, #40	; 0x28
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	4610      	mov	r0, r2
 8014f96:	4798      	blx	r3
 8014f98:	4604      	mov	r4, r0
 8014f9a:	6a3b      	ldr	r3, [r7, #32]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	3328      	adds	r3, #40	; 0x28
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	6a38      	ldr	r0, [r7, #32]
 8014fa4:	4798      	blx	r3
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	461a      	mov	r2, r3
 8014faa:	4621      	mov	r1, r4
 8014fac:	68f8      	ldr	r0, [r7, #12]
 8014fae:	f7ff ffbf 	bl	8014f30 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	f083 0301 	eor.w	r3, r3, #1
 8014fb8:	b2db      	uxtb	r3, r3
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d014      	beq.n	8014fe8 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	f103 040c 	add.w	r4, r3, #12
 8014fc4:	6a3b      	ldr	r3, [r7, #32]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	3328      	adds	r3, #40	; 0x28
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	6a38      	ldr	r0, [r7, #32]
 8014fce:	4798      	blx	r3
 8014fd0:	4602      	mov	r2, r0
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	685b      	ldr	r3, [r3, #4]
 8014fd6:	9301      	str	r3, [sp, #4]
 8014fd8:	9200      	str	r2, [sp, #0]
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	687a      	ldr	r2, [r7, #4]
 8014fde:	68b9      	ldr	r1, [r7, #8]
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	f7ff fb4d 	bl	8014680 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8014fe6:	e02e      	b.n	8015046 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8014fe8:	68bb      	ldr	r3, [r7, #8]
 8014fea:	689a      	ldr	r2, [r3, #8]
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	4413      	add	r3, r2
 8014ff2:	4619      	mov	r1, r3
 8014ff4:	68f8      	ldr	r0, [r7, #12]
 8014ff6:	f7ff ff6f 	bl	8014ed8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	f083 0301 	eor.w	r3, r3, #1
 8015000:	b2db      	uxtb	r3, r3
 8015002:	2b00      	cmp	r3, #0
 8015004:	d014      	beq.n	8015030 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	f103 040c 	add.w	r4, r3, #12
 801500c:	6a3b      	ldr	r3, [r7, #32]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	3328      	adds	r3, #40	; 0x28
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	6a38      	ldr	r0, [r7, #32]
 8015016:	4798      	blx	r3
 8015018:	4602      	mov	r2, r0
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	685b      	ldr	r3, [r3, #4]
 801501e:	9301      	str	r3, [sp, #4]
 8015020:	9200      	str	r2, [sp, #0]
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	687a      	ldr	r2, [r7, #4]
 8015026:	68b9      	ldr	r1, [r7, #8]
 8015028:	4620      	mov	r0, r4
 801502a:	f7ff fb4f 	bl	80146cc <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 801502e:	e00a      	b.n	8015046 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8015030:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015034:	2b00      	cmp	r3, #0
 8015036:	d006      	beq.n	8015046 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8015038:	6a3b      	ldr	r3, [r7, #32]
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	3324      	adds	r3, #36	; 0x24
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	68b9      	ldr	r1, [r7, #8]
 8015042:	6a38      	ldr	r0, [r7, #32]
 8015044:	4798      	blx	r3
}
 8015046:	bf00      	nop
 8015048:	3714      	adds	r7, #20
 801504a:	46bd      	mov	sp, r7
 801504c:	bd90      	pop	{r4, r7, pc}
	...

08015050 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b086      	sub	sp, #24
 8015054:	af02      	add	r7, sp, #8
 8015056:	60f8      	str	r0, [r7, #12]
 8015058:	60b9      	str	r1, [r7, #8]
 801505a:	607a      	str	r2, [r7, #4]
 801505c:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 801505e:	4b08      	ldr	r3, [pc, #32]	; (8015080 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8015060:	681a      	ldr	r2, [r3, #0]
 8015062:	78fb      	ldrb	r3, [r7, #3]
 8015064:	9301      	str	r3, [sp, #4]
 8015066:	2300      	movs	r3, #0
 8015068:	9300      	str	r3, [sp, #0]
 801506a:	4613      	mov	r3, r2
 801506c:	687a      	ldr	r2, [r7, #4]
 801506e:	68b9      	ldr	r1, [r7, #8]
 8015070:	68f8      	ldr	r0, [r7, #12]
 8015072:	f000 f87f 	bl	8015174 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8015076:	4603      	mov	r3, r0
}
 8015078:	4618      	mov	r0, r3
 801507a:	3710      	adds	r7, #16
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}
 8015080:	200000fc 	.word	0x200000fc

08015084 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015084:	b590      	push	{r4, r7, lr}
 8015086:	b085      	sub	sp, #20
 8015088:	af00      	add	r7, sp, #0
 801508a:	60f8      	str	r0, [r7, #12]
 801508c:	60b9      	str	r1, [r7, #8]
 801508e:	607a      	str	r2, [r7, #4]
 8015090:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8015092:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015096:	2b00      	cmp	r3, #0
 8015098:	d00e      	beq.n	80150b8 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 801509a:	68bb      	ldr	r3, [r7, #8]
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	3308      	adds	r3, #8
 80150a0:	681c      	ldr	r4, [r3, #0]
 80150a2:	6879      	ldr	r1, [r7, #4]
 80150a4:	68f8      	ldr	r0, [r7, #12]
 80150a6:	f7ff fe3f 	bl	8014d28 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80150aa:	4601      	mov	r1, r0
 80150ac:	6a3b      	ldr	r3, [r7, #32]
 80150ae:	683a      	ldr	r2, [r7, #0]
 80150b0:	68b8      	ldr	r0, [r7, #8]
 80150b2:	47a0      	blx	r4
 80150b4:	4603      	mov	r3, r0
 80150b6:	e010      	b.n	80150da <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 80150b8:	68bb      	ldr	r3, [r7, #8]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	3308      	adds	r3, #8
 80150be:	681c      	ldr	r4, [r3, #0]
 80150c0:	6879      	ldr	r1, [r7, #4]
 80150c2:	68f8      	ldr	r0, [r7, #12]
 80150c4:	f7ff fe30 	bl	8014d28 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80150c8:	4603      	mov	r3, r0
 80150ca:	f103 0120 	add.w	r1, r3, #32
 80150ce:	6a3b      	ldr	r3, [r7, #32]
 80150d0:	683a      	ldr	r2, [r7, #0]
 80150d2:	68b8      	ldr	r0, [r7, #8]
 80150d4:	47a0      	blx	r4
 80150d6:	4603      	mov	r3, r0
 80150d8:	bf00      	nop
}
 80150da:	4618      	mov	r0, r3
 80150dc:	3714      	adds	r7, #20
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd90      	pop	{r4, r7, pc}
	...

080150e4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 80150e4:	b590      	push	{r4, r7, lr}
 80150e6:	b085      	sub	sp, #20
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	60f8      	str	r0, [r7, #12]
 80150ec:	60b9      	str	r1, [r7, #8]
 80150ee:	607a      	str	r2, [r7, #4]
 80150f0:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 80150f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d00b      	beq.n	8015112 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 80150fa:	4b0e      	ldr	r3, [pc, #56]	; (8015134 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80150fc:	681c      	ldr	r4, [r3, #0]
 80150fe:	6839      	ldr	r1, [r7, #0]
 8015100:	68f8      	ldr	r0, [r7, #12]
 8015102:	f7ff fe11 	bl	8014d28 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015106:	4603      	mov	r3, r0
 8015108:	4619      	mov	r1, r3
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	47a0      	blx	r4
 801510e:	4603      	mov	r3, r0
 8015110:	e00c      	b.n	801512c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8015112:	4b08      	ldr	r3, [pc, #32]	; (8015134 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8015114:	681c      	ldr	r4, [r3, #0]
 8015116:	6839      	ldr	r1, [r7, #0]
 8015118:	68f8      	ldr	r0, [r7, #12]
 801511a:	f7ff fe05 	bl	8014d28 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801511e:	4603      	mov	r3, r0
 8015120:	3320      	adds	r3, #32
 8015122:	4619      	mov	r1, r3
 8015124:	6878      	ldr	r0, [r7, #4]
 8015126:	47a0      	blx	r4
 8015128:	4603      	mov	r3, r0
 801512a:	bf00      	nop
}
 801512c:	4618      	mov	r0, r3
 801512e:	3714      	adds	r7, #20
 8015130:	46bd      	mov	sp, r7
 8015132:	bd90      	pop	{r4, r7, pc}
 8015134:	200000c8 	.word	0x200000c8

08015138 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b084      	sub	sp, #16
 801513c:	af00      	add	r7, sp, #0
 801513e:	60f8      	str	r0, [r7, #12]
 8015140:	60b9      	str	r1, [r7, #8]
 8015142:	607a      	str	r2, [r7, #4]
 8015144:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8015146:	7e3b      	ldrb	r3, [r7, #24]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d008      	beq.n	801515e <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	3320      	adds	r3, #32
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	2120      	movs	r1, #32
 8015156:	68b8      	ldr	r0, [r7, #8]
 8015158:	4798      	blx	r3
 801515a:	4603      	mov	r3, r0
 801515c:	e006      	b.n	801516c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 801515e:	687a      	ldr	r2, [r7, #4]
 8015160:	6839      	ldr	r1, [r7, #0]
 8015162:	68f8      	ldr	r0, [r7, #12]
 8015164:	f7ff fdef 	bl	8014d46 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8015168:	4603      	mov	r3, r0
 801516a:	bf00      	nop
}
 801516c:	4618      	mov	r0, r3
 801516e:	3710      	adds	r7, #16
 8015170:	46bd      	mov	sp, r7
 8015172:	bd80      	pop	{r7, pc}

08015174 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b08a      	sub	sp, #40	; 0x28
 8015178:	af04      	add	r7, sp, #16
 801517a:	60f8      	str	r0, [r7, #12]
 801517c:	60b9      	str	r1, [r7, #8]
 801517e:	607a      	str	r2, [r7, #4]
 8015180:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8015182:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015186:	9301      	str	r3, [sp, #4]
 8015188:	6a3b      	ldr	r3, [r7, #32]
 801518a:	9300      	str	r3, [sp, #0]
 801518c:	683b      	ldr	r3, [r7, #0]
 801518e:	687a      	ldr	r2, [r7, #4]
 8015190:	68b9      	ldr	r1, [r7, #8]
 8015192:	68f8      	ldr	r0, [r7, #12]
 8015194:	f7ff ff76 	bl	8015084 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8015198:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 801519a:	697b      	ldr	r3, [r7, #20]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d101      	bne.n	80151a4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 80151a0:	2300      	movs	r3, #0
 80151a2:	e017      	b.n	80151d4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 80151a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80151a8:	9300      	str	r3, [sp, #0]
 80151aa:	697b      	ldr	r3, [r7, #20]
 80151ac:	687a      	ldr	r2, [r7, #4]
 80151ae:	68b9      	ldr	r1, [r7, #8]
 80151b0:	68f8      	ldr	r0, [r7, #12]
 80151b2:	f7ff ffc1 	bl	8015138 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80151b6:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 80151b8:	6a3b      	ldr	r3, [r7, #32]
 80151ba:	9302      	str	r3, [sp, #8]
 80151bc:	683b      	ldr	r3, [r7, #0]
 80151be:	9301      	str	r3, [sp, #4]
 80151c0:	68bb      	ldr	r3, [r7, #8]
 80151c2:	9300      	str	r3, [sp, #0]
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	697a      	ldr	r2, [r7, #20]
 80151c8:	6939      	ldr	r1, [r7, #16]
 80151ca:	68f8      	ldr	r0, [r7, #12]
 80151cc:	f7ff fdcc 	bl	8014d68 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	689b      	ldr	r3, [r3, #8]
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	3718      	adds	r7, #24
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd80      	pop	{r7, pc}

080151dc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 80151dc:	b590      	push	{r4, r7, lr}
 80151de:	b089      	sub	sp, #36	; 0x24
 80151e0:	af02      	add	r7, sp, #8
 80151e2:	60f8      	str	r0, [r7, #12]
 80151e4:	60b9      	str	r1, [r7, #8]
 80151e6:	607a      	str	r2, [r7, #4]
 80151e8:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d03a      	beq.n	8015266 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80151f6:	331c      	adds	r3, #28
 80151f8:	6879      	ldr	r1, [r7, #4]
 80151fa:	4618      	mov	r0, r3
 80151fc:	f7ff fc13 	bl	8014a26 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8015200:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d10b      	bne.n	8015220 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	f103 000c 	add.w	r0, r3, #12
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	685b      	ldr	r3, [r3, #4]
 8015212:	9300      	str	r3, [sp, #0]
 8015214:	68bb      	ldr	r3, [r7, #8]
 8015216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015218:	6839      	ldr	r1, [r7, #0]
 801521a:	f7ff fa0d 	bl	8014638 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 801521e:	e023      	b.n	8015268 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8015220:	68b8      	ldr	r0, [r7, #8]
 8015222:	f7f8 ff95 	bl	800e150 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8015226:	4603      	mov	r3, r0
 8015228:	f083 0301 	eor.w	r3, r3, #1
 801522c:	b2db      	uxtb	r3, r3
 801522e:	2b00      	cmp	r3, #0
 8015230:	d01a      	beq.n	8015268 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8015232:	697b      	ldr	r3, [r7, #20]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8015238:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801523c:	9301      	str	r3, [sp, #4]
 801523e:	68bb      	ldr	r3, [r7, #8]
 8015240:	9300      	str	r3, [sp, #0]
 8015242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015244:	683a      	ldr	r2, [r7, #0]
 8015246:	6979      	ldr	r1, [r7, #20]
 8015248:	68f8      	ldr	r0, [r7, #12]
 801524a:	f7ff fe95 	bl	8014f78 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	330c      	adds	r3, #12
 8015254:	681c      	ldr	r4, [r3, #0]
 8015256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015258:	9300      	str	r3, [sp, #0]
 801525a:	683b      	ldr	r3, [r7, #0]
 801525c:	693a      	ldr	r2, [r7, #16]
 801525e:	6879      	ldr	r1, [r7, #4]
 8015260:	68b8      	ldr	r0, [r7, #8]
 8015262:	47a0      	blx	r4
 8015264:	e000      	b.n	8015268 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8015266:	bf00      	nop
    }
}
 8015268:	371c      	adds	r7, #28
 801526a:	46bd      	mov	sp, r7
 801526c:	bd90      	pop	{r4, r7, pc}
	...

08015270 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b086      	sub	sp, #24
 8015274:	af02      	add	r7, sp, #8
 8015276:	60f8      	str	r0, [r7, #12]
 8015278:	60b9      	str	r1, [r7, #8]
 801527a:	607a      	str	r2, [r7, #4]
 801527c:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 801527e:	4b08      	ldr	r3, [pc, #32]	; (80152a0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8015280:	681a      	ldr	r2, [r3, #0]
 8015282:	78fb      	ldrb	r3, [r7, #3]
 8015284:	9301      	str	r3, [sp, #4]
 8015286:	2300      	movs	r3, #0
 8015288:	9300      	str	r3, [sp, #0]
 801528a:	4613      	mov	r3, r2
 801528c:	687a      	ldr	r2, [r7, #4]
 801528e:	68b9      	ldr	r1, [r7, #8]
 8015290:	68f8      	ldr	r0, [r7, #12]
 8015292:	f7ff ffa3 	bl	80151dc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8015296:	bf00      	nop
 8015298:	3710      	adds	r7, #16
 801529a:	46bd      	mov	sp, r7
 801529c:	bd80      	pop	{r7, pc}
 801529e:	bf00      	nop
 80152a0:	200000fc 	.word	0x200000fc

080152a4 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b08a      	sub	sp, #40	; 0x28
 80152a8:	af04      	add	r7, sp, #16
 80152aa:	60f8      	str	r0, [r7, #12]
 80152ac:	60b9      	str	r1, [r7, #8]
 80152ae:	607a      	str	r2, [r7, #4]
 80152b0:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d023      	beq.n	8015300 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80152be:	331c      	adds	r3, #28
 80152c0:	6879      	ldr	r1, [r7, #4]
 80152c2:	4618      	mov	r0, r3
 80152c4:	f7ff fbaf 	bl	8014a26 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80152c8:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d10c      	bne.n	80152ea <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	f103 000c 	add.w	r0, r3, #12
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	9300      	str	r3, [sp, #0]
 80152dc:	68bb      	ldr	r3, [r7, #8]
 80152de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152e0:	6a39      	ldr	r1, [r7, #32]
 80152e2:	f7ff f9a9 	bl	8014638 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 80152e6:	2300      	movs	r3, #0
 80152e8:	e019      	b.n	801531e <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80152ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80152ee:	9301      	str	r3, [sp, #4]
 80152f0:	68bb      	ldr	r3, [r7, #8]
 80152f2:	9300      	str	r3, [sp, #0]
 80152f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152f6:	6a3a      	ldr	r2, [r7, #32]
 80152f8:	6979      	ldr	r1, [r7, #20]
 80152fa:	68f8      	ldr	r0, [r7, #12]
 80152fc:	f7ff fe3c 	bl	8014f78 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8015300:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015304:	9302      	str	r3, [sp, #8]
 8015306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015308:	9301      	str	r3, [sp, #4]
 801530a:	6a3b      	ldr	r3, [r7, #32]
 801530c:	9300      	str	r3, [sp, #0]
 801530e:	683b      	ldr	r3, [r7, #0]
 8015310:	687a      	ldr	r2, [r7, #4]
 8015312:	68b9      	ldr	r1, [r7, #8]
 8015314:	68f8      	ldr	r0, [r7, #12]
 8015316:	f7ff fd62 	bl	8014dde <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 801531a:	4603      	mov	r3, r0
 801531c:	bf00      	nop
}
 801531e:	4618      	mov	r0, r3
 8015320:	3718      	adds	r7, #24
 8015322:	46bd      	mov	sp, r7
 8015324:	bd80      	pop	{r7, pc}

08015326 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8015326:	b580      	push	{r7, lr}
 8015328:	b084      	sub	sp, #16
 801532a:	af00      	add	r7, sp, #0
 801532c:	6078      	str	r0, [r7, #4]
 801532e:	460b      	mov	r3, r1
 8015330:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015338:	331c      	adds	r3, #28
 801533a:	78fa      	ldrb	r2, [r7, #3]
 801533c:	4611      	mov	r1, r2
 801533e:	4618      	mov	r0, r3
 8015340:	f7ff fbc0 	bl	8014ac4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8015344:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	330c      	adds	r3, #12
 801534a:	4618      	mov	r0, r3
 801534c:	f7ff f882 	bl	8014454 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d010      	beq.n	8015378 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	330c      	adds	r3, #12
 801535a:	68f9      	ldr	r1, [r7, #12]
 801535c:	4618      	mov	r0, r3
 801535e:	f7ff f897 	bl	8014490 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015368:	331c      	adds	r3, #28
 801536a:	78fa      	ldrb	r2, [r7, #3]
 801536c:	68f9      	ldr	r1, [r7, #12]
 801536e:	4618      	mov	r0, r3
 8015370:	f7ff fbcb 	bl	8014b0a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8015374:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8015376:	e7eb      	b.n	8015350 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	330c      	adds	r3, #12
 801537c:	4618      	mov	r0, r3
 801537e:	f7ff f8e7 	bl	8014550 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8015382:	bf00      	nop
 8015384:	3710      	adds	r7, #16
 8015386:	46bd      	mov	sp, r7
 8015388:	bd80      	pop	{r7, pc}

0801538a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 801538a:	b580      	push	{r7, lr}
 801538c:	b082      	sub	sp, #8
 801538e:	af00      	add	r7, sp, #0
 8015390:	6078      	str	r0, [r7, #4]
 8015392:	460b      	mov	r3, r1
 8015394:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8015396:	78fb      	ldrb	r3, [r7, #3]
 8015398:	4619      	mov	r1, r3
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f7ff ffc3 	bl	8015326 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	330c      	adds	r3, #12
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7ff f9e5 	bl	8014774 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 80153aa:	4603      	mov	r3, r0
}
 80153ac:	4618      	mov	r0, r3
 80153ae:	3708      	adds	r7, #8
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}

080153b4 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b084      	sub	sp, #16
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80153c2:	331c      	adds	r3, #28
 80153c4:	2103      	movs	r1, #3
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7ff fb7c 	bl	8014ac4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 80153cc:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d011      	beq.n	80153f8 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	7e1b      	ldrb	r3, [r3, #24]
 80153d8:	2b03      	cmp	r3, #3
 80153da:	d102      	bne.n	80153e2 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	2202      	movs	r2, #2
 80153e0:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80153e8:	331c      	adds	r3, #28
 80153ea:	2203      	movs	r2, #3
 80153ec:	68f9      	ldr	r1, [r7, #12]
 80153ee:	4618      	mov	r0, r3
 80153f0:	f7ff fb8b 	bl	8014b0a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80153f4:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80153f6:	e7ea      	b.n	80153ce <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 80153f8:	bf00      	nop
 80153fa:	3710      	adds	r7, #16
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}

08015400 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	460b      	mov	r3, r1
 801540a:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015412:	331c      	adds	r3, #28
 8015414:	78fa      	ldrb	r2, [r7, #3]
 8015416:	4611      	mov	r1, r2
 8015418:	4618      	mov	r0, r3
 801541a:	f7ff fb30 	bl	8014a7e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 801541e:	4603      	mov	r3, r0
}
 8015420:	4618      	mov	r0, r3
 8015422:	3708      	adds	r7, #8
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}

08015428 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8015428:	b580      	push	{r7, lr}
 801542a:	b084      	sub	sp, #16
 801542c:	af00      	add	r7, sp, #0
 801542e:	60f8      	str	r0, [r7, #12]
 8015430:	60b9      	str	r1, [r7, #8]
 8015432:	607a      	str	r2, [r7, #4]
 8015434:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	68b9      	ldr	r1, [r7, #8]
 801543a:	4618      	mov	r0, r3
 801543c:	f7f5 fb13 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	3308      	adds	r3, #8
 8015444:	6879      	ldr	r1, [r7, #4]
 8015446:	4618      	mov	r0, r3
 8015448:	f7f5 fb0d 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	683a      	ldr	r2, [r7, #0]
 8015450:	611a      	str	r2, [r3, #16]
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	2200      	movs	r2, #0
 8015456:	615a      	str	r2, [r3, #20]
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	4618      	mov	r0, r3
 801545c:	3710      	adds	r7, #16
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}

08015462 <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 8015462:	b480      	push	{r7}
 8015464:	b083      	sub	sp, #12
 8015466:	af00      	add	r7, sp, #0
 8015468:	6078      	str	r0, [r7, #4]
 801546a:	6039      	str	r1, [r7, #0]
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	4618      	mov	r0, r3
 8015470:	370c      	adds	r7, #12
 8015472:	46bd      	mov	sp, r7
 8015474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015478:	4770      	bx	lr

0801547a <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 801547a:	b480      	push	{r7}
 801547c:	b083      	sub	sp, #12
 801547e:	af00      	add	r7, sp, #0
 8015480:	6078      	str	r0, [r7, #4]
 8015482:	6039      	str	r1, [r7, #0]
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	4618      	mov	r0, r3
 8015488:	370c      	adds	r7, #12
 801548a:	46bd      	mov	sp, r7
 801548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015490:	4770      	bx	lr

08015492 <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8015492:	b480      	push	{r7}
 8015494:	b085      	sub	sp, #20
 8015496:	af00      	add	r7, sp, #0
 8015498:	60f8      	str	r0, [r7, #12]
 801549a:	60b9      	str	r1, [r7, #8]
 801549c:	4613      	mov	r3, r2
 801549e:	71fb      	strb	r3, [r7, #7]
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	4618      	mov	r0, r3
 80154a4:	3714      	adds	r7, #20
 80154a6:	46bd      	mov	sp, r7
 80154a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ac:	4770      	bx	lr

080154ae <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 80154ae:	b480      	push	{r7}
 80154b0:	b085      	sub	sp, #20
 80154b2:	af00      	add	r7, sp, #0
 80154b4:	60f8      	str	r0, [r7, #12]
 80154b6:	60b9      	str	r1, [r7, #8]
 80154b8:	607a      	str	r2, [r7, #4]
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	4618      	mov	r0, r3
 80154be:	3714      	adds	r7, #20
 80154c0:	46bd      	mov	sp, r7
 80154c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c6:	4770      	bx	lr

080154c8 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 80154c8:	b480      	push	{r7}
 80154ca:	b085      	sub	sp, #20
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	60f8      	str	r0, [r7, #12]
 80154d0:	60b9      	str	r1, [r7, #8]
 80154d2:	607a      	str	r2, [r7, #4]
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	4618      	mov	r0, r3
 80154d8:	3714      	adds	r7, #20
 80154da:	46bd      	mov	sp, r7
 80154dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e0:	4770      	bx	lr

080154e2 <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 80154e2:	b480      	push	{r7}
 80154e4:	b085      	sub	sp, #20
 80154e6:	af00      	add	r7, sp, #0
 80154e8:	60f8      	str	r0, [r7, #12]
 80154ea:	60b9      	str	r1, [r7, #8]
 80154ec:	607a      	str	r2, [r7, #4]
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	4618      	mov	r0, r3
 80154f2:	3714      	adds	r7, #20
 80154f4:	46bd      	mov	sp, r7
 80154f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fa:	4770      	bx	lr

080154fc <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 80154fc:	b480      	push	{r7}
 80154fe:	b085      	sub	sp, #20
 8015500:	af00      	add	r7, sp, #0
 8015502:	60f8      	str	r0, [r7, #12]
 8015504:	60b9      	str	r1, [r7, #8]
 8015506:	607a      	str	r2, [r7, #4]
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	4618      	mov	r0, r3
 801550c:	3714      	adds	r7, #20
 801550e:	46bd      	mov	sp, r7
 8015510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015514:	4770      	bx	lr

08015516 <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8015516:	b480      	push	{r7}
 8015518:	b085      	sub	sp, #20
 801551a:	af00      	add	r7, sp, #0
 801551c:	60f8      	str	r0, [r7, #12]
 801551e:	60b9      	str	r1, [r7, #8]
 8015520:	4639      	mov	r1, r7
 8015522:	e881 000c 	stmia.w	r1, {r2, r3}
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	4618      	mov	r0, r3
 801552a:	3714      	adds	r7, #20
 801552c:	46bd      	mov	sp, r7
 801552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015532:	4770      	bx	lr

08015534 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8015534:	b480      	push	{r7}
 8015536:	b085      	sub	sp, #20
 8015538:	af00      	add	r7, sp, #0
 801553a:	60f8      	str	r0, [r7, #12]
 801553c:	60b9      	str	r1, [r7, #8]
 801553e:	4639      	mov	r1, r7
 8015540:	e881 000c 	stmia.w	r1, {r2, r3}
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	4618      	mov	r0, r3
 8015548:	3714      	adds	r7, #20
 801554a:	46bd      	mov	sp, r7
 801554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015550:	4770      	bx	lr

08015552 <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8015552:	b480      	push	{r7}
 8015554:	b085      	sub	sp, #20
 8015556:	af00      	add	r7, sp, #0
 8015558:	60f8      	str	r0, [r7, #12]
 801555a:	60b9      	str	r1, [r7, #8]
 801555c:	ed87 0b00 	vstr	d0, [r7]
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	4618      	mov	r0, r3
 8015564:	3714      	adds	r7, #20
 8015566:	46bd      	mov	sp, r7
 8015568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556c:	4770      	bx	lr

0801556e <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801556e:	b480      	push	{r7}
 8015570:	b085      	sub	sp, #20
 8015572:	af00      	add	r7, sp, #0
 8015574:	60f8      	str	r0, [r7, #12]
 8015576:	60b9      	str	r1, [r7, #8]
 8015578:	607a      	str	r2, [r7, #4]
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	4618      	mov	r0, r3
 801557e:	3714      	adds	r7, #20
 8015580:	46bd      	mov	sp, r7
 8015582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015586:	4770      	bx	lr

08015588 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8015588:	b480      	push	{r7}
 801558a:	b085      	sub	sp, #20
 801558c:	af00      	add	r7, sp, #0
 801558e:	60f8      	str	r0, [r7, #12]
 8015590:	60b9      	str	r1, [r7, #8]
 8015592:	607a      	str	r2, [r7, #4]
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	4618      	mov	r0, r3
 8015598:	3714      	adds	r7, #20
 801559a:	46bd      	mov	sp, r7
 801559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a0:	4770      	bx	lr

080155a2 <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 80155a2:	b480      	push	{r7}
 80155a4:	b085      	sub	sp, #20
 80155a6:	af00      	add	r7, sp, #0
 80155a8:	60f8      	str	r0, [r7, #12]
 80155aa:	60b9      	str	r1, [r7, #8]
 80155ac:	607a      	str	r2, [r7, #4]
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	4618      	mov	r0, r3
 80155b2:	3714      	adds	r7, #20
 80155b4:	46bd      	mov	sp, r7
 80155b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ba:	4770      	bx	lr

080155bc <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 80155bc:	b480      	push	{r7}
 80155be:	b085      	sub	sp, #20
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	60f8      	str	r0, [r7, #12]
 80155c4:	60b9      	str	r1, [r7, #8]
 80155c6:	607a      	str	r2, [r7, #4]
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	4618      	mov	r0, r3
 80155cc:	3714      	adds	r7, #20
 80155ce:	46bd      	mov	sp, r7
 80155d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d4:	4770      	bx	lr

080155d6 <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 80155d6:	b480      	push	{r7}
 80155d8:	b085      	sub	sp, #20
 80155da:	af00      	add	r7, sp, #0
 80155dc:	60f8      	str	r0, [r7, #12]
 80155de:	60b9      	str	r1, [r7, #8]
 80155e0:	607a      	str	r2, [r7, #4]
 80155e2:	603b      	str	r3, [r7, #0]
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	4618      	mov	r0, r3
 80155e8:	3714      	adds	r7, #20
 80155ea:	46bd      	mov	sp, r7
 80155ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f0:	4770      	bx	lr

080155f2 <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 80155f2:	b480      	push	{r7}
 80155f4:	b085      	sub	sp, #20
 80155f6:	af00      	add	r7, sp, #0
 80155f8:	60f8      	str	r0, [r7, #12]
 80155fa:	60b9      	str	r1, [r7, #8]
 80155fc:	607a      	str	r2, [r7, #4]
 80155fe:	603b      	str	r3, [r7, #0]
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	4618      	mov	r0, r3
 8015604:	3714      	adds	r7, #20
 8015606:	46bd      	mov	sp, r7
 8015608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560c:	4770      	bx	lr

0801560e <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 801560e:	b480      	push	{r7}
 8015610:	b085      	sub	sp, #20
 8015612:	af00      	add	r7, sp, #0
 8015614:	60f8      	str	r0, [r7, #12]
 8015616:	60b9      	str	r1, [r7, #8]
 8015618:	607a      	str	r2, [r7, #4]
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	4618      	mov	r0, r3
 801561e:	3714      	adds	r7, #20
 8015620:	46bd      	mov	sp, r7
 8015622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015626:	4770      	bx	lr

08015628 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8015628:	b480      	push	{r7}
 801562a:	b085      	sub	sp, #20
 801562c:	af00      	add	r7, sp, #0
 801562e:	60f8      	str	r0, [r7, #12]
 8015630:	60b9      	str	r1, [r7, #8]
 8015632:	607a      	str	r2, [r7, #4]
 8015634:	603b      	str	r3, [r7, #0]
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	4618      	mov	r0, r3
 801563a:	3714      	adds	r7, #20
 801563c:	46bd      	mov	sp, r7
 801563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015642:	4770      	bx	lr

08015644 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 8015644:	b480      	push	{r7}
 8015646:	b083      	sub	sp, #12
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
 801564c:	2300      	movs	r3, #0
 801564e:	4618      	mov	r0, r3
 8015650:	370c      	adds	r7, #12
 8015652:	46bd      	mov	sp, r7
 8015654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015658:	4770      	bx	lr
	...

0801565c <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 801565c:	b580      	push	{r7, lr}
 801565e:	b084      	sub	sp, #16
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
 8015664:	6039      	str	r1, [r7, #0]
 8015666:	f107 0308 	add.w	r3, r7, #8
 801566a:	4909      	ldr	r1, [pc, #36]	; (8015690 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 801566c:	4618      	mov	r0, r3
 801566e:	f7f5 f9a6 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8015672:	f107 0308 	add.w	r3, r7, #8
 8015676:	4619      	mov	r1, r3
 8015678:	6878      	ldr	r0, [r7, #4]
 801567a:	f005 fec5 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
 801567e:	f107 0308 	add.w	r3, r7, #8
 8015682:	4618      	mov	r0, r3
 8015684:	f7f5 fd53 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8015688:	6878      	ldr	r0, [r7, #4]
 801568a:	3710      	adds	r7, #16
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}
 8015690:	08023838 	.word	0x08023838

08015694 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8015694:	b480      	push	{r7}
 8015696:	b083      	sub	sp, #12
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
 801569c:	460b      	mov	r3, r1
 801569e:	70fb      	strb	r3, [r7, #3]
 80156a0:	78fb      	ldrb	r3, [r7, #3]
 80156a2:	4618      	mov	r0, r3
 80156a4:	370c      	adds	r7, #12
 80156a6:	46bd      	mov	sp, r7
 80156a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ac:	4770      	bx	lr

080156ae <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 80156ae:	b480      	push	{r7}
 80156b0:	b083      	sub	sp, #12
 80156b2:	af00      	add	r7, sp, #0
 80156b4:	6078      	str	r0, [r7, #4]
 80156b6:	2300      	movs	r3, #0
 80156b8:	4618      	mov	r0, r3
 80156ba:	370c      	adds	r7, #12
 80156bc:	46bd      	mov	sp, r7
 80156be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c2:	4770      	bx	lr

080156c4 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 80156c4:	b480      	push	{r7}
 80156c6:	b083      	sub	sp, #12
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
 80156cc:	2300      	movs	r3, #0
 80156ce:	4618      	mov	r0, r3
 80156d0:	370c      	adds	r7, #12
 80156d2:	46bd      	mov	sp, r7
 80156d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d8:	4770      	bx	lr

080156da <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 80156da:	b480      	push	{r7}
 80156dc:	b083      	sub	sp, #12
 80156de:	af00      	add	r7, sp, #0
 80156e0:	6078      	str	r0, [r7, #4]
 80156e2:	6039      	str	r1, [r7, #0]
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	4618      	mov	r0, r3
 80156e8:	370c      	adds	r7, #12
 80156ea:	46bd      	mov	sp, r7
 80156ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f0:	4770      	bx	lr

080156f2 <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 80156f2:	b480      	push	{r7}
 80156f4:	b083      	sub	sp, #12
 80156f6:	af00      	add	r7, sp, #0
 80156f8:	6078      	str	r0, [r7, #4]
 80156fa:	2300      	movs	r3, #0
 80156fc:	4618      	mov	r0, r3
 80156fe:	370c      	adds	r7, #12
 8015700:	46bd      	mov	sp, r7
 8015702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015706:	4770      	bx	lr

08015708 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8015708:	b480      	push	{r7}
 801570a:	b083      	sub	sp, #12
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
 8015710:	6039      	str	r1, [r7, #0]
 8015712:	683b      	ldr	r3, [r7, #0]
 8015714:	4618      	mov	r0, r3
 8015716:	370c      	adds	r7, #12
 8015718:	46bd      	mov	sp, r7
 801571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571e:	4770      	bx	lr

08015720 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8015720:	b480      	push	{r7}
 8015722:	b083      	sub	sp, #12
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
 8015728:	2300      	movs	r3, #0
 801572a:	4618      	mov	r0, r3
 801572c:	370c      	adds	r7, #12
 801572e:	46bd      	mov	sp, r7
 8015730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015734:	4770      	bx	lr

08015736 <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 8015736:	b480      	push	{r7}
 8015738:	b083      	sub	sp, #12
 801573a:	af00      	add	r7, sp, #0
 801573c:	6078      	str	r0, [r7, #4]
 801573e:	6039      	str	r1, [r7, #0]
 8015740:	683b      	ldr	r3, [r7, #0]
 8015742:	4618      	mov	r0, r3
 8015744:	370c      	adds	r7, #12
 8015746:	46bd      	mov	sp, r7
 8015748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574c:	4770      	bx	lr

0801574e <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 801574e:	b580      	push	{r7, lr}
 8015750:	b082      	sub	sp, #8
 8015752:	af00      	add	r7, sp, #0
 8015754:	6078      	str	r0, [r7, #4]
 8015756:	6039      	str	r1, [r7, #0]
 8015758:	2100      	movs	r1, #0
 801575a:	6878      	ldr	r0, [r7, #4]
 801575c:	f7f3 f972 	bl	8008a44 <_ZN18cpputest_ulonglongC1Ei>
 8015760:	6878      	ldr	r0, [r7, #4]
 8015762:	3708      	adds	r7, #8
 8015764:	46bd      	mov	sp, r7
 8015766:	bd80      	pop	{r7, pc}

08015768 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8015768:	b480      	push	{r7}
 801576a:	b085      	sub	sp, #20
 801576c:	af00      	add	r7, sp, #0
 801576e:	60f8      	str	r0, [r7, #12]
 8015770:	60b9      	str	r1, [r7, #8]
 8015772:	4639      	mov	r1, r7
 8015774:	e881 000c 	stmia.w	r1, {r2, r3}
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	461a      	mov	r2, r3
 801577c:	463b      	mov	r3, r7
 801577e:	cb03      	ldmia	r3!, {r0, r1}
 8015780:	6010      	str	r0, [r2, #0]
 8015782:	6051      	str	r1, [r2, #4]
 8015784:	68f8      	ldr	r0, [r7, #12]
 8015786:	3714      	adds	r7, #20
 8015788:	46bd      	mov	sp, r7
 801578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578e:	4770      	bx	lr

08015790 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8015790:	b580      	push	{r7, lr}
 8015792:	b082      	sub	sp, #8
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
 8015798:	6039      	str	r1, [r7, #0]
 801579a:	2100      	movs	r1, #0
 801579c:	6878      	ldr	r0, [r7, #4]
 801579e:	f7f3 f945 	bl	8008a2c <_ZN17cpputest_longlongC1Ei>
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	3708      	adds	r7, #8
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}

080157aa <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 80157aa:	b480      	push	{r7}
 80157ac:	b085      	sub	sp, #20
 80157ae:	af00      	add	r7, sp, #0
 80157b0:	60f8      	str	r0, [r7, #12]
 80157b2:	60b9      	str	r1, [r7, #8]
 80157b4:	4639      	mov	r1, r7
 80157b6:	e881 000c 	stmia.w	r1, {r2, r3}
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	461a      	mov	r2, r3
 80157be:	463b      	mov	r3, r7
 80157c0:	cb03      	ldmia	r3!, {r0, r1}
 80157c2:	6010      	str	r0, [r2, #0]
 80157c4:	6051      	str	r1, [r2, #4]
 80157c6:	68f8      	ldr	r0, [r7, #12]
 80157c8:	3714      	adds	r7, #20
 80157ca:	46bd      	mov	sp, r7
 80157cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d0:	4770      	bx	lr

080157d2 <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 80157d2:	b480      	push	{r7}
 80157d4:	b083      	sub	sp, #12
 80157d6:	af00      	add	r7, sp, #0
 80157d8:	6078      	str	r0, [r7, #4]
 80157da:	2300      	movs	r3, #0
 80157dc:	4618      	mov	r0, r3
 80157de:	370c      	adds	r7, #12
 80157e0:	46bd      	mov	sp, r7
 80157e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e6:	4770      	bx	lr

080157e8 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 80157e8:	b480      	push	{r7}
 80157ea:	b083      	sub	sp, #12
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
 80157f0:	6039      	str	r1, [r7, #0]
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	4618      	mov	r0, r3
 80157f6:	370c      	adds	r7, #12
 80157f8:	46bd      	mov	sp, r7
 80157fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fe:	4770      	bx	lr

08015800 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8015800:	b480      	push	{r7}
 8015802:	b083      	sub	sp, #12
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
 8015808:	f04f 0200 	mov.w	r2, #0
 801580c:	f04f 0300 	mov.w	r3, #0
 8015810:	ec43 2b17 	vmov	d7, r2, r3
 8015814:	eeb0 0a47 	vmov.f32	s0, s14
 8015818:	eef0 0a67 	vmov.f32	s1, s15
 801581c:	370c      	adds	r7, #12
 801581e:	46bd      	mov	sp, r7
 8015820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015824:	4770      	bx	lr

08015826 <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 8015826:	b480      	push	{r7}
 8015828:	b085      	sub	sp, #20
 801582a:	af00      	add	r7, sp, #0
 801582c:	60f8      	str	r0, [r7, #12]
 801582e:	ed87 0b00 	vstr	d0, [r7]
 8015832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015836:	ec43 2b17 	vmov	d7, r2, r3
 801583a:	eeb0 0a47 	vmov.f32	s0, s14
 801583e:	eef0 0a67 	vmov.f32	s1, s15
 8015842:	3714      	adds	r7, #20
 8015844:	46bd      	mov	sp, r7
 8015846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584a:	4770      	bx	lr

0801584c <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 801584c:	b480      	push	{r7}
 801584e:	b083      	sub	sp, #12
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
 8015854:	4b03      	ldr	r3, [pc, #12]	; (8015864 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8015856:	4618      	mov	r0, r3
 8015858:	370c      	adds	r7, #12
 801585a:	46bd      	mov	sp, r7
 801585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015860:	4770      	bx	lr
 8015862:	bf00      	nop
 8015864:	08023838 	.word	0x08023838

08015868 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8015868:	b480      	push	{r7}
 801586a:	b083      	sub	sp, #12
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
 8015870:	6039      	str	r1, [r7, #0]
 8015872:	683b      	ldr	r3, [r7, #0]
 8015874:	4618      	mov	r0, r3
 8015876:	370c      	adds	r7, #12
 8015878:	46bd      	mov	sp, r7
 801587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587e:	4770      	bx	lr

08015880 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8015880:	b480      	push	{r7}
 8015882:	b083      	sub	sp, #12
 8015884:	af00      	add	r7, sp, #0
 8015886:	6078      	str	r0, [r7, #4]
 8015888:	2300      	movs	r3, #0
 801588a:	4618      	mov	r0, r3
 801588c:	370c      	adds	r7, #12
 801588e:	46bd      	mov	sp, r7
 8015890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015894:	4770      	bx	lr

08015896 <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 8015896:	b480      	push	{r7}
 8015898:	b083      	sub	sp, #12
 801589a:	af00      	add	r7, sp, #0
 801589c:	6078      	str	r0, [r7, #4]
 801589e:	6039      	str	r1, [r7, #0]
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	4618      	mov	r0, r3
 80158a4:	370c      	adds	r7, #12
 80158a6:	46bd      	mov	sp, r7
 80158a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ac:	4770      	bx	lr

080158ae <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 80158ae:	b480      	push	{r7}
 80158b0:	b083      	sub	sp, #12
 80158b2:	af00      	add	r7, sp, #0
 80158b4:	6078      	str	r0, [r7, #4]
 80158b6:	2300      	movs	r3, #0
 80158b8:	4618      	mov	r0, r3
 80158ba:	370c      	adds	r7, #12
 80158bc:	46bd      	mov	sp, r7
 80158be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c2:	4770      	bx	lr

080158c4 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 80158c4:	b480      	push	{r7}
 80158c6:	b083      	sub	sp, #12
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
 80158cc:	6039      	str	r1, [r7, #0]
 80158ce:	683b      	ldr	r3, [r7, #0]
 80158d0:	4618      	mov	r0, r3
 80158d2:	370c      	adds	r7, #12
 80158d4:	46bd      	mov	sp, r7
 80158d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158da:	4770      	bx	lr

080158dc <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 80158dc:	b480      	push	{r7}
 80158de:	b083      	sub	sp, #12
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
 80158e4:	2300      	movs	r3, #0
 80158e6:	4618      	mov	r0, r3
 80158e8:	370c      	adds	r7, #12
 80158ea:	46bd      	mov	sp, r7
 80158ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f0:	4770      	bx	lr

080158f2 <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 80158f2:	b480      	push	{r7}
 80158f4:	b083      	sub	sp, #12
 80158f6:	af00      	add	r7, sp, #0
 80158f8:	6078      	str	r0, [r7, #4]
 80158fa:	6039      	str	r1, [r7, #0]
 80158fc:	683b      	ldr	r3, [r7, #0]
 80158fe:	4618      	mov	r0, r3
 8015900:	370c      	adds	r7, #12
 8015902:	46bd      	mov	sp, r7
 8015904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015908:	4770      	bx	lr

0801590a <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 801590a:	b480      	push	{r7}
 801590c:	b083      	sub	sp, #12
 801590e:	af00      	add	r7, sp, #0
 8015910:	6078      	str	r0, [r7, #4]
 8015912:	6039      	str	r1, [r7, #0]
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	4618      	mov	r0, r3
 8015918:	370c      	adds	r7, #12
 801591a:	46bd      	mov	sp, r7
 801591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015920:	4770      	bx	lr
	...

08015924 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8015924:	b480      	push	{r7}
 8015926:	b083      	sub	sp, #12
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
 801592c:	4a04      	ldr	r2, [pc, #16]	; (8015940 <_ZN14MockActualCallC1Ev+0x1c>)
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	601a      	str	r2, [r3, #0]
{
}
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	4618      	mov	r0, r3
 8015936:	370c      	adds	r7, #12
 8015938:	46bd      	mov	sp, r7
 801593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593e:	4770      	bx	lr
 8015940:	08025f7c 	.word	0x08025f7c

08015944 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8015944:	b480      	push	{r7}
 8015946:	b083      	sub	sp, #12
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
 801594c:	4a04      	ldr	r2, [pc, #16]	; (8015960 <_ZN14MockActualCallD1Ev+0x1c>)
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	601a      	str	r2, [r3, #0]
{
}
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	4618      	mov	r0, r3
 8015956:	370c      	adds	r7, #12
 8015958:	46bd      	mov	sp, r7
 801595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801595e:	4770      	bx	lr
 8015960:	08025f7c 	.word	0x08025f7c

08015964 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b082      	sub	sp, #8
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
 801596c:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	3304      	adds	r3, #4
 8015972:	6839      	ldr	r1, [r7, #0]
 8015974:	4618      	mov	r0, r3
 8015976:	f7f5 f88e 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
}
 801597a:	bf00      	nop
 801597c:	3708      	adds	r7, #8
 801597e:	46bd      	mov	sp, r7
 8015980:	bd80      	pop	{r7, pc}

08015982 <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8015982:	b580      	push	{r7, lr}
 8015984:	b082      	sub	sp, #8
 8015986:	af00      	add	r7, sp, #0
 8015988:	6078      	str	r0, [r7, #4]
 801598a:	6039      	str	r1, [r7, #0]
    return functionName_;
 801598c:	683b      	ldr	r3, [r7, #0]
 801598e:	3304      	adds	r3, #4
 8015990:	4619      	mov	r1, r3
 8015992:	6878      	ldr	r0, [r7, #4]
 8015994:	f7f5 f867 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
}
 8015998:	6878      	ldr	r0, [r7, #4]
 801599a:	3708      	adds	r7, #8
 801599c:	46bd      	mov	sp, r7
 801599e:	bd80      	pop	{r7, pc}

080159a0 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b084      	sub	sp, #16
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	60f8      	str	r0, [r7, #12]
 80159a8:	60b9      	str	r1, [r7, #8]
 80159aa:	607a      	str	r2, [r7, #4]
 80159ac:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	4618      	mov	r0, r3
 80159b2:	f7ff ffb7 	bl	8015924 <_ZN14MockActualCallC1Ev>
 80159b6:	4a17      	ldr	r2, [pc, #92]	; (8015a14 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	601a      	str	r2, [r3, #0]
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	3304      	adds	r3, #4
 80159c0:	4915      	ldr	r1, [pc, #84]	; (8015a18 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 80159c2:	4618      	mov	r0, r3
 80159c4:	f7f4 fffb 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	68ba      	ldr	r2, [r7, #8]
 80159cc:	60da      	str	r2, [r3, #12]
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	687a      	ldr	r2, [r7, #4]
 80159d2:	611a      	str	r2, [r3, #16]
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	2202      	movs	r2, #2
 80159d8:	751a      	strb	r2, [r3, #20]
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	2200      	movs	r2, #0
 80159de:	755a      	strb	r2, [r3, #21]
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	2200      	movs	r2, #0
 80159e4:	619a      	str	r2, [r3, #24]
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	331c      	adds	r3, #28
 80159ea:	4618      	mov	r0, r3
 80159ec:	f004 f814 	bl	8019a18 <_ZN21MockExpectedCallsListC1Ev>
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	683a      	ldr	r2, [r7, #0]
 80159f4:	625a      	str	r2, [r3, #36]	; 0x24
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	2200      	movs	r2, #0
 80159fa:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	331c      	adds	r3, #28
 8015a00:	6839      	ldr	r1, [r7, #0]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f004 f986 	bl	8019d14 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3710      	adds	r7, #16
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}
 8015a12:	bf00      	nop
 8015a14:	08025e7c 	.word	0x08025e7c
 8015a18:	08023838 	.word	0x08023838

08015a1c <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b082      	sub	sp, #8
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
 8015a24:	4a0c      	ldr	r2, [pc, #48]	; (8015a58 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f001 fae4 	bl	8016ff8 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	331c      	adds	r3, #28
 8015a34:	4618      	mov	r0, r3
 8015a36:	f004 f803 	bl	8019a40 <_ZN21MockExpectedCallsListD1Ev>
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	3304      	adds	r3, #4
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f7f5 fb75 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	4618      	mov	r0, r3
 8015a48:	f7ff ff7c 	bl	8015944 <_ZN14MockActualCallD1Ev>
}
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	4618      	mov	r0, r3
 8015a50:	3708      	adds	r7, #8
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd80      	pop	{r7, pc}
 8015a56:	bf00      	nop
 8015a58:	08025e7c 	.word	0x08025e7c

08015a5c <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b082      	sub	sp, #8
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
}
 8015a64:	6878      	ldr	r0, [r7, #4]
 8015a66:	f7ff ffd9 	bl	8015a1c <_ZN21MockCheckedActualCallD1Ev>
 8015a6a:	212c      	movs	r1, #44	; 0x2c
 8015a6c:	6878      	ldr	r0, [r7, #4]
 8015a6e:	f7f2 fbf7 	bl	8008260 <_ZdlPvj>
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	4618      	mov	r0, r3
 8015a76:	3708      	adds	r7, #8
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bd80      	pop	{r7, pc}

08015a7c <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8015a7c:	b480      	push	{r7}
 8015a7e:	b083      	sub	sp, #12
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
 8015a84:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	683a      	ldr	r2, [r7, #0]
 8015a8a:	611a      	str	r2, [r3, #16]
}
 8015a8c:	bf00      	nop
 8015a8e:	370c      	adds	r7, #12
 8015a90:	46bd      	mov	sp, r7
 8015a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a96:	4770      	bx	lr

08015a98 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b082      	sub	sp, #8
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	691a      	ldr	r2, [r3, #16]
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	691b      	ldr	r3, [r3, #16]
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	330c      	adds	r3, #12
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	4610      	mov	r0, r2
 8015ab0:	4798      	blx	r3
 8015ab2:	4603      	mov	r3, r0
}
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	3708      	adds	r7, #8
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	bd80      	pop	{r7, pc}

08015abc <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b082      	sub	sp, #8
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
 8015ac4:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	33c0      	adds	r3, #192	; 0xc0
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	6878      	ldr	r0, [r7, #4]
 8015ad0:	4798      	blx	r3
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	f083 0301 	eor.w	r3, r3, #1
 8015ad8:	b2db      	uxtb	r3, r3
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d010      	beq.n	8015b00 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	33ec      	adds	r3, #236	; 0xec
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	2101      	movs	r1, #1
 8015ae8:	6878      	ldr	r0, [r7, #4]
 8015aea:	4798      	blx	r3
        reporter_->failTest(failure);
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	691a      	ldr	r2, [r3, #16]
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	691b      	ldr	r3, [r3, #16]
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	3308      	adds	r3, #8
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	6839      	ldr	r1, [r7, #0]
 8015afc:	4610      	mov	r0, r2
 8015afe:	4798      	blx	r3
    }
}
 8015b00:	bf00      	nop
 8015b02:	3708      	adds	r7, #8
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bd80      	pop	{r7, pc}

08015b08 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 8015b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b0c:	b0bc      	sub	sp, #240	; 0xf0
 8015b0e:	af00      	add	r7, sp, #0
 8015b10:	6078      	str	r0, [r7, #4]
 8015b12:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8015b1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	f000 80f5 	beq.w	8015d10 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8015b26:	683b      	ldr	r3, [r7, #0]
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	339c      	adds	r3, #156	; 0x9c
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015b32:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8015b36:	6839      	ldr	r1, [r7, #0]
 8015b38:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 8015b3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f006 fa6e 	bl	801c020 <_ZNK14MockNamedValue9getCopierEv>
 8015b44:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8015b48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d013      	beq.n	8015b78 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8015b50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	3308      	adds	r3, #8
 8015b58:	681c      	ldr	r4, [r3, #0]
 8015b5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015b5e:	691d      	ldr	r5, [r3, #16]
 8015b60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015b64:	4618      	mov	r0, r3
 8015b66:	f006 fa2b 	bl	801bfc0 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	461a      	mov	r2, r3
 8015b6e:	4629      	mov	r1, r5
 8015b70:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8015b74:	47a0      	blx	r4
 8015b76:	e0c0      	b.n	8015cfa <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8015b78:	2500      	movs	r5, #0
 8015b7a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015b7e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015b82:	4611      	mov	r1, r2
 8015b84:	4618      	mov	r0, r3
 8015b86:	f005 ff0e 	bl	801b9a6 <_ZNK14MockNamedValue7getTypeEv>
 8015b8a:	2601      	movs	r6, #1
 8015b8c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8015b90:	4962      	ldr	r1, [pc, #392]	; (8015d1c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 8015b92:	4618      	mov	r0, r3
 8015b94:	f7f4 ff13 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8015b98:	f04f 0801 	mov.w	r8, #1
 8015b9c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8015ba0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015ba4:	4611      	mov	r1, r2
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f7f5 facd 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8015bac:	4603      	mov	r3, r0
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d015      	beq.n	8015bde <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8015bb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015bb6:	f103 0408 	add.w	r4, r3, #8
 8015bba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015bbe:	4958      	ldr	r1, [pc, #352]	; (8015d20 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	f7f4 fefc 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8015bc6:	2501      	movs	r5, #1
 8015bc8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015bcc:	4619      	mov	r1, r3
 8015bce:	4620      	mov	r0, r4
 8015bd0:	f7f5 fab9 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d001      	beq.n	8015bde <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8015bda:	2401      	movs	r4, #1
 8015bdc:	e000      	b.n	8015be0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 8015bde:	2400      	movs	r4, #0
 8015be0:	2d00      	cmp	r5, #0
 8015be2:	d004      	beq.n	8015bee <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 8015be4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015be8:	4618      	mov	r0, r3
 8015bea:	f7f5 faa0 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8015bee:	f1b8 0f00 	cmp.w	r8, #0
 8015bf2:	d004      	beq.n	8015bfe <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 8015bf4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f7f5 fa98 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8015bfe:	2e00      	cmp	r6, #0
 8015c00:	d004      	beq.n	8015c0c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 8015c02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015c06:	4618      	mov	r0, r3
 8015c08:	f7f5 fa91 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8015c0c:	2c00      	cmp	r4, #0
 8015c0e:	d018      	beq.n	8015c42 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 8015c10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015c14:	4618      	mov	r0, r3
 8015c16:	f006 f95b 	bl	801bed0 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8015c1a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 8015c1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015c22:	4618      	mov	r0, r3
 8015c24:	f006 f9e4 	bl	801bff0 <_ZNK14MockNamedValue7getSizeEv>
 8015c28:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8015c2c:	4b3d      	ldr	r3, [pc, #244]	; (8015d24 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015c34:	6910      	ldr	r0, [r2, #16]
 8015c36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8015c3a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8015c3e:	4798      	blx	r3
 8015c40:	e05b      	b.n	8015cfa <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 8015c42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015c46:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015c4a:	4611      	mov	r1, r2
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f005 fe9b 	bl	801b988 <_ZNK14MockNamedValue7getNameEv>
 8015c52:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015c56:	4934      	ldr	r1, [pc, #208]	; (8015d28 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f7f4 feb0 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8015c5e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8015c62:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015c66:	4611      	mov	r1, r2
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f7f5 fab1 	bl	800b1d0 <_ZneRK12SimpleStringS1_>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	461c      	mov	r4, r3
 8015c72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015c76:	4618      	mov	r0, r3
 8015c78:	f7f5 fa59 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8015c7c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015c80:	4618      	mov	r0, r3
 8015c82:	f7f5 fa54 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8015c86:	2c00      	cmp	r4, #0
 8015c88:	d037      	beq.n	8015cfa <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8015c8a:	683b      	ldr	r3, [r7, #0]
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	339c      	adds	r3, #156	; 0x9c
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015c96:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8015c9a:	6839      	ldr	r1, [r7, #0]
 8015c9c:	4798      	blx	r3
 8015c9e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015ca2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8015ca6:	4611      	mov	r1, r2
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f005 fe7c 	bl	801b9a6 <_ZNK14MockNamedValue7getTypeEv>
 8015cae:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f005 fbd2 	bl	801b45c <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	33cc      	adds	r3, #204	; 0xcc
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	6878      	ldr	r0, [r7, #4]
 8015cc2:	4798      	blx	r3
 8015cc4:	4601      	mov	r1, r0
 8015cc6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8015cca:	f107 030c 	add.w	r3, r7, #12
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f005 faee 	bl	801b2b0 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	33dc      	adds	r3, #220	; 0xdc
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	f107 020c 	add.w	r2, r7, #12
 8015ce0:	4611      	mov	r1, r2
 8015ce2:	6878      	ldr	r0, [r7, #4]
 8015ce4:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8015ce6:	f107 030c 	add.w	r3, r7, #12
 8015cea:	4618      	mov	r0, r3
 8015cec:	f001 ffe2 	bl	8017cb4 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8015cf0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	f7f5 fa1a 	bl	800b12e <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8015cfa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f005 fbac 	bl	801b45c <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8015d04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015d08:	695b      	ldr	r3, [r3, #20]
 8015d0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8015d0e:	e705      	b.n	8015b1c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 8015d10:	bf00      	nop
 8015d12:	37f0      	adds	r7, #240	; 0xf0
 8015d14:	46bd      	mov	sp, r7
 8015d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d1a:	bf00      	nop
 8015d1c:	0802383c 	.word	0x0802383c
 8015d20:	08023848 	.word	0x08023848
 8015d24:	200000d0 	.word	0x200000d0
 8015d28:	08023838 	.word	0x08023838

08015d2c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b084      	sub	sp, #16
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	331c      	adds	r3, #28
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f004 f9bb 	bl	801a0b4 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 8015d3e:	4602      	mov	r2, r0
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	699b      	ldr	r3, [r3, #24]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d00f      	beq.n	8015d6c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	33d4      	adds	r3, #212	; 0xd4
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	687a      	ldr	r2, [r7, #4]
 8015d56:	6992      	ldr	r2, [r2, #24]
 8015d58:	4611      	mov	r1, r2
 8015d5a:	6878      	ldr	r0, [r7, #4]
 8015d5c:	4798      	blx	r3
        callHasSucceeded();
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	33d0      	adds	r3, #208	; 0xd0
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	6878      	ldr	r0, [r7, #4]
 8015d68:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 8015d6a:	e00f      	b.n	8015d8c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	331c      	adds	r3, #28
 8015d70:	4618      	mov	r0, r3
 8015d72:	f004 f9cc 	bl	801a10e <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8015d76:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d006      	beq.n	8015d8c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	33d4      	adds	r3, #212	; 0xd4
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	68f9      	ldr	r1, [r7, #12]
 8015d88:	6878      	ldr	r0, [r7, #4]
 8015d8a:	4798      	blx	r3
}
 8015d8c:	bf00      	nop
 8015d8e:	3710      	adds	r7, #16
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}

08015d94 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b082      	sub	sp, #8
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	33ec      	adds	r3, #236	; 0xec
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	2102      	movs	r1, #2
 8015da6:	6878      	ldr	r0, [r7, #4]
 8015da8:	4798      	blx	r3
}
 8015daa:	bf00      	nop
 8015dac:	3708      	adds	r7, #8
 8015dae:	46bd      	mov	sp, r7
 8015db0:	bd80      	pop	{r7, pc}

08015db2 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 8015db2:	b580      	push	{r7, lr}
 8015db4:	b082      	sub	sp, #8
 8015db6:	af00      	add	r7, sp, #0
 8015db8:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	699b      	ldr	r3, [r3, #24]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d00b      	beq.n	8015dda <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	699a      	ldr	r2, [r3, #24]
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	699b      	ldr	r3, [r3, #24]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	33ec      	adds	r3, #236	; 0xec
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	4610      	mov	r0, r2
 8015dd2:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	331c      	adds	r3, #28
 8015dde:	4618      	mov	r0, r3
 8015de0:	f004 f85c 	bl	8019e9c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 8015de4:	bf00      	nop
 8015de6:	3708      	adds	r7, #8
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}

08015dec <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 8015dec:	b590      	push	{r4, r7, lr}
 8015dee:	b091      	sub	sp, #68	; 0x44
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
 8015df4:	6039      	str	r1, [r7, #0]
    setName(name);
 8015df6:	6839      	ldr	r1, [r7, #0]
 8015df8:	6878      	ldr	r0, [r7, #4]
 8015dfa:	f7ff fdb3 	bl	8015964 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	33ec      	adds	r3, #236	; 0xec
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	2100      	movs	r1, #0
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	331c      	adds	r3, #28
 8015e10:	6839      	ldr	r1, [r7, #0]
 8015e12:	4618      	mov	r0, r3
 8015e14:	f003 ffec 	bl	8019df0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	331c      	adds	r3, #28
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	f003 fe7c 	bl	8019b1a <_ZNK21MockExpectedCallsList7isEmptyEv>
 8015e22:	4603      	mov	r3, r0
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d01d      	beq.n	8015e64 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	33cc      	adds	r3, #204	; 0xcc
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	4798      	blx	r3
 8015e34:	4601      	mov	r1, r0
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e3a:	f107 000c 	add.w	r0, r7, #12
 8015e3e:	683a      	ldr	r2, [r7, #0]
 8015e40:	f004 fe24 	bl	801aa8c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	33dc      	adds	r3, #220	; 0xdc
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	f107 020c 	add.w	r2, r7, #12
 8015e50:	4611      	mov	r1, r2
 8015e52:	6878      	ldr	r0, [r7, #4]
 8015e54:	4798      	blx	r3
        return *this;
 8015e56:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8015e58:	f107 030c 	add.w	r3, r7, #12
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f001 ff4b 	bl	8017cf8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8015e62:	e006      	b.n	8015e72 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	33d8      	adds	r3, #216	; 0xd8
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	6878      	ldr	r0, [r7, #4]
 8015e6e:	4798      	blx	r3

    return *this;
 8015e70:	687c      	ldr	r4, [r7, #4]
 8015e72:	4623      	mov	r3, r4
}
 8015e74:	4618      	mov	r0, r3
 8015e76:	3744      	adds	r7, #68	; 0x44
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	bd90      	pop	{r4, r7, pc}

08015e7c <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 8015e7c:	b480      	push	{r7}
 8015e7e:	b083      	sub	sp, #12
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
 8015e84:	6039      	str	r1, [r7, #0]
    return *this;
 8015e86:	687b      	ldr	r3, [r7, #4]
}
 8015e88:	4618      	mov	r0, r3
 8015e8a:	370c      	adds	r7, #12
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e92:	4770      	bx	lr

08015e94 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 8015e94:	b590      	push	{r4, r7, lr}
 8015e96:	b097      	sub	sp, #92	; 0x5c
 8015e98:	af02      	add	r7, sp, #8
 8015e9a:	6078      	str	r0, [r7, #4]
 8015e9c:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	33c0      	adds	r3, #192	; 0xc0
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	6878      	ldr	r0, [r7, #4]
 8015ea8:	4798      	blx	r3
 8015eaa:	4603      	mov	r3, r0
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d164      	bne.n	8015f7a <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	33ec      	adds	r3, #236	; 0xec
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	2100      	movs	r1, #0
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	33e8      	adds	r3, #232	; 0xe8
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	6878      	ldr	r0, [r7, #4]
 8015ec8:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	331c      	adds	r3, #28
 8015ece:	6839      	ldr	r1, [r7, #0]
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f004 f86b 	bl	8019fac <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	331c      	adds	r3, #28
 8015eda:	4618      	mov	r0, r3
 8015edc:	f003 fe1d 	bl	8019b1a <_ZNK21MockExpectedCallsList7isEmptyEv>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d02b      	beq.n	8015f3e <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	33cc      	adds	r3, #204	; 0xcc
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	4798      	blx	r3
 8015ef2:	4604      	mov	r4, r0
 8015ef4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015ef8:	6879      	ldr	r1, [r7, #4]
 8015efa:	4618      	mov	r0, r3
 8015efc:	f7ff fd41 	bl	8015982 <_ZNK21MockCheckedActualCall7getNameEv>
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f04:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015f08:	f107 000c 	add.w	r0, r7, #12
 8015f0c:	9300      	str	r3, [sp, #0]
 8015f0e:	683b      	ldr	r3, [r7, #0]
 8015f10:	4621      	mov	r1, r4
 8015f12:	f004 fe7f 	bl	801ac14 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8015f16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f7f5 f907 	bl	800b12e <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	33dc      	adds	r3, #220	; 0xdc
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	f107 020c 	add.w	r2, r7, #12
 8015f2c:	4611      	mov	r1, r2
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8015f32:	f107 030c 	add.w	r3, r7, #12
 8015f36:	4618      	mov	r0, r3
 8015f38:	f001 ff00 	bl	8017d3c <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8015f3c:	e01e      	b.n	8015f7c <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	f103 041c 	add.w	r4, r3, #28
 8015f44:	683b      	ldr	r3, [r7, #0]
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	335c      	adds	r3, #92	; 0x5c
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015f50:	6839      	ldr	r1, [r7, #0]
 8015f52:	4610      	mov	r0, r2
 8015f54:	4798      	blx	r3
 8015f56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015f5a:	4619      	mov	r1, r3
 8015f5c:	4620      	mov	r0, r4
 8015f5e:	f004 f9b8 	bl	801a2d2 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8015f62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015f66:	4618      	mov	r0, r3
 8015f68:	f7f5 f8e1 	bl	800b12e <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	33d8      	adds	r3, #216	; 0xd8
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	4798      	blx	r3
 8015f78:	e000      	b.n	8015f7c <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8015f7a:	bf00      	nop
}
 8015f7c:	3754      	adds	r7, #84	; 0x54
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	bd90      	pop	{r4, r7, pc}

08015f82 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 8015f82:	b590      	push	{r4, r7, lr}
 8015f84:	b097      	sub	sp, #92	; 0x5c
 8015f86:	af02      	add	r7, sp, #8
 8015f88:	6078      	str	r0, [r7, #4]
 8015f8a:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	33c0      	adds	r3, #192	; 0xc0
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	6878      	ldr	r0, [r7, #4]
 8015f96:	4798      	blx	r3
 8015f98:	4603      	mov	r3, r0
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d164      	bne.n	8016068 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	33ec      	adds	r3, #236	; 0xec
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	2100      	movs	r1, #0
 8015fa8:	6878      	ldr	r0, [r7, #4]
 8015faa:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	33e8      	adds	r3, #232	; 0xe8
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	331c      	adds	r3, #28
 8015fbc:	6839      	ldr	r1, [r7, #0]
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f004 f820 	bl	801a004 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	331c      	adds	r3, #28
 8015fc8:	4618      	mov	r0, r3
 8015fca:	f003 fda6 	bl	8019b1a <_ZNK21MockExpectedCallsList7isEmptyEv>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d02b      	beq.n	801602c <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	33cc      	adds	r3, #204	; 0xcc
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	6878      	ldr	r0, [r7, #4]
 8015fde:	4798      	blx	r3
 8015fe0:	4604      	mov	r4, r0
 8015fe2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015fe6:	6879      	ldr	r1, [r7, #4]
 8015fe8:	4618      	mov	r0, r3
 8015fea:	f7ff fcca 	bl	8015982 <_ZNK21MockCheckedActualCall7getNameEv>
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ff2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015ff6:	f107 000c 	add.w	r0, r7, #12
 8015ffa:	9300      	str	r3, [sp, #0]
 8015ffc:	683b      	ldr	r3, [r7, #0]
 8015ffe:	4621      	mov	r1, r4
 8016000:	f004 ff6a 	bl	801aed8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8016004:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016008:	4618      	mov	r0, r3
 801600a:	f7f5 f890 	bl	800b12e <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	33dc      	adds	r3, #220	; 0xdc
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	f107 020c 	add.w	r2, r7, #12
 801601a:	4611      	mov	r1, r2
 801601c:	6878      	ldr	r0, [r7, #4]
 801601e:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8016020:	f107 030c 	add.w	r3, r7, #12
 8016024:	4618      	mov	r0, r3
 8016026:	f001 feab 	bl	8017d80 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801602a:	e01e      	b.n	801606a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	f103 041c 	add.w	r4, r3, #28
 8016032:	683b      	ldr	r3, [r7, #0]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	335c      	adds	r3, #92	; 0x5c
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801603e:	6839      	ldr	r1, [r7, #0]
 8016040:	4610      	mov	r0, r2
 8016042:	4798      	blx	r3
 8016044:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016048:	4619      	mov	r1, r3
 801604a:	4620      	mov	r0, r4
 801604c:	f004 f95e 	bl	801a30c <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8016050:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016054:	4618      	mov	r0, r3
 8016056:	f7f5 f86a 	bl	800b12e <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	33d8      	adds	r3, #216	; 0xd8
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	6878      	ldr	r0, [r7, #4]
 8016064:	4798      	blx	r3
 8016066:	e000      	b.n	801606a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8016068:	bf00      	nop
}
 801606a:	3754      	adds	r7, #84	; 0x54
 801606c:	46bd      	mov	sp, r7
 801606e:	bd90      	pop	{r4, r7, pc}

08016070 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8016070:	b590      	push	{r4, r7, lr}
 8016072:	b093      	sub	sp, #76	; 0x4c
 8016074:	af00      	add	r7, sp, #0
 8016076:	60f8      	str	r0, [r7, #12]
 8016078:	60b9      	str	r1, [r7, #8]
 801607a:	4613      	mov	r3, r2
 801607c:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 801607e:	f107 0310 	add.w	r3, r7, #16
 8016082:	68b9      	ldr	r1, [r7, #8]
 8016084:	4618      	mov	r0, r3
 8016086:	f005 f9bf 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801608a:	79fa      	ldrb	r2, [r7, #7]
 801608c:	f107 0310 	add.w	r3, r7, #16
 8016090:	4611      	mov	r1, r2
 8016092:	4618      	mov	r0, r3
 8016094:	f005 fa0a 	bl	801b4ac <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	33e0      	adds	r3, #224	; 0xe0
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	f107 0210 	add.w	r2, r7, #16
 80160a4:	4611      	mov	r1, r2
 80160a6:	68f8      	ldr	r0, [r7, #12]
 80160a8:	4798      	blx	r3
    return *this;
 80160aa:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80160ac:	f107 0310 	add.w	r3, r7, #16
 80160b0:	4618      	mov	r0, r3
 80160b2:	f005 f9d3 	bl	801b45c <_ZN14MockNamedValueD1Ev>
    return *this;
 80160b6:	4623      	mov	r3, r4
}
 80160b8:	4618      	mov	r0, r3
 80160ba:	374c      	adds	r7, #76	; 0x4c
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd90      	pop	{r4, r7, pc}

080160c0 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80160c0:	b590      	push	{r4, r7, lr}
 80160c2:	b093      	sub	sp, #76	; 0x4c
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	60f8      	str	r0, [r7, #12]
 80160c8:	60b9      	str	r1, [r7, #8]
 80160ca:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80160cc:	f107 0310 	add.w	r3, r7, #16
 80160d0:	68b9      	ldr	r1, [r7, #8]
 80160d2:	4618      	mov	r0, r3
 80160d4:	f005 f998 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80160d8:	f107 0310 	add.w	r3, r7, #16
 80160dc:	6879      	ldr	r1, [r7, #4]
 80160de:	4618      	mov	r0, r3
 80160e0:	f005 fa08 	bl	801b4f4 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	33e0      	adds	r3, #224	; 0xe0
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	f107 0210 	add.w	r2, r7, #16
 80160f0:	4611      	mov	r1, r2
 80160f2:	68f8      	ldr	r0, [r7, #12]
 80160f4:	4798      	blx	r3
    return *this;
 80160f6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80160f8:	f107 0310 	add.w	r3, r7, #16
 80160fc:	4618      	mov	r0, r3
 80160fe:	f005 f9ad 	bl	801b45c <_ZN14MockNamedValueD1Ev>
    return *this;
 8016102:	4623      	mov	r3, r4
}
 8016104:	4618      	mov	r0, r3
 8016106:	374c      	adds	r7, #76	; 0x4c
 8016108:	46bd      	mov	sp, r7
 801610a:	bd90      	pop	{r4, r7, pc}

0801610c <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 801610c:	b590      	push	{r4, r7, lr}
 801610e:	b093      	sub	sp, #76	; 0x4c
 8016110:	af00      	add	r7, sp, #0
 8016112:	60f8      	str	r0, [r7, #12]
 8016114:	60b9      	str	r1, [r7, #8]
 8016116:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016118:	f107 0310 	add.w	r3, r7, #16
 801611c:	68b9      	ldr	r1, [r7, #8]
 801611e:	4618      	mov	r0, r3
 8016120:	f005 f972 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016124:	f107 0310 	add.w	r3, r7, #16
 8016128:	6879      	ldr	r1, [r7, #4]
 801612a:	4618      	mov	r0, r3
 801612c:	f005 fa04 	bl	801b538 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	33e0      	adds	r3, #224	; 0xe0
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	f107 0210 	add.w	r2, r7, #16
 801613c:	4611      	mov	r1, r2
 801613e:	68f8      	ldr	r0, [r7, #12]
 8016140:	4798      	blx	r3
    return *this;
 8016142:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016144:	f107 0310 	add.w	r3, r7, #16
 8016148:	4618      	mov	r0, r3
 801614a:	f005 f987 	bl	801b45c <_ZN14MockNamedValueD1Ev>
    return *this;
 801614e:	4623      	mov	r3, r4
}
 8016150:	4618      	mov	r0, r3
 8016152:	374c      	adds	r7, #76	; 0x4c
 8016154:	46bd      	mov	sp, r7
 8016156:	bd90      	pop	{r4, r7, pc}

08016158 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8016158:	b590      	push	{r4, r7, lr}
 801615a:	b093      	sub	sp, #76	; 0x4c
 801615c:	af00      	add	r7, sp, #0
 801615e:	60f8      	str	r0, [r7, #12]
 8016160:	60b9      	str	r1, [r7, #8]
 8016162:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016164:	f107 0310 	add.w	r3, r7, #16
 8016168:	68b9      	ldr	r1, [r7, #8]
 801616a:	4618      	mov	r0, r3
 801616c:	f005 f94c 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016170:	f107 0310 	add.w	r3, r7, #16
 8016174:	6879      	ldr	r1, [r7, #4]
 8016176:	4618      	mov	r0, r3
 8016178:	f005 fa22 	bl	801b5c0 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	33e0      	adds	r3, #224	; 0xe0
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	f107 0210 	add.w	r2, r7, #16
 8016188:	4611      	mov	r1, r2
 801618a:	68f8      	ldr	r0, [r7, #12]
 801618c:	4798      	blx	r3
    return *this;
 801618e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016190:	f107 0310 	add.w	r3, r7, #16
 8016194:	4618      	mov	r0, r3
 8016196:	f005 f961 	bl	801b45c <_ZN14MockNamedValueD1Ev>
    return *this;
 801619a:	4623      	mov	r3, r4
}
 801619c:	4618      	mov	r0, r3
 801619e:	374c      	adds	r7, #76	; 0x4c
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd90      	pop	{r4, r7, pc}

080161a4 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 80161a4:	b590      	push	{r4, r7, lr}
 80161a6:	b093      	sub	sp, #76	; 0x4c
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	60f8      	str	r0, [r7, #12]
 80161ac:	60b9      	str	r1, [r7, #8]
 80161ae:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80161b0:	f107 0310 	add.w	r3, r7, #16
 80161b4:	68b9      	ldr	r1, [r7, #8]
 80161b6:	4618      	mov	r0, r3
 80161b8:	f005 f926 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80161bc:	f107 0310 	add.w	r3, r7, #16
 80161c0:	6879      	ldr	r1, [r7, #4]
 80161c2:	4618      	mov	r0, r3
 80161c4:	f005 f9da 	bl	801b57c <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	33e0      	adds	r3, #224	; 0xe0
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	f107 0210 	add.w	r2, r7, #16
 80161d4:	4611      	mov	r1, r2
 80161d6:	68f8      	ldr	r0, [r7, #12]
 80161d8:	4798      	blx	r3
    return *this;
 80161da:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80161dc:	f107 0310 	add.w	r3, r7, #16
 80161e0:	4618      	mov	r0, r3
 80161e2:	f005 f93b 	bl	801b45c <_ZN14MockNamedValueD1Ev>
    return *this;
 80161e6:	4623      	mov	r3, r4
}
 80161e8:	4618      	mov	r0, r3
 80161ea:	374c      	adds	r7, #76	; 0x4c
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bd90      	pop	{r4, r7, pc}

080161f0 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 80161f0:	b5b0      	push	{r4, r5, r7, lr}
 80161f2:	b086      	sub	sp, #24
 80161f4:	af02      	add	r7, sp, #8
 80161f6:	60f8      	str	r0, [r7, #12]
 80161f8:	60b9      	str	r1, [r7, #8]
 80161fa:	4639      	mov	r1, r7
 80161fc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8016200:	f7fb ffc0 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8016204:	4604      	mov	r4, r0
 8016206:	6823      	ldr	r3, [r4, #0]
 8016208:	3368      	adds	r3, #104	; 0x68
 801620a:	681d      	ldr	r5, [r3, #0]
 801620c:	f7fb ffca 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016210:	4603      	mov	r3, r0
 8016212:	9300      	str	r3, [sp, #0]
 8016214:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8016218:	4a04      	ldr	r2, [pc, #16]	; (801622c <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801621a:	4905      	ldr	r1, [pc, #20]	; (8016230 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 801621c:	4620      	mov	r0, r4
 801621e:	47a8      	blx	r5
    return *this;
 8016220:	68fb      	ldr	r3, [r7, #12]
}
 8016222:	4618      	mov	r0, r3
 8016224:	3710      	adds	r7, #16
 8016226:	46bd      	mov	sp, r7
 8016228:	bdb0      	pop	{r4, r5, r7, pc}
 801622a:	bf00      	nop
 801622c:	08023850 	.word	0x08023850
 8016230:	0802386c 	.word	0x0802386c

08016234 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8016234:	b5b0      	push	{r4, r5, r7, lr}
 8016236:	b086      	sub	sp, #24
 8016238:	af02      	add	r7, sp, #8
 801623a:	60f8      	str	r0, [r7, #12]
 801623c:	60b9      	str	r1, [r7, #8]
 801623e:	4639      	mov	r1, r7
 8016240:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8016244:	f7fb ff9e 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8016248:	4604      	mov	r4, r0
 801624a:	6823      	ldr	r3, [r4, #0]
 801624c:	3368      	adds	r3, #104	; 0x68
 801624e:	681d      	ldr	r5, [r3, #0]
 8016250:	f7fb ffa8 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016254:	4603      	mov	r3, r0
 8016256:	9300      	str	r3, [sp, #0]
 8016258:	f44f 7388 	mov.w	r3, #272	; 0x110
 801625c:	4a04      	ldr	r2, [pc, #16]	; (8016270 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801625e:	4905      	ldr	r1, [pc, #20]	; (8016274 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8016260:	4620      	mov	r0, r4
 8016262:	47a8      	blx	r5
    return *this;
 8016264:	68fb      	ldr	r3, [r7, #12]
}
 8016266:	4618      	mov	r0, r3
 8016268:	3710      	adds	r7, #16
 801626a:	46bd      	mov	sp, r7
 801626c:	bdb0      	pop	{r4, r5, r7, pc}
 801626e:	bf00      	nop
 8016270:	08023850 	.word	0x08023850
 8016274:	08023898 	.word	0x08023898

08016278 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8016278:	b590      	push	{r4, r7, lr}
 801627a:	b093      	sub	sp, #76	; 0x4c
 801627c:	af00      	add	r7, sp, #0
 801627e:	60f8      	str	r0, [r7, #12]
 8016280:	60b9      	str	r1, [r7, #8]
 8016282:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 8016286:	f107 0310 	add.w	r3, r7, #16
 801628a:	68b9      	ldr	r1, [r7, #8]
 801628c:	4618      	mov	r0, r3
 801628e:	f005 f8bb 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016292:	f107 0310 	add.w	r3, r7, #16
 8016296:	ed97 0b00 	vldr	d0, [r7]
 801629a:	4618      	mov	r0, r3
 801629c:	f005 f9f0 	bl	801b680 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	33e0      	adds	r3, #224	; 0xe0
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	f107 0210 	add.w	r2, r7, #16
 80162ac:	4611      	mov	r1, r2
 80162ae:	68f8      	ldr	r0, [r7, #12]
 80162b0:	4798      	blx	r3
    return *this;
 80162b2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80162b4:	f107 0310 	add.w	r3, r7, #16
 80162b8:	4618      	mov	r0, r3
 80162ba:	f005 f8cf 	bl	801b45c <_ZN14MockNamedValueD1Ev>
    return *this;
 80162be:	4623      	mov	r3, r4
}
 80162c0:	4618      	mov	r0, r3
 80162c2:	374c      	adds	r7, #76	; 0x4c
 80162c4:	46bd      	mov	sp, r7
 80162c6:	bd90      	pop	{r4, r7, pc}

080162c8 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 80162c8:	b590      	push	{r4, r7, lr}
 80162ca:	b093      	sub	sp, #76	; 0x4c
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	60f8      	str	r0, [r7, #12]
 80162d0:	60b9      	str	r1, [r7, #8]
 80162d2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80162d4:	f107 0310 	add.w	r3, r7, #16
 80162d8:	68b9      	ldr	r1, [r7, #8]
 80162da:	4618      	mov	r0, r3
 80162dc:	f005 f894 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80162e0:	f107 0310 	add.w	r3, r7, #16
 80162e4:	6879      	ldr	r1, [r7, #4]
 80162e6:	4618      	mov	r0, r3
 80162e8:	f005 fa74 	bl	801b7d4 <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	33e0      	adds	r3, #224	; 0xe0
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	f107 0210 	add.w	r2, r7, #16
 80162f8:	4611      	mov	r1, r2
 80162fa:	68f8      	ldr	r0, [r7, #12]
 80162fc:	4798      	blx	r3
    return *this;
 80162fe:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016300:	f107 0310 	add.w	r3, r7, #16
 8016304:	4618      	mov	r0, r3
 8016306:	f005 f8a9 	bl	801b45c <_ZN14MockNamedValueD1Ev>
    return *this;
 801630a:	4623      	mov	r3, r4
}
 801630c:	4618      	mov	r0, r3
 801630e:	374c      	adds	r7, #76	; 0x4c
 8016310:	46bd      	mov	sp, r7
 8016312:	bd90      	pop	{r4, r7, pc}

08016314 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8016314:	b590      	push	{r4, r7, lr}
 8016316:	b093      	sub	sp, #76	; 0x4c
 8016318:	af00      	add	r7, sp, #0
 801631a:	60f8      	str	r0, [r7, #12]
 801631c:	60b9      	str	r1, [r7, #8]
 801631e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016320:	f107 0310 	add.w	r3, r7, #16
 8016324:	68b9      	ldr	r1, [r7, #8]
 8016326:	4618      	mov	r0, r3
 8016328:	f005 f86e 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801632c:	f107 0310 	add.w	r3, r7, #16
 8016330:	6879      	ldr	r1, [r7, #4]
 8016332:	4618      	mov	r0, r3
 8016334:	f005 f9e8 	bl	801b708 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	33e0      	adds	r3, #224	; 0xe0
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	f107 0210 	add.w	r2, r7, #16
 8016344:	4611      	mov	r1, r2
 8016346:	68f8      	ldr	r0, [r7, #12]
 8016348:	4798      	blx	r3
    return *this;
 801634a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801634c:	f107 0310 	add.w	r3, r7, #16
 8016350:	4618      	mov	r0, r3
 8016352:	f005 f883 	bl	801b45c <_ZN14MockNamedValueD1Ev>
    return *this;
 8016356:	4623      	mov	r3, r4
}
 8016358:	4618      	mov	r0, r3
 801635a:	374c      	adds	r7, #76	; 0x4c
 801635c:	46bd      	mov	sp, r7
 801635e:	bd90      	pop	{r4, r7, pc}

08016360 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8016360:	b590      	push	{r4, r7, lr}
 8016362:	b093      	sub	sp, #76	; 0x4c
 8016364:	af00      	add	r7, sp, #0
 8016366:	60f8      	str	r0, [r7, #12]
 8016368:	60b9      	str	r1, [r7, #8]
 801636a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801636c:	f107 0310 	add.w	r3, r7, #16
 8016370:	68b9      	ldr	r1, [r7, #8]
 8016372:	4618      	mov	r0, r3
 8016374:	f005 f848 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016378:	f107 0310 	add.w	r3, r7, #16
 801637c:	6879      	ldr	r1, [r7, #4]
 801637e:	4618      	mov	r0, r3
 8016380:	f005 f9e4 	bl	801b74c <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	33e0      	adds	r3, #224	; 0xe0
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	f107 0210 	add.w	r2, r7, #16
 8016390:	4611      	mov	r1, r2
 8016392:	68f8      	ldr	r0, [r7, #12]
 8016394:	4798      	blx	r3
    return *this;
 8016396:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016398:	f107 0310 	add.w	r3, r7, #16
 801639c:	4618      	mov	r0, r3
 801639e:	f005 f85d 	bl	801b45c <_ZN14MockNamedValueD1Ev>
    return *this;
 80163a2:	4623      	mov	r3, r4
}
 80163a4:	4618      	mov	r0, r3
 80163a6:	374c      	adds	r7, #76	; 0x4c
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd90      	pop	{r4, r7, pc}

080163ac <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 80163ac:	b590      	push	{r4, r7, lr}
 80163ae:	b093      	sub	sp, #76	; 0x4c
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	60f8      	str	r0, [r7, #12]
 80163b4:	60b9      	str	r1, [r7, #8]
 80163b6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80163b8:	f107 0310 	add.w	r3, r7, #16
 80163bc:	68b9      	ldr	r1, [r7, #8]
 80163be:	4618      	mov	r0, r3
 80163c0:	f005 f822 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80163c4:	f107 0310 	add.w	r3, r7, #16
 80163c8:	6879      	ldr	r1, [r7, #4]
 80163ca:	4618      	mov	r0, r3
 80163cc:	f005 f9e0 	bl	801b790 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	33e0      	adds	r3, #224	; 0xe0
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	f107 0210 	add.w	r2, r7, #16
 80163dc:	4611      	mov	r1, r2
 80163de:	68f8      	ldr	r0, [r7, #12]
 80163e0:	4798      	blx	r3
    return *this;
 80163e2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80163e4:	f107 0310 	add.w	r3, r7, #16
 80163e8:	4618      	mov	r0, r3
 80163ea:	f005 f837 	bl	801b45c <_ZN14MockNamedValueD1Ev>
    return *this;
 80163ee:	4623      	mov	r3, r4
}
 80163f0:	4618      	mov	r0, r3
 80163f2:	374c      	adds	r7, #76	; 0x4c
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bd90      	pop	{r4, r7, pc}

080163f8 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 80163f8:	b590      	push	{r4, r7, lr}
 80163fa:	b093      	sub	sp, #76	; 0x4c
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	60f8      	str	r0, [r7, #12]
 8016400:	60b9      	str	r1, [r7, #8]
 8016402:	607a      	str	r2, [r7, #4]
 8016404:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8016406:	f107 0310 	add.w	r3, r7, #16
 801640a:	68b9      	ldr	r1, [r7, #8]
 801640c:	4618      	mov	r0, r3
 801640e:	f004 fffb 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 8016412:	f107 0310 	add.w	r3, r7, #16
 8016416:	683a      	ldr	r2, [r7, #0]
 8016418:	6879      	ldr	r1, [r7, #4]
 801641a:	4618      	mov	r0, r3
 801641c:	f005 f9fc 	bl	801b818 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	33e0      	adds	r3, #224	; 0xe0
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	f107 0210 	add.w	r2, r7, #16
 801642c:	4611      	mov	r1, r2
 801642e:	68f8      	ldr	r0, [r7, #12]
 8016430:	4798      	blx	r3
    return *this;
 8016432:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016434:	f107 0310 	add.w	r3, r7, #16
 8016438:	4618      	mov	r0, r3
 801643a:	f005 f80f 	bl	801b45c <_ZN14MockNamedValueD1Ev>
    return *this;
 801643e:	4623      	mov	r3, r4
}
 8016440:	4618      	mov	r0, r3
 8016442:	374c      	adds	r7, #76	; 0x4c
 8016444:	46bd      	mov	sp, r7
 8016446:	bd90      	pop	{r4, r7, pc}

08016448 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8016448:	b590      	push	{r4, r7, lr}
 801644a:	b0a1      	sub	sp, #132	; 0x84
 801644c:	af00      	add	r7, sp, #0
 801644e:	60f8      	str	r0, [r7, #12]
 8016450:	60b9      	str	r1, [r7, #8]
 8016452:	607a      	str	r2, [r7, #4]
 8016454:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8016456:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801645a:	6879      	ldr	r1, [r7, #4]
 801645c:	4618      	mov	r0, r3
 801645e:	f004 ffd3 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 8016462:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016466:	683a      	ldr	r2, [r7, #0]
 8016468:	68b9      	ldr	r1, [r7, #8]
 801646a:	4618      	mov	r0, r3
 801646c:	f005 f9fa 	bl	801b864 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 8016470:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016474:	4618      	mov	r0, r3
 8016476:	f005 fdc7 	bl	801c008 <_ZNK14MockNamedValue13getComparatorEv>
 801647a:	4603      	mov	r3, r0
 801647c:	2b00      	cmp	r3, #0
 801647e:	bf0c      	ite	eq
 8016480:	2301      	moveq	r3, #1
 8016482:	2300      	movne	r3, #0
 8016484:	b2db      	uxtb	r3, r3
 8016486:	2b00      	cmp	r3, #0
 8016488:	d01c      	beq.n	80164c4 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	33cc      	adds	r3, #204	; 0xcc
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	68f8      	ldr	r0, [r7, #12]
 8016494:	4798      	blx	r3
 8016496:	4601      	mov	r1, r0
 8016498:	f107 0314 	add.w	r3, r7, #20
 801649c:	68ba      	ldr	r2, [r7, #8]
 801649e:	4618      	mov	r0, r3
 80164a0:	f004 fed6 	bl	801b250 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	33dc      	adds	r3, #220	; 0xdc
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	f107 0214 	add.w	r2, r7, #20
 80164b0:	4611      	mov	r1, r2
 80164b2:	68f8      	ldr	r0, [r7, #12]
 80164b4:	4798      	blx	r3
        return *this;
 80164b6:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 80164b8:	f107 0314 	add.w	r3, r7, #20
 80164bc:	4618      	mov	r0, r3
 80164be:	f001 fc81 	bl	8017dc4 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 80164c2:	e009      	b.n	80164d8 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	33e0      	adds	r3, #224	; 0xe0
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80164d0:	4611      	mov	r1, r2
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	4798      	blx	r3
    return *this;
 80164d6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80164d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80164dc:	4618      	mov	r0, r3
 80164de:	f004 ffbd 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 80164e2:	4623      	mov	r3, r4
}
 80164e4:	4618      	mov	r0, r3
 80164e6:	3784      	adds	r7, #132	; 0x84
 80164e8:	46bd      	mov	sp, r7
 80164ea:	bd90      	pop	{r4, r7, pc}

080164ec <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 80164ec:	b590      	push	{r4, r7, lr}
 80164ee:	b095      	sub	sp, #84	; 0x54
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	60f8      	str	r0, [r7, #12]
 80164f4:	60b9      	str	r1, [r7, #8]
 80164f6:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	33f0      	adds	r3, #240	; 0xf0
 80164fe:	681c      	ldr	r4, [r3, #0]
 8016500:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016504:	4917      	ldr	r1, [pc, #92]	; (8016564 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 8016506:	4618      	mov	r0, r3
 8016508:	f7f4 fa59 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801650c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	68b9      	ldr	r1, [r7, #8]
 8016514:	68f8      	ldr	r0, [r7, #12]
 8016516:	47a0      	blx	r4
 8016518:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801651c:	4618      	mov	r0, r3
 801651e:	f7f4 fe06 	bl	800b12e <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 8016522:	f107 0310 	add.w	r3, r7, #16
 8016526:	68b9      	ldr	r1, [r7, #8]
 8016528:	4618      	mov	r0, r3
 801652a:	f004 ff6d 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 801652e:	f107 0310 	add.w	r3, r7, #16
 8016532:	6879      	ldr	r1, [r7, #4]
 8016534:	4618      	mov	r0, r3
 8016536:	f005 f8e7 	bl	801b708 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	33e4      	adds	r3, #228	; 0xe4
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	f107 0210 	add.w	r2, r7, #16
 8016546:	4611      	mov	r1, r2
 8016548:	68f8      	ldr	r0, [r7, #12]
 801654a:	4798      	blx	r3

    return *this;
 801654c:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 801654e:	f107 0310 	add.w	r3, r7, #16
 8016552:	4618      	mov	r0, r3
 8016554:	f004 ff82 	bl	801b45c <_ZN14MockNamedValueD1Ev>
    return *this;
 8016558:	4623      	mov	r3, r4
}
 801655a:	4618      	mov	r0, r3
 801655c:	3754      	adds	r7, #84	; 0x54
 801655e:	46bd      	mov	sp, r7
 8016560:	bd90      	pop	{r4, r7, pc}
 8016562:	bf00      	nop
 8016564:	08023848 	.word	0x08023848

08016568 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 8016568:	b590      	push	{r4, r7, lr}
 801656a:	b093      	sub	sp, #76	; 0x4c
 801656c:	af00      	add	r7, sp, #0
 801656e:	60f8      	str	r0, [r7, #12]
 8016570:	60b9      	str	r1, [r7, #8]
 8016572:	607a      	str	r2, [r7, #4]
 8016574:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	33f0      	adds	r3, #240	; 0xf0
 801657c:	681c      	ldr	r4, [r3, #0]
 801657e:	683b      	ldr	r3, [r7, #0]
 8016580:	68ba      	ldr	r2, [r7, #8]
 8016582:	6879      	ldr	r1, [r7, #4]
 8016584:	68f8      	ldr	r0, [r7, #12]
 8016586:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 8016588:	f107 0310 	add.w	r3, r7, #16
 801658c:	6879      	ldr	r1, [r7, #4]
 801658e:	4618      	mov	r0, r3
 8016590:	f004 ff3a 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 8016594:	f107 0310 	add.w	r3, r7, #16
 8016598:	683a      	ldr	r2, [r7, #0]
 801659a:	68b9      	ldr	r1, [r7, #8]
 801659c:	4618      	mov	r0, r3
 801659e:	f005 f961 	bl	801b864 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	33e4      	adds	r3, #228	; 0xe4
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	f107 0210 	add.w	r2, r7, #16
 80165ae:	4611      	mov	r1, r2
 80165b0:	68f8      	ldr	r0, [r7, #12]
 80165b2:	4798      	blx	r3

    return *this;
 80165b4:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 80165b6:	f107 0310 	add.w	r3, r7, #16
 80165ba:	4618      	mov	r0, r3
 80165bc:	f004 ff4e 	bl	801b45c <_ZN14MockNamedValueD1Ev>
    return *this;
 80165c0:	4623      	mov	r3, r4
}
 80165c2:	4618      	mov	r0, r3
 80165c4:	374c      	adds	r7, #76	; 0x4c
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd90      	pop	{r4, r7, pc}

080165ca <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 80165ca:	b480      	push	{r7}
 80165cc:	b083      	sub	sp, #12
 80165ce:	af00      	add	r7, sp, #0
 80165d0:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	7d1b      	ldrb	r3, [r3, #20]
 80165d6:	2b02      	cmp	r3, #2
 80165d8:	bf0c      	ite	eq
 80165da:	2301      	moveq	r3, #1
 80165dc:	2300      	movne	r3, #0
 80165de:	b2db      	uxtb	r3, r3
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	370c      	adds	r7, #12
 80165e4:	46bd      	mov	sp, r7
 80165e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ea:	4770      	bx	lr

080165ec <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 80165ec:	b480      	push	{r7}
 80165ee:	b083      	sub	sp, #12
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	7d1b      	ldrb	r3, [r3, #20]
 80165f8:	2b01      	cmp	r3, #1
 80165fa:	bf0c      	ite	eq
 80165fc:	2301      	moveq	r3, #1
 80165fe:	2300      	movne	r3, #0
 8016600:	b2db      	uxtb	r3, r3
}
 8016602:	4618      	mov	r0, r3
 8016604:	370c      	adds	r7, #12
 8016606:	46bd      	mov	sp, r7
 8016608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660c:	4770      	bx	lr
	...

08016610 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 8016610:	b5b0      	push	{r4, r5, r7, lr}
 8016612:	b096      	sub	sp, #88	; 0x58
 8016614:	af02      	add	r7, sp, #8
 8016616:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	7d5b      	ldrb	r3, [r3, #21]
 801661c:	2b00      	cmp	r3, #0
 801661e:	f040 80bc 	bne.w	801679a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	2201      	movs	r2, #1
 8016626:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	7d1b      	ldrb	r3, [r3, #20]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d014      	beq.n	801665a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	7d1b      	ldrb	r3, [r3, #20]
 8016634:	2b02      	cmp	r3, #2
 8016636:	d10a      	bne.n	801664e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	6998      	ldr	r0, [r3, #24]
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	699b      	ldr	r3, [r3, #24]
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	33d8      	adds	r3, #216	; 0xd8
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	687a      	ldr	r2, [r7, #4]
 8016648:	68d2      	ldr	r2, [r2, #12]
 801664a:	4611      	mov	r1, r2
 801664c:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	331c      	adds	r3, #28
 8016652:	4618      	mov	r0, r3
 8016654:	f003 fe07 	bl	801a266 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8016658:	e0a0      	b.n	801679c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	331c      	adds	r3, #28
 801665e:	4618      	mov	r0, r3
 8016660:	f003 fac3 	bl	8019bea <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 8016664:	4603      	mov	r3, r0
 8016666:	2b00      	cmp	r3, #0
 8016668:	d00f      	beq.n	801668a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 801666a:	f7fb fd8b 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801666e:	4604      	mov	r4, r0
 8016670:	6823      	ldr	r3, [r4, #0]
 8016672:	3368      	adds	r3, #104	; 0x68
 8016674:	681d      	ldr	r5, [r3, #0]
 8016676:	f7fb fd95 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801667a:	4603      	mov	r3, r0
 801667c:	9300      	str	r3, [sp, #0]
 801667e:	f240 1385 	movw	r3, #389	; 0x185
 8016682:	4a48      	ldr	r2, [pc, #288]	; (80167a4 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8016684:	4948      	ldr	r1, [pc, #288]	; (80167a8 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 8016686:	4620      	mov	r0, r4
 8016688:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	331c      	adds	r3, #28
 801668e:	4618      	mov	r0, r3
 8016690:	f003 fd5f 	bl	801a152 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8016694:	4602      	mov	r2, r0
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	699b      	ldr	r3, [r3, #24]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d01f      	beq.n	80166e2 <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	699a      	ldr	r2, [r3, #24]
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	699b      	ldr	r3, [r3, #24]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	33e4      	adds	r3, #228	; 0xe4
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	4610      	mov	r0, r2
 80166b2:	4798      	blx	r3
        callHasSucceeded();
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	33d0      	adds	r3, #208	; 0xd0
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	6878      	ldr	r0, [r7, #4]
 80166be:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	6998      	ldr	r0, [r3, #24]
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	699b      	ldr	r3, [r3, #24]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	33d8      	adds	r3, #216	; 0xd8
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	687a      	ldr	r2, [r7, #4]
 80166d0:	68d2      	ldr	r2, [r2, #12]
 80166d2:	4611      	mov	r1, r2
 80166d4:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	331c      	adds	r3, #28
 80166da:	4618      	mov	r0, r3
 80166dc:	f003 fdc3 	bl	801a266 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 80166e0:	e05c      	b.n	801679c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	331c      	adds	r3, #28
 80166e6:	4618      	mov	r0, r3
 80166e8:	f003 ffc4 	bl	801a674 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 80166ec:	4603      	mov	r3, r0
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d029      	beq.n	8016746 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	33cc      	adds	r3, #204	; 0xcc
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	6878      	ldr	r0, [r7, #4]
 80166fc:	4798      	blx	r3
 80166fe:	4604      	mov	r4, r0
 8016700:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016704:	6879      	ldr	r1, [r7, #4]
 8016706:	4618      	mov	r0, r3
 8016708:	f7ff f93b 	bl	8015982 <_ZNK21MockCheckedActualCall7getNameEv>
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016710:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016714:	f107 000c 	add.w	r0, r7, #12
 8016718:	4621      	mov	r1, r4
 801671a:	f004 fd21 	bl	801b160 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 801671e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016722:	4618      	mov	r0, r3
 8016724:	f7f4 fd03 	bl	800b12e <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	33dc      	adds	r3, #220	; 0xdc
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	f107 020c 	add.w	r2, r7, #12
 8016734:	4611      	mov	r1, r2
 8016736:	6878      	ldr	r0, [r7, #4]
 8016738:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801673a:	f107 030c 	add.w	r3, r7, #12
 801673e:	4618      	mov	r0, r3
 8016740:	f001 fb62 	bl	8017e08 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8016744:	e02a      	b.n	801679c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	33cc      	adds	r3, #204	; 0xcc
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	6878      	ldr	r0, [r7, #4]
 8016750:	4798      	blx	r3
 8016752:	4604      	mov	r4, r0
 8016754:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016758:	6879      	ldr	r1, [r7, #4]
 801675a:	4618      	mov	r0, r3
 801675c:	f7ff f911 	bl	8015982 <_ZNK21MockCheckedActualCall7getNameEv>
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016764:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016768:	f107 000c 	add.w	r0, r7, #12
 801676c:	4621      	mov	r1, r4
 801676e:	f004 fe05 	bl	801b37c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8016772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016776:	4618      	mov	r0, r3
 8016778:	f7f4 fcd9 	bl	800b12e <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	33dc      	adds	r3, #220	; 0xdc
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	f107 020c 	add.w	r2, r7, #12
 8016788:	4611      	mov	r1, r2
 801678a:	6878      	ldr	r0, [r7, #4]
 801678c:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801678e:	f107 030c 	add.w	r3, r7, #12
 8016792:	4618      	mov	r0, r3
 8016794:	f001 fb5a 	bl	8017e4c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8016798:	e000      	b.n	801679c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 801679a:	bf00      	nop
    }
}
 801679c:	3750      	adds	r7, #80	; 0x50
 801679e:	46bd      	mov	sp, r7
 80167a0:	bdb0      	pop	{r4, r5, r7, pc}
 80167a2:	bf00      	nop
 80167a4:	08023850 	.word	0x08023850
 80167a8:	080238b8 	.word	0x080238b8

080167ac <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 80167ac:	b480      	push	{r7}
 80167ae:	b083      	sub	sp, #12
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
 80167b4:	460b      	mov	r3, r1
 80167b6:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	78fa      	ldrb	r2, [r7, #3]
 80167bc:	751a      	strb	r2, [r3, #20]
}
 80167be:	bf00      	nop
 80167c0:	370c      	adds	r7, #12
 80167c2:	46bd      	mov	sp, r7
 80167c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c8:	4770      	bx	lr
	...

080167cc <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b084      	sub	sp, #16
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
 80167d4:	6039      	str	r1, [r7, #0]
    checkExpectations();
 80167d6:	683b      	ldr	r3, [r7, #0]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	33c4      	adds	r3, #196	; 0xc4
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	6838      	ldr	r0, [r7, #0]
 80167e0:	4798      	blx	r3
    if (matchingExpectation_)
 80167e2:	683b      	ldr	r3, [r7, #0]
 80167e4:	699b      	ldr	r3, [r3, #24]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d00a      	beq.n	8016800 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	6999      	ldr	r1, [r3, #24]
 80167ee:	683b      	ldr	r3, [r7, #0]
 80167f0:	699b      	ldr	r3, [r3, #24]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	3394      	adds	r3, #148	; 0x94
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	687a      	ldr	r2, [r7, #4]
 80167fa:	4610      	mov	r0, r2
 80167fc:	4798      	blx	r3
 80167fe:	e010      	b.n	8016822 <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 8016800:	f107 0308 	add.w	r3, r7, #8
 8016804:	4909      	ldr	r1, [pc, #36]	; (801682c <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 8016806:	4618      	mov	r0, r3
 8016808:	f7f4 f8d9 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801680c:	f107 0308 	add.w	r3, r7, #8
 8016810:	4619      	mov	r1, r3
 8016812:	6878      	ldr	r0, [r7, #4]
 8016814:	f004 fdf8 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
 8016818:	f107 0308 	add.w	r3, r7, #8
 801681c:	4618      	mov	r0, r3
 801681e:	f7f4 fc86 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8016822:	6878      	ldr	r0, [r7, #4]
 8016824:	3710      	adds	r7, #16
 8016826:	46bd      	mov	sp, r7
 8016828:	bd80      	pop	{r7, pc}
 801682a:	bf00      	nop
 801682c:	08023934 	.word	0x08023934

08016830 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b082      	sub	sp, #8
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
 8016838:	460b      	mov	r3, r1
 801683a:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	3350      	adds	r3, #80	; 0x50
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	6878      	ldr	r0, [r7, #4]
 8016846:	4798      	blx	r3
 8016848:	4603      	mov	r3, r0
 801684a:	f083 0301 	eor.w	r3, r3, #1
 801684e:	b2db      	uxtb	r3, r3
 8016850:	2b00      	cmp	r3, #0
 8016852:	d001      	beq.n	8016858 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8016854:	78fb      	ldrb	r3, [r7, #3]
 8016856:	e007      	b.n	8016868 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	335c      	adds	r3, #92	; 0x5c
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	6878      	ldr	r0, [r7, #4]
 8016862:	4798      	blx	r3
 8016864:	4603      	mov	r3, r0
 8016866:	bf00      	nop
}
 8016868:	4618      	mov	r0, r3
 801686a:	3708      	adds	r7, #8
 801686c:	46bd      	mov	sp, r7
 801686e:	bd80      	pop	{r7, pc}

08016870 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8016870:	b590      	push	{r4, r7, lr}
 8016872:	b091      	sub	sp, #68	; 0x44
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	3354      	adds	r3, #84	; 0x54
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	f107 0208 	add.w	r2, r7, #8
 8016884:	6879      	ldr	r1, [r7, #4]
 8016886:	4610      	mov	r0, r2
 8016888:	4798      	blx	r3
 801688a:	f107 0308 	add.w	r3, r7, #8
 801688e:	4618      	mov	r0, r3
 8016890:	f005 f898 	bl	801b9c4 <_ZNK14MockNamedValue12getBoolValueEv>
 8016894:	4603      	mov	r3, r0
 8016896:	461c      	mov	r4, r3
 8016898:	bf00      	nop
 801689a:	f107 0308 	add.w	r3, r7, #8
 801689e:	4618      	mov	r0, r3
 80168a0:	f004 fddc 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 80168a4:	4623      	mov	r3, r4
}
 80168a6:	4618      	mov	r0, r3
 80168a8:	3744      	adds	r7, #68	; 0x44
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd90      	pop	{r4, r7, pc}

080168ae <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 80168ae:	b580      	push	{r7, lr}
 80168b0:	b082      	sub	sp, #8
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	6078      	str	r0, [r7, #4]
 80168b6:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	3350      	adds	r3, #80	; 0x50
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	4798      	blx	r3
 80168c4:	4603      	mov	r3, r0
 80168c6:	f083 0301 	eor.w	r3, r3, #1
 80168ca:	b2db      	uxtb	r3, r3
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d001      	beq.n	80168d4 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 80168d0:	683b      	ldr	r3, [r7, #0]
 80168d2:	e007      	b.n	80168e4 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	3364      	adds	r3, #100	; 0x64
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	6878      	ldr	r0, [r7, #4]
 80168de:	4798      	blx	r3
 80168e0:	4603      	mov	r3, r0
 80168e2:	bf00      	nop
}
 80168e4:	4618      	mov	r0, r3
 80168e6:	3708      	adds	r7, #8
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bd80      	pop	{r7, pc}

080168ec <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 80168ec:	b590      	push	{r4, r7, lr}
 80168ee:	b091      	sub	sp, #68	; 0x44
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	3354      	adds	r3, #84	; 0x54
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	f107 0208 	add.w	r2, r7, #8
 8016900:	6879      	ldr	r1, [r7, #4]
 8016902:	4610      	mov	r0, r2
 8016904:	4798      	blx	r3
 8016906:	f107 0308 	add.w	r3, r7, #8
 801690a:	4618      	mov	r0, r3
 801690c:	f005 f8d2 	bl	801bab4 <_ZNK14MockNamedValue11getIntValueEv>
 8016910:	4604      	mov	r4, r0
 8016912:	bf00      	nop
 8016914:	f107 0308 	add.w	r3, r7, #8
 8016918:	4618      	mov	r0, r3
 801691a:	f004 fd9f 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 801691e:	4623      	mov	r3, r4
}
 8016920:	4618      	mov	r0, r3
 8016922:	3744      	adds	r7, #68	; 0x44
 8016924:	46bd      	mov	sp, r7
 8016926:	bd90      	pop	{r4, r7, pc}

08016928 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8016928:	b590      	push	{r4, r7, lr}
 801692a:	b091      	sub	sp, #68	; 0x44
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	3354      	adds	r3, #84	; 0x54
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	f107 0208 	add.w	r2, r7, #8
 801693c:	6879      	ldr	r1, [r7, #4]
 801693e:	4610      	mov	r0, r2
 8016940:	4798      	blx	r3
 8016942:	f107 0308 	add.w	r3, r7, #8
 8016946:	4618      	mov	r0, r3
 8016948:	f005 f93e 	bl	801bbc8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 801694c:	4604      	mov	r4, r0
 801694e:	bf00      	nop
 8016950:	f107 0308 	add.w	r3, r7, #8
 8016954:	4618      	mov	r0, r3
 8016956:	f004 fd81 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 801695a:	4623      	mov	r3, r4
}
 801695c:	4618      	mov	r0, r3
 801695e:	3744      	adds	r7, #68	; 0x44
 8016960:	46bd      	mov	sp, r7
 8016962:	bd90      	pop	{r4, r7, pc}

08016964 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8016964:	b580      	push	{r7, lr}
 8016966:	b082      	sub	sp, #8
 8016968:	af00      	add	r7, sp, #0
 801696a:	6078      	str	r0, [r7, #4]
 801696c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	3350      	adds	r3, #80	; 0x50
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	6878      	ldr	r0, [r7, #4]
 8016978:	4798      	blx	r3
 801697a:	4603      	mov	r3, r0
 801697c:	f083 0301 	eor.w	r3, r3, #1
 8016980:	b2db      	uxtb	r3, r3
 8016982:	2b00      	cmp	r3, #0
 8016984:	d001      	beq.n	801698a <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	e007      	b.n	801699a <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	3368      	adds	r3, #104	; 0x68
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	6878      	ldr	r0, [r7, #4]
 8016994:	4798      	blx	r3
 8016996:	4603      	mov	r3, r0
 8016998:	bf00      	nop
}
 801699a:	4618      	mov	r0, r3
 801699c:	3708      	adds	r7, #8
 801699e:	46bd      	mov	sp, r7
 80169a0:	bd80      	pop	{r7, pc}

080169a2 <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 80169a2:	b590      	push	{r4, r7, lr}
 80169a4:	b091      	sub	sp, #68	; 0x44
 80169a6:	af00      	add	r7, sp, #0
 80169a8:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	3354      	adds	r3, #84	; 0x54
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	f107 0208 	add.w	r2, r7, #8
 80169b6:	6879      	ldr	r1, [r7, #4]
 80169b8:	4610      	mov	r0, r2
 80169ba:	4798      	blx	r3
 80169bc:	f107 0308 	add.w	r3, r7, #8
 80169c0:	4618      	mov	r0, r3
 80169c2:	f005 f89f 	bl	801bb04 <_ZNK14MockNamedValue15getLongIntValueEv>
 80169c6:	4604      	mov	r4, r0
 80169c8:	bf00      	nop
 80169ca:	f107 0308 	add.w	r3, r7, #8
 80169ce:	4618      	mov	r0, r3
 80169d0:	f004 fd44 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 80169d4:	4623      	mov	r3, r4
}
 80169d6:	4618      	mov	r0, r3
 80169d8:	3744      	adds	r7, #68	; 0x44
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd90      	pop	{r4, r7, pc}

080169de <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 80169de:	b580      	push	{r7, lr}
 80169e0:	b082      	sub	sp, #8
 80169e2:	af00      	add	r7, sp, #0
 80169e4:	6078      	str	r0, [r7, #4]
 80169e6:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	3350      	adds	r3, #80	; 0x50
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	6878      	ldr	r0, [r7, #4]
 80169f2:	4798      	blx	r3
 80169f4:	4603      	mov	r3, r0
 80169f6:	f083 0301 	eor.w	r3, r3, #1
 80169fa:	b2db      	uxtb	r3, r3
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d001      	beq.n	8016a04 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 8016a00:	683b      	ldr	r3, [r7, #0]
 8016a02:	e007      	b.n	8016a14 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	3370      	adds	r3, #112	; 0x70
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	6878      	ldr	r0, [r7, #4]
 8016a0e:	4798      	blx	r3
 8016a10:	4603      	mov	r3, r0
 8016a12:	bf00      	nop
}
 8016a14:	4618      	mov	r0, r3
 8016a16:	3708      	adds	r7, #8
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	bd80      	pop	{r7, pc}

08016a1c <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8016a1c:	b5b0      	push	{r4, r5, r7, lr}
 8016a1e:	b084      	sub	sp, #16
 8016a20:	af02      	add	r7, sp, #8
 8016a22:	6078      	str	r0, [r7, #4]
 8016a24:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8016a26:	f7fb fbad 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8016a2a:	4604      	mov	r4, r0
 8016a2c:	6823      	ldr	r3, [r4, #0]
 8016a2e:	3368      	adds	r3, #104	; 0x68
 8016a30:	681d      	ldr	r5, [r3, #0]
 8016a32:	f7fb fbb7 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016a36:	4603      	mov	r3, r0
 8016a38:	9300      	str	r3, [sp, #0]
 8016a3a:	f240 13fb 	movw	r3, #507	; 0x1fb
 8016a3e:	4a06      	ldr	r2, [pc, #24]	; (8016a58 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8016a40:	4906      	ldr	r1, [pc, #24]	; (8016a5c <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 8016a42:	4620      	mov	r0, r4
 8016a44:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8016a46:	2100      	movs	r1, #0
 8016a48:	6878      	ldr	r0, [r7, #4]
 8016a4a:	f7f1 fffb 	bl	8008a44 <_ZN18cpputest_ulonglongC1Ei>
}
 8016a4e:	6878      	ldr	r0, [r7, #4]
 8016a50:	3708      	adds	r7, #8
 8016a52:	46bd      	mov	sp, r7
 8016a54:	bdb0      	pop	{r4, r5, r7, pc}
 8016a56:	bf00      	nop
 8016a58:	08023850 	.word	0x08023850
 8016a5c:	0802386c 	.word	0x0802386c

08016a60 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8016a60:	b5b0      	push	{r4, r5, r7, lr}
 8016a62:	b086      	sub	sp, #24
 8016a64:	af02      	add	r7, sp, #8
 8016a66:	60f8      	str	r0, [r7, #12]
 8016a68:	60b9      	str	r1, [r7, #8]
 8016a6a:	4639      	mov	r1, r7
 8016a6c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8016a70:	f7fb fb88 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8016a74:	4604      	mov	r4, r0
 8016a76:	6823      	ldr	r3, [r4, #0]
 8016a78:	3368      	adds	r3, #104	; 0x68
 8016a7a:	681d      	ldr	r5, [r3, #0]
 8016a7c:	f7fb fb92 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016a80:	4603      	mov	r3, r0
 8016a82:	9300      	str	r3, [sp, #0]
 8016a84:	f240 2301 	movw	r3, #513	; 0x201
 8016a88:	4a06      	ldr	r2, [pc, #24]	; (8016aa4 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8016a8a:	4907      	ldr	r1, [pc, #28]	; (8016aa8 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8016a8c:	4620      	mov	r0, r4
 8016a8e:	47a8      	blx	r5
    return default_value;
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	461a      	mov	r2, r3
 8016a94:	463b      	mov	r3, r7
 8016a96:	cb03      	ldmia	r3!, {r0, r1}
 8016a98:	6010      	str	r0, [r2, #0]
 8016a9a:	6051      	str	r1, [r2, #4]
}
 8016a9c:	68f8      	ldr	r0, [r7, #12]
 8016a9e:	3710      	adds	r7, #16
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8016aa4:	08023850 	.word	0x08023850
 8016aa8:	0802386c 	.word	0x0802386c

08016aac <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8016aac:	b5b0      	push	{r4, r5, r7, lr}
 8016aae:	b084      	sub	sp, #16
 8016ab0:	af02      	add	r7, sp, #8
 8016ab2:	6078      	str	r0, [r7, #4]
 8016ab4:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8016ab6:	f7fb fb65 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8016aba:	4604      	mov	r4, r0
 8016abc:	6823      	ldr	r3, [r4, #0]
 8016abe:	3368      	adds	r3, #104	; 0x68
 8016ac0:	681d      	ldr	r5, [r3, #0]
 8016ac2:	f7fb fb6f 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	9300      	str	r3, [sp, #0]
 8016aca:	f240 2307 	movw	r3, #519	; 0x207
 8016ace:	4a06      	ldr	r2, [pc, #24]	; (8016ae8 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 8016ad0:	4906      	ldr	r1, [pc, #24]	; (8016aec <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 8016ad2:	4620      	mov	r0, r4
 8016ad4:	47a8      	blx	r5
    return cpputest_longlong(0);
 8016ad6:	2100      	movs	r1, #0
 8016ad8:	6878      	ldr	r0, [r7, #4]
 8016ada:	f7f1 ffa7 	bl	8008a2c <_ZN17cpputest_longlongC1Ei>
}
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	3708      	adds	r7, #8
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8016ae6:	bf00      	nop
 8016ae8:	08023850 	.word	0x08023850
 8016aec:	08023898 	.word	0x08023898

08016af0 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 8016af0:	b5b0      	push	{r4, r5, r7, lr}
 8016af2:	b086      	sub	sp, #24
 8016af4:	af02      	add	r7, sp, #8
 8016af6:	60f8      	str	r0, [r7, #12]
 8016af8:	60b9      	str	r1, [r7, #8]
 8016afa:	4639      	mov	r1, r7
 8016afc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8016b00:	f7fb fb40 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8016b04:	4604      	mov	r4, r0
 8016b06:	6823      	ldr	r3, [r4, #0]
 8016b08:	3368      	adds	r3, #104	; 0x68
 8016b0a:	681d      	ldr	r5, [r3, #0]
 8016b0c:	f7fb fb4a 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016b10:	4603      	mov	r3, r0
 8016b12:	9300      	str	r3, [sp, #0]
 8016b14:	f240 230d 	movw	r3, #525	; 0x20d
 8016b18:	4a06      	ldr	r2, [pc, #24]	; (8016b34 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8016b1a:	4907      	ldr	r1, [pc, #28]	; (8016b38 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8016b1c:	4620      	mov	r0, r4
 8016b1e:	47a8      	blx	r5
    return default_value;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	461a      	mov	r2, r3
 8016b24:	463b      	mov	r3, r7
 8016b26:	cb03      	ldmia	r3!, {r0, r1}
 8016b28:	6010      	str	r0, [r2, #0]
 8016b2a:	6051      	str	r1, [r2, #4]
}
 8016b2c:	68f8      	ldr	r0, [r7, #12]
 8016b2e:	3710      	adds	r7, #16
 8016b30:	46bd      	mov	sp, r7
 8016b32:	bdb0      	pop	{r4, r5, r7, pc}
 8016b34:	08023850 	.word	0x08023850
 8016b38:	08023898 	.word	0x08023898

08016b3c <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	ed2d 8b02 	vpush	{d8}
 8016b42:	b090      	sub	sp, #64	; 0x40
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	3354      	adds	r3, #84	; 0x54
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	f107 0208 	add.w	r2, r7, #8
 8016b54:	6879      	ldr	r1, [r7, #4]
 8016b56:	4610      	mov	r0, r2
 8016b58:	4798      	blx	r3
 8016b5a:	f107 0308 	add.w	r3, r7, #8
 8016b5e:	4618      	mov	r0, r3
 8016b60:	f005 f90a 	bl	801bd78 <_ZNK14MockNamedValue14getDoubleValueEv>
 8016b64:	eeb0 8a40 	vmov.f32	s16, s0
 8016b68:	eef0 8a60 	vmov.f32	s17, s1
 8016b6c:	bf00      	nop
 8016b6e:	f107 0308 	add.w	r3, r7, #8
 8016b72:	4618      	mov	r0, r3
 8016b74:	f004 fc72 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 8016b78:	eeb0 7a48 	vmov.f32	s14, s16
 8016b7c:	eef0 7a68 	vmov.f32	s15, s17
}
 8016b80:	eeb0 0a47 	vmov.f32	s0, s14
 8016b84:	eef0 0a67 	vmov.f32	s1, s15
 8016b88:	3740      	adds	r7, #64	; 0x40
 8016b8a:	46bd      	mov	sp, r7
 8016b8c:	ecbd 8b02 	vpop	{d8}
 8016b90:	bd80      	pop	{r7, pc}

08016b92 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 8016b92:	b580      	push	{r7, lr}
 8016b94:	b084      	sub	sp, #16
 8016b96:	af00      	add	r7, sp, #0
 8016b98:	60f8      	str	r0, [r7, #12]
 8016b9a:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	3350      	adds	r3, #80	; 0x50
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	68f8      	ldr	r0, [r7, #12]
 8016ba8:	4798      	blx	r3
 8016baa:	4603      	mov	r3, r0
 8016bac:	f083 0301 	eor.w	r3, r3, #1
 8016bb0:	b2db      	uxtb	r3, r3
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d002      	beq.n	8016bbc <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 8016bb6:	ed97 7b00 	vldr	d7, [r7]
 8016bba:	e00a      	b.n	8016bd2 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	3398      	adds	r3, #152	; 0x98
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	68f8      	ldr	r0, [r7, #12]
 8016bc6:	4798      	blx	r3
 8016bc8:	eeb0 7a40 	vmov.f32	s14, s0
 8016bcc:	eef0 7a60 	vmov.f32	s15, s1
 8016bd0:	bf00      	nop
}
 8016bd2:	eeb0 0a47 	vmov.f32	s0, s14
 8016bd6:	eef0 0a67 	vmov.f32	s1, s15
 8016bda:	3710      	adds	r7, #16
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}

08016be0 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 8016be0:	b590      	push	{r4, r7, lr}
 8016be2:	b091      	sub	sp, #68	; 0x44
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	3354      	adds	r3, #84	; 0x54
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	f107 0208 	add.w	r2, r7, #8
 8016bf4:	6879      	ldr	r1, [r7, #4]
 8016bf6:	4610      	mov	r0, r2
 8016bf8:	4798      	blx	r3
 8016bfa:	f107 0308 	add.w	r3, r7, #8
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f004 ff08 	bl	801ba14 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8016c04:	4604      	mov	r4, r0
 8016c06:	bf00      	nop
 8016c08:	f107 0308 	add.w	r3, r7, #8
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	f004 fc25 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 8016c12:	4623      	mov	r3, r4
}
 8016c14:	4618      	mov	r0, r3
 8016c16:	3744      	adds	r7, #68	; 0x44
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	bd90      	pop	{r4, r7, pc}

08016c1c <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b082      	sub	sp, #8
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
 8016c24:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	3350      	adds	r3, #80	; 0x50
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	6878      	ldr	r0, [r7, #4]
 8016c30:	4798      	blx	r3
 8016c32:	4603      	mov	r3, r0
 8016c34:	f083 0301 	eor.w	r3, r3, #1
 8016c38:	b2db      	uxtb	r3, r3
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d001      	beq.n	8016c42 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 8016c3e:	683b      	ldr	r3, [r7, #0]
 8016c40:	e007      	b.n	8016c52 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	3388      	adds	r3, #136	; 0x88
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	6878      	ldr	r0, [r7, #4]
 8016c4c:	4798      	blx	r3
 8016c4e:	4603      	mov	r3, r0
 8016c50:	bf00      	nop
}
 8016c52:	4618      	mov	r0, r3
 8016c54:	3708      	adds	r7, #8
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}

08016c5a <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 8016c5a:	b580      	push	{r7, lr}
 8016c5c:	b082      	sub	sp, #8
 8016c5e:	af00      	add	r7, sp, #0
 8016c60:	6078      	str	r0, [r7, #4]
 8016c62:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	3350      	adds	r3, #80	; 0x50
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	6878      	ldr	r0, [r7, #4]
 8016c6e:	4798      	blx	r3
 8016c70:	4603      	mov	r3, r0
 8016c72:	f083 0301 	eor.w	r3, r3, #1
 8016c76:	b2db      	uxtb	r3, r3
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d001      	beq.n	8016c80 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 8016c7c:	683b      	ldr	r3, [r7, #0]
 8016c7e:	e007      	b.n	8016c90 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	33a0      	adds	r3, #160	; 0xa0
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	6878      	ldr	r0, [r7, #4]
 8016c8a:	4798      	blx	r3
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	bf00      	nop
}
 8016c90:	4618      	mov	r0, r3
 8016c92:	3708      	adds	r7, #8
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}

08016c98 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8016c98:	b590      	push	{r4, r7, lr}
 8016c9a:	b091      	sub	sp, #68	; 0x44
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	3354      	adds	r3, #84	; 0x54
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	f107 0208 	add.w	r2, r7, #8
 8016cac:	6879      	ldr	r1, [r7, #4]
 8016cae:	4610      	mov	r0, r2
 8016cb0:	4798      	blx	r3
 8016cb2:	f107 0308 	add.w	r3, r7, #8
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	f005 f8e2 	bl	801be80 <_ZNK14MockNamedValue15getPointerValueEv>
 8016cbc:	4604      	mov	r4, r0
 8016cbe:	bf00      	nop
 8016cc0:	f107 0308 	add.w	r3, r7, #8
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f004 fbc9 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 8016cca:	4623      	mov	r3, r4
}
 8016ccc:	4618      	mov	r0, r3
 8016cce:	3744      	adds	r7, #68	; 0x44
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	bd90      	pop	{r4, r7, pc}

08016cd4 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 8016cd4:	b590      	push	{r4, r7, lr}
 8016cd6:	b091      	sub	sp, #68	; 0x44
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	3354      	adds	r3, #84	; 0x54
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	f107 0208 	add.w	r2, r7, #8
 8016ce8:	6879      	ldr	r1, [r7, #4]
 8016cea:	4610      	mov	r0, r2
 8016cec:	4798      	blx	r3
 8016cee:	f107 0308 	add.w	r3, r7, #8
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f005 f8ec 	bl	801bed0 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8016cf8:	4604      	mov	r4, r0
 8016cfa:	bf00      	nop
 8016cfc:	f107 0308 	add.w	r3, r7, #8
 8016d00:	4618      	mov	r0, r3
 8016d02:	f004 fbab 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 8016d06:	4623      	mov	r3, r4
}
 8016d08:	4618      	mov	r0, r3
 8016d0a:	3744      	adds	r7, #68	; 0x44
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd90      	pop	{r4, r7, pc}

08016d10 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b082      	sub	sp, #8
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	6078      	str	r0, [r7, #4]
 8016d18:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	3350      	adds	r3, #80	; 0x50
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	6878      	ldr	r0, [r7, #4]
 8016d24:	4798      	blx	r3
 8016d26:	4603      	mov	r3, r0
 8016d28:	f083 0301 	eor.w	r3, r3, #1
 8016d2c:	b2db      	uxtb	r3, r3
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d001      	beq.n	8016d36 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 8016d32:	683b      	ldr	r3, [r7, #0]
 8016d34:	e007      	b.n	8016d46 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	33a8      	adds	r3, #168	; 0xa8
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	6878      	ldr	r0, [r7, #4]
 8016d40:	4798      	blx	r3
 8016d42:	4603      	mov	r3, r0
 8016d44:	bf00      	nop
}
 8016d46:	4618      	mov	r0, r3
 8016d48:	3708      	adds	r7, #8
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	bd80      	pop	{r7, pc}

08016d4e <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 8016d4e:	b590      	push	{r4, r7, lr}
 8016d50:	b091      	sub	sp, #68	; 0x44
 8016d52:	af00      	add	r7, sp, #0
 8016d54:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	3354      	adds	r3, #84	; 0x54
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	f107 0208 	add.w	r2, r7, #8
 8016d62:	6879      	ldr	r1, [r7, #4]
 8016d64:	4610      	mov	r0, r2
 8016d66:	4798      	blx	r3
 8016d68:	f107 0308 	add.w	r3, r7, #8
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f005 f8d7 	bl	801bf20 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8016d72:	4604      	mov	r4, r0
 8016d74:	bf00      	nop
 8016d76:	f107 0308 	add.w	r3, r7, #8
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	f004 fb6e 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 8016d80:	4623      	mov	r3, r4
}
 8016d82:	4618      	mov	r0, r3
 8016d84:	3744      	adds	r7, #68	; 0x44
 8016d86:	46bd      	mov	sp, r7
 8016d88:	bd90      	pop	{r4, r7, pc}

08016d8a <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 8016d8a:	b580      	push	{r7, lr}
 8016d8c:	b082      	sub	sp, #8
 8016d8e:	af00      	add	r7, sp, #0
 8016d90:	6078      	str	r0, [r7, #4]
 8016d92:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	3350      	adds	r3, #80	; 0x50
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	6878      	ldr	r0, [r7, #4]
 8016d9e:	4798      	blx	r3
 8016da0:	4603      	mov	r3, r0
 8016da2:	f083 0301 	eor.w	r3, r3, #1
 8016da6:	b2db      	uxtb	r3, r3
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d001      	beq.n	8016db0 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 8016dac:	683b      	ldr	r3, [r7, #0]
 8016dae:	e007      	b.n	8016dc0 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	33b0      	adds	r3, #176	; 0xb0
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	6878      	ldr	r0, [r7, #4]
 8016dba:	4798      	blx	r3
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	bf00      	nop
}
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	3708      	adds	r7, #8
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bd80      	pop	{r7, pc}

08016dc8 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b082      	sub	sp, #8
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
 8016dd0:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	3350      	adds	r3, #80	; 0x50
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	6878      	ldr	r0, [r7, #4]
 8016ddc:	4798      	blx	r3
 8016dde:	4603      	mov	r3, r0
 8016de0:	f083 0301 	eor.w	r3, r3, #1
 8016de4:	b2db      	uxtb	r3, r3
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d001      	beq.n	8016dee <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 8016dea:	683b      	ldr	r3, [r7, #0]
 8016dec:	e007      	b.n	8016dfe <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	3394      	adds	r3, #148	; 0x94
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	6878      	ldr	r0, [r7, #4]
 8016df8:	4798      	blx	r3
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	bf00      	nop
}
 8016dfe:	4618      	mov	r0, r3
 8016e00:	3708      	adds	r7, #8
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}

08016e06 <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 8016e06:	b590      	push	{r4, r7, lr}
 8016e08:	b091      	sub	sp, #68	; 0x44
 8016e0a:	af00      	add	r7, sp, #0
 8016e0c:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	3354      	adds	r3, #84	; 0x54
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	f107 0208 	add.w	r2, r7, #8
 8016e1a:	6879      	ldr	r1, [r7, #4]
 8016e1c:	4610      	mov	r0, r2
 8016e1e:	4798      	blx	r3
 8016e20:	f107 0308 	add.w	r3, r7, #8
 8016e24:	4618      	mov	r0, r3
 8016e26:	f005 f803 	bl	801be30 <_ZNK14MockNamedValue14getStringValueEv>
 8016e2a:	4604      	mov	r4, r0
 8016e2c:	bf00      	nop
 8016e2e:	f107 0308 	add.w	r3, r7, #8
 8016e32:	4618      	mov	r0, r3
 8016e34:	f004 fb12 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 8016e38:	4623      	mov	r3, r4
}
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	3744      	adds	r7, #68	; 0x44
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	bd90      	pop	{r4, r7, pc}

08016e42 <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 8016e42:	b590      	push	{r4, r7, lr}
 8016e44:	b093      	sub	sp, #76	; 0x4c
 8016e46:	af00      	add	r7, sp, #0
 8016e48:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	3354      	adds	r3, #84	; 0x54
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	f107 0210 	add.w	r2, r7, #16
 8016e56:	6879      	ldr	r1, [r7, #4]
 8016e58:	4610      	mov	r0, r2
 8016e5a:	4798      	blx	r3
 8016e5c:	f107 0308 	add.w	r3, r7, #8
 8016e60:	f107 0210 	add.w	r2, r7, #16
 8016e64:	4611      	mov	r1, r2
 8016e66:	4618      	mov	r0, r3
 8016e68:	f004 fd8e 	bl	801b988 <_ZNK14MockNamedValue7getNameEv>
 8016e6c:	f107 0308 	add.w	r3, r7, #8
 8016e70:	4618      	mov	r0, r3
 8016e72:	f7f4 f94b 	bl	800b10c <_ZNK12SimpleString7isEmptyEv>
 8016e76:	4603      	mov	r3, r0
 8016e78:	f083 0301 	eor.w	r3, r3, #1
 8016e7c:	b2dc      	uxtb	r4, r3
 8016e7e:	f107 0308 	add.w	r3, r7, #8
 8016e82:	4618      	mov	r0, r3
 8016e84:	f7f4 f953 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8016e88:	f107 0310 	add.w	r3, r7, #16
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	f004 fae5 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 8016e92:	4623      	mov	r3, r4
}
 8016e94:	4618      	mov	r0, r3
 8016e96:	374c      	adds	r7, #76	; 0x4c
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	bd90      	pop	{r4, r7, pc}

08016e9c <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 8016e9c:	b590      	push	{r4, r7, lr}
 8016e9e:	b095      	sub	sp, #84	; 0x54
 8016ea0:	af02      	add	r7, sp, #8
 8016ea2:	6078      	str	r0, [r7, #4]
 8016ea4:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	33c0      	adds	r3, #192	; 0xc0
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	6878      	ldr	r0, [r7, #4]
 8016eb0:	4798      	blx	r3
 8016eb2:	4603      	mov	r3, r0
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d001      	beq.n	8016ebc <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 8016eb8:	687c      	ldr	r4, [r7, #4]
 8016eba:	e053      	b.n	8016f64 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	331c      	adds	r3, #28
 8016ec0:	6839      	ldr	r1, [r7, #0]
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f003 f8ca 	bl	801a05c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	699b      	ldr	r3, [r3, #24]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d109      	bne.n	8016ee4 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	331c      	adds	r3, #28
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	f002 fe20 	bl	8019b1a <_ZNK21MockExpectedCallsList7isEmptyEv>
 8016eda:	4603      	mov	r3, r0
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d001      	beq.n	8016ee4 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8016ee0:	2301      	movs	r3, #1
 8016ee2:	e000      	b.n	8016ee6 <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d02c      	beq.n	8016f44 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	33cc      	adds	r3, #204	; 0xcc
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	6878      	ldr	r0, [r7, #4]
 8016ef4:	4798      	blx	r3
 8016ef6:	4604      	mov	r4, r0
 8016ef8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016efc:	6879      	ldr	r1, [r7, #4]
 8016efe:	4618      	mov	r0, r3
 8016f00:	f7fe fd3f 	bl	8015982 <_ZNK21MockCheckedActualCall7getNameEv>
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f08:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016f0c:	f107 000c 	add.w	r0, r7, #12
 8016f10:	9300      	str	r3, [sp, #0]
 8016f12:	683b      	ldr	r3, [r7, #0]
 8016f14:	4621      	mov	r1, r4
 8016f16:	f004 f9fb 	bl	801b310 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 8016f1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016f1e:	4618      	mov	r0, r3
 8016f20:	f7f4 f905 	bl	800b12e <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	33dc      	adds	r3, #220	; 0xdc
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	f107 020c 	add.w	r2, r7, #12
 8016f30:	4611      	mov	r1, r2
 8016f32:	6878      	ldr	r0, [r7, #4]
 8016f34:	4798      	blx	r3
        return *this;
 8016f36:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8016f38:	f107 030c 	add.w	r3, r7, #12
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	f000 ffa7 	bl	8017e90 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8016f42:	e00f      	b.n	8016f64 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	331c      	adds	r3, #28
 8016f48:	4618      	mov	r0, r3
 8016f4a:	f003 f9a7 	bl	801a29c <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	699b      	ldr	r3, [r3, #24]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d105      	bne.n	8016f62 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	33d8      	adds	r3, #216	; 0xd8
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	6878      	ldr	r0, [r7, #4]
 8016f60:	4798      	blx	r3
    }

    return *this;
 8016f62:	687c      	ldr	r4, [r7, #4]
 8016f64:	4623      	mov	r3, r4
}
 8016f66:	4618      	mov	r0, r3
 8016f68:	374c      	adds	r7, #76	; 0x4c
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd90      	pop	{r4, r7, pc}
	...

08016f70 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 8016f70:	b590      	push	{r4, r7, lr}
 8016f72:	b087      	sub	sp, #28
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	60f8      	str	r0, [r7, #12]
 8016f78:	60b9      	str	r1, [r7, #8]
 8016f7a:	607a      	str	r2, [r7, #4]
 8016f7c:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 8016f7e:	f240 2282 	movw	r2, #642	; 0x282
 8016f82:	4913      	ldr	r1, [pc, #76]	; (8016fd0 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8016f84:	2018      	movs	r0, #24
 8016f86:	f7f1 f957 	bl	8008238 <_ZnwjPKci>
 8016f8a:	4604      	mov	r4, r0
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	687a      	ldr	r2, [r7, #4]
 8016f90:	68b9      	ldr	r1, [r7, #8]
 8016f92:	4620      	mov	r0, r4
 8016f94:	f7fe fa48 	bl	8015428 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8016f98:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d103      	bne.n	8016faa <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	693a      	ldr	r2, [r7, #16]
 8016fa6:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 8016fa8:	e00d      	b.n	8016fc6 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fae:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 8016fb0:	697b      	ldr	r3, [r7, #20]
 8016fb2:	695b      	ldr	r3, [r3, #20]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d003      	beq.n	8016fc0 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8016fb8:	697b      	ldr	r3, [r7, #20]
 8016fba:	695b      	ldr	r3, [r3, #20]
 8016fbc:	617b      	str	r3, [r7, #20]
 8016fbe:	e7f7      	b.n	8016fb0 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 8016fc0:	697b      	ldr	r3, [r7, #20]
 8016fc2:	693a      	ldr	r2, [r7, #16]
 8016fc4:	615a      	str	r2, [r3, #20]
}
 8016fc6:	bf00      	nop
 8016fc8:	371c      	adds	r7, #28
 8016fca:	46bd      	mov	sp, r7
 8016fcc:	bd90      	pop	{r4, r7, pc}
 8016fce:	bf00      	nop
 8016fd0:	08023850 	.word	0x08023850

08016fd4 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b082      	sub	sp, #8
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	3308      	adds	r3, #8
 8016fe0:	4618      	mov	r0, r3
 8016fe2:	f7f4 f8a4 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	4618      	mov	r0, r3
 8016fea:	f7f4 f8a0 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	3708      	adds	r7, #8
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	bd80      	pop	{r7, pc}

08016ff8 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 8016ff8:	b590      	push	{r4, r7, lr}
 8016ffa:	b085      	sub	sp, #20
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017004:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 8017006:	2300      	movs	r3, #0
 8017008:	60bb      	str	r3, [r7, #8]

    while (current) {
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d012      	beq.n	8017036 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	695b      	ldr	r3, [r3, #20]
 8017018:	60fb      	str	r3, [r7, #12]
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	68fa      	ldr	r2, [r7, #12]
 801701e:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 8017020:	68bc      	ldr	r4, [r7, #8]
 8017022:	2c00      	cmp	r4, #0
 8017024:	d0f1      	beq.n	801700a <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 8017026:	4620      	mov	r0, r4
 8017028:	f7ff ffd4 	bl	8016fd4 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 801702c:	2118      	movs	r1, #24
 801702e:	4620      	mov	r0, r4
 8017030:	f7f1 f916 	bl	8008260 <_ZdlPvj>
    while (current) {
 8017034:	e7e9      	b.n	801700a <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 8017036:	bf00      	nop
 8017038:	3714      	adds	r7, #20
 801703a:	46bd      	mov	sp, r7
 801703c:	bd90      	pop	{r4, r7, pc}
	...

08017040 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8017040:	b580      	push	{r7, lr}
 8017042:	b082      	sub	sp, #8
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	4618      	mov	r0, r3
 801704c:	f7fe fc6a 	bl	8015924 <_ZN14MockActualCallC1Ev>
 8017050:	4a06      	ldr	r2, [pc, #24]	; (801706c <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	601a      	str	r2, [r3, #0]
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	3304      	adds	r3, #4
 801705a:	4905      	ldr	r1, [pc, #20]	; (8017070 <_ZN19MockActualCallTraceC1Ev+0x30>)
 801705c:	4618      	mov	r0, r3
 801705e:	f7f3 fcae 	bl	800a9be <_ZN12SimpleStringC1EPKc>
{
}
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	4618      	mov	r0, r3
 8017066:	3708      	adds	r7, #8
 8017068:	46bd      	mov	sp, r7
 801706a:	bd80      	pop	{r7, pc}
 801706c:	08025db8 	.word	0x08025db8
 8017070:	08023838 	.word	0x08023838

08017074 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8017074:	b580      	push	{r7, lr}
 8017076:	b082      	sub	sp, #8
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]
 801707c:	4a08      	ldr	r2, [pc, #32]	; (80170a0 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	601a      	str	r2, [r3, #0]
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	3304      	adds	r3, #4
 8017086:	4618      	mov	r0, r3
 8017088:	f7f4 f851 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	4618      	mov	r0, r3
 8017090:	f7fe fc58 	bl	8015944 <_ZN14MockActualCallD1Ev>
{
}
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	4618      	mov	r0, r3
 8017098:	3708      	adds	r7, #8
 801709a:	46bd      	mov	sp, r7
 801709c:	bd80      	pop	{r7, pc}
 801709e:	bf00      	nop
 80170a0:	08025db8 	.word	0x08025db8

080170a4 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b082      	sub	sp, #8
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]
}
 80170ac:	6878      	ldr	r0, [r7, #4]
 80170ae:	f7ff ffe1 	bl	8017074 <_ZN19MockActualCallTraceD1Ev>
 80170b2:	210c      	movs	r1, #12
 80170b4:	6878      	ldr	r0, [r7, #4]
 80170b6:	f7f1 f8d3 	bl	8008260 <_ZdlPvj>
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	4618      	mov	r0, r3
 80170be:	3708      	adds	r7, #8
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bd80      	pop	{r7, pc}

080170c4 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b082      	sub	sp, #8
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	3304      	adds	r3, #4
 80170d2:	4907      	ldr	r1, [pc, #28]	; (80170f0 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 80170d4:	4618      	mov	r0, r3
 80170d6:	f7f4 f8b9 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	3304      	adds	r3, #4
 80170de:	6839      	ldr	r1, [r7, #0]
 80170e0:	4618      	mov	r0, r3
 80170e2:	f7f4 f8a1 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    return *this;
 80170e6:	687b      	ldr	r3, [r7, #4]
}
 80170e8:	4618      	mov	r0, r3
 80170ea:	3708      	adds	r7, #8
 80170ec:	46bd      	mov	sp, r7
 80170ee:	bd80      	pop	{r7, pc}
 80170f0:	08023944 	.word	0x08023944

080170f4 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 80170f4:	b590      	push	{r4, r7, lr}
 80170f6:	b085      	sub	sp, #20
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
 80170fc:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	3304      	adds	r3, #4
 8017102:	490e      	ldr	r1, [pc, #56]	; (801713c <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8017104:	4618      	mov	r0, r3
 8017106:	f7f4 f8a1 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	1d1c      	adds	r4, r3, #4
 801710e:	f107 0308 	add.w	r3, r7, #8
 8017112:	6839      	ldr	r1, [r7, #0]
 8017114:	4618      	mov	r0, r3
 8017116:	f7f4 fd39 	bl	800bb8c <_Z10StringFromj>
 801711a:	f107 0308 	add.w	r3, r7, #8
 801711e:	4619      	mov	r1, r3
 8017120:	4620      	mov	r0, r4
 8017122:	f7f4 f881 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 8017126:	f107 0308 	add.w	r3, r7, #8
 801712a:	4618      	mov	r0, r3
 801712c:	f7f3 ffff 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 8017130:	687b      	ldr	r3, [r7, #4]
}
 8017132:	4618      	mov	r0, r3
 8017134:	3714      	adds	r7, #20
 8017136:	46bd      	mov	sp, r7
 8017138:	bd90      	pop	{r4, r7, pc}
 801713a:	bf00      	nop
 801713c:	08023954 	.word	0x08023954

08017140 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8017140:	b580      	push	{r7, lr}
 8017142:	b082      	sub	sp, #8
 8017144:	af00      	add	r7, sp, #0
 8017146:	6078      	str	r0, [r7, #4]
 8017148:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	3304      	adds	r3, #4
 801714e:	490a      	ldr	r1, [pc, #40]	; (8017178 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8017150:	4618      	mov	r0, r3
 8017152:	f7f4 f87b 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	3304      	adds	r3, #4
 801715a:	6839      	ldr	r1, [r7, #0]
 801715c:	4618      	mov	r0, r3
 801715e:	f7f4 f863 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	3304      	adds	r3, #4
 8017166:	4905      	ldr	r1, [pc, #20]	; (801717c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8017168:	4618      	mov	r0, r3
 801716a:	f7f4 f86f 	bl	800b24c <_ZN12SimpleStringpLEPKc>
}
 801716e:	bf00      	nop
 8017170:	3708      	adds	r7, #8
 8017172:	46bd      	mov	sp, r7
 8017174:	bd80      	pop	{r7, pc}
 8017176:	bf00      	nop
 8017178:	08023964 	.word	0x08023964
 801717c:	08023968 	.word	0x08023968

08017180 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 8017180:	b590      	push	{r4, r7, lr}
 8017182:	b087      	sub	sp, #28
 8017184:	af00      	add	r7, sp, #0
 8017186:	60f8      	str	r0, [r7, #12]
 8017188:	60b9      	str	r1, [r7, #8]
 801718a:	4613      	mov	r3, r2
 801718c:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 801718e:	68b9      	ldr	r1, [r7, #8]
 8017190:	68f8      	ldr	r0, [r7, #12]
 8017192:	f7ff ffd5 	bl	8017140 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	1d1c      	adds	r4, r3, #4
 801719a:	f107 0310 	add.w	r3, r7, #16
 801719e:	79fa      	ldrb	r2, [r7, #7]
 80171a0:	4611      	mov	r1, r2
 80171a2:	4618      	mov	r0, r3
 80171a4:	f7f4 fa34 	bl	800b610 <_Z10StringFromb>
 80171a8:	f107 0310 	add.w	r3, r7, #16
 80171ac:	4619      	mov	r1, r3
 80171ae:	4620      	mov	r0, r4
 80171b0:	f7f4 f83a 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 80171b4:	f107 0310 	add.w	r3, r7, #16
 80171b8:	4618      	mov	r0, r3
 80171ba:	f7f3 ffb8 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 80171be:	68fb      	ldr	r3, [r7, #12]
}
 80171c0:	4618      	mov	r0, r3
 80171c2:	371c      	adds	r7, #28
 80171c4:	46bd      	mov	sp, r7
 80171c6:	bd90      	pop	{r4, r7, pc}

080171c8 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80171c8:	b590      	push	{r4, r7, lr}
 80171ca:	b08f      	sub	sp, #60	; 0x3c
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	60f8      	str	r0, [r7, #12]
 80171d0:	60b9      	str	r1, [r7, #8]
 80171d2:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80171d4:	68b9      	ldr	r1, [r7, #8]
 80171d6:	68f8      	ldr	r0, [r7, #12]
 80171d8:	f7ff ffb2 	bl	8017140 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	1d1c      	adds	r4, r3, #4
 80171e0:	f107 0320 	add.w	r3, r7, #32
 80171e4:	6879      	ldr	r1, [r7, #4]
 80171e6:	4618      	mov	r0, r3
 80171e8:	f7f4 fcd0 	bl	800bb8c <_Z10StringFromj>
 80171ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80171f0:	491f      	ldr	r1, [pc, #124]	; (8017270 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 80171f2:	4618      	mov	r0, r3
 80171f4:	f7f3 fbe3 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80171f8:	f107 0318 	add.w	r3, r7, #24
 80171fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017200:	f107 0120 	add.w	r1, r7, #32
 8017204:	4618      	mov	r0, r3
 8017206:	f7f3 fff4 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 801720a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801720e:	6879      	ldr	r1, [r7, #4]
 8017210:	4618      	mov	r0, r3
 8017212:	f7f4 fb5f 	bl	800b8d4 <_Z30BracketsFormattedHexStringFromj>
 8017216:	f107 0310 	add.w	r3, r7, #16
 801721a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801721e:	f107 0118 	add.w	r1, r7, #24
 8017222:	4618      	mov	r0, r3
 8017224:	f7f3 ffe5 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 8017228:	f107 0310 	add.w	r3, r7, #16
 801722c:	4619      	mov	r1, r3
 801722e:	4620      	mov	r0, r4
 8017230:	f7f3 fffa 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 8017234:	f107 0310 	add.w	r3, r7, #16
 8017238:	4618      	mov	r0, r3
 801723a:	f7f3 ff78 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801723e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017242:	4618      	mov	r0, r3
 8017244:	f7f3 ff73 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8017248:	f107 0318 	add.w	r3, r7, #24
 801724c:	4618      	mov	r0, r3
 801724e:	f7f3 ff6e 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8017252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017256:	4618      	mov	r0, r3
 8017258:	f7f3 ff69 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801725c:	f107 0320 	add.w	r3, r7, #32
 8017260:	4618      	mov	r0, r3
 8017262:	f7f3 ff64 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 8017266:	68fb      	ldr	r3, [r7, #12]
}
 8017268:	4618      	mov	r0, r3
 801726a:	373c      	adds	r7, #60	; 0x3c
 801726c:	46bd      	mov	sp, r7
 801726e:	bd90      	pop	{r4, r7, pc}
 8017270:	08023964 	.word	0x08023964

08017274 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8017274:	b590      	push	{r4, r7, lr}
 8017276:	b08f      	sub	sp, #60	; 0x3c
 8017278:	af00      	add	r7, sp, #0
 801727a:	60f8      	str	r0, [r7, #12]
 801727c:	60b9      	str	r1, [r7, #8]
 801727e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017280:	68b9      	ldr	r1, [r7, #8]
 8017282:	68f8      	ldr	r0, [r7, #12]
 8017284:	f7ff ff5c 	bl	8017140 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	1d1c      	adds	r4, r3, #4
 801728c:	f107 0320 	add.w	r3, r7, #32
 8017290:	6879      	ldr	r1, [r7, #4]
 8017292:	4618      	mov	r0, r3
 8017294:	f7f4 fa12 	bl	800b6bc <_Z10StringFromi>
 8017298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801729c:	491f      	ldr	r1, [pc, #124]	; (801731c <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 801729e:	4618      	mov	r0, r3
 80172a0:	f7f3 fb8d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80172a4:	f107 0318 	add.w	r3, r7, #24
 80172a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80172ac:	f107 0120 	add.w	r1, r7, #32
 80172b0:	4618      	mov	r0, r3
 80172b2:	f7f3 ff9e 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 80172b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80172ba:	6879      	ldr	r1, [r7, #4]
 80172bc:	4618      	mov	r0, r3
 80172be:	f7f4 faed 	bl	800b89c <_Z30BracketsFormattedHexStringFromi>
 80172c2:	f107 0310 	add.w	r3, r7, #16
 80172c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80172ca:	f107 0118 	add.w	r1, r7, #24
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7f3 ff8f 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 80172d4:	f107 0310 	add.w	r3, r7, #16
 80172d8:	4619      	mov	r1, r3
 80172da:	4620      	mov	r0, r4
 80172dc:	f7f3 ffa4 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 80172e0:	f107 0310 	add.w	r3, r7, #16
 80172e4:	4618      	mov	r0, r3
 80172e6:	f7f3 ff22 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80172ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80172ee:	4618      	mov	r0, r3
 80172f0:	f7f3 ff1d 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80172f4:	f107 0318 	add.w	r3, r7, #24
 80172f8:	4618      	mov	r0, r3
 80172fa:	f7f3 ff18 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80172fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017302:	4618      	mov	r0, r3
 8017304:	f7f3 ff13 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8017308:	f107 0320 	add.w	r3, r7, #32
 801730c:	4618      	mov	r0, r3
 801730e:	f7f3 ff0e 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 8017312:	68fb      	ldr	r3, [r7, #12]
}
 8017314:	4618      	mov	r0, r3
 8017316:	373c      	adds	r7, #60	; 0x3c
 8017318:	46bd      	mov	sp, r7
 801731a:	bd90      	pop	{r4, r7, pc}
 801731c:	08023964 	.word	0x08023964

08017320 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8017320:	b590      	push	{r4, r7, lr}
 8017322:	b08f      	sub	sp, #60	; 0x3c
 8017324:	af00      	add	r7, sp, #0
 8017326:	60f8      	str	r0, [r7, #12]
 8017328:	60b9      	str	r1, [r7, #8]
 801732a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801732c:	68b9      	ldr	r1, [r7, #8]
 801732e:	68f8      	ldr	r0, [r7, #12]
 8017330:	f7ff ff06 	bl	8017140 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	1d1c      	adds	r4, r3, #4
 8017338:	f107 0320 	add.w	r3, r7, #32
 801733c:	6879      	ldr	r1, [r7, #4]
 801733e:	4618      	mov	r0, r3
 8017340:	f7f4 fc36 	bl	800bbb0 <_Z10StringFromm>
 8017344:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017348:	491f      	ldr	r1, [pc, #124]	; (80173c8 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 801734a:	4618      	mov	r0, r3
 801734c:	f7f3 fb37 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8017350:	f107 0318 	add.w	r3, r7, #24
 8017354:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017358:	f107 0120 	add.w	r1, r7, #32
 801735c:	4618      	mov	r0, r3
 801735e:	f7f3 ff48 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 8017362:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017366:	6879      	ldr	r1, [r7, #4]
 8017368:	4618      	mov	r0, r3
 801736a:	f7f4 faeb 	bl	800b944 <_Z30BracketsFormattedHexStringFromm>
 801736e:	f107 0310 	add.w	r3, r7, #16
 8017372:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017376:	f107 0118 	add.w	r1, r7, #24
 801737a:	4618      	mov	r0, r3
 801737c:	f7f3 ff39 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 8017380:	f107 0310 	add.w	r3, r7, #16
 8017384:	4619      	mov	r1, r3
 8017386:	4620      	mov	r0, r4
 8017388:	f7f3 ff4e 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801738c:	f107 0310 	add.w	r3, r7, #16
 8017390:	4618      	mov	r0, r3
 8017392:	f7f3 fecc 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8017396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801739a:	4618      	mov	r0, r3
 801739c:	f7f3 fec7 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80173a0:	f107 0318 	add.w	r3, r7, #24
 80173a4:	4618      	mov	r0, r3
 80173a6:	f7f3 fec2 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80173aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80173ae:	4618      	mov	r0, r3
 80173b0:	f7f3 febd 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80173b4:	f107 0320 	add.w	r3, r7, #32
 80173b8:	4618      	mov	r0, r3
 80173ba:	f7f3 feb8 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 80173be:	68fb      	ldr	r3, [r7, #12]
}
 80173c0:	4618      	mov	r0, r3
 80173c2:	373c      	adds	r7, #60	; 0x3c
 80173c4:	46bd      	mov	sp, r7
 80173c6:	bd90      	pop	{r4, r7, pc}
 80173c8:	08023964 	.word	0x08023964

080173cc <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 80173cc:	b590      	push	{r4, r7, lr}
 80173ce:	b08f      	sub	sp, #60	; 0x3c
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	60f8      	str	r0, [r7, #12]
 80173d4:	60b9      	str	r1, [r7, #8]
 80173d6:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80173d8:	68b9      	ldr	r1, [r7, #8]
 80173da:	68f8      	ldr	r0, [r7, #12]
 80173dc:	f7ff feb0 	bl	8017140 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	1d1c      	adds	r4, r3, #4
 80173e4:	f107 0320 	add.w	r3, r7, #32
 80173e8:	6879      	ldr	r1, [r7, #4]
 80173ea:	4618      	mov	r0, r3
 80173ec:	f7f4 f978 	bl	800b6e0 <_Z10StringFroml>
 80173f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80173f4:	491f      	ldr	r1, [pc, #124]	; (8017474 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 80173f6:	4618      	mov	r0, r3
 80173f8:	f7f3 fae1 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80173fc:	f107 0318 	add.w	r3, r7, #24
 8017400:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017404:	f107 0120 	add.w	r1, r7, #32
 8017408:	4618      	mov	r0, r3
 801740a:	f7f3 fef2 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 801740e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017412:	6879      	ldr	r1, [r7, #4]
 8017414:	4618      	mov	r0, r3
 8017416:	f7f4 fa79 	bl	800b90c <_Z30BracketsFormattedHexStringFroml>
 801741a:	f107 0310 	add.w	r3, r7, #16
 801741e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017422:	f107 0118 	add.w	r1, r7, #24
 8017426:	4618      	mov	r0, r3
 8017428:	f7f3 fee3 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 801742c:	f107 0310 	add.w	r3, r7, #16
 8017430:	4619      	mov	r1, r3
 8017432:	4620      	mov	r0, r4
 8017434:	f7f3 fef8 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 8017438:	f107 0310 	add.w	r3, r7, #16
 801743c:	4618      	mov	r0, r3
 801743e:	f7f3 fe76 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8017442:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017446:	4618      	mov	r0, r3
 8017448:	f7f3 fe71 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801744c:	f107 0318 	add.w	r3, r7, #24
 8017450:	4618      	mov	r0, r3
 8017452:	f7f3 fe6c 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8017456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801745a:	4618      	mov	r0, r3
 801745c:	f7f3 fe67 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8017460:	f107 0320 	add.w	r3, r7, #32
 8017464:	4618      	mov	r0, r3
 8017466:	f7f3 fe62 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 801746a:	68fb      	ldr	r3, [r7, #12]
}
 801746c:	4618      	mov	r0, r3
 801746e:	373c      	adds	r7, #60	; 0x3c
 8017470:	46bd      	mov	sp, r7
 8017472:	bd90      	pop	{r4, r7, pc}
 8017474:	08023964 	.word	0x08023964

08017478 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8017478:	b5b0      	push	{r4, r5, r7, lr}
 801747a:	b086      	sub	sp, #24
 801747c:	af02      	add	r7, sp, #8
 801747e:	60f8      	str	r0, [r7, #12]
 8017480:	60b9      	str	r1, [r7, #8]
 8017482:	4639      	mov	r1, r7
 8017484:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8017488:	f7fa fe7c 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801748c:	4604      	mov	r4, r0
 801748e:	6823      	ldr	r3, [r4, #0]
 8017490:	3368      	adds	r3, #104	; 0x68
 8017492:	681d      	ldr	r5, [r3, #0]
 8017494:	f7fa fe86 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017498:	4603      	mov	r3, r0
 801749a:	9300      	str	r3, [sp, #0]
 801749c:	f240 23ee 	movw	r3, #750	; 0x2ee
 80174a0:	4a04      	ldr	r2, [pc, #16]	; (80174b4 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 80174a2:	4905      	ldr	r1, [pc, #20]	; (80174b8 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 80174a4:	4620      	mov	r0, r4
 80174a6:	47a8      	blx	r5
    return *this;
 80174a8:	68fb      	ldr	r3, [r7, #12]
}
 80174aa:	4618      	mov	r0, r3
 80174ac:	3710      	adds	r7, #16
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bdb0      	pop	{r4, r5, r7, pc}
 80174b2:	bf00      	nop
 80174b4:	08023850 	.word	0x08023850
 80174b8:	0802386c 	.word	0x0802386c

080174bc <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 80174bc:	b5b0      	push	{r4, r5, r7, lr}
 80174be:	b086      	sub	sp, #24
 80174c0:	af02      	add	r7, sp, #8
 80174c2:	60f8      	str	r0, [r7, #12]
 80174c4:	60b9      	str	r1, [r7, #8]
 80174c6:	4639      	mov	r1, r7
 80174c8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80174cc:	f7fa fe5a 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 80174d0:	4604      	mov	r4, r0
 80174d2:	6823      	ldr	r3, [r4, #0]
 80174d4:	3368      	adds	r3, #104	; 0x68
 80174d6:	681d      	ldr	r5, [r3, #0]
 80174d8:	f7fa fe64 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80174dc:	4603      	mov	r3, r0
 80174de:	9300      	str	r3, [sp, #0]
 80174e0:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 80174e4:	4a04      	ldr	r2, [pc, #16]	; (80174f8 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 80174e6:	4905      	ldr	r1, [pc, #20]	; (80174fc <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 80174e8:	4620      	mov	r0, r4
 80174ea:	47a8      	blx	r5
    return *this;
 80174ec:	68fb      	ldr	r3, [r7, #12]
}
 80174ee:	4618      	mov	r0, r3
 80174f0:	3710      	adds	r7, #16
 80174f2:	46bd      	mov	sp, r7
 80174f4:	bdb0      	pop	{r4, r5, r7, pc}
 80174f6:	bf00      	nop
 80174f8:	08023850 	.word	0x08023850
 80174fc:	08023898 	.word	0x08023898

08017500 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 8017500:	b590      	push	{r4, r7, lr}
 8017502:	b087      	sub	sp, #28
 8017504:	af00      	add	r7, sp, #0
 8017506:	60f8      	str	r0, [r7, #12]
 8017508:	60b9      	str	r1, [r7, #8]
 801750a:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 801750e:	68b9      	ldr	r1, [r7, #8]
 8017510:	68f8      	ldr	r0, [r7, #12]
 8017512:	f7ff fe15 	bl	8017140 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	1d1c      	adds	r4, r3, #4
 801751a:	f107 0310 	add.w	r3, r7, #16
 801751e:	2106      	movs	r1, #6
 8017520:	ed97 0b00 	vldr	d0, [r7]
 8017524:	4618      	mov	r0, r3
 8017526:	f7f4 fac7 	bl	800bab8 <_Z10StringFromdi>
 801752a:	f107 0310 	add.w	r3, r7, #16
 801752e:	4619      	mov	r1, r3
 8017530:	4620      	mov	r0, r4
 8017532:	f7f3 fe79 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 8017536:	f107 0310 	add.w	r3, r7, #16
 801753a:	4618      	mov	r0, r3
 801753c:	f7f3 fdf7 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 8017540:	68fb      	ldr	r3, [r7, #12]
}
 8017542:	4618      	mov	r0, r3
 8017544:	371c      	adds	r7, #28
 8017546:	46bd      	mov	sp, r7
 8017548:	bd90      	pop	{r4, r7, pc}

0801754a <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 801754a:	b590      	push	{r4, r7, lr}
 801754c:	b087      	sub	sp, #28
 801754e:	af00      	add	r7, sp, #0
 8017550:	60f8      	str	r0, [r7, #12]
 8017552:	60b9      	str	r1, [r7, #8]
 8017554:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017556:	68b9      	ldr	r1, [r7, #8]
 8017558:	68f8      	ldr	r0, [r7, #12]
 801755a:	f7ff fdf1 	bl	8017140 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	1d1c      	adds	r4, r3, #4
 8017562:	f107 0310 	add.w	r3, r7, #16
 8017566:	6879      	ldr	r1, [r7, #4]
 8017568:	4618      	mov	r0, r3
 801756a:	f7f4 f86d 	bl	800b648 <_Z10StringFromPKc>
 801756e:	f107 0310 	add.w	r3, r7, #16
 8017572:	4619      	mov	r1, r3
 8017574:	4620      	mov	r0, r4
 8017576:	f7f3 fe57 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801757a:	f107 0310 	add.w	r3, r7, #16
 801757e:	4618      	mov	r0, r3
 8017580:	f7f3 fdd5 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 8017584:	68fb      	ldr	r3, [r7, #12]
}
 8017586:	4618      	mov	r0, r3
 8017588:	371c      	adds	r7, #28
 801758a:	46bd      	mov	sp, r7
 801758c:	bd90      	pop	{r4, r7, pc}

0801758e <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 801758e:	b590      	push	{r4, r7, lr}
 8017590:	b087      	sub	sp, #28
 8017592:	af00      	add	r7, sp, #0
 8017594:	60f8      	str	r0, [r7, #12]
 8017596:	60b9      	str	r1, [r7, #8]
 8017598:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801759a:	68b9      	ldr	r1, [r7, #8]
 801759c:	68f8      	ldr	r0, [r7, #12]
 801759e:	f7ff fdcf 	bl	8017140 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	1d1c      	adds	r4, r3, #4
 80175a6:	f107 0310 	add.w	r3, r7, #16
 80175aa:	6879      	ldr	r1, [r7, #4]
 80175ac:	4618      	mov	r0, r3
 80175ae:	f7f4 f8a9 	bl	800b704 <_Z10StringFromPKv>
 80175b2:	f107 0310 	add.w	r3, r7, #16
 80175b6:	4619      	mov	r1, r3
 80175b8:	4620      	mov	r0, r4
 80175ba:	f7f3 fe35 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 80175be:	f107 0310 	add.w	r3, r7, #16
 80175c2:	4618      	mov	r0, r3
 80175c4:	f7f3 fdb3 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 80175c8:	68fb      	ldr	r3, [r7, #12]
}
 80175ca:	4618      	mov	r0, r3
 80175cc:	371c      	adds	r7, #28
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd90      	pop	{r4, r7, pc}

080175d2 <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 80175d2:	b590      	push	{r4, r7, lr}
 80175d4:	b087      	sub	sp, #28
 80175d6:	af00      	add	r7, sp, #0
 80175d8:	60f8      	str	r0, [r7, #12]
 80175da:	60b9      	str	r1, [r7, #8]
 80175dc:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80175de:	68b9      	ldr	r1, [r7, #8]
 80175e0:	68f8      	ldr	r0, [r7, #12]
 80175e2:	f7ff fdad 	bl	8017140 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	1d1c      	adds	r4, r3, #4
 80175ea:	f107 0310 	add.w	r3, r7, #16
 80175ee:	6879      	ldr	r1, [r7, #4]
 80175f0:	4618      	mov	r0, r3
 80175f2:	f7f4 f887 	bl	800b704 <_Z10StringFromPKv>
 80175f6:	f107 0310 	add.w	r3, r7, #16
 80175fa:	4619      	mov	r1, r3
 80175fc:	4620      	mov	r0, r4
 80175fe:	f7f3 fe13 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 8017602:	f107 0310 	add.w	r3, r7, #16
 8017606:	4618      	mov	r0, r3
 8017608:	f7f3 fd91 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 801760c:	68fb      	ldr	r3, [r7, #12]
}
 801760e:	4618      	mov	r0, r3
 8017610:	371c      	adds	r7, #28
 8017612:	46bd      	mov	sp, r7
 8017614:	bd90      	pop	{r4, r7, pc}

08017616 <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8017616:	b590      	push	{r4, r7, lr}
 8017618:	b087      	sub	sp, #28
 801761a:	af00      	add	r7, sp, #0
 801761c:	60f8      	str	r0, [r7, #12]
 801761e:	60b9      	str	r1, [r7, #8]
 8017620:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017622:	68b9      	ldr	r1, [r7, #8]
 8017624:	68f8      	ldr	r0, [r7, #12]
 8017626:	f7ff fd8b 	bl	8017140 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	1d1c      	adds	r4, r3, #4
 801762e:	f107 0310 	add.w	r3, r7, #16
 8017632:	6879      	ldr	r1, [r7, #4]
 8017634:	4618      	mov	r0, r3
 8017636:	f7f4 f88f 	bl	800b758 <_Z10StringFromPFvvE>
 801763a:	f107 0310 	add.w	r3, r7, #16
 801763e:	4619      	mov	r1, r3
 8017640:	4620      	mov	r0, r4
 8017642:	f7f3 fdf1 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 8017646:	f107 0310 	add.w	r3, r7, #16
 801764a:	4618      	mov	r0, r3
 801764c:	f7f3 fd6f 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 8017650:	68fb      	ldr	r3, [r7, #12]
}
 8017652:	4618      	mov	r0, r3
 8017654:	371c      	adds	r7, #28
 8017656:	46bd      	mov	sp, r7
 8017658:	bd90      	pop	{r4, r7, pc}

0801765a <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801765a:	b590      	push	{r4, r7, lr}
 801765c:	b087      	sub	sp, #28
 801765e:	af00      	add	r7, sp, #0
 8017660:	60f8      	str	r0, [r7, #12]
 8017662:	60b9      	str	r1, [r7, #8]
 8017664:	607a      	str	r2, [r7, #4]
 8017666:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 8017668:	68b9      	ldr	r1, [r7, #8]
 801766a:	68f8      	ldr	r0, [r7, #12]
 801766c:	f7ff fd68 	bl	8017140 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	1d1c      	adds	r4, r3, #4
 8017674:	f107 0310 	add.w	r3, r7, #16
 8017678:	683a      	ldr	r2, [r7, #0]
 801767a:	6879      	ldr	r1, [r7, #4]
 801767c:	4618      	mov	r0, r3
 801767e:	f7f4 fbaf 	bl	800bde0 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 8017682:	f107 0310 	add.w	r3, r7, #16
 8017686:	4619      	mov	r1, r3
 8017688:	4620      	mov	r0, r4
 801768a:	f7f3 fdcd 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801768e:	f107 0310 	add.w	r3, r7, #16
 8017692:	4618      	mov	r0, r3
 8017694:	f7f3 fd4b 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 8017698:	68fb      	ldr	r3, [r7, #12]
}
 801769a:	4618      	mov	r0, r3
 801769c:	371c      	adds	r7, #28
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd90      	pop	{r4, r7, pc}
	...

080176a4 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 80176a4:	b590      	push	{r4, r7, lr}
 80176a6:	b087      	sub	sp, #28
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	60f8      	str	r0, [r7, #12]
 80176ac:	60b9      	str	r1, [r7, #8]
 80176ae:	607a      	str	r2, [r7, #4]
 80176b0:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	3304      	adds	r3, #4
 80176b6:	4913      	ldr	r1, [pc, #76]	; (8017704 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 80176b8:	4618      	mov	r0, r3
 80176ba:	f7f3 fdc7 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	3304      	adds	r3, #4
 80176c2:	68b9      	ldr	r1, [r7, #8]
 80176c4:	4618      	mov	r0, r3
 80176c6:	f7f3 fdaf 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 80176ca:	6879      	ldr	r1, [r7, #4]
 80176cc:	68f8      	ldr	r0, [r7, #12]
 80176ce:	f7ff fd37 	bl	8017140 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	1d1c      	adds	r4, r3, #4
 80176d6:	f107 0310 	add.w	r3, r7, #16
 80176da:	6839      	ldr	r1, [r7, #0]
 80176dc:	4618      	mov	r0, r3
 80176de:	f7f4 f811 	bl	800b704 <_Z10StringFromPKv>
 80176e2:	f107 0310 	add.w	r3, r7, #16
 80176e6:	4619      	mov	r1, r3
 80176e8:	4620      	mov	r0, r4
 80176ea:	f7f3 fd9d 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 80176ee:	f107 0310 	add.w	r3, r7, #16
 80176f2:	4618      	mov	r0, r3
 80176f4:	f7f3 fd1b 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 80176f8:	68fb      	ldr	r3, [r7, #12]
}
 80176fa:	4618      	mov	r0, r3
 80176fc:	371c      	adds	r7, #28
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd90      	pop	{r4, r7, pc}
 8017702:	bf00      	nop
 8017704:	08023964 	.word	0x08023964

08017708 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 8017708:	b590      	push	{r4, r7, lr}
 801770a:	b087      	sub	sp, #28
 801770c:	af00      	add	r7, sp, #0
 801770e:	60f8      	str	r0, [r7, #12]
 8017710:	60b9      	str	r1, [r7, #8]
 8017712:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017714:	68b9      	ldr	r1, [r7, #8]
 8017716:	68f8      	ldr	r0, [r7, #12]
 8017718:	f7ff fd12 	bl	8017140 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	1d1c      	adds	r4, r3, #4
 8017720:	f107 0310 	add.w	r3, r7, #16
 8017724:	6879      	ldr	r1, [r7, #4]
 8017726:	4618      	mov	r0, r3
 8017728:	f7f3 ffec 	bl	800b704 <_Z10StringFromPKv>
 801772c:	f107 0310 	add.w	r3, r7, #16
 8017730:	4619      	mov	r1, r3
 8017732:	4620      	mov	r0, r4
 8017734:	f7f3 fd78 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 8017738:	f107 0310 	add.w	r3, r7, #16
 801773c:	4618      	mov	r0, r3
 801773e:	f7f3 fcf6 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 8017742:	68fb      	ldr	r3, [r7, #12]
}
 8017744:	4618      	mov	r0, r3
 8017746:	371c      	adds	r7, #28
 8017748:	46bd      	mov	sp, r7
 801774a:	bd90      	pop	{r4, r7, pc}

0801774c <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 801774c:	b590      	push	{r4, r7, lr}
 801774e:	b087      	sub	sp, #28
 8017750:	af00      	add	r7, sp, #0
 8017752:	60f8      	str	r0, [r7, #12]
 8017754:	60b9      	str	r1, [r7, #8]
 8017756:	607a      	str	r2, [r7, #4]
 8017758:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	3304      	adds	r3, #4
 801775e:	4913      	ldr	r1, [pc, #76]	; (80177ac <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 8017760:	4618      	mov	r0, r3
 8017762:	f7f3 fd73 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	3304      	adds	r3, #4
 801776a:	68b9      	ldr	r1, [r7, #8]
 801776c:	4618      	mov	r0, r3
 801776e:	f7f3 fd5b 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8017772:	6879      	ldr	r1, [r7, #4]
 8017774:	68f8      	ldr	r0, [r7, #12]
 8017776:	f7ff fce3 	bl	8017140 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	1d1c      	adds	r4, r3, #4
 801777e:	f107 0310 	add.w	r3, r7, #16
 8017782:	6839      	ldr	r1, [r7, #0]
 8017784:	4618      	mov	r0, r3
 8017786:	f7f3 ffbd 	bl	800b704 <_Z10StringFromPKv>
 801778a:	f107 0310 	add.w	r3, r7, #16
 801778e:	4619      	mov	r1, r3
 8017790:	4620      	mov	r0, r4
 8017792:	f7f3 fd49 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 8017796:	f107 0310 	add.w	r3, r7, #16
 801779a:	4618      	mov	r0, r3
 801779c:	f7f3 fcc7 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 80177a0:	68fb      	ldr	r3, [r7, #12]
}
 80177a2:	4618      	mov	r0, r3
 80177a4:	371c      	adds	r7, #28
 80177a6:	46bd      	mov	sp, r7
 80177a8:	bd90      	pop	{r4, r7, pc}
 80177aa:	bf00      	nop
 80177ac:	08023964 	.word	0x08023964

080177b0 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 80177b0:	b480      	push	{r7}
 80177b2:	b083      	sub	sp, #12
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	6078      	str	r0, [r7, #4]
    return false;
 80177b8:	2300      	movs	r3, #0
}
 80177ba:	4618      	mov	r0, r3
 80177bc:	370c      	adds	r7, #12
 80177be:	46bd      	mov	sp, r7
 80177c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177c4:	4770      	bx	lr
	...

080177c8 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 80177c8:	b580      	push	{r7, lr}
 80177ca:	b084      	sub	sp, #16
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	6078      	str	r0, [r7, #4]
 80177d0:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 80177d2:	f107 0308 	add.w	r3, r7, #8
 80177d6:	4909      	ldr	r1, [pc, #36]	; (80177fc <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 80177d8:	4618      	mov	r0, r3
 80177da:	f7f3 f8f0 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 80177de:	f107 0308 	add.w	r3, r7, #8
 80177e2:	4619      	mov	r1, r3
 80177e4:	6878      	ldr	r0, [r7, #4]
 80177e6:	f003 fe0f 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
 80177ea:	f107 0308 	add.w	r3, r7, #8
 80177ee:	4618      	mov	r0, r3
 80177f0:	f7f3 fc9d 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 80177f4:	6878      	ldr	r0, [r7, #4]
 80177f6:	3710      	adds	r7, #16
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}
 80177fc:	08023838 	.word	0x08023838

08017800 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 8017800:	b480      	push	{r7}
 8017802:	b083      	sub	sp, #12
 8017804:	af00      	add	r7, sp, #0
 8017806:	6078      	str	r0, [r7, #4]
    return 0;
 8017808:	2300      	movs	r3, #0
}
 801780a:	4618      	mov	r0, r3
 801780c:	370c      	adds	r7, #12
 801780e:	46bd      	mov	sp, r7
 8017810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017814:	4770      	bx	lr

08017816 <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 8017816:	b480      	push	{r7}
 8017818:	b083      	sub	sp, #12
 801781a:	af00      	add	r7, sp, #0
 801781c:	6078      	str	r0, [r7, #4]
    return 0;
 801781e:	2300      	movs	r3, #0
}
 8017820:	4618      	mov	r0, r3
 8017822:	370c      	adds	r7, #12
 8017824:	46bd      	mov	sp, r7
 8017826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801782a:	4770      	bx	lr

0801782c <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 801782c:	b480      	push	{r7}
 801782e:	b083      	sub	sp, #12
 8017830:	af00      	add	r7, sp, #0
 8017832:	6078      	str	r0, [r7, #4]
 8017834:	6039      	str	r1, [r7, #0]
    return 0;
 8017836:	2300      	movs	r3, #0
}
 8017838:	4618      	mov	r0, r3
 801783a:	370c      	adds	r7, #12
 801783c:	46bd      	mov	sp, r7
 801783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017842:	4770      	bx	lr

08017844 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 8017844:	b480      	push	{r7}
 8017846:	b083      	sub	sp, #12
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
 801784c:	6039      	str	r1, [r7, #0]
    return 0;
 801784e:	2300      	movs	r3, #0
}
 8017850:	4618      	mov	r0, r3
 8017852:	370c      	adds	r7, #12
 8017854:	46bd      	mov	sp, r7
 8017856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785a:	4770      	bx	lr

0801785c <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 801785c:	b5b0      	push	{r4, r5, r7, lr}
 801785e:	b084      	sub	sp, #16
 8017860:	af02      	add	r7, sp, #8
 8017862:	6078      	str	r0, [r7, #4]
 8017864:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8017866:	f7fa fc8d 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801786a:	4604      	mov	r4, r0
 801786c:	6823      	ldr	r3, [r4, #0]
 801786e:	3368      	adds	r3, #104	; 0x68
 8017870:	681d      	ldr	r5, [r3, #0]
 8017872:	f7fa fc97 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017876:	4603      	mov	r3, r0
 8017878:	9300      	str	r3, [sp, #0]
 801787a:	f240 3375 	movw	r3, #885	; 0x375
 801787e:	4a06      	ldr	r2, [pc, #24]	; (8017898 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 8017880:	4906      	ldr	r1, [pc, #24]	; (801789c <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 8017882:	4620      	mov	r0, r4
 8017884:	47a8      	blx	r5
    return cpputest_longlong(0);
 8017886:	2100      	movs	r1, #0
 8017888:	6878      	ldr	r0, [r7, #4]
 801788a:	f7f1 f8cf 	bl	8008a2c <_ZN17cpputest_longlongC1Ei>
}
 801788e:	6878      	ldr	r0, [r7, #4]
 8017890:	3708      	adds	r7, #8
 8017892:	46bd      	mov	sp, r7
 8017894:	bdb0      	pop	{r4, r5, r7, pc}
 8017896:	bf00      	nop
 8017898:	08023850 	.word	0x08023850
 801789c:	08023898 	.word	0x08023898

080178a0 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 80178a0:	b5b0      	push	{r4, r5, r7, lr}
 80178a2:	b084      	sub	sp, #16
 80178a4:	af02      	add	r7, sp, #8
 80178a6:	6078      	str	r0, [r7, #4]
 80178a8:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 80178aa:	f7fa fc6b 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 80178ae:	4604      	mov	r4, r0
 80178b0:	6823      	ldr	r3, [r4, #0]
 80178b2:	3368      	adds	r3, #104	; 0x68
 80178b4:	681d      	ldr	r5, [r3, #0]
 80178b6:	f7fa fc75 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80178ba:	4603      	mov	r3, r0
 80178bc:	9300      	str	r3, [sp, #0]
 80178be:	f240 337b 	movw	r3, #891	; 0x37b
 80178c2:	4a06      	ldr	r2, [pc, #24]	; (80178dc <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 80178c4:	4906      	ldr	r1, [pc, #24]	; (80178e0 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 80178c6:	4620      	mov	r0, r4
 80178c8:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 80178ca:	2100      	movs	r1, #0
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	f7f1 f8b9 	bl	8008a44 <_ZN18cpputest_ulonglongC1Ei>
}
 80178d2:	6878      	ldr	r0, [r7, #4]
 80178d4:	3708      	adds	r7, #8
 80178d6:	46bd      	mov	sp, r7
 80178d8:	bdb0      	pop	{r4, r5, r7, pc}
 80178da:	bf00      	nop
 80178dc:	08023850 	.word	0x08023850
 80178e0:	0802386c 	.word	0x0802386c

080178e4 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 80178e4:	b5b0      	push	{r4, r5, r7, lr}
 80178e6:	b086      	sub	sp, #24
 80178e8:	af02      	add	r7, sp, #8
 80178ea:	60f8      	str	r0, [r7, #12]
 80178ec:	60b9      	str	r1, [r7, #8]
 80178ee:	4639      	mov	r1, r7
 80178f0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80178f4:	f7fa fc46 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 80178f8:	4604      	mov	r4, r0
 80178fa:	6823      	ldr	r3, [r4, #0]
 80178fc:	3368      	adds	r3, #104	; 0x68
 80178fe:	681d      	ldr	r5, [r3, #0]
 8017900:	f7fa fc50 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017904:	4603      	mov	r3, r0
 8017906:	9300      	str	r3, [sp, #0]
 8017908:	f240 3381 	movw	r3, #897	; 0x381
 801790c:	4a05      	ldr	r2, [pc, #20]	; (8017924 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 801790e:	4906      	ldr	r1, [pc, #24]	; (8017928 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8017910:	4620      	mov	r0, r4
 8017912:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8017914:	2100      	movs	r1, #0
 8017916:	68f8      	ldr	r0, [r7, #12]
 8017918:	f7f1 f894 	bl	8008a44 <_ZN18cpputest_ulonglongC1Ei>
}
 801791c:	68f8      	ldr	r0, [r7, #12]
 801791e:	3710      	adds	r7, #16
 8017920:	46bd      	mov	sp, r7
 8017922:	bdb0      	pop	{r4, r5, r7, pc}
 8017924:	08023850 	.word	0x08023850
 8017928:	0802386c 	.word	0x0802386c

0801792c <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 801792c:	b5b0      	push	{r4, r5, r7, lr}
 801792e:	b086      	sub	sp, #24
 8017930:	af02      	add	r7, sp, #8
 8017932:	60f8      	str	r0, [r7, #12]
 8017934:	60b9      	str	r1, [r7, #8]
 8017936:	4639      	mov	r1, r7
 8017938:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801793c:	f7fa fc22 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8017940:	4604      	mov	r4, r0
 8017942:	6823      	ldr	r3, [r4, #0]
 8017944:	3368      	adds	r3, #104	; 0x68
 8017946:	681d      	ldr	r5, [r3, #0]
 8017948:	f7fa fc2c 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801794c:	4603      	mov	r3, r0
 801794e:	9300      	str	r3, [sp, #0]
 8017950:	f240 3387 	movw	r3, #903	; 0x387
 8017954:	4a05      	ldr	r2, [pc, #20]	; (801796c <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 8017956:	4906      	ldr	r1, [pc, #24]	; (8017970 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8017958:	4620      	mov	r0, r4
 801795a:	47a8      	blx	r5
    return cpputest_longlong(0);
 801795c:	2100      	movs	r1, #0
 801795e:	68f8      	ldr	r0, [r7, #12]
 8017960:	f7f1 f864 	bl	8008a2c <_ZN17cpputest_longlongC1Ei>
}
 8017964:	68f8      	ldr	r0, [r7, #12]
 8017966:	3710      	adds	r7, #16
 8017968:	46bd      	mov	sp, r7
 801796a:	bdb0      	pop	{r4, r5, r7, pc}
 801796c:	08023850 	.word	0x08023850
 8017970:	08023898 	.word	0x08023898

08017974 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 8017974:	b480      	push	{r7}
 8017976:	b083      	sub	sp, #12
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
    return false;
 801797c:	2300      	movs	r3, #0
}
 801797e:	4618      	mov	r0, r3
 8017980:	370c      	adds	r7, #12
 8017982:	46bd      	mov	sp, r7
 8017984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017988:	4770      	bx	lr

0801798a <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 801798a:	b480      	push	{r7}
 801798c:	b083      	sub	sp, #12
 801798e:	af00      	add	r7, sp, #0
 8017990:	6078      	str	r0, [r7, #4]
 8017992:	460b      	mov	r3, r1
 8017994:	70fb      	strb	r3, [r7, #3]
    return false;
 8017996:	2300      	movs	r3, #0
}
 8017998:	4618      	mov	r0, r3
 801799a:	370c      	adds	r7, #12
 801799c:	46bd      	mov	sp, r7
 801799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a2:	4770      	bx	lr

080179a4 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 80179a4:	b480      	push	{r7}
 80179a6:	b083      	sub	sp, #12
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
    return 0;
 80179ac:	2300      	movs	r3, #0
}
 80179ae:	4618      	mov	r0, r3
 80179b0:	370c      	adds	r7, #12
 80179b2:	46bd      	mov	sp, r7
 80179b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b8:	4770      	bx	lr

080179ba <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 80179ba:	b480      	push	{r7}
 80179bc:	b083      	sub	sp, #12
 80179be:	af00      	add	r7, sp, #0
 80179c0:	6078      	str	r0, [r7, #4]
    return 0.0;
 80179c2:	f04f 0200 	mov.w	r2, #0
 80179c6:	f04f 0300 	mov.w	r3, #0
 80179ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80179ce:	eeb0 0a47 	vmov.f32	s0, s14
 80179d2:	eef0 0a67 	vmov.f32	s1, s15
 80179d6:	370c      	adds	r7, #12
 80179d8:	46bd      	mov	sp, r7
 80179da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179de:	4770      	bx	lr

080179e0 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b084      	sub	sp, #16
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	60f8      	str	r0, [r7, #12]
 80179e8:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	3398      	adds	r3, #152	; 0x98
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	68f8      	ldr	r0, [r7, #12]
 80179f6:	4798      	blx	r3
 80179f8:	eeb0 7a40 	vmov.f32	s14, s0
 80179fc:	eef0 7a60 	vmov.f32	s15, s1
}
 8017a00:	eeb0 0a47 	vmov.f32	s0, s14
 8017a04:	eef0 0a67 	vmov.f32	s1, s15
 8017a08:	3710      	adds	r7, #16
 8017a0a:	46bd      	mov	sp, r7
 8017a0c:	bd80      	pop	{r7, pc}

08017a0e <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 8017a0e:	b480      	push	{r7}
 8017a10:	b083      	sub	sp, #12
 8017a12:	af00      	add	r7, sp, #0
 8017a14:	6078      	str	r0, [r7, #4]
    return 0;
 8017a16:	2300      	movs	r3, #0
}
 8017a18:	4618      	mov	r0, r3
 8017a1a:	370c      	adds	r7, #12
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a22:	4770      	bx	lr

08017a24 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 8017a24:	b480      	push	{r7}
 8017a26:	b083      	sub	sp, #12
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8017a2c:	2300      	movs	r3, #0
}
 8017a2e:	4618      	mov	r0, r3
 8017a30:	370c      	adds	r7, #12
 8017a32:	46bd      	mov	sp, r7
 8017a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a38:	4770      	bx	lr

08017a3a <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 8017a3a:	b480      	push	{r7}
 8017a3c:	b083      	sub	sp, #12
 8017a3e:	af00      	add	r7, sp, #0
 8017a40:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8017a42:	2300      	movs	r3, #0
}
 8017a44:	4618      	mov	r0, r3
 8017a46:	370c      	adds	r7, #12
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4e:	4770      	bx	lr

08017a50 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 8017a50:	b480      	push	{r7}
 8017a52:	b083      	sub	sp, #12
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8017a58:	2300      	movs	r3, #0
}
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	370c      	adds	r7, #12
 8017a5e:	46bd      	mov	sp, r7
 8017a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a64:	4770      	bx	lr

08017a66 <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 8017a66:	b580      	push	{r7, lr}
 8017a68:	b082      	sub	sp, #8
 8017a6a:	af00      	add	r7, sp, #0
 8017a6c:	6078      	str	r0, [r7, #4]
 8017a6e:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	33a8      	adds	r3, #168	; 0xa8
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	6878      	ldr	r0, [r7, #4]
 8017a7a:	4798      	blx	r3
 8017a7c:	4603      	mov	r3, r0
}
 8017a7e:	4618      	mov	r0, r3
 8017a80:	3708      	adds	r7, #8
 8017a82:	46bd      	mov	sp, r7
 8017a84:	bd80      	pop	{r7, pc}

08017a86 <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 8017a86:	b580      	push	{r7, lr}
 8017a88:	b082      	sub	sp, #8
 8017a8a:	af00      	add	r7, sp, #0
 8017a8c:	6078      	str	r0, [r7, #4]
 8017a8e:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	33a0      	adds	r3, #160	; 0xa0
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	6878      	ldr	r0, [r7, #4]
 8017a9a:	4798      	blx	r3
 8017a9c:	4603      	mov	r3, r0
}
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	3708      	adds	r7, #8
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	bd80      	pop	{r7, pc}

08017aa6 <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 8017aa6:	b580      	push	{r7, lr}
 8017aa8:	b082      	sub	sp, #8
 8017aaa:	af00      	add	r7, sp, #0
 8017aac:	6078      	str	r0, [r7, #4]
 8017aae:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	33b0      	adds	r3, #176	; 0xb0
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	6878      	ldr	r0, [r7, #4]
 8017aba:	4798      	blx	r3
 8017abc:	4603      	mov	r3, r0
}
 8017abe:	4618      	mov	r0, r3
 8017ac0:	3708      	adds	r7, #8
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	bd80      	pop	{r7, pc}
	...

08017ac8 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 8017ac8:	b480      	push	{r7}
 8017aca:	b083      	sub	sp, #12
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
    return "";
 8017ad0:	4b03      	ldr	r3, [pc, #12]	; (8017ae0 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	370c      	adds	r7, #12
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017adc:	4770      	bx	lr
 8017ade:	bf00      	nop
 8017ae0:	08023838 	.word	0x08023838

08017ae4 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b082      	sub	sp, #8
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	6078      	str	r0, [r7, #4]
 8017aec:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	3394      	adds	r3, #148	; 0x94
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	6878      	ldr	r0, [r7, #4]
 8017af8:	4798      	blx	r3
 8017afa:	4603      	mov	r3, r0
}
 8017afc:	4618      	mov	r0, r3
 8017afe:	3708      	adds	r7, #8
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd80      	pop	{r7, pc}

08017b04 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 8017b04:	b480      	push	{r7}
 8017b06:	b083      	sub	sp, #12
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]
 8017b0c:	6039      	str	r1, [r7, #0]
    return 0;
 8017b0e:	2300      	movs	r3, #0
}
 8017b10:	4618      	mov	r0, r3
 8017b12:	370c      	adds	r7, #12
 8017b14:	46bd      	mov	sp, r7
 8017b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b1a:	4770      	bx	lr

08017b1c <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	b082      	sub	sp, #8
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	6078      	str	r0, [r7, #4]
 8017b24:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	3388      	adds	r3, #136	; 0x88
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	6878      	ldr	r0, [r7, #4]
 8017b30:	4798      	blx	r3
 8017b32:	4603      	mov	r3, r0
}
 8017b34:	4618      	mov	r0, r3
 8017b36:	3708      	adds	r7, #8
 8017b38:	46bd      	mov	sp, r7
 8017b3a:	bd80      	pop	{r7, pc}

08017b3c <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 8017b3c:	b590      	push	{r4, r7, lr}
 8017b3e:	b085      	sub	sp, #20
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	6078      	str	r0, [r7, #4]
 8017b44:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	3304      	adds	r3, #4
 8017b4a:	490e      	ldr	r1, [pc, #56]	; (8017b84 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	f7f3 fb7d 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	1d1c      	adds	r4, r3, #4
 8017b56:	f107 0308 	add.w	r3, r7, #8
 8017b5a:	6839      	ldr	r1, [r7, #0]
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	f7f3 fdd1 	bl	800b704 <_Z10StringFromPKv>
 8017b62:	f107 0308 	add.w	r3, r7, #8
 8017b66:	4619      	mov	r1, r3
 8017b68:	4620      	mov	r0, r4
 8017b6a:	f7f3 fb5d 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 8017b6e:	f107 0308 	add.w	r3, r7, #8
 8017b72:	4618      	mov	r0, r3
 8017b74:	f7f3 fadb 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return *this;
 8017b78:	687b      	ldr	r3, [r7, #4]
}
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	3714      	adds	r7, #20
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	bd90      	pop	{r4, r7, pc}
 8017b82:	bf00      	nop
 8017b84:	0802396c 	.word	0x0802396c

08017b88 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 8017b88:	b598      	push	{r3, r4, r7, lr}
 8017b8a:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 8017b8c:	4b09      	ldr	r3, [pc, #36]	; (8017bb4 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d10b      	bne.n	8017bac <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 8017b94:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8017b98:	4907      	ldr	r1, [pc, #28]	; (8017bb8 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 8017b9a:	200c      	movs	r0, #12
 8017b9c:	f7f0 fb4c 	bl	8008238 <_ZnwjPKci>
 8017ba0:	4604      	mov	r4, r0
 8017ba2:	4620      	mov	r0, r4
 8017ba4:	f7ff fa4c 	bl	8017040 <_ZN19MockActualCallTraceC1Ev>
 8017ba8:	4b02      	ldr	r3, [pc, #8]	; (8017bb4 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8017baa:	601c      	str	r4, [r3, #0]
    return *instance_;
 8017bac:	4b01      	ldr	r3, [pc, #4]	; (8017bb4 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8017bae:	681b      	ldr	r3, [r3, #0]
}
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	bd98      	pop	{r3, r4, r7, pc}
 8017bb4:	20000d48 	.word	0x20000d48
 8017bb8:	08023850 	.word	0x08023850

08017bbc <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	af00      	add	r7, sp, #0
    delete instance_;
 8017bc0:	4b06      	ldr	r3, [pc, #24]	; (8017bdc <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d004      	beq.n	8017bd2 <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 8017bc8:	681a      	ldr	r2, [r3, #0]
 8017bca:	3204      	adds	r2, #4
 8017bcc:	6812      	ldr	r2, [r2, #0]
 8017bce:	4618      	mov	r0, r3
 8017bd0:	4790      	blx	r2
    instance_ = NULLPTR;
 8017bd2:	4b02      	ldr	r3, [pc, #8]	; (8017bdc <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8017bd4:	2200      	movs	r2, #0
 8017bd6:	601a      	str	r2, [r3, #0]
}
 8017bd8:	bf00      	nop
 8017bda:	bd80      	pop	{r7, pc}
 8017bdc:	20000d48 	.word	0x20000d48

08017be0 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b082      	sub	sp, #8
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	6078      	str	r0, [r7, #4]
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	4618      	mov	r0, r3
 8017bec:	f7fd fe9a 	bl	8015924 <_ZN14MockActualCallC1Ev>
 8017bf0:	4a03      	ldr	r2, [pc, #12]	; (8017c00 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	601a      	str	r2, [r3, #0]
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	3708      	adds	r7, #8
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd80      	pop	{r7, pc}
 8017c00:	08025cf4 	.word	0x08025cf4

08017c04 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 8017c04:	b580      	push	{r7, lr}
 8017c06:	af00      	add	r7, sp, #0
 8017c08:	4801      	ldr	r0, [pc, #4]	; (8017c10 <__tcf_0+0xc>)
 8017c0a:	f000 f831 	bl	8017c70 <_ZN21MockIgnoredActualCallD1Ev>
 8017c0e:	bd80      	pop	{r7, pc}
 8017c10:	20000d4c 	.word	0x20000d4c

08017c14 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 8017c18:	4b12      	ldr	r3, [pc, #72]	; (8017c64 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8017c1a:	781b      	ldrb	r3, [r3, #0]
 8017c1c:	f3bf 8f5b 	dmb	ish
 8017c20:	b2db      	uxtb	r3, r3
 8017c22:	f003 0301 	and.w	r3, r3, #1
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	bf0c      	ite	eq
 8017c2a:	2301      	moveq	r3, #1
 8017c2c:	2300      	movne	r3, #0
 8017c2e:	b2db      	uxtb	r3, r3
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d013      	beq.n	8017c5c <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8017c34:	480b      	ldr	r0, [pc, #44]	; (8017c64 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8017c36:	f005 fd83 	bl	801d740 <__cxa_guard_acquire>
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	bf14      	ite	ne
 8017c40:	2301      	movne	r3, #1
 8017c42:	2300      	moveq	r3, #0
 8017c44:	b2db      	uxtb	r3, r3
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d008      	beq.n	8017c5c <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8017c4a:	4807      	ldr	r0, [pc, #28]	; (8017c68 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 8017c4c:	f7ff ffc8 	bl	8017be0 <_ZN21MockIgnoredActualCallC1Ev>
 8017c50:	4804      	ldr	r0, [pc, #16]	; (8017c64 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8017c52:	f005 fd81 	bl	801d758 <__cxa_guard_release>
 8017c56:	4805      	ldr	r0, [pc, #20]	; (8017c6c <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 8017c58:	f005 fda5 	bl	801d7a6 <atexit>
    return call;
 8017c5c:	4b02      	ldr	r3, [pc, #8]	; (8017c68 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 8017c5e:	4618      	mov	r0, r3
 8017c60:	bd80      	pop	{r7, pc}
 8017c62:	bf00      	nop
 8017c64:	20000d50 	.word	0x20000d50
 8017c68:	20000d4c 	.word	0x20000d4c
 8017c6c:	08017c05 	.word	0x08017c05

08017c70 <_ZN21MockIgnoredActualCallD1Ev>:
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b082      	sub	sp, #8
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	6078      	str	r0, [r7, #4]
 8017c78:	4a05      	ldr	r2, [pc, #20]	; (8017c90 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	601a      	str	r2, [r3, #0]
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	4618      	mov	r0, r3
 8017c82:	f7fd fe5f 	bl	8015944 <_ZN14MockActualCallD1Ev>
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	4618      	mov	r0, r3
 8017c8a:	3708      	adds	r7, #8
 8017c8c:	46bd      	mov	sp, r7
 8017c8e:	bd80      	pop	{r7, pc}
 8017c90:	08025cf4 	.word	0x08025cf4

08017c94 <_ZN21MockIgnoredActualCallD0Ev>:
 8017c94:	b580      	push	{r7, lr}
 8017c96:	b082      	sub	sp, #8
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	6078      	str	r0, [r7, #4]
 8017c9c:	6878      	ldr	r0, [r7, #4]
 8017c9e:	f7ff ffe7 	bl	8017c70 <_ZN21MockIgnoredActualCallD1Ev>
 8017ca2:	2104      	movs	r1, #4
 8017ca4:	6878      	ldr	r0, [r7, #4]
 8017ca6:	f7f0 fadb 	bl	8008260 <_ZdlPvj>
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	4618      	mov	r0, r3
 8017cae:	3708      	adds	r7, #8
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	bd80      	pop	{r7, pc}

08017cb4 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b082      	sub	sp, #8
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
 8017cbc:	4a05      	ldr	r2, [pc, #20]	; (8017cd4 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	601a      	str	r2, [r3, #0]
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f7f0 fefd 	bl	8008ac4 <_ZN11MockFailureD1Ev>
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	4618      	mov	r0, r3
 8017cce:	3708      	adds	r7, #8
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	bd80      	pop	{r7, pc}
 8017cd4:	08025bec 	.word	0x08025bec

08017cd8 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b082      	sub	sp, #8
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
 8017ce0:	6878      	ldr	r0, [r7, #4]
 8017ce2:	f7ff ffe7 	bl	8017cb4 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 8017ce6:	2134      	movs	r1, #52	; 0x34
 8017ce8:	6878      	ldr	r0, [r7, #4]
 8017cea:	f7f0 fab9 	bl	8008260 <_ZdlPvj>
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	4618      	mov	r0, r3
 8017cf2:	3708      	adds	r7, #8
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	bd80      	pop	{r7, pc}

08017cf8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b082      	sub	sp, #8
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
 8017d00:	4a05      	ldr	r2, [pc, #20]	; (8017d18 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	601a      	str	r2, [r3, #0]
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f7f0 fedb 	bl	8008ac4 <_ZN11MockFailureD1Ev>
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	4618      	mov	r0, r3
 8017d12:	3708      	adds	r7, #8
 8017d14:	46bd      	mov	sp, r7
 8017d16:	bd80      	pop	{r7, pc}
 8017d18:	08025cc8 	.word	0x08025cc8

08017d1c <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b082      	sub	sp, #8
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
 8017d24:	6878      	ldr	r0, [r7, #4]
 8017d26:	f7ff ffe7 	bl	8017cf8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8017d2a:	2134      	movs	r1, #52	; 0x34
 8017d2c:	6878      	ldr	r0, [r7, #4]
 8017d2e:	f7f0 fa97 	bl	8008260 <_ZdlPvj>
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	4618      	mov	r0, r3
 8017d36:	3708      	adds	r7, #8
 8017d38:	46bd      	mov	sp, r7
 8017d3a:	bd80      	pop	{r7, pc}

08017d3c <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 8017d3c:	b580      	push	{r7, lr}
 8017d3e:	b082      	sub	sp, #8
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	6078      	str	r0, [r7, #4]
 8017d44:	4a05      	ldr	r2, [pc, #20]	; (8017d5c <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	601a      	str	r2, [r3, #0]
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	f7f0 feb9 	bl	8008ac4 <_ZN11MockFailureD1Ev>
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	4618      	mov	r0, r3
 8017d56:	3708      	adds	r7, #8
 8017d58:	46bd      	mov	sp, r7
 8017d5a:	bd80      	pop	{r7, pc}
 8017d5c:	08025c9c 	.word	0x08025c9c

08017d60 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b082      	sub	sp, #8
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	6078      	str	r0, [r7, #4]
 8017d68:	6878      	ldr	r0, [r7, #4]
 8017d6a:	f7ff ffe7 	bl	8017d3c <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8017d6e:	2134      	movs	r1, #52	; 0x34
 8017d70:	6878      	ldr	r0, [r7, #4]
 8017d72:	f7f0 fa75 	bl	8008260 <_ZdlPvj>
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	4618      	mov	r0, r3
 8017d7a:	3708      	adds	r7, #8
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	bd80      	pop	{r7, pc}

08017d80 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b082      	sub	sp, #8
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	6078      	str	r0, [r7, #4]
 8017d88:	4a05      	ldr	r2, [pc, #20]	; (8017da0 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	601a      	str	r2, [r3, #0]
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	4618      	mov	r0, r3
 8017d92:	f7f0 fe97 	bl	8008ac4 <_ZN11MockFailureD1Ev>
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	4618      	mov	r0, r3
 8017d9a:	3708      	adds	r7, #8
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	bd80      	pop	{r7, pc}
 8017da0:	08025c70 	.word	0x08025c70

08017da4 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b082      	sub	sp, #8
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	6078      	str	r0, [r7, #4]
 8017dac:	6878      	ldr	r0, [r7, #4]
 8017dae:	f7ff ffe7 	bl	8017d80 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8017db2:	2134      	movs	r1, #52	; 0x34
 8017db4:	6878      	ldr	r0, [r7, #4]
 8017db6:	f7f0 fa53 	bl	8008260 <_ZdlPvj>
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	3708      	adds	r7, #8
 8017dc0:	46bd      	mov	sp, r7
 8017dc2:	bd80      	pop	{r7, pc}

08017dc4 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 8017dc4:	b580      	push	{r7, lr}
 8017dc6:	b082      	sub	sp, #8
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	6078      	str	r0, [r7, #4]
 8017dcc:	4a05      	ldr	r2, [pc, #20]	; (8017de4 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	601a      	str	r2, [r3, #0]
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	f7f0 fe75 	bl	8008ac4 <_ZN11MockFailureD1Ev>
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	4618      	mov	r0, r3
 8017dde:	3708      	adds	r7, #8
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd80      	pop	{r7, pc}
 8017de4:	08025c18 	.word	0x08025c18

08017de8 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 8017de8:	b580      	push	{r7, lr}
 8017dea:	b082      	sub	sp, #8
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	6078      	str	r0, [r7, #4]
 8017df0:	6878      	ldr	r0, [r7, #4]
 8017df2:	f7ff ffe7 	bl	8017dc4 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8017df6:	2134      	movs	r1, #52	; 0x34
 8017df8:	6878      	ldr	r0, [r7, #4]
 8017dfa:	f7f0 fa31 	bl	8008260 <_ZdlPvj>
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	4618      	mov	r0, r3
 8017e02:	3708      	adds	r7, #8
 8017e04:	46bd      	mov	sp, r7
 8017e06:	bd80      	pop	{r7, pc}

08017e08 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b082      	sub	sp, #8
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	6078      	str	r0, [r7, #4]
 8017e10:	4a05      	ldr	r2, [pc, #20]	; (8017e28 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	601a      	str	r2, [r3, #0]
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	4618      	mov	r0, r3
 8017e1a:	f7f0 fe53 	bl	8008ac4 <_ZN11MockFailureD1Ev>
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	4618      	mov	r0, r3
 8017e22:	3708      	adds	r7, #8
 8017e24:	46bd      	mov	sp, r7
 8017e26:	bd80      	pop	{r7, pc}
 8017e28:	08025c44 	.word	0x08025c44

08017e2c <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b082      	sub	sp, #8
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
 8017e34:	6878      	ldr	r0, [r7, #4]
 8017e36:	f7ff ffe7 	bl	8017e08 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8017e3a:	2134      	movs	r1, #52	; 0x34
 8017e3c:	6878      	ldr	r0, [r7, #4]
 8017e3e:	f7f0 fa0f 	bl	8008260 <_ZdlPvj>
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	4618      	mov	r0, r3
 8017e46:	3708      	adds	r7, #8
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	bd80      	pop	{r7, pc}

08017e4c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	b082      	sub	sp, #8
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	6078      	str	r0, [r7, #4]
 8017e54:	4a05      	ldr	r2, [pc, #20]	; (8017e6c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	601a      	str	r2, [r3, #0]
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	f7f0 fe31 	bl	8008ac4 <_ZN11MockFailureD1Ev>
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	4618      	mov	r0, r3
 8017e66:	3708      	adds	r7, #8
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	bd80      	pop	{r7, pc}
 8017e6c:	08025b94 	.word	0x08025b94

08017e70 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 8017e70:	b580      	push	{r7, lr}
 8017e72:	b082      	sub	sp, #8
 8017e74:	af00      	add	r7, sp, #0
 8017e76:	6078      	str	r0, [r7, #4]
 8017e78:	6878      	ldr	r0, [r7, #4]
 8017e7a:	f7ff ffe7 	bl	8017e4c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8017e7e:	2134      	movs	r1, #52	; 0x34
 8017e80:	6878      	ldr	r0, [r7, #4]
 8017e82:	f7f0 f9ed 	bl	8008260 <_ZdlPvj>
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	4618      	mov	r0, r3
 8017e8a:	3708      	adds	r7, #8
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	bd80      	pop	{r7, pc}

08017e90 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b082      	sub	sp, #8
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	6078      	str	r0, [r7, #4]
 8017e98:	4a05      	ldr	r2, [pc, #20]	; (8017eb0 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	601a      	str	r2, [r3, #0]
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f7f0 fe0f 	bl	8008ac4 <_ZN11MockFailureD1Ev>
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	3708      	adds	r7, #8
 8017eac:	46bd      	mov	sp, r7
 8017eae:	bd80      	pop	{r7, pc}
 8017eb0:	08025bc0 	.word	0x08025bc0

08017eb4 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b082      	sub	sp, #8
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6078      	str	r0, [r7, #4]
 8017ebc:	6878      	ldr	r0, [r7, #4]
 8017ebe:	f7ff ffe7 	bl	8017e90 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8017ec2:	2134      	movs	r1, #52	; 0x34
 8017ec4:	6878      	ldr	r0, [r7, #4]
 8017ec6:	f7f0 f9cb 	bl	8008260 <_ZdlPvj>
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	4618      	mov	r0, r3
 8017ece:	3708      	adds	r7, #8
 8017ed0:	46bd      	mov	sp, r7
 8017ed2:	bd80      	pop	{r7, pc}

08017ed4 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b082      	sub	sp, #8
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	6078      	str	r0, [r7, #4]
 8017edc:	6039      	str	r1, [r7, #0]
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	3310      	adds	r3, #16
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	683a      	ldr	r2, [r7, #0]
 8017ee8:	6839      	ldr	r1, [r7, #0]
 8017eea:	6878      	ldr	r0, [r7, #4]
 8017eec:	4798      	blx	r3
 8017eee:	4603      	mov	r3, r0
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	3708      	adds	r7, #8
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	bd80      	pop	{r7, pc}

08017ef8 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 8017ef8:	b480      	push	{r7}
 8017efa:	b083      	sub	sp, #12
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6078      	str	r0, [r7, #4]
 8017f00:	6039      	str	r1, [r7, #0]
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	4618      	mov	r0, r3
 8017f06:	370c      	adds	r7, #12
 8017f08:	46bd      	mov	sp, r7
 8017f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f0e:	4770      	bx	lr

08017f10 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 8017f10:	b480      	push	{r7}
 8017f12:	b083      	sub	sp, #12
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	6078      	str	r0, [r7, #4]
 8017f18:	6039      	str	r1, [r7, #0]
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	370c      	adds	r7, #12
 8017f20:	46bd      	mov	sp, r7
 8017f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f26:	4770      	bx	lr

08017f28 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 8017f28:	b480      	push	{r7}
 8017f2a:	b085      	sub	sp, #20
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	60f8      	str	r0, [r7, #12]
 8017f30:	60b9      	str	r1, [r7, #8]
 8017f32:	607a      	str	r2, [r7, #4]
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	4618      	mov	r0, r3
 8017f38:	3714      	adds	r7, #20
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f40:	4770      	bx	lr

08017f42 <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8017f42:	b480      	push	{r7}
 8017f44:	b085      	sub	sp, #20
 8017f46:	af00      	add	r7, sp, #0
 8017f48:	60f8      	str	r0, [r7, #12]
 8017f4a:	60b9      	str	r1, [r7, #8]
 8017f4c:	4613      	mov	r3, r2
 8017f4e:	71fb      	strb	r3, [r7, #7]
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	4618      	mov	r0, r3
 8017f54:	3714      	adds	r7, #20
 8017f56:	46bd      	mov	sp, r7
 8017f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f5c:	4770      	bx	lr

08017f5e <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8017f5e:	b480      	push	{r7}
 8017f60:	b085      	sub	sp, #20
 8017f62:	af00      	add	r7, sp, #0
 8017f64:	60f8      	str	r0, [r7, #12]
 8017f66:	60b9      	str	r1, [r7, #8]
 8017f68:	607a      	str	r2, [r7, #4]
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	3714      	adds	r7, #20
 8017f70:	46bd      	mov	sp, r7
 8017f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f76:	4770      	bx	lr

08017f78 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 8017f78:	b480      	push	{r7}
 8017f7a:	b085      	sub	sp, #20
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	60f8      	str	r0, [r7, #12]
 8017f80:	60b9      	str	r1, [r7, #8]
 8017f82:	607a      	str	r2, [r7, #4]
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	4618      	mov	r0, r3
 8017f88:	3714      	adds	r7, #20
 8017f8a:	46bd      	mov	sp, r7
 8017f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f90:	4770      	bx	lr

08017f92 <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8017f92:	b480      	push	{r7}
 8017f94:	b085      	sub	sp, #20
 8017f96:	af00      	add	r7, sp, #0
 8017f98:	60f8      	str	r0, [r7, #12]
 8017f9a:	60b9      	str	r1, [r7, #8]
 8017f9c:	607a      	str	r2, [r7, #4]
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	3714      	adds	r7, #20
 8017fa4:	46bd      	mov	sp, r7
 8017fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017faa:	4770      	bx	lr

08017fac <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8017fac:	b480      	push	{r7}
 8017fae:	b085      	sub	sp, #20
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	60f8      	str	r0, [r7, #12]
 8017fb4:	60b9      	str	r1, [r7, #8]
 8017fb6:	607a      	str	r2, [r7, #4]
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	4618      	mov	r0, r3
 8017fbc:	3714      	adds	r7, #20
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc4:	4770      	bx	lr

08017fc6 <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8017fc6:	b480      	push	{r7}
 8017fc8:	b085      	sub	sp, #20
 8017fca:	af00      	add	r7, sp, #0
 8017fcc:	60f8      	str	r0, [r7, #12]
 8017fce:	60b9      	str	r1, [r7, #8]
 8017fd0:	4639      	mov	r1, r7
 8017fd2:	e881 000c 	stmia.w	r1, {r2, r3}
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	4618      	mov	r0, r3
 8017fda:	3714      	adds	r7, #20
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe2:	4770      	bx	lr

08017fe4 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8017fe4:	b480      	push	{r7}
 8017fe6:	b085      	sub	sp, #20
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	60f8      	str	r0, [r7, #12]
 8017fec:	60b9      	str	r1, [r7, #8]
 8017fee:	4639      	mov	r1, r7
 8017ff0:	e881 000c 	stmia.w	r1, {r2, r3}
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	3714      	adds	r7, #20
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018000:	4770      	bx	lr

08018002 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8018002:	b480      	push	{r7}
 8018004:	b085      	sub	sp, #20
 8018006:	af00      	add	r7, sp, #0
 8018008:	60f8      	str	r0, [r7, #12]
 801800a:	60b9      	str	r1, [r7, #8]
 801800c:	ed87 0b00 	vstr	d0, [r7]
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	4618      	mov	r0, r3
 8018014:	3714      	adds	r7, #20
 8018016:	46bd      	mov	sp, r7
 8018018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801c:	4770      	bx	lr

0801801e <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 801801e:	b480      	push	{r7}
 8018020:	b087      	sub	sp, #28
 8018022:	af00      	add	r7, sp, #0
 8018024:	6178      	str	r0, [r7, #20]
 8018026:	6139      	str	r1, [r7, #16]
 8018028:	ed87 0b02 	vstr	d0, [r7, #8]
 801802c:	ed87 1b00 	vstr	d1, [r7]
 8018030:	697b      	ldr	r3, [r7, #20]
 8018032:	4618      	mov	r0, r3
 8018034:	371c      	adds	r7, #28
 8018036:	46bd      	mov	sp, r7
 8018038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803c:	4770      	bx	lr

0801803e <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801803e:	b480      	push	{r7}
 8018040:	b085      	sub	sp, #20
 8018042:	af00      	add	r7, sp, #0
 8018044:	60f8      	str	r0, [r7, #12]
 8018046:	60b9      	str	r1, [r7, #8]
 8018048:	607a      	str	r2, [r7, #4]
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	4618      	mov	r0, r3
 801804e:	3714      	adds	r7, #20
 8018050:	46bd      	mov	sp, r7
 8018052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018056:	4770      	bx	lr

08018058 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8018058:	b480      	push	{r7}
 801805a:	b085      	sub	sp, #20
 801805c:	af00      	add	r7, sp, #0
 801805e:	60f8      	str	r0, [r7, #12]
 8018060:	60b9      	str	r1, [r7, #8]
 8018062:	607a      	str	r2, [r7, #4]
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	4618      	mov	r0, r3
 8018068:	3714      	adds	r7, #20
 801806a:	46bd      	mov	sp, r7
 801806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018070:	4770      	bx	lr

08018072 <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8018072:	b480      	push	{r7}
 8018074:	b085      	sub	sp, #20
 8018076:	af00      	add	r7, sp, #0
 8018078:	60f8      	str	r0, [r7, #12]
 801807a:	60b9      	str	r1, [r7, #8]
 801807c:	607a      	str	r2, [r7, #4]
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	4618      	mov	r0, r3
 8018082:	3714      	adds	r7, #20
 8018084:	46bd      	mov	sp, r7
 8018086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801808a:	4770      	bx	lr

0801808c <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 801808c:	b480      	push	{r7}
 801808e:	b085      	sub	sp, #20
 8018090:	af00      	add	r7, sp, #0
 8018092:	60f8      	str	r0, [r7, #12]
 8018094:	60b9      	str	r1, [r7, #8]
 8018096:	607a      	str	r2, [r7, #4]
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	4618      	mov	r0, r3
 801809c:	3714      	adds	r7, #20
 801809e:	46bd      	mov	sp, r7
 80180a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180a4:	4770      	bx	lr

080180a6 <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 80180a6:	b480      	push	{r7}
 80180a8:	b085      	sub	sp, #20
 80180aa:	af00      	add	r7, sp, #0
 80180ac:	60f8      	str	r0, [r7, #12]
 80180ae:	60b9      	str	r1, [r7, #8]
 80180b0:	607a      	str	r2, [r7, #4]
 80180b2:	603b      	str	r3, [r7, #0]
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	4618      	mov	r0, r3
 80180b8:	3714      	adds	r7, #20
 80180ba:	46bd      	mov	sp, r7
 80180bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c0:	4770      	bx	lr

080180c2 <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 80180c2:	b480      	push	{r7}
 80180c4:	b085      	sub	sp, #20
 80180c6:	af00      	add	r7, sp, #0
 80180c8:	60f8      	str	r0, [r7, #12]
 80180ca:	60b9      	str	r1, [r7, #8]
 80180cc:	607a      	str	r2, [r7, #4]
 80180ce:	603b      	str	r3, [r7, #0]
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	4618      	mov	r0, r3
 80180d4:	3714      	adds	r7, #20
 80180d6:	46bd      	mov	sp, r7
 80180d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180dc:	4770      	bx	lr

080180de <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 80180de:	b480      	push	{r7}
 80180e0:	b085      	sub	sp, #20
 80180e2:	af00      	add	r7, sp, #0
 80180e4:	60f8      	str	r0, [r7, #12]
 80180e6:	60b9      	str	r1, [r7, #8]
 80180e8:	607a      	str	r2, [r7, #4]
 80180ea:	603b      	str	r3, [r7, #0]
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	4618      	mov	r0, r3
 80180f0:	3714      	adds	r7, #20
 80180f2:	46bd      	mov	sp, r7
 80180f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f8:	4770      	bx	lr

080180fa <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 80180fa:	b480      	push	{r7}
 80180fc:	b085      	sub	sp, #20
 80180fe:	af00      	add	r7, sp, #0
 8018100:	60f8      	str	r0, [r7, #12]
 8018102:	60b9      	str	r1, [r7, #8]
 8018104:	607a      	str	r2, [r7, #4]
 8018106:	603b      	str	r3, [r7, #0]
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	4618      	mov	r0, r3
 801810c:	3714      	adds	r7, #20
 801810e:	46bd      	mov	sp, r7
 8018110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018114:	4770      	bx	lr

08018116 <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 8018116:	b480      	push	{r7}
 8018118:	b083      	sub	sp, #12
 801811a:	af00      	add	r7, sp, #0
 801811c:	6078      	str	r0, [r7, #4]
 801811e:	6039      	str	r1, [r7, #0]
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	4618      	mov	r0, r3
 8018124:	370c      	adds	r7, #12
 8018126:	46bd      	mov	sp, r7
 8018128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812c:	4770      	bx	lr

0801812e <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 801812e:	b480      	push	{r7}
 8018130:	b083      	sub	sp, #12
 8018132:	af00      	add	r7, sp, #0
 8018134:	6078      	str	r0, [r7, #4]
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	4618      	mov	r0, r3
 801813a:	370c      	adds	r7, #12
 801813c:	46bd      	mov	sp, r7
 801813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018142:	4770      	bx	lr

08018144 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 8018144:	b480      	push	{r7}
 8018146:	b083      	sub	sp, #12
 8018148:	af00      	add	r7, sp, #0
 801814a:	6078      	str	r0, [r7, #4]
 801814c:	460b      	mov	r3, r1
 801814e:	70fb      	strb	r3, [r7, #3]
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	4618      	mov	r0, r3
 8018154:	370c      	adds	r7, #12
 8018156:	46bd      	mov	sp, r7
 8018158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815c:	4770      	bx	lr

0801815e <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 801815e:	b480      	push	{r7}
 8018160:	b083      	sub	sp, #12
 8018162:	af00      	add	r7, sp, #0
 8018164:	6078      	str	r0, [r7, #4]
 8018166:	6039      	str	r1, [r7, #0]
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	4618      	mov	r0, r3
 801816c:	370c      	adds	r7, #12
 801816e:	46bd      	mov	sp, r7
 8018170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018174:	4770      	bx	lr

08018176 <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 8018176:	b480      	push	{r7}
 8018178:	b083      	sub	sp, #12
 801817a:	af00      	add	r7, sp, #0
 801817c:	6078      	str	r0, [r7, #4]
 801817e:	6039      	str	r1, [r7, #0]
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	4618      	mov	r0, r3
 8018184:	370c      	adds	r7, #12
 8018186:	46bd      	mov	sp, r7
 8018188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818c:	4770      	bx	lr

0801818e <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801818e:	b480      	push	{r7}
 8018190:	b083      	sub	sp, #12
 8018192:	af00      	add	r7, sp, #0
 8018194:	6078      	str	r0, [r7, #4]
 8018196:	6039      	str	r1, [r7, #0]
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	4618      	mov	r0, r3
 801819c:	370c      	adds	r7, #12
 801819e:	46bd      	mov	sp, r7
 80181a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a4:	4770      	bx	lr

080181a6 <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 80181a6:	b480      	push	{r7}
 80181a8:	b083      	sub	sp, #12
 80181aa:	af00      	add	r7, sp, #0
 80181ac:	6078      	str	r0, [r7, #4]
 80181ae:	6039      	str	r1, [r7, #0]
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	4618      	mov	r0, r3
 80181b4:	370c      	adds	r7, #12
 80181b6:	46bd      	mov	sp, r7
 80181b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181bc:	4770      	bx	lr

080181be <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 80181be:	b480      	push	{r7}
 80181c0:	b085      	sub	sp, #20
 80181c2:	af00      	add	r7, sp, #0
 80181c4:	60f8      	str	r0, [r7, #12]
 80181c6:	1d3b      	adds	r3, r7, #4
 80181c8:	e883 0006 	stmia.w	r3, {r1, r2}
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	4618      	mov	r0, r3
 80181d0:	3714      	adds	r7, #20
 80181d2:	46bd      	mov	sp, r7
 80181d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d8:	4770      	bx	lr

080181da <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 80181da:	b480      	push	{r7}
 80181dc:	b085      	sub	sp, #20
 80181de:	af00      	add	r7, sp, #0
 80181e0:	60f8      	str	r0, [r7, #12]
 80181e2:	1d3b      	adds	r3, r7, #4
 80181e4:	e883 0006 	stmia.w	r3, {r1, r2}
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	4618      	mov	r0, r3
 80181ec:	3714      	adds	r7, #20
 80181ee:	46bd      	mov	sp, r7
 80181f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181f4:	4770      	bx	lr

080181f6 <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 80181f6:	b480      	push	{r7}
 80181f8:	b085      	sub	sp, #20
 80181fa:	af00      	add	r7, sp, #0
 80181fc:	60f8      	str	r0, [r7, #12]
 80181fe:	ed87 0b00 	vstr	d0, [r7]
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	4618      	mov	r0, r3
 8018206:	3714      	adds	r7, #20
 8018208:	46bd      	mov	sp, r7
 801820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820e:	4770      	bx	lr

08018210 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 8018210:	b480      	push	{r7}
 8018212:	b083      	sub	sp, #12
 8018214:	af00      	add	r7, sp, #0
 8018216:	6078      	str	r0, [r7, #4]
 8018218:	6039      	str	r1, [r7, #0]
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	4618      	mov	r0, r3
 801821e:	370c      	adds	r7, #12
 8018220:	46bd      	mov	sp, r7
 8018222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018226:	4770      	bx	lr

08018228 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 8018228:	b480      	push	{r7}
 801822a:	b083      	sub	sp, #12
 801822c:	af00      	add	r7, sp, #0
 801822e:	6078      	str	r0, [r7, #4]
 8018230:	6039      	str	r1, [r7, #0]
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	4618      	mov	r0, r3
 8018236:	370c      	adds	r7, #12
 8018238:	46bd      	mov	sp, r7
 801823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801823e:	4770      	bx	lr

08018240 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 8018240:	b480      	push	{r7}
 8018242:	b083      	sub	sp, #12
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
 8018248:	6039      	str	r1, [r7, #0]
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	4618      	mov	r0, r3
 801824e:	370c      	adds	r7, #12
 8018250:	46bd      	mov	sp, r7
 8018252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018256:	4770      	bx	lr

08018258 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 8018258:	b480      	push	{r7}
 801825a:	b083      	sub	sp, #12
 801825c:	af00      	add	r7, sp, #0
 801825e:	6078      	str	r0, [r7, #4]
 8018260:	6039      	str	r1, [r7, #0]
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	4618      	mov	r0, r3
 8018266:	370c      	adds	r7, #12
 8018268:	46bd      	mov	sp, r7
 801826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801826e:	4770      	bx	lr

08018270 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 8018270:	b480      	push	{r7}
 8018272:	b083      	sub	sp, #12
 8018274:	af00      	add	r7, sp, #0
 8018276:	6078      	str	r0, [r7, #4]
 8018278:	6039      	str	r1, [r7, #0]
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	4618      	mov	r0, r3
 801827e:	370c      	adds	r7, #12
 8018280:	46bd      	mov	sp, r7
 8018282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018286:	4770      	bx	lr

08018288 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 8018288:	b480      	push	{r7}
 801828a:	b083      	sub	sp, #12
 801828c:	af00      	add	r7, sp, #0
 801828e:	6078      	str	r0, [r7, #4]
 8018290:	4a04      	ldr	r2, [pc, #16]	; (80182a4 <_ZN16MockExpectedCallC1Ev+0x1c>)
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	601a      	str	r2, [r3, #0]
{
}
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	4618      	mov	r0, r3
 801829a:	370c      	adds	r7, #12
 801829c:	46bd      	mov	sp, r7
 801829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a2:	4770      	bx	lr
 80182a4:	08026298 	.word	0x08026298

080182a8 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 80182a8:	b480      	push	{r7}
 80182aa:	b083      	sub	sp, #12
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	6078      	str	r0, [r7, #4]
 80182b0:	4a04      	ldr	r2, [pc, #16]	; (80182c4 <_ZN16MockExpectedCallD1Ev+0x1c>)
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	601a      	str	r2, [r3, #0]
{
}
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	4618      	mov	r0, r3
 80182ba:	370c      	adds	r7, #12
 80182bc:	46bd      	mov	sp, r7
 80182be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182c2:	4770      	bx	lr
 80182c4:	08026298 	.word	0x08026298

080182c8 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b082      	sub	sp, #8
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	6078      	str	r0, [r7, #4]
 80182d0:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 80182d2:	683b      	ldr	r3, [r7, #0]
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	3358      	adds	r3, #88	; 0x58
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	687a      	ldr	r2, [r7, #4]
 80182dc:	6839      	ldr	r1, [r7, #0]
 80182de:	4610      	mov	r0, r2
 80182e0:	4798      	blx	r3
}
 80182e2:	6878      	ldr	r0, [r7, #4]
 80182e4:	3708      	adds	r7, #8
 80182e6:	46bd      	mov	sp, r7
 80182e8:	bd80      	pop	{r7, pc}

080182ea <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 80182ea:	b580      	push	{r7, lr}
 80182ec:	b082      	sub	sp, #8
 80182ee:	af00      	add	r7, sp, #0
 80182f0:	6078      	str	r0, [r7, #4]
 80182f2:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	3304      	adds	r3, #4
 80182f8:	6839      	ldr	r1, [r7, #0]
 80182fa:	4618      	mov	r0, r3
 80182fc:	f7f2 fbcb 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
}
 8018300:	bf00      	nop
 8018302:	3708      	adds	r7, #8
 8018304:	46bd      	mov	sp, r7
 8018306:	bd80      	pop	{r7, pc}

08018308 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b082      	sub	sp, #8
 801830c:	af00      	add	r7, sp, #0
 801830e:	6078      	str	r0, [r7, #4]
 8018310:	6039      	str	r1, [r7, #0]
    return functionName_;
 8018312:	683b      	ldr	r3, [r7, #0]
 8018314:	3304      	adds	r3, #4
 8018316:	4619      	mov	r1, r3
 8018318:	6878      	ldr	r0, [r7, #4]
 801831a:	f7f2 fba4 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
}
 801831e:	6878      	ldr	r0, [r7, #4]
 8018320:	3708      	adds	r7, #8
 8018322:	46bd      	mov	sp, r7
 8018324:	bd80      	pop	{r7, pc}
	...

08018328 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 8018328:	b590      	push	{r4, r7, lr}
 801832a:	b085      	sub	sp, #20
 801832c:	af00      	add	r7, sp, #0
 801832e:	6078      	str	r0, [r7, #4]
 8018330:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	4618      	mov	r0, r3
 8018336:	f7ff ffa7 	bl	8018288 <_ZN16MockExpectedCallC1Ev>
 801833a:	4a2c      	ldr	r2, [pc, #176]	; (80183ec <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	601a      	str	r2, [r3, #0]
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	3304      	adds	r3, #4
 8018344:	492a      	ldr	r1, [pc, #168]	; (80183f0 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8018346:	4618      	mov	r0, r3
 8018348:	f7f2 fb39 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	2200      	movs	r2, #0
 8018350:	731a      	strb	r2, [r3, #12]
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	2200      	movs	r2, #0
 8018356:	735a      	strb	r2, [r3, #13]
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	2200      	movs	r2, #0
 801835c:	611a      	str	r2, [r3, #16]
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	2200      	movs	r2, #0
 8018362:	615a      	str	r2, [r3, #20]
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	2200      	movs	r2, #0
 8018368:	761a      	strb	r2, [r3, #24]
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8018370:	f107 0308 	add.w	r3, r7, #8
 8018374:	491e      	ldr	r1, [pc, #120]	; (80183f0 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8018376:	4618      	mov	r0, r3
 8018378:	f7f2 fb21 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801837c:	f107 0308 	add.w	r3, r7, #8
 8018380:	4619      	mov	r1, r3
 8018382:	4620      	mov	r0, r4
 8018384:	f003 f840 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018388:	f107 0308 	add.w	r3, r7, #8
 801838c:	4618      	mov	r0, r3
 801838e:	f7f2 fece 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	2200      	movs	r2, #0
 8018396:	661a      	str	r2, [r3, #96]	; 0x60
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	2200      	movs	r2, #0
 801839c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	2201      	movs	r2, #1
 80183a4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	2200      	movs	r2, #0
 80183ac:	669a      	str	r2, [r3, #104]	; 0x68
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	683a      	ldr	r2, [r7, #0]
 80183b2:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 80183b4:	2246      	movs	r2, #70	; 0x46
 80183b6:	490f      	ldr	r1, [pc, #60]	; (80183f4 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 80183b8:	2004      	movs	r0, #4
 80183ba:	f7ef ff3d 	bl	8008238 <_ZnwjPKci>
 80183be:	4604      	mov	r4, r0
 80183c0:	4620      	mov	r0, r4
 80183c2:	f004 ff36 	bl	801d232 <_ZN18MockNamedValueListC1Ev>
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 80183ca:	2247      	movs	r2, #71	; 0x47
 80183cc:	4909      	ldr	r1, [pc, #36]	; (80183f4 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 80183ce:	2004      	movs	r0, #4
 80183d0:	f7ef ff32 	bl	8008238 <_ZnwjPKci>
 80183d4:	4604      	mov	r4, r0
 80183d6:	4620      	mov	r0, r4
 80183d8:	f004 ff2b 	bl	801d232 <_ZN18MockNamedValueListC1Ev>
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	621c      	str	r4, [r3, #32]
}
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	4618      	mov	r0, r3
 80183e4:	3714      	adds	r7, #20
 80183e6:	46bd      	mov	sp, r7
 80183e8:	bd90      	pop	{r4, r7, pc}
 80183ea:	bf00      	nop
 80183ec:	080260dc 	.word	0x080260dc
 80183f0:	08023978 	.word	0x08023978
 80183f4:	0802397c 	.word	0x0802397c

080183f8 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 80183f8:	b580      	push	{r7, lr}
 80183fa:	b082      	sub	sp, #8
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	6078      	str	r0, [r7, #4]
 8018400:	4a17      	ldr	r2, [pc, #92]	; (8018460 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	69db      	ldr	r3, [r3, #28]
 801840a:	4618      	mov	r0, r3
 801840c:	f004 ff1f 	bl	801d24e <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	69db      	ldr	r3, [r3, #28]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d003      	beq.n	8018420 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 8018418:	2104      	movs	r1, #4
 801841a:	4618      	mov	r0, r3
 801841c:	f7ef ff20 	bl	8008260 <_ZdlPvj>
    outputParameters_->clear();
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	6a1b      	ldr	r3, [r3, #32]
 8018424:	4618      	mov	r0, r3
 8018426:	f004 ff12 	bl	801d24e <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	6a1b      	ldr	r3, [r3, #32]
 801842e:	2b00      	cmp	r3, #0
 8018430:	d003      	beq.n	801843a <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 8018432:	2104      	movs	r1, #4
 8018434:	4618      	mov	r0, r3
 8018436:	f7ef ff13 	bl	8008260 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	3328      	adds	r3, #40	; 0x28
 801843e:	4618      	mov	r0, r3
 8018440:	f003 f80c 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	3304      	adds	r3, #4
 8018448:	4618      	mov	r0, r3
 801844a:	f7f2 fe70 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	4618      	mov	r0, r3
 8018452:	f7ff ff29 	bl	80182a8 <_ZN16MockExpectedCallD1Ev>
}
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	4618      	mov	r0, r3
 801845a:	3708      	adds	r7, #8
 801845c:	46bd      	mov	sp, r7
 801845e:	bd80      	pop	{r7, pc}
 8018460:	080260dc 	.word	0x080260dc

08018464 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8018464:	b580      	push	{r7, lr}
 8018466:	b082      	sub	sp, #8
 8018468:	af00      	add	r7, sp, #0
 801846a:	6078      	str	r0, [r7, #4]
}
 801846c:	6878      	ldr	r0, [r7, #4]
 801846e:	f7ff ffc3 	bl	80183f8 <_ZN23MockCheckedExpectedCallD1Ev>
 8018472:	2170      	movs	r1, #112	; 0x70
 8018474:	6878      	ldr	r0, [r7, #4]
 8018476:	f7ef fef3 	bl	8008260 <_ZdlPvj>
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	4618      	mov	r0, r3
 801847e:	3708      	adds	r7, #8
 8018480:	46bd      	mov	sp, r7
 8018482:	bd80      	pop	{r7, pc}

08018484 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 8018484:	b580      	push	{r7, lr}
 8018486:	b082      	sub	sp, #8
 8018488:	af00      	add	r7, sp, #0
 801848a:	6078      	str	r0, [r7, #4]
 801848c:	6039      	str	r1, [r7, #0]
    setName(name);
 801848e:	6839      	ldr	r1, [r7, #0]
 8018490:	6878      	ldr	r0, [r7, #4]
 8018492:	f7ff ff2a 	bl	80182ea <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 8018496:	687b      	ldr	r3, [r7, #4]
}
 8018498:	4618      	mov	r0, r3
 801849a:	3708      	adds	r7, #8
 801849c:	46bd      	mov	sp, r7
 801849e:	bd80      	pop	{r7, pc}

080184a0 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 80184a0:	b590      	push	{r4, r7, lr}
 80184a2:	b087      	sub	sp, #28
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	60f8      	str	r0, [r7, #12]
 80184a8:	60b9      	str	r1, [r7, #8]
 80184aa:	4613      	mov	r3, r2
 80184ac:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80184ae:	225a      	movs	r2, #90	; 0x5a
 80184b0:	490e      	ldr	r1, [pc, #56]	; (80184ec <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 80184b2:	2038      	movs	r0, #56	; 0x38
 80184b4:	f7ef fec0 	bl	8008238 <_ZnwjPKci>
 80184b8:	4604      	mov	r4, r0
 80184ba:	68b9      	ldr	r1, [r7, #8]
 80184bc:	4620      	mov	r0, r4
 80184be:	f001 f851 	bl	8019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80184c2:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	69db      	ldr	r3, [r3, #28]
 80184c8:	6979      	ldr	r1, [r7, #20]
 80184ca:	4618      	mov	r0, r3
 80184cc:	f004 fee2 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80184d0:	697b      	ldr	r3, [r7, #20]
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	3308      	adds	r3, #8
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	79fa      	ldrb	r2, [r7, #7]
 80184da:	4611      	mov	r1, r2
 80184dc:	6978      	ldr	r0, [r7, #20]
 80184de:	4798      	blx	r3
    return *this;
 80184e0:	68fb      	ldr	r3, [r7, #12]
}
 80184e2:	4618      	mov	r0, r3
 80184e4:	371c      	adds	r7, #28
 80184e6:	46bd      	mov	sp, r7
 80184e8:	bd90      	pop	{r4, r7, pc}
 80184ea:	bf00      	nop
 80184ec:	0802397c 	.word	0x0802397c

080184f0 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80184f0:	b590      	push	{r4, r7, lr}
 80184f2:	b087      	sub	sp, #28
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	60f8      	str	r0, [r7, #12]
 80184f8:	60b9      	str	r1, [r7, #8]
 80184fa:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80184fc:	2262      	movs	r2, #98	; 0x62
 80184fe:	490e      	ldr	r1, [pc, #56]	; (8018538 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 8018500:	2038      	movs	r0, #56	; 0x38
 8018502:	f7ef fe99 	bl	8008238 <_ZnwjPKci>
 8018506:	4604      	mov	r4, r0
 8018508:	68b9      	ldr	r1, [r7, #8]
 801850a:	4620      	mov	r0, r4
 801850c:	f001 f82a 	bl	8019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018510:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	69db      	ldr	r3, [r3, #28]
 8018516:	6979      	ldr	r1, [r7, #20]
 8018518:	4618      	mov	r0, r3
 801851a:	f004 febb 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801851e:	697b      	ldr	r3, [r7, #20]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	3310      	adds	r3, #16
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	6879      	ldr	r1, [r7, #4]
 8018528:	6978      	ldr	r0, [r7, #20]
 801852a:	4798      	blx	r3
    return *this;
 801852c:	68fb      	ldr	r3, [r7, #12]
}
 801852e:	4618      	mov	r0, r3
 8018530:	371c      	adds	r7, #28
 8018532:	46bd      	mov	sp, r7
 8018534:	bd90      	pop	{r4, r7, pc}
 8018536:	bf00      	nop
 8018538:	0802397c 	.word	0x0802397c

0801853c <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801853c:	b590      	push	{r4, r7, lr}
 801853e:	b087      	sub	sp, #28
 8018540:	af00      	add	r7, sp, #0
 8018542:	60f8      	str	r0, [r7, #12]
 8018544:	60b9      	str	r1, [r7, #8]
 8018546:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018548:	226a      	movs	r2, #106	; 0x6a
 801854a:	490e      	ldr	r1, [pc, #56]	; (8018584 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801854c:	2038      	movs	r0, #56	; 0x38
 801854e:	f7ef fe73 	bl	8008238 <_ZnwjPKci>
 8018552:	4604      	mov	r4, r0
 8018554:	68b9      	ldr	r1, [r7, #8]
 8018556:	4620      	mov	r0, r4
 8018558:	f001 f804 	bl	8019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801855c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	69db      	ldr	r3, [r3, #28]
 8018562:	6979      	ldr	r1, [r7, #20]
 8018564:	4618      	mov	r0, r3
 8018566:	f004 fe95 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801856a:	697b      	ldr	r3, [r7, #20]
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	330c      	adds	r3, #12
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	6879      	ldr	r1, [r7, #4]
 8018574:	6978      	ldr	r0, [r7, #20]
 8018576:	4798      	blx	r3
    return *this;
 8018578:	68fb      	ldr	r3, [r7, #12]
}
 801857a:	4618      	mov	r0, r3
 801857c:	371c      	adds	r7, #28
 801857e:	46bd      	mov	sp, r7
 8018580:	bd90      	pop	{r4, r7, pc}
 8018582:	bf00      	nop
 8018584:	0802397c 	.word	0x0802397c

08018588 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8018588:	b590      	push	{r4, r7, lr}
 801858a:	b087      	sub	sp, #28
 801858c:	af00      	add	r7, sp, #0
 801858e:	60f8      	str	r0, [r7, #12]
 8018590:	60b9      	str	r1, [r7, #8]
 8018592:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018594:	2272      	movs	r2, #114	; 0x72
 8018596:	490e      	ldr	r1, [pc, #56]	; (80185d0 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 8018598:	2038      	movs	r0, #56	; 0x38
 801859a:	f7ef fe4d 	bl	8008238 <_ZnwjPKci>
 801859e:	4604      	mov	r4, r0
 80185a0:	68b9      	ldr	r1, [r7, #8]
 80185a2:	4620      	mov	r0, r4
 80185a4:	f000 ffde 	bl	8019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80185a8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	69db      	ldr	r3, [r3, #28]
 80185ae:	6979      	ldr	r1, [r7, #20]
 80185b0:	4618      	mov	r0, r3
 80185b2:	f004 fe6f 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80185b6:	697b      	ldr	r3, [r7, #20]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	3314      	adds	r3, #20
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	6879      	ldr	r1, [r7, #4]
 80185c0:	6978      	ldr	r0, [r7, #20]
 80185c2:	4798      	blx	r3
    return *this;
 80185c4:	68fb      	ldr	r3, [r7, #12]
}
 80185c6:	4618      	mov	r0, r3
 80185c8:	371c      	adds	r7, #28
 80185ca:	46bd      	mov	sp, r7
 80185cc:	bd90      	pop	{r4, r7, pc}
 80185ce:	bf00      	nop
 80185d0:	0802397c 	.word	0x0802397c

080185d4 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 80185d4:	b590      	push	{r4, r7, lr}
 80185d6:	b087      	sub	sp, #28
 80185d8:	af00      	add	r7, sp, #0
 80185da:	60f8      	str	r0, [r7, #12]
 80185dc:	60b9      	str	r1, [r7, #8]
 80185de:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80185e0:	227a      	movs	r2, #122	; 0x7a
 80185e2:	490e      	ldr	r1, [pc, #56]	; (801861c <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 80185e4:	2038      	movs	r0, #56	; 0x38
 80185e6:	f7ef fe27 	bl	8008238 <_ZnwjPKci>
 80185ea:	4604      	mov	r4, r0
 80185ec:	68b9      	ldr	r1, [r7, #8]
 80185ee:	4620      	mov	r0, r4
 80185f0:	f000 ffb8 	bl	8019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80185f4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	69db      	ldr	r3, [r3, #28]
 80185fa:	6979      	ldr	r1, [r7, #20]
 80185fc:	4618      	mov	r0, r3
 80185fe:	f004 fe49 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018602:	697b      	ldr	r3, [r7, #20]
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	3318      	adds	r3, #24
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	6879      	ldr	r1, [r7, #4]
 801860c:	6978      	ldr	r0, [r7, #20]
 801860e:	4798      	blx	r3
    return *this;
 8018610:	68fb      	ldr	r3, [r7, #12]
}
 8018612:	4618      	mov	r0, r3
 8018614:	371c      	adds	r7, #28
 8018616:	46bd      	mov	sp, r7
 8018618:	bd90      	pop	{r4, r7, pc}
 801861a:	bf00      	nop
 801861c:	0802397c 	.word	0x0802397c

08018620 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8018620:	b5b0      	push	{r4, r5, r7, lr}
 8018622:	b086      	sub	sp, #24
 8018624:	af02      	add	r7, sp, #8
 8018626:	60f8      	str	r0, [r7, #12]
 8018628:	60b9      	str	r1, [r7, #8]
 801862a:	4639      	mov	r1, r7
 801862c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018630:	f7f9 fda8 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8018634:	4604      	mov	r4, r0
 8018636:	6823      	ldr	r3, [r4, #0]
 8018638:	3368      	adds	r3, #104	; 0x68
 801863a:	681d      	ldr	r5, [r3, #0]
 801863c:	f7f9 fdb2 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018640:	4603      	mov	r3, r0
 8018642:	9300      	str	r3, [sp, #0]
 8018644:	2396      	movs	r3, #150	; 0x96
 8018646:	4a04      	ldr	r2, [pc, #16]	; (8018658 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 8018648:	4904      	ldr	r1, [pc, #16]	; (801865c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801864a:	4620      	mov	r0, r4
 801864c:	47a8      	blx	r5
    return *this;
 801864e:	68fb      	ldr	r3, [r7, #12]
}
 8018650:	4618      	mov	r0, r3
 8018652:	3710      	adds	r7, #16
 8018654:	46bd      	mov	sp, r7
 8018656:	bdb0      	pop	{r4, r5, r7, pc}
 8018658:	0802397c 	.word	0x0802397c
 801865c:	08023998 	.word	0x08023998

08018660 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8018660:	b5b0      	push	{r4, r5, r7, lr}
 8018662:	b086      	sub	sp, #24
 8018664:	af02      	add	r7, sp, #8
 8018666:	60f8      	str	r0, [r7, #12]
 8018668:	60b9      	str	r1, [r7, #8]
 801866a:	4639      	mov	r1, r7
 801866c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018670:	f7f9 fd88 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8018674:	4604      	mov	r4, r0
 8018676:	6823      	ldr	r3, [r4, #0]
 8018678:	3368      	adds	r3, #104	; 0x68
 801867a:	681d      	ldr	r5, [r3, #0]
 801867c:	f7f9 fd92 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018680:	4603      	mov	r3, r0
 8018682:	9300      	str	r3, [sp, #0]
 8018684:	239c      	movs	r3, #156	; 0x9c
 8018686:	4a04      	ldr	r2, [pc, #16]	; (8018698 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 8018688:	4904      	ldr	r1, [pc, #16]	; (801869c <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801868a:	4620      	mov	r0, r4
 801868c:	47a8      	blx	r5
    return *this;
 801868e:	68fb      	ldr	r3, [r7, #12]
}
 8018690:	4618      	mov	r0, r3
 8018692:	3710      	adds	r7, #16
 8018694:	46bd      	mov	sp, r7
 8018696:	bdb0      	pop	{r4, r5, r7, pc}
 8018698:	0802397c 	.word	0x0802397c
 801869c:	080239b8 	.word	0x080239b8

080186a0 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 80186a0:	b590      	push	{r4, r7, lr}
 80186a2:	b087      	sub	sp, #28
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	60f8      	str	r0, [r7, #12]
 80186a8:	60b9      	str	r1, [r7, #8]
 80186aa:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80186ae:	22a4      	movs	r2, #164	; 0xa4
 80186b0:	490e      	ldr	r1, [pc, #56]	; (80186ec <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 80186b2:	2038      	movs	r0, #56	; 0x38
 80186b4:	f7ef fdc0 	bl	8008238 <_ZnwjPKci>
 80186b8:	4604      	mov	r4, r0
 80186ba:	68b9      	ldr	r1, [r7, #8]
 80186bc:	4620      	mov	r0, r4
 80186be:	f000 ff51 	bl	8019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80186c2:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	69db      	ldr	r3, [r3, #28]
 80186c8:	6979      	ldr	r1, [r7, #20]
 80186ca:	4618      	mov	r0, r3
 80186cc:	f004 fde2 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80186d0:	697b      	ldr	r3, [r7, #20]
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	3324      	adds	r3, #36	; 0x24
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	ed97 0b00 	vldr	d0, [r7]
 80186dc:	6978      	ldr	r0, [r7, #20]
 80186de:	4798      	blx	r3
    return *this;
 80186e0:	68fb      	ldr	r3, [r7, #12]
}
 80186e2:	4618      	mov	r0, r3
 80186e4:	371c      	adds	r7, #28
 80186e6:	46bd      	mov	sp, r7
 80186e8:	bd90      	pop	{r4, r7, pc}
 80186ea:	bf00      	nop
 80186ec:	0802397c 	.word	0x0802397c

080186f0 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 80186f0:	b590      	push	{r4, r7, lr}
 80186f2:	b089      	sub	sp, #36	; 0x24
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	6178      	str	r0, [r7, #20]
 80186f8:	6139      	str	r1, [r7, #16]
 80186fa:	ed87 0b02 	vstr	d0, [r7, #8]
 80186fe:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018702:	22ac      	movs	r2, #172	; 0xac
 8018704:	490f      	ldr	r1, [pc, #60]	; (8018744 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 8018706:	2038      	movs	r0, #56	; 0x38
 8018708:	f7ef fd96 	bl	8008238 <_ZnwjPKci>
 801870c:	4604      	mov	r4, r0
 801870e:	6939      	ldr	r1, [r7, #16]
 8018710:	4620      	mov	r0, r4
 8018712:	f000 ff27 	bl	8019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018716:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 8018718:	697b      	ldr	r3, [r7, #20]
 801871a:	69db      	ldr	r3, [r3, #28]
 801871c:	69f9      	ldr	r1, [r7, #28]
 801871e:	4618      	mov	r0, r3
 8018720:	f004 fdb8 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 8018724:	69fb      	ldr	r3, [r7, #28]
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	3328      	adds	r3, #40	; 0x28
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	ed97 1b00 	vldr	d1, [r7]
 8018730:	ed97 0b02 	vldr	d0, [r7, #8]
 8018734:	69f8      	ldr	r0, [r7, #28]
 8018736:	4798      	blx	r3
    return *this;
 8018738:	697b      	ldr	r3, [r7, #20]
}
 801873a:	4618      	mov	r0, r3
 801873c:	3724      	adds	r7, #36	; 0x24
 801873e:	46bd      	mov	sp, r7
 8018740:	bd90      	pop	{r4, r7, pc}
 8018742:	bf00      	nop
 8018744:	0802397c 	.word	0x0802397c

08018748 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 8018748:	b590      	push	{r4, r7, lr}
 801874a:	b087      	sub	sp, #28
 801874c:	af00      	add	r7, sp, #0
 801874e:	60f8      	str	r0, [r7, #12]
 8018750:	60b9      	str	r1, [r7, #8]
 8018752:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018754:	22b4      	movs	r2, #180	; 0xb4
 8018756:	490e      	ldr	r1, [pc, #56]	; (8018790 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 8018758:	2038      	movs	r0, #56	; 0x38
 801875a:	f7ef fd6d 	bl	8008238 <_ZnwjPKci>
 801875e:	4604      	mov	r4, r0
 8018760:	68b9      	ldr	r1, [r7, #8]
 8018762:	4620      	mov	r0, r4
 8018764:	f000 fefe 	bl	8019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018768:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	69db      	ldr	r3, [r3, #28]
 801876e:	6979      	ldr	r1, [r7, #20]
 8018770:	4618      	mov	r0, r3
 8018772:	f004 fd8f 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018776:	697b      	ldr	r3, [r7, #20]
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	3338      	adds	r3, #56	; 0x38
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	6879      	ldr	r1, [r7, #4]
 8018780:	6978      	ldr	r0, [r7, #20]
 8018782:	4798      	blx	r3
    return *this;
 8018784:	68fb      	ldr	r3, [r7, #12]
}
 8018786:	4618      	mov	r0, r3
 8018788:	371c      	adds	r7, #28
 801878a:	46bd      	mov	sp, r7
 801878c:	bd90      	pop	{r4, r7, pc}
 801878e:	bf00      	nop
 8018790:	0802397c 	.word	0x0802397c

08018794 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 8018794:	b590      	push	{r4, r7, lr}
 8018796:	b087      	sub	sp, #28
 8018798:	af00      	add	r7, sp, #0
 801879a:	60f8      	str	r0, [r7, #12]
 801879c:	60b9      	str	r1, [r7, #8]
 801879e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80187a0:	22bc      	movs	r2, #188	; 0xbc
 80187a2:	490e      	ldr	r1, [pc, #56]	; (80187dc <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 80187a4:	2038      	movs	r0, #56	; 0x38
 80187a6:	f7ef fd47 	bl	8008238 <_ZnwjPKci>
 80187aa:	4604      	mov	r4, r0
 80187ac:	68b9      	ldr	r1, [r7, #8]
 80187ae:	4620      	mov	r0, r4
 80187b0:	f000 fed8 	bl	8019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80187b4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	69db      	ldr	r3, [r3, #28]
 80187ba:	6979      	ldr	r1, [r7, #20]
 80187bc:	4618      	mov	r0, r3
 80187be:	f004 fd69 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80187c2:	697b      	ldr	r3, [r7, #20]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	332c      	adds	r3, #44	; 0x2c
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	6879      	ldr	r1, [r7, #4]
 80187cc:	6978      	ldr	r0, [r7, #20]
 80187ce:	4798      	blx	r3
    return *this;
 80187d0:	68fb      	ldr	r3, [r7, #12]
}
 80187d2:	4618      	mov	r0, r3
 80187d4:	371c      	adds	r7, #28
 80187d6:	46bd      	mov	sp, r7
 80187d8:	bd90      	pop	{r4, r7, pc}
 80187da:	bf00      	nop
 80187dc:	0802397c 	.word	0x0802397c

080187e0 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 80187e0:	b590      	push	{r4, r7, lr}
 80187e2:	b087      	sub	sp, #28
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	60f8      	str	r0, [r7, #12]
 80187e8:	60b9      	str	r1, [r7, #8]
 80187ea:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80187ec:	22c4      	movs	r2, #196	; 0xc4
 80187ee:	490e      	ldr	r1, [pc, #56]	; (8018828 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 80187f0:	2038      	movs	r0, #56	; 0x38
 80187f2:	f7ef fd21 	bl	8008238 <_ZnwjPKci>
 80187f6:	4604      	mov	r4, r0
 80187f8:	68b9      	ldr	r1, [r7, #8]
 80187fa:	4620      	mov	r0, r4
 80187fc:	f000 feb2 	bl	8019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018800:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	69db      	ldr	r3, [r3, #28]
 8018806:	6979      	ldr	r1, [r7, #20]
 8018808:	4618      	mov	r0, r3
 801880a:	f004 fd43 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801880e:	697b      	ldr	r3, [r7, #20]
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	3330      	adds	r3, #48	; 0x30
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	6879      	ldr	r1, [r7, #4]
 8018818:	6978      	ldr	r0, [r7, #20]
 801881a:	4798      	blx	r3
    return *this;
 801881c:	68fb      	ldr	r3, [r7, #12]
}
 801881e:	4618      	mov	r0, r3
 8018820:	371c      	adds	r7, #28
 8018822:	46bd      	mov	sp, r7
 8018824:	bd90      	pop	{r4, r7, pc}
 8018826:	bf00      	nop
 8018828:	0802397c 	.word	0x0802397c

0801882c <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801882c:	b590      	push	{r4, r7, lr}
 801882e:	b087      	sub	sp, #28
 8018830:	af00      	add	r7, sp, #0
 8018832:	60f8      	str	r0, [r7, #12]
 8018834:	60b9      	str	r1, [r7, #8]
 8018836:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018838:	22cc      	movs	r2, #204	; 0xcc
 801883a:	490e      	ldr	r1, [pc, #56]	; (8018874 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801883c:	2038      	movs	r0, #56	; 0x38
 801883e:	f7ef fcfb 	bl	8008238 <_ZnwjPKci>
 8018842:	4604      	mov	r4, r0
 8018844:	68b9      	ldr	r1, [r7, #8]
 8018846:	4620      	mov	r0, r4
 8018848:	f000 fe8c 	bl	8019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801884c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	69db      	ldr	r3, [r3, #28]
 8018852:	6979      	ldr	r1, [r7, #20]
 8018854:	4618      	mov	r0, r3
 8018856:	f004 fd1d 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801885a:	697b      	ldr	r3, [r7, #20]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	3334      	adds	r3, #52	; 0x34
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	6879      	ldr	r1, [r7, #4]
 8018864:	6978      	ldr	r0, [r7, #20]
 8018866:	4798      	blx	r3
    return *this;
 8018868:	68fb      	ldr	r3, [r7, #12]
}
 801886a:	4618      	mov	r0, r3
 801886c:	371c      	adds	r7, #28
 801886e:	46bd      	mov	sp, r7
 8018870:	bd90      	pop	{r4, r7, pc}
 8018872:	bf00      	nop
 8018874:	0802397c 	.word	0x0802397c

08018878 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8018878:	b590      	push	{r4, r7, lr}
 801887a:	b087      	sub	sp, #28
 801887c:	af00      	add	r7, sp, #0
 801887e:	60f8      	str	r0, [r7, #12]
 8018880:	60b9      	str	r1, [r7, #8]
 8018882:	607a      	str	r2, [r7, #4]
 8018884:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018886:	22d4      	movs	r2, #212	; 0xd4
 8018888:	490e      	ldr	r1, [pc, #56]	; (80188c4 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801888a:	2038      	movs	r0, #56	; 0x38
 801888c:	f7ef fcd4 	bl	8008238 <_ZnwjPKci>
 8018890:	4604      	mov	r4, r0
 8018892:	68b9      	ldr	r1, [r7, #8]
 8018894:	4620      	mov	r0, r4
 8018896:	f000 fe65 	bl	8019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801889a:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	69db      	ldr	r3, [r3, #28]
 80188a0:	6979      	ldr	r1, [r7, #20]
 80188a2:	4618      	mov	r0, r3
 80188a4:	f004 fcf6 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 80188a8:	697b      	ldr	r3, [r7, #20]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	333c      	adds	r3, #60	; 0x3c
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	683a      	ldr	r2, [r7, #0]
 80188b2:	6879      	ldr	r1, [r7, #4]
 80188b4:	6978      	ldr	r0, [r7, #20]
 80188b6:	4798      	blx	r3
    return *this;
 80188b8:	68fb      	ldr	r3, [r7, #12]
}
 80188ba:	4618      	mov	r0, r3
 80188bc:	371c      	adds	r7, #28
 80188be:	46bd      	mov	sp, r7
 80188c0:	bd90      	pop	{r4, r7, pc}
 80188c2:	bf00      	nop
 80188c4:	0802397c 	.word	0x0802397c

080188c8 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 80188c8:	b590      	push	{r4, r7, lr}
 80188ca:	b087      	sub	sp, #28
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	60f8      	str	r0, [r7, #12]
 80188d0:	60b9      	str	r1, [r7, #8]
 80188d2:	607a      	str	r2, [r7, #4]
 80188d4:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80188d6:	22dc      	movs	r2, #220	; 0xdc
 80188d8:	490e      	ldr	r1, [pc, #56]	; (8018914 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 80188da:	2038      	movs	r0, #56	; 0x38
 80188dc:	f7ef fcac 	bl	8008238 <_ZnwjPKci>
 80188e0:	4604      	mov	r4, r0
 80188e2:	6879      	ldr	r1, [r7, #4]
 80188e4:	4620      	mov	r0, r4
 80188e6:	f000 fe3d 	bl	8019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80188ea:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80188ec:	68fb      	ldr	r3, [r7, #12]
 80188ee:	69db      	ldr	r3, [r3, #28]
 80188f0:	6979      	ldr	r1, [r7, #20]
 80188f2:	4618      	mov	r0, r3
 80188f4:	f004 fcce 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 80188f8:	697b      	ldr	r3, [r7, #20]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	3340      	adds	r3, #64	; 0x40
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	683a      	ldr	r2, [r7, #0]
 8018902:	68b9      	ldr	r1, [r7, #8]
 8018904:	6978      	ldr	r0, [r7, #20]
 8018906:	4798      	blx	r3
    return *this;
 8018908:	68fb      	ldr	r3, [r7, #12]
}
 801890a:	4618      	mov	r0, r3
 801890c:	371c      	adds	r7, #28
 801890e:	46bd      	mov	sp, r7
 8018910:	bd90      	pop	{r4, r7, pc}
 8018912:	bf00      	nop
 8018914:	0802397c 	.word	0x0802397c

08018918 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 8018918:	b590      	push	{r4, r7, lr}
 801891a:	b087      	sub	sp, #28
 801891c:	af00      	add	r7, sp, #0
 801891e:	60f8      	str	r0, [r7, #12]
 8018920:	60b9      	str	r1, [r7, #8]
 8018922:	607a      	str	r2, [r7, #4]
 8018924:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018926:	22e4      	movs	r2, #228	; 0xe4
 8018928:	4911      	ldr	r1, [pc, #68]	; (8018970 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801892a:	2038      	movs	r0, #56	; 0x38
 801892c:	f7ef fc84 	bl	8008238 <_ZnwjPKci>
 8018930:	4604      	mov	r4, r0
 8018932:	68b9      	ldr	r1, [r7, #8]
 8018934:	4620      	mov	r0, r4
 8018936:	f000 fe15 	bl	8019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801893a:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	6a1b      	ldr	r3, [r3, #32]
 8018940:	6979      	ldr	r1, [r7, #20]
 8018942:	4618      	mov	r0, r3
 8018944:	f004 fca6 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018948:	697b      	ldr	r3, [r7, #20]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	3330      	adds	r3, #48	; 0x30
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	6879      	ldr	r1, [r7, #4]
 8018952:	6978      	ldr	r0, [r7, #20]
 8018954:	4798      	blx	r3
    newParameter->setSize(size);
 8018956:	697b      	ldr	r3, [r7, #20]
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	3348      	adds	r3, #72	; 0x48
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	6839      	ldr	r1, [r7, #0]
 8018960:	6978      	ldr	r0, [r7, #20]
 8018962:	4798      	blx	r3
    return *this;
 8018964:	68fb      	ldr	r3, [r7, #12]
}
 8018966:	4618      	mov	r0, r3
 8018968:	371c      	adds	r7, #28
 801896a:	46bd      	mov	sp, r7
 801896c:	bd90      	pop	{r4, r7, pc}
 801896e:	bf00      	nop
 8018970:	0802397c 	.word	0x0802397c

08018974 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 8018974:	b590      	push	{r4, r7, lr}
 8018976:	b087      	sub	sp, #28
 8018978:	af00      	add	r7, sp, #0
 801897a:	60f8      	str	r0, [r7, #12]
 801897c:	60b9      	str	r1, [r7, #8]
 801897e:	607a      	str	r2, [r7, #4]
 8018980:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018982:	22ed      	movs	r2, #237	; 0xed
 8018984:	490e      	ldr	r1, [pc, #56]	; (80189c0 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 8018986:	2038      	movs	r0, #56	; 0x38
 8018988:	f7ef fc56 	bl	8008238 <_ZnwjPKci>
 801898c:	4604      	mov	r4, r0
 801898e:	6879      	ldr	r1, [r7, #4]
 8018990:	4620      	mov	r0, r4
 8018992:	f000 fde7 	bl	8019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018996:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	6a1b      	ldr	r3, [r3, #32]
 801899c:	6979      	ldr	r1, [r7, #20]
 801899e:	4618      	mov	r0, r3
 80189a0:	f004 fc78 	bl	801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 80189a4:	697b      	ldr	r3, [r7, #20]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	3340      	adds	r3, #64	; 0x40
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	683a      	ldr	r2, [r7, #0]
 80189ae:	68b9      	ldr	r1, [r7, #8]
 80189b0:	6978      	ldr	r0, [r7, #20]
 80189b2:	4798      	blx	r3
    return *this;
 80189b4:	68fb      	ldr	r3, [r7, #12]
}
 80189b6:	4618      	mov	r0, r3
 80189b8:	371c      	adds	r7, #28
 80189ba:	46bd      	mov	sp, r7
 80189bc:	bd90      	pop	{r4, r7, pc}
 80189be:	bf00      	nop
 80189c0:	0802397c 	.word	0x0802397c

080189c4 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 80189c4:	b590      	push	{r4, r7, lr}
 80189c6:	b083      	sub	sp, #12
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	6078      	str	r0, [r7, #4]
 80189cc:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	3318      	adds	r3, #24
 80189d4:	681c      	ldr	r4, [r3, #0]
 80189d6:	2300      	movs	r3, #0
 80189d8:	2200      	movs	r2, #0
 80189da:	6839      	ldr	r1, [r7, #0]
 80189dc:	6878      	ldr	r0, [r7, #4]
 80189de:	47a0      	blx	r4
 80189e0:	4603      	mov	r3, r0
}
 80189e2:	4618      	mov	r0, r3
 80189e4:	370c      	adds	r7, #12
 80189e6:	46bd      	mov	sp, r7
 80189e8:	bd90      	pop	{r4, r7, pc}
	...

080189ec <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b086      	sub	sp, #24
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	60f8      	str	r0, [r7, #12]
 80189f4:	60b9      	str	r1, [r7, #8]
 80189f6:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 80189f8:	68bb      	ldr	r3, [r7, #8]
 80189fa:	69db      	ldr	r3, [r3, #28]
 80189fc:	6879      	ldr	r1, [r7, #4]
 80189fe:	4618      	mov	r0, r3
 8018a00:	f004 fc7e 	bl	801d300 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018a04:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 8018a06:	697b      	ldr	r3, [r7, #20]
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d008      	beq.n	8018a1e <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 8018a0c:	697b      	ldr	r3, [r7, #20]
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	3360      	adds	r3, #96	; 0x60
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	68fa      	ldr	r2, [r7, #12]
 8018a16:	6979      	ldr	r1, [r7, #20]
 8018a18:	4610      	mov	r0, r2
 8018a1a:	4798      	blx	r3
 8018a1c:	e004      	b.n	8018a28 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	4903      	ldr	r1, [pc, #12]	; (8018a30 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 8018a22:	4618      	mov	r0, r3
 8018a24:	f7f2 fe10 	bl	800b648 <_Z10StringFromPKc>
}
 8018a28:	68f8      	ldr	r0, [r7, #12]
 8018a2a:	3718      	adds	r7, #24
 8018a2c:	46bd      	mov	sp, r7
 8018a2e:	bd80      	pop	{r7, pc}
 8018a30:	08023978 	.word	0x08023978

08018a34 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 8018a34:	b580      	push	{r7, lr}
 8018a36:	b084      	sub	sp, #16
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	6078      	str	r0, [r7, #4]
 8018a3c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	69db      	ldr	r3, [r3, #28]
 8018a42:	6839      	ldr	r1, [r7, #0]
 8018a44:	4618      	mov	r0, r3
 8018a46:	f004 fc5b 	bl	801d300 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018a4a:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	bf14      	ite	ne
 8018a52:	2301      	movne	r3, #1
 8018a54:	2300      	moveq	r3, #0
 8018a56:	b2db      	uxtb	r3, r3
}
 8018a58:	4618      	mov	r0, r3
 8018a5a:	3710      	adds	r7, #16
 8018a5c:	46bd      	mov	sp, r7
 8018a5e:	bd80      	pop	{r7, pc}

08018a60 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b084      	sub	sp, #16
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	6078      	str	r0, [r7, #4]
 8018a68:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	6a1b      	ldr	r3, [r3, #32]
 8018a6e:	6839      	ldr	r1, [r7, #0]
 8018a70:	4618      	mov	r0, r3
 8018a72:	f004 fc45 	bl	801d300 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018a76:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	bf14      	ite	ne
 8018a7e:	2301      	movne	r3, #1
 8018a80:	2300      	moveq	r3, #0
 8018a82:	b2db      	uxtb	r3, r3
}
 8018a84:	4618      	mov	r0, r3
 8018a86:	3710      	adds	r7, #16
 8018a88:	46bd      	mov	sp, r7
 8018a8a:	bd80      	pop	{r7, pc}

08018a8c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 8018a8c:	b590      	push	{r4, r7, lr}
 8018a8e:	b089      	sub	sp, #36	; 0x24
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	60f8      	str	r0, [r7, #12]
 8018a94:	60b9      	str	r1, [r7, #8]
 8018a96:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8018a98:	68bb      	ldr	r3, [r7, #8]
 8018a9a:	69db      	ldr	r3, [r3, #28]
 8018a9c:	6879      	ldr	r1, [r7, #4]
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	f004 fc2e 	bl	801d300 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018aa4:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 8018aa6:	2400      	movs	r4, #0
 8018aa8:	69fb      	ldr	r3, [r7, #28]
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d004      	beq.n	8018ab8 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 8018aae:	69f9      	ldr	r1, [r7, #28]
 8018ab0:	68f8      	ldr	r0, [r7, #12]
 8018ab2:	f7f0 f829 	bl	8008b08 <_ZN14MockNamedValueC1ERKS_>
 8018ab6:	e00c      	b.n	8018ad2 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 8018ab8:	f107 0314 	add.w	r3, r7, #20
 8018abc:	490a      	ldr	r1, [pc, #40]	; (8018ae8 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f7f1 ff7d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8018ac4:	2401      	movs	r4, #1
 8018ac6:	f107 0314 	add.w	r3, r7, #20
 8018aca:	4619      	mov	r1, r3
 8018acc:	68f8      	ldr	r0, [r7, #12]
 8018ace:	f002 fc9b 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018ad2:	2c00      	cmp	r4, #0
 8018ad4:	d004      	beq.n	8018ae0 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 8018ad6:	f107 0314 	add.w	r3, r7, #20
 8018ada:	4618      	mov	r0, r3
 8018adc:	f7f2 fb27 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8018ae0:	68f8      	ldr	r0, [r7, #12]
 8018ae2:	3724      	adds	r7, #36	; 0x24
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	bd90      	pop	{r4, r7, pc}
 8018ae8:	08023978 	.word	0x08023978

08018aec <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 8018aec:	b590      	push	{r4, r7, lr}
 8018aee:	b089      	sub	sp, #36	; 0x24
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	60f8      	str	r0, [r7, #12]
 8018af4:	60b9      	str	r1, [r7, #8]
 8018af6:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 8018af8:	68bb      	ldr	r3, [r7, #8]
 8018afa:	6a1b      	ldr	r3, [r3, #32]
 8018afc:	6879      	ldr	r1, [r7, #4]
 8018afe:	4618      	mov	r0, r3
 8018b00:	f004 fbfe 	bl	801d300 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018b04:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 8018b06:	2400      	movs	r4, #0
 8018b08:	69fb      	ldr	r3, [r7, #28]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d004      	beq.n	8018b18 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 8018b0e:	69f9      	ldr	r1, [r7, #28]
 8018b10:	68f8      	ldr	r0, [r7, #12]
 8018b12:	f7ef fff9 	bl	8008b08 <_ZN14MockNamedValueC1ERKS_>
 8018b16:	e00c      	b.n	8018b32 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 8018b18:	f107 0314 	add.w	r3, r7, #20
 8018b1c:	490a      	ldr	r1, [pc, #40]	; (8018b48 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 8018b1e:	4618      	mov	r0, r3
 8018b20:	f7f1 ff4d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 8018b24:	2401      	movs	r4, #1
 8018b26:	f107 0314 	add.w	r3, r7, #20
 8018b2a:	4619      	mov	r1, r3
 8018b2c:	68f8      	ldr	r0, [r7, #12]
 8018b2e:	f002 fc6b 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018b32:	2c00      	cmp	r4, #0
 8018b34:	d004      	beq.n	8018b40 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 8018b36:	f107 0314 	add.w	r3, r7, #20
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	f7f2 faf7 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 8018b40:	68f8      	ldr	r0, [r7, #12]
 8018b42:	3724      	adds	r7, #36	; 0x24
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bd90      	pop	{r4, r7, pc}
 8018b48:	08023978 	.word	0x08023978

08018b4c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b084      	sub	sp, #16
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	69db      	ldr	r3, [r3, #28]
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f004 fc00 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 8018b5e:	60f8      	str	r0, [r7, #12]
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d014      	beq.n	8018b90 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 8018b66:	68f9      	ldr	r1, [r7, #12]
 8018b68:	6878      	ldr	r0, [r7, #4]
 8018b6a:	f000 fced 	bl	8019548 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018b6e:	4603      	mov	r3, r0
 8018b70:	4618      	mov	r0, r3
 8018b72:	f000 fd1f 	bl	80195b4 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8018b76:	4603      	mov	r3, r0
 8018b78:	f083 0301 	eor.w	r3, r3, #1
 8018b7c:	b2db      	uxtb	r3, r3
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d001      	beq.n	8018b86 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 8018b82:	2300      	movs	r3, #0
 8018b84:	e023      	b.n	8018bce <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 8018b86:	68f8      	ldr	r0, [r7, #12]
 8018b88:	f004 faf2 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 8018b8c:	60f8      	str	r0, [r7, #12]
 8018b8e:	e7e7      	b.n	8018b60 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	6a1b      	ldr	r3, [r3, #32]
 8018b94:	4618      	mov	r0, r3
 8018b96:	f004 fbe2 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 8018b9a:	60f8      	str	r0, [r7, #12]
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d014      	beq.n	8018bcc <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 8018ba2:	68f9      	ldr	r1, [r7, #12]
 8018ba4:	6878      	ldr	r0, [r7, #4]
 8018ba6:	f000 fccf 	bl	8019548 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018baa:	4603      	mov	r3, r0
 8018bac:	4618      	mov	r0, r3
 8018bae:	f000 fd01 	bl	80195b4 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8018bb2:	4603      	mov	r3, r0
 8018bb4:	f083 0301 	eor.w	r3, r3, #1
 8018bb8:	b2db      	uxtb	r3, r3
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d001      	beq.n	8018bc2 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	e005      	b.n	8018bce <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 8018bc2:	68f8      	ldr	r0, [r7, #12]
 8018bc4:	f004 fad4 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 8018bc8:	60f8      	str	r0, [r7, #12]
 8018bca:	e7e7      	b.n	8018b9c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 8018bcc:	2301      	movs	r3, #1
}
 8018bce:	4618      	mov	r0, r3
 8018bd0:	3710      	adds	r7, #16
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	bd80      	pop	{r7, pc}

08018bd6 <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 8018bd6:	b480      	push	{r7}
 8018bd8:	b083      	sub	sp, #12
 8018bda:	af00      	add	r7, sp, #0
 8018bdc:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	2201      	movs	r2, #1
 8018be2:	731a      	strb	r2, [r3, #12]
    return *this;
 8018be4:	687b      	ldr	r3, [r7, #4]
}
 8018be6:	4618      	mov	r0, r3
 8018be8:	370c      	adds	r7, #12
 8018bea:	46bd      	mov	sp, r7
 8018bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf0:	4770      	bx	lr

08018bf2 <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 8018bf2:	b480      	push	{r7}
 8018bf4:	b083      	sub	sp, #12
 8018bf6:	af00      	add	r7, sp, #0
 8018bf8:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c02:	429a      	cmp	r2, r3
 8018c04:	bf0c      	ite	eq
 8018c06:	2301      	moveq	r3, #1
 8018c08:	2300      	movne	r3, #0
 8018c0a:	b2db      	uxtb	r3, r3
}
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	370c      	adds	r7, #12
 8018c10:	46bd      	mov	sp, r7
 8018c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c16:	4770      	bx	lr

08018c18 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 8018c18:	b480      	push	{r7}
 8018c1a:	b083      	sub	sp, #12
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c28:	429a      	cmp	r2, r3
 8018c2a:	bf34      	ite	cc
 8018c2c:	2301      	movcc	r3, #1
 8018c2e:	2300      	movcs	r3, #0
 8018c30:	b2db      	uxtb	r3, r3
}
 8018c32:	4618      	mov	r0, r3
 8018c34:	370c      	adds	r7, #12
 8018c36:	46bd      	mov	sp, r7
 8018c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c3c:	4770      	bx	lr

08018c3e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 8018c3e:	b580      	push	{r7, lr}
 8018c40:	b082      	sub	sp, #8
 8018c42:	af00      	add	r7, sp, #0
 8018c44:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	33cc      	adds	r3, #204	; 0xcc
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	6878      	ldr	r0, [r7, #4]
 8018c50:	4798      	blx	r3
 8018c52:	4603      	mov	r3, r0
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d00c      	beq.n	8018c72 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	7b1b      	ldrb	r3, [r3, #12]
 8018c5c:	f083 0301 	eor.w	r3, r3, #1
 8018c60:	b2db      	uxtb	r3, r3
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d103      	bne.n	8018c6e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	7b5b      	ldrb	r3, [r3, #13]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d001      	beq.n	8018c72 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 8018c6e:	2301      	movs	r3, #1
 8018c70:	e000      	b.n	8018c74 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 8018c72:	2300      	movs	r3, #0
}
 8018c74:	4618      	mov	r0, r3
 8018c76:	3708      	adds	r7, #8
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	bd80      	pop	{r7, pc}

08018c7c <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b082      	sub	sp, #8
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	33d0      	adds	r3, #208	; 0xd0
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	6878      	ldr	r0, [r7, #4]
 8018c8e:	4798      	blx	r3
 8018c90:	4603      	mov	r3, r0
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d006      	beq.n	8018ca4 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d001      	beq.n	8018ca4 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 8018ca0:	2301      	movs	r3, #1
 8018ca2:	e000      	b.n	8018ca6 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 8018ca4:	2300      	movs	r3, #0
}
 8018ca6:	4618      	mov	r0, r3
 8018ca8:	3708      	adds	r7, #8
 8018caa:	46bd      	mov	sp, r7
 8018cac:	bd80      	pop	{r7, pc}

08018cae <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 8018cae:	b580      	push	{r7, lr}
 8018cb0:	b082      	sub	sp, #8
 8018cb2:	af00      	add	r7, sp, #0
 8018cb4:	6078      	str	r0, [r7, #4]
 8018cb6:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018cbc:	1c5a      	adds	r2, r3, #1
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	691b      	ldr	r3, [r3, #16]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d00c      	beq.n	8018ce4 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 8018cce:	683a      	ldr	r2, [r7, #0]
 8018cd0:	429a      	cmp	r2, r3
 8018cd2:	d304      	bcc.n	8018cde <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	695b      	ldr	r3, [r3, #20]
 8018cd8:	683a      	ldr	r2, [r7, #0]
 8018cda:	429a      	cmp	r2, r3
 8018cdc:	d902      	bls.n	8018ce4 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	2201      	movs	r2, #1
 8018ce2:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	33ec      	adds	r3, #236	; 0xec
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	6878      	ldr	r0, [r7, #4]
 8018cee:	4798      	blx	r3
}
 8018cf0:	bf00      	nop
 8018cf2:	3708      	adds	r7, #8
 8018cf4:	46bd      	mov	sp, r7
 8018cf6:	bd80      	pop	{r7, pc}

08018cf8 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 8018cf8:	b480      	push	{r7}
 8018cfa:	b083      	sub	sp, #12
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	2201      	movs	r2, #1
 8018d04:	735a      	strb	r2, [r3, #13]
}
 8018d06:	bf00      	nop
 8018d08:	370c      	adds	r7, #12
 8018d0a:	46bd      	mov	sp, r7
 8018d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d10:	4770      	bx	lr

08018d12 <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 8018d12:	b480      	push	{r7}
 8018d14:	b083      	sub	sp, #12
 8018d16:	af00      	add	r7, sp, #0
 8018d18:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	2201      	movs	r2, #1
 8018d1e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 8018d22:	bf00      	nop
 8018d24:	370c      	adds	r7, #12
 8018d26:	46bd      	mov	sp, r7
 8018d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2c:	4770      	bx	lr

08018d2e <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 8018d2e:	b580      	push	{r7, lr}
 8018d30:	b084      	sub	sp, #16
 8018d32:	af00      	add	r7, sp, #0
 8018d34:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018d3c:	f083 0301 	eor.w	r3, r3, #1
 8018d40:	b2da      	uxtb	r2, r3
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	2200      	movs	r2, #0
 8018d4c:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	69db      	ldr	r3, [r3, #28]
 8018d52:	4618      	mov	r0, r3
 8018d54:	f004 fb03 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 8018d58:	60f8      	str	r0, [r7, #12]
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d00d      	beq.n	8018d7c <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 8018d60:	68f9      	ldr	r1, [r7, #12]
 8018d62:	6878      	ldr	r0, [r7, #4]
 8018d64:	f000 fbf0 	bl	8019548 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018d68:	4603      	mov	r3, r0
 8018d6a:	2100      	movs	r1, #0
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	f000 fc11 	bl	8019594 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 8018d72:	68f8      	ldr	r0, [r7, #12]
 8018d74:	f004 f9fc 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 8018d78:	60f8      	str	r0, [r7, #12]
 8018d7a:	e7ee      	b.n	8018d5a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	6a1b      	ldr	r3, [r3, #32]
 8018d80:	4618      	mov	r0, r3
 8018d82:	f004 faec 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 8018d86:	60f8      	str	r0, [r7, #12]
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d00d      	beq.n	8018daa <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 8018d8e:	68f9      	ldr	r1, [r7, #12]
 8018d90:	6878      	ldr	r0, [r7, #4]
 8018d92:	f000 fbd9 	bl	8019548 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018d96:	4603      	mov	r3, r0
 8018d98:	2100      	movs	r1, #0
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f000 fbfa 	bl	8019594 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 8018da0:	68f8      	ldr	r0, [r7, #12]
 8018da2:	f004 f9e5 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 8018da6:	60f8      	str	r0, [r7, #12]
 8018da8:	e7ee      	b.n	8018d88 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 8018daa:	bf00      	nop
 8018dac:	3710      	adds	r7, #16
 8018dae:	46bd      	mov	sp, r7
 8018db0:	bd80      	pop	{r7, pc}

08018db2 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 8018db2:	b590      	push	{r4, r7, lr}
 8018db4:	b087      	sub	sp, #28
 8018db6:	af00      	add	r7, sp, #0
 8018db8:	6078      	str	r0, [r7, #4]
 8018dba:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	69db      	ldr	r3, [r3, #28]
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	f004 facc 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 8018dc6:	6178      	str	r0, [r7, #20]
 8018dc8:	697b      	ldr	r3, [r7, #20]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d022      	beq.n	8018e14 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 8018dce:	f107 030c 	add.w	r3, r7, #12
 8018dd2:	6979      	ldr	r1, [r7, #20]
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	f004 fa06 	bl	801d1e6 <_ZNK22MockNamedValueListNode7getNameEv>
 8018dda:	f107 030c 	add.w	r3, r7, #12
 8018dde:	6839      	ldr	r1, [r7, #0]
 8018de0:	4618      	mov	r0, r3
 8018de2:	f7f2 f9b0 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8018de6:	4603      	mov	r3, r0
 8018de8:	461c      	mov	r4, r3
 8018dea:	f107 030c 	add.w	r3, r7, #12
 8018dee:	4618      	mov	r0, r3
 8018df0:	f7f2 f99d 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8018df4:	2c00      	cmp	r4, #0
 8018df6:	d008      	beq.n	8018e0a <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 8018df8:	6979      	ldr	r1, [r7, #20]
 8018dfa:	6878      	ldr	r0, [r7, #4]
 8018dfc:	f000 fba4 	bl	8019548 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018e00:	4603      	mov	r3, r0
 8018e02:	2101      	movs	r1, #1
 8018e04:	4618      	mov	r0, r3
 8018e06:	f000 fbc5 	bl	8019594 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 8018e0a:	6978      	ldr	r0, [r7, #20]
 8018e0c:	f004 f9b0 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 8018e10:	6178      	str	r0, [r7, #20]
 8018e12:	e7d9      	b.n	8018dc8 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 8018e14:	bf00      	nop
 8018e16:	371c      	adds	r7, #28
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	bd90      	pop	{r4, r7, pc}

08018e1c <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 8018e1c:	b590      	push	{r4, r7, lr}
 8018e1e:	b087      	sub	sp, #28
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	6078      	str	r0, [r7, #4]
 8018e24:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	6a1b      	ldr	r3, [r3, #32]
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	f004 fa97 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 8018e30:	6178      	str	r0, [r7, #20]
 8018e32:	697b      	ldr	r3, [r7, #20]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d022      	beq.n	8018e7e <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 8018e38:	f107 030c 	add.w	r3, r7, #12
 8018e3c:	6979      	ldr	r1, [r7, #20]
 8018e3e:	4618      	mov	r0, r3
 8018e40:	f004 f9d1 	bl	801d1e6 <_ZNK22MockNamedValueListNode7getNameEv>
 8018e44:	f107 030c 	add.w	r3, r7, #12
 8018e48:	6839      	ldr	r1, [r7, #0]
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7f2 f97b 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 8018e50:	4603      	mov	r3, r0
 8018e52:	461c      	mov	r4, r3
 8018e54:	f107 030c 	add.w	r3, r7, #12
 8018e58:	4618      	mov	r0, r3
 8018e5a:	f7f2 f968 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8018e5e:	2c00      	cmp	r4, #0
 8018e60:	d008      	beq.n	8018e74 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 8018e62:	6979      	ldr	r1, [r7, #20]
 8018e64:	6878      	ldr	r0, [r7, #4]
 8018e66:	f000 fb6f 	bl	8019548 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018e6a:	4603      	mov	r3, r0
 8018e6c:	2101      	movs	r1, #1
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f000 fb90 	bl	8019594 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8018e74:	6978      	ldr	r0, [r7, #20]
 8018e76:	f004 f97b 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 8018e7a:	6178      	str	r0, [r7, #20]
 8018e7c:	e7d9      	b.n	8018e32 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 8018e7e:	bf00      	nop
 8018e80:	371c      	adds	r7, #28
 8018e82:	46bd      	mov	sp, r7
 8018e84:	bd90      	pop	{r4, r7, pc}
	...

08018e88 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b086      	sub	sp, #24
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	60f8      	str	r0, [r7, #12]
 8018e90:	60b9      	str	r1, [r7, #8]
 8018e92:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8018e94:	68bb      	ldr	r3, [r7, #8]
 8018e96:	69db      	ldr	r3, [r3, #28]
 8018e98:	6879      	ldr	r1, [r7, #4]
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	f004 fa30 	bl	801d300 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018ea0:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 8018ea2:	697b      	ldr	r3, [r7, #20]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d005      	beq.n	8018eb4 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	6979      	ldr	r1, [r7, #20]
 8018eac:	4618      	mov	r0, r3
 8018eae:	f7ff fa0b 	bl	80182c8 <_Z10StringFromRK14MockNamedValue>
 8018eb2:	e003      	b.n	8018ebc <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 8018eb4:	4903      	ldr	r1, [pc, #12]	; (8018ec4 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 8018eb6:	68f8      	ldr	r0, [r7, #12]
 8018eb8:	f7f1 fd81 	bl	800a9be <_ZN12SimpleStringC1EPKc>
}
 8018ebc:	68f8      	ldr	r0, [r7, #12]
 8018ebe:	3718      	adds	r7, #24
 8018ec0:	46bd      	mov	sp, r7
 8018ec2:	bd80      	pop	{r7, pc}
 8018ec4:	080239e4 	.word	0x080239e4

08018ec8 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 8018ec8:	b590      	push	{r4, r7, lr}
 8018eca:	b087      	sub	sp, #28
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
 8018ed0:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	69dc      	ldr	r4, [r3, #28]
 8018ed6:	683b      	ldr	r3, [r7, #0]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	335c      	adds	r3, #92	; 0x5c
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	f107 020c 	add.w	r2, r7, #12
 8018ee2:	6839      	ldr	r1, [r7, #0]
 8018ee4:	4610      	mov	r0, r2
 8018ee6:	4798      	blx	r3
 8018ee8:	f107 030c 	add.w	r3, r7, #12
 8018eec:	4619      	mov	r1, r3
 8018eee:	4620      	mov	r0, r4
 8018ef0:	f004 fa06 	bl	801d300 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018ef4:	6178      	str	r0, [r7, #20]
 8018ef6:	f107 030c 	add.w	r3, r7, #12
 8018efa:	4618      	mov	r0, r3
 8018efc:	f7f2 f917 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 8018f00:	697b      	ldr	r3, [r7, #20]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d00d      	beq.n	8018f22 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 8018f06:	697b      	ldr	r3, [r7, #20]
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	3350      	adds	r3, #80	; 0x50
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	6839      	ldr	r1, [r7, #0]
 8018f10:	6978      	ldr	r0, [r7, #20]
 8018f12:	4798      	blx	r3
 8018f14:	4603      	mov	r3, r0
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	bf14      	ite	ne
 8018f1a:	2301      	movne	r3, #1
 8018f1c:	2300      	moveq	r3, #0
 8018f1e:	b2db      	uxtb	r3, r3
 8018f20:	e006      	b.n	8018f30 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	7b1b      	ldrb	r3, [r3, #12]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	bf14      	ite	ne
 8018f2a:	2301      	movne	r3, #1
 8018f2c:	2300      	moveq	r3, #0
 8018f2e:	b2db      	uxtb	r3, r3
}
 8018f30:	4618      	mov	r0, r3
 8018f32:	371c      	adds	r7, #28
 8018f34:	46bd      	mov	sp, r7
 8018f36:	bd90      	pop	{r4, r7, pc}

08018f38 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 8018f38:	b590      	push	{r4, r7, lr}
 8018f3a:	b087      	sub	sp, #28
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
 8018f40:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	6a1c      	ldr	r4, [r3, #32]
 8018f46:	683b      	ldr	r3, [r7, #0]
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	335c      	adds	r3, #92	; 0x5c
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	f107 020c 	add.w	r2, r7, #12
 8018f52:	6839      	ldr	r1, [r7, #0]
 8018f54:	4610      	mov	r0, r2
 8018f56:	4798      	blx	r3
 8018f58:	f107 030c 	add.w	r3, r7, #12
 8018f5c:	4619      	mov	r1, r3
 8018f5e:	4620      	mov	r0, r4
 8018f60:	f004 f9ce 	bl	801d300 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018f64:	6178      	str	r0, [r7, #20]
 8018f66:	f107 030c 	add.w	r3, r7, #12
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	f7f2 f8df 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 8018f70:	697b      	ldr	r3, [r7, #20]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d00d      	beq.n	8018f92 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 8018f76:	697b      	ldr	r3, [r7, #20]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	3354      	adds	r3, #84	; 0x54
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	6839      	ldr	r1, [r7, #0]
 8018f80:	6978      	ldr	r0, [r7, #20]
 8018f82:	4798      	blx	r3
 8018f84:	4603      	mov	r3, r0
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	bf14      	ite	ne
 8018f8a:	2301      	movne	r3, #1
 8018f8c:	2300      	moveq	r3, #0
 8018f8e:	b2db      	uxtb	r3, r3
 8018f90:	e006      	b.n	8018fa0 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	7b1b      	ldrb	r3, [r3, #12]
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	bf14      	ite	ne
 8018f9a:	2301      	movne	r3, #1
 8018f9c:	2300      	moveq	r3, #0
 8018f9e:	b2db      	uxtb	r3, r3
}
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	371c      	adds	r7, #28
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd90      	pop	{r4, r7, pc}

08018fa8 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 8018fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018faa:	b0a1      	sub	sp, #132	; 0x84
 8018fac:	af02      	add	r7, sp, #8
 8018fae:	6078      	str	r0, [r7, #4]
 8018fb0:	6039      	str	r1, [r7, #0]
    SimpleString str;
 8018fb2:	49bc      	ldr	r1, [pc, #752]	; (80192a4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8018fb4:	6878      	ldr	r0, [r7, #4]
 8018fb6:	f7f1 fd02 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 8018fba:	683b      	ldr	r3, [r7, #0]
 8018fbc:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d012      	beq.n	8018fea <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 8018fc4:	683b      	ldr	r3, [r7, #0]
 8018fc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8018fc8:	f107 030c 	add.w	r3, r7, #12
 8018fcc:	49b6      	ldr	r1, [pc, #728]	; (80192a8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 8018fce:	4618      	mov	r0, r3
 8018fd0:	f7f2 fdb4 	bl	800bb3c <_Z16StringFromFormatPKcz>
 8018fd4:	f107 030c 	add.w	r3, r7, #12
 8018fd8:	4619      	mov	r1, r3
 8018fda:	6878      	ldr	r0, [r7, #4]
 8018fdc:	f7f1 fd5b 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 8018fe0:	f107 030c 	add.w	r3, r7, #12
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	f7f2 f8a2 	bl	800b12e <_ZN12SimpleStringD1Ev>

    str += getName();
 8018fea:	f107 0314 	add.w	r3, r7, #20
 8018fee:	6839      	ldr	r1, [r7, #0]
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	f7ff f989 	bl	8018308 <_ZNK23MockCheckedExpectedCall7getNameEv>
 8018ff6:	f107 0314 	add.w	r3, r7, #20
 8018ffa:	4619      	mov	r1, r3
 8018ffc:	6878      	ldr	r0, [r7, #4]
 8018ffe:	f7f2 f913 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 8019002:	f107 0314 	add.w	r3, r7, #20
 8019006:	4618      	mov	r0, r3
 8019008:	f7f2 f891 	bl	800b12e <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801900c:	49a7      	ldr	r1, [pc, #668]	; (80192ac <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801900e:	6878      	ldr	r0, [r7, #4]
 8019010:	f7f2 f91c 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 8019014:	683b      	ldr	r3, [r7, #0]
 8019016:	691b      	ldr	r3, [r3, #16]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d02d      	beq.n	8019078 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801901c:	683b      	ldr	r3, [r7, #0]
 801901e:	691a      	ldr	r2, [r3, #16]
 8019020:	683b      	ldr	r3, [r7, #0]
 8019022:	695b      	ldr	r3, [r3, #20]
 8019024:	429a      	cmp	r2, r3
 8019026:	d113      	bne.n	8019050 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 8019028:	683b      	ldr	r3, [r7, #0]
 801902a:	691a      	ldr	r2, [r3, #16]
 801902c:	f107 031c 	add.w	r3, r7, #28
 8019030:	499f      	ldr	r1, [pc, #636]	; (80192b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 8019032:	4618      	mov	r0, r3
 8019034:	f7f2 fd82 	bl	800bb3c <_Z16StringFromFormatPKcz>
 8019038:	f107 031c 	add.w	r3, r7, #28
 801903c:	4619      	mov	r1, r3
 801903e:	6878      	ldr	r0, [r7, #4]
 8019040:	f7f2 f8f2 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 8019044:	f107 031c 	add.w	r3, r7, #28
 8019048:	4618      	mov	r0, r3
 801904a:	f7f2 f870 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801904e:	e013      	b.n	8019078 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 8019050:	683b      	ldr	r3, [r7, #0]
 8019052:	691a      	ldr	r2, [r3, #16]
 8019054:	683b      	ldr	r3, [r7, #0]
 8019056:	695b      	ldr	r3, [r3, #20]
 8019058:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801905c:	4995      	ldr	r1, [pc, #596]	; (80192b4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801905e:	f7f2 fd6d 	bl	800bb3c <_Z16StringFromFormatPKcz>
 8019062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019066:	4619      	mov	r1, r3
 8019068:	6878      	ldr	r0, [r7, #4]
 801906a:	f7f2 f8dd 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801906e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019072:	4618      	mov	r0, r3
 8019074:	f7f2 f85b 	bl	800b12e <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 8019078:	683b      	ldr	r3, [r7, #0]
 801907a:	69db      	ldr	r3, [r3, #28]
 801907c:	4618      	mov	r0, r3
 801907e:	f004 f96e 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 8019082:	4603      	mov	r3, r0
 8019084:	2b00      	cmp	r3, #0
 8019086:	d109      	bne.n	801909c <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8019088:	683b      	ldr	r3, [r7, #0]
 801908a:	6a1b      	ldr	r3, [r3, #32]
 801908c:	4618      	mov	r0, r3
 801908e:	f004 f966 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 8019092:	4603      	mov	r3, r0
 8019094:	2b00      	cmp	r3, #0
 8019096:	d101      	bne.n	801909c <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8019098:	2301      	movs	r3, #1
 801909a:	e000      	b.n	801909e <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801909c:	2300      	movs	r3, #0
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d00b      	beq.n	80190ba <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 80190a2:	683b      	ldr	r3, [r7, #0]
 80190a4:	7b1b      	ldrb	r3, [r3, #12]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d001      	beq.n	80190ae <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 80190aa:	4b83      	ldr	r3, [pc, #524]	; (80192b8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 80190ac:	e000      	b.n	80190b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 80190ae:	4b83      	ldr	r3, [pc, #524]	; (80192bc <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 80190b0:	4619      	mov	r1, r3
 80190b2:	6878      	ldr	r0, [r7, #4]
 80190b4:	f7f2 f8ca 	bl	800b24c <_ZN12SimpleStringpLEPKc>
 80190b8:	e0e3      	b.n	8019282 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 80190ba:	683b      	ldr	r3, [r7, #0]
 80190bc:	69db      	ldr	r3, [r3, #28]
 80190be:	4618      	mov	r0, r3
 80190c0:	f004 f94d 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 80190c4:	6778      	str	r0, [r7, #116]	; 0x74
 80190c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d069      	beq.n	80191a0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 80190cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80190d0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80190d2:	4618      	mov	r0, r3
 80190d4:	f004 f89a 	bl	801d20c <_ZNK22MockNamedValueListNode7getTypeEv>
 80190d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80190dc:	4618      	mov	r0, r3
 80190de:	f7f1 fff9 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 80190e2:	4605      	mov	r5, r0
 80190e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80190e8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80190ea:	4618      	mov	r0, r3
 80190ec:	f004 f87b 	bl	801d1e6 <_ZNK22MockNamedValueListNode7getNameEv>
 80190f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80190f4:	4618      	mov	r0, r3
 80190f6:	f7f1 ffed 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 80190fa:	4606      	mov	r6, r0
 80190fc:	683b      	ldr	r3, [r7, #0]
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	33a4      	adds	r3, #164	; 0xa4
 8019102:	681c      	ldr	r4, [r3, #0]
 8019104:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8019108:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801910a:	4618      	mov	r0, r3
 801910c:	f004 f86b 	bl	801d1e6 <_ZNK22MockNamedValueListNode7getNameEv>
 8019110:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019114:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019118:	6839      	ldr	r1, [r7, #0]
 801911a:	4618      	mov	r0, r3
 801911c:	47a0      	blx	r4
 801911e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019122:	4618      	mov	r0, r3
 8019124:	f7f1 ffd6 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8019128:	4603      	mov	r3, r0
 801912a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801912e:	9300      	str	r3, [sp, #0]
 8019130:	4633      	mov	r3, r6
 8019132:	462a      	mov	r2, r5
 8019134:	4962      	ldr	r1, [pc, #392]	; (80192c0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 8019136:	f7f2 fd01 	bl	800bb3c <_Z16StringFromFormatPKcz>
 801913a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801913e:	4619      	mov	r1, r3
 8019140:	6878      	ldr	r0, [r7, #4]
 8019142:	f7f2 f871 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 8019146:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801914a:	4618      	mov	r0, r3
 801914c:	f7f1 ffef 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8019150:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019154:	4618      	mov	r0, r3
 8019156:	f7f1 ffea 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801915a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801915e:	4618      	mov	r0, r3
 8019160:	f7f1 ffe5 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8019164:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019168:	4618      	mov	r0, r3
 801916a:	f7f1 ffe0 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801916e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019172:	4618      	mov	r0, r3
 8019174:	f7f1 ffdb 	bl	800b12e <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8019178:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801917a:	f003 fff9 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 801917e:	4603      	mov	r3, r0
 8019180:	2b00      	cmp	r3, #0
 8019182:	bf14      	ite	ne
 8019184:	2301      	movne	r3, #1
 8019186:	2300      	moveq	r3, #0
 8019188:	b2db      	uxtb	r3, r3
 801918a:	2b00      	cmp	r3, #0
 801918c:	d003      	beq.n	8019196 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801918e:	494d      	ldr	r1, [pc, #308]	; (80192c4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8019190:	6878      	ldr	r0, [r7, #4]
 8019192:	f7f2 f85b 	bl	800b24c <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 8019196:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8019198:	f003 ffea 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 801919c:	6778      	str	r0, [r7, #116]	; 0x74
 801919e:	e792      	b.n	80190c6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 80191a0:	683b      	ldr	r3, [r7, #0]
 80191a2:	69db      	ldr	r3, [r3, #28]
 80191a4:	4618      	mov	r0, r3
 80191a6:	f004 f8da 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 80191aa:	4603      	mov	r3, r0
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d009      	beq.n	80191c4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 80191b0:	683b      	ldr	r3, [r7, #0]
 80191b2:	6a1b      	ldr	r3, [r3, #32]
 80191b4:	4618      	mov	r0, r3
 80191b6:	f004 f8d2 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 80191ba:	4603      	mov	r3, r0
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d001      	beq.n	80191c4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 80191c0:	2301      	movs	r3, #1
 80191c2:	e000      	b.n	80191c6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 80191c4:	2300      	movs	r3, #0
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d003      	beq.n	80191d2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 80191ca:	493e      	ldr	r1, [pc, #248]	; (80192c4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 80191cc:	6878      	ldr	r0, [r7, #4]
 80191ce:	f7f2 f83d 	bl	800b24c <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 80191d2:	683b      	ldr	r3, [r7, #0]
 80191d4:	6a1b      	ldr	r3, [r3, #32]
 80191d6:	4618      	mov	r0, r3
 80191d8:	f004 f8c1 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 80191dc:	6778      	str	r0, [r7, #116]	; 0x74
 80191de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d046      	beq.n	8019272 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 80191e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80191e8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80191ea:	4618      	mov	r0, r3
 80191ec:	f004 f80e 	bl	801d20c <_ZNK22MockNamedValueListNode7getTypeEv>
 80191f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80191f4:	4618      	mov	r0, r3
 80191f6:	f7f1 ff6d 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 80191fa:	4604      	mov	r4, r0
 80191fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8019200:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019202:	4618      	mov	r0, r3
 8019204:	f003 ffef 	bl	801d1e6 <_ZNK22MockNamedValueListNode7getNameEv>
 8019208:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801920c:	4618      	mov	r0, r3
 801920e:	f7f1 ff61 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8019212:	4603      	mov	r3, r0
 8019214:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8019218:	4622      	mov	r2, r4
 801921a:	492b      	ldr	r1, [pc, #172]	; (80192c8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801921c:	f7f2 fc8e 	bl	800bb3c <_Z16StringFromFormatPKcz>
 8019220:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8019224:	4619      	mov	r1, r3
 8019226:	6878      	ldr	r0, [r7, #4]
 8019228:	f7f1 fffe 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801922c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8019230:	4618      	mov	r0, r3
 8019232:	f7f1 ff7c 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8019236:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801923a:	4618      	mov	r0, r3
 801923c:	f7f1 ff77 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8019240:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019244:	4618      	mov	r0, r3
 8019246:	f7f1 ff72 	bl	800b12e <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801924a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801924c:	f003 ff90 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 8019250:	4603      	mov	r3, r0
 8019252:	2b00      	cmp	r3, #0
 8019254:	bf14      	ite	ne
 8019256:	2301      	movne	r3, #1
 8019258:	2300      	moveq	r3, #0
 801925a:	b2db      	uxtb	r3, r3
 801925c:	2b00      	cmp	r3, #0
 801925e:	d003      	beq.n	8019268 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 8019260:	4918      	ldr	r1, [pc, #96]	; (80192c4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8019262:	6878      	ldr	r0, [r7, #4]
 8019264:	f7f1 fff2 	bl	800b24c <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 8019268:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801926a:	f003 ff81 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 801926e:	6778      	str	r0, [r7, #116]	; 0x74
 8019270:	e7b5      	b.n	80191de <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 8019272:	683b      	ldr	r3, [r7, #0]
 8019274:	7b1b      	ldrb	r3, [r3, #12]
 8019276:	2b00      	cmp	r3, #0
 8019278:	d003      	beq.n	8019282 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801927a:	4914      	ldr	r1, [pc, #80]	; (80192cc <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801927c:	6878      	ldr	r0, [r7, #4]
 801927e:	f7f1 ffe5 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8019282:	683b      	ldr	r3, [r7, #0]
 8019284:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8019286:	683b      	ldr	r3, [r7, #0]
 8019288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801928a:	2b01      	cmp	r3, #1
 801928c:	d101      	bne.n	8019292 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801928e:	4c05      	ldr	r4, [pc, #20]	; (80192a4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8019290:	e000      	b.n	8019294 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 8019292:	4c0f      	ldr	r4, [pc, #60]	; (80192d0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 8019294:	683b      	ldr	r3, [r7, #0]
 8019296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8019298:	683a      	ldr	r2, [r7, #0]
 801929a:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801929c:	2a01      	cmp	r2, #1
 801929e:	d119      	bne.n	80192d4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 80192a0:	4a00      	ldr	r2, [pc, #0]	; (80192a4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 80192a2:	e018      	b.n	80192d6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 80192a4:	08023978 	.word	0x08023978
 80192a8:	080239ec 	.word	0x080239ec
 80192ac:	08023a04 	.word	0x08023a04
 80192b0:	08023a0c 	.word	0x08023a0c
 80192b4:	08023a2c 	.word	0x08023a2c
 80192b8:	08023a50 	.word	0x08023a50
 80192bc:	08023a68 	.word	0x08023a68
 80192c0:	08023a78 	.word	0x08023a78
 80192c4:	08023a84 	.word	0x08023a84
 80192c8:	08023a88 	.word	0x08023a88
 80192cc:	08023a98 	.word	0x08023a98
 80192d0:	08023ab8 	.word	0x08023ab8
 80192d4:	4a0c      	ldr	r2, [pc, #48]	; (8019308 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 80192d6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80192da:	9201      	str	r2, [sp, #4]
 80192dc:	9300      	str	r3, [sp, #0]
 80192de:	4623      	mov	r3, r4
 80192e0:	460a      	mov	r2, r1
 80192e2:	490a      	ldr	r1, [pc, #40]	; (801930c <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 80192e4:	f7f2 fc2a 	bl	800bb3c <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 80192e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80192ec:	4619      	mov	r1, r3
 80192ee:	6878      	ldr	r0, [r7, #4]
 80192f0:	f7f1 ff9a 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 80192f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80192f8:	4618      	mov	r0, r3
 80192fa:	f7f1 ff18 	bl	800b12e <_ZN12SimpleStringD1Ev>

    return str;
 80192fe:	bf00      	nop
}
 8019300:	6878      	ldr	r0, [r7, #4]
 8019302:	377c      	adds	r7, #124	; 0x7c
 8019304:	46bd      	mov	sp, r7
 8019306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019308:	08023ab8 	.word	0x08023ab8
 801930c:	08023abc 	.word	0x08023abc

08019310 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 8019310:	b590      	push	{r4, r7, lr}
 8019312:	b095      	sub	sp, #84	; 0x54
 8019314:	af00      	add	r7, sp, #0
 8019316:	6078      	str	r0, [r7, #4]
 8019318:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801931a:	496c      	ldr	r1, [pc, #432]	; (80194cc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801931c:	6878      	ldr	r0, [r7, #4]
 801931e:	f7f1 fb4e 	bl	800a9be <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 8019322:	683b      	ldr	r3, [r7, #0]
 8019324:	69db      	ldr	r3, [r3, #28]
 8019326:	4618      	mov	r0, r3
 8019328:	f004 f819 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 801932c:	64f8      	str	r0, [r7, #76]	; 0x4c
 801932e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019330:	2b00      	cmp	r3, #0
 8019332:	d05e      	beq.n	80193f2 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 8019334:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019336:	6838      	ldr	r0, [r7, #0]
 8019338:	f000 f906 	bl	8019548 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801933c:	4603      	mov	r3, r0
 801933e:	4618      	mov	r0, r3
 8019340:	f000 f938 	bl	80195b4 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8019344:	4603      	mov	r3, r0
 8019346:	f083 0301 	eor.w	r3, r3, #1
 801934a:	b2db      	uxtb	r3, r3
 801934c:	2b00      	cmp	r3, #0
 801934e:	d04b      	beq.n	80193e8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 8019350:	f107 030c 	add.w	r3, r7, #12
 8019354:	495d      	ldr	r1, [pc, #372]	; (80194cc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8019356:	4618      	mov	r0, r3
 8019358:	f7f1 fb31 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801935c:	f107 030c 	add.w	r3, r7, #12
 8019360:	4619      	mov	r1, r3
 8019362:	6878      	ldr	r0, [r7, #4]
 8019364:	f7f1 ff34 	bl	800b1d0 <_ZneRK12SimpleStringS1_>
 8019368:	4603      	mov	r3, r0
 801936a:	461c      	mov	r4, r3
 801936c:	f107 030c 	add.w	r3, r7, #12
 8019370:	4618      	mov	r0, r3
 8019372:	f7f1 fedc 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8019376:	2c00      	cmp	r4, #0
 8019378:	d003      	beq.n	8019382 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801937a:	4955      	ldr	r1, [pc, #340]	; (80194d0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801937c:	6878      	ldr	r0, [r7, #4]
 801937e:	f7f1 ff65 	bl	800b24c <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 8019382:	f107 031c 	add.w	r3, r7, #28
 8019386:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019388:	4618      	mov	r0, r3
 801938a:	f003 ff3f 	bl	801d20c <_ZNK22MockNamedValueListNode7getTypeEv>
 801938e:	f107 031c 	add.w	r3, r7, #28
 8019392:	4618      	mov	r0, r3
 8019394:	f7f1 fe9e 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8019398:	4604      	mov	r4, r0
 801939a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801939e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80193a0:	4618      	mov	r0, r3
 80193a2:	f003 ff20 	bl	801d1e6 <_ZNK22MockNamedValueListNode7getNameEv>
 80193a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80193aa:	4618      	mov	r0, r3
 80193ac:	f7f1 fe92 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 80193b0:	4603      	mov	r3, r0
 80193b2:	f107 0014 	add.w	r0, r7, #20
 80193b6:	4622      	mov	r2, r4
 80193b8:	4946      	ldr	r1, [pc, #280]	; (80194d4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 80193ba:	f7f2 fbbf 	bl	800bb3c <_Z16StringFromFormatPKcz>
 80193be:	f107 0314 	add.w	r3, r7, #20
 80193c2:	4619      	mov	r1, r3
 80193c4:	6878      	ldr	r0, [r7, #4]
 80193c6:	f7f1 ff2f 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 80193ca:	f107 0314 	add.w	r3, r7, #20
 80193ce:	4618      	mov	r0, r3
 80193d0:	f7f1 fead 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80193d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80193d8:	4618      	mov	r0, r3
 80193da:	f7f1 fea8 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80193de:	f107 031c 	add.w	r3, r7, #28
 80193e2:	4618      	mov	r0, r3
 80193e4:	f7f1 fea3 	bl	800b12e <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 80193e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80193ea:	f003 fec1 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 80193ee:	64f8      	str	r0, [r7, #76]	; 0x4c
 80193f0:	e79d      	b.n	801932e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 80193f2:	683b      	ldr	r3, [r7, #0]
 80193f4:	6a1b      	ldr	r3, [r3, #32]
 80193f6:	4618      	mov	r0, r3
 80193f8:	f003 ffb1 	bl	801d35e <_ZN18MockNamedValueList5beginEv>
 80193fc:	64f8      	str	r0, [r7, #76]	; 0x4c
 80193fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019400:	2b00      	cmp	r3, #0
 8019402:	d05e      	beq.n	80194c2 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 8019404:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019406:	6838      	ldr	r0, [r7, #0]
 8019408:	f000 f89e 	bl	8019548 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801940c:	4603      	mov	r3, r0
 801940e:	4618      	mov	r0, r3
 8019410:	f000 f8d0 	bl	80195b4 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8019414:	4603      	mov	r3, r0
 8019416:	f083 0301 	eor.w	r3, r3, #1
 801941a:	b2db      	uxtb	r3, r3
 801941c:	2b00      	cmp	r3, #0
 801941e:	d04b      	beq.n	80194b8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 8019420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019424:	4929      	ldr	r1, [pc, #164]	; (80194cc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8019426:	4618      	mov	r0, r3
 8019428:	f7f1 fac9 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801942c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019430:	4619      	mov	r1, r3
 8019432:	6878      	ldr	r0, [r7, #4]
 8019434:	f7f1 fecc 	bl	800b1d0 <_ZneRK12SimpleStringS1_>
 8019438:	4603      	mov	r3, r0
 801943a:	461c      	mov	r4, r3
 801943c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019440:	4618      	mov	r0, r3
 8019442:	f7f1 fe74 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8019446:	2c00      	cmp	r4, #0
 8019448:	d003      	beq.n	8019452 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801944a:	4921      	ldr	r1, [pc, #132]	; (80194d0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801944c:	6878      	ldr	r0, [r7, #4]
 801944e:	f7f1 fefd 	bl	800b24c <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 8019452:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019456:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019458:	4618      	mov	r0, r3
 801945a:	f003 fed7 	bl	801d20c <_ZNK22MockNamedValueListNode7getTypeEv>
 801945e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019462:	4618      	mov	r0, r3
 8019464:	f7f1 fe36 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8019468:	4604      	mov	r4, r0
 801946a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801946e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019470:	4618      	mov	r0, r3
 8019472:	f003 feb8 	bl	801d1e6 <_ZNK22MockNamedValueListNode7getNameEv>
 8019476:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801947a:	4618      	mov	r0, r3
 801947c:	f7f1 fe2a 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 8019480:	4603      	mov	r3, r0
 8019482:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8019486:	4622      	mov	r2, r4
 8019488:	4912      	ldr	r1, [pc, #72]	; (80194d4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801948a:	f7f2 fb57 	bl	800bb3c <_Z16StringFromFormatPKcz>
 801948e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019492:	4619      	mov	r1, r3
 8019494:	6878      	ldr	r0, [r7, #4]
 8019496:	f7f1 fec7 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801949a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801949e:	4618      	mov	r0, r3
 80194a0:	f7f1 fe45 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80194a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80194a8:	4618      	mov	r0, r3
 80194aa:	f7f1 fe40 	bl	800b12e <_ZN12SimpleStringD1Ev>
 80194ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80194b2:	4618      	mov	r0, r3
 80194b4:	f7f1 fe3b 	bl	800b12e <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 80194b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80194ba:	f003 fe59 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 80194be:	64f8      	str	r0, [r7, #76]	; 0x4c
 80194c0:	e79d      	b.n	80193fe <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 80194c2:	bf00      	nop
}
 80194c4:	6878      	ldr	r0, [r7, #4]
 80194c6:	3754      	adds	r7, #84	; 0x54
 80194c8:	46bd      	mov	sp, r7
 80194ca:	bd90      	pop	{r4, r7, pc}
 80194cc:	08023978 	.word	0x08023978
 80194d0:	08023a84 	.word	0x08023a84
 80194d4:	08023ae4 	.word	0x08023ae4

080194d8 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 80194d8:	b590      	push	{r4, r7, lr}
 80194da:	b085      	sub	sp, #20
 80194dc:	af00      	add	r7, sp, #0
 80194de:	6078      	str	r0, [r7, #4]
 80194e0:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 80194e2:	f107 0308 	add.w	r3, r7, #8
 80194e6:	6879      	ldr	r1, [r7, #4]
 80194e8:	4618      	mov	r0, r3
 80194ea:	f7fe ff0d 	bl	8018308 <_ZNK23MockCheckedExpectedCall7getNameEv>
 80194ee:	f107 0308 	add.w	r3, r7, #8
 80194f2:	4619      	mov	r1, r3
 80194f4:	6838      	ldr	r0, [r7, #0]
 80194f6:	f7f1 fe26 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 80194fa:	4603      	mov	r3, r0
 80194fc:	461c      	mov	r4, r3
 80194fe:	f107 0308 	add.w	r3, r7, #8
 8019502:	4618      	mov	r0, r3
 8019504:	f7f1 fe13 	bl	800b12e <_ZN12SimpleStringD1Ev>
 8019508:	4623      	mov	r3, r4
}
 801950a:	4618      	mov	r0, r3
 801950c:	3714      	adds	r7, #20
 801950e:	46bd      	mov	sp, r7
 8019510:	bd90      	pop	{r4, r7, pc}

08019512 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 8019512:	b480      	push	{r7}
 8019514:	b083      	sub	sp, #12
 8019516:	af00      	add	r7, sp, #0
 8019518:	6078      	str	r0, [r7, #4]
 801951a:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8019522:	f083 0301 	eor.w	r3, r3, #1
 8019526:	b2db      	uxtb	r3, r3
 8019528:	2b00      	cmp	r3, #0
 801952a:	d104      	bne.n	8019536 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019530:	683a      	ldr	r2, [r7, #0]
 8019532:	429a      	cmp	r2, r3
 8019534:	d101      	bne.n	801953a <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 8019536:	2301      	movs	r3, #1
 8019538:	e000      	b.n	801953c <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801953a:	2300      	movs	r3, #0
}
 801953c:	4618      	mov	r0, r3
 801953e:	370c      	adds	r7, #12
 8019540:	46bd      	mov	sp, r7
 8019542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019546:	4770      	bx	lr

08019548 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 8019548:	b580      	push	{r7, lr}
 801954a:	b082      	sub	sp, #8
 801954c:	af00      	add	r7, sp, #0
 801954e:	6078      	str	r0, [r7, #4]
 8019550:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 8019552:	6838      	ldr	r0, [r7, #0]
 8019554:	f003 fe18 	bl	801d188 <_ZN22MockNamedValueListNode4itemEv>
 8019558:	4603      	mov	r3, r0
}
 801955a:	4618      	mov	r0, r3
 801955c:	3708      	adds	r7, #8
 801955e:	46bd      	mov	sp, r7
 8019560:	bd80      	pop	{r7, pc}
	...

08019564 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 8019564:	b580      	push	{r7, lr}
 8019566:	b082      	sub	sp, #8
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
 801956c:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	6839      	ldr	r1, [r7, #0]
 8019572:	4618      	mov	r0, r3
 8019574:	f001 ff48 	bl	801b408 <_ZN14MockNamedValueC1ERK12SimpleString>
 8019578:	4a05      	ldr	r2, [pc, #20]	; (8019590 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	601a      	str	r2, [r3, #0]
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	2200      	movs	r2, #0
 8019582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	4618      	mov	r0, r3
 801958a:	3708      	adds	r7, #8
 801958c:	46bd      	mov	sp, r7
 801958e:	bd80      	pop	{r7, pc}
 8019590:	080261e0 	.word	0x080261e0

08019594 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 8019594:	b480      	push	{r7}
 8019596:	b083      	sub	sp, #12
 8019598:	af00      	add	r7, sp, #0
 801959a:	6078      	str	r0, [r7, #4]
 801959c:	460b      	mov	r3, r1
 801959e:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	78fa      	ldrb	r2, [r7, #3]
 80195a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80195a8:	bf00      	nop
 80195aa:	370c      	adds	r7, #12
 80195ac:	46bd      	mov	sp, r7
 80195ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b2:	4770      	bx	lr

080195b4 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 80195b4:	b480      	push	{r7}
 80195b6:	b083      	sub	sp, #12
 80195b8:	af00      	add	r7, sp, #0
 80195ba:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 80195c2:	4618      	mov	r0, r3
 80195c4:	370c      	adds	r7, #12
 80195c6:	46bd      	mov	sp, r7
 80195c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195cc:	4770      	bx	lr
	...

080195d0 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b082      	sub	sp, #8
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	6078      	str	r0, [r7, #4]
 80195d8:	460b      	mov	r3, r1
 80195da:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	3328      	adds	r3, #40	; 0x28
 80195e0:	4907      	ldr	r1, [pc, #28]	; (8019600 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 80195e2:	4618      	mov	r0, r3
 80195e4:	f002 f9b4 	bl	801b950 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	3328      	adds	r3, #40	; 0x28
 80195ec:	78fa      	ldrb	r2, [r7, #3]
 80195ee:	4611      	mov	r1, r2
 80195f0:	4618      	mov	r0, r3
 80195f2:	f001 ff5b 	bl	801b4ac <_ZN14MockNamedValue8setValueEb>
    return *this;
 80195f6:	687b      	ldr	r3, [r7, #4]
}
 80195f8:	4618      	mov	r0, r3
 80195fa:	3708      	adds	r7, #8
 80195fc:	46bd      	mov	sp, r7
 80195fe:	bd80      	pop	{r7, pc}
 8019600:	08023aec 	.word	0x08023aec

08019604 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 8019604:	b580      	push	{r7, lr}
 8019606:	b082      	sub	sp, #8
 8019608:	af00      	add	r7, sp, #0
 801960a:	6078      	str	r0, [r7, #4]
 801960c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	3328      	adds	r3, #40	; 0x28
 8019612:	4907      	ldr	r1, [pc, #28]	; (8019630 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 8019614:	4618      	mov	r0, r3
 8019616:	f002 f99b 	bl	801b950 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	3328      	adds	r3, #40	; 0x28
 801961e:	6839      	ldr	r1, [r7, #0]
 8019620:	4618      	mov	r0, r3
 8019622:	f001 ff67 	bl	801b4f4 <_ZN14MockNamedValue8setValueEj>
    return *this;
 8019626:	687b      	ldr	r3, [r7, #4]
}
 8019628:	4618      	mov	r0, r3
 801962a:	3708      	adds	r7, #8
 801962c:	46bd      	mov	sp, r7
 801962e:	bd80      	pop	{r7, pc}
 8019630:	08023aec 	.word	0x08023aec

08019634 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 8019634:	b580      	push	{r7, lr}
 8019636:	b082      	sub	sp, #8
 8019638:	af00      	add	r7, sp, #0
 801963a:	6078      	str	r0, [r7, #4]
 801963c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	3328      	adds	r3, #40	; 0x28
 8019642:	4907      	ldr	r1, [pc, #28]	; (8019660 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 8019644:	4618      	mov	r0, r3
 8019646:	f002 f983 	bl	801b950 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	3328      	adds	r3, #40	; 0x28
 801964e:	6839      	ldr	r1, [r7, #0]
 8019650:	4618      	mov	r0, r3
 8019652:	f001 ff71 	bl	801b538 <_ZN14MockNamedValue8setValueEi>
    return *this;
 8019656:	687b      	ldr	r3, [r7, #4]
}
 8019658:	4618      	mov	r0, r3
 801965a:	3708      	adds	r7, #8
 801965c:	46bd      	mov	sp, r7
 801965e:	bd80      	pop	{r7, pc}
 8019660:	08023aec 	.word	0x08023aec

08019664 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 8019664:	b580      	push	{r7, lr}
 8019666:	b082      	sub	sp, #8
 8019668:	af00      	add	r7, sp, #0
 801966a:	6078      	str	r0, [r7, #4]
 801966c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	3328      	adds	r3, #40	; 0x28
 8019672:	4907      	ldr	r1, [pc, #28]	; (8019690 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 8019674:	4618      	mov	r0, r3
 8019676:	f002 f96b 	bl	801b950 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	3328      	adds	r3, #40	; 0x28
 801967e:	6839      	ldr	r1, [r7, #0]
 8019680:	4618      	mov	r0, r3
 8019682:	f001 ff7b 	bl	801b57c <_ZN14MockNamedValue8setValueEl>
    return *this;
 8019686:	687b      	ldr	r3, [r7, #4]
}
 8019688:	4618      	mov	r0, r3
 801968a:	3708      	adds	r7, #8
 801968c:	46bd      	mov	sp, r7
 801968e:	bd80      	pop	{r7, pc}
 8019690:	08023aec 	.word	0x08023aec

08019694 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 8019694:	b580      	push	{r7, lr}
 8019696:	b082      	sub	sp, #8
 8019698:	af00      	add	r7, sp, #0
 801969a:	6078      	str	r0, [r7, #4]
 801969c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	3328      	adds	r3, #40	; 0x28
 80196a2:	4907      	ldr	r1, [pc, #28]	; (80196c0 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 80196a4:	4618      	mov	r0, r3
 80196a6:	f002 f953 	bl	801b950 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	3328      	adds	r3, #40	; 0x28
 80196ae:	6839      	ldr	r1, [r7, #0]
 80196b0:	4618      	mov	r0, r3
 80196b2:	f001 ff85 	bl	801b5c0 <_ZN14MockNamedValue8setValueEm>
    return *this;
 80196b6:	687b      	ldr	r3, [r7, #4]
}
 80196b8:	4618      	mov	r0, r3
 80196ba:	3708      	adds	r7, #8
 80196bc:	46bd      	mov	sp, r7
 80196be:	bd80      	pop	{r7, pc}
 80196c0:	08023aec 	.word	0x08023aec

080196c4 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 80196c4:	b5b0      	push	{r4, r5, r7, lr}
 80196c6:	b086      	sub	sp, #24
 80196c8:	af02      	add	r7, sp, #8
 80196ca:	60f8      	str	r0, [r7, #12]
 80196cc:	1d3b      	adds	r3, r7, #4
 80196ce:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 80196d2:	f7f8 fd57 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 80196d6:	4604      	mov	r4, r0
 80196d8:	6823      	ldr	r3, [r4, #0]
 80196da:	3368      	adds	r3, #104	; 0x68
 80196dc:	681d      	ldr	r5, [r3, #0]
 80196de:	f7f8 fd61 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80196e2:	4603      	mov	r3, r0
 80196e4:	9300      	str	r3, [sp, #0]
 80196e6:	f240 2319 	movw	r3, #537	; 0x219
 80196ea:	4a04      	ldr	r2, [pc, #16]	; (80196fc <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 80196ec:	4904      	ldr	r1, [pc, #16]	; (8019700 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 80196ee:	4620      	mov	r0, r4
 80196f0:	47a8      	blx	r5
    return *this;
 80196f2:	68fb      	ldr	r3, [r7, #12]
}
 80196f4:	4618      	mov	r0, r3
 80196f6:	3710      	adds	r7, #16
 80196f8:	46bd      	mov	sp, r7
 80196fa:	bdb0      	pop	{r4, r5, r7, pc}
 80196fc:	0802397c 	.word	0x0802397c
 8019700:	08023998 	.word	0x08023998

08019704 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 8019704:	b5b0      	push	{r4, r5, r7, lr}
 8019706:	b086      	sub	sp, #24
 8019708:	af02      	add	r7, sp, #8
 801970a:	60f8      	str	r0, [r7, #12]
 801970c:	1d3b      	adds	r3, r7, #4
 801970e:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 8019712:	f7f8 fd37 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 8019716:	4604      	mov	r4, r0
 8019718:	6823      	ldr	r3, [r4, #0]
 801971a:	3368      	adds	r3, #104	; 0x68
 801971c:	681d      	ldr	r5, [r3, #0]
 801971e:	f7f8 fd41 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019722:	4603      	mov	r3, r0
 8019724:	9300      	str	r3, [sp, #0]
 8019726:	f240 231f 	movw	r3, #543	; 0x21f
 801972a:	4a04      	ldr	r2, [pc, #16]	; (801973c <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801972c:	4904      	ldr	r1, [pc, #16]	; (8019740 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801972e:	4620      	mov	r0, r4
 8019730:	47a8      	blx	r5
    return *this;
 8019732:	68fb      	ldr	r3, [r7, #12]
}
 8019734:	4618      	mov	r0, r3
 8019736:	3710      	adds	r7, #16
 8019738:	46bd      	mov	sp, r7
 801973a:	bdb0      	pop	{r4, r5, r7, pc}
 801973c:	0802397c 	.word	0x0802397c
 8019740:	080239b8 	.word	0x080239b8

08019744 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 8019744:	b580      	push	{r7, lr}
 8019746:	b082      	sub	sp, #8
 8019748:	af00      	add	r7, sp, #0
 801974a:	6078      	str	r0, [r7, #4]
 801974c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	3328      	adds	r3, #40	; 0x28
 8019752:	4907      	ldr	r1, [pc, #28]	; (8019770 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 8019754:	4618      	mov	r0, r3
 8019756:	f002 f8fb 	bl	801b950 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	3328      	adds	r3, #40	; 0x28
 801975e:	6839      	ldr	r1, [r7, #0]
 8019760:	4618      	mov	r0, r3
 8019762:	f002 f837 	bl	801b7d4 <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 8019766:	687b      	ldr	r3, [r7, #4]
}
 8019768:	4618      	mov	r0, r3
 801976a:	3708      	adds	r7, #8
 801976c:	46bd      	mov	sp, r7
 801976e:	bd80      	pop	{r7, pc}
 8019770:	08023aec 	.word	0x08023aec

08019774 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 8019774:	b580      	push	{r7, lr}
 8019776:	b084      	sub	sp, #16
 8019778:	af00      	add	r7, sp, #0
 801977a:	60f8      	str	r0, [r7, #12]
 801977c:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 8019780:	68fb      	ldr	r3, [r7, #12]
 8019782:	3328      	adds	r3, #40	; 0x28
 8019784:	4907      	ldr	r1, [pc, #28]	; (80197a4 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 8019786:	4618      	mov	r0, r3
 8019788:	f002 f8e2 	bl	801b950 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	3328      	adds	r3, #40	; 0x28
 8019790:	ed97 0b00 	vldr	d0, [r7]
 8019794:	4618      	mov	r0, r3
 8019796:	f001 ff73 	bl	801b680 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801979a:	68fb      	ldr	r3, [r7, #12]
}
 801979c:	4618      	mov	r0, r3
 801979e:	3710      	adds	r7, #16
 80197a0:	46bd      	mov	sp, r7
 80197a2:	bd80      	pop	{r7, pc}
 80197a4:	08023aec 	.word	0x08023aec

080197a8 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b082      	sub	sp, #8
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	6078      	str	r0, [r7, #4]
 80197b0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	3328      	adds	r3, #40	; 0x28
 80197b6:	4907      	ldr	r1, [pc, #28]	; (80197d4 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 80197b8:	4618      	mov	r0, r3
 80197ba:	f002 f8c9 	bl	801b950 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	3328      	adds	r3, #40	; 0x28
 80197c2:	6839      	ldr	r1, [r7, #0]
 80197c4:	4618      	mov	r0, r3
 80197c6:	f001 ff9f 	bl	801b708 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 80197ca:	687b      	ldr	r3, [r7, #4]
}
 80197cc:	4618      	mov	r0, r3
 80197ce:	3708      	adds	r7, #8
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}
 80197d4:	08023aec 	.word	0x08023aec

080197d8 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	b082      	sub	sp, #8
 80197dc:	af00      	add	r7, sp, #0
 80197de:	6078      	str	r0, [r7, #4]
 80197e0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	3328      	adds	r3, #40	; 0x28
 80197e6:	4907      	ldr	r1, [pc, #28]	; (8019804 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 80197e8:	4618      	mov	r0, r3
 80197ea:	f002 f8b1 	bl	801b950 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	3328      	adds	r3, #40	; 0x28
 80197f2:	6839      	ldr	r1, [r7, #0]
 80197f4:	4618      	mov	r0, r3
 80197f6:	f001 ffa9 	bl	801b74c <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 80197fa:	687b      	ldr	r3, [r7, #4]
}
 80197fc:	4618      	mov	r0, r3
 80197fe:	3708      	adds	r7, #8
 8019800:	46bd      	mov	sp, r7
 8019802:	bd80      	pop	{r7, pc}
 8019804:	08023aec 	.word	0x08023aec

08019808 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 8019808:	b580      	push	{r7, lr}
 801980a:	b082      	sub	sp, #8
 801980c:	af00      	add	r7, sp, #0
 801980e:	6078      	str	r0, [r7, #4]
 8019810:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	3328      	adds	r3, #40	; 0x28
 8019816:	4907      	ldr	r1, [pc, #28]	; (8019834 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 8019818:	4618      	mov	r0, r3
 801981a:	f002 f899 	bl	801b950 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	3328      	adds	r3, #40	; 0x28
 8019822:	6839      	ldr	r1, [r7, #0]
 8019824:	4618      	mov	r0, r3
 8019826:	f001 ffb3 	bl	801b790 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801982a:	687b      	ldr	r3, [r7, #4]
}
 801982c:	4618      	mov	r0, r3
 801982e:	3708      	adds	r7, #8
 8019830:	46bd      	mov	sp, r7
 8019832:	bd80      	pop	{r7, pc}
 8019834:	08023aec 	.word	0x08023aec

08019838 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 8019838:	b480      	push	{r7}
 801983a:	b083      	sub	sp, #12
 801983c:	af00      	add	r7, sp, #0
 801983e:	6078      	str	r0, [r7, #4]
 8019840:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	2201      	movs	r2, #1
 8019846:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	2200      	movs	r2, #0
 801984e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	683a      	ldr	r2, [r7, #0]
 8019856:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 8019858:	687b      	ldr	r3, [r7, #4]
}
 801985a:	4618      	mov	r0, r3
 801985c:	370c      	adds	r7, #12
 801985e:	46bd      	mov	sp, r7
 8019860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019864:	4770      	bx	lr

08019866 <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 8019866:	b580      	push	{r7, lr}
 8019868:	b082      	sub	sp, #8
 801986a:	af00      	add	r7, sp, #0
 801986c:	6078      	str	r0, [r7, #4]
 801986e:	6039      	str	r1, [r7, #0]
    return returnValue_;
 8019870:	683b      	ldr	r3, [r7, #0]
 8019872:	3328      	adds	r3, #40	; 0x28
 8019874:	4619      	mov	r1, r3
 8019876:	6878      	ldr	r0, [r7, #4]
 8019878:	f7ef f946 	bl	8008b08 <_ZN14MockNamedValueC1ERKS_>
}
 801987c:	6878      	ldr	r0, [r7, #4]
 801987e:	3708      	adds	r7, #8
 8019880:	46bd      	mov	sp, r7
 8019882:	bd80      	pop	{r7, pc}

08019884 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 8019884:	b480      	push	{r7}
 8019886:	b085      	sub	sp, #20
 8019888:	af00      	add	r7, sp, #0
 801988a:	60f8      	str	r0, [r7, #12]
 801988c:	60b9      	str	r1, [r7, #8]
 801988e:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	68ba      	ldr	r2, [r7, #8]
 8019894:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 8019896:	68fb      	ldr	r3, [r7, #12]
 8019898:	687a      	ldr	r2, [r7, #4]
 801989a:	615a      	str	r2, [r3, #20]
    return *this;
 801989c:	68fb      	ldr	r3, [r7, #12]
}
 801989e:	4618      	mov	r0, r3
 80198a0:	3714      	adds	r7, #20
 80198a2:	46bd      	mov	sp, r7
 80198a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198a8:	4770      	bx	lr

080198aa <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 80198aa:	b480      	push	{r7}
 80198ac:	b083      	sub	sp, #12
 80198ae:	af00      	add	r7, sp, #0
 80198b0:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	7e1b      	ldrb	r3, [r3, #24]
}
 80198b6:	4618      	mov	r0, r3
 80198b8:	370c      	adds	r7, #12
 80198ba:	46bd      	mov	sp, r7
 80198bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198c0:	4770      	bx	lr

080198c2 <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 80198c2:	b480      	push	{r7}
 80198c4:	b083      	sub	sp, #12
 80198c6:	af00      	add	r7, sp, #0
 80198c8:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 80198ce:	4618      	mov	r0, r3
 80198d0:	370c      	adds	r7, #12
 80198d2:	46bd      	mov	sp, r7
 80198d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198d8:	4770      	bx	lr
	...

080198dc <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 80198dc:	b580      	push	{r7, lr}
 80198de:	b082      	sub	sp, #8
 80198e0:	af00      	add	r7, sp, #0
 80198e2:	6078      	str	r0, [r7, #4]
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	4618      	mov	r0, r3
 80198e8:	f7fe fcce 	bl	8018288 <_ZN16MockExpectedCallC1Ev>
 80198ec:	4a03      	ldr	r2, [pc, #12]	; (80198fc <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	601a      	str	r2, [r3, #0]
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	4618      	mov	r0, r3
 80198f6:	3708      	adds	r7, #8
 80198f8:	46bd      	mov	sp, r7
 80198fa:	bd80      	pop	{r7, pc}
 80198fc:	08026040 	.word	0x08026040

08019900 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 8019900:	b580      	push	{r7, lr}
 8019902:	af00      	add	r7, sp, #0
 8019904:	4801      	ldr	r0, [pc, #4]	; (801990c <__tcf_0+0xc>)
 8019906:	f000 f831 	bl	801996c <_ZN23MockIgnoredExpectedCallD1Ev>
 801990a:	bd80      	pop	{r7, pc}
 801990c:	20000d54 	.word	0x20000d54

08019910 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 8019910:	b580      	push	{r7, lr}
 8019912:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 8019914:	4b12      	ldr	r3, [pc, #72]	; (8019960 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8019916:	781b      	ldrb	r3, [r3, #0]
 8019918:	f3bf 8f5b 	dmb	ish
 801991c:	b2db      	uxtb	r3, r3
 801991e:	f003 0301 	and.w	r3, r3, #1
 8019922:	2b00      	cmp	r3, #0
 8019924:	bf0c      	ite	eq
 8019926:	2301      	moveq	r3, #1
 8019928:	2300      	movne	r3, #0
 801992a:	b2db      	uxtb	r3, r3
 801992c:	2b00      	cmp	r3, #0
 801992e:	d013      	beq.n	8019958 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 8019930:	480b      	ldr	r0, [pc, #44]	; (8019960 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8019932:	f003 ff05 	bl	801d740 <__cxa_guard_acquire>
 8019936:	4603      	mov	r3, r0
 8019938:	2b00      	cmp	r3, #0
 801993a:	bf14      	ite	ne
 801993c:	2301      	movne	r3, #1
 801993e:	2300      	moveq	r3, #0
 8019940:	b2db      	uxtb	r3, r3
 8019942:	2b00      	cmp	r3, #0
 8019944:	d008      	beq.n	8019958 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 8019946:	4807      	ldr	r0, [pc, #28]	; (8019964 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 8019948:	f7ff ffc8 	bl	80198dc <_ZN23MockIgnoredExpectedCallC1Ev>
 801994c:	4804      	ldr	r0, [pc, #16]	; (8019960 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801994e:	f003 ff03 	bl	801d758 <__cxa_guard_release>
 8019952:	4805      	ldr	r0, [pc, #20]	; (8019968 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 8019954:	f003 ff27 	bl	801d7a6 <atexit>
    return call;
 8019958:	4b02      	ldr	r3, [pc, #8]	; (8019964 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801995a:	4618      	mov	r0, r3
 801995c:	bd80      	pop	{r7, pc}
 801995e:	bf00      	nop
 8019960:	20000d58 	.word	0x20000d58
 8019964:	20000d54 	.word	0x20000d54
 8019968:	08019901 	.word	0x08019901

0801996c <_ZN23MockIgnoredExpectedCallD1Ev>:
 801996c:	b580      	push	{r7, lr}
 801996e:	b082      	sub	sp, #8
 8019970:	af00      	add	r7, sp, #0
 8019972:	6078      	str	r0, [r7, #4]
 8019974:	4a05      	ldr	r2, [pc, #20]	; (801998c <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	601a      	str	r2, [r3, #0]
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	4618      	mov	r0, r3
 801997e:	f7fe fc93 	bl	80182a8 <_ZN16MockExpectedCallD1Ev>
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	4618      	mov	r0, r3
 8019986:	3708      	adds	r7, #8
 8019988:	46bd      	mov	sp, r7
 801998a:	bd80      	pop	{r7, pc}
 801998c:	08026040 	.word	0x08026040

08019990 <_ZN23MockIgnoredExpectedCallD0Ev>:
 8019990:	b580      	push	{r7, lr}
 8019992:	b082      	sub	sp, #8
 8019994:	af00      	add	r7, sp, #0
 8019996:	6078      	str	r0, [r7, #4]
 8019998:	6878      	ldr	r0, [r7, #4]
 801999a:	f7ff ffe7 	bl	801996c <_ZN23MockIgnoredExpectedCallD1Ev>
 801999e:	2104      	movs	r1, #4
 80199a0:	6878      	ldr	r0, [r7, #4]
 80199a2:	f7ee fc5d 	bl	8008260 <_ZdlPvj>
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	4618      	mov	r0, r3
 80199aa:	3708      	adds	r7, #8
 80199ac:	46bd      	mov	sp, r7
 80199ae:	bd80      	pop	{r7, pc}

080199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b082      	sub	sp, #8
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	6078      	str	r0, [r7, #4]
 80199b8:	4a05      	ldr	r2, [pc, #20]	; (80199d0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	601a      	str	r2, [r3, #0]
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	4618      	mov	r0, r3
 80199c2:	f001 fd4b 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	4618      	mov	r0, r3
 80199ca:	3708      	adds	r7, #8
 80199cc:	46bd      	mov	sp, r7
 80199ce:	bd80      	pop	{r7, pc}
 80199d0:	080261e0 	.word	0x080261e0

080199d4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 80199d4:	b580      	push	{r7, lr}
 80199d6:	b082      	sub	sp, #8
 80199d8:	af00      	add	r7, sp, #0
 80199da:	6078      	str	r0, [r7, #4]
 80199dc:	6878      	ldr	r0, [r7, #4]
 80199de:	f7ff ffe7 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 80199e2:	2138      	movs	r1, #56	; 0x38
 80199e4:	6878      	ldr	r0, [r7, #4]
 80199e6:	f7ee fc3b 	bl	8008260 <_ZdlPvj>
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	4618      	mov	r0, r3
 80199ee:	3708      	adds	r7, #8
 80199f0:	46bd      	mov	sp, r7
 80199f2:	bd80      	pop	{r7, pc}

080199f4 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 80199f4:	b480      	push	{r7}
 80199f6:	b083      	sub	sp, #12
 80199f8:	af00      	add	r7, sp, #0
 80199fa:	6078      	str	r0, [r7, #4]
 80199fc:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	683a      	ldr	r2, [r7, #0]
 8019a02:	601a      	str	r2, [r3, #0]
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	2200      	movs	r2, #0
 8019a08:	605a      	str	r2, [r3, #4]
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	4618      	mov	r0, r3
 8019a0e:	370c      	adds	r7, #12
 8019a10:	46bd      	mov	sp, r7
 8019a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a16:	4770      	bx	lr

08019a18 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 8019a18:	b480      	push	{r7}
 8019a1a:	b083      	sub	sp, #12
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	6078      	str	r0, [r7, #4]
 8019a20:	4a06      	ldr	r2, [pc, #24]	; (8019a3c <_ZN21MockExpectedCallsListC1Ev+0x24>)
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	601a      	str	r2, [r3, #0]
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	2200      	movs	r2, #0
 8019a2a:	605a      	str	r2, [r3, #4]
{
}
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	4618      	mov	r0, r3
 8019a30:	370c      	adds	r7, #12
 8019a32:	46bd      	mov	sp, r7
 8019a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a38:	4770      	bx	lr
 8019a3a:	bf00      	nop
 8019a3c:	08026334 	.word	0x08026334

08019a40 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 8019a40:	b580      	push	{r7, lr}
 8019a42:	b084      	sub	sp, #16
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	6078      	str	r0, [r7, #4]
 8019a48:	4a0d      	ldr	r2, [pc, #52]	; (8019a80 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	685b      	ldr	r3, [r3, #4]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d00f      	beq.n	8019a76 <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	685b      	ldr	r3, [r3, #4]
 8019a5a:	685b      	ldr	r3, [r3, #4]
 8019a5c:	60fb      	str	r3, [r7, #12]
        delete head_;
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	685b      	ldr	r3, [r3, #4]
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d003      	beq.n	8019a6e <_ZN21MockExpectedCallsListD1Ev+0x2e>
 8019a66:	2108      	movs	r1, #8
 8019a68:	4618      	mov	r0, r3
 8019a6a:	f7ee fbf9 	bl	8008260 <_ZdlPvj>
        head_ = next;
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	68fa      	ldr	r2, [r7, #12]
 8019a72:	605a      	str	r2, [r3, #4]
    while (head_) {
 8019a74:	e7eb      	b.n	8019a4e <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	4618      	mov	r0, r3
 8019a7a:	3710      	adds	r7, #16
 8019a7c:	46bd      	mov	sp, r7
 8019a7e:	bd80      	pop	{r7, pc}
 8019a80:	08026334 	.word	0x08026334

08019a84 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 8019a84:	b580      	push	{r7, lr}
 8019a86:	b082      	sub	sp, #8
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	6078      	str	r0, [r7, #4]
}
 8019a8c:	6878      	ldr	r0, [r7, #4]
 8019a8e:	f7ff ffd7 	bl	8019a40 <_ZN21MockExpectedCallsListD1Ev>
 8019a92:	2108      	movs	r1, #8
 8019a94:	6878      	ldr	r0, [r7, #4]
 8019a96:	f7ee fbe3 	bl	8008260 <_ZdlPvj>
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	3708      	adds	r7, #8
 8019aa0:	46bd      	mov	sp, r7
 8019aa2:	bd80      	pop	{r7, pc}

08019aa4 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 8019aa4:	b580      	push	{r7, lr}
 8019aa6:	b084      	sub	sp, #16
 8019aa8:	af00      	add	r7, sp, #0
 8019aaa:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	685b      	ldr	r3, [r3, #4]
 8019ab0:	60fb      	str	r3, [r7, #12]
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d011      	beq.n	8019adc <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	681a      	ldr	r2, [r3, #0]
 8019abc:	68fb      	ldr	r3, [r7, #12]
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	33d4      	adds	r3, #212	; 0xd4
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	4610      	mov	r0, r2
 8019ac8:	4798      	blx	r3
 8019aca:	4603      	mov	r3, r0
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d001      	beq.n	8019ad4 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 8019ad0:	2301      	movs	r3, #1
 8019ad2:	e004      	b.n	8019ade <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	685b      	ldr	r3, [r3, #4]
 8019ad8:	60fb      	str	r3, [r7, #12]
 8019ada:	e7ea      	b.n	8019ab2 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 8019adc:	2300      	movs	r3, #0
}
 8019ade:	4618      	mov	r0, r3
 8019ae0:	3710      	adds	r7, #16
 8019ae2:	46bd      	mov	sp, r7
 8019ae4:	bd80      	pop	{r7, pc}

08019ae6 <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 8019ae6:	b480      	push	{r7}
 8019ae8:	b085      	sub	sp, #20
 8019aea:	af00      	add	r7, sp, #0
 8019aec:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 8019aee:	2300      	movs	r3, #0
 8019af0:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	685b      	ldr	r3, [r3, #4]
 8019af6:	60bb      	str	r3, [r7, #8]
 8019af8:	68bb      	ldr	r3, [r7, #8]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d006      	beq.n	8019b0c <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	3301      	adds	r3, #1
 8019b02:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019b04:	68bb      	ldr	r3, [r7, #8]
 8019b06:	685b      	ldr	r3, [r3, #4]
 8019b08:	60bb      	str	r3, [r7, #8]
 8019b0a:	e7f5      	b.n	8019af8 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 8019b0c:	68fb      	ldr	r3, [r7, #12]
}
 8019b0e:	4618      	mov	r0, r3
 8019b10:	3714      	adds	r7, #20
 8019b12:	46bd      	mov	sp, r7
 8019b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b18:	4770      	bx	lr

08019b1a <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 8019b1a:	b480      	push	{r7}
 8019b1c:	b083      	sub	sp, #12
 8019b1e:	af00      	add	r7, sp, #0
 8019b20:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	685b      	ldr	r3, [r3, #4]
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	bf0c      	ite	eq
 8019b2a:	2301      	moveq	r3, #1
 8019b2c:	2300      	movne	r3, #0
 8019b2e:	b2db      	uxtb	r3, r3
}
 8019b30:	4618      	mov	r0, r3
 8019b32:	370c      	adds	r7, #12
 8019b34:	46bd      	mov	sp, r7
 8019b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b3a:	4770      	bx	lr

08019b3c <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 8019b3c:	b580      	push	{r7, lr}
 8019b3e:	b084      	sub	sp, #16
 8019b40:	af00      	add	r7, sp, #0
 8019b42:	6078      	str	r0, [r7, #4]
 8019b44:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 8019b46:	2300      	movs	r3, #0
 8019b48:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	685b      	ldr	r3, [r3, #4]
 8019b4e:	60bb      	str	r3, [r7, #8]
 8019b50:	68bb      	ldr	r3, [r7, #8]
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d01d      	beq.n	8019b92 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 8019b56:	68bb      	ldr	r3, [r7, #8]
 8019b58:	681a      	ldr	r2, [r3, #0]
 8019b5a:	68bb      	ldr	r3, [r7, #8]
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	33b8      	adds	r3, #184	; 0xb8
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	6839      	ldr	r1, [r7, #0]
 8019b66:	4610      	mov	r0, r2
 8019b68:	4798      	blx	r3
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d00c      	beq.n	8019b8a <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 8019b70:	68bb      	ldr	r3, [r7, #8]
 8019b72:	681a      	ldr	r2, [r3, #0]
 8019b74:	68bb      	ldr	r3, [r7, #8]
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	33f8      	adds	r3, #248	; 0xf8
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	4610      	mov	r0, r2
 8019b80:	4798      	blx	r3
 8019b82:	4602      	mov	r2, r0
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	4413      	add	r3, r2
 8019b88:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019b8a:	68bb      	ldr	r3, [r7, #8]
 8019b8c:	685b      	ldr	r3, [r3, #4]
 8019b8e:	60bb      	str	r3, [r7, #8]
 8019b90:	e7de      	b.n	8019b50 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 8019b92:	68fb      	ldr	r3, [r7, #12]
}
 8019b94:	4618      	mov	r0, r3
 8019b96:	3710      	adds	r7, #16
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	bd80      	pop	{r7, pc}

08019b9c <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 8019b9c:	b580      	push	{r7, lr}
 8019b9e:	b084      	sub	sp, #16
 8019ba0:	af00      	add	r7, sp, #0
 8019ba2:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	685b      	ldr	r3, [r3, #4]
 8019bac:	60bb      	str	r3, [r7, #8]
 8019bae:	68bb      	ldr	r3, [r7, #8]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d015      	beq.n	8019be0 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 8019bb4:	68bb      	ldr	r3, [r7, #8]
 8019bb6:	681a      	ldr	r2, [r3, #0]
 8019bb8:	68bb      	ldr	r3, [r7, #8]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	33c0      	adds	r3, #192	; 0xc0
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	4610      	mov	r0, r2
 8019bc4:	4798      	blx	r3
 8019bc6:	4603      	mov	r3, r0
 8019bc8:	f083 0301 	eor.w	r3, r3, #1
 8019bcc:	b2db      	uxtb	r3, r3
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d002      	beq.n	8019bd8 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	3301      	adds	r3, #1
 8019bd6:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019bd8:	68bb      	ldr	r3, [r7, #8]
 8019bda:	685b      	ldr	r3, [r3, #4]
 8019bdc:	60bb      	str	r3, [r7, #8]
 8019bde:	e7e6      	b.n	8019bae <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 8019be0:	68fb      	ldr	r3, [r7, #12]
}
 8019be2:	4618      	mov	r0, r3
 8019be4:	3710      	adds	r7, #16
 8019be6:	46bd      	mov	sp, r7
 8019be8:	bd80      	pop	{r7, pc}

08019bea <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 8019bea:	b580      	push	{r7, lr}
 8019bec:	b084      	sub	sp, #16
 8019bee:	af00      	add	r7, sp, #0
 8019bf0:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	685b      	ldr	r3, [r3, #4]
 8019bf6:	60fb      	str	r3, [r7, #12]
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d011      	beq.n	8019c22 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	681a      	ldr	r2, [r3, #0]
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	33c8      	adds	r3, #200	; 0xc8
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	4610      	mov	r0, r2
 8019c0e:	4798      	blx	r3
 8019c10:	4603      	mov	r3, r0
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d001      	beq.n	8019c1a <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 8019c16:	2301      	movs	r3, #1
 8019c18:	e004      	b.n	8019c24 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	685b      	ldr	r3, [r3, #4]
 8019c1e:	60fb      	str	r3, [r7, #12]
 8019c20:	e7ea      	b.n	8019bf8 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 8019c22:	2300      	movs	r3, #0
}
 8019c24:	4618      	mov	r0, r3
 8019c26:	3710      	adds	r7, #16
 8019c28:	46bd      	mov	sp, r7
 8019c2a:	bd80      	pop	{r7, pc}

08019c2c <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 8019c2c:	b580      	push	{r7, lr}
 8019c2e:	b084      	sub	sp, #16
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	685b      	ldr	r3, [r3, #4]
 8019c38:	60fb      	str	r3, [r7, #12]
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d014      	beq.n	8019c6a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	681a      	ldr	r2, [r3, #0]
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	33c0      	adds	r3, #192	; 0xc0
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	4610      	mov	r0, r2
 8019c50:	4798      	blx	r3
 8019c52:	4603      	mov	r3, r0
 8019c54:	f083 0301 	eor.w	r3, r3, #1
 8019c58:	b2db      	uxtb	r3, r3
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d001      	beq.n	8019c62 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 8019c5e:	2301      	movs	r3, #1
 8019c60:	e004      	b.n	8019c6c <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	685b      	ldr	r3, [r3, #4]
 8019c66:	60fb      	str	r3, [r7, #12]
 8019c68:	e7e7      	b.n	8019c3a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 8019c6a:	2300      	movs	r3, #0
}
 8019c6c:	4618      	mov	r0, r3
 8019c6e:	3710      	adds	r7, #16
 8019c70:	46bd      	mov	sp, r7
 8019c72:	bd80      	pop	{r7, pc}

08019c74 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 8019c74:	b580      	push	{r7, lr}
 8019c76:	b084      	sub	sp, #16
 8019c78:	af00      	add	r7, sp, #0
 8019c7a:	6078      	str	r0, [r7, #4]
 8019c7c:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	685b      	ldr	r3, [r3, #4]
 8019c82:	60fb      	str	r3, [r7, #12]
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d012      	beq.n	8019cb0 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	681a      	ldr	r2, [r3, #0]
 8019c8e:	68fb      	ldr	r3, [r7, #12]
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	33b8      	adds	r3, #184	; 0xb8
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	6839      	ldr	r1, [r7, #0]
 8019c9a:	4610      	mov	r0, r2
 8019c9c:	4798      	blx	r3
 8019c9e:	4603      	mov	r3, r0
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d001      	beq.n	8019ca8 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 8019ca4:	2301      	movs	r3, #1
 8019ca6:	e004      	b.n	8019cb2 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	685b      	ldr	r3, [r3, #4]
 8019cac:	60fb      	str	r3, [r7, #12]
 8019cae:	e7e9      	b.n	8019c84 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 8019cb0:	2300      	movs	r3, #0
}
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	3710      	adds	r7, #16
 8019cb6:	46bd      	mov	sp, r7
 8019cb8:	bd80      	pop	{r7, pc}
	...

08019cbc <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 8019cbc:	b590      	push	{r4, r7, lr}
 8019cbe:	b085      	sub	sp, #20
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	6078      	str	r0, [r7, #4]
 8019cc4:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 8019cc6:	2273      	movs	r2, #115	; 0x73
 8019cc8:	4911      	ldr	r1, [pc, #68]	; (8019d10 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 8019cca:	2008      	movs	r0, #8
 8019ccc:	f7ee fab4 	bl	8008238 <_ZnwjPKci>
 8019cd0:	4604      	mov	r4, r0
 8019cd2:	6839      	ldr	r1, [r7, #0]
 8019cd4:	4620      	mov	r0, r4
 8019cd6:	f7ff fe8d 	bl	80199f4 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 8019cda:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	685b      	ldr	r3, [r3, #4]
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d103      	bne.n	8019cec <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	68ba      	ldr	r2, [r7, #8]
 8019ce8:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 8019cea:	e00d      	b.n	8019d08 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	685b      	ldr	r3, [r3, #4]
 8019cf0:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	685b      	ldr	r3, [r3, #4]
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d003      	beq.n	8019d02 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	685b      	ldr	r3, [r3, #4]
 8019cfe:	60fb      	str	r3, [r7, #12]
 8019d00:	e7f7      	b.n	8019cf2 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	68ba      	ldr	r2, [r7, #8]
 8019d06:	605a      	str	r2, [r3, #4]
}
 8019d08:	bf00      	nop
 8019d0a:	3714      	adds	r7, #20
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	bd90      	pop	{r4, r7, pc}
 8019d10:	08023af8 	.word	0x08023af8

08019d14 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 8019d14:	b580      	push	{r7, lr}
 8019d16:	b084      	sub	sp, #16
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	6078      	str	r0, [r7, #4]
 8019d1c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8019d1e:	683b      	ldr	r3, [r7, #0]
 8019d20:	685b      	ldr	r3, [r3, #4]
 8019d22:	60fb      	str	r3, [r7, #12]
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d018      	beq.n	8019d5c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	681a      	ldr	r2, [r3, #0]
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	33c4      	adds	r3, #196	; 0xc4
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	4610      	mov	r0, r2
 8019d3a:	4798      	blx	r3
 8019d3c:	4603      	mov	r3, r0
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d008      	beq.n	8019d54 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	3330      	adds	r3, #48	; 0x30
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	68fa      	ldr	r2, [r7, #12]
 8019d4c:	6812      	ldr	r2, [r2, #0]
 8019d4e:	4611      	mov	r1, r2
 8019d50:	6878      	ldr	r0, [r7, #4]
 8019d52:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8019d54:	68fb      	ldr	r3, [r7, #12]
 8019d56:	685b      	ldr	r3, [r3, #4]
 8019d58:	60fb      	str	r3, [r7, #12]
 8019d5a:	e7e3      	b.n	8019d24 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 8019d5c:	bf00      	nop
 8019d5e:	3710      	adds	r7, #16
 8019d60:	46bd      	mov	sp, r7
 8019d62:	bd80      	pop	{r7, pc}

08019d64 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 8019d64:	b580      	push	{r7, lr}
 8019d66:	b086      	sub	sp, #24
 8019d68:	af00      	add	r7, sp, #0
 8019d6a:	60f8      	str	r0, [r7, #12]
 8019d6c:	60b9      	str	r1, [r7, #8]
 8019d6e:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	685b      	ldr	r3, [r3, #4]
 8019d74:	617b      	str	r3, [r7, #20]
 8019d76:	697b      	ldr	r3, [r7, #20]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d019      	beq.n	8019db0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 8019d7c:	697b      	ldr	r3, [r7, #20]
 8019d7e:	681a      	ldr	r2, [r3, #0]
 8019d80:	697b      	ldr	r3, [r7, #20]
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	33b8      	adds	r3, #184	; 0xb8
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	68b9      	ldr	r1, [r7, #8]
 8019d8c:	4610      	mov	r0, r2
 8019d8e:	4798      	blx	r3
 8019d90:	4603      	mov	r3, r0
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d008      	beq.n	8019da8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	3330      	adds	r3, #48	; 0x30
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	697a      	ldr	r2, [r7, #20]
 8019da0:	6812      	ldr	r2, [r2, #0]
 8019da2:	4611      	mov	r1, r2
 8019da4:	68f8      	ldr	r0, [r7, #12]
 8019da6:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8019da8:	697b      	ldr	r3, [r7, #20]
 8019daa:	685b      	ldr	r3, [r3, #4]
 8019dac:	617b      	str	r3, [r7, #20]
 8019dae:	e7e2      	b.n	8019d76 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 8019db0:	bf00      	nop
 8019db2:	3718      	adds	r7, #24
 8019db4:	46bd      	mov	sp, r7
 8019db6:	bd80      	pop	{r7, pc}

08019db8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 8019db8:	b580      	push	{r7, lr}
 8019dba:	b084      	sub	sp, #16
 8019dbc:	af00      	add	r7, sp, #0
 8019dbe:	6078      	str	r0, [r7, #4]
 8019dc0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8019dc2:	683b      	ldr	r3, [r7, #0]
 8019dc4:	685b      	ldr	r3, [r3, #4]
 8019dc6:	60fb      	str	r3, [r7, #12]
 8019dc8:	68fb      	ldr	r3, [r7, #12]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d00c      	beq.n	8019de8 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	3330      	adds	r3, #48	; 0x30
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	68fa      	ldr	r2, [r7, #12]
 8019dd8:	6812      	ldr	r2, [r2, #0]
 8019dda:	4611      	mov	r1, r2
 8019ddc:	6878      	ldr	r0, [r7, #4]
 8019dde:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	685b      	ldr	r3, [r3, #4]
 8019de4:	60fb      	str	r3, [r7, #12]
 8019de6:	e7ef      	b.n	8019dc8 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 8019de8:	bf00      	nop
 8019dea:	3710      	adds	r7, #16
 8019dec:	46bd      	mov	sp, r7
 8019dee:	bd80      	pop	{r7, pc}

08019df0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 8019df0:	b580      	push	{r7, lr}
 8019df2:	b084      	sub	sp, #16
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	6078      	str	r0, [r7, #4]
 8019df8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	685b      	ldr	r3, [r3, #4]
 8019dfe:	60fb      	str	r3, [r7, #12]
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d016      	beq.n	8019e34 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	681a      	ldr	r2, [r3, #0]
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	33b8      	adds	r3, #184	; 0xb8
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	6839      	ldr	r1, [r7, #0]
 8019e16:	4610      	mov	r0, r2
 8019e18:	4798      	blx	r3
 8019e1a:	4603      	mov	r3, r0
 8019e1c:	f083 0301 	eor.w	r3, r3, #1
 8019e20:	b2db      	uxtb	r3, r3
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d002      	beq.n	8019e2c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	2200      	movs	r2, #0
 8019e2a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	685b      	ldr	r3, [r3, #4]
 8019e30:	60fb      	str	r3, [r7, #12]
 8019e32:	e7e5      	b.n	8019e00 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	3388      	adds	r3, #136	; 0x88
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	6878      	ldr	r0, [r7, #4]
 8019e3e:	4798      	blx	r3
}
 8019e40:	bf00      	nop
 8019e42:	3710      	adds	r7, #16
 8019e44:	46bd      	mov	sp, r7
 8019e46:	bd80      	pop	{r7, pc}

08019e48 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 8019e48:	b580      	push	{r7, lr}
 8019e4a:	b084      	sub	sp, #16
 8019e4c:	af00      	add	r7, sp, #0
 8019e4e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	685b      	ldr	r3, [r3, #4]
 8019e54:	60fb      	str	r3, [r7, #12]
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d015      	beq.n	8019e88 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	681a      	ldr	r2, [r3, #0]
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	33d4      	adds	r3, #212	; 0xd4
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	4610      	mov	r0, r2
 8019e6c:	4798      	blx	r3
 8019e6e:	4603      	mov	r3, r0
 8019e70:	f083 0301 	eor.w	r3, r3, #1
 8019e74:	b2db      	uxtb	r3, r3
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d002      	beq.n	8019e80 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	2200      	movs	r2, #0
 8019e7e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	685b      	ldr	r3, [r3, #4]
 8019e84:	60fb      	str	r3, [r7, #12]
 8019e86:	e7e6      	b.n	8019e56 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	3388      	adds	r3, #136	; 0x88
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	6878      	ldr	r0, [r7, #4]
 8019e92:	4798      	blx	r3
}
 8019e94:	bf00      	nop
 8019e96:	3710      	adds	r7, #16
 8019e98:	46bd      	mov	sp, r7
 8019e9a:	bd80      	pop	{r7, pc}

08019e9c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 8019e9c:	b580      	push	{r7, lr}
 8019e9e:	b084      	sub	sp, #16
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	685b      	ldr	r3, [r3, #4]
 8019ea8:	60fb      	str	r3, [r7, #12]
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d01b      	beq.n	8019ee8 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	681a      	ldr	r2, [r3, #0]
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	33c8      	adds	r3, #200	; 0xc8
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	4610      	mov	r0, r2
 8019ec0:	4798      	blx	r3
 8019ec2:	4603      	mov	r3, r0
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d00b      	beq.n	8019ee0 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	681a      	ldr	r2, [r3, #0]
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	33ec      	adds	r3, #236	; 0xec
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	4610      	mov	r0, r2
 8019ed8:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	2200      	movs	r2, #0
 8019ede:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	685b      	ldr	r3, [r3, #4]
 8019ee4:	60fb      	str	r3, [r7, #12]
 8019ee6:	e7e0      	b.n	8019eaa <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	3388      	adds	r3, #136	; 0x88
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	6878      	ldr	r0, [r7, #4]
 8019ef2:	4798      	blx	r3
}
 8019ef4:	bf00      	nop
 8019ef6:	3710      	adds	r7, #16
 8019ef8:	46bd      	mov	sp, r7
 8019efa:	bd80      	pop	{r7, pc}

08019efc <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 8019efc:	b580      	push	{r7, lr}
 8019efe:	b084      	sub	sp, #16
 8019f00:	af00      	add	r7, sp, #0
 8019f02:	6078      	str	r0, [r7, #4]
 8019f04:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	685b      	ldr	r3, [r3, #4]
 8019f0a:	60fb      	str	r3, [r7, #12]
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d016      	beq.n	8019f40 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	681a      	ldr	r2, [r3, #0]
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	33a8      	adds	r3, #168	; 0xa8
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	6839      	ldr	r1, [r7, #0]
 8019f22:	4610      	mov	r0, r2
 8019f24:	4798      	blx	r3
 8019f26:	4603      	mov	r3, r0
 8019f28:	f083 0301 	eor.w	r3, r3, #1
 8019f2c:	b2db      	uxtb	r3, r3
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d002      	beq.n	8019f38 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	2200      	movs	r2, #0
 8019f36:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	685b      	ldr	r3, [r3, #4]
 8019f3c:	60fb      	str	r3, [r7, #12]
 8019f3e:	e7e5      	b.n	8019f0c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	3388      	adds	r3, #136	; 0x88
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	6878      	ldr	r0, [r7, #4]
 8019f4a:	4798      	blx	r3
}
 8019f4c:	bf00      	nop
 8019f4e:	3710      	adds	r7, #16
 8019f50:	46bd      	mov	sp, r7
 8019f52:	bd80      	pop	{r7, pc}

08019f54 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 8019f54:	b580      	push	{r7, lr}
 8019f56:	b084      	sub	sp, #16
 8019f58:	af00      	add	r7, sp, #0
 8019f5a:	6078      	str	r0, [r7, #4]
 8019f5c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	685b      	ldr	r3, [r3, #4]
 8019f62:	60fb      	str	r3, [r7, #12]
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d016      	beq.n	8019f98 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	681a      	ldr	r2, [r3, #0]
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	33b0      	adds	r3, #176	; 0xb0
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	6839      	ldr	r1, [r7, #0]
 8019f7a:	4610      	mov	r0, r2
 8019f7c:	4798      	blx	r3
 8019f7e:	4603      	mov	r3, r0
 8019f80:	f083 0301 	eor.w	r3, r3, #1
 8019f84:	b2db      	uxtb	r3, r3
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d002      	beq.n	8019f90 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	2200      	movs	r2, #0
 8019f8e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	685b      	ldr	r3, [r3, #4]
 8019f94:	60fb      	str	r3, [r7, #12]
 8019f96:	e7e5      	b.n	8019f64 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	3388      	adds	r3, #136	; 0x88
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	6878      	ldr	r0, [r7, #4]
 8019fa2:	4798      	blx	r3
}
 8019fa4:	bf00      	nop
 8019fa6:	3710      	adds	r7, #16
 8019fa8:	46bd      	mov	sp, r7
 8019faa:	bd80      	pop	{r7, pc}

08019fac <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 8019fac:	b580      	push	{r7, lr}
 8019fae:	b084      	sub	sp, #16
 8019fb0:	af00      	add	r7, sp, #0
 8019fb2:	6078      	str	r0, [r7, #4]
 8019fb4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	685b      	ldr	r3, [r3, #4]
 8019fba:	60fb      	str	r3, [r7, #12]
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d016      	beq.n	8019ff0 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	681a      	ldr	r2, [r3, #0]
 8019fc6:	68fb      	ldr	r3, [r7, #12]
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	33ac      	adds	r3, #172	; 0xac
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	6839      	ldr	r1, [r7, #0]
 8019fd2:	4610      	mov	r0, r2
 8019fd4:	4798      	blx	r3
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	f083 0301 	eor.w	r3, r3, #1
 8019fdc:	b2db      	uxtb	r3, r3
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d002      	beq.n	8019fe8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 8019fe2:	68fb      	ldr	r3, [r7, #12]
 8019fe4:	2200      	movs	r2, #0
 8019fe6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019fe8:	68fb      	ldr	r3, [r7, #12]
 8019fea:	685b      	ldr	r3, [r3, #4]
 8019fec:	60fb      	str	r3, [r7, #12]
 8019fee:	e7e5      	b.n	8019fbc <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	3388      	adds	r3, #136	; 0x88
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	6878      	ldr	r0, [r7, #4]
 8019ffa:	4798      	blx	r3
}
 8019ffc:	bf00      	nop
 8019ffe:	3710      	adds	r7, #16
 801a000:	46bd      	mov	sp, r7
 801a002:	bd80      	pop	{r7, pc}

0801a004 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801a004:	b580      	push	{r7, lr}
 801a006:	b084      	sub	sp, #16
 801a008:	af00      	add	r7, sp, #0
 801a00a:	6078      	str	r0, [r7, #4]
 801a00c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	685b      	ldr	r3, [r3, #4]
 801a012:	60fb      	str	r3, [r7, #12]
 801a014:	68fb      	ldr	r3, [r7, #12]
 801a016:	2b00      	cmp	r3, #0
 801a018:	d016      	beq.n	801a048 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801a01a:	68fb      	ldr	r3, [r7, #12]
 801a01c:	681a      	ldr	r2, [r3, #0]
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	33b4      	adds	r3, #180	; 0xb4
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	6839      	ldr	r1, [r7, #0]
 801a02a:	4610      	mov	r0, r2
 801a02c:	4798      	blx	r3
 801a02e:	4603      	mov	r3, r0
 801a030:	f083 0301 	eor.w	r3, r3, #1
 801a034:	b2db      	uxtb	r3, r3
 801a036:	2b00      	cmp	r3, #0
 801a038:	d002      	beq.n	801a040 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	2200      	movs	r2, #0
 801a03e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	685b      	ldr	r3, [r3, #4]
 801a044:	60fb      	str	r3, [r7, #12]
 801a046:	e7e5      	b.n	801a014 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	3388      	adds	r3, #136	; 0x88
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	6878      	ldr	r0, [r7, #4]
 801a052:	4798      	blx	r3
}
 801a054:	bf00      	nop
 801a056:	3710      	adds	r7, #16
 801a058:	46bd      	mov	sp, r7
 801a05a:	bd80      	pop	{r7, pc}

0801a05c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801a05c:	b580      	push	{r7, lr}
 801a05e:	b084      	sub	sp, #16
 801a060:	af00      	add	r7, sp, #0
 801a062:	6078      	str	r0, [r7, #4]
 801a064:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	685b      	ldr	r3, [r3, #4]
 801a06a:	60fb      	str	r3, [r7, #12]
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d016      	beq.n	801a0a0 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801a072:	68fb      	ldr	r3, [r7, #12]
 801a074:	681a      	ldr	r2, [r3, #0]
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	33bc      	adds	r3, #188	; 0xbc
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	6839      	ldr	r1, [r7, #0]
 801a082:	4610      	mov	r0, r2
 801a084:	4798      	blx	r3
 801a086:	4603      	mov	r3, r0
 801a088:	f083 0301 	eor.w	r3, r3, #1
 801a08c:	b2db      	uxtb	r3, r3
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d002      	beq.n	801a098 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801a092:	68fb      	ldr	r3, [r7, #12]
 801a094:	2200      	movs	r2, #0
 801a096:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	685b      	ldr	r3, [r3, #4]
 801a09c:	60fb      	str	r3, [r7, #12]
 801a09e:	e7e5      	b.n	801a06c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	681b      	ldr	r3, [r3, #0]
 801a0a4:	3388      	adds	r3, #136	; 0x88
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	6878      	ldr	r0, [r7, #4]
 801a0aa:	4798      	blx	r3
}
 801a0ac:	bf00      	nop
 801a0ae:	3710      	adds	r7, #16
 801a0b0:	46bd      	mov	sp, r7
 801a0b2:	bd80      	pop	{r7, pc}

0801a0b4 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801a0b4:	b580      	push	{r7, lr}
 801a0b6:	b084      	sub	sp, #16
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	685b      	ldr	r3, [r3, #4]
 801a0c0:	60fb      	str	r3, [r7, #12]
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d01d      	beq.n	801a104 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	681a      	ldr	r2, [r3, #0]
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	681b      	ldr	r3, [r3, #0]
 801a0d2:	33c8      	adds	r3, #200	; 0xc8
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	4610      	mov	r0, r2
 801a0d8:	4798      	blx	r3
 801a0da:	4603      	mov	r3, r0
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d00d      	beq.n	801a0fc <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	2200      	movs	r2, #0
 801a0ea:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	3388      	adds	r3, #136	; 0x88
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	6878      	ldr	r0, [r7, #4]
 801a0f6:	4798      	blx	r3
            return matchingCall;
 801a0f8:	68bb      	ldr	r3, [r7, #8]
 801a0fa:	e004      	b.n	801a106 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	685b      	ldr	r3, [r3, #4]
 801a100:	60fb      	str	r3, [r7, #12]
 801a102:	e7de      	b.n	801a0c2 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801a104:	2300      	movs	r3, #0
}
 801a106:	4618      	mov	r0, r3
 801a108:	3710      	adds	r7, #16
 801a10a:	46bd      	mov	sp, r7
 801a10c:	bd80      	pop	{r7, pc}

0801a10e <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801a10e:	b580      	push	{r7, lr}
 801a110:	b084      	sub	sp, #16
 801a112:	af00      	add	r7, sp, #0
 801a114:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	685b      	ldr	r3, [r3, #4]
 801a11a:	60fb      	str	r3, [r7, #12]
 801a11c:	68fb      	ldr	r3, [r7, #12]
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d012      	beq.n	801a148 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	681a      	ldr	r2, [r3, #0]
 801a126:	68fb      	ldr	r3, [r7, #12]
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	33cc      	adds	r3, #204	; 0xcc
 801a12e:	681b      	ldr	r3, [r3, #0]
 801a130:	4610      	mov	r0, r2
 801a132:	4798      	blx	r3
 801a134:	4603      	mov	r3, r0
 801a136:	2b00      	cmp	r3, #0
 801a138:	d002      	beq.n	801a140 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	e004      	b.n	801a14a <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	685b      	ldr	r3, [r3, #4]
 801a144:	60fb      	str	r3, [r7, #12]
 801a146:	e7e9      	b.n	801a11c <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801a148:	2300      	movs	r3, #0
}
 801a14a:	4618      	mov	r0, r3
 801a14c:	3710      	adds	r7, #16
 801a14e:	46bd      	mov	sp, r7
 801a150:	bd80      	pop	{r7, pc}

0801a152 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801a152:	b580      	push	{r7, lr}
 801a154:	b084      	sub	sp, #16
 801a156:	af00      	add	r7, sp, #0
 801a158:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	685b      	ldr	r3, [r3, #4]
 801a15e:	60fb      	str	r3, [r7, #12]
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	2b00      	cmp	r3, #0
 801a164:	d01d      	beq.n	801a1a2 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	681a      	ldr	r2, [r3, #0]
 801a16a:	68fb      	ldr	r3, [r7, #12]
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	33cc      	adds	r3, #204	; 0xcc
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	4610      	mov	r0, r2
 801a176:	4798      	blx	r3
 801a178:	4603      	mov	r3, r0
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d00d      	beq.n	801a19a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	2200      	movs	r2, #0
 801a188:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	3388      	adds	r3, #136	; 0x88
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	6878      	ldr	r0, [r7, #4]
 801a194:	4798      	blx	r3
            return matchingCall;
 801a196:	68bb      	ldr	r3, [r7, #8]
 801a198:	e004      	b.n	801a1a4 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	685b      	ldr	r3, [r3, #4]
 801a19e:	60fb      	str	r3, [r7, #12]
 801a1a0:	e7de      	b.n	801a160 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801a1a2:	2300      	movs	r3, #0
}
 801a1a4:	4618      	mov	r0, r3
 801a1a6:	3710      	adds	r7, #16
 801a1a8:	46bd      	mov	sp, r7
 801a1aa:	bd80      	pop	{r7, pc}

0801a1ac <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801a1ac:	b580      	push	{r7, lr}
 801a1ae:	b086      	sub	sp, #24
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	685b      	ldr	r3, [r3, #4]
 801a1b8:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801a1be:	2300      	movs	r3, #0
 801a1c0:	60fb      	str	r3, [r7, #12]

    while (current) {
 801a1c2:	697b      	ldr	r3, [r7, #20]
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d024      	beq.n	801a212 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801a1c8:	697b      	ldr	r3, [r7, #20]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d11a      	bne.n	801a206 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801a1d0:	697b      	ldr	r3, [r7, #20]
 801a1d2:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801a1d4:	693b      	ldr	r3, [r7, #16]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d106      	bne.n	801a1e8 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801a1da:	697b      	ldr	r3, [r7, #20]
 801a1dc:	685b      	ldr	r3, [r3, #4]
 801a1de:	617b      	str	r3, [r7, #20]
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	697a      	ldr	r2, [r7, #20]
 801a1e4:	605a      	str	r2, [r3, #4]
 801a1e6:	e006      	b.n	801a1f6 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801a1e8:	697b      	ldr	r3, [r7, #20]
 801a1ea:	685a      	ldr	r2, [r3, #4]
 801a1ec:	693b      	ldr	r3, [r7, #16]
 801a1ee:	605a      	str	r2, [r3, #4]
 801a1f0:	693b      	ldr	r3, [r7, #16]
 801a1f2:	685b      	ldr	r3, [r3, #4]
 801a1f4:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801a1f6:	68fb      	ldr	r3, [r7, #12]
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d0e2      	beq.n	801a1c2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801a1fc:	2108      	movs	r1, #8
 801a1fe:	4618      	mov	r0, r3
 801a200:	f7ee f82e 	bl	8008260 <_ZdlPvj>
 801a204:	e7dd      	b.n	801a1c2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801a206:	697b      	ldr	r3, [r7, #20]
 801a208:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801a20a:	697b      	ldr	r3, [r7, #20]
 801a20c:	685b      	ldr	r3, [r3, #4]
 801a20e:	617b      	str	r3, [r7, #20]
    while (current) {
 801a210:	e7d7      	b.n	801a1c2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801a212:	bf00      	nop
 801a214:	3718      	adds	r7, #24
 801a216:	46bd      	mov	sp, r7
 801a218:	bd80      	pop	{r7, pc}

0801a21a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801a21a:	b580      	push	{r7, lr}
 801a21c:	b084      	sub	sp, #16
 801a21e:	af00      	add	r7, sp, #0
 801a220:	6078      	str	r0, [r7, #4]
    while (head_) {
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	685b      	ldr	r3, [r3, #4]
 801a226:	2b00      	cmp	r3, #0
 801a228:	d019      	beq.n	801a25e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	685b      	ldr	r3, [r3, #4]
 801a22e:	685b      	ldr	r3, [r3, #4]
 801a230:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	685b      	ldr	r3, [r3, #4]
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d004      	beq.n	801a246 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801a23c:	681a      	ldr	r2, [r3, #0]
 801a23e:	3204      	adds	r2, #4
 801a240:	6812      	ldr	r2, [r2, #0]
 801a242:	4618      	mov	r0, r3
 801a244:	4790      	blx	r2
        delete head_;
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	685b      	ldr	r3, [r3, #4]
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d003      	beq.n	801a256 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801a24e:	2108      	movs	r1, #8
 801a250:	4618      	mov	r0, r3
 801a252:	f7ee f805 	bl	8008260 <_ZdlPvj>
        head_ = next;
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	68fa      	ldr	r2, [r7, #12]
 801a25a:	605a      	str	r2, [r3, #4]
    while (head_) {
 801a25c:	e7e1      	b.n	801a222 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801a25e:	bf00      	nop
 801a260:	3710      	adds	r7, #16
 801a262:	46bd      	mov	sp, r7
 801a264:	bd80      	pop	{r7, pc}

0801a266 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801a266:	b580      	push	{r7, lr}
 801a268:	b084      	sub	sp, #16
 801a26a:	af00      	add	r7, sp, #0
 801a26c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	685b      	ldr	r3, [r3, #4]
 801a272:	60fb      	str	r3, [r7, #12]
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	2b00      	cmp	r3, #0
 801a278:	d00c      	beq.n	801a294 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	681a      	ldr	r2, [r3, #0]
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	33ec      	adds	r3, #236	; 0xec
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	4610      	mov	r0, r2
 801a28a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	685b      	ldr	r3, [r3, #4]
 801a290:	60fb      	str	r3, [r7, #12]
 801a292:	e7ef      	b.n	801a274 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801a294:	bf00      	nop
 801a296:	3710      	adds	r7, #16
 801a298:	46bd      	mov	sp, r7
 801a29a:	bd80      	pop	{r7, pc}

0801a29c <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801a29c:	b580      	push	{r7, lr}
 801a29e:	b084      	sub	sp, #16
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	685b      	ldr	r3, [r3, #4]
 801a2a8:	60fb      	str	r3, [r7, #12]
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d00c      	beq.n	801a2ca <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	681a      	ldr	r2, [r3, #0]
 801a2b4:	68fb      	ldr	r3, [r7, #12]
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	33e8      	adds	r3, #232	; 0xe8
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	4610      	mov	r0, r2
 801a2c0:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	685b      	ldr	r3, [r3, #4]
 801a2c6:	60fb      	str	r3, [r7, #12]
 801a2c8:	e7ef      	b.n	801a2aa <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801a2ca:	bf00      	nop
 801a2cc:	3710      	adds	r7, #16
 801a2ce:	46bd      	mov	sp, r7
 801a2d0:	bd80      	pop	{r7, pc}

0801a2d2 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801a2d2:	b580      	push	{r7, lr}
 801a2d4:	b084      	sub	sp, #16
 801a2d6:	af00      	add	r7, sp, #0
 801a2d8:	6078      	str	r0, [r7, #4]
 801a2da:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	685b      	ldr	r3, [r3, #4]
 801a2e0:	60fb      	str	r3, [r7, #12]
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d00d      	beq.n	801a304 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801a2e8:	68fb      	ldr	r3, [r7, #12]
 801a2ea:	681a      	ldr	r2, [r3, #0]
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	33dc      	adds	r3, #220	; 0xdc
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	6839      	ldr	r1, [r7, #0]
 801a2f8:	4610      	mov	r0, r2
 801a2fa:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a2fc:	68fb      	ldr	r3, [r7, #12]
 801a2fe:	685b      	ldr	r3, [r3, #4]
 801a300:	60fb      	str	r3, [r7, #12]
 801a302:	e7ee      	b.n	801a2e2 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801a304:	bf00      	nop
 801a306:	3710      	adds	r7, #16
 801a308:	46bd      	mov	sp, r7
 801a30a:	bd80      	pop	{r7, pc}

0801a30c <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801a30c:	b580      	push	{r7, lr}
 801a30e:	b084      	sub	sp, #16
 801a310:	af00      	add	r7, sp, #0
 801a312:	6078      	str	r0, [r7, #4]
 801a314:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	685b      	ldr	r3, [r3, #4]
 801a31a:	60fb      	str	r3, [r7, #12]
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d00d      	beq.n	801a33e <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	681a      	ldr	r2, [r3, #0]
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	33e0      	adds	r3, #224	; 0xe0
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	6839      	ldr	r1, [r7, #0]
 801a332:	4610      	mov	r0, r2
 801a334:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a336:	68fb      	ldr	r3, [r7, #12]
 801a338:	685b      	ldr	r3, [r3, #4]
 801a33a:	60fb      	str	r3, [r7, #12]
 801a33c:	e7ee      	b.n	801a31c <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801a33e:	bf00      	nop
 801a340:	3710      	adds	r7, #16
 801a342:	46bd      	mov	sp, r7
 801a344:	bd80      	pop	{r7, pc}
	...

0801a348 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801a348:	b590      	push	{r4, r7, lr}
 801a34a:	b087      	sub	sp, #28
 801a34c:	af00      	add	r7, sp, #0
 801a34e:	60f8      	str	r0, [r7, #12]
 801a350:	60b9      	str	r1, [r7, #8]
 801a352:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801a354:	68b9      	ldr	r1, [r7, #8]
 801a356:	68f8      	ldr	r0, [r7, #12]
 801a358:	f7f0 fb85 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801a35c:	f107 0310 	add.w	r3, r7, #16
 801a360:	490f      	ldr	r1, [pc, #60]	; (801a3a0 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801a362:	4618      	mov	r0, r3
 801a364:	f7f0 fb2b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801a368:	f107 0310 	add.w	r3, r7, #16
 801a36c:	4619      	mov	r1, r3
 801a36e:	68f8      	ldr	r0, [r7, #12]
 801a370:	f7f0 fee9 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801a374:	4603      	mov	r3, r0
 801a376:	461c      	mov	r4, r3
 801a378:	f107 0310 	add.w	r3, r7, #16
 801a37c:	4618      	mov	r0, r3
 801a37e:	f7f0 fed6 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801a382:	2c00      	cmp	r4, #0
 801a384:	d007      	beq.n	801a396 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801a386:	6879      	ldr	r1, [r7, #4]
 801a388:	68f8      	ldr	r0, [r7, #12]
 801a38a:	f7f0 ff4d 	bl	800b228 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801a38e:	4905      	ldr	r1, [pc, #20]	; (801a3a4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801a390:	68f8      	ldr	r0, [r7, #12]
 801a392:	f7f0 ff5b 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801a396:	bf00      	nop
}
 801a398:	68f8      	ldr	r0, [r7, #12]
 801a39a:	371c      	adds	r7, #28
 801a39c:	46bd      	mov	sp, r7
 801a39e:	bd90      	pop	{r4, r7, pc}
 801a3a0:	08023b1c 	.word	0x08023b1c
 801a3a4:	08023b20 	.word	0x08023b20

0801a3a8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801a3a8:	b590      	push	{r4, r7, lr}
 801a3aa:	b087      	sub	sp, #28
 801a3ac:	af00      	add	r7, sp, #0
 801a3ae:	60f8      	str	r0, [r7, #12]
 801a3b0:	60b9      	str	r1, [r7, #8]
 801a3b2:	607a      	str	r2, [r7, #4]
 801a3b4:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801a3b6:	68b9      	ldr	r1, [r7, #8]
 801a3b8:	68f8      	ldr	r0, [r7, #12]
 801a3ba:	f7f0 fb54 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801a3be:	f107 0310 	add.w	r3, r7, #16
 801a3c2:	4912      	ldr	r1, [pc, #72]	; (801a40c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801a3c4:	4618      	mov	r0, r3
 801a3c6:	f7f0 fafa 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801a3ca:	f107 0310 	add.w	r3, r7, #16
 801a3ce:	4619      	mov	r1, r3
 801a3d0:	68f8      	ldr	r0, [r7, #12]
 801a3d2:	f7f0 fefd 	bl	800b1d0 <_ZneRK12SimpleStringS1_>
 801a3d6:	4603      	mov	r3, r0
 801a3d8:	461c      	mov	r4, r3
 801a3da:	f107 0310 	add.w	r3, r7, #16
 801a3de:	4618      	mov	r0, r3
 801a3e0:	f7f0 fea5 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801a3e4:	2c00      	cmp	r4, #0
 801a3e6:	d003      	beq.n	801a3f0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801a3e8:	4909      	ldr	r1, [pc, #36]	; (801a410 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801a3ea:	68f8      	ldr	r0, [r7, #12]
 801a3ec:	f7f0 ff2e 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801a3f0:	6879      	ldr	r1, [r7, #4]
 801a3f2:	68f8      	ldr	r0, [r7, #12]
 801a3f4:	f7f0 ff18 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801a3f8:	6839      	ldr	r1, [r7, #0]
 801a3fa:	68f8      	ldr	r0, [r7, #12]
 801a3fc:	f7f0 ff14 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    return str;
 801a400:	bf00      	nop
}
 801a402:	68f8      	ldr	r0, [r7, #12]
 801a404:	371c      	adds	r7, #28
 801a406:	46bd      	mov	sp, r7
 801a408:	bd90      	pop	{r4, r7, pc}
 801a40a:	bf00      	nop
 801a40c:	08023b1c 	.word	0x08023b1c
 801a410:	08023b28 	.word	0x08023b28

0801a414 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801a414:	b580      	push	{r7, lr}
 801a416:	b08c      	sub	sp, #48	; 0x30
 801a418:	af00      	add	r7, sp, #0
 801a41a:	60f8      	str	r0, [r7, #12]
 801a41c:	60b9      	str	r1, [r7, #8]
 801a41e:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801a420:	f107 0314 	add.w	r3, r7, #20
 801a424:	4929      	ldr	r1, [pc, #164]	; (801a4cc <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801a426:	4618      	mov	r0, r3
 801a428:	f7f0 fac9 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a42c:	68bb      	ldr	r3, [r7, #8]
 801a42e:	685b      	ldr	r3, [r3, #4]
 801a430:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a434:	2b00      	cmp	r3, #0
 801a436:	d038      	beq.n	801a4aa <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801a438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a43a:	681a      	ldr	r2, [r3, #0]
 801a43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	33c0      	adds	r3, #192	; 0xc0
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	4610      	mov	r0, r2
 801a448:	4798      	blx	r3
 801a44a:	4603      	mov	r3, r0
 801a44c:	f083 0301 	eor.w	r3, r3, #1
 801a450:	b2db      	uxtb	r3, r3
 801a452:	2b00      	cmp	r3, #0
 801a454:	d025      	beq.n	801a4a2 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a458:	6819      	ldr	r1, [r3, #0]
 801a45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	33f0      	adds	r3, #240	; 0xf0
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801a468:	4610      	mov	r0, r2
 801a46a:	4798      	blx	r3
 801a46c:	f107 001c 	add.w	r0, r7, #28
 801a470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a474:	f107 0114 	add.w	r1, r7, #20
 801a478:	687a      	ldr	r2, [r7, #4]
 801a47a:	f7ff ff95 	bl	801a3a8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801a47e:	f107 021c 	add.w	r2, r7, #28
 801a482:	f107 0314 	add.w	r3, r7, #20
 801a486:	4611      	mov	r1, r2
 801a488:	4618      	mov	r0, r3
 801a48a:	f7f0 fb04 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801a48e:	f107 031c 	add.w	r3, r7, #28
 801a492:	4618      	mov	r0, r3
 801a494:	f7f0 fe4b 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801a498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a49c:	4618      	mov	r0, r3
 801a49e:	f7f0 fe46 	bl	800b12e <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4a4:	685b      	ldr	r3, [r3, #4]
 801a4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a4a8:	e7c3      	b.n	801a432 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a4aa:	68fb      	ldr	r3, [r7, #12]
 801a4ac:	f107 0114 	add.w	r1, r7, #20
 801a4b0:	687a      	ldr	r2, [r7, #4]
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	f7ff ff48 	bl	801a348 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801a4b8:	f107 0314 	add.w	r3, r7, #20
 801a4bc:	4618      	mov	r0, r3
 801a4be:	f7f0 fe36 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a4c2:	bf00      	nop
}
 801a4c4:	68f8      	ldr	r0, [r7, #12]
 801a4c6:	3730      	adds	r7, #48	; 0x30
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	bd80      	pop	{r7, pc}
 801a4cc:	08023b1c 	.word	0x08023b1c

0801a4d0 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801a4d0:	b580      	push	{r7, lr}
 801a4d2:	b08c      	sub	sp, #48	; 0x30
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	60f8      	str	r0, [r7, #12]
 801a4d8:	60b9      	str	r1, [r7, #8]
 801a4da:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801a4dc:	f107 0314 	add.w	r3, r7, #20
 801a4e0:	4928      	ldr	r1, [pc, #160]	; (801a584 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801a4e2:	4618      	mov	r0, r3
 801a4e4:	f7f0 fa6b 	bl	800a9be <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a4e8:	68bb      	ldr	r3, [r7, #8]
 801a4ea:	685b      	ldr	r3, [r3, #4]
 801a4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d035      	beq.n	801a560 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801a4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4f6:	681a      	ldr	r2, [r3, #0]
 801a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	33c0      	adds	r3, #192	; 0xc0
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	4610      	mov	r0, r2
 801a504:	4798      	blx	r3
 801a506:	4603      	mov	r3, r0
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d025      	beq.n	801a558 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801a50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a50e:	6819      	ldr	r1, [r3, #0]
 801a510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	33f0      	adds	r3, #240	; 0xf0
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801a51e:	4610      	mov	r0, r2
 801a520:	4798      	blx	r3
 801a522:	f107 001c 	add.w	r0, r7, #28
 801a526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a52a:	f107 0114 	add.w	r1, r7, #20
 801a52e:	687a      	ldr	r2, [r7, #4]
 801a530:	f7ff ff3a 	bl	801a3a8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801a534:	f107 021c 	add.w	r2, r7, #28
 801a538:	f107 0314 	add.w	r3, r7, #20
 801a53c:	4611      	mov	r1, r2
 801a53e:	4618      	mov	r0, r3
 801a540:	f7f0 faa9 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801a544:	f107 031c 	add.w	r3, r7, #28
 801a548:	4618      	mov	r0, r3
 801a54a:	f7f0 fdf0 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801a54e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a552:	4618      	mov	r0, r3
 801a554:	f7f0 fdeb 	bl	800b12e <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a55a:	685b      	ldr	r3, [r3, #4]
 801a55c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a55e:	e7c6      	b.n	801a4ee <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a560:	68fb      	ldr	r3, [r7, #12]
 801a562:	f107 0114 	add.w	r1, r7, #20
 801a566:	687a      	ldr	r2, [r7, #4]
 801a568:	4618      	mov	r0, r3
 801a56a:	f7ff feed 	bl	801a348 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801a56e:	f107 0314 	add.w	r3, r7, #20
 801a572:	4618      	mov	r0, r3
 801a574:	f7f0 fddb 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a578:	bf00      	nop
}
 801a57a:	68f8      	ldr	r0, [r7, #12]
 801a57c:	3730      	adds	r7, #48	; 0x30
 801a57e:	46bd      	mov	sp, r7
 801a580:	bd80      	pop	{r7, pc}
 801a582:	bf00      	nop
 801a584:	08023b1c 	.word	0x08023b1c

0801a588 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801a588:	b580      	push	{r7, lr}
 801a58a:	b08e      	sub	sp, #56	; 0x38
 801a58c:	af00      	add	r7, sp, #0
 801a58e:	6078      	str	r0, [r7, #4]
 801a590:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801a592:	f107 030c 	add.w	r3, r7, #12
 801a596:	4936      	ldr	r1, [pc, #216]	; (801a670 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801a598:	4618      	mov	r0, r3
 801a59a:	f7f0 fa10 	bl	800a9be <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a59e:	683b      	ldr	r3, [r7, #0]
 801a5a0:	685b      	ldr	r3, [r3, #4]
 801a5a2:	637b      	str	r3, [r7, #52]	; 0x34
 801a5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d044      	beq.n	801a634 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801a5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5ac:	681a      	ldr	r2, [r3, #0]
 801a5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	33cc      	adds	r3, #204	; 0xcc
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	4610      	mov	r0, r2
 801a5ba:	4798      	blx	r3
 801a5bc:	4603      	mov	r3, r0
 801a5be:	f083 0301 	eor.w	r3, r3, #1
 801a5c2:	b2db      	uxtb	r3, r3
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d031      	beq.n	801a62c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801a5c8:	f107 031c 	add.w	r3, r7, #28
 801a5cc:	4928      	ldr	r1, [pc, #160]	; (801a670 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	f7f0 f9f5 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801a5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5d6:	6819      	ldr	r1, [r3, #0]
 801a5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	33f4      	adds	r3, #244	; 0xf4
 801a5e0:	681b      	ldr	r3, [r3, #0]
 801a5e2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801a5e6:	4610      	mov	r0, r2
 801a5e8:	4798      	blx	r3
 801a5ea:	f107 0014 	add.w	r0, r7, #20
 801a5ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a5f2:	f107 021c 	add.w	r2, r7, #28
 801a5f6:	f107 010c 	add.w	r1, r7, #12
 801a5fa:	f7ff fed5 	bl	801a3a8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801a5fe:	f107 0214 	add.w	r2, r7, #20
 801a602:	f107 030c 	add.w	r3, r7, #12
 801a606:	4611      	mov	r1, r2
 801a608:	4618      	mov	r0, r3
 801a60a:	f7f0 fa44 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801a60e:	f107 0314 	add.w	r3, r7, #20
 801a612:	4618      	mov	r0, r3
 801a614:	f7f0 fd8b 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801a618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a61c:	4618      	mov	r0, r3
 801a61e:	f7f0 fd86 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801a622:	f107 031c 	add.w	r3, r7, #28
 801a626:	4618      	mov	r0, r3
 801a628:	f7f0 fd81 	bl	800b12e <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a62e:	685b      	ldr	r3, [r3, #4]
 801a630:	637b      	str	r3, [r7, #52]	; 0x34
 801a632:	e7b7      	b.n	801a5a4 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801a634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a638:	490d      	ldr	r1, [pc, #52]	; (801a670 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801a63a:	4618      	mov	r0, r3
 801a63c:	f7f0 f9bf 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801a646:	f107 010c 	add.w	r1, r7, #12
 801a64a:	4618      	mov	r0, r3
 801a64c:	f7ff fe7c 	bl	801a348 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801a650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a654:	4618      	mov	r0, r3
 801a656:	f7f0 fd6a 	bl	800b12e <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801a65a:	f107 030c 	add.w	r3, r7, #12
 801a65e:	4618      	mov	r0, r3
 801a660:	f7f0 fd65 	bl	800b12e <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801a664:	bf00      	nop
}
 801a666:	6878      	ldr	r0, [r7, #4]
 801a668:	3738      	adds	r7, #56	; 0x38
 801a66a:	46bd      	mov	sp, r7
 801a66c:	bd80      	pop	{r7, pc}
 801a66e:	bf00      	nop
 801a670:	08023b1c 	.word	0x08023b1c

0801a674 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801a674:	b580      	push	{r7, lr}
 801a676:	b084      	sub	sp, #16
 801a678:	af00      	add	r7, sp, #0
 801a67a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	685b      	ldr	r3, [r3, #4]
 801a680:	60fb      	str	r3, [r7, #12]
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	2b00      	cmp	r3, #0
 801a686:	d014      	beq.n	801a6b2 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	681a      	ldr	r2, [r3, #0]
 801a68c:	68fb      	ldr	r3, [r7, #12]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	33d0      	adds	r3, #208	; 0xd0
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	4610      	mov	r0, r2
 801a698:	4798      	blx	r3
 801a69a:	4603      	mov	r3, r0
 801a69c:	f083 0301 	eor.w	r3, r3, #1
 801a6a0:	b2db      	uxtb	r3, r3
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d001      	beq.n	801a6aa <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801a6a6:	2301      	movs	r3, #1
 801a6a8:	e004      	b.n	801a6b4 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	685b      	ldr	r3, [r3, #4]
 801a6ae:	60fb      	str	r3, [r7, #12]
 801a6b0:	e7e7      	b.n	801a682 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801a6b2:	2300      	movs	r3, #0
}
 801a6b4:	4618      	mov	r0, r3
 801a6b6:	3710      	adds	r7, #16
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	bd80      	pop	{r7, pc}

0801a6bc <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801a6bc:	b480      	push	{r7}
 801a6be:	b083      	sub	sp, #12
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	6078      	str	r0, [r7, #4]
 801a6c4:	460b      	mov	r3, r1
 801a6c6:	70fb      	strb	r3, [r7, #3]
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	78fa      	ldrb	r2, [r7, #3]
 801a6cc:	711a      	strb	r2, [r3, #4]
 801a6ce:	bf00      	nop
 801a6d0:	370c      	adds	r7, #12
 801a6d2:	46bd      	mov	sp, r7
 801a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6d8:	4770      	bx	lr
	...

0801a6dc <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801a6dc:	b580      	push	{r7, lr}
 801a6de:	b082      	sub	sp, #8
 801a6e0:	af00      	add	r7, sp, #0
 801a6e2:	6078      	str	r0, [r7, #4]
 801a6e4:	460b      	mov	r3, r1
 801a6e6:	70fb      	strb	r3, [r7, #3]
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	4618      	mov	r0, r3
 801a6ec:	f7ed ff6a 	bl	80085c4 <_ZN14TestTerminatorC1Ev>
 801a6f0:	4a05      	ldr	r2, [pc, #20]	; (801a708 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	601a      	str	r2, [r3, #0]
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	78fa      	ldrb	r2, [r7, #3]
 801a6fa:	711a      	strb	r2, [r3, #4]
    {
    }
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	4618      	mov	r0, r3
 801a700:	3708      	adds	r7, #8
 801a702:	46bd      	mov	sp, r7
 801a704:	bd80      	pop	{r7, pc}
 801a706:	bf00      	nop
 801a708:	080263c8 	.word	0x080263c8

0801a70c <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801a70c:	b580      	push	{r7, lr}
 801a70e:	b082      	sub	sp, #8
 801a710:	af00      	add	r7, sp, #0
 801a712:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	791b      	ldrb	r3, [r3, #4]
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d001      	beq.n	801a720 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801a71c:	f7f6 f9fe 	bl	8010b1c <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801a720:	f7f7 fd40 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a724:	4603      	mov	r3, r0
 801a726:	681a      	ldr	r2, [r3, #0]
 801a728:	6812      	ldr	r2, [r2, #0]
 801a72a:	4618      	mov	r0, r3
 801a72c:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801a72e:	bf00      	nop
 801a730:	3708      	adds	r7, #8
 801a732:	46bd      	mov	sp, r7
 801a734:	bd80      	pop	{r7, pc}
	...

0801a738 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801a738:	b580      	push	{r7, lr}
 801a73a:	b082      	sub	sp, #8
 801a73c:	af00      	add	r7, sp, #0
 801a73e:	6078      	str	r0, [r7, #4]
    {
 801a740:	4a05      	ldr	r2, [pc, #20]	; (801a758 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	601a      	str	r2, [r3, #0]
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	4618      	mov	r0, r3
 801a74a:	f7f7 fdbb 	bl	80122c4 <_ZN14TestTerminatorD1Ev>
    }
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	4618      	mov	r0, r3
 801a752:	3708      	adds	r7, #8
 801a754:	46bd      	mov	sp, r7
 801a756:	bd80      	pop	{r7, pc}
 801a758:	080263c8 	.word	0x080263c8

0801a75c <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801a75c:	b580      	push	{r7, lr}
 801a75e:	b082      	sub	sp, #8
 801a760:	af00      	add	r7, sp, #0
 801a762:	6078      	str	r0, [r7, #4]
    }
 801a764:	6878      	ldr	r0, [r7, #4]
 801a766:	f7ff ffe7 	bl	801a738 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801a76a:	2108      	movs	r1, #8
 801a76c:	6878      	ldr	r0, [r7, #4]
 801a76e:	f7ed fd77 	bl	8008260 <_ZdlPvj>
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	4618      	mov	r0, r3
 801a776:	3708      	adds	r7, #8
 801a778:	46bd      	mov	sp, r7
 801a77a:	bd80      	pop	{r7, pc}

0801a77c <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801a77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a77e:	b085      	sub	sp, #20
 801a780:	af00      	add	r7, sp, #0
 801a782:	6078      	str	r0, [r7, #4]
 801a784:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	330c      	adds	r3, #12
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	6878      	ldr	r0, [r7, #4]
 801a790:	4798      	blx	r3
 801a792:	4603      	mov	r3, r0
 801a794:	681a      	ldr	r2, [r3, #0]
 801a796:	321c      	adds	r2, #28
 801a798:	6812      	ldr	r2, [r2, #0]
 801a79a:	4618      	mov	r0, r3
 801a79c:	4790      	blx	r2
 801a79e:	4603      	mov	r3, r0
 801a7a0:	f083 0301 	eor.w	r3, r3, #1
 801a7a4:	b2db      	uxtb	r3, r3
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d01d      	beq.n	801a7e6 <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	330c      	adds	r3, #12
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	6878      	ldr	r0, [r7, #4]
 801a7b4:	4798      	blx	r3
 801a7b6:	4604      	mov	r4, r0
 801a7b8:	6823      	ldr	r3, [r4, #0]
 801a7ba:	339c      	adds	r3, #156	; 0x9c
 801a7bc:	681d      	ldr	r5, [r3, #0]
 801a7be:	683e      	ldr	r6, [r7, #0]
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	791a      	ldrb	r2, [r3, #4]
 801a7c4:	f107 0308 	add.w	r3, r7, #8
 801a7c8:	4611      	mov	r1, r2
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	f7ff ff86 	bl	801a6dc <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801a7d0:	f107 0308 	add.w	r3, r7, #8
 801a7d4:	461a      	mov	r2, r3
 801a7d6:	4631      	mov	r1, r6
 801a7d8:	4620      	mov	r0, r4
 801a7da:	47a8      	blx	r5
 801a7dc:	f107 0308 	add.w	r3, r7, #8
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	f7ff ffa9 	bl	801a738 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801a7e6:	bf00      	nop
 801a7e8:	3714      	adds	r7, #20
 801a7ea:	46bd      	mov	sp, r7
 801a7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a7ee <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801a7ee:	b580      	push	{r7, lr}
 801a7f0:	b082      	sub	sp, #8
 801a7f2:	af00      	add	r7, sp, #0
 801a7f4:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801a7f6:	f7f7 fcc5 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801a7fa:	4603      	mov	r3, r0
}
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	3708      	adds	r7, #8
 801a800:	46bd      	mov	sp, r7
 801a802:	bd80      	pop	{r7, pc}

0801a804 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801a804:	b590      	push	{r4, r7, lr}
 801a806:	b085      	sub	sp, #20
 801a808:	af00      	add	r7, sp, #0
 801a80a:	6078      	str	r0, [r7, #4]
 801a80c:	6039      	str	r1, [r7, #0]
 801a80e:	687c      	ldr	r4, [r7, #4]
 801a810:	f107 0308 	add.w	r3, r7, #8
 801a814:	490b      	ldr	r1, [pc, #44]	; (801a844 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801a816:	4618      	mov	r0, r3
 801a818:	f7f0 f8d1 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801a81c:	f107 0308 	add.w	r3, r7, #8
 801a820:	461a      	mov	r2, r3
 801a822:	6839      	ldr	r1, [r7, #0]
 801a824:	4620      	mov	r0, r4
 801a826:	f7f1 ff29 	bl	800c67c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801a82a:	f107 0308 	add.w	r3, r7, #8
 801a82e:	4618      	mov	r0, r3
 801a830:	f7f0 fc7d 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801a834:	4a04      	ldr	r2, [pc, #16]	; (801a848 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	601a      	str	r2, [r3, #0]
{
}
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	4618      	mov	r0, r3
 801a83e:	3714      	adds	r7, #20
 801a840:	46bd      	mov	sp, r7
 801a842:	bd90      	pop	{r4, r7, pc}
 801a844:	08023b2c 	.word	0x08023b2c
 801a848:	08025354 	.word	0x08025354

0801a84c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801a84c:	b5b0      	push	{r4, r5, r7, lr}
 801a84e:	b08a      	sub	sp, #40	; 0x28
 801a850:	af00      	add	r7, sp, #0
 801a852:	6078      	str	r0, [r7, #4]
 801a854:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	332c      	adds	r3, #44	; 0x2c
 801a85a:	492b      	ldr	r1, [pc, #172]	; (801a908 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801a85c:	4618      	mov	r0, r3
 801a85e:	f7f0 fcf5 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801a868:	683b      	ldr	r3, [r7, #0]
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	337c      	adds	r3, #124	; 0x7c
 801a86e:	681c      	ldr	r4, [r3, #0]
 801a870:	f107 0310 	add.w	r3, r7, #16
 801a874:	4925      	ldr	r1, [pc, #148]	; (801a90c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801a876:	4618      	mov	r0, r3
 801a878:	f7f0 f8a1 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801a87c:	f107 0308 	add.w	r3, r7, #8
 801a880:	f107 0210 	add.w	r2, r7, #16
 801a884:	6839      	ldr	r1, [r7, #0]
 801a886:	4618      	mov	r0, r3
 801a888:	47a0      	blx	r4
 801a88a:	f107 0308 	add.w	r3, r7, #8
 801a88e:	4619      	mov	r1, r3
 801a890:	4628      	mov	r0, r5
 801a892:	f7f0 fcc9 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801a896:	f107 0308 	add.w	r3, r7, #8
 801a89a:	4618      	mov	r0, r3
 801a89c:	f7f0 fc47 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801a8a0:	f107 0310 	add.w	r3, r7, #16
 801a8a4:	4618      	mov	r0, r3
 801a8a6:	f7f0 fc42 	bl	800b12e <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	332c      	adds	r3, #44	; 0x2c
 801a8ae:	4918      	ldr	r1, [pc, #96]	; (801a910 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	f7f0 fccb 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801a8bc:	683b      	ldr	r3, [r7, #0]
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	3380      	adds	r3, #128	; 0x80
 801a8c2:	681c      	ldr	r4, [r3, #0]
 801a8c4:	f107 0320 	add.w	r3, r7, #32
 801a8c8:	4910      	ldr	r1, [pc, #64]	; (801a90c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801a8ca:	4618      	mov	r0, r3
 801a8cc:	f7f0 f877 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801a8d0:	f107 0318 	add.w	r3, r7, #24
 801a8d4:	f107 0220 	add.w	r2, r7, #32
 801a8d8:	6839      	ldr	r1, [r7, #0]
 801a8da:	4618      	mov	r0, r3
 801a8dc:	47a0      	blx	r4
 801a8de:	f107 0318 	add.w	r3, r7, #24
 801a8e2:	4619      	mov	r1, r3
 801a8e4:	4628      	mov	r0, r5
 801a8e6:	f7f0 fc9f 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801a8ea:	f107 0318 	add.w	r3, r7, #24
 801a8ee:	4618      	mov	r0, r3
 801a8f0:	f7f0 fc1d 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801a8f4:	f107 0320 	add.w	r3, r7, #32
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	f7f0 fc18 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 801a8fe:	bf00      	nop
 801a900:	3728      	adds	r7, #40	; 0x28
 801a902:	46bd      	mov	sp, r7
 801a904:	bdb0      	pop	{r4, r5, r7, pc}
 801a906:	bf00      	nop
 801a908:	08023b7c 	.word	0x08023b7c
 801a90c:	08023ba8 	.word	0x08023ba8
 801a910:	08023bac 	.word	0x08023bac

0801a914 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801a914:	b590      	push	{r4, r7, lr}
 801a916:	b08f      	sub	sp, #60	; 0x3c
 801a918:	af00      	add	r7, sp, #0
 801a91a:	60f8      	str	r0, [r7, #12]
 801a91c:	60b9      	str	r1, [r7, #8]
 801a91e:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801a920:	f107 0310 	add.w	r3, r7, #16
 801a924:	4618      	mov	r0, r3
 801a926:	f7ff f877 	bl	8019a18 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801a92a:	f107 0310 	add.w	r3, r7, #16
 801a92e:	687a      	ldr	r2, [r7, #4]
 801a930:	68b9      	ldr	r1, [r7, #8]
 801a932:	4618      	mov	r0, r3
 801a934:	f7ff fa16 	bl	8019d64 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801a938:	68fb      	ldr	r3, [r7, #12]
 801a93a:	332c      	adds	r3, #44	; 0x2c
 801a93c:	4937      	ldr	r1, [pc, #220]	; (801aa1c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801a93e:	4618      	mov	r0, r3
 801a940:	f7f0 fc84 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	332c      	adds	r3, #44	; 0x2c
 801a948:	68b9      	ldr	r1, [r7, #8]
 801a94a:	4618      	mov	r0, r3
 801a94c:	f7f0 fc6c 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	332c      	adds	r3, #44	; 0x2c
 801a954:	4932      	ldr	r1, [pc, #200]	; (801aa20 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801a956:	4618      	mov	r0, r3
 801a958:	f7f0 fc78 	bl	800b24c <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a962:	f107 0320 	add.w	r3, r7, #32
 801a966:	492f      	ldr	r1, [pc, #188]	; (801aa24 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801a968:	4618      	mov	r0, r3
 801a96a:	f7f0 f828 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801a96e:	f107 0318 	add.w	r3, r7, #24
 801a972:	f107 0220 	add.w	r2, r7, #32
 801a976:	f107 0110 	add.w	r1, r7, #16
 801a97a:	4618      	mov	r0, r3
 801a97c:	f7ff fd4a 	bl	801a414 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801a980:	f107 0318 	add.w	r3, r7, #24
 801a984:	4619      	mov	r1, r3
 801a986:	4620      	mov	r0, r4
 801a988:	f7f0 fc4e 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801a98c:	f107 0318 	add.w	r3, r7, #24
 801a990:	4618      	mov	r0, r3
 801a992:	f7f0 fbcc 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801a996:	f107 0320 	add.w	r3, r7, #32
 801a99a:	4618      	mov	r0, r3
 801a99c:	f7f0 fbc7 	bl	800b12e <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	332c      	adds	r3, #44	; 0x2c
 801a9a4:	4920      	ldr	r1, [pc, #128]	; (801aa28 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801a9a6:	4618      	mov	r0, r3
 801a9a8:	f7f0 fc50 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	332c      	adds	r3, #44	; 0x2c
 801a9b0:	68b9      	ldr	r1, [r7, #8]
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	f7f0 fc38 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a9b8:	68fb      	ldr	r3, [r7, #12]
 801a9ba:	332c      	adds	r3, #44	; 0x2c
 801a9bc:	4918      	ldr	r1, [pc, #96]	; (801aa20 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801a9be:	4618      	mov	r0, r3
 801a9c0:	f7f0 fc44 	bl	800b24c <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a9ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a9ce:	4915      	ldr	r1, [pc, #84]	; (801aa24 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801a9d0:	4618      	mov	r0, r3
 801a9d2:	f7ef fff4 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801a9d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a9da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a9de:	f107 0110 	add.w	r1, r7, #16
 801a9e2:	4618      	mov	r0, r3
 801a9e4:	f7ff fd74 	bl	801a4d0 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801a9e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a9ec:	4619      	mov	r1, r3
 801a9ee:	4620      	mov	r0, r4
 801a9f0:	f7f0 fc1a 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801a9f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a9f8:	4618      	mov	r0, r3
 801a9fa:	f7f0 fb98 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801a9fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801aa02:	4618      	mov	r0, r3
 801aa04:	f7f0 fb93 	bl	800b12e <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801aa08:	f107 0310 	add.w	r3, r7, #16
 801aa0c:	4618      	mov	r0, r3
 801aa0e:	f7ff f817 	bl	8019a40 <_ZN21MockExpectedCallsListD1Ev>
}
 801aa12:	bf00      	nop
 801aa14:	373c      	adds	r7, #60	; 0x3c
 801aa16:	46bd      	mov	sp, r7
 801aa18:	bd90      	pop	{r4, r7, pc}
 801aa1a:	bf00      	nop
 801aa1c:	08023bd4 	.word	0x08023bd4
 801aa20:	08023c14 	.word	0x08023c14
 801aa24:	08023ba8 	.word	0x08023ba8
 801aa28:	08023c18 	.word	0x08023c18

0801aa2c <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801aa2c:	b590      	push	{r4, r7, lr}
 801aa2e:	b087      	sub	sp, #28
 801aa30:	af00      	add	r7, sp, #0
 801aa32:	60f8      	str	r0, [r7, #12]
 801aa34:	60b9      	str	r1, [r7, #8]
 801aa36:	607a      	str	r2, [r7, #4]
 801aa38:	68fb      	ldr	r3, [r7, #12]
 801aa3a:	68b9      	ldr	r1, [r7, #8]
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	f7ff fee1 	bl	801a804 <_ZN11MockFailureC1EP10UtestShell>
 801aa42:	4a10      	ldr	r2, [pc, #64]	; (801aa84 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801aa4e:	f107 0310 	add.w	r3, r7, #16
 801aa52:	490d      	ldr	r1, [pc, #52]	; (801aa88 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801aa54:	4618      	mov	r0, r3
 801aa56:	f7ef ffb2 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801aa5a:	f107 0310 	add.w	r3, r7, #16
 801aa5e:	4619      	mov	r1, r3
 801aa60:	4620      	mov	r0, r4
 801aa62:	f7f0 f818 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801aa66:	f107 0310 	add.w	r3, r7, #16
 801aa6a:	4618      	mov	r0, r3
 801aa6c:	f7f0 fb5f 	bl	800b12e <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801aa70:	68fb      	ldr	r3, [r7, #12]
 801aa72:	6879      	ldr	r1, [r7, #4]
 801aa74:	4618      	mov	r0, r3
 801aa76:	f7ff fee9 	bl	801a84c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	4618      	mov	r0, r3
 801aa7e:	371c      	adds	r7, #28
 801aa80:	46bd      	mov	sp, r7
 801aa82:	bd90      	pop	{r4, r7, pc}
 801aa84:	08025328 	.word	0x08025328
 801aa88:	08023c54 	.word	0x08023c54

0801aa8c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801aa8c:	b590      	push	{r4, r7, lr}
 801aa8e:	b08d      	sub	sp, #52	; 0x34
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	60f8      	str	r0, [r7, #12]
 801aa94:	60b9      	str	r1, [r7, #8]
 801aa96:	607a      	str	r2, [r7, #4]
 801aa98:	603b      	str	r3, [r7, #0]
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	68b9      	ldr	r1, [r7, #8]
 801aa9e:	4618      	mov	r0, r3
 801aaa0:	f7ff feb0 	bl	801a804 <_ZN11MockFailureC1EP10UtestShell>
 801aaa4:	4a2f      	ldr	r2, [pc, #188]	; (801ab64 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801aaa6:	68fb      	ldr	r3, [r7, #12]
 801aaa8:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801aaaa:	683b      	ldr	r3, [r7, #0]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	3310      	adds	r3, #16
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	6879      	ldr	r1, [r7, #4]
 801aab4:	6838      	ldr	r0, [r7, #0]
 801aab6:	4798      	blx	r3
 801aab8:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801aaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	d027      	beq.n	801ab10 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801aac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aac2:	1c5a      	adds	r2, r3, #1
 801aac4:	f107 0314 	add.w	r3, r7, #20
 801aac8:	4611      	mov	r1, r2
 801aaca:	4618      	mov	r0, r3
 801aacc:	f7f1 fa00 	bl	800bed0 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801aad6:	f107 0314 	add.w	r3, r7, #20
 801aada:	4618      	mov	r0, r3
 801aadc:	f7f0 fafa 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801aae0:	4602      	mov	r2, r0
 801aae2:	f107 031c 	add.w	r3, r7, #28
 801aae6:	4920      	ldr	r1, [pc, #128]	; (801ab68 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801aae8:	4618      	mov	r0, r3
 801aaea:	f7f1 f827 	bl	800bb3c <_Z16StringFromFormatPKcz>
 801aaee:	f107 031c 	add.w	r3, r7, #28
 801aaf2:	4619      	mov	r1, r3
 801aaf4:	4620      	mov	r0, r4
 801aaf6:	f7ef ffce 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801aafa:	f107 031c 	add.w	r3, r7, #28
 801aafe:	4618      	mov	r0, r3
 801ab00:	f7f0 fb15 	bl	800b12e <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801ab04:	f107 0314 	add.w	r3, r7, #20
 801ab08:	4618      	mov	r0, r3
 801ab0a:	f7f0 fb10 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801ab0e:	e013      	b.n	801ab38 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ab16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ab1a:	4914      	ldr	r1, [pc, #80]	; (801ab6c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	f7ef ff4e 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801ab22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ab26:	4619      	mov	r1, r3
 801ab28:	4620      	mov	r0, r4
 801ab2a:	f7ef ffb4 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801ab2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ab32:	4618      	mov	r0, r3
 801ab34:	f7f0 fafb 	bl	800b12e <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801ab38:	68fb      	ldr	r3, [r7, #12]
 801ab3a:	332c      	adds	r3, #44	; 0x2c
 801ab3c:	6879      	ldr	r1, [r7, #4]
 801ab3e:	4618      	mov	r0, r3
 801ab40:	f7f0 fb72 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801ab44:	68fb      	ldr	r3, [r7, #12]
 801ab46:	332c      	adds	r3, #44	; 0x2c
 801ab48:	4909      	ldr	r1, [pc, #36]	; (801ab70 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	f7f0 fb7e 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	6839      	ldr	r1, [r7, #0]
 801ab54:	4618      	mov	r0, r3
 801ab56:	f7ff fe79 	bl	801a84c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	3734      	adds	r7, #52	; 0x34
 801ab60:	46bd      	mov	sp, r7
 801ab62:	bd90      	pop	{r4, r7, pc}
 801ab64:	08025cc8 	.word	0x08025cc8
 801ab68:	08023c84 	.word	0x08023c84
 801ab6c:	08023cc0 	.word	0x08023cc0
 801ab70:	08023c14 	.word	0x08023c14

0801ab74 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ab74:	b590      	push	{r4, r7, lr}
 801ab76:	b089      	sub	sp, #36	; 0x24
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	60f8      	str	r0, [r7, #12]
 801ab7c:	60b9      	str	r1, [r7, #8]
 801ab7e:	607a      	str	r2, [r7, #4]
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	68b9      	ldr	r1, [r7, #8]
 801ab84:	4618      	mov	r0, r3
 801ab86:	f7ff fe3d 	bl	801a804 <_ZN11MockFailureC1EP10UtestShell>
 801ab8a:	4a1f      	ldr	r2, [pc, #124]	; (801ac08 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801ab90:	f107 0310 	add.w	r3, r7, #16
 801ab94:	4618      	mov	r0, r3
 801ab96:	f7fe ff3f 	bl	8019a18 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801ab9a:	f107 0310 	add.w	r3, r7, #16
 801ab9e:	6879      	ldr	r1, [r7, #4]
 801aba0:	4618      	mov	r0, r3
 801aba2:	f7ff f909 	bl	8019db8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801aba6:	f107 0310 	add.w	r3, r7, #16
 801abaa:	4618      	mov	r0, r3
 801abac:	f7ff f94c 	bl	8019e48 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801abb6:	f107 0318 	add.w	r3, r7, #24
 801abba:	4914      	ldr	r1, [pc, #80]	; (801ac0c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801abbc:	4618      	mov	r0, r3
 801abbe:	f7ef fefe 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801abc2:	f107 0318 	add.w	r3, r7, #24
 801abc6:	4619      	mov	r1, r3
 801abc8:	4620      	mov	r0, r4
 801abca:	f7ef ff64 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801abce:	f107 0318 	add.w	r3, r7, #24
 801abd2:	4618      	mov	r0, r3
 801abd4:	f7f0 faab 	bl	800b12e <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	332c      	adds	r3, #44	; 0x2c
 801abdc:	490c      	ldr	r1, [pc, #48]	; (801ac10 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801abde:	4618      	mov	r0, r3
 801abe0:	f7f0 fb34 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	f107 0210 	add.w	r2, r7, #16
 801abea:	4611      	mov	r1, r2
 801abec:	4618      	mov	r0, r3
 801abee:	f7ff fe2d 	bl	801a84c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801abf2:	f107 0310 	add.w	r3, r7, #16
 801abf6:	4618      	mov	r0, r3
 801abf8:	f7fe ff22 	bl	8019a40 <_ZN21MockExpectedCallsListD1Ev>
}
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	4618      	mov	r0, r3
 801ac00:	3724      	adds	r7, #36	; 0x24
 801ac02:	46bd      	mov	sp, r7
 801ac04:	bd90      	pop	{r4, r7, pc}
 801ac06:	bf00      	nop
 801ac08:	080252fc 	.word	0x080252fc
 801ac0c:	08023cec 	.word	0x08023cec
 801ac10:	08023c14 	.word	0x08023c14

0801ac14 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801ac14:	b590      	push	{r4, r7, lr}
 801ac16:	b099      	sub	sp, #100	; 0x64
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	60f8      	str	r0, [r7, #12]
 801ac1c:	60b9      	str	r1, [r7, #8]
 801ac1e:	607a      	str	r2, [r7, #4]
 801ac20:	603b      	str	r3, [r7, #0]
 801ac22:	68fb      	ldr	r3, [r7, #12]
 801ac24:	68b9      	ldr	r1, [r7, #8]
 801ac26:	4618      	mov	r0, r3
 801ac28:	f7ff fdec 	bl	801a804 <_ZN11MockFailureC1EP10UtestShell>
 801ac2c:	4a9e      	ldr	r2, [pc, #632]	; (801aea8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801ac2e:	68fb      	ldr	r3, [r7, #12]
 801ac30:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801ac32:	f107 0310 	add.w	r3, r7, #16
 801ac36:	4618      	mov	r0, r3
 801ac38:	f7fe feee 	bl	8019a18 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801ac3c:	f107 0310 	add.w	r3, r7, #16
 801ac40:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801ac42:	6879      	ldr	r1, [r7, #4]
 801ac44:	4618      	mov	r0, r3
 801ac46:	f7ff f88d 	bl	8019d64 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801ac4a:	683b      	ldr	r3, [r7, #0]
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	335c      	adds	r3, #92	; 0x5c
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	f107 0218 	add.w	r2, r7, #24
 801ac56:	6839      	ldr	r1, [r7, #0]
 801ac58:	4610      	mov	r0, r2
 801ac5a:	4798      	blx	r3
 801ac5c:	f107 0218 	add.w	r2, r7, #24
 801ac60:	f107 0310 	add.w	r3, r7, #16
 801ac64:	4611      	mov	r1, r2
 801ac66:	4618      	mov	r0, r3
 801ac68:	f7ff f948 	bl	8019efc <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801ac6c:	f107 0318 	add.w	r3, r7, #24
 801ac70:	4618      	mov	r0, r3
 801ac72:	f7f0 fa5c 	bl	800b12e <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801ac76:	f107 0310 	add.w	r3, r7, #16
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	f7fe ff4d 	bl	8019b1a <_ZNK21MockExpectedCallsList7isEmptyEv>
 801ac80:	4603      	mov	r3, r0
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d037      	beq.n	801acf6 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ac8c:	f107 0320 	add.w	r3, r7, #32
 801ac90:	4986      	ldr	r1, [pc, #536]	; (801aeac <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801ac92:	4618      	mov	r0, r3
 801ac94:	f7ef fe93 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801ac98:	f107 0320 	add.w	r3, r7, #32
 801ac9c:	4619      	mov	r1, r3
 801ac9e:	4620      	mov	r0, r4
 801aca0:	f7ef fef9 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801aca4:	f107 0320 	add.w	r3, r7, #32
 801aca8:	4618      	mov	r0, r3
 801acaa:	f7f0 fa40 	bl	800b12e <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	332c      	adds	r3, #44	; 0x2c
 801acb2:	6879      	ldr	r1, [r7, #4]
 801acb4:	4618      	mov	r0, r3
 801acb6:	f7f0 fab7 	bl	800b228 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801acba:	68fb      	ldr	r3, [r7, #12]
 801acbc:	332c      	adds	r3, #44	; 0x2c
 801acbe:	497c      	ldr	r1, [pc, #496]	; (801aeb0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801acc0:	4618      	mov	r0, r3
 801acc2:	f7f0 fac3 	bl	800b24c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801acc6:	68fb      	ldr	r3, [r7, #12]
 801acc8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801accc:	683b      	ldr	r3, [r7, #0]
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	335c      	adds	r3, #92	; 0x5c
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801acd8:	6839      	ldr	r1, [r7, #0]
 801acda:	4610      	mov	r0, r2
 801acdc:	4798      	blx	r3
 801acde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ace2:	4619      	mov	r1, r3
 801ace4:	4620      	mov	r0, r4
 801ace6:	f7f0 fa9f 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801acea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801acee:	4618      	mov	r0, r3
 801acf0:	f7f0 fa1d 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801acf4:	e056      	b.n	801ada4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801acf6:	68fb      	ldr	r3, [r7, #12]
 801acf8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801acfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ad00:	496c      	ldr	r1, [pc, #432]	; (801aeb4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801ad02:	4618      	mov	r0, r3
 801ad04:	f7ef fe5b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801ad08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ad0c:	4619      	mov	r1, r3
 801ad0e:	4620      	mov	r0, r4
 801ad10:	f7ef fec1 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801ad14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ad18:	4618      	mov	r0, r3
 801ad1a:	f7f0 fa08 	bl	800b12e <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ad24:	683b      	ldr	r3, [r7, #0]
 801ad26:	681b      	ldr	r3, [r3, #0]
 801ad28:	335c      	adds	r3, #92	; 0x5c
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801ad30:	6839      	ldr	r1, [r7, #0]
 801ad32:	4610      	mov	r0, r2
 801ad34:	4798      	blx	r3
 801ad36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ad3a:	4619      	mov	r1, r3
 801ad3c:	4620      	mov	r0, r4
 801ad3e:	f7f0 fa73 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801ad42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ad46:	4618      	mov	r0, r3
 801ad48:	f7f0 f9f1 	bl	800b12e <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801ad4c:	68fb      	ldr	r3, [r7, #12]
 801ad4e:	332c      	adds	r3, #44	; 0x2c
 801ad50:	4959      	ldr	r1, [pc, #356]	; (801aeb8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801ad52:	4618      	mov	r0, r3
 801ad54:	f7f0 fa7a 	bl	800b24c <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	332c      	adds	r3, #44	; 0x2c
 801ad5c:	6879      	ldr	r1, [r7, #4]
 801ad5e:	4618      	mov	r0, r3
 801ad60:	f7f0 fa62 	bl	800b228 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	332c      	adds	r3, #44	; 0x2c
 801ad68:	4954      	ldr	r1, [pc, #336]	; (801aebc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	f7f0 fa6e 	bl	800b24c <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801ad70:	68fb      	ldr	r3, [r7, #12]
 801ad72:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ad76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ad7a:	6839      	ldr	r1, [r7, #0]
 801ad7c:	4618      	mov	r0, r3
 801ad7e:	f7fd faa3 	bl	80182c8 <_Z10StringFromRK14MockNamedValue>
 801ad82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ad86:	4619      	mov	r1, r3
 801ad88:	4620      	mov	r0, r4
 801ad8a:	f7f0 fa4d 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801ad8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ad92:	4618      	mov	r0, r3
 801ad94:	f7f0 f9cb 	bl	800b12e <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	332c      	adds	r3, #44	; 0x2c
 801ad9c:	4948      	ldr	r1, [pc, #288]	; (801aec0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801ad9e:	4618      	mov	r0, r3
 801ada0:	f7f0 fa54 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801ada4:	68fb      	ldr	r3, [r7, #12]
 801ada6:	332c      	adds	r3, #44	; 0x2c
 801ada8:	4946      	ldr	r1, [pc, #280]	; (801aec4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801adaa:	4618      	mov	r0, r3
 801adac:	f7f0 fa4e 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801adb0:	68fb      	ldr	r3, [r7, #12]
 801adb2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801adb4:	6879      	ldr	r1, [r7, #4]
 801adb6:	4618      	mov	r0, r3
 801adb8:	f7ff fdac 	bl	801a914 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801adbc:	68fb      	ldr	r3, [r7, #12]
 801adbe:	332c      	adds	r3, #44	; 0x2c
 801adc0:	4941      	ldr	r1, [pc, #260]	; (801aec8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801adc2:	4618      	mov	r0, r3
 801adc4:	f7f0 fa42 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801adc8:	68fb      	ldr	r3, [r7, #12]
 801adca:	332c      	adds	r3, #44	; 0x2c
 801adcc:	6879      	ldr	r1, [r7, #4]
 801adce:	4618      	mov	r0, r3
 801add0:	f7f0 fa2a 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	332c      	adds	r3, #44	; 0x2c
 801add8:	493a      	ldr	r1, [pc, #232]	; (801aec4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801adda:	4618      	mov	r0, r3
 801addc:	f7f0 fa36 	bl	800b24c <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	332c      	adds	r3, #44	; 0x2c
 801ade4:	4939      	ldr	r1, [pc, #228]	; (801aecc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801ade6:	4618      	mov	r0, r3
 801ade8:	f7f0 fa30 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801adec:	68fb      	ldr	r3, [r7, #12]
 801adee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801adf2:	683b      	ldr	r3, [r7, #0]
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	3360      	adds	r3, #96	; 0x60
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801adfe:	6839      	ldr	r1, [r7, #0]
 801ae00:	4610      	mov	r0, r2
 801ae02:	4798      	blx	r3
 801ae04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ae08:	4619      	mov	r1, r3
 801ae0a:	4620      	mov	r0, r4
 801ae0c:	f7f0 fa0c 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801ae10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ae14:	4618      	mov	r0, r3
 801ae16:	f7f0 f98a 	bl	800b12e <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801ae1a:	68fb      	ldr	r3, [r7, #12]
 801ae1c:	332c      	adds	r3, #44	; 0x2c
 801ae1e:	492c      	ldr	r1, [pc, #176]	; (801aed0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801ae20:	4618      	mov	r0, r3
 801ae22:	f7f0 fa13 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801ae26:	68fb      	ldr	r3, [r7, #12]
 801ae28:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ae2c:	683b      	ldr	r3, [r7, #0]
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	335c      	adds	r3, #92	; 0x5c
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801ae38:	6839      	ldr	r1, [r7, #0]
 801ae3a:	4610      	mov	r0, r2
 801ae3c:	4798      	blx	r3
 801ae3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ae42:	4619      	mov	r1, r3
 801ae44:	4620      	mov	r0, r4
 801ae46:	f7f0 f9ef 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801ae4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ae4e:	4618      	mov	r0, r3
 801ae50:	f7f0 f96d 	bl	800b12e <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801ae54:	68fb      	ldr	r3, [r7, #12]
 801ae56:	332c      	adds	r3, #44	; 0x2c
 801ae58:	491e      	ldr	r1, [pc, #120]	; (801aed4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	f7f0 f9f6 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801ae60:	68fb      	ldr	r3, [r7, #12]
 801ae62:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ae66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ae6a:	6839      	ldr	r1, [r7, #0]
 801ae6c:	4618      	mov	r0, r3
 801ae6e:	f7fd fa2b 	bl	80182c8 <_Z10StringFromRK14MockNamedValue>
 801ae72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ae76:	4619      	mov	r1, r3
 801ae78:	4620      	mov	r0, r4
 801ae7a:	f7f0 f9d5 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801ae7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ae82:	4618      	mov	r0, r3
 801ae84:	f7f0 f953 	bl	800b12e <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801ae88:	68fb      	ldr	r3, [r7, #12]
 801ae8a:	332c      	adds	r3, #44	; 0x2c
 801ae8c:	490c      	ldr	r1, [pc, #48]	; (801aec0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801ae8e:	4618      	mov	r0, r3
 801ae90:	f7f0 f9dc 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801ae94:	f107 0310 	add.w	r3, r7, #16
 801ae98:	4618      	mov	r0, r3
 801ae9a:	f7fe fdd1 	bl	8019a40 <_ZN21MockExpectedCallsListD1Ev>
}
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	4618      	mov	r0, r3
 801aea2:	3764      	adds	r7, #100	; 0x64
 801aea4:	46bd      	mov	sp, r7
 801aea6:	bd90      	pop	{r4, r7, pc}
 801aea8:	08025c9c 	.word	0x08025c9c
 801aeac:	08023d10 	.word	0x08023d10
 801aeb0:	08023d48 	.word	0x08023d48
 801aeb4:	08023d4c 	.word	0x08023d4c
 801aeb8:	08023d84 	.word	0x08023d84
 801aebc:	08023d94 	.word	0x08023d94
 801aec0:	08023d9c 	.word	0x08023d9c
 801aec4:	08023c14 	.word	0x08023c14
 801aec8:	08023da0 	.word	0x08023da0
 801aecc:	08023ba8 	.word	0x08023ba8
 801aed0:	08023dd4 	.word	0x08023dd4
 801aed4:	08023dd8 	.word	0x08023dd8

0801aed8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801aed8:	b590      	push	{r4, r7, lr}
 801aeda:	b097      	sub	sp, #92	; 0x5c
 801aedc:	af00      	add	r7, sp, #0
 801aede:	60f8      	str	r0, [r7, #12]
 801aee0:	60b9      	str	r1, [r7, #8]
 801aee2:	607a      	str	r2, [r7, #4]
 801aee4:	603b      	str	r3, [r7, #0]
 801aee6:	68fb      	ldr	r3, [r7, #12]
 801aee8:	68b9      	ldr	r1, [r7, #8]
 801aeea:	4618      	mov	r0, r3
 801aeec:	f7ff fc8a 	bl	801a804 <_ZN11MockFailureC1EP10UtestShell>
 801aef0:	4a90      	ldr	r2, [pc, #576]	; (801b134 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801aef6:	f107 0310 	add.w	r3, r7, #16
 801aefa:	4618      	mov	r0, r3
 801aefc:	f7fe fd8c 	bl	8019a18 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801af00:	f107 0310 	add.w	r3, r7, #16
 801af04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801af06:	6879      	ldr	r1, [r7, #4]
 801af08:	4618      	mov	r0, r3
 801af0a:	f7fe ff2b 	bl	8019d64 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801af0e:	683b      	ldr	r3, [r7, #0]
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	335c      	adds	r3, #92	; 0x5c
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	f107 0218 	add.w	r2, r7, #24
 801af1a:	6839      	ldr	r1, [r7, #0]
 801af1c:	4610      	mov	r0, r2
 801af1e:	4798      	blx	r3
 801af20:	f107 0218 	add.w	r2, r7, #24
 801af24:	f107 0310 	add.w	r3, r7, #16
 801af28:	4611      	mov	r1, r2
 801af2a:	4618      	mov	r0, r3
 801af2c:	f7ff f812 	bl	8019f54 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801af30:	f107 0318 	add.w	r3, r7, #24
 801af34:	4618      	mov	r0, r3
 801af36:	f7f0 f8fa 	bl	800b12e <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801af3a:	f107 0310 	add.w	r3, r7, #16
 801af3e:	4618      	mov	r0, r3
 801af40:	f7fe fdeb 	bl	8019b1a <_ZNK21MockExpectedCallsList7isEmptyEv>
 801af44:	4603      	mov	r3, r0
 801af46:	2b00      	cmp	r3, #0
 801af48:	d037      	beq.n	801afba <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801af50:	f107 0320 	add.w	r3, r7, #32
 801af54:	4978      	ldr	r1, [pc, #480]	; (801b138 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801af56:	4618      	mov	r0, r3
 801af58:	f7ef fd31 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801af5c:	f107 0320 	add.w	r3, r7, #32
 801af60:	4619      	mov	r1, r3
 801af62:	4620      	mov	r0, r4
 801af64:	f7ef fd97 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801af68:	f107 0320 	add.w	r3, r7, #32
 801af6c:	4618      	mov	r0, r3
 801af6e:	f7f0 f8de 	bl	800b12e <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	332c      	adds	r3, #44	; 0x2c
 801af76:	6879      	ldr	r1, [r7, #4]
 801af78:	4618      	mov	r0, r3
 801af7a:	f7f0 f955 	bl	800b228 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	332c      	adds	r3, #44	; 0x2c
 801af82:	496e      	ldr	r1, [pc, #440]	; (801b13c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801af84:	4618      	mov	r0, r3
 801af86:	f7f0 f961 	bl	800b24c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801af90:	683b      	ldr	r3, [r7, #0]
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	335c      	adds	r3, #92	; 0x5c
 801af96:	681b      	ldr	r3, [r3, #0]
 801af98:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801af9c:	6839      	ldr	r1, [r7, #0]
 801af9e:	4610      	mov	r0, r2
 801afa0:	4798      	blx	r3
 801afa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801afa6:	4619      	mov	r1, r3
 801afa8:	4620      	mov	r0, r4
 801afaa:	f7f0 f93d 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801afae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801afb2:	4618      	mov	r0, r3
 801afb4:	f7f0 f8bb 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801afb8:	e059      	b.n	801b06e <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801afc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801afc4:	495e      	ldr	r1, [pc, #376]	; (801b140 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801afc6:	4618      	mov	r0, r3
 801afc8:	f7ef fcf9 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801afcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801afd0:	4619      	mov	r1, r3
 801afd2:	4620      	mov	r0, r4
 801afd4:	f7ef fd5f 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801afd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801afdc:	4618      	mov	r0, r3
 801afde:	f7f0 f8a6 	bl	800b12e <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801afe8:	683b      	ldr	r3, [r7, #0]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	3360      	adds	r3, #96	; 0x60
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801aff4:	6839      	ldr	r1, [r7, #0]
 801aff6:	4610      	mov	r0, r2
 801aff8:	4798      	blx	r3
 801affa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801affe:	4619      	mov	r1, r3
 801b000:	4620      	mov	r0, r4
 801b002:	f7f0 f911 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801b006:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b00a:	4618      	mov	r0, r3
 801b00c:	f7f0 f88f 	bl	800b12e <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	332c      	adds	r3, #44	; 0x2c
 801b014:	494b      	ldr	r1, [pc, #300]	; (801b144 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801b016:	4618      	mov	r0, r3
 801b018:	f7f0 f918 	bl	800b24c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b022:	683b      	ldr	r3, [r7, #0]
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	335c      	adds	r3, #92	; 0x5c
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801b02e:	6839      	ldr	r1, [r7, #0]
 801b030:	4610      	mov	r0, r2
 801b032:	4798      	blx	r3
 801b034:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b038:	4619      	mov	r1, r3
 801b03a:	4620      	mov	r0, r4
 801b03c:	f7f0 f8f4 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801b040:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b044:	4618      	mov	r0, r3
 801b046:	f7f0 f872 	bl	800b12e <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801b04a:	68fb      	ldr	r3, [r7, #12]
 801b04c:	332c      	adds	r3, #44	; 0x2c
 801b04e:	493e      	ldr	r1, [pc, #248]	; (801b148 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801b050:	4618      	mov	r0, r3
 801b052:	f7f0 f8fb 	bl	800b24c <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801b056:	68fb      	ldr	r3, [r7, #12]
 801b058:	332c      	adds	r3, #44	; 0x2c
 801b05a:	6879      	ldr	r1, [r7, #4]
 801b05c:	4618      	mov	r0, r3
 801b05e:	f7f0 f8e3 	bl	800b228 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801b062:	68fb      	ldr	r3, [r7, #12]
 801b064:	332c      	adds	r3, #44	; 0x2c
 801b066:	4939      	ldr	r1, [pc, #228]	; (801b14c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801b068:	4618      	mov	r0, r3
 801b06a:	f7f0 f8ef 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801b06e:	68fb      	ldr	r3, [r7, #12]
 801b070:	332c      	adds	r3, #44	; 0x2c
 801b072:	4937      	ldr	r1, [pc, #220]	; (801b150 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801b074:	4618      	mov	r0, r3
 801b076:	f7f0 f8e9 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b07a:	68fb      	ldr	r3, [r7, #12]
 801b07c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b07e:	6879      	ldr	r1, [r7, #4]
 801b080:	4618      	mov	r0, r3
 801b082:	f7ff fc47 	bl	801a914 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801b086:	68fb      	ldr	r3, [r7, #12]
 801b088:	332c      	adds	r3, #44	; 0x2c
 801b08a:	4932      	ldr	r1, [pc, #200]	; (801b154 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801b08c:	4618      	mov	r0, r3
 801b08e:	f7f0 f8dd 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801b092:	68fb      	ldr	r3, [r7, #12]
 801b094:	332c      	adds	r3, #44	; 0x2c
 801b096:	6879      	ldr	r1, [r7, #4]
 801b098:	4618      	mov	r0, r3
 801b09a:	f7f0 f8c5 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	332c      	adds	r3, #44	; 0x2c
 801b0a2:	492b      	ldr	r1, [pc, #172]	; (801b150 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801b0a4:	4618      	mov	r0, r3
 801b0a6:	f7f0 f8d1 	bl	800b24c <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	332c      	adds	r3, #44	; 0x2c
 801b0ae:	492a      	ldr	r1, [pc, #168]	; (801b158 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	f7f0 f8cb 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801b0b6:	68fb      	ldr	r3, [r7, #12]
 801b0b8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b0bc:	683b      	ldr	r3, [r7, #0]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	3360      	adds	r3, #96	; 0x60
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801b0c8:	6839      	ldr	r1, [r7, #0]
 801b0ca:	4610      	mov	r0, r2
 801b0cc:	4798      	blx	r3
 801b0ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b0d2:	4619      	mov	r1, r3
 801b0d4:	4620      	mov	r0, r4
 801b0d6:	f7f0 f8a7 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801b0da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b0de:	4618      	mov	r0, r3
 801b0e0:	f7f0 f825 	bl	800b12e <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801b0e4:	68fb      	ldr	r3, [r7, #12]
 801b0e6:	332c      	adds	r3, #44	; 0x2c
 801b0e8:	491c      	ldr	r1, [pc, #112]	; (801b15c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801b0ea:	4618      	mov	r0, r3
 801b0ec:	f7f0 f8ae 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b0f6:	683b      	ldr	r3, [r7, #0]
 801b0f8:	681b      	ldr	r3, [r3, #0]
 801b0fa:	335c      	adds	r3, #92	; 0x5c
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801b102:	6839      	ldr	r1, [r7, #0]
 801b104:	4610      	mov	r0, r2
 801b106:	4798      	blx	r3
 801b108:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b10c:	4619      	mov	r1, r3
 801b10e:	4620      	mov	r0, r4
 801b110:	f7f0 f88a 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801b114:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b118:	4618      	mov	r0, r3
 801b11a:	f7f0 f808 	bl	800b12e <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801b11e:	f107 0310 	add.w	r3, r7, #16
 801b122:	4618      	mov	r0, r3
 801b124:	f7fe fc8c 	bl	8019a40 <_ZN21MockExpectedCallsListD1Ev>
}
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	4618      	mov	r0, r3
 801b12c:	375c      	adds	r7, #92	; 0x5c
 801b12e:	46bd      	mov	sp, r7
 801b130:	bd90      	pop	{r4, r7, pc}
 801b132:	bf00      	nop
 801b134:	08025c70 	.word	0x08025c70
 801b138:	08023ddc 	.word	0x08023ddc
 801b13c:	08023d48 	.word	0x08023d48
 801b140:	08023e1c 	.word	0x08023e1c
 801b144:	08023e48 	.word	0x08023e48
 801b148:	08023d84 	.word	0x08023d84
 801b14c:	08023e60 	.word	0x08023e60
 801b150:	08023c14 	.word	0x08023c14
 801b154:	08023e64 	.word	0x08023e64
 801b158:	08023ba8 	.word	0x08023ba8
 801b15c:	08023dd4 	.word	0x08023dd4

0801b160 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b160:	b590      	push	{r4, r7, lr}
 801b162:	b08b      	sub	sp, #44	; 0x2c
 801b164:	af00      	add	r7, sp, #0
 801b166:	60f8      	str	r0, [r7, #12]
 801b168:	60b9      	str	r1, [r7, #8]
 801b16a:	607a      	str	r2, [r7, #4]
 801b16c:	603b      	str	r3, [r7, #0]
 801b16e:	68fb      	ldr	r3, [r7, #12]
 801b170:	68b9      	ldr	r1, [r7, #8]
 801b172:	4618      	mov	r0, r3
 801b174:	f7ff fb46 	bl	801a804 <_ZN11MockFailureC1EP10UtestShell>
 801b178:	4a30      	ldr	r2, [pc, #192]	; (801b23c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801b17a:	68fb      	ldr	r3, [r7, #12]
 801b17c:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801b17e:	f107 0310 	add.w	r3, r7, #16
 801b182:	4618      	mov	r0, r3
 801b184:	f7fe fc48 	bl	8019a18 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801b188:	f107 0310 	add.w	r3, r7, #16
 801b18c:	683a      	ldr	r2, [r7, #0]
 801b18e:	6879      	ldr	r1, [r7, #4]
 801b190:	4618      	mov	r0, r3
 801b192:	f7fe fde7 	bl	8019d64 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801b196:	68fb      	ldr	r3, [r7, #12]
 801b198:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b19c:	f107 0318 	add.w	r3, r7, #24
 801b1a0:	4927      	ldr	r1, [pc, #156]	; (801b240 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801b1a2:	4618      	mov	r0, r3
 801b1a4:	f7ef fc0b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801b1a8:	f107 0318 	add.w	r3, r7, #24
 801b1ac:	4619      	mov	r1, r3
 801b1ae:	4620      	mov	r0, r4
 801b1b0:	f7ef fc71 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b1b4:	f107 0318 	add.w	r3, r7, #24
 801b1b8:	4618      	mov	r0, r3
 801b1ba:	f7ef ffb8 	bl	800b12e <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801b1be:	68fb      	ldr	r3, [r7, #12]
 801b1c0:	332c      	adds	r3, #44	; 0x2c
 801b1c2:	6879      	ldr	r1, [r7, #4]
 801b1c4:	4618      	mov	r0, r3
 801b1c6:	f7f0 f82f 	bl	800b228 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801b1ca:	68fb      	ldr	r3, [r7, #12]
 801b1cc:	332c      	adds	r3, #44	; 0x2c
 801b1ce:	491d      	ldr	r1, [pc, #116]	; (801b244 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	f7f0 f83b 	bl	800b24c <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b1d6:	68fb      	ldr	r3, [r7, #12]
 801b1d8:	683a      	ldr	r2, [r7, #0]
 801b1da:	6879      	ldr	r1, [r7, #4]
 801b1dc:	4618      	mov	r0, r3
 801b1de:	f7ff fb99 	bl	801a914 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801b1e2:	68fb      	ldr	r3, [r7, #12]
 801b1e4:	332c      	adds	r3, #44	; 0x2c
 801b1e6:	4918      	ldr	r1, [pc, #96]	; (801b248 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801b1e8:	4618      	mov	r0, r3
 801b1ea:	f7f0 f82f 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801b1ee:	68fb      	ldr	r3, [r7, #12]
 801b1f0:	332c      	adds	r3, #44	; 0x2c
 801b1f2:	4916      	ldr	r1, [pc, #88]	; (801b24c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801b1f4:	4618      	mov	r0, r3
 801b1f6:	f7f0 f829 	bl	800b24c <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801b1fa:	68fb      	ldr	r3, [r7, #12]
 801b1fc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b200:	f107 0320 	add.w	r3, r7, #32
 801b204:	f107 0210 	add.w	r2, r7, #16
 801b208:	4611      	mov	r1, r2
 801b20a:	4618      	mov	r0, r3
 801b20c:	f7ff f9bc 	bl	801a588 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801b210:	f107 0320 	add.w	r3, r7, #32
 801b214:	4619      	mov	r1, r3
 801b216:	4620      	mov	r0, r4
 801b218:	f7f0 f806 	bl	800b228 <_ZN12SimpleStringpLERKS_>
 801b21c:	f107 0320 	add.w	r3, r7, #32
 801b220:	4618      	mov	r0, r3
 801b222:	f7ef ff84 	bl	800b12e <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801b226:	f107 0310 	add.w	r3, r7, #16
 801b22a:	4618      	mov	r0, r3
 801b22c:	f7fe fc08 	bl	8019a40 <_ZN21MockExpectedCallsListD1Ev>
}
 801b230:	68fb      	ldr	r3, [r7, #12]
 801b232:	4618      	mov	r0, r3
 801b234:	372c      	adds	r7, #44	; 0x2c
 801b236:	46bd      	mov	sp, r7
 801b238:	bd90      	pop	{r4, r7, pc}
 801b23a:	bf00      	nop
 801b23c:	08025c44 	.word	0x08025c44
 801b240:	08023ea0 	.word	0x08023ea0
 801b244:	08023ed0 	.word	0x08023ed0
 801b248:	08023ee4 	.word	0x08023ee4
 801b24c:	08023ba8 	.word	0x08023ba8

0801b250 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801b250:	b590      	push	{r4, r7, lr}
 801b252:	b087      	sub	sp, #28
 801b254:	af00      	add	r7, sp, #0
 801b256:	60f8      	str	r0, [r7, #12]
 801b258:	60b9      	str	r1, [r7, #8]
 801b25a:	607a      	str	r2, [r7, #4]
 801b25c:	68fb      	ldr	r3, [r7, #12]
 801b25e:	68b9      	ldr	r1, [r7, #8]
 801b260:	4618      	mov	r0, r3
 801b262:	f7ff facf 	bl	801a804 <_ZN11MockFailureC1EP10UtestShell>
 801b266:	4a10      	ldr	r2, [pc, #64]	; (801b2a8 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801b268:	68fb      	ldr	r3, [r7, #12]
 801b26a:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b272:	6878      	ldr	r0, [r7, #4]
 801b274:	f7ef ff2e 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801b278:	4602      	mov	r2, r0
 801b27a:	f107 0310 	add.w	r3, r7, #16
 801b27e:	490b      	ldr	r1, [pc, #44]	; (801b2ac <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801b280:	4618      	mov	r0, r3
 801b282:	f7f0 fc5b 	bl	800bb3c <_Z16StringFromFormatPKcz>
 801b286:	f107 0310 	add.w	r3, r7, #16
 801b28a:	4619      	mov	r1, r3
 801b28c:	4620      	mov	r0, r4
 801b28e:	f7ef fc02 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b292:	f107 0310 	add.w	r3, r7, #16
 801b296:	4618      	mov	r0, r3
 801b298:	f7ef ff49 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 801b29c:	68fb      	ldr	r3, [r7, #12]
 801b29e:	4618      	mov	r0, r3
 801b2a0:	371c      	adds	r7, #28
 801b2a2:	46bd      	mov	sp, r7
 801b2a4:	bd90      	pop	{r4, r7, pc}
 801b2a6:	bf00      	nop
 801b2a8:	08025c18 	.word	0x08025c18
 801b2ac:	08023f10 	.word	0x08023f10

0801b2b0 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801b2b0:	b590      	push	{r4, r7, lr}
 801b2b2:	b087      	sub	sp, #28
 801b2b4:	af00      	add	r7, sp, #0
 801b2b6:	60f8      	str	r0, [r7, #12]
 801b2b8:	60b9      	str	r1, [r7, #8]
 801b2ba:	607a      	str	r2, [r7, #4]
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	68b9      	ldr	r1, [r7, #8]
 801b2c0:	4618      	mov	r0, r3
 801b2c2:	f7ff fa9f 	bl	801a804 <_ZN11MockFailureC1EP10UtestShell>
 801b2c6:	4a10      	ldr	r2, [pc, #64]	; (801b308 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801b2c8:	68fb      	ldr	r3, [r7, #12]
 801b2ca:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801b2cc:	68fb      	ldr	r3, [r7, #12]
 801b2ce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b2d2:	6878      	ldr	r0, [r7, #4]
 801b2d4:	f7ef fefe 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801b2d8:	4602      	mov	r2, r0
 801b2da:	f107 0310 	add.w	r3, r7, #16
 801b2de:	490b      	ldr	r1, [pc, #44]	; (801b30c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801b2e0:	4618      	mov	r0, r3
 801b2e2:	f7f0 fc2b 	bl	800bb3c <_Z16StringFromFormatPKcz>
 801b2e6:	f107 0310 	add.w	r3, r7, #16
 801b2ea:	4619      	mov	r1, r3
 801b2ec:	4620      	mov	r0, r4
 801b2ee:	f7ef fbd2 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b2f2:	f107 0310 	add.w	r3, r7, #16
 801b2f6:	4618      	mov	r0, r3
 801b2f8:	f7ef ff19 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	4618      	mov	r0, r3
 801b300:	371c      	adds	r7, #28
 801b302:	46bd      	mov	sp, r7
 801b304:	bd90      	pop	{r4, r7, pc}
 801b306:	bf00      	nop
 801b308:	08025bec 	.word	0x08025bec
 801b30c:	08023f68 	.word	0x08023f68

0801b310 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b310:	b590      	push	{r4, r7, lr}
 801b312:	b087      	sub	sp, #28
 801b314:	af00      	add	r7, sp, #0
 801b316:	60f8      	str	r0, [r7, #12]
 801b318:	60b9      	str	r1, [r7, #8]
 801b31a:	607a      	str	r2, [r7, #4]
 801b31c:	603b      	str	r3, [r7, #0]
 801b31e:	68fb      	ldr	r3, [r7, #12]
 801b320:	68b9      	ldr	r1, [r7, #8]
 801b322:	4618      	mov	r0, r3
 801b324:	f7ff fa6e 	bl	801a804 <_ZN11MockFailureC1EP10UtestShell>
 801b328:	4a12      	ldr	r2, [pc, #72]	; (801b374 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801b32a:	68fb      	ldr	r3, [r7, #12]
 801b32c:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801b32e:	68fb      	ldr	r3, [r7, #12]
 801b330:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801b334:	6878      	ldr	r0, [r7, #4]
 801b336:	f7ef fecd 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801b33a:	4602      	mov	r2, r0
 801b33c:	f107 0010 	add.w	r0, r7, #16
 801b340:	683b      	ldr	r3, [r7, #0]
 801b342:	490d      	ldr	r1, [pc, #52]	; (801b378 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801b344:	f7f0 fbfa 	bl	800bb3c <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801b348:	f107 0310 	add.w	r3, r7, #16
 801b34c:	4619      	mov	r1, r3
 801b34e:	4620      	mov	r0, r4
 801b350:	f7ef fba1 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b354:	f107 0310 	add.w	r3, r7, #16
 801b358:	4618      	mov	r0, r3
 801b35a:	f7ef fee8 	bl	800b12e <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b362:	6879      	ldr	r1, [r7, #4]
 801b364:	4618      	mov	r0, r3
 801b366:	f7ff fad5 	bl	801a914 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	4618      	mov	r0, r3
 801b36e:	371c      	adds	r7, #28
 801b370:	46bd      	mov	sp, r7
 801b372:	bd90      	pop	{r4, r7, pc}
 801b374:	08025bc0 	.word	0x08025bc0
 801b378:	08023fb8 	.word	0x08023fb8

0801b37c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b37c:	b590      	push	{r4, r7, lr}
 801b37e:	b087      	sub	sp, #28
 801b380:	af00      	add	r7, sp, #0
 801b382:	60f8      	str	r0, [r7, #12]
 801b384:	60b9      	str	r1, [r7, #8]
 801b386:	607a      	str	r2, [r7, #4]
 801b388:	603b      	str	r3, [r7, #0]
 801b38a:	68fb      	ldr	r3, [r7, #12]
 801b38c:	68b9      	ldr	r1, [r7, #8]
 801b38e:	4618      	mov	r0, r3
 801b390:	f7ff fa38 	bl	801a804 <_ZN11MockFailureC1EP10UtestShell>
 801b394:	4a12      	ldr	r2, [pc, #72]	; (801b3e0 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801b39a:	68fb      	ldr	r3, [r7, #12]
 801b39c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b3a0:	6878      	ldr	r0, [r7, #4]
 801b3a2:	f7ef fe97 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801b3a6:	4602      	mov	r2, r0
 801b3a8:	f107 0310 	add.w	r3, r7, #16
 801b3ac:	490d      	ldr	r1, [pc, #52]	; (801b3e4 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	f7f0 fbc4 	bl	800bb3c <_Z16StringFromFormatPKcz>
 801b3b4:	f107 0310 	add.w	r3, r7, #16
 801b3b8:	4619      	mov	r1, r3
 801b3ba:	4620      	mov	r0, r4
 801b3bc:	f7ef fb6b 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b3c0:	f107 0310 	add.w	r3, r7, #16
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	f7ef feb2 	bl	800b12e <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b3ca:	68fb      	ldr	r3, [r7, #12]
 801b3cc:	683a      	ldr	r2, [r7, #0]
 801b3ce:	6879      	ldr	r1, [r7, #4]
 801b3d0:	4618      	mov	r0, r3
 801b3d2:	f7ff fa9f 	bl	801a914 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801b3d6:	68fb      	ldr	r3, [r7, #12]
 801b3d8:	4618      	mov	r0, r3
 801b3da:	371c      	adds	r7, #28
 801b3dc:	46bd      	mov	sp, r7
 801b3de:	bd90      	pop	{r4, r7, pc}
 801b3e0:	08025b94 	.word	0x08025b94
 801b3e4:	0802401c 	.word	0x0802401c

0801b3e8 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801b3e8:	b480      	push	{r7}
 801b3ea:	b083      	sub	sp, #12
 801b3ec:	af00      	add	r7, sp, #0
 801b3ee:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801b3f0:	4a04      	ldr	r2, [pc, #16]	; (801b404 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	6013      	str	r3, [r2, #0]
}
 801b3f6:	bf00      	nop
 801b3f8:	370c      	adds	r7, #12
 801b3fa:	46bd      	mov	sp, r7
 801b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b400:	4770      	bx	lr
 801b402:	bf00      	nop
 801b404:	20000d5c 	.word	0x20000d5c

0801b408 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801b408:	b580      	push	{r7, lr}
 801b40a:	b082      	sub	sp, #8
 801b40c:	af00      	add	r7, sp, #0
 801b40e:	6078      	str	r0, [r7, #4]
 801b410:	6039      	str	r1, [r7, #0]
 801b412:	4a10      	ldr	r2, [pc, #64]	; (801b454 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	601a      	str	r2, [r3, #0]
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	3304      	adds	r3, #4
 801b41c:	6839      	ldr	r1, [r7, #0]
 801b41e:	4618      	mov	r0, r3
 801b420:	f7ef fb21 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	330c      	adds	r3, #12
 801b428:	490b      	ldr	r1, [pc, #44]	; (801b458 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801b42a:	4618      	mov	r0, r3
 801b42c:	f7ef fac7 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	2200      	movs	r2, #0
 801b434:	629a      	str	r2, [r3, #40]	; 0x28
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	2200      	movs	r2, #0
 801b43a:	62da      	str	r2, [r3, #44]	; 0x2c
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	2200      	movs	r2, #0
 801b440:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	2200      	movs	r2, #0
 801b446:	619a      	str	r2, [r3, #24]
}
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	4618      	mov	r0, r3
 801b44c:	3708      	adds	r7, #8
 801b44e:	46bd      	mov	sp, r7
 801b450:	bd80      	pop	{r7, pc}
 801b452:	bf00      	nop
 801b454:	0802641c 	.word	0x0802641c
 801b458:	0802406c 	.word	0x0802406c

0801b45c <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801b45c:	b580      	push	{r7, lr}
 801b45e:	b082      	sub	sp, #8
 801b460:	af00      	add	r7, sp, #0
 801b462:	6078      	str	r0, [r7, #4]
 801b464:	4a08      	ldr	r2, [pc, #32]	; (801b488 <_ZN14MockNamedValueD1Ev+0x2c>)
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	601a      	str	r2, [r3, #0]
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	330c      	adds	r3, #12
 801b46e:	4618      	mov	r0, r3
 801b470:	f7ef fe5d 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	3304      	adds	r3, #4
 801b478:	4618      	mov	r0, r3
 801b47a:	f7ef fe58 	bl	800b12e <_ZN12SimpleStringD1Ev>
{
}
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	4618      	mov	r0, r3
 801b482:	3708      	adds	r7, #8
 801b484:	46bd      	mov	sp, r7
 801b486:	bd80      	pop	{r7, pc}
 801b488:	0802641c 	.word	0x0802641c

0801b48c <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b082      	sub	sp, #8
 801b490:	af00      	add	r7, sp, #0
 801b492:	6078      	str	r0, [r7, #4]
}
 801b494:	6878      	ldr	r0, [r7, #4]
 801b496:	f7ff ffe1 	bl	801b45c <_ZN14MockNamedValueD1Ev>
 801b49a:	2138      	movs	r1, #56	; 0x38
 801b49c:	6878      	ldr	r0, [r7, #4]
 801b49e:	f7ec fedf 	bl	8008260 <_ZdlPvj>
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	3708      	adds	r7, #8
 801b4a8:	46bd      	mov	sp, r7
 801b4aa:	bd80      	pop	{r7, pc}

0801b4ac <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801b4ac:	b590      	push	{r4, r7, lr}
 801b4ae:	b085      	sub	sp, #20
 801b4b0:	af00      	add	r7, sp, #0
 801b4b2:	6078      	str	r0, [r7, #4]
 801b4b4:	460b      	mov	r3, r1
 801b4b6:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	f103 040c 	add.w	r4, r3, #12
 801b4be:	f107 0308 	add.w	r3, r7, #8
 801b4c2:	490b      	ldr	r1, [pc, #44]	; (801b4f0 <_ZN14MockNamedValue8setValueEb+0x44>)
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	f7ef fa7a 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801b4ca:	f107 0308 	add.w	r3, r7, #8
 801b4ce:	4619      	mov	r1, r3
 801b4d0:	4620      	mov	r0, r4
 801b4d2:	f7ef fae0 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b4d6:	f107 0308 	add.w	r3, r7, #8
 801b4da:	4618      	mov	r0, r3
 801b4dc:	f7ef fe27 	bl	800b12e <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	78fa      	ldrb	r2, [r7, #3]
 801b4e4:	761a      	strb	r2, [r3, #24]
}
 801b4e6:	bf00      	nop
 801b4e8:	3714      	adds	r7, #20
 801b4ea:	46bd      	mov	sp, r7
 801b4ec:	bd90      	pop	{r4, r7, pc}
 801b4ee:	bf00      	nop
 801b4f0:	08024070 	.word	0x08024070

0801b4f4 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801b4f4:	b590      	push	{r4, r7, lr}
 801b4f6:	b085      	sub	sp, #20
 801b4f8:	af00      	add	r7, sp, #0
 801b4fa:	6078      	str	r0, [r7, #4]
 801b4fc:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	f103 040c 	add.w	r4, r3, #12
 801b504:	f107 0308 	add.w	r3, r7, #8
 801b508:	490a      	ldr	r1, [pc, #40]	; (801b534 <_ZN14MockNamedValue8setValueEj+0x40>)
 801b50a:	4618      	mov	r0, r3
 801b50c:	f7ef fa57 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801b510:	f107 0308 	add.w	r3, r7, #8
 801b514:	4619      	mov	r1, r3
 801b516:	4620      	mov	r0, r4
 801b518:	f7ef fabd 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b51c:	f107 0308 	add.w	r3, r7, #8
 801b520:	4618      	mov	r0, r3
 801b522:	f7ef fe04 	bl	800b12e <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	683a      	ldr	r2, [r7, #0]
 801b52a:	619a      	str	r2, [r3, #24]
}
 801b52c:	bf00      	nop
 801b52e:	3714      	adds	r7, #20
 801b530:	46bd      	mov	sp, r7
 801b532:	bd90      	pop	{r4, r7, pc}
 801b534:	08024078 	.word	0x08024078

0801b538 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801b538:	b590      	push	{r4, r7, lr}
 801b53a:	b085      	sub	sp, #20
 801b53c:	af00      	add	r7, sp, #0
 801b53e:	6078      	str	r0, [r7, #4]
 801b540:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	f103 040c 	add.w	r4, r3, #12
 801b548:	f107 0308 	add.w	r3, r7, #8
 801b54c:	490a      	ldr	r1, [pc, #40]	; (801b578 <_ZN14MockNamedValue8setValueEi+0x40>)
 801b54e:	4618      	mov	r0, r3
 801b550:	f7ef fa35 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801b554:	f107 0308 	add.w	r3, r7, #8
 801b558:	4619      	mov	r1, r3
 801b55a:	4620      	mov	r0, r4
 801b55c:	f7ef fa9b 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b560:	f107 0308 	add.w	r3, r7, #8
 801b564:	4618      	mov	r0, r3
 801b566:	f7ef fde2 	bl	800b12e <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	683a      	ldr	r2, [r7, #0]
 801b56e:	619a      	str	r2, [r3, #24]
}
 801b570:	bf00      	nop
 801b572:	3714      	adds	r7, #20
 801b574:	46bd      	mov	sp, r7
 801b576:	bd90      	pop	{r4, r7, pc}
 801b578:	0802406c 	.word	0x0802406c

0801b57c <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801b57c:	b590      	push	{r4, r7, lr}
 801b57e:	b085      	sub	sp, #20
 801b580:	af00      	add	r7, sp, #0
 801b582:	6078      	str	r0, [r7, #4]
 801b584:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	f103 040c 	add.w	r4, r3, #12
 801b58c:	f107 0308 	add.w	r3, r7, #8
 801b590:	490a      	ldr	r1, [pc, #40]	; (801b5bc <_ZN14MockNamedValue8setValueEl+0x40>)
 801b592:	4618      	mov	r0, r3
 801b594:	f7ef fa13 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801b598:	f107 0308 	add.w	r3, r7, #8
 801b59c:	4619      	mov	r1, r3
 801b59e:	4620      	mov	r0, r4
 801b5a0:	f7ef fa79 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b5a4:	f107 0308 	add.w	r3, r7, #8
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	f7ef fdc0 	bl	800b12e <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	683a      	ldr	r2, [r7, #0]
 801b5b2:	619a      	str	r2, [r3, #24]
}
 801b5b4:	bf00      	nop
 801b5b6:	3714      	adds	r7, #20
 801b5b8:	46bd      	mov	sp, r7
 801b5ba:	bd90      	pop	{r4, r7, pc}
 801b5bc:	08024088 	.word	0x08024088

0801b5c0 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801b5c0:	b590      	push	{r4, r7, lr}
 801b5c2:	b085      	sub	sp, #20
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	6078      	str	r0, [r7, #4]
 801b5c8:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	f103 040c 	add.w	r4, r3, #12
 801b5d0:	f107 0308 	add.w	r3, r7, #8
 801b5d4:	490a      	ldr	r1, [pc, #40]	; (801b600 <_ZN14MockNamedValue8setValueEm+0x40>)
 801b5d6:	4618      	mov	r0, r3
 801b5d8:	f7ef f9f1 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801b5dc:	f107 0308 	add.w	r3, r7, #8
 801b5e0:	4619      	mov	r1, r3
 801b5e2:	4620      	mov	r0, r4
 801b5e4:	f7ef fa57 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b5e8:	f107 0308 	add.w	r3, r7, #8
 801b5ec:	4618      	mov	r0, r3
 801b5ee:	f7ef fd9e 	bl	800b12e <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	683a      	ldr	r2, [r7, #0]
 801b5f6:	619a      	str	r2, [r3, #24]
}
 801b5f8:	bf00      	nop
 801b5fa:	3714      	adds	r7, #20
 801b5fc:	46bd      	mov	sp, r7
 801b5fe:	bd90      	pop	{r4, r7, pc}
 801b600:	08024094 	.word	0x08024094

0801b604 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801b604:	b5b0      	push	{r4, r5, r7, lr}
 801b606:	b086      	sub	sp, #24
 801b608:	af02      	add	r7, sp, #8
 801b60a:	60f8      	str	r0, [r7, #12]
 801b60c:	1d3b      	adds	r3, r7, #4
 801b60e:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801b612:	f7f6 fdb7 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801b616:	4604      	mov	r4, r0
 801b618:	6823      	ldr	r3, [r4, #0]
 801b61a:	3368      	adds	r3, #104	; 0x68
 801b61c:	681d      	ldr	r5, [r3, #0]
 801b61e:	f7f6 fdc1 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b622:	4603      	mov	r3, r0
 801b624:	9300      	str	r3, [sp, #0]
 801b626:	2367      	movs	r3, #103	; 0x67
 801b628:	4a03      	ldr	r2, [pc, #12]	; (801b638 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801b62a:	4904      	ldr	r1, [pc, #16]	; (801b63c <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801b62c:	4620      	mov	r0, r4
 801b62e:	47a8      	blx	r5
}
 801b630:	bf00      	nop
 801b632:	3710      	adds	r7, #16
 801b634:	46bd      	mov	sp, r7
 801b636:	bdb0      	pop	{r4, r5, r7, pc}
 801b638:	080240a8 	.word	0x080240a8
 801b63c:	080240c4 	.word	0x080240c4

0801b640 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801b640:	b5b0      	push	{r4, r5, r7, lr}
 801b642:	b086      	sub	sp, #24
 801b644:	af02      	add	r7, sp, #8
 801b646:	60f8      	str	r0, [r7, #12]
 801b648:	1d3b      	adds	r3, r7, #4
 801b64a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801b64e:	f7f6 fd99 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801b652:	4604      	mov	r4, r0
 801b654:	6823      	ldr	r3, [r4, #0]
 801b656:	3368      	adds	r3, #104	; 0x68
 801b658:	681d      	ldr	r5, [r3, #0]
 801b65a:	f7f6 fda3 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b65e:	4603      	mov	r3, r0
 801b660:	9300      	str	r3, [sp, #0]
 801b662:	236c      	movs	r3, #108	; 0x6c
 801b664:	4a03      	ldr	r2, [pc, #12]	; (801b674 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801b666:	4904      	ldr	r1, [pc, #16]	; (801b678 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801b668:	4620      	mov	r0, r4
 801b66a:	47a8      	blx	r5
}
 801b66c:	bf00      	nop
 801b66e:	3710      	adds	r7, #16
 801b670:	46bd      	mov	sp, r7
 801b672:	bdb0      	pop	{r4, r5, r7, pc}
 801b674:	080240a8 	.word	0x080240a8
 801b678:	080240e4 	.word	0x080240e4
 801b67c:	00000000 	.word	0x00000000

0801b680 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801b680:	b580      	push	{r7, lr}
 801b682:	b084      	sub	sp, #16
 801b684:	af00      	add	r7, sp, #0
 801b686:	60f8      	str	r0, [r7, #12]
 801b688:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801b68c:	68fb      	ldr	r3, [r7, #12]
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	3328      	adds	r3, #40	; 0x28
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801b6a8 <_ZN14MockNamedValue8setValueEd+0x28>
 801b698:	ed97 0b00 	vldr	d0, [r7]
 801b69c:	68f8      	ldr	r0, [r7, #12]
 801b69e:	4798      	blx	r3
}
 801b6a0:	bf00      	nop
 801b6a2:	3710      	adds	r7, #16
 801b6a4:	46bd      	mov	sp, r7
 801b6a6:	bd80      	pop	{r7, pc}
 801b6a8:	47ae147b 	.word	0x47ae147b
 801b6ac:	3f747ae1 	.word	0x3f747ae1

0801b6b0 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801b6b0:	b590      	push	{r4, r7, lr}
 801b6b2:	b089      	sub	sp, #36	; 0x24
 801b6b4:	af00      	add	r7, sp, #0
 801b6b6:	6178      	str	r0, [r7, #20]
 801b6b8:	ed87 0b02 	vstr	d0, [r7, #8]
 801b6bc:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801b6c0:	697b      	ldr	r3, [r7, #20]
 801b6c2:	f103 040c 	add.w	r4, r3, #12
 801b6c6:	f107 0318 	add.w	r3, r7, #24
 801b6ca:	490e      	ldr	r1, [pc, #56]	; (801b704 <_ZN14MockNamedValue8setValueEdd+0x54>)
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	f7ef f976 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801b6d2:	f107 0318 	add.w	r3, r7, #24
 801b6d6:	4619      	mov	r1, r3
 801b6d8:	4620      	mov	r0, r4
 801b6da:	f7ef f9dc 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b6de:	f107 0318 	add.w	r3, r7, #24
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	f7ef fd23 	bl	800b12e <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801b6e8:	6979      	ldr	r1, [r7, #20]
 801b6ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801b6ee:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801b6f2:	6979      	ldr	r1, [r7, #20]
 801b6f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b6f8:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801b6fc:	bf00      	nop
 801b6fe:	3724      	adds	r7, #36	; 0x24
 801b700:	46bd      	mov	sp, r7
 801b702:	bd90      	pop	{r4, r7, pc}
 801b704:	08024110 	.word	0x08024110

0801b708 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801b708:	b590      	push	{r4, r7, lr}
 801b70a:	b085      	sub	sp, #20
 801b70c:	af00      	add	r7, sp, #0
 801b70e:	6078      	str	r0, [r7, #4]
 801b710:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	f103 040c 	add.w	r4, r3, #12
 801b718:	f107 0308 	add.w	r3, r7, #8
 801b71c:	490a      	ldr	r1, [pc, #40]	; (801b748 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801b71e:	4618      	mov	r0, r3
 801b720:	f7ef f94d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801b724:	f107 0308 	add.w	r3, r7, #8
 801b728:	4619      	mov	r1, r3
 801b72a:	4620      	mov	r0, r4
 801b72c:	f7ef f9b3 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b730:	f107 0308 	add.w	r3, r7, #8
 801b734:	4618      	mov	r0, r3
 801b736:	f7ef fcfa 	bl	800b12e <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	683a      	ldr	r2, [r7, #0]
 801b73e:	619a      	str	r2, [r3, #24]
}
 801b740:	bf00      	nop
 801b742:	3714      	adds	r7, #20
 801b744:	46bd      	mov	sp, r7
 801b746:	bd90      	pop	{r4, r7, pc}
 801b748:	08024118 	.word	0x08024118

0801b74c <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801b74c:	b590      	push	{r4, r7, lr}
 801b74e:	b085      	sub	sp, #20
 801b750:	af00      	add	r7, sp, #0
 801b752:	6078      	str	r0, [r7, #4]
 801b754:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	f103 040c 	add.w	r4, r3, #12
 801b75c:	f107 0308 	add.w	r3, r7, #8
 801b760:	490a      	ldr	r1, [pc, #40]	; (801b78c <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801b762:	4618      	mov	r0, r3
 801b764:	f7ef f92b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801b768:	f107 0308 	add.w	r3, r7, #8
 801b76c:	4619      	mov	r1, r3
 801b76e:	4620      	mov	r0, r4
 801b770:	f7ef f991 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b774:	f107 0308 	add.w	r3, r7, #8
 801b778:	4618      	mov	r0, r3
 801b77a:	f7ef fcd8 	bl	800b12e <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	683a      	ldr	r2, [r7, #0]
 801b782:	619a      	str	r2, [r3, #24]
}
 801b784:	bf00      	nop
 801b786:	3714      	adds	r7, #20
 801b788:	46bd      	mov	sp, r7
 801b78a:	bd90      	pop	{r4, r7, pc}
 801b78c:	08024120 	.word	0x08024120

0801b790 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801b790:	b590      	push	{r4, r7, lr}
 801b792:	b085      	sub	sp, #20
 801b794:	af00      	add	r7, sp, #0
 801b796:	6078      	str	r0, [r7, #4]
 801b798:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	f103 040c 	add.w	r4, r3, #12
 801b7a0:	f107 0308 	add.w	r3, r7, #8
 801b7a4:	490a      	ldr	r1, [pc, #40]	; (801b7d0 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801b7a6:	4618      	mov	r0, r3
 801b7a8:	f7ef f909 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801b7ac:	f107 0308 	add.w	r3, r7, #8
 801b7b0:	4619      	mov	r1, r3
 801b7b2:	4620      	mov	r0, r4
 801b7b4:	f7ef f96f 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b7b8:	f107 0308 	add.w	r3, r7, #8
 801b7bc:	4618      	mov	r0, r3
 801b7be:	f7ef fcb6 	bl	800b12e <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	683a      	ldr	r2, [r7, #0]
 801b7c6:	619a      	str	r2, [r3, #24]
}
 801b7c8:	bf00      	nop
 801b7ca:	3714      	adds	r7, #20
 801b7cc:	46bd      	mov	sp, r7
 801b7ce:	bd90      	pop	{r4, r7, pc}
 801b7d0:	0802412c 	.word	0x0802412c

0801b7d4 <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801b7d4:	b590      	push	{r4, r7, lr}
 801b7d6:	b085      	sub	sp, #20
 801b7d8:	af00      	add	r7, sp, #0
 801b7da:	6078      	str	r0, [r7, #4]
 801b7dc:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	f103 040c 	add.w	r4, r3, #12
 801b7e4:	f107 0308 	add.w	r3, r7, #8
 801b7e8:	490a      	ldr	r1, [pc, #40]	; (801b814 <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801b7ea:	4618      	mov	r0, r3
 801b7ec:	f7ef f8e7 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801b7f0:	f107 0308 	add.w	r3, r7, #8
 801b7f4:	4619      	mov	r1, r3
 801b7f6:	4620      	mov	r0, r4
 801b7f8:	f7ef f94d 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b7fc:	f107 0308 	add.w	r3, r7, #8
 801b800:	4618      	mov	r0, r3
 801b802:	f7ef fc94 	bl	800b12e <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	683a      	ldr	r2, [r7, #0]
 801b80a:	619a      	str	r2, [r3, #24]
}
 801b80c:	bf00      	nop
 801b80e:	3714      	adds	r7, #20
 801b810:	46bd      	mov	sp, r7
 801b812:	bd90      	pop	{r4, r7, pc}
 801b814:	08024138 	.word	0x08024138

0801b818 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801b818:	b590      	push	{r4, r7, lr}
 801b81a:	b087      	sub	sp, #28
 801b81c:	af00      	add	r7, sp, #0
 801b81e:	60f8      	str	r0, [r7, #12]
 801b820:	60b9      	str	r1, [r7, #8]
 801b822:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801b824:	68fb      	ldr	r3, [r7, #12]
 801b826:	f103 040c 	add.w	r4, r3, #12
 801b82a:	f107 0310 	add.w	r3, r7, #16
 801b82e:	490c      	ldr	r1, [pc, #48]	; (801b860 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801b830:	4618      	mov	r0, r3
 801b832:	f7ef f8c4 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801b836:	f107 0310 	add.w	r3, r7, #16
 801b83a:	4619      	mov	r1, r3
 801b83c:	4620      	mov	r0, r4
 801b83e:	f7ef f92a 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b842:	f107 0310 	add.w	r3, r7, #16
 801b846:	4618      	mov	r0, r3
 801b848:	f7ef fc71 	bl	800b12e <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801b84c:	68fb      	ldr	r3, [r7, #12]
 801b84e:	68ba      	ldr	r2, [r7, #8]
 801b850:	619a      	str	r2, [r3, #24]
    size_ = size;
 801b852:	68fb      	ldr	r3, [r7, #12]
 801b854:	687a      	ldr	r2, [r7, #4]
 801b856:	629a      	str	r2, [r3, #40]	; 0x28
}
 801b858:	bf00      	nop
 801b85a:	371c      	adds	r7, #28
 801b85c:	46bd      	mov	sp, r7
 801b85e:	bd90      	pop	{r4, r7, pc}
 801b860:	08024144 	.word	0x08024144

0801b864 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801b864:	b580      	push	{r7, lr}
 801b866:	b084      	sub	sp, #16
 801b868:	af00      	add	r7, sp, #0
 801b86a:	60f8      	str	r0, [r7, #12]
 801b86c:	60b9      	str	r1, [r7, #8]
 801b86e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801b870:	68fb      	ldr	r3, [r7, #12]
 801b872:	330c      	adds	r3, #12
 801b874:	68b9      	ldr	r1, [r7, #8]
 801b876:	4618      	mov	r0, r3
 801b878:	f7ef f90d 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801b87c:	68fb      	ldr	r3, [r7, #12]
 801b87e:	687a      	ldr	r2, [r7, #4]
 801b880:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801b882:	4b11      	ldr	r3, [pc, #68]	; (801b8c8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801b884:	681b      	ldr	r3, [r3, #0]
 801b886:	2b00      	cmp	r3, #0
 801b888:	d019      	beq.n	801b8be <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801b88a:	4b0f      	ldr	r3, [pc, #60]	; (801b8c8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801b88c:	681a      	ldr	r2, [r3, #0]
 801b88e:	4b0e      	ldr	r3, [pc, #56]	; (801b8c8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	3314      	adds	r3, #20
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	68b9      	ldr	r1, [r7, #8]
 801b89a:	4610      	mov	r0, r2
 801b89c:	4798      	blx	r3
 801b89e:	4602      	mov	r2, r0
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801b8a4:	4b08      	ldr	r3, [pc, #32]	; (801b8c8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801b8a6:	681a      	ldr	r2, [r3, #0]
 801b8a8:	4b07      	ldr	r3, [pc, #28]	; (801b8c8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	3318      	adds	r3, #24
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	68b9      	ldr	r1, [r7, #8]
 801b8b4:	4610      	mov	r0, r2
 801b8b6:	4798      	blx	r3
 801b8b8:	4602      	mov	r2, r0
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801b8be:	bf00      	nop
 801b8c0:	3710      	adds	r7, #16
 801b8c2:	46bd      	mov	sp, r7
 801b8c4:	bd80      	pop	{r7, pc}
 801b8c6:	bf00      	nop
 801b8c8:	20000d5c 	.word	0x20000d5c

0801b8cc <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801b8cc:	b580      	push	{r7, lr}
 801b8ce:	b084      	sub	sp, #16
 801b8d0:	af00      	add	r7, sp, #0
 801b8d2:	60f8      	str	r0, [r7, #12]
 801b8d4:	60b9      	str	r1, [r7, #8]
 801b8d6:	607a      	str	r2, [r7, #4]
    type_ = type;
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	330c      	adds	r3, #12
 801b8dc:	68b9      	ldr	r1, [r7, #8]
 801b8de:	4618      	mov	r0, r3
 801b8e0:	f7ef f8d9 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801b8e4:	68fb      	ldr	r3, [r7, #12]
 801b8e6:	687a      	ldr	r2, [r7, #4]
 801b8e8:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801b8ea:	4b11      	ldr	r3, [pc, #68]	; (801b930 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d019      	beq.n	801b926 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801b8f2:	4b0f      	ldr	r3, [pc, #60]	; (801b930 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801b8f4:	681a      	ldr	r2, [r3, #0]
 801b8f6:	4b0e      	ldr	r3, [pc, #56]	; (801b930 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	681b      	ldr	r3, [r3, #0]
 801b8fc:	3314      	adds	r3, #20
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	68b9      	ldr	r1, [r7, #8]
 801b902:	4610      	mov	r0, r2
 801b904:	4798      	blx	r3
 801b906:	4602      	mov	r2, r0
 801b908:	68fb      	ldr	r3, [r7, #12]
 801b90a:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801b90c:	4b08      	ldr	r3, [pc, #32]	; (801b930 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801b90e:	681a      	ldr	r2, [r3, #0]
 801b910:	4b07      	ldr	r3, [pc, #28]	; (801b930 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	3318      	adds	r3, #24
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	68b9      	ldr	r1, [r7, #8]
 801b91c:	4610      	mov	r0, r2
 801b91e:	4798      	blx	r3
 801b920:	4602      	mov	r2, r0
 801b922:	68fb      	ldr	r3, [r7, #12]
 801b924:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801b926:	bf00      	nop
 801b928:	3710      	adds	r7, #16
 801b92a:	46bd      	mov	sp, r7
 801b92c:	bd80      	pop	{r7, pc}
 801b92e:	bf00      	nop
 801b930:	20000d5c 	.word	0x20000d5c

0801b934 <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801b934:	b480      	push	{r7}
 801b936:	b083      	sub	sp, #12
 801b938:	af00      	add	r7, sp, #0
 801b93a:	6078      	str	r0, [r7, #4]
 801b93c:	6039      	str	r1, [r7, #0]
    size_ = size;
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	683a      	ldr	r2, [r7, #0]
 801b942:	629a      	str	r2, [r3, #40]	; 0x28
}
 801b944:	bf00      	nop
 801b946:	370c      	adds	r7, #12
 801b948:	46bd      	mov	sp, r7
 801b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b94e:	4770      	bx	lr

0801b950 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801b950:	b590      	push	{r4, r7, lr}
 801b952:	b085      	sub	sp, #20
 801b954:	af00      	add	r7, sp, #0
 801b956:	6078      	str	r0, [r7, #4]
 801b958:	6039      	str	r1, [r7, #0]
    name_ = name;
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	1d1c      	adds	r4, r3, #4
 801b95e:	f107 0308 	add.w	r3, r7, #8
 801b962:	6839      	ldr	r1, [r7, #0]
 801b964:	4618      	mov	r0, r3
 801b966:	f7ef f82a 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801b96a:	f107 0308 	add.w	r3, r7, #8
 801b96e:	4619      	mov	r1, r3
 801b970:	4620      	mov	r0, r4
 801b972:	f7ef f890 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
 801b976:	f107 0308 	add.w	r3, r7, #8
 801b97a:	4618      	mov	r0, r3
 801b97c:	f7ef fbd7 	bl	800b12e <_ZN12SimpleStringD1Ev>
}
 801b980:	bf00      	nop
 801b982:	3714      	adds	r7, #20
 801b984:	46bd      	mov	sp, r7
 801b986:	bd90      	pop	{r4, r7, pc}

0801b988 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801b988:	b580      	push	{r7, lr}
 801b98a:	b082      	sub	sp, #8
 801b98c:	af00      	add	r7, sp, #0
 801b98e:	6078      	str	r0, [r7, #4]
 801b990:	6039      	str	r1, [r7, #0]
    return name_;
 801b992:	683b      	ldr	r3, [r7, #0]
 801b994:	3304      	adds	r3, #4
 801b996:	4619      	mov	r1, r3
 801b998:	6878      	ldr	r0, [r7, #4]
 801b99a:	f7ef f864 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
}
 801b99e:	6878      	ldr	r0, [r7, #4]
 801b9a0:	3708      	adds	r7, #8
 801b9a2:	46bd      	mov	sp, r7
 801b9a4:	bd80      	pop	{r7, pc}

0801b9a6 <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801b9a6:	b580      	push	{r7, lr}
 801b9a8:	b082      	sub	sp, #8
 801b9aa:	af00      	add	r7, sp, #0
 801b9ac:	6078      	str	r0, [r7, #4]
 801b9ae:	6039      	str	r1, [r7, #0]
    return type_;
 801b9b0:	683b      	ldr	r3, [r7, #0]
 801b9b2:	330c      	adds	r3, #12
 801b9b4:	4619      	mov	r1, r3
 801b9b6:	6878      	ldr	r0, [r7, #4]
 801b9b8:	f7ef f855 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
}
 801b9bc:	6878      	ldr	r0, [r7, #4]
 801b9be:	3708      	adds	r7, #8
 801b9c0:	46bd      	mov	sp, r7
 801b9c2:	bd80      	pop	{r7, pc}

0801b9c4 <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801b9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b9c6:	b087      	sub	sp, #28
 801b9c8:	af04      	add	r7, sp, #16
 801b9ca:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801b9cc:	f7f6 fbda 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801b9d0:	4604      	mov	r4, r0
 801b9d2:	6823      	ldr	r3, [r4, #0]
 801b9d4:	3324      	adds	r3, #36	; 0x24
 801b9d6:	681d      	ldr	r5, [r3, #0]
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	330c      	adds	r3, #12
 801b9dc:	4618      	mov	r0, r3
 801b9de:	f7ef fb79 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801b9e2:	4606      	mov	r6, r0
 801b9e4:	f7f6 fbde 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b9e8:	4603      	mov	r3, r0
 801b9ea:	9302      	str	r3, [sp, #8]
 801b9ec:	23c8      	movs	r3, #200	; 0xc8
 801b9ee:	9301      	str	r3, [sp, #4]
 801b9f0:	4b06      	ldr	r3, [pc, #24]	; (801ba0c <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801b9f2:	9300      	str	r3, [sp, #0]
 801b9f4:	2300      	movs	r3, #0
 801b9f6:	4632      	mov	r2, r6
 801b9f8:	4905      	ldr	r1, [pc, #20]	; (801ba10 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801b9fa:	4620      	mov	r0, r4
 801b9fc:	47a8      	blx	r5
    return value_.boolValue_;
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	7e1b      	ldrb	r3, [r3, #24]
}
 801ba02:	4618      	mov	r0, r3
 801ba04:	370c      	adds	r7, #12
 801ba06:	46bd      	mov	sp, r7
 801ba08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba0a:	bf00      	nop
 801ba0c:	080240a8 	.word	0x080240a8
 801ba10:	08024070 	.word	0x08024070

0801ba14 <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801ba14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba16:	b089      	sub	sp, #36	; 0x24
 801ba18:	af04      	add	r7, sp, #16
 801ba1a:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	f103 040c 	add.w	r4, r3, #12
 801ba22:	f107 0308 	add.w	r3, r7, #8
 801ba26:	4920      	ldr	r1, [pc, #128]	; (801baa8 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801ba28:	4618      	mov	r0, r3
 801ba2a:	f7ee ffc8 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801ba2e:	2501      	movs	r5, #1
 801ba30:	f107 0308 	add.w	r3, r7, #8
 801ba34:	4619      	mov	r1, r3
 801ba36:	4620      	mov	r0, r4
 801ba38:	f7ef fb85 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801ba3c:	4603      	mov	r3, r0
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d005      	beq.n	801ba4e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	699b      	ldr	r3, [r3, #24]
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	db01      	blt.n	801ba4e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801ba4a:	2401      	movs	r4, #1
 801ba4c:	e000      	b.n	801ba50 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801ba4e:	2400      	movs	r4, #0
 801ba50:	2d00      	cmp	r5, #0
 801ba52:	d004      	beq.n	801ba5e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801ba54:	f107 0308 	add.w	r3, r7, #8
 801ba58:	4618      	mov	r0, r3
 801ba5a:	f7ef fb68 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801ba5e:	2c00      	cmp	r4, #0
 801ba60:	d002      	beq.n	801ba68 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	699b      	ldr	r3, [r3, #24]
 801ba66:	e01a      	b.n	801ba9e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801ba68:	f7f6 fb8c 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801ba6c:	4604      	mov	r4, r0
 801ba6e:	6823      	ldr	r3, [r4, #0]
 801ba70:	3324      	adds	r3, #36	; 0x24
 801ba72:	681d      	ldr	r5, [r3, #0]
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	330c      	adds	r3, #12
 801ba78:	4618      	mov	r0, r3
 801ba7a:	f7ef fb2b 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801ba7e:	4606      	mov	r6, r0
 801ba80:	f7f6 fb90 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ba84:	4603      	mov	r3, r0
 801ba86:	9302      	str	r3, [sp, #8]
 801ba88:	23d2      	movs	r3, #210	; 0xd2
 801ba8a:	9301      	str	r3, [sp, #4]
 801ba8c:	4b07      	ldr	r3, [pc, #28]	; (801baac <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801ba8e:	9300      	str	r3, [sp, #0]
 801ba90:	2300      	movs	r3, #0
 801ba92:	4632      	mov	r2, r6
 801ba94:	4906      	ldr	r1, [pc, #24]	; (801bab0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801ba96:	4620      	mov	r0, r4
 801ba98:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	699b      	ldr	r3, [r3, #24]
    }
}
 801ba9e:	4618      	mov	r0, r3
 801baa0:	3714      	adds	r7, #20
 801baa2:	46bd      	mov	sp, r7
 801baa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801baa6:	bf00      	nop
 801baa8:	0802406c 	.word	0x0802406c
 801baac:	080240a8 	.word	0x080240a8
 801bab0:	08024078 	.word	0x08024078

0801bab4 <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801bab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bab6:	b087      	sub	sp, #28
 801bab8:	af04      	add	r7, sp, #16
 801baba:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801babc:	f7f6 fb62 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801bac0:	4604      	mov	r4, r0
 801bac2:	6823      	ldr	r3, [r4, #0]
 801bac4:	3324      	adds	r3, #36	; 0x24
 801bac6:	681d      	ldr	r5, [r3, #0]
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	330c      	adds	r3, #12
 801bacc:	4618      	mov	r0, r3
 801bace:	f7ef fb01 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801bad2:	4606      	mov	r6, r0
 801bad4:	f7f6 fb66 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bad8:	4603      	mov	r3, r0
 801bada:	9302      	str	r3, [sp, #8]
 801badc:	23d9      	movs	r3, #217	; 0xd9
 801bade:	9301      	str	r3, [sp, #4]
 801bae0:	4b06      	ldr	r3, [pc, #24]	; (801bafc <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801bae2:	9300      	str	r3, [sp, #0]
 801bae4:	2300      	movs	r3, #0
 801bae6:	4632      	mov	r2, r6
 801bae8:	4905      	ldr	r1, [pc, #20]	; (801bb00 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801baea:	4620      	mov	r0, r4
 801baec:	47a8      	blx	r5
    return value_.intValue_;
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	699b      	ldr	r3, [r3, #24]
}
 801baf2:	4618      	mov	r0, r3
 801baf4:	370c      	adds	r7, #12
 801baf6:	46bd      	mov	sp, r7
 801baf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bafa:	bf00      	nop
 801bafc:	080240a8 	.word	0x080240a8
 801bb00:	0802406c 	.word	0x0802406c

0801bb04 <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801bb04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb06:	b08b      	sub	sp, #44	; 0x2c
 801bb08:	af04      	add	r7, sp, #16
 801bb0a:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	f103 040c 	add.w	r4, r3, #12
 801bb12:	f107 0308 	add.w	r3, r7, #8
 801bb16:	4928      	ldr	r1, [pc, #160]	; (801bbb8 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801bb18:	4618      	mov	r0, r3
 801bb1a:	f7ee ff50 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801bb1e:	f107 0308 	add.w	r3, r7, #8
 801bb22:	4619      	mov	r1, r3
 801bb24:	4620      	mov	r0, r4
 801bb26:	f7ef fb0e 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801bb2a:	4603      	mov	r3, r0
 801bb2c:	461c      	mov	r4, r3
 801bb2e:	f107 0308 	add.w	r3, r7, #8
 801bb32:	4618      	mov	r0, r3
 801bb34:	f7ef fafb 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801bb38:	2c00      	cmp	r4, #0
 801bb3a:	d002      	beq.n	801bb42 <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	699b      	ldr	r3, [r3, #24]
 801bb40:	e035      	b.n	801bbae <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	f103 040c 	add.w	r4, r3, #12
 801bb48:	f107 0310 	add.w	r3, r7, #16
 801bb4c:	491b      	ldr	r1, [pc, #108]	; (801bbbc <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801bb4e:	4618      	mov	r0, r3
 801bb50:	f7ee ff35 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801bb54:	f107 0310 	add.w	r3, r7, #16
 801bb58:	4619      	mov	r1, r3
 801bb5a:	4620      	mov	r0, r4
 801bb5c:	f7ef faf3 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801bb60:	4603      	mov	r3, r0
 801bb62:	461c      	mov	r4, r3
 801bb64:	f107 0310 	add.w	r3, r7, #16
 801bb68:	4618      	mov	r0, r3
 801bb6a:	f7ef fae0 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801bb6e:	2c00      	cmp	r4, #0
 801bb70:	d002      	beq.n	801bb78 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	699b      	ldr	r3, [r3, #24]
 801bb76:	e01a      	b.n	801bbae <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801bb78:	f7f6 fb04 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801bb7c:	4604      	mov	r4, r0
 801bb7e:	6823      	ldr	r3, [r4, #0]
 801bb80:	3324      	adds	r3, #36	; 0x24
 801bb82:	681d      	ldr	r5, [r3, #0]
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	330c      	adds	r3, #12
 801bb88:	4618      	mov	r0, r3
 801bb8a:	f7ef faa3 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801bb8e:	4606      	mov	r6, r0
 801bb90:	f7f6 fb08 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bb94:	4603      	mov	r3, r0
 801bb96:	9302      	str	r3, [sp, #8]
 801bb98:	23e5      	movs	r3, #229	; 0xe5
 801bb9a:	9301      	str	r3, [sp, #4]
 801bb9c:	4b08      	ldr	r3, [pc, #32]	; (801bbc0 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801bb9e:	9300      	str	r3, [sp, #0]
 801bba0:	2300      	movs	r3, #0
 801bba2:	4632      	mov	r2, r6
 801bba4:	4907      	ldr	r1, [pc, #28]	; (801bbc4 <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801bba6:	4620      	mov	r0, r4
 801bba8:	47a8      	blx	r5
        return value_.longIntValue_;
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	699b      	ldr	r3, [r3, #24]
    }
}
 801bbae:	4618      	mov	r0, r3
 801bbb0:	371c      	adds	r7, #28
 801bbb2:	46bd      	mov	sp, r7
 801bbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bbb6:	bf00      	nop
 801bbb8:	0802406c 	.word	0x0802406c
 801bbbc:	08024078 	.word	0x08024078
 801bbc0:	080240a8 	.word	0x080240a8
 801bbc4:	08024088 	.word	0x08024088

0801bbc8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801bbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bbca:	b08d      	sub	sp, #52	; 0x34
 801bbcc:	af04      	add	r7, sp, #16
 801bbce:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	f103 040c 	add.w	r4, r3, #12
 801bbd6:	f107 0308 	add.w	r3, r7, #8
 801bbda:	4940      	ldr	r1, [pc, #256]	; (801bcdc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801bbdc:	4618      	mov	r0, r3
 801bbde:	f7ee feee 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801bbe2:	f107 0308 	add.w	r3, r7, #8
 801bbe6:	4619      	mov	r1, r3
 801bbe8:	4620      	mov	r0, r4
 801bbea:	f7ef faac 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801bbee:	4603      	mov	r3, r0
 801bbf0:	461c      	mov	r4, r3
 801bbf2:	f107 0308 	add.w	r3, r7, #8
 801bbf6:	4618      	mov	r0, r3
 801bbf8:	f7ef fa99 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801bbfc:	2c00      	cmp	r4, #0
 801bbfe:	d002      	beq.n	801bc06 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	699b      	ldr	r3, [r3, #24]
 801bc04:	e066      	b.n	801bcd4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	f103 040c 	add.w	r4, r3, #12
 801bc0c:	f107 0310 	add.w	r3, r7, #16
 801bc10:	4933      	ldr	r1, [pc, #204]	; (801bce0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801bc12:	4618      	mov	r0, r3
 801bc14:	f7ee fed3 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801bc18:	2501      	movs	r5, #1
 801bc1a:	f107 0310 	add.w	r3, r7, #16
 801bc1e:	4619      	mov	r1, r3
 801bc20:	4620      	mov	r0, r4
 801bc22:	f7ef fa90 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801bc26:	4603      	mov	r3, r0
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d005      	beq.n	801bc38 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	699b      	ldr	r3, [r3, #24]
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	db01      	blt.n	801bc38 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801bc34:	2401      	movs	r4, #1
 801bc36:	e000      	b.n	801bc3a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801bc38:	2400      	movs	r4, #0
 801bc3a:	2d00      	cmp	r5, #0
 801bc3c:	d004      	beq.n	801bc48 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801bc3e:	f107 0310 	add.w	r3, r7, #16
 801bc42:	4618      	mov	r0, r3
 801bc44:	f7ef fa73 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801bc48:	2c00      	cmp	r4, #0
 801bc4a:	d002      	beq.n	801bc52 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	699b      	ldr	r3, [r3, #24]
 801bc50:	e040      	b.n	801bcd4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	f103 040c 	add.w	r4, r3, #12
 801bc58:	f107 0318 	add.w	r3, r7, #24
 801bc5c:	4921      	ldr	r1, [pc, #132]	; (801bce4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801bc5e:	4618      	mov	r0, r3
 801bc60:	f7ee fead 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801bc64:	2501      	movs	r5, #1
 801bc66:	f107 0318 	add.w	r3, r7, #24
 801bc6a:	4619      	mov	r1, r3
 801bc6c:	4620      	mov	r0, r4
 801bc6e:	f7ef fa6a 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801bc72:	4603      	mov	r3, r0
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d005      	beq.n	801bc84 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	699b      	ldr	r3, [r3, #24]
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	db01      	blt.n	801bc84 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801bc80:	2401      	movs	r4, #1
 801bc82:	e000      	b.n	801bc86 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801bc84:	2400      	movs	r4, #0
 801bc86:	2d00      	cmp	r5, #0
 801bc88:	d004      	beq.n	801bc94 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801bc8a:	f107 0318 	add.w	r3, r7, #24
 801bc8e:	4618      	mov	r0, r3
 801bc90:	f7ef fa4d 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801bc94:	2c00      	cmp	r4, #0
 801bc96:	d002      	beq.n	801bc9e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	699b      	ldr	r3, [r3, #24]
 801bc9c:	e01a      	b.n	801bcd4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801bc9e:	f7f6 fa71 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801bca2:	4604      	mov	r4, r0
 801bca4:	6823      	ldr	r3, [r4, #0]
 801bca6:	3324      	adds	r3, #36	; 0x24
 801bca8:	681d      	ldr	r5, [r3, #0]
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	330c      	adds	r3, #12
 801bcae:	4618      	mov	r0, r3
 801bcb0:	f7ef fa10 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801bcb4:	4606      	mov	r6, r0
 801bcb6:	f7f6 fa75 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bcba:	4603      	mov	r3, r0
 801bcbc:	9302      	str	r3, [sp, #8]
 801bcbe:	23f4      	movs	r3, #244	; 0xf4
 801bcc0:	9301      	str	r3, [sp, #4]
 801bcc2:	4b09      	ldr	r3, [pc, #36]	; (801bce8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801bcc4:	9300      	str	r3, [sp, #0]
 801bcc6:	2300      	movs	r3, #0
 801bcc8:	4632      	mov	r2, r6
 801bcca:	4908      	ldr	r1, [pc, #32]	; (801bcec <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801bccc:	4620      	mov	r0, r4
 801bcce:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	699b      	ldr	r3, [r3, #24]
    }
}
 801bcd4:	4618      	mov	r0, r3
 801bcd6:	3724      	adds	r7, #36	; 0x24
 801bcd8:	46bd      	mov	sp, r7
 801bcda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bcdc:	08024078 	.word	0x08024078
 801bce0:	0802406c 	.word	0x0802406c
 801bce4:	08024088 	.word	0x08024088
 801bce8:	080240a8 	.word	0x080240a8
 801bcec:	08024094 	.word	0x08024094

0801bcf0 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801bcf0:	b5b0      	push	{r4, r5, r7, lr}
 801bcf2:	b084      	sub	sp, #16
 801bcf4:	af02      	add	r7, sp, #8
 801bcf6:	6078      	str	r0, [r7, #4]
 801bcf8:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801bcfa:	f7f6 fa43 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801bcfe:	4604      	mov	r4, r0
 801bd00:	6823      	ldr	r3, [r4, #0]
 801bd02:	3368      	adds	r3, #104	; 0x68
 801bd04:	681d      	ldr	r5, [r3, #0]
 801bd06:	f7f6 fa4d 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bd0a:	4603      	mov	r3, r0
 801bd0c:	9300      	str	r3, [sp, #0]
 801bd0e:	f240 1323 	movw	r3, #291	; 0x123
 801bd12:	4a06      	ldr	r2, [pc, #24]	; (801bd2c <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801bd14:	4906      	ldr	r1, [pc, #24]	; (801bd30 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801bd16:	4620      	mov	r0, r4
 801bd18:	47a8      	blx	r5
    return cpputest_longlong(0);
 801bd1a:	2100      	movs	r1, #0
 801bd1c:	6878      	ldr	r0, [r7, #4]
 801bd1e:	f7ec fe85 	bl	8008a2c <_ZN17cpputest_longlongC1Ei>
}
 801bd22:	6878      	ldr	r0, [r7, #4]
 801bd24:	3708      	adds	r7, #8
 801bd26:	46bd      	mov	sp, r7
 801bd28:	bdb0      	pop	{r4, r5, r7, pc}
 801bd2a:	bf00      	nop
 801bd2c:	080240a8 	.word	0x080240a8
 801bd30:	080240c4 	.word	0x080240c4

0801bd34 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801bd34:	b5b0      	push	{r4, r5, r7, lr}
 801bd36:	b084      	sub	sp, #16
 801bd38:	af02      	add	r7, sp, #8
 801bd3a:	6078      	str	r0, [r7, #4]
 801bd3c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801bd3e:	f7f6 fa21 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801bd42:	4604      	mov	r4, r0
 801bd44:	6823      	ldr	r3, [r4, #0]
 801bd46:	3368      	adds	r3, #104	; 0x68
 801bd48:	681d      	ldr	r5, [r3, #0]
 801bd4a:	f7f6 fa2b 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bd4e:	4603      	mov	r3, r0
 801bd50:	9300      	str	r3, [sp, #0]
 801bd52:	f240 1329 	movw	r3, #297	; 0x129
 801bd56:	4a06      	ldr	r2, [pc, #24]	; (801bd70 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801bd58:	4906      	ldr	r1, [pc, #24]	; (801bd74 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801bd5a:	4620      	mov	r0, r4
 801bd5c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801bd5e:	2100      	movs	r1, #0
 801bd60:	6878      	ldr	r0, [r7, #4]
 801bd62:	f7ec fe6f 	bl	8008a44 <_ZN18cpputest_ulonglongC1Ei>
}
 801bd66:	6878      	ldr	r0, [r7, #4]
 801bd68:	3708      	adds	r7, #8
 801bd6a:	46bd      	mov	sp, r7
 801bd6c:	bdb0      	pop	{r4, r5, r7, pc}
 801bd6e:	bf00      	nop
 801bd70:	080240a8 	.word	0x080240a8
 801bd74:	080240e4 	.word	0x080240e4

0801bd78 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801bd78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd7a:	b087      	sub	sp, #28
 801bd7c:	af04      	add	r7, sp, #16
 801bd7e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801bd80:	f7f6 fa00 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801bd84:	4604      	mov	r4, r0
 801bd86:	6823      	ldr	r3, [r4, #0]
 801bd88:	3324      	adds	r3, #36	; 0x24
 801bd8a:	681d      	ldr	r5, [r3, #0]
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	330c      	adds	r3, #12
 801bd90:	4618      	mov	r0, r3
 801bd92:	f7ef f99f 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801bd96:	4606      	mov	r6, r0
 801bd98:	f7f6 fa04 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bd9c:	4603      	mov	r3, r0
 801bd9e:	9302      	str	r3, [sp, #8]
 801bda0:	f240 1331 	movw	r3, #305	; 0x131
 801bda4:	9301      	str	r3, [sp, #4]
 801bda6:	4b09      	ldr	r3, [pc, #36]	; (801bdcc <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801bda8:	9300      	str	r3, [sp, #0]
 801bdaa:	2300      	movs	r3, #0
 801bdac:	4632      	mov	r2, r6
 801bdae:	4908      	ldr	r1, [pc, #32]	; (801bdd0 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801bdb0:	4620      	mov	r0, r4
 801bdb2:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801bdba:	ec43 2b17 	vmov	d7, r2, r3
}
 801bdbe:	eeb0 0a47 	vmov.f32	s0, s14
 801bdc2:	eef0 0a67 	vmov.f32	s1, s15
 801bdc6:	370c      	adds	r7, #12
 801bdc8:	46bd      	mov	sp, r7
 801bdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bdcc:	080240a8 	.word	0x080240a8
 801bdd0:	08024110 	.word	0x08024110

0801bdd4 <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801bdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bdd6:	b087      	sub	sp, #28
 801bdd8:	af04      	add	r7, sp, #16
 801bdda:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801bddc:	f7f6 f9d2 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801bde0:	4604      	mov	r4, r0
 801bde2:	6823      	ldr	r3, [r4, #0]
 801bde4:	3324      	adds	r3, #36	; 0x24
 801bde6:	681d      	ldr	r5, [r3, #0]
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	330c      	adds	r3, #12
 801bdec:	4618      	mov	r0, r3
 801bdee:	f7ef f971 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801bdf2:	4606      	mov	r6, r0
 801bdf4:	f7f6 f9d6 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bdf8:	4603      	mov	r3, r0
 801bdfa:	9302      	str	r3, [sp, #8]
 801bdfc:	f240 1337 	movw	r3, #311	; 0x137
 801be00:	9301      	str	r3, [sp, #4]
 801be02:	4b09      	ldr	r3, [pc, #36]	; (801be28 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801be04:	9300      	str	r3, [sp, #0]
 801be06:	2300      	movs	r3, #0
 801be08:	4632      	mov	r2, r6
 801be0a:	4908      	ldr	r1, [pc, #32]	; (801be2c <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801be0c:	4620      	mov	r0, r4
 801be0e:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801be16:	ec43 2b17 	vmov	d7, r2, r3
}
 801be1a:	eeb0 0a47 	vmov.f32	s0, s14
 801be1e:	eef0 0a67 	vmov.f32	s1, s15
 801be22:	370c      	adds	r7, #12
 801be24:	46bd      	mov	sp, r7
 801be26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be28:	080240a8 	.word	0x080240a8
 801be2c:	08024110 	.word	0x08024110

0801be30 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801be30:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be32:	b087      	sub	sp, #28
 801be34:	af04      	add	r7, sp, #16
 801be36:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801be38:	f7f6 f9a4 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801be3c:	4604      	mov	r4, r0
 801be3e:	6823      	ldr	r3, [r4, #0]
 801be40:	3324      	adds	r3, #36	; 0x24
 801be42:	681d      	ldr	r5, [r3, #0]
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	330c      	adds	r3, #12
 801be48:	4618      	mov	r0, r3
 801be4a:	f7ef f943 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801be4e:	4606      	mov	r6, r0
 801be50:	f7f6 f9a8 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801be54:	4603      	mov	r3, r0
 801be56:	9302      	str	r3, [sp, #8]
 801be58:	f240 133d 	movw	r3, #317	; 0x13d
 801be5c:	9301      	str	r3, [sp, #4]
 801be5e:	4b06      	ldr	r3, [pc, #24]	; (801be78 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801be60:	9300      	str	r3, [sp, #0]
 801be62:	2300      	movs	r3, #0
 801be64:	4632      	mov	r2, r6
 801be66:	4905      	ldr	r1, [pc, #20]	; (801be7c <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801be68:	4620      	mov	r0, r4
 801be6a:	47a8      	blx	r5
    return value_.stringValue_;
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	699b      	ldr	r3, [r3, #24]
}
 801be70:	4618      	mov	r0, r3
 801be72:	370c      	adds	r7, #12
 801be74:	46bd      	mov	sp, r7
 801be76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be78:	080240a8 	.word	0x080240a8
 801be7c:	08024138 	.word	0x08024138

0801be80 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801be80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be82:	b087      	sub	sp, #28
 801be84:	af04      	add	r7, sp, #16
 801be86:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801be88:	f7f6 f97c 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801be8c:	4604      	mov	r4, r0
 801be8e:	6823      	ldr	r3, [r4, #0]
 801be90:	3324      	adds	r3, #36	; 0x24
 801be92:	681d      	ldr	r5, [r3, #0]
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	330c      	adds	r3, #12
 801be98:	4618      	mov	r0, r3
 801be9a:	f7ef f91b 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801be9e:	4606      	mov	r6, r0
 801bea0:	f7f6 f980 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bea4:	4603      	mov	r3, r0
 801bea6:	9302      	str	r3, [sp, #8]
 801bea8:	f240 1343 	movw	r3, #323	; 0x143
 801beac:	9301      	str	r3, [sp, #4]
 801beae:	4b06      	ldr	r3, [pc, #24]	; (801bec8 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801beb0:	9300      	str	r3, [sp, #0]
 801beb2:	2300      	movs	r3, #0
 801beb4:	4632      	mov	r2, r6
 801beb6:	4905      	ldr	r1, [pc, #20]	; (801becc <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801beb8:	4620      	mov	r0, r4
 801beba:	47a8      	blx	r5
    return value_.pointerValue_;
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	699b      	ldr	r3, [r3, #24]
}
 801bec0:	4618      	mov	r0, r3
 801bec2:	370c      	adds	r7, #12
 801bec4:	46bd      	mov	sp, r7
 801bec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bec8:	080240a8 	.word	0x080240a8
 801becc:	08024118 	.word	0x08024118

0801bed0 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801bed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bed2:	b087      	sub	sp, #28
 801bed4:	af04      	add	r7, sp, #16
 801bed6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801bed8:	f7f6 f954 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801bedc:	4604      	mov	r4, r0
 801bede:	6823      	ldr	r3, [r4, #0]
 801bee0:	3324      	adds	r3, #36	; 0x24
 801bee2:	681d      	ldr	r5, [r3, #0]
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	330c      	adds	r3, #12
 801bee8:	4618      	mov	r0, r3
 801beea:	f7ef f8f3 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801beee:	4606      	mov	r6, r0
 801bef0:	f7f6 f958 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bef4:	4603      	mov	r3, r0
 801bef6:	9302      	str	r3, [sp, #8]
 801bef8:	f240 1349 	movw	r3, #329	; 0x149
 801befc:	9301      	str	r3, [sp, #4]
 801befe:	4b06      	ldr	r3, [pc, #24]	; (801bf18 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801bf00:	9300      	str	r3, [sp, #0]
 801bf02:	2300      	movs	r3, #0
 801bf04:	4632      	mov	r2, r6
 801bf06:	4905      	ldr	r1, [pc, #20]	; (801bf1c <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801bf08:	4620      	mov	r0, r4
 801bf0a:	47a8      	blx	r5
    return value_.pointerValue_;
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	699b      	ldr	r3, [r3, #24]
}
 801bf10:	4618      	mov	r0, r3
 801bf12:	370c      	adds	r7, #12
 801bf14:	46bd      	mov	sp, r7
 801bf16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf18:	080240a8 	.word	0x080240a8
 801bf1c:	08024120 	.word	0x08024120

0801bf20 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801bf20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf22:	b087      	sub	sp, #28
 801bf24:	af04      	add	r7, sp, #16
 801bf26:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801bf28:	f7f6 f92c 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801bf2c:	4604      	mov	r4, r0
 801bf2e:	6823      	ldr	r3, [r4, #0]
 801bf30:	3324      	adds	r3, #36	; 0x24
 801bf32:	681d      	ldr	r5, [r3, #0]
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	330c      	adds	r3, #12
 801bf38:	4618      	mov	r0, r3
 801bf3a:	f7ef f8cb 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801bf3e:	4606      	mov	r6, r0
 801bf40:	f7f6 f930 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bf44:	4603      	mov	r3, r0
 801bf46:	9302      	str	r3, [sp, #8]
 801bf48:	f240 134f 	movw	r3, #335	; 0x14f
 801bf4c:	9301      	str	r3, [sp, #4]
 801bf4e:	4b06      	ldr	r3, [pc, #24]	; (801bf68 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801bf50:	9300      	str	r3, [sp, #0]
 801bf52:	2300      	movs	r3, #0
 801bf54:	4632      	mov	r2, r6
 801bf56:	4905      	ldr	r1, [pc, #20]	; (801bf6c <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801bf58:	4620      	mov	r0, r4
 801bf5a:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	699b      	ldr	r3, [r3, #24]
}
 801bf60:	4618      	mov	r0, r3
 801bf62:	370c      	adds	r7, #12
 801bf64:	46bd      	mov	sp, r7
 801bf66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf68:	080240a8 	.word	0x080240a8
 801bf6c:	0802412c 	.word	0x0802412c

0801bf70 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801bf70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf72:	b087      	sub	sp, #28
 801bf74:	af04      	add	r7, sp, #16
 801bf76:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801bf78:	f7f6 f904 	bl	8012184 <_ZN10UtestShell10getCurrentEv>
 801bf7c:	4604      	mov	r4, r0
 801bf7e:	6823      	ldr	r3, [r4, #0]
 801bf80:	3324      	adds	r3, #36	; 0x24
 801bf82:	681d      	ldr	r5, [r3, #0]
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	330c      	adds	r3, #12
 801bf88:	4618      	mov	r0, r3
 801bf8a:	f7ef f8a3 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801bf8e:	4606      	mov	r6, r0
 801bf90:	f7f6 f908 	bl	80121a4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bf94:	4603      	mov	r3, r0
 801bf96:	9302      	str	r3, [sp, #8]
 801bf98:	f240 1355 	movw	r3, #341	; 0x155
 801bf9c:	9301      	str	r3, [sp, #4]
 801bf9e:	4b06      	ldr	r3, [pc, #24]	; (801bfb8 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801bfa0:	9300      	str	r3, [sp, #0]
 801bfa2:	2300      	movs	r3, #0
 801bfa4:	4632      	mov	r2, r6
 801bfa6:	4905      	ldr	r1, [pc, #20]	; (801bfbc <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801bfa8:	4620      	mov	r0, r4
 801bfaa:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	699b      	ldr	r3, [r3, #24]
}
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	370c      	adds	r7, #12
 801bfb4:	46bd      	mov	sp, r7
 801bfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bfb8:	080240a8 	.word	0x080240a8
 801bfbc:	08024144 	.word	0x08024144

0801bfc0 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801bfc0:	b480      	push	{r7}
 801bfc2:	b083      	sub	sp, #12
 801bfc4:	af00      	add	r7, sp, #0
 801bfc6:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	699b      	ldr	r3, [r3, #24]
}
 801bfcc:	4618      	mov	r0, r3
 801bfce:	370c      	adds	r7, #12
 801bfd0:	46bd      	mov	sp, r7
 801bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfd6:	4770      	bx	lr

0801bfd8 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801bfd8:	b480      	push	{r7}
 801bfda:	b083      	sub	sp, #12
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	699b      	ldr	r3, [r3, #24]
}
 801bfe4:	4618      	mov	r0, r3
 801bfe6:	370c      	adds	r7, #12
 801bfe8:	46bd      	mov	sp, r7
 801bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfee:	4770      	bx	lr

0801bff0 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801bff0:	b480      	push	{r7}
 801bff2:	b083      	sub	sp, #12
 801bff4:	af00      	add	r7, sp, #0
 801bff6:	6078      	str	r0, [r7, #4]
    return size_;
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801bffc:	4618      	mov	r0, r3
 801bffe:	370c      	adds	r7, #12
 801c000:	46bd      	mov	sp, r7
 801c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c006:	4770      	bx	lr

0801c008 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801c008:	b480      	push	{r7}
 801c00a:	b083      	sub	sp, #12
 801c00c:	af00      	add	r7, sp, #0
 801c00e:	6078      	str	r0, [r7, #4]
    return comparator_;
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801c014:	4618      	mov	r0, r3
 801c016:	370c      	adds	r7, #12
 801c018:	46bd      	mov	sp, r7
 801c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c01e:	4770      	bx	lr

0801c020 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801c020:	b480      	push	{r7}
 801c022:	b083      	sub	sp, #12
 801c024:	af00      	add	r7, sp, #0
 801c026:	6078      	str	r0, [r7, #4]
    return copier_;
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801c02c:	4618      	mov	r0, r3
 801c02e:	370c      	adds	r7, #12
 801c030:	46bd      	mov	sp, r7
 801c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c036:	4770      	bx	lr

0801c038 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801c038:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c03a:	b0cd      	sub	sp, #308	; 0x134
 801c03c:	af00      	add	r7, sp, #0
 801c03e:	1d3b      	adds	r3, r7, #4
 801c040:	6018      	str	r0, [r3, #0]
 801c042:	463b      	mov	r3, r7
 801c044:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801c046:	2500      	movs	r5, #0
 801c048:	1d3b      	adds	r3, r7, #4
 801c04a:	681b      	ldr	r3, [r3, #0]
 801c04c:	f103 040c 	add.w	r4, r3, #12
 801c050:	f107 0308 	add.w	r3, r7, #8
 801c054:	49bb      	ldr	r1, [pc, #748]	; (801c344 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801c056:	4618      	mov	r0, r3
 801c058:	f7ee fcb1 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c05c:	2601      	movs	r6, #1
 801c05e:	f107 0308 	add.w	r3, r7, #8
 801c062:	4619      	mov	r1, r3
 801c064:	4620      	mov	r0, r4
 801c066:	f7ef f86e 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c06a:	4603      	mov	r3, r0
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d015      	beq.n	801c09c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801c070:	463b      	mov	r3, r7
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	f103 040c 	add.w	r4, r3, #12
 801c078:	f107 0310 	add.w	r3, r7, #16
 801c07c:	49b2      	ldr	r1, [pc, #712]	; (801c348 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801c07e:	4618      	mov	r0, r3
 801c080:	f7ee fc9d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c084:	2501      	movs	r5, #1
 801c086:	f107 0310 	add.w	r3, r7, #16
 801c08a:	4619      	mov	r1, r3
 801c08c:	4620      	mov	r0, r4
 801c08e:	f7ef f85a 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c092:	4603      	mov	r3, r0
 801c094:	2b00      	cmp	r3, #0
 801c096:	d001      	beq.n	801c09c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801c098:	2401      	movs	r4, #1
 801c09a:	e000      	b.n	801c09e <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801c09c:	2400      	movs	r4, #0
 801c09e:	2d00      	cmp	r5, #0
 801c0a0:	d004      	beq.n	801c0ac <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801c0a2:	f107 0310 	add.w	r3, r7, #16
 801c0a6:	4618      	mov	r0, r3
 801c0a8:	f7ef f841 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c0ac:	2e00      	cmp	r6, #0
 801c0ae:	d004      	beq.n	801c0ba <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801c0b0:	f107 0308 	add.w	r3, r7, #8
 801c0b4:	4618      	mov	r0, r3
 801c0b6:	f7ef f83a 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c0ba:	2c00      	cmp	r4, #0
 801c0bc:	d00c      	beq.n	801c0d8 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801c0be:	1d3b      	adds	r3, r7, #4
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	699a      	ldr	r2, [r3, #24]
 801c0c4:	463b      	mov	r3, r7
 801c0c6:	681b      	ldr	r3, [r3, #0]
 801c0c8:	699b      	ldr	r3, [r3, #24]
 801c0ca:	429a      	cmp	r2, r3
 801c0cc:	bf0c      	ite	eq
 801c0ce:	2301      	moveq	r3, #1
 801c0d0:	2300      	movne	r3, #0
 801c0d2:	b2dc      	uxtb	r4, r3
 801c0d4:	f000 bd60 	b.w	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801c0d8:	2500      	movs	r5, #0
 801c0da:	1d3b      	adds	r3, r7, #4
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	f103 040c 	add.w	r4, r3, #12
 801c0e2:	f107 0318 	add.w	r3, r7, #24
 801c0e6:	4998      	ldr	r1, [pc, #608]	; (801c348 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801c0e8:	4618      	mov	r0, r3
 801c0ea:	f7ee fc68 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c0ee:	2601      	movs	r6, #1
 801c0f0:	f107 0318 	add.w	r3, r7, #24
 801c0f4:	4619      	mov	r1, r3
 801c0f6:	4620      	mov	r0, r4
 801c0f8:	f7ef f825 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c0fc:	4603      	mov	r3, r0
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d015      	beq.n	801c12e <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801c102:	463b      	mov	r3, r7
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	f103 040c 	add.w	r4, r3, #12
 801c10a:	f107 0320 	add.w	r3, r7, #32
 801c10e:	498d      	ldr	r1, [pc, #564]	; (801c344 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801c110:	4618      	mov	r0, r3
 801c112:	f7ee fc54 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c116:	2501      	movs	r5, #1
 801c118:	f107 0320 	add.w	r3, r7, #32
 801c11c:	4619      	mov	r1, r3
 801c11e:	4620      	mov	r0, r4
 801c120:	f7ef f811 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c124:	4603      	mov	r3, r0
 801c126:	2b00      	cmp	r3, #0
 801c128:	d001      	beq.n	801c12e <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801c12a:	2401      	movs	r4, #1
 801c12c:	e000      	b.n	801c130 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801c12e:	2400      	movs	r4, #0
 801c130:	2d00      	cmp	r5, #0
 801c132:	d004      	beq.n	801c13e <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801c134:	f107 0320 	add.w	r3, r7, #32
 801c138:	4618      	mov	r0, r3
 801c13a:	f7ee fff8 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c13e:	2e00      	cmp	r6, #0
 801c140:	d004      	beq.n	801c14c <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801c142:	f107 0318 	add.w	r3, r7, #24
 801c146:	4618      	mov	r0, r3
 801c148:	f7ee fff1 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c14c:	2c00      	cmp	r4, #0
 801c14e:	d00c      	beq.n	801c16a <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801c150:	1d3b      	adds	r3, r7, #4
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	699a      	ldr	r2, [r3, #24]
 801c156:	463b      	mov	r3, r7
 801c158:	681b      	ldr	r3, [r3, #0]
 801c15a:	699b      	ldr	r3, [r3, #24]
 801c15c:	429a      	cmp	r2, r3
 801c15e:	bf0c      	ite	eq
 801c160:	2301      	moveq	r3, #1
 801c162:	2300      	movne	r3, #0
 801c164:	b2dc      	uxtb	r4, r3
 801c166:	f000 bd17 	b.w	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801c16a:	2500      	movs	r5, #0
 801c16c:	1d3b      	adds	r3, r7, #4
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	f103 040c 	add.w	r4, r3, #12
 801c174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c178:	4974      	ldr	r1, [pc, #464]	; (801c34c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801c17a:	4618      	mov	r0, r3
 801c17c:	f7ee fc1f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c180:	2601      	movs	r6, #1
 801c182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c186:	4619      	mov	r1, r3
 801c188:	4620      	mov	r0, r4
 801c18a:	f7ee ffdc 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c18e:	4603      	mov	r3, r0
 801c190:	2b00      	cmp	r3, #0
 801c192:	d015      	beq.n	801c1c0 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801c194:	463b      	mov	r3, r7
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	f103 040c 	add.w	r4, r3, #12
 801c19c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c1a0:	4969      	ldr	r1, [pc, #420]	; (801c348 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801c1a2:	4618      	mov	r0, r3
 801c1a4:	f7ee fc0b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c1a8:	2501      	movs	r5, #1
 801c1aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c1ae:	4619      	mov	r1, r3
 801c1b0:	4620      	mov	r0, r4
 801c1b2:	f7ee ffc8 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c1b6:	4603      	mov	r3, r0
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d001      	beq.n	801c1c0 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801c1bc:	2401      	movs	r4, #1
 801c1be:	e000      	b.n	801c1c2 <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801c1c0:	2400      	movs	r4, #0
 801c1c2:	2d00      	cmp	r5, #0
 801c1c4:	d004      	beq.n	801c1d0 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801c1c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c1ca:	4618      	mov	r0, r3
 801c1cc:	f7ee ffaf 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c1d0:	2e00      	cmp	r6, #0
 801c1d2:	d004      	beq.n	801c1de <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801c1d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c1d8:	4618      	mov	r0, r3
 801c1da:	f7ee ffa8 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c1de:	2c00      	cmp	r4, #0
 801c1e0:	d012      	beq.n	801c208 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801c1e2:	463b      	mov	r3, r7
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	699b      	ldr	r3, [r3, #24]
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	db0a      	blt.n	801c202 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801c1ec:	1d3b      	adds	r3, r7, #4
 801c1ee:	681b      	ldr	r3, [r3, #0]
 801c1f0:	699b      	ldr	r3, [r3, #24]
 801c1f2:	463a      	mov	r2, r7
 801c1f4:	6812      	ldr	r2, [r2, #0]
 801c1f6:	6992      	ldr	r2, [r2, #24]
 801c1f8:	4293      	cmp	r3, r2
 801c1fa:	d102      	bne.n	801c202 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801c1fc:	2401      	movs	r4, #1
 801c1fe:	f000 bccb 	b.w	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c202:	2400      	movs	r4, #0
 801c204:	f000 bcc8 	b.w	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801c208:	2500      	movs	r5, #0
 801c20a:	1d3b      	adds	r3, r7, #4
 801c20c:	681b      	ldr	r3, [r3, #0]
 801c20e:	f103 040c 	add.w	r4, r3, #12
 801c212:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c216:	494c      	ldr	r1, [pc, #304]	; (801c348 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801c218:	4618      	mov	r0, r3
 801c21a:	f7ee fbd0 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c21e:	2601      	movs	r6, #1
 801c220:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c224:	4619      	mov	r1, r3
 801c226:	4620      	mov	r0, r4
 801c228:	f7ee ff8d 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c22c:	4603      	mov	r3, r0
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d015      	beq.n	801c25e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801c232:	463b      	mov	r3, r7
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	f103 040c 	add.w	r4, r3, #12
 801c23a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c23e:	4943      	ldr	r1, [pc, #268]	; (801c34c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801c240:	4618      	mov	r0, r3
 801c242:	f7ee fbbc 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c246:	2501      	movs	r5, #1
 801c248:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c24c:	4619      	mov	r1, r3
 801c24e:	4620      	mov	r0, r4
 801c250:	f7ee ff79 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c254:	4603      	mov	r3, r0
 801c256:	2b00      	cmp	r3, #0
 801c258:	d001      	beq.n	801c25e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801c25a:	2401      	movs	r4, #1
 801c25c:	e000      	b.n	801c260 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801c25e:	2400      	movs	r4, #0
 801c260:	2d00      	cmp	r5, #0
 801c262:	d004      	beq.n	801c26e <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801c264:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c268:	4618      	mov	r0, r3
 801c26a:	f7ee ff60 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c26e:	2e00      	cmp	r6, #0
 801c270:	d004      	beq.n	801c27c <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801c272:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c276:	4618      	mov	r0, r3
 801c278:	f7ee ff59 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c27c:	2c00      	cmp	r4, #0
 801c27e:	d012      	beq.n	801c2a6 <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801c280:	1d3b      	adds	r3, r7, #4
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	699b      	ldr	r3, [r3, #24]
 801c286:	2b00      	cmp	r3, #0
 801c288:	db0a      	blt.n	801c2a0 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801c28a:	1d3b      	adds	r3, r7, #4
 801c28c:	681b      	ldr	r3, [r3, #0]
 801c28e:	699b      	ldr	r3, [r3, #24]
 801c290:	463a      	mov	r2, r7
 801c292:	6812      	ldr	r2, [r2, #0]
 801c294:	6992      	ldr	r2, [r2, #24]
 801c296:	4293      	cmp	r3, r2
 801c298:	d102      	bne.n	801c2a0 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801c29a:	2401      	movs	r4, #1
 801c29c:	f000 bc7c 	b.w	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c2a0:	2400      	movs	r4, #0
 801c2a2:	f000 bc79 	b.w	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801c2a6:	2500      	movs	r5, #0
 801c2a8:	1d3b      	adds	r3, r7, #4
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	f103 040c 	add.w	r4, r3, #12
 801c2b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c2b4:	4926      	ldr	r1, [pc, #152]	; (801c350 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801c2b6:	4618      	mov	r0, r3
 801c2b8:	f7ee fb81 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c2bc:	2601      	movs	r6, #1
 801c2be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c2c2:	4619      	mov	r1, r3
 801c2c4:	4620      	mov	r0, r4
 801c2c6:	f7ee ff3e 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c2ca:	4603      	mov	r3, r0
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d015      	beq.n	801c2fc <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801c2d0:	463b      	mov	r3, r7
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	f103 040c 	add.w	r4, r3, #12
 801c2d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c2dc:	491a      	ldr	r1, [pc, #104]	; (801c348 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801c2de:	4618      	mov	r0, r3
 801c2e0:	f7ee fb6d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c2e4:	2501      	movs	r5, #1
 801c2e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c2ea:	4619      	mov	r1, r3
 801c2ec:	4620      	mov	r0, r4
 801c2ee:	f7ee ff2a 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c2f2:	4603      	mov	r3, r0
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d001      	beq.n	801c2fc <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801c2f8:	2401      	movs	r4, #1
 801c2fa:	e000      	b.n	801c2fe <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801c2fc:	2400      	movs	r4, #0
 801c2fe:	2d00      	cmp	r5, #0
 801c300:	d004      	beq.n	801c30c <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801c302:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c306:	4618      	mov	r0, r3
 801c308:	f7ee ff11 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c30c:	2e00      	cmp	r6, #0
 801c30e:	d004      	beq.n	801c31a <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801c310:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c314:	4618      	mov	r0, r3
 801c316:	f7ee ff0a 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c31a:	2c00      	cmp	r4, #0
 801c31c:	d01a      	beq.n	801c354 <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801c31e:	463b      	mov	r3, r7
 801c320:	681b      	ldr	r3, [r3, #0]
 801c322:	699b      	ldr	r3, [r3, #24]
 801c324:	2b00      	cmp	r3, #0
 801c326:	db0a      	blt.n	801c33e <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801c328:	1d3b      	adds	r3, r7, #4
 801c32a:	681b      	ldr	r3, [r3, #0]
 801c32c:	699b      	ldr	r3, [r3, #24]
 801c32e:	463a      	mov	r2, r7
 801c330:	6812      	ldr	r2, [r2, #0]
 801c332:	6992      	ldr	r2, [r2, #24]
 801c334:	4293      	cmp	r3, r2
 801c336:	d102      	bne.n	801c33e <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801c338:	2401      	movs	r4, #1
 801c33a:	f000 bc2d 	b.w	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c33e:	2400      	movs	r4, #0
 801c340:	f000 bc2a 	b.w	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c344:	08024088 	.word	0x08024088
 801c348:	0802406c 	.word	0x0802406c
 801c34c:	08024078 	.word	0x08024078
 801c350:	08024094 	.word	0x08024094
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801c354:	2500      	movs	r5, #0
 801c356:	1d3b      	adds	r3, r7, #4
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	f103 040c 	add.w	r4, r3, #12
 801c35e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c362:	49b8      	ldr	r1, [pc, #736]	; (801c644 <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801c364:	4618      	mov	r0, r3
 801c366:	f7ee fb2a 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c36a:	2601      	movs	r6, #1
 801c36c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c370:	4619      	mov	r1, r3
 801c372:	4620      	mov	r0, r4
 801c374:	f7ee fee7 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c378:	4603      	mov	r3, r0
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	d015      	beq.n	801c3aa <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801c37e:	463b      	mov	r3, r7
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	f103 040c 	add.w	r4, r3, #12
 801c386:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c38a:	49af      	ldr	r1, [pc, #700]	; (801c648 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801c38c:	4618      	mov	r0, r3
 801c38e:	f7ee fb16 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c392:	2501      	movs	r5, #1
 801c394:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c398:	4619      	mov	r1, r3
 801c39a:	4620      	mov	r0, r4
 801c39c:	f7ee fed3 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c3a0:	4603      	mov	r3, r0
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d001      	beq.n	801c3aa <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801c3a6:	2401      	movs	r4, #1
 801c3a8:	e000      	b.n	801c3ac <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801c3aa:	2400      	movs	r4, #0
 801c3ac:	2d00      	cmp	r5, #0
 801c3ae:	d004      	beq.n	801c3ba <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801c3b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c3b4:	4618      	mov	r0, r3
 801c3b6:	f7ee feba 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c3ba:	2e00      	cmp	r6, #0
 801c3bc:	d004      	beq.n	801c3c8 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801c3be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c3c2:	4618      	mov	r0, r3
 801c3c4:	f7ee feb3 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c3c8:	2c00      	cmp	r4, #0
 801c3ca:	d010      	beq.n	801c3ee <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801c3cc:	1d3b      	adds	r3, r7, #4
 801c3ce:	681b      	ldr	r3, [r3, #0]
 801c3d0:	699b      	ldr	r3, [r3, #24]
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	db09      	blt.n	801c3ea <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801c3d6:	1d3b      	adds	r3, r7, #4
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	699b      	ldr	r3, [r3, #24]
 801c3dc:	463a      	mov	r2, r7
 801c3de:	6812      	ldr	r2, [r2, #0]
 801c3e0:	6992      	ldr	r2, [r2, #24]
 801c3e2:	4293      	cmp	r3, r2
 801c3e4:	d101      	bne.n	801c3ea <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801c3e6:	2401      	movs	r4, #1
 801c3e8:	e3d6      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c3ea:	2400      	movs	r4, #0
 801c3ec:	e3d4      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801c3ee:	2500      	movs	r5, #0
 801c3f0:	1d3b      	adds	r3, r7, #4
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	f103 040c 	add.w	r4, r3, #12
 801c3f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c3fc:	4993      	ldr	r1, [pc, #588]	; (801c64c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801c3fe:	4618      	mov	r0, r3
 801c400:	f7ee fadd 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c404:	2601      	movs	r6, #1
 801c406:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c40a:	4619      	mov	r1, r3
 801c40c:	4620      	mov	r0, r4
 801c40e:	f7ee fe9a 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c412:	4603      	mov	r3, r0
 801c414:	2b00      	cmp	r3, #0
 801c416:	d015      	beq.n	801c444 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801c418:	463b      	mov	r3, r7
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	f103 040c 	add.w	r4, r3, #12
 801c420:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c424:	498a      	ldr	r1, [pc, #552]	; (801c650 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801c426:	4618      	mov	r0, r3
 801c428:	f7ee fac9 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c42c:	2501      	movs	r5, #1
 801c42e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c432:	4619      	mov	r1, r3
 801c434:	4620      	mov	r0, r4
 801c436:	f7ee fe86 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c43a:	4603      	mov	r3, r0
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d001      	beq.n	801c444 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801c440:	2401      	movs	r4, #1
 801c442:	e000      	b.n	801c446 <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801c444:	2400      	movs	r4, #0
 801c446:	2d00      	cmp	r5, #0
 801c448:	d004      	beq.n	801c454 <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801c44a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c44e:	4618      	mov	r0, r3
 801c450:	f7ee fe6d 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c454:	2e00      	cmp	r6, #0
 801c456:	d004      	beq.n	801c462 <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801c458:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c45c:	4618      	mov	r0, r3
 801c45e:	f7ee fe66 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c462:	2c00      	cmp	r4, #0
 801c464:	d010      	beq.n	801c488 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801c466:	463b      	mov	r3, r7
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	699b      	ldr	r3, [r3, #24]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	db09      	blt.n	801c484 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801c470:	1d3b      	adds	r3, r7, #4
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	699b      	ldr	r3, [r3, #24]
 801c476:	463a      	mov	r2, r7
 801c478:	6812      	ldr	r2, [r2, #0]
 801c47a:	6992      	ldr	r2, [r2, #24]
 801c47c:	4293      	cmp	r3, r2
 801c47e:	d101      	bne.n	801c484 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801c480:	2401      	movs	r4, #1
 801c482:	e389      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c484:	2400      	movs	r4, #0
 801c486:	e387      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801c488:	2500      	movs	r5, #0
 801c48a:	1d3b      	adds	r3, r7, #4
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	f103 040c 	add.w	r4, r3, #12
 801c492:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c496:	496e      	ldr	r1, [pc, #440]	; (801c650 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801c498:	4618      	mov	r0, r3
 801c49a:	f7ee fa90 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c49e:	2601      	movs	r6, #1
 801c4a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c4a4:	4619      	mov	r1, r3
 801c4a6:	4620      	mov	r0, r4
 801c4a8:	f7ee fe4d 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c4ac:	4603      	mov	r3, r0
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d015      	beq.n	801c4de <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801c4b2:	463b      	mov	r3, r7
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	f103 040c 	add.w	r4, r3, #12
 801c4ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c4be:	4963      	ldr	r1, [pc, #396]	; (801c64c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801c4c0:	4618      	mov	r0, r3
 801c4c2:	f7ee fa7c 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c4c6:	2501      	movs	r5, #1
 801c4c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c4cc:	4619      	mov	r1, r3
 801c4ce:	4620      	mov	r0, r4
 801c4d0:	f7ee fe39 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c4d4:	4603      	mov	r3, r0
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d001      	beq.n	801c4de <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801c4da:	2401      	movs	r4, #1
 801c4dc:	e000      	b.n	801c4e0 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801c4de:	2400      	movs	r4, #0
 801c4e0:	2d00      	cmp	r5, #0
 801c4e2:	d004      	beq.n	801c4ee <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801c4e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c4e8:	4618      	mov	r0, r3
 801c4ea:	f7ee fe20 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c4ee:	2e00      	cmp	r6, #0
 801c4f0:	d004      	beq.n	801c4fc <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801c4f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c4f6:	4618      	mov	r0, r3
 801c4f8:	f7ee fe19 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c4fc:	2c00      	cmp	r4, #0
 801c4fe:	d010      	beq.n	801c522 <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801c500:	1d3b      	adds	r3, r7, #4
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	699b      	ldr	r3, [r3, #24]
 801c506:	2b00      	cmp	r3, #0
 801c508:	db09      	blt.n	801c51e <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801c50a:	1d3b      	adds	r3, r7, #4
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	699b      	ldr	r3, [r3, #24]
 801c510:	463a      	mov	r2, r7
 801c512:	6812      	ldr	r2, [r2, #0]
 801c514:	6992      	ldr	r2, [r2, #24]
 801c516:	4293      	cmp	r3, r2
 801c518:	d101      	bne.n	801c51e <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801c51a:	2401      	movs	r4, #1
 801c51c:	e33c      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c51e:	2400      	movs	r4, #0
 801c520:	e33a      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801c522:	2500      	movs	r5, #0
 801c524:	1d3b      	adds	r3, r7, #4
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	f103 040c 	add.w	r4, r3, #12
 801c52c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c530:	4946      	ldr	r1, [pc, #280]	; (801c64c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801c532:	4618      	mov	r0, r3
 801c534:	f7ee fa43 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c538:	2601      	movs	r6, #1
 801c53a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c53e:	4619      	mov	r1, r3
 801c540:	4620      	mov	r0, r4
 801c542:	f7ee fe00 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c546:	4603      	mov	r3, r0
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d015      	beq.n	801c578 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801c54c:	463b      	mov	r3, r7
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	f103 040c 	add.w	r4, r3, #12
 801c554:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c558:	493b      	ldr	r1, [pc, #236]	; (801c648 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801c55a:	4618      	mov	r0, r3
 801c55c:	f7ee fa2f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c560:	2501      	movs	r5, #1
 801c562:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c566:	4619      	mov	r1, r3
 801c568:	4620      	mov	r0, r4
 801c56a:	f7ee fdec 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c56e:	4603      	mov	r3, r0
 801c570:	2b00      	cmp	r3, #0
 801c572:	d001      	beq.n	801c578 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801c574:	2401      	movs	r4, #1
 801c576:	e000      	b.n	801c57a <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801c578:	2400      	movs	r4, #0
 801c57a:	2d00      	cmp	r5, #0
 801c57c:	d004      	beq.n	801c588 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801c57e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c582:	4618      	mov	r0, r3
 801c584:	f7ee fdd3 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c588:	2e00      	cmp	r6, #0
 801c58a:	d004      	beq.n	801c596 <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801c58c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c590:	4618      	mov	r0, r3
 801c592:	f7ee fdcc 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c596:	2c00      	cmp	r4, #0
 801c598:	d00b      	beq.n	801c5b2 <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801c59a:	1d3b      	adds	r3, r7, #4
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	699a      	ldr	r2, [r3, #24]
 801c5a0:	463b      	mov	r3, r7
 801c5a2:	681b      	ldr	r3, [r3, #0]
 801c5a4:	699b      	ldr	r3, [r3, #24]
 801c5a6:	429a      	cmp	r2, r3
 801c5a8:	bf0c      	ite	eq
 801c5aa:	2301      	moveq	r3, #1
 801c5ac:	2300      	movne	r3, #0
 801c5ae:	b2dc      	uxtb	r4, r3
 801c5b0:	e2f2      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801c5b2:	2500      	movs	r5, #0
 801c5b4:	1d3b      	adds	r3, r7, #4
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	f103 040c 	add.w	r4, r3, #12
 801c5bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c5c0:	4921      	ldr	r1, [pc, #132]	; (801c648 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801c5c2:	4618      	mov	r0, r3
 801c5c4:	f7ee f9fb 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c5c8:	2601      	movs	r6, #1
 801c5ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c5ce:	4619      	mov	r1, r3
 801c5d0:	4620      	mov	r0, r4
 801c5d2:	f7ee fdb8 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c5d6:	4603      	mov	r3, r0
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d015      	beq.n	801c608 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801c5dc:	463b      	mov	r3, r7
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	f103 040c 	add.w	r4, r3, #12
 801c5e4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c5e8:	4918      	ldr	r1, [pc, #96]	; (801c64c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801c5ea:	4618      	mov	r0, r3
 801c5ec:	f7ee f9e7 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c5f0:	2501      	movs	r5, #1
 801c5f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c5f6:	4619      	mov	r1, r3
 801c5f8:	4620      	mov	r0, r4
 801c5fa:	f7ee fda4 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c5fe:	4603      	mov	r3, r0
 801c600:	2b00      	cmp	r3, #0
 801c602:	d001      	beq.n	801c608 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801c604:	2401      	movs	r4, #1
 801c606:	e000      	b.n	801c60a <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801c608:	2400      	movs	r4, #0
 801c60a:	2d00      	cmp	r5, #0
 801c60c:	d004      	beq.n	801c618 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801c60e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c612:	4618      	mov	r0, r3
 801c614:	f7ee fd8b 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c618:	2e00      	cmp	r6, #0
 801c61a:	d004      	beq.n	801c626 <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801c61c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c620:	4618      	mov	r0, r3
 801c622:	f7ee fd84 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c626:	2c00      	cmp	r4, #0
 801c628:	d014      	beq.n	801c654 <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801c62a:	1d3b      	adds	r3, r7, #4
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	699a      	ldr	r2, [r3, #24]
 801c630:	463b      	mov	r3, r7
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	699b      	ldr	r3, [r3, #24]
 801c636:	429a      	cmp	r2, r3
 801c638:	bf0c      	ite	eq
 801c63a:	2301      	moveq	r3, #1
 801c63c:	2300      	movne	r3, #0
 801c63e:	b2dc      	uxtb	r4, r3
 801c640:	e2aa      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c642:	bf00      	nop
 801c644:	0802406c 	.word	0x0802406c
 801c648:	08024094 	.word	0x08024094
 801c64c:	08024078 	.word	0x08024078
 801c650:	08024088 	.word	0x08024088
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801c654:	2500      	movs	r5, #0
 801c656:	1d3b      	adds	r3, r7, #4
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	f103 040c 	add.w	r4, r3, #12
 801c65e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801c662:	49ae      	ldr	r1, [pc, #696]	; (801c91c <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801c664:	4618      	mov	r0, r3
 801c666:	f7ee f9aa 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c66a:	2601      	movs	r6, #1
 801c66c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801c670:	4619      	mov	r1, r3
 801c672:	4620      	mov	r0, r4
 801c674:	f7ee fd67 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c678:	4603      	mov	r3, r0
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	d015      	beq.n	801c6aa <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801c67e:	463b      	mov	r3, r7
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	f103 040c 	add.w	r4, r3, #12
 801c686:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c68a:	49a5      	ldr	r1, [pc, #660]	; (801c920 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801c68c:	4618      	mov	r0, r3
 801c68e:	f7ee f996 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c692:	2501      	movs	r5, #1
 801c694:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c698:	4619      	mov	r1, r3
 801c69a:	4620      	mov	r0, r4
 801c69c:	f7ee fd53 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c6a0:	4603      	mov	r3, r0
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d001      	beq.n	801c6aa <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801c6a6:	2401      	movs	r4, #1
 801c6a8:	e000      	b.n	801c6ac <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801c6aa:	2400      	movs	r4, #0
 801c6ac:	2d00      	cmp	r5, #0
 801c6ae:	d004      	beq.n	801c6ba <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801c6b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c6b4:	4618      	mov	r0, r3
 801c6b6:	f7ee fd3a 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c6ba:	2e00      	cmp	r6, #0
 801c6bc:	d004      	beq.n	801c6c8 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801c6be:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801c6c2:	4618      	mov	r0, r3
 801c6c4:	f7ee fd33 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c6c8:	2c00      	cmp	r4, #0
 801c6ca:	d010      	beq.n	801c6ee <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801c6cc:	1d3b      	adds	r3, r7, #4
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	699b      	ldr	r3, [r3, #24]
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	db09      	blt.n	801c6ea <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801c6d6:	1d3b      	adds	r3, r7, #4
 801c6d8:	681b      	ldr	r3, [r3, #0]
 801c6da:	699b      	ldr	r3, [r3, #24]
 801c6dc:	463a      	mov	r2, r7
 801c6de:	6812      	ldr	r2, [r2, #0]
 801c6e0:	6992      	ldr	r2, [r2, #24]
 801c6e2:	4293      	cmp	r3, r2
 801c6e4:	d101      	bne.n	801c6ea <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801c6e6:	2401      	movs	r4, #1
 801c6e8:	e256      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c6ea:	2400      	movs	r4, #0
 801c6ec:	e254      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801c6ee:	2500      	movs	r5, #0
 801c6f0:	1d3b      	adds	r3, r7, #4
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	f103 040c 	add.w	r4, r3, #12
 801c6f8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801c6fc:	4988      	ldr	r1, [pc, #544]	; (801c920 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801c6fe:	4618      	mov	r0, r3
 801c700:	f7ee f95d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c704:	2601      	movs	r6, #1
 801c706:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801c70a:	4619      	mov	r1, r3
 801c70c:	4620      	mov	r0, r4
 801c70e:	f7ee fd1a 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c712:	4603      	mov	r3, r0
 801c714:	2b00      	cmp	r3, #0
 801c716:	d015      	beq.n	801c744 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801c718:	463b      	mov	r3, r7
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	f103 040c 	add.w	r4, r3, #12
 801c720:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c724:	497d      	ldr	r1, [pc, #500]	; (801c91c <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801c726:	4618      	mov	r0, r3
 801c728:	f7ee f949 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c72c:	2501      	movs	r5, #1
 801c72e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c732:	4619      	mov	r1, r3
 801c734:	4620      	mov	r0, r4
 801c736:	f7ee fd06 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c73a:	4603      	mov	r3, r0
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d001      	beq.n	801c744 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801c740:	2401      	movs	r4, #1
 801c742:	e000      	b.n	801c746 <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801c744:	2400      	movs	r4, #0
 801c746:	2d00      	cmp	r5, #0
 801c748:	d004      	beq.n	801c754 <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801c74a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c74e:	4618      	mov	r0, r3
 801c750:	f7ee fced 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c754:	2e00      	cmp	r6, #0
 801c756:	d004      	beq.n	801c762 <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801c758:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801c75c:	4618      	mov	r0, r3
 801c75e:	f7ee fce6 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c762:	2c00      	cmp	r4, #0
 801c764:	d010      	beq.n	801c788 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801c766:	463b      	mov	r3, r7
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	699b      	ldr	r3, [r3, #24]
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	db09      	blt.n	801c784 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801c770:	1d3b      	adds	r3, r7, #4
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	699b      	ldr	r3, [r3, #24]
 801c776:	463a      	mov	r2, r7
 801c778:	6812      	ldr	r2, [r2, #0]
 801c77a:	6992      	ldr	r2, [r2, #24]
 801c77c:	4293      	cmp	r3, r2
 801c77e:	d101      	bne.n	801c784 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801c780:	2401      	movs	r4, #1
 801c782:	e209      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c784:	2400      	movs	r4, #0
 801c786:	e207      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801c788:	1d3b      	adds	r3, r7, #4
 801c78a:	681b      	ldr	r3, [r3, #0]
 801c78c:	f103 020c 	add.w	r2, r3, #12
 801c790:	463b      	mov	r3, r7
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	330c      	adds	r3, #12
 801c796:	4619      	mov	r1, r3
 801c798:	4610      	mov	r0, r2
 801c79a:	f7ee fd19 	bl	800b1d0 <_ZneRK12SimpleStringS1_>
 801c79e:	4603      	mov	r3, r0
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d001      	beq.n	801c7a8 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801c7a4:	2400      	movs	r4, #0
 801c7a6:	e1f7      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801c7a8:	1d3b      	adds	r3, r7, #4
 801c7aa:	681b      	ldr	r3, [r3, #0]
 801c7ac:	f103 040c 	add.w	r4, r3, #12
 801c7b0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c7b4:	495b      	ldr	r1, [pc, #364]	; (801c924 <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801c7b6:	4618      	mov	r0, r3
 801c7b8:	f7ee f901 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c7bc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c7c0:	4619      	mov	r1, r3
 801c7c2:	4620      	mov	r0, r4
 801c7c4:	f7ee fcbf 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c7c8:	4603      	mov	r3, r0
 801c7ca:	461c      	mov	r4, r3
 801c7cc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c7d0:	4618      	mov	r0, r3
 801c7d2:	f7ee fcac 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c7d6:	2c00      	cmp	r4, #0
 801c7d8:	d00b      	beq.n	801c7f2 <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801c7da:	1d3b      	adds	r3, r7, #4
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	7e1a      	ldrb	r2, [r3, #24]
 801c7e0:	463b      	mov	r3, r7
 801c7e2:	681b      	ldr	r3, [r3, #0]
 801c7e4:	7e1b      	ldrb	r3, [r3, #24]
 801c7e6:	429a      	cmp	r2, r3
 801c7e8:	bf0c      	ite	eq
 801c7ea:	2301      	moveq	r3, #1
 801c7ec:	2300      	movne	r3, #0
 801c7ee:	b2dc      	uxtb	r4, r3
 801c7f0:	e1d2      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801c7f2:	1d3b      	adds	r3, r7, #4
 801c7f4:	681b      	ldr	r3, [r3, #0]
 801c7f6:	f103 040c 	add.w	r4, r3, #12
 801c7fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c7fe:	494a      	ldr	r1, [pc, #296]	; (801c928 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801c800:	4618      	mov	r0, r3
 801c802:	f7ee f8dc 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c806:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c80a:	4619      	mov	r1, r3
 801c80c:	4620      	mov	r0, r4
 801c80e:	f7ee fc9a 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c812:	4603      	mov	r3, r0
 801c814:	461c      	mov	r4, r3
 801c816:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c81a:	4618      	mov	r0, r3
 801c81c:	f7ee fc87 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c820:	2c00      	cmp	r4, #0
 801c822:	d00b      	beq.n	801c83c <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801c824:	1d3b      	adds	r3, r7, #4
 801c826:	681b      	ldr	r3, [r3, #0]
 801c828:	699a      	ldr	r2, [r3, #24]
 801c82a:	463b      	mov	r3, r7
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	699b      	ldr	r3, [r3, #24]
 801c830:	429a      	cmp	r2, r3
 801c832:	bf0c      	ite	eq
 801c834:	2301      	moveq	r3, #1
 801c836:	2300      	movne	r3, #0
 801c838:	b2dc      	uxtb	r4, r3
 801c83a:	e1ad      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801c83c:	1d3b      	adds	r3, r7, #4
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	f103 040c 	add.w	r4, r3, #12
 801c844:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c848:	4938      	ldr	r1, [pc, #224]	; (801c92c <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801c84a:	4618      	mov	r0, r3
 801c84c:	f7ee f8b7 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c850:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c854:	4619      	mov	r1, r3
 801c856:	4620      	mov	r0, r4
 801c858:	f7ee fc75 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c85c:	4603      	mov	r3, r0
 801c85e:	461c      	mov	r4, r3
 801c860:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c864:	4618      	mov	r0, r3
 801c866:	f7ee fc62 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c86a:	2c00      	cmp	r4, #0
 801c86c:	d00b      	beq.n	801c886 <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801c86e:	1d3b      	adds	r3, r7, #4
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	699a      	ldr	r2, [r3, #24]
 801c874:	463b      	mov	r3, r7
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	699b      	ldr	r3, [r3, #24]
 801c87a:	429a      	cmp	r2, r3
 801c87c:	bf0c      	ite	eq
 801c87e:	2301      	moveq	r3, #1
 801c880:	2300      	movne	r3, #0
 801c882:	b2dc      	uxtb	r4, r3
 801c884:	e188      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801c886:	1d3b      	adds	r3, r7, #4
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	f103 040c 	add.w	r4, r3, #12
 801c88e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801c892:	4922      	ldr	r1, [pc, #136]	; (801c91c <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801c894:	4618      	mov	r0, r3
 801c896:	f7ee f892 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c89a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801c89e:	4619      	mov	r1, r3
 801c8a0:	4620      	mov	r0, r4
 801c8a2:	f7ee fc50 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c8a6:	4603      	mov	r3, r0
 801c8a8:	461c      	mov	r4, r3
 801c8aa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801c8ae:	4618      	mov	r0, r3
 801c8b0:	f7ee fc3d 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c8b4:	2c00      	cmp	r4, #0
 801c8b6:	d00b      	beq.n	801c8d0 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801c8b8:	1d3b      	adds	r3, r7, #4
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	699a      	ldr	r2, [r3, #24]
 801c8be:	463b      	mov	r3, r7
 801c8c0:	681b      	ldr	r3, [r3, #0]
 801c8c2:	699b      	ldr	r3, [r3, #24]
 801c8c4:	429a      	cmp	r2, r3
 801c8c6:	bf0c      	ite	eq
 801c8c8:	2301      	moveq	r3, #1
 801c8ca:	2300      	movne	r3, #0
 801c8cc:	b2dc      	uxtb	r4, r3
 801c8ce:	e163      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801c8d0:	1d3b      	adds	r3, r7, #4
 801c8d2:	681b      	ldr	r3, [r3, #0]
 801c8d4:	f103 040c 	add.w	r4, r3, #12
 801c8d8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801c8dc:	4910      	ldr	r1, [pc, #64]	; (801c920 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801c8de:	4618      	mov	r0, r3
 801c8e0:	f7ee f86d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c8e4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801c8e8:	4619      	mov	r1, r3
 801c8ea:	4620      	mov	r0, r4
 801c8ec:	f7ee fc2b 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c8f0:	4603      	mov	r3, r0
 801c8f2:	461c      	mov	r4, r3
 801c8f4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801c8f8:	4618      	mov	r0, r3
 801c8fa:	f7ee fc18 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c8fe:	2c00      	cmp	r4, #0
 801c900:	d016      	beq.n	801c930 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801c902:	1d3b      	adds	r3, r7, #4
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	699a      	ldr	r2, [r3, #24]
 801c908:	463b      	mov	r3, r7
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	699b      	ldr	r3, [r3, #24]
 801c90e:	429a      	cmp	r2, r3
 801c910:	bf0c      	ite	eq
 801c912:	2301      	moveq	r3, #1
 801c914:	2300      	movne	r3, #0
 801c916:	b2dc      	uxtb	r4, r3
 801c918:	e13e      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c91a:	bf00      	nop
 801c91c:	08024088 	.word	0x08024088
 801c920:	08024094 	.word	0x08024094
 801c924:	08024070 	.word	0x08024070
 801c928:	0802406c 	.word	0x0802406c
 801c92c:	08024078 	.word	0x08024078
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801c930:	1d3b      	adds	r3, r7, #4
 801c932:	681b      	ldr	r3, [r3, #0]
 801c934:	f103 040c 	add.w	r4, r3, #12
 801c938:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801c93c:	4999      	ldr	r1, [pc, #612]	; (801cba4 <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801c93e:	4618      	mov	r0, r3
 801c940:	f7ee f83d 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c944:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801c948:	4619      	mov	r1, r3
 801c94a:	4620      	mov	r0, r4
 801c94c:	f7ee fbfb 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c950:	4603      	mov	r3, r0
 801c952:	461c      	mov	r4, r3
 801c954:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801c958:	4618      	mov	r0, r3
 801c95a:	f7ee fbe8 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c95e:	2c00      	cmp	r4, #0
 801c960:	d026      	beq.n	801c9b0 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801c962:	1d3b      	adds	r3, r7, #4
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	699a      	ldr	r2, [r3, #24]
 801c968:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c96c:	4611      	mov	r1, r2
 801c96e:	4618      	mov	r0, r3
 801c970:	f7ee f825 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c974:	463b      	mov	r3, r7
 801c976:	681b      	ldr	r3, [r3, #0]
 801c978:	699a      	ldr	r2, [r3, #24]
 801c97a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801c97e:	4611      	mov	r1, r2
 801c980:	4618      	mov	r0, r3
 801c982:	f7ee f81c 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c986:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801c98a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c98e:	4611      	mov	r1, r2
 801c990:	4618      	mov	r0, r3
 801c992:	f7ee fbd8 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c996:	4603      	mov	r3, r0
 801c998:	461c      	mov	r4, r3
 801c99a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801c99e:	4618      	mov	r0, r3
 801c9a0:	f7ee fbc5 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c9a4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c9a8:	4618      	mov	r0, r3
 801c9aa:	f7ee fbc0 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c9ae:	e0f3      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801c9b0:	1d3b      	adds	r3, r7, #4
 801c9b2:	681b      	ldr	r3, [r3, #0]
 801c9b4:	f103 040c 	add.w	r4, r3, #12
 801c9b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801c9bc:	497a      	ldr	r1, [pc, #488]	; (801cba8 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801c9be:	4618      	mov	r0, r3
 801c9c0:	f7ed fffd 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801c9c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801c9c8:	4619      	mov	r1, r3
 801c9ca:	4620      	mov	r0, r4
 801c9cc:	f7ee fbbb 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801c9d0:	4603      	mov	r3, r0
 801c9d2:	461c      	mov	r4, r3
 801c9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801c9d8:	4618      	mov	r0, r3
 801c9da:	f7ee fba8 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801c9de:	2c00      	cmp	r4, #0
 801c9e0:	d00b      	beq.n	801c9fa <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801c9e2:	1d3b      	adds	r3, r7, #4
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	699a      	ldr	r2, [r3, #24]
 801c9e8:	463b      	mov	r3, r7
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	699b      	ldr	r3, [r3, #24]
 801c9ee:	429a      	cmp	r2, r3
 801c9f0:	bf0c      	ite	eq
 801c9f2:	2301      	moveq	r3, #1
 801c9f4:	2300      	movne	r3, #0
 801c9f6:	b2dc      	uxtb	r4, r3
 801c9f8:	e0ce      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801c9fa:	1d3b      	adds	r3, r7, #4
 801c9fc:	681b      	ldr	r3, [r3, #0]
 801c9fe:	f103 040c 	add.w	r4, r3, #12
 801ca02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ca06:	4969      	ldr	r1, [pc, #420]	; (801cbac <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801ca08:	4618      	mov	r0, r3
 801ca0a:	f7ed ffd8 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801ca0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ca12:	4619      	mov	r1, r3
 801ca14:	4620      	mov	r0, r4
 801ca16:	f7ee fb96 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801ca1a:	4603      	mov	r3, r0
 801ca1c:	461c      	mov	r4, r3
 801ca1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ca22:	4618      	mov	r0, r3
 801ca24:	f7ee fb83 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801ca28:	2c00      	cmp	r4, #0
 801ca2a:	d00b      	beq.n	801ca44 <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801ca2c:	1d3b      	adds	r3, r7, #4
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	699a      	ldr	r2, [r3, #24]
 801ca32:	463b      	mov	r3, r7
 801ca34:	681b      	ldr	r3, [r3, #0]
 801ca36:	699b      	ldr	r3, [r3, #24]
 801ca38:	429a      	cmp	r2, r3
 801ca3a:	bf0c      	ite	eq
 801ca3c:	2301      	moveq	r3, #1
 801ca3e:	2300      	movne	r3, #0
 801ca40:	b2dc      	uxtb	r4, r3
 801ca42:	e0a9      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801ca44:	1d3b      	adds	r3, r7, #4
 801ca46:	681b      	ldr	r3, [r3, #0]
 801ca48:	f103 040c 	add.w	r4, r3, #12
 801ca4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ca50:	4957      	ldr	r1, [pc, #348]	; (801cbb0 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801ca52:	4618      	mov	r0, r3
 801ca54:	f7ed ffb3 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801ca58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ca5c:	4619      	mov	r1, r3
 801ca5e:	4620      	mov	r0, r4
 801ca60:	f7ee fb71 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801ca64:	4603      	mov	r3, r0
 801ca66:	461c      	mov	r4, r3
 801ca68:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ca6c:	4618      	mov	r0, r3
 801ca6e:	f7ee fb5e 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801ca72:	2c00      	cmp	r4, #0
 801ca74:	d00b      	beq.n	801ca8e <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801ca76:	1d3b      	adds	r3, r7, #4
 801ca78:	681b      	ldr	r3, [r3, #0]
 801ca7a:	699a      	ldr	r2, [r3, #24]
 801ca7c:	463b      	mov	r3, r7
 801ca7e:	681b      	ldr	r3, [r3, #0]
 801ca80:	699b      	ldr	r3, [r3, #24]
 801ca82:	429a      	cmp	r2, r3
 801ca84:	bf0c      	ite	eq
 801ca86:	2301      	moveq	r3, #1
 801ca88:	2300      	movne	r3, #0
 801ca8a:	b2dc      	uxtb	r4, r3
 801ca8c:	e084      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801ca8e:	1d3b      	adds	r3, r7, #4
 801ca90:	681b      	ldr	r3, [r3, #0]
 801ca92:	f103 040c 	add.w	r4, r3, #12
 801ca96:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ca9a:	4946      	ldr	r1, [pc, #280]	; (801cbb4 <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801ca9c:	4618      	mov	r0, r3
 801ca9e:	f7ed ff8e 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801caa2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801caa6:	4619      	mov	r1, r3
 801caa8:	4620      	mov	r0, r4
 801caaa:	f7ee fb4c 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801caae:	4603      	mov	r3, r0
 801cab0:	461c      	mov	r4, r3
 801cab2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cab6:	4618      	mov	r0, r3
 801cab8:	f7ee fb39 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cabc:	2c00      	cmp	r4, #0
 801cabe:	d01c      	beq.n	801cafa <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801cac0:	1d3b      	adds	r3, r7, #4
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	ed93 7b06 	vldr	d7, [r3, #24]
 801cac8:	463b      	mov	r3, r7
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	ed93 6b06 	vldr	d6, [r3, #24]
 801cad0:	1d3b      	adds	r3, r7, #4
 801cad2:	681b      	ldr	r3, [r3, #0]
 801cad4:	ed93 5b08 	vldr	d5, [r3, #32]
 801cad8:	eeb0 2a45 	vmov.f32	s4, s10
 801cadc:	eef0 2a65 	vmov.f32	s5, s11
 801cae0:	eeb0 1a46 	vmov.f32	s2, s12
 801cae4:	eef0 1a66 	vmov.f32	s3, s13
 801cae8:	eeb0 0a47 	vmov.f32	s0, s14
 801caec:	eef0 0a67 	vmov.f32	s1, s15
 801caf0:	f7f3 fe18 	bl	8010724 <_Z13doubles_equalddd>
 801caf4:	4603      	mov	r3, r0
 801caf6:	461c      	mov	r4, r3
 801caf8:	e04e      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801cafa:	1d3b      	adds	r3, r7, #4
 801cafc:	681b      	ldr	r3, [r3, #0]
 801cafe:	f103 040c 	add.w	r4, r3, #12
 801cb02:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801cb06:	492c      	ldr	r1, [pc, #176]	; (801cbb8 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801cb08:	4618      	mov	r0, r3
 801cb0a:	f7ed ff58 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801cb0e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801cb12:	4619      	mov	r1, r3
 801cb14:	4620      	mov	r0, r4
 801cb16:	f7ee fb16 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801cb1a:	4603      	mov	r3, r0
 801cb1c:	461c      	mov	r4, r3
 801cb1e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801cb22:	4618      	mov	r0, r3
 801cb24:	f7ee fb03 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cb28:	2c00      	cmp	r4, #0
 801cb2a:	d01c      	beq.n	801cb66 <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801cb2c:	1d3b      	adds	r3, r7, #4
 801cb2e:	681b      	ldr	r3, [r3, #0]
 801cb30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801cb32:	463b      	mov	r3, r7
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb38:	429a      	cmp	r2, r3
 801cb3a:	d001      	beq.n	801cb40 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801cb3c:	2400      	movs	r4, #0
 801cb3e:	e02b      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801cb40:	1d3b      	adds	r3, r7, #4
 801cb42:	681b      	ldr	r3, [r3, #0]
 801cb44:	6998      	ldr	r0, [r3, #24]
 801cb46:	463b      	mov	r3, r7
 801cb48:	681b      	ldr	r3, [r3, #0]
 801cb4a:	6999      	ldr	r1, [r3, #24]
 801cb4c:	1d3b      	adds	r3, r7, #4
 801cb4e:	681b      	ldr	r3, [r3, #0]
 801cb50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb52:	461a      	mov	r2, r3
 801cb54:	f7ed fe52 	bl	800a7fc <_ZN12SimpleString6MemCmpEPKvS1_j>
 801cb58:	4603      	mov	r3, r0
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	bf0c      	ite	eq
 801cb5e:	2301      	moveq	r3, #1
 801cb60:	2300      	movne	r3, #0
 801cb62:	b2dc      	uxtb	r4, r3
 801cb64:	e018      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801cb66:	1d3b      	adds	r3, r7, #4
 801cb68:	681b      	ldr	r3, [r3, #0]
 801cb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d012      	beq.n	801cb96 <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801cb70:	1d3b      	adds	r3, r7, #4
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801cb76:	1d3b      	adds	r3, r7, #4
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb7c:	681b      	ldr	r3, [r3, #0]
 801cb7e:	3308      	adds	r3, #8
 801cb80:	681b      	ldr	r3, [r3, #0]
 801cb82:	1d3a      	adds	r2, r7, #4
 801cb84:	6812      	ldr	r2, [r2, #0]
 801cb86:	6991      	ldr	r1, [r2, #24]
 801cb88:	463a      	mov	r2, r7
 801cb8a:	6812      	ldr	r2, [r2, #0]
 801cb8c:	6992      	ldr	r2, [r2, #24]
 801cb8e:	4798      	blx	r3
 801cb90:	4603      	mov	r3, r0
 801cb92:	461c      	mov	r4, r3
 801cb94:	e000      	b.n	801cb98 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801cb96:	2400      	movs	r4, #0
 801cb98:	4623      	mov	r3, r4
}
 801cb9a:	4618      	mov	r0, r3
 801cb9c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801cba0:	46bd      	mov	sp, r7
 801cba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cba4:	08024138 	.word	0x08024138
 801cba8:	08024118 	.word	0x08024118
 801cbac:	08024120 	.word	0x08024120
 801cbb0:	0802412c 	.word	0x0802412c
 801cbb4:	08024110 	.word	0x08024110
 801cbb8:	08024144 	.word	0x08024144

0801cbbc <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801cbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbbe:	b087      	sub	sp, #28
 801cbc0:	af00      	add	r7, sp, #0
 801cbc2:	6078      	str	r0, [r7, #4]
 801cbc4:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	f103 020c 	add.w	r2, r3, #12
 801cbcc:	683b      	ldr	r3, [r7, #0]
 801cbce:	330c      	adds	r3, #12
 801cbd0:	4619      	mov	r1, r3
 801cbd2:	4610      	mov	r0, r2
 801cbd4:	f7ee fab7 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801cbd8:	4603      	mov	r3, r0
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	d001      	beq.n	801cbe2 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801cbde:	2301      	movs	r3, #1
 801cbe0:	e03c      	b.n	801cc5c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801cbe2:	2500      	movs	r5, #0
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	f103 040c 	add.w	r4, r3, #12
 801cbea:	f107 0308 	add.w	r3, r7, #8
 801cbee:	491d      	ldr	r1, [pc, #116]	; (801cc64 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801cbf0:	4618      	mov	r0, r3
 801cbf2:	f7ed fee4 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801cbf6:	2601      	movs	r6, #1
 801cbf8:	f107 0308 	add.w	r3, r7, #8
 801cbfc:	4619      	mov	r1, r3
 801cbfe:	4620      	mov	r0, r4
 801cc00:	f7ee faa1 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801cc04:	4603      	mov	r3, r0
 801cc06:	2b00      	cmp	r3, #0
 801cc08:	d014      	beq.n	801cc34 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801cc0a:	683b      	ldr	r3, [r7, #0]
 801cc0c:	f103 040c 	add.w	r4, r3, #12
 801cc10:	f107 0310 	add.w	r3, r7, #16
 801cc14:	4914      	ldr	r1, [pc, #80]	; (801cc68 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801cc16:	4618      	mov	r0, r3
 801cc18:	f7ed fed1 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801cc1c:	2501      	movs	r5, #1
 801cc1e:	f107 0310 	add.w	r3, r7, #16
 801cc22:	4619      	mov	r1, r3
 801cc24:	4620      	mov	r0, r4
 801cc26:	f7ee fa8e 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801cc2a:	4603      	mov	r3, r0
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d001      	beq.n	801cc34 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801cc30:	2401      	movs	r4, #1
 801cc32:	e000      	b.n	801cc36 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801cc34:	2400      	movs	r4, #0
 801cc36:	2d00      	cmp	r5, #0
 801cc38:	d004      	beq.n	801cc44 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801cc3a:	f107 0310 	add.w	r3, r7, #16
 801cc3e:	4618      	mov	r0, r3
 801cc40:	f7ee fa75 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cc44:	2e00      	cmp	r6, #0
 801cc46:	d004      	beq.n	801cc52 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801cc48:	f107 0308 	add.w	r3, r7, #8
 801cc4c:	4618      	mov	r0, r3
 801cc4e:	f7ee fa6e 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cc52:	2c00      	cmp	r4, #0
 801cc54:	d001      	beq.n	801cc5a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801cc56:	2301      	movs	r3, #1
 801cc58:	e000      	b.n	801cc5c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801cc5a:	2300      	movs	r3, #0
}
 801cc5c:	4618      	mov	r0, r3
 801cc5e:	371c      	adds	r7, #28
 801cc60:	46bd      	mov	sp, r7
 801cc62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc64:	08024120 	.word	0x08024120
 801cc68:	08024118 	.word	0x08024118

0801cc6c <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801cc6c:	b590      	push	{r4, r7, lr}
 801cc6e:	b0b9      	sub	sp, #228	; 0xe4
 801cc70:	af00      	add	r7, sp, #0
 801cc72:	6078      	str	r0, [r7, #4]
 801cc74:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801cc76:	683b      	ldr	r3, [r7, #0]
 801cc78:	f103 040c 	add.w	r4, r3, #12
 801cc7c:	f107 0308 	add.w	r3, r7, #8
 801cc80:	49d4      	ldr	r1, [pc, #848]	; (801cfd4 <_ZNK14MockNamedValue8toStringEv+0x368>)
 801cc82:	4618      	mov	r0, r3
 801cc84:	f7ed fe9b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801cc88:	f107 0308 	add.w	r3, r7, #8
 801cc8c:	4619      	mov	r1, r3
 801cc8e:	4620      	mov	r0, r4
 801cc90:	f7ee fa59 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801cc94:	4603      	mov	r3, r0
 801cc96:	461c      	mov	r4, r3
 801cc98:	f107 0308 	add.w	r3, r7, #8
 801cc9c:	4618      	mov	r0, r3
 801cc9e:	f7ee fa46 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cca2:	2c00      	cmp	r4, #0
 801cca4:	d007      	beq.n	801ccb6 <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801cca6:	683b      	ldr	r3, [r7, #0]
 801cca8:	7e1a      	ldrb	r2, [r3, #24]
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	4611      	mov	r1, r2
 801ccae:	4618      	mov	r0, r3
 801ccb0:	f7ee fcae 	bl	800b610 <_Z10StringFromb>
 801ccb4:	e23f      	b.n	801d136 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801ccb6:	683b      	ldr	r3, [r7, #0]
 801ccb8:	f103 040c 	add.w	r4, r3, #12
 801ccbc:	f107 0310 	add.w	r3, r7, #16
 801ccc0:	49c5      	ldr	r1, [pc, #788]	; (801cfd8 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801ccc2:	4618      	mov	r0, r3
 801ccc4:	f7ed fe7b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801ccc8:	f107 0310 	add.w	r3, r7, #16
 801cccc:	4619      	mov	r1, r3
 801ccce:	4620      	mov	r0, r4
 801ccd0:	f7ee fa39 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801ccd4:	4603      	mov	r3, r0
 801ccd6:	461c      	mov	r4, r3
 801ccd8:	f107 0310 	add.w	r3, r7, #16
 801ccdc:	4618      	mov	r0, r3
 801ccde:	f7ee fa26 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cce2:	2c00      	cmp	r4, #0
 801cce4:	d03b      	beq.n	801cd5e <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801cce6:	683b      	ldr	r3, [r7, #0]
 801cce8:	699a      	ldr	r2, [r3, #24]
 801ccea:	f107 0320 	add.w	r3, r7, #32
 801ccee:	4611      	mov	r1, r2
 801ccf0:	4618      	mov	r0, r3
 801ccf2:	f7ee fce3 	bl	800b6bc <_Z10StringFromi>
 801ccf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ccfa:	49b8      	ldr	r1, [pc, #736]	; (801cfdc <_ZNK14MockNamedValue8toStringEv+0x370>)
 801ccfc:	4618      	mov	r0, r3
 801ccfe:	f7ed fe5e 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801cd02:	f107 0318 	add.w	r3, r7, #24
 801cd06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801cd0a:	f107 0120 	add.w	r1, r7, #32
 801cd0e:	4618      	mov	r0, r3
 801cd10:	f7ee fa6f 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 801cd14:	683b      	ldr	r3, [r7, #0]
 801cd16:	699a      	ldr	r2, [r3, #24]
 801cd18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cd1c:	4611      	mov	r1, r2
 801cd1e:	4618      	mov	r0, r3
 801cd20:	f7ee fdbc 	bl	800b89c <_Z30BracketsFormattedHexStringFromi>
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801cd2a:	f107 0118 	add.w	r1, r7, #24
 801cd2e:	4618      	mov	r0, r3
 801cd30:	f7ee fa5f 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 801cd34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cd38:	4618      	mov	r0, r3
 801cd3a:	f7ee f9f8 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cd3e:	f107 0318 	add.w	r3, r7, #24
 801cd42:	4618      	mov	r0, r3
 801cd44:	f7ee f9f3 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cd48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cd4c:	4618      	mov	r0, r3
 801cd4e:	f7ee f9ee 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cd52:	f107 0320 	add.w	r3, r7, #32
 801cd56:	4618      	mov	r0, r3
 801cd58:	f7ee f9e9 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cd5c:	e1eb      	b.n	801d136 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801cd5e:	683b      	ldr	r3, [r7, #0]
 801cd60:	f103 040c 	add.w	r4, r3, #12
 801cd64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cd68:	499d      	ldr	r1, [pc, #628]	; (801cfe0 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801cd6a:	4618      	mov	r0, r3
 801cd6c:	f7ed fe27 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801cd70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cd74:	4619      	mov	r1, r3
 801cd76:	4620      	mov	r0, r4
 801cd78:	f7ee f9e5 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801cd7c:	4603      	mov	r3, r0
 801cd7e:	461c      	mov	r4, r3
 801cd80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cd84:	4618      	mov	r0, r3
 801cd86:	f7ee f9d2 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cd8a:	2c00      	cmp	r4, #0
 801cd8c:	d03b      	beq.n	801ce06 <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801cd8e:	683b      	ldr	r3, [r7, #0]
 801cd90:	699a      	ldr	r2, [r3, #24]
 801cd92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cd96:	4611      	mov	r1, r2
 801cd98:	4618      	mov	r0, r3
 801cd9a:	f7ee fef7 	bl	800bb8c <_Z10StringFromj>
 801cd9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801cda2:	498e      	ldr	r1, [pc, #568]	; (801cfdc <_ZNK14MockNamedValue8toStringEv+0x370>)
 801cda4:	4618      	mov	r0, r3
 801cda6:	f7ed fe0a 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801cdaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cdae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801cdb2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801cdb6:	4618      	mov	r0, r3
 801cdb8:	f7ee fa1b 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 801cdbc:	683b      	ldr	r3, [r7, #0]
 801cdbe:	699a      	ldr	r2, [r3, #24]
 801cdc0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801cdc4:	4611      	mov	r1, r2
 801cdc6:	4618      	mov	r0, r3
 801cdc8:	f7ee fd84 	bl	800b8d4 <_Z30BracketsFormattedHexStringFromj>
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801cdd2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801cdd6:	4618      	mov	r0, r3
 801cdd8:	f7ee fa0b 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 801cddc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801cde0:	4618      	mov	r0, r3
 801cde2:	f7ee f9a4 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cde6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cdea:	4618      	mov	r0, r3
 801cdec:	f7ee f99f 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cdf0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801cdf4:	4618      	mov	r0, r3
 801cdf6:	f7ee f99a 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cdfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cdfe:	4618      	mov	r0, r3
 801ce00:	f7ee f995 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801ce04:	e197      	b.n	801d136 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801ce06:	683b      	ldr	r3, [r7, #0]
 801ce08:	f103 040c 	add.w	r4, r3, #12
 801ce0c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ce10:	4974      	ldr	r1, [pc, #464]	; (801cfe4 <_ZNK14MockNamedValue8toStringEv+0x378>)
 801ce12:	4618      	mov	r0, r3
 801ce14:	f7ed fdd3 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801ce18:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ce1c:	4619      	mov	r1, r3
 801ce1e:	4620      	mov	r0, r4
 801ce20:	f7ee f991 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801ce24:	4603      	mov	r3, r0
 801ce26:	461c      	mov	r4, r3
 801ce28:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ce2c:	4618      	mov	r0, r3
 801ce2e:	f7ee f97e 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801ce32:	2c00      	cmp	r4, #0
 801ce34:	d03b      	beq.n	801ceae <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801ce36:	683b      	ldr	r3, [r7, #0]
 801ce38:	699a      	ldr	r2, [r3, #24]
 801ce3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ce3e:	4611      	mov	r1, r2
 801ce40:	4618      	mov	r0, r3
 801ce42:	f7ee fc4d 	bl	800b6e0 <_Z10StringFroml>
 801ce46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ce4a:	4964      	ldr	r1, [pc, #400]	; (801cfdc <_ZNK14MockNamedValue8toStringEv+0x370>)
 801ce4c:	4618      	mov	r0, r3
 801ce4e:	f7ed fdb6 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801ce52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801ce56:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801ce5a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801ce5e:	4618      	mov	r0, r3
 801ce60:	f7ee f9c7 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 801ce64:	683b      	ldr	r3, [r7, #0]
 801ce66:	699a      	ldr	r2, [r3, #24]
 801ce68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ce6c:	4611      	mov	r1, r2
 801ce6e:	4618      	mov	r0, r3
 801ce70:	f7ee fd4c 	bl	800b90c <_Z30BracketsFormattedHexStringFroml>
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801ce7a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801ce7e:	4618      	mov	r0, r3
 801ce80:	f7ee f9b7 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 801ce84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ce88:	4618      	mov	r0, r3
 801ce8a:	f7ee f950 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801ce8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801ce92:	4618      	mov	r0, r3
 801ce94:	f7ee f94b 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801ce98:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ce9c:	4618      	mov	r0, r3
 801ce9e:	f7ee f946 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cea2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801cea6:	4618      	mov	r0, r3
 801cea8:	f7ee f941 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801ceac:	e143      	b.n	801d136 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801ceae:	683b      	ldr	r3, [r7, #0]
 801ceb0:	f103 040c 	add.w	r4, r3, #12
 801ceb4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ceb8:	494b      	ldr	r1, [pc, #300]	; (801cfe8 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801ceba:	4618      	mov	r0, r3
 801cebc:	f7ed fd7f 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801cec0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801cec4:	4619      	mov	r1, r3
 801cec6:	4620      	mov	r0, r4
 801cec8:	f7ee f93d 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801cecc:	4603      	mov	r3, r0
 801cece:	461c      	mov	r4, r3
 801ced0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ced4:	4618      	mov	r0, r3
 801ced6:	f7ee f92a 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801ceda:	2c00      	cmp	r4, #0
 801cedc:	d03b      	beq.n	801cf56 <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801cede:	683b      	ldr	r3, [r7, #0]
 801cee0:	699a      	ldr	r2, [r3, #24]
 801cee2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801cee6:	4611      	mov	r1, r2
 801cee8:	4618      	mov	r0, r3
 801ceea:	f7ee fe61 	bl	800bbb0 <_Z10StringFromm>
 801ceee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801cef2:	493a      	ldr	r1, [pc, #232]	; (801cfdc <_ZNK14MockNamedValue8toStringEv+0x370>)
 801cef4:	4618      	mov	r0, r3
 801cef6:	f7ed fd62 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801cefa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801cefe:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801cf02:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801cf06:	4618      	mov	r0, r3
 801cf08:	f7ee f973 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 801cf0c:	683b      	ldr	r3, [r7, #0]
 801cf0e:	699a      	ldr	r2, [r3, #24]
 801cf10:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801cf14:	4611      	mov	r1, r2
 801cf16:	4618      	mov	r0, r3
 801cf18:	f7ee fd14 	bl	800b944 <_Z30BracketsFormattedHexStringFromm>
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801cf22:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801cf26:	4618      	mov	r0, r3
 801cf28:	f7ee f963 	bl	800b1f2 <_ZNK12SimpleStringplERKS_>
 801cf2c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801cf30:	4618      	mov	r0, r3
 801cf32:	f7ee f8fc 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cf36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801cf3a:	4618      	mov	r0, r3
 801cf3c:	f7ee f8f7 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cf40:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801cf44:	4618      	mov	r0, r3
 801cf46:	f7ee f8f2 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cf4a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801cf4e:	4618      	mov	r0, r3
 801cf50:	f7ee f8ed 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cf54:	e0ef      	b.n	801d136 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801cf56:	683b      	ldr	r3, [r7, #0]
 801cf58:	f103 040c 	add.w	r4, r3, #12
 801cf5c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cf60:	4922      	ldr	r1, [pc, #136]	; (801cfec <_ZNK14MockNamedValue8toStringEv+0x380>)
 801cf62:	4618      	mov	r0, r3
 801cf64:	f7ed fd2b 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801cf68:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cf6c:	4619      	mov	r1, r3
 801cf6e:	4620      	mov	r0, r4
 801cf70:	f7ee f8e9 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801cf74:	4603      	mov	r3, r0
 801cf76:	461c      	mov	r4, r3
 801cf78:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cf7c:	4618      	mov	r0, r3
 801cf7e:	f7ee f8d6 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cf82:	2c00      	cmp	r4, #0
 801cf84:	d006      	beq.n	801cf94 <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801cf86:	683b      	ldr	r3, [r7, #0]
 801cf88:	699b      	ldr	r3, [r3, #24]
 801cf8a:	4619      	mov	r1, r3
 801cf8c:	6878      	ldr	r0, [r7, #4]
 801cf8e:	f7ed fd16 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801cf92:	e0d0      	b.n	801d136 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801cf94:	683b      	ldr	r3, [r7, #0]
 801cf96:	f103 040c 	add.w	r4, r3, #12
 801cf9a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801cf9e:	4914      	ldr	r1, [pc, #80]	; (801cff0 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801cfa0:	4618      	mov	r0, r3
 801cfa2:	f7ed fd0c 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801cfa6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801cfaa:	4619      	mov	r1, r3
 801cfac:	4620      	mov	r0, r4
 801cfae:	f7ee f8ca 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801cfb2:	4603      	mov	r3, r0
 801cfb4:	461c      	mov	r4, r3
 801cfb6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801cfba:	4618      	mov	r0, r3
 801cfbc:	f7ee f8b7 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801cfc0:	2c00      	cmp	r4, #0
 801cfc2:	d017      	beq.n	801cff4 <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801cfc4:	683b      	ldr	r3, [r7, #0]
 801cfc6:	699a      	ldr	r2, [r3, #24]
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	4611      	mov	r1, r2
 801cfcc:	4618      	mov	r0, r3
 801cfce:	f7ee fb99 	bl	800b704 <_Z10StringFromPKv>
 801cfd2:	e0b0      	b.n	801d136 <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801cfd4:	08024070 	.word	0x08024070
 801cfd8:	0802406c 	.word	0x0802406c
 801cfdc:	0802415c 	.word	0x0802415c
 801cfe0:	08024078 	.word	0x08024078
 801cfe4:	08024088 	.word	0x08024088
 801cfe8:	08024094 	.word	0x08024094
 801cfec:	08024138 	.word	0x08024138
 801cff0:	08024118 	.word	0x08024118
    else if (type_ == "void (*)()")
 801cff4:	683b      	ldr	r3, [r7, #0]
 801cff6:	f103 040c 	add.w	r4, r3, #12
 801cffa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801cffe:	4950      	ldr	r1, [pc, #320]	; (801d140 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801d000:	4618      	mov	r0, r3
 801d002:	f7ed fcdc 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801d006:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d00a:	4619      	mov	r1, r3
 801d00c:	4620      	mov	r0, r4
 801d00e:	f7ee f89a 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801d012:	4603      	mov	r3, r0
 801d014:	461c      	mov	r4, r3
 801d016:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d01a:	4618      	mov	r0, r3
 801d01c:	f7ee f887 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801d020:	2c00      	cmp	r4, #0
 801d022:	d007      	beq.n	801d034 <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801d024:	683b      	ldr	r3, [r7, #0]
 801d026:	699a      	ldr	r2, [r3, #24]
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	4611      	mov	r1, r2
 801d02c:	4618      	mov	r0, r3
 801d02e:	f7ee fb93 	bl	800b758 <_Z10StringFromPFvvE>
 801d032:	e080      	b.n	801d136 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801d034:	683b      	ldr	r3, [r7, #0]
 801d036:	f103 040c 	add.w	r4, r3, #12
 801d03a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d03e:	4941      	ldr	r1, [pc, #260]	; (801d144 <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801d040:	4618      	mov	r0, r3
 801d042:	f7ed fcbc 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801d046:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d04a:	4619      	mov	r1, r3
 801d04c:	4620      	mov	r0, r4
 801d04e:	f7ee f87a 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801d052:	4603      	mov	r3, r0
 801d054:	461c      	mov	r4, r3
 801d056:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d05a:	4618      	mov	r0, r3
 801d05c:	f7ee f867 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801d060:	2c00      	cmp	r4, #0
 801d062:	d007      	beq.n	801d074 <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801d064:	683b      	ldr	r3, [r7, #0]
 801d066:	699a      	ldr	r2, [r3, #24]
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	4611      	mov	r1, r2
 801d06c:	4618      	mov	r0, r3
 801d06e:	f7ee fb49 	bl	800b704 <_Z10StringFromPKv>
 801d072:	e060      	b.n	801d136 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801d074:	683b      	ldr	r3, [r7, #0]
 801d076:	f103 040c 	add.w	r4, r3, #12
 801d07a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d07e:	4932      	ldr	r1, [pc, #200]	; (801d148 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801d080:	4618      	mov	r0, r3
 801d082:	f7ed fc9c 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801d086:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d08a:	4619      	mov	r1, r3
 801d08c:	4620      	mov	r0, r4
 801d08e:	f7ee f85a 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801d092:	4603      	mov	r3, r0
 801d094:	461c      	mov	r4, r3
 801d096:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d09a:	4618      	mov	r0, r3
 801d09c:	f7ee f847 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801d0a0:	2c00      	cmp	r4, #0
 801d0a2:	d00c      	beq.n	801d0be <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801d0a4:	683b      	ldr	r3, [r7, #0]
 801d0a6:	ed93 7b06 	vldr	d7, [r3, #24]
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	2106      	movs	r1, #6
 801d0ae:	eeb0 0a47 	vmov.f32	s0, s14
 801d0b2:	eef0 0a67 	vmov.f32	s1, s15
 801d0b6:	4618      	mov	r0, r3
 801d0b8:	f7ee fcfe 	bl	800bab8 <_Z10StringFromdi>
 801d0bc:	e03b      	b.n	801d136 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801d0be:	683b      	ldr	r3, [r7, #0]
 801d0c0:	f103 040c 	add.w	r4, r3, #12
 801d0c4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d0c8:	4920      	ldr	r1, [pc, #128]	; (801d14c <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801d0ca:	4618      	mov	r0, r3
 801d0cc:	f7ed fc77 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801d0d0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d0d4:	4619      	mov	r1, r3
 801d0d6:	4620      	mov	r0, r4
 801d0d8:	f7ee f835 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801d0dc:	4603      	mov	r3, r0
 801d0de:	461c      	mov	r4, r3
 801d0e0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d0e4:	4618      	mov	r0, r3
 801d0e6:	f7ee f822 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801d0ea:	2c00      	cmp	r4, #0
 801d0ec:	d008      	beq.n	801d100 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801d0ee:	683b      	ldr	r3, [r7, #0]
 801d0f0:	6999      	ldr	r1, [r3, #24]
 801d0f2:	683b      	ldr	r3, [r7, #0]
 801d0f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	4618      	mov	r0, r3
 801d0fa:	f7ee fe71 	bl	800bde0 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801d0fe:	e01a      	b.n	801d136 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801d100:	683b      	ldr	r3, [r7, #0]
 801d102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d104:	2b00      	cmp	r3, #0
 801d106:	d00b      	beq.n	801d120 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801d108:	683b      	ldr	r3, [r7, #0]
 801d10a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801d10c:	683b      	ldr	r3, [r7, #0]
 801d10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	330c      	adds	r3, #12
 801d114:	681b      	ldr	r3, [r3, #0]
 801d116:	683a      	ldr	r2, [r7, #0]
 801d118:	6992      	ldr	r2, [r2, #24]
 801d11a:	6878      	ldr	r0, [r7, #4]
 801d11c:	4798      	blx	r3
 801d11e:	e00a      	b.n	801d136 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801d120:	683b      	ldr	r3, [r7, #0]
 801d122:	330c      	adds	r3, #12
 801d124:	4618      	mov	r0, r3
 801d126:	f7ed ffd5 	bl	800b0d4 <_ZNK12SimpleString12asCharStringEv>
 801d12a:	4602      	mov	r2, r0
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	4908      	ldr	r1, [pc, #32]	; (801d150 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801d130:	4618      	mov	r0, r3
 801d132:	f7ee fd03 	bl	800bb3c <_Z16StringFromFormatPKcz>

}
 801d136:	6878      	ldr	r0, [r7, #4]
 801d138:	37e4      	adds	r7, #228	; 0xe4
 801d13a:	46bd      	mov	sp, r7
 801d13c:	bd90      	pop	{r4, r7, pc}
 801d13e:	bf00      	nop
 801d140:	0802412c 	.word	0x0802412c
 801d144:	08024120 	.word	0x08024120
 801d148:	08024110 	.word	0x08024110
 801d14c:	08024144 	.word	0x08024144
 801d150:	08024160 	.word	0x08024160

0801d154 <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801d154:	b480      	push	{r7}
 801d156:	b083      	sub	sp, #12
 801d158:	af00      	add	r7, sp, #0
 801d15a:	6078      	str	r0, [r7, #4]
 801d15c:	6039      	str	r1, [r7, #0]
    next_ = node;
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	683a      	ldr	r2, [r7, #0]
 801d162:	605a      	str	r2, [r3, #4]
}
 801d164:	bf00      	nop
 801d166:	370c      	adds	r7, #12
 801d168:	46bd      	mov	sp, r7
 801d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d16e:	4770      	bx	lr

0801d170 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801d170:	b480      	push	{r7}
 801d172:	b083      	sub	sp, #12
 801d174:	af00      	add	r7, sp, #0
 801d176:	6078      	str	r0, [r7, #4]
    return next_;
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	685b      	ldr	r3, [r3, #4]
}
 801d17c:	4618      	mov	r0, r3
 801d17e:	370c      	adds	r7, #12
 801d180:	46bd      	mov	sp, r7
 801d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d186:	4770      	bx	lr

0801d188 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801d188:	b480      	push	{r7}
 801d18a:	b083      	sub	sp, #12
 801d18c:	af00      	add	r7, sp, #0
 801d18e:	6078      	str	r0, [r7, #4]
    return data_;
 801d190:	687b      	ldr	r3, [r7, #4]
 801d192:	681b      	ldr	r3, [r3, #0]
}
 801d194:	4618      	mov	r0, r3
 801d196:	370c      	adds	r7, #12
 801d198:	46bd      	mov	sp, r7
 801d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d19e:	4770      	bx	lr

0801d1a0 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801d1a0:	b580      	push	{r7, lr}
 801d1a2:	b082      	sub	sp, #8
 801d1a4:	af00      	add	r7, sp, #0
 801d1a6:	6078      	str	r0, [r7, #4]
    delete data_;
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	681b      	ldr	r3, [r3, #0]
 801d1ac:	2b00      	cmp	r3, #0
 801d1ae:	d004      	beq.n	801d1ba <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801d1b0:	681a      	ldr	r2, [r3, #0]
 801d1b2:	3204      	adds	r2, #4
 801d1b4:	6812      	ldr	r2, [r2, #0]
 801d1b6:	4618      	mov	r0, r3
 801d1b8:	4790      	blx	r2
}
 801d1ba:	bf00      	nop
 801d1bc:	3708      	adds	r7, #8
 801d1be:	46bd      	mov	sp, r7
 801d1c0:	bd80      	pop	{r7, pc}

0801d1c2 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801d1c2:	b480      	push	{r7}
 801d1c4:	b083      	sub	sp, #12
 801d1c6:	af00      	add	r7, sp, #0
 801d1c8:	6078      	str	r0, [r7, #4]
 801d1ca:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	683a      	ldr	r2, [r7, #0]
 801d1d0:	601a      	str	r2, [r3, #0]
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	2200      	movs	r2, #0
 801d1d6:	605a      	str	r2, [r3, #4]
{
}
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	4618      	mov	r0, r3
 801d1dc:	370c      	adds	r7, #12
 801d1de:	46bd      	mov	sp, r7
 801d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1e4:	4770      	bx	lr

0801d1e6 <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801d1e6:	b580      	push	{r7, lr}
 801d1e8:	b082      	sub	sp, #8
 801d1ea:	af00      	add	r7, sp, #0
 801d1ec:	6078      	str	r0, [r7, #4]
 801d1ee:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801d1f0:	683b      	ldr	r3, [r7, #0]
 801d1f2:	6819      	ldr	r1, [r3, #0]
 801d1f4:	683b      	ldr	r3, [r7, #0]
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	681b      	ldr	r3, [r3, #0]
 801d1fa:	335c      	adds	r3, #92	; 0x5c
 801d1fc:	681b      	ldr	r3, [r3, #0]
 801d1fe:	687a      	ldr	r2, [r7, #4]
 801d200:	4610      	mov	r0, r2
 801d202:	4798      	blx	r3
}
 801d204:	6878      	ldr	r0, [r7, #4]
 801d206:	3708      	adds	r7, #8
 801d208:	46bd      	mov	sp, r7
 801d20a:	bd80      	pop	{r7, pc}

0801d20c <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801d20c:	b580      	push	{r7, lr}
 801d20e:	b082      	sub	sp, #8
 801d210:	af00      	add	r7, sp, #0
 801d212:	6078      	str	r0, [r7, #4]
 801d214:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801d216:	683b      	ldr	r3, [r7, #0]
 801d218:	6819      	ldr	r1, [r3, #0]
 801d21a:	683b      	ldr	r3, [r7, #0]
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	681b      	ldr	r3, [r3, #0]
 801d220:	3360      	adds	r3, #96	; 0x60
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	687a      	ldr	r2, [r7, #4]
 801d226:	4610      	mov	r0, r2
 801d228:	4798      	blx	r3
}
 801d22a:	6878      	ldr	r0, [r7, #4]
 801d22c:	3708      	adds	r7, #8
 801d22e:	46bd      	mov	sp, r7
 801d230:	bd80      	pop	{r7, pc}

0801d232 <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801d232:	b480      	push	{r7}
 801d234:	b083      	sub	sp, #12
 801d236:	af00      	add	r7, sp, #0
 801d238:	6078      	str	r0, [r7, #4]
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	2200      	movs	r2, #0
 801d23e:	601a      	str	r2, [r3, #0]
{
}
 801d240:	687b      	ldr	r3, [r7, #4]
 801d242:	4618      	mov	r0, r3
 801d244:	370c      	adds	r7, #12
 801d246:	46bd      	mov	sp, r7
 801d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d24c:	4770      	bx	lr

0801d24e <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801d24e:	b580      	push	{r7, lr}
 801d250:	b084      	sub	sp, #16
 801d252:	af00      	add	r7, sp, #0
 801d254:	6078      	str	r0, [r7, #4]
    while (head_) {
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	d016      	beq.n	801d28c <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	681b      	ldr	r3, [r3, #0]
 801d262:	4618      	mov	r0, r3
 801d264:	f7ff ff84 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 801d268:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	681b      	ldr	r3, [r3, #0]
 801d26e:	4618      	mov	r0, r3
 801d270:	f7ff ff96 	bl	801d1a0 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	2b00      	cmp	r3, #0
 801d27a:	d003      	beq.n	801d284 <_ZN18MockNamedValueList5clearEv+0x36>
 801d27c:	2108      	movs	r1, #8
 801d27e:	4618      	mov	r0, r3
 801d280:	f7ea ffee 	bl	8008260 <_ZdlPvj>
        head_ = n;
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	68fa      	ldr	r2, [r7, #12]
 801d288:	601a      	str	r2, [r3, #0]
    while (head_) {
 801d28a:	e7e4      	b.n	801d256 <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801d28c:	bf00      	nop
 801d28e:	3710      	adds	r7, #16
 801d290:	46bd      	mov	sp, r7
 801d292:	bd80      	pop	{r7, pc}

0801d294 <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801d294:	b590      	push	{r4, r7, lr}
 801d296:	b085      	sub	sp, #20
 801d298:	af00      	add	r7, sp, #0
 801d29a:	6078      	str	r0, [r7, #4]
 801d29c:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801d29e:	f44f 7210 	mov.w	r2, #576	; 0x240
 801d2a2:	4916      	ldr	r1, [pc, #88]	; (801d2fc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801d2a4:	2008      	movs	r0, #8
 801d2a6:	f7ea ffc7 	bl	8008238 <_ZnwjPKci>
 801d2aa:	4604      	mov	r4, r0
 801d2ac:	6839      	ldr	r1, [r7, #0]
 801d2ae:	4620      	mov	r0, r4
 801d2b0:	f7ff ff87 	bl	801d1c2 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801d2b4:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801d2b6:	687b      	ldr	r3, [r7, #4]
 801d2b8:	681b      	ldr	r3, [r3, #0]
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	d103      	bne.n	801d2c6 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	68ba      	ldr	r2, [r7, #8]
 801d2c2:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801d2c4:	e016      	b.n	801d2f4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	681b      	ldr	r3, [r3, #0]
 801d2ca:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801d2cc:	68f8      	ldr	r0, [r7, #12]
 801d2ce:	f7ff ff4f 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 801d2d2:	4603      	mov	r3, r0
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	bf14      	ite	ne
 801d2d8:	2301      	movne	r3, #1
 801d2da:	2300      	moveq	r3, #0
 801d2dc:	b2db      	uxtb	r3, r3
 801d2de:	2b00      	cmp	r3, #0
 801d2e0:	d004      	beq.n	801d2ec <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801d2e2:	68f8      	ldr	r0, [r7, #12]
 801d2e4:	f7ff ff44 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 801d2e8:	60f8      	str	r0, [r7, #12]
 801d2ea:	e7ef      	b.n	801d2cc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801d2ec:	68b9      	ldr	r1, [r7, #8]
 801d2ee:	68f8      	ldr	r0, [r7, #12]
 801d2f0:	f7ff ff30 	bl	801d154 <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801d2f4:	bf00      	nop
 801d2f6:	3714      	adds	r7, #20
 801d2f8:	46bd      	mov	sp, r7
 801d2fa:	bd90      	pop	{r4, r7, pc}
 801d2fc:	080240a8 	.word	0x080240a8

0801d300 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801d300:	b590      	push	{r4, r7, lr}
 801d302:	b087      	sub	sp, #28
 801d304:	af00      	add	r7, sp, #0
 801d306:	6078      	str	r0, [r7, #4]
 801d308:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801d30a:	687b      	ldr	r3, [r7, #4]
 801d30c:	681b      	ldr	r3, [r3, #0]
 801d30e:	617b      	str	r3, [r7, #20]
 801d310:	697b      	ldr	r3, [r7, #20]
 801d312:	2b00      	cmp	r3, #0
 801d314:	d01e      	beq.n	801d354 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801d316:	f107 030c 	add.w	r3, r7, #12
 801d31a:	6979      	ldr	r1, [r7, #20]
 801d31c:	4618      	mov	r0, r3
 801d31e:	f7ff ff62 	bl	801d1e6 <_ZNK22MockNamedValueListNode7getNameEv>
 801d322:	f107 030c 	add.w	r3, r7, #12
 801d326:	6839      	ldr	r1, [r7, #0]
 801d328:	4618      	mov	r0, r3
 801d32a:	f7ed ff0c 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801d32e:	4603      	mov	r3, r0
 801d330:	461c      	mov	r4, r3
 801d332:	f107 030c 	add.w	r3, r7, #12
 801d336:	4618      	mov	r0, r3
 801d338:	f7ed fef9 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801d33c:	2c00      	cmp	r4, #0
 801d33e:	d004      	beq.n	801d34a <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801d340:	6978      	ldr	r0, [r7, #20]
 801d342:	f7ff ff21 	bl	801d188 <_ZN22MockNamedValueListNode4itemEv>
 801d346:	4603      	mov	r3, r0
 801d348:	e005      	b.n	801d356 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801d34a:	6978      	ldr	r0, [r7, #20]
 801d34c:	f7ff ff10 	bl	801d170 <_ZN22MockNamedValueListNode4nextEv>
 801d350:	6178      	str	r0, [r7, #20]
 801d352:	e7dd      	b.n	801d310 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801d354:	2300      	movs	r3, #0
}
 801d356:	4618      	mov	r0, r3
 801d358:	371c      	adds	r7, #28
 801d35a:	46bd      	mov	sp, r7
 801d35c:	bd90      	pop	{r4, r7, pc}

0801d35e <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801d35e:	b480      	push	{r7}
 801d360:	b083      	sub	sp, #12
 801d362:	af00      	add	r7, sp, #0
 801d364:	6078      	str	r0, [r7, #4]
    return head_;
 801d366:	687b      	ldr	r3, [r7, #4]
 801d368:	681b      	ldr	r3, [r3, #0]
}
 801d36a:	4618      	mov	r0, r3
 801d36c:	370c      	adds	r7, #12
 801d36e:	46bd      	mov	sp, r7
 801d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d374:	4770      	bx	lr

0801d376 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801d376:	b580      	push	{r7, lr}
 801d378:	b084      	sub	sp, #16
 801d37a:	af00      	add	r7, sp, #0
 801d37c:	60f8      	str	r0, [r7, #12]
 801d37e:	60b9      	str	r1, [r7, #8]
 801d380:	607a      	str	r2, [r7, #4]
 801d382:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801d384:	68fb      	ldr	r3, [r7, #12]
 801d386:	68b9      	ldr	r1, [r7, #8]
 801d388:	4618      	mov	r0, r3
 801d38a:	f7ed fb6c 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 801d38e:	68fb      	ldr	r3, [r7, #12]
 801d390:	687a      	ldr	r2, [r7, #4]
 801d392:	609a      	str	r2, [r3, #8]
 801d394:	68fb      	ldr	r3, [r7, #12]
 801d396:	2200      	movs	r2, #0
 801d398:	60da      	str	r2, [r3, #12]
 801d39a:	68fb      	ldr	r3, [r7, #12]
 801d39c:	683a      	ldr	r2, [r7, #0]
 801d39e:	611a      	str	r2, [r3, #16]
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	4618      	mov	r0, r3
 801d3a4:	3710      	adds	r7, #16
 801d3a6:	46bd      	mov	sp, r7
 801d3a8:	bd80      	pop	{r7, pc}

0801d3aa <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801d3aa:	b580      	push	{r7, lr}
 801d3ac:	b084      	sub	sp, #16
 801d3ae:	af00      	add	r7, sp, #0
 801d3b0:	60f8      	str	r0, [r7, #12]
 801d3b2:	60b9      	str	r1, [r7, #8]
 801d3b4:	607a      	str	r2, [r7, #4]
 801d3b6:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801d3b8:	68fb      	ldr	r3, [r7, #12]
 801d3ba:	68b9      	ldr	r1, [r7, #8]
 801d3bc:	4618      	mov	r0, r3
 801d3be:	f7ed fb52 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 801d3c2:	68fb      	ldr	r3, [r7, #12]
 801d3c4:	2200      	movs	r2, #0
 801d3c6:	609a      	str	r2, [r3, #8]
 801d3c8:	68fb      	ldr	r3, [r7, #12]
 801d3ca:	687a      	ldr	r2, [r7, #4]
 801d3cc:	60da      	str	r2, [r3, #12]
 801d3ce:	68fb      	ldr	r3, [r7, #12]
 801d3d0:	683a      	ldr	r2, [r7, #0]
 801d3d2:	611a      	str	r2, [r3, #16]
 801d3d4:	68fb      	ldr	r3, [r7, #12]
 801d3d6:	4618      	mov	r0, r3
 801d3d8:	3710      	adds	r7, #16
 801d3da:	46bd      	mov	sp, r7
 801d3dc:	bd80      	pop	{r7, pc}

0801d3de <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801d3de:	b580      	push	{r7, lr}
 801d3e0:	b084      	sub	sp, #16
 801d3e2:	af00      	add	r7, sp, #0
 801d3e4:	60f8      	str	r0, [r7, #12]
 801d3e6:	60b9      	str	r1, [r7, #8]
 801d3e8:	607a      	str	r2, [r7, #4]
 801d3ea:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801d3ec:	68fb      	ldr	r3, [r7, #12]
 801d3ee:	68b9      	ldr	r1, [r7, #8]
 801d3f0:	4618      	mov	r0, r3
 801d3f2:	f7ed fb38 	bl	800aa66 <_ZN12SimpleStringC1ERKS_>
 801d3f6:	68fb      	ldr	r3, [r7, #12]
 801d3f8:	687a      	ldr	r2, [r7, #4]
 801d3fa:	609a      	str	r2, [r3, #8]
 801d3fc:	68fb      	ldr	r3, [r7, #12]
 801d3fe:	683a      	ldr	r2, [r7, #0]
 801d400:	60da      	str	r2, [r3, #12]
 801d402:	68fb      	ldr	r3, [r7, #12]
 801d404:	69ba      	ldr	r2, [r7, #24]
 801d406:	611a      	str	r2, [r3, #16]
 801d408:	68fb      	ldr	r3, [r7, #12]
 801d40a:	4618      	mov	r0, r3
 801d40c:	3710      	adds	r7, #16
 801d40e:	46bd      	mov	sp, r7
 801d410:	bd80      	pop	{r7, pc}
	...

0801d414 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801d414:	b480      	push	{r7}
 801d416:	b083      	sub	sp, #12
 801d418:	af00      	add	r7, sp, #0
 801d41a:	6078      	str	r0, [r7, #4]
 801d41c:	4a06      	ldr	r2, [pc, #24]	; (801d438 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	601a      	str	r2, [r3, #0]
 801d422:	687b      	ldr	r3, [r7, #4]
 801d424:	2200      	movs	r2, #0
 801d426:	605a      	str	r2, [r3, #4]
{

}
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	4618      	mov	r0, r3
 801d42c:	370c      	adds	r7, #12
 801d42e:	46bd      	mov	sp, r7
 801d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d434:	4770      	bx	lr
 801d436:	bf00      	nop
 801d438:	080263f8 	.word	0x080263f8

0801d43c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801d43c:	b580      	push	{r7, lr}
 801d43e:	b082      	sub	sp, #8
 801d440:	af00      	add	r7, sp, #0
 801d442:	6078      	str	r0, [r7, #4]
 801d444:	4a05      	ldr	r2, [pc, #20]	; (801d45c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	601a      	str	r2, [r3, #0]
{
    clear();
 801d44a:	6878      	ldr	r0, [r7, #4]
 801d44c:	f000 f825 	bl	801d49a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	4618      	mov	r0, r3
 801d454:	3708      	adds	r7, #8
 801d456:	46bd      	mov	sp, r7
 801d458:	bd80      	pop	{r7, pc}
 801d45a:	bf00      	nop
 801d45c:	080263f8 	.word	0x080263f8

0801d460 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801d460:	b580      	push	{r7, lr}
 801d462:	b082      	sub	sp, #8
 801d464:	af00      	add	r7, sp, #0
 801d466:	6078      	str	r0, [r7, #4]
}
 801d468:	6878      	ldr	r0, [r7, #4]
 801d46a:	f7ff ffe7 	bl	801d43c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801d46e:	2108      	movs	r1, #8
 801d470:	6878      	ldr	r0, [r7, #4]
 801d472:	f7ea fef5 	bl	8008260 <_ZdlPvj>
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	4618      	mov	r0, r3
 801d47a:	3708      	adds	r7, #8
 801d47c:	46bd      	mov	sp, r7
 801d47e:	bd80      	pop	{r7, pc}

0801d480 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801d480:	b580      	push	{r7, lr}
 801d482:	b082      	sub	sp, #8
 801d484:	af00      	add	r7, sp, #0
 801d486:	6078      	str	r0, [r7, #4]
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	4618      	mov	r0, r3
 801d48c:	f7ed fe4f 	bl	800b12e <_ZN12SimpleStringD1Ev>
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	4618      	mov	r0, r3
 801d494:	3708      	adds	r7, #8
 801d496:	46bd      	mov	sp, r7
 801d498:	bd80      	pop	{r7, pc}

0801d49a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801d49a:	b590      	push	{r4, r7, lr}
 801d49c:	b085      	sub	sp, #20
 801d49e:	af00      	add	r7, sp, #0
 801d4a0:	6078      	str	r0, [r7, #4]
    while (head_) {
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	685b      	ldr	r3, [r3, #4]
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d012      	beq.n	801d4d0 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	685b      	ldr	r3, [r3, #4]
 801d4ae:	691b      	ldr	r3, [r3, #16]
 801d4b0:	60fb      	str	r3, [r7, #12]
        delete head_;
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	685c      	ldr	r4, [r3, #4]
 801d4b6:	2c00      	cmp	r4, #0
 801d4b8:	d006      	beq.n	801d4c8 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801d4ba:	4620      	mov	r0, r4
 801d4bc:	f7ff ffe0 	bl	801d480 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801d4c0:	2114      	movs	r1, #20
 801d4c2:	4620      	mov	r0, r4
 801d4c4:	f7ea fecc 	bl	8008260 <_ZdlPvj>
        head_ = next;
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	68fa      	ldr	r2, [r7, #12]
 801d4cc:	605a      	str	r2, [r3, #4]
    while (head_) {
 801d4ce:	e7e8      	b.n	801d4a2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801d4d0:	bf00      	nop
 801d4d2:	3714      	adds	r7, #20
 801d4d4:	46bd      	mov	sp, r7
 801d4d6:	bd90      	pop	{r4, r7, pc}

0801d4d8 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801d4d8:	b590      	push	{r4, r7, lr}
 801d4da:	b085      	sub	sp, #20
 801d4dc:	af00      	add	r7, sp, #0
 801d4de:	60f8      	str	r0, [r7, #12]
 801d4e0:	60b9      	str	r1, [r7, #8]
 801d4e2:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801d4e4:	f240 227a 	movw	r2, #634	; 0x27a
 801d4e8:	4908      	ldr	r1, [pc, #32]	; (801d50c <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801d4ea:	2014      	movs	r0, #20
 801d4ec:	f7ea fea4 	bl	8008238 <_ZnwjPKci>
 801d4f0:	4604      	mov	r4, r0
 801d4f2:	68fb      	ldr	r3, [r7, #12]
 801d4f4:	685b      	ldr	r3, [r3, #4]
 801d4f6:	687a      	ldr	r2, [r7, #4]
 801d4f8:	68b9      	ldr	r1, [r7, #8]
 801d4fa:	4620      	mov	r0, r4
 801d4fc:	f7ff ff3b 	bl	801d376 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801d500:	68fb      	ldr	r3, [r7, #12]
 801d502:	605c      	str	r4, [r3, #4]
}
 801d504:	bf00      	nop
 801d506:	3714      	adds	r7, #20
 801d508:	46bd      	mov	sp, r7
 801d50a:	bd90      	pop	{r4, r7, pc}
 801d50c:	080240a8 	.word	0x080240a8

0801d510 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801d510:	b590      	push	{r4, r7, lr}
 801d512:	b085      	sub	sp, #20
 801d514:	af00      	add	r7, sp, #0
 801d516:	60f8      	str	r0, [r7, #12]
 801d518:	60b9      	str	r1, [r7, #8]
 801d51a:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801d51c:	f240 227f 	movw	r2, #639	; 0x27f
 801d520:	4908      	ldr	r1, [pc, #32]	; (801d544 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801d522:	2014      	movs	r0, #20
 801d524:	f7ea fe88 	bl	8008238 <_ZnwjPKci>
 801d528:	4604      	mov	r4, r0
 801d52a:	68fb      	ldr	r3, [r7, #12]
 801d52c:	685b      	ldr	r3, [r3, #4]
 801d52e:	687a      	ldr	r2, [r7, #4]
 801d530:	68b9      	ldr	r1, [r7, #8]
 801d532:	4620      	mov	r0, r4
 801d534:	f7ff ff39 	bl	801d3aa <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801d538:	68fb      	ldr	r3, [r7, #12]
 801d53a:	605c      	str	r4, [r3, #4]
}
 801d53c:	bf00      	nop
 801d53e:	3714      	adds	r7, #20
 801d540:	46bd      	mov	sp, r7
 801d542:	bd90      	pop	{r4, r7, pc}
 801d544:	080240a8 	.word	0x080240a8

0801d548 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801d548:	b580      	push	{r7, lr}
 801d54a:	b084      	sub	sp, #16
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
 801d550:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801d552:	687b      	ldr	r3, [r7, #4]
 801d554:	685b      	ldr	r3, [r3, #4]
 801d556:	60fb      	str	r3, [r7, #12]
 801d558:	68fb      	ldr	r3, [r7, #12]
 801d55a:	2b00      	cmp	r3, #0
 801d55c:	d017      	beq.n	801d58e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	6839      	ldr	r1, [r7, #0]
 801d562:	4618      	mov	r0, r3
 801d564:	f7ed fdef 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801d568:	4603      	mov	r3, r0
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d005      	beq.n	801d57a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801d56e:	68fb      	ldr	r3, [r7, #12]
 801d570:	689b      	ldr	r3, [r3, #8]
 801d572:	2b00      	cmp	r3, #0
 801d574:	d001      	beq.n	801d57a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801d576:	2301      	movs	r3, #1
 801d578:	e000      	b.n	801d57c <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801d57a:	2300      	movs	r3, #0
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	d002      	beq.n	801d586 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801d580:	68fb      	ldr	r3, [r7, #12]
 801d582:	689b      	ldr	r3, [r3, #8]
 801d584:	e004      	b.n	801d590 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801d586:	68fb      	ldr	r3, [r7, #12]
 801d588:	691b      	ldr	r3, [r3, #16]
 801d58a:	60fb      	str	r3, [r7, #12]
 801d58c:	e7e4      	b.n	801d558 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801d58e:	2300      	movs	r3, #0
}
 801d590:	4618      	mov	r0, r3
 801d592:	3710      	adds	r7, #16
 801d594:	46bd      	mov	sp, r7
 801d596:	bd80      	pop	{r7, pc}

0801d598 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801d598:	b580      	push	{r7, lr}
 801d59a:	b084      	sub	sp, #16
 801d59c:	af00      	add	r7, sp, #0
 801d59e:	6078      	str	r0, [r7, #4]
 801d5a0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	685b      	ldr	r3, [r3, #4]
 801d5a6:	60fb      	str	r3, [r7, #12]
 801d5a8:	68fb      	ldr	r3, [r7, #12]
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	d017      	beq.n	801d5de <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801d5ae:	68fb      	ldr	r3, [r7, #12]
 801d5b0:	6839      	ldr	r1, [r7, #0]
 801d5b2:	4618      	mov	r0, r3
 801d5b4:	f7ed fdc7 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801d5b8:	4603      	mov	r3, r0
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d005      	beq.n	801d5ca <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801d5be:	68fb      	ldr	r3, [r7, #12]
 801d5c0:	68db      	ldr	r3, [r3, #12]
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	d001      	beq.n	801d5ca <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801d5c6:	2301      	movs	r3, #1
 801d5c8:	e000      	b.n	801d5cc <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801d5ca:	2300      	movs	r3, #0
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	d002      	beq.n	801d5d6 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	68db      	ldr	r3, [r3, #12]
 801d5d4:	e004      	b.n	801d5e0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801d5d6:	68fb      	ldr	r3, [r7, #12]
 801d5d8:	691b      	ldr	r3, [r3, #16]
 801d5da:	60fb      	str	r3, [r7, #12]
 801d5dc:	e7e4      	b.n	801d5a8 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801d5de:	2300      	movs	r3, #0
}
 801d5e0:	4618      	mov	r0, r3
 801d5e2:	3710      	adds	r7, #16
 801d5e4:	46bd      	mov	sp, r7
 801d5e6:	bd80      	pop	{r7, pc}

0801d5e8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801d5e8:	b590      	push	{r4, r7, lr}
 801d5ea:	b087      	sub	sp, #28
 801d5ec:	af02      	add	r7, sp, #8
 801d5ee:	6078      	str	r0, [r7, #4]
 801d5f0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801d5f2:	683b      	ldr	r3, [r7, #0]
 801d5f4:	685b      	ldr	r3, [r3, #4]
 801d5f6:	60fb      	str	r3, [r7, #12]
 801d5f8:	68fb      	ldr	r3, [r7, #12]
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	d018      	beq.n	801d630 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801d5fe:	f240 2293 	movw	r2, #659	; 0x293
 801d602:	490d      	ldr	r1, [pc, #52]	; (801d638 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801d604:	2014      	movs	r0, #20
 801d606:	f7ea fe17 	bl	8008238 <_ZnwjPKci>
 801d60a:	4604      	mov	r4, r0
 801d60c:	68f9      	ldr	r1, [r7, #12]
 801d60e:	68fb      	ldr	r3, [r7, #12]
 801d610:	689a      	ldr	r2, [r3, #8]
 801d612:	68fb      	ldr	r3, [r7, #12]
 801d614:	68d8      	ldr	r0, [r3, #12]
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	685b      	ldr	r3, [r3, #4]
 801d61a:	9300      	str	r3, [sp, #0]
 801d61c:	4603      	mov	r3, r0
 801d61e:	4620      	mov	r0, r4
 801d620:	f7ff fedd 	bl	801d3de <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801d628:	68fb      	ldr	r3, [r7, #12]
 801d62a:	691b      	ldr	r3, [r3, #16]
 801d62c:	60fb      	str	r3, [r7, #12]
 801d62e:	e7e3      	b.n	801d5f8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801d630:	bf00      	nop
 801d632:	3714      	adds	r7, #20
 801d634:	46bd      	mov	sp, r7
 801d636:	bd90      	pop	{r4, r7, pc}
 801d638:	080240a8 	.word	0x080240a8

0801d63c <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801d63c:	b580      	push	{r7, lr}
 801d63e:	b082      	sub	sp, #8
 801d640:	af00      	add	r7, sp, #0
 801d642:	6078      	str	r0, [r7, #4]
 801d644:	6039      	str	r1, [r7, #0]
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	490b      	ldr	r1, [pc, #44]	; (801d678 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801d64a:	4618      	mov	r0, r3
 801d64c:	f7ed f9b7 	bl	800a9be <_ZN12SimpleStringC1EPKc>
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	2200      	movs	r2, #0
 801d654:	721a      	strb	r2, [r3, #8]
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	2200      	movs	r2, #0
 801d65a:	725a      	strb	r2, [r3, #9]
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	2200      	movs	r2, #0
 801d660:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801d662:	687b      	ldr	r3, [r7, #4]
 801d664:	6839      	ldr	r1, [r7, #0]
 801d666:	4618      	mov	r0, r3
 801d668:	f7ed fa15 	bl	800aa96 <_ZN12SimpleStringaSERKS_>
}
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	4618      	mov	r0, r3
 801d670:	3708      	adds	r7, #8
 801d672:	46bd      	mov	sp, r7
 801d674:	bd80      	pop	{r7, pc}
 801d676:	bf00      	nop
 801d678:	08024184 	.word	0x08024184

0801d67c <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801d67c:	b480      	push	{r7}
 801d67e:	b083      	sub	sp, #12
 801d680:	af00      	add	r7, sp, #0
 801d682:	6078      	str	r0, [r7, #4]
 801d684:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801d686:	687b      	ldr	r3, [r7, #4]
 801d688:	683a      	ldr	r2, [r7, #0]
 801d68a:	60da      	str	r2, [r3, #12]
    return this;
 801d68c:	687b      	ldr	r3, [r7, #4]
}
 801d68e:	4618      	mov	r0, r3
 801d690:	370c      	adds	r7, #12
 801d692:	46bd      	mov	sp, r7
 801d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d698:	4770      	bx	lr

0801d69a <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801d69a:	b480      	push	{r7}
 801d69c:	b083      	sub	sp, #12
 801d69e:	af00      	add	r7, sp, #0
 801d6a0:	6078      	str	r0, [r7, #4]
    return next_;
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	68db      	ldr	r3, [r3, #12]
}
 801d6a6:	4618      	mov	r0, r3
 801d6a8:	370c      	adds	r7, #12
 801d6aa:	46bd      	mov	sp, r7
 801d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6b0:	4770      	bx	lr

0801d6b2 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801d6b2:	b480      	push	{r7}
 801d6b4:	b083      	sub	sp, #12
 801d6b6:	af00      	add	r7, sp, #0
 801d6b8:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801d6ba:	687b      	ldr	r3, [r7, #4]
 801d6bc:	2201      	movs	r2, #1
 801d6be:	721a      	strb	r2, [r3, #8]
}
 801d6c0:	bf00      	nop
 801d6c2:	370c      	adds	r7, #12
 801d6c4:	46bd      	mov	sp, r7
 801d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6ca:	4770      	bx	lr

0801d6cc <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801d6cc:	b480      	push	{r7}
 801d6ce:	b083      	sub	sp, #12
 801d6d0:	af00      	add	r7, sp, #0
 801d6d2:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	2201      	movs	r2, #1
 801d6d8:	725a      	strb	r2, [r3, #9]
}
 801d6da:	bf00      	nop
 801d6dc:	370c      	adds	r7, #12
 801d6de:	46bd      	mov	sp, r7
 801d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6e4:	4770      	bx	lr

0801d6e6 <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801d6e6:	b580      	push	{r7, lr}
 801d6e8:	b084      	sub	sp, #16
 801d6ea:	af00      	add	r7, sp, #0
 801d6ec:	6078      	str	r0, [r7, #4]
 801d6ee:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801d6f0:	2300      	movs	r3, #0
 801d6f2:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	7a1b      	ldrb	r3, [r3, #8]
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	d007      	beq.n	801d70c <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	4619      	mov	r1, r3
 801d700:	6838      	ldr	r0, [r7, #0]
 801d702:	f7ed fd20 	bl	800b146 <_ZeqRK12SimpleStringS1_>
 801d706:	4603      	mov	r3, r0
 801d708:	73fb      	strb	r3, [r7, #15]
 801d70a:	e006      	b.n	801d71a <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801d70c:	687b      	ldr	r3, [r7, #4]
 801d70e:	4619      	mov	r1, r3
 801d710:	6838      	ldr	r0, [r7, #0]
 801d712:	f7ed f9d2 	bl	800aaba <_ZNK12SimpleString8containsERKS_>
 801d716:	4603      	mov	r3, r0
 801d718:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	7a5b      	ldrb	r3, [r3, #9]
 801d71e:	2b00      	cmp	r3, #0
 801d720:	d004      	beq.n	801d72c <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801d722:	7bfb      	ldrb	r3, [r7, #15]
 801d724:	f083 0301 	eor.w	r3, r3, #1
 801d728:	b2db      	uxtb	r3, r3
 801d72a:	e005      	b.n	801d738 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801d72c:	7bfb      	ldrb	r3, [r7, #15]
 801d72e:	2b00      	cmp	r3, #0
 801d730:	bf14      	ite	ne
 801d732:	2301      	movne	r3, #1
 801d734:	2300      	moveq	r3, #0
 801d736:	b2db      	uxtb	r3, r3
}
 801d738:	4618      	mov	r0, r3
 801d73a:	3710      	adds	r7, #16
 801d73c:	46bd      	mov	sp, r7
 801d73e:	bd80      	pop	{r7, pc}

0801d740 <__cxa_guard_acquire>:
 801d740:	6803      	ldr	r3, [r0, #0]
 801d742:	07db      	lsls	r3, r3, #31
 801d744:	d406      	bmi.n	801d754 <__cxa_guard_acquire+0x14>
 801d746:	7843      	ldrb	r3, [r0, #1]
 801d748:	b103      	cbz	r3, 801d74c <__cxa_guard_acquire+0xc>
 801d74a:	deff      	udf	#255	; 0xff
 801d74c:	2301      	movs	r3, #1
 801d74e:	7043      	strb	r3, [r0, #1]
 801d750:	4618      	mov	r0, r3
 801d752:	4770      	bx	lr
 801d754:	2000      	movs	r0, #0
 801d756:	4770      	bx	lr

0801d758 <__cxa_guard_release>:
 801d758:	2301      	movs	r3, #1
 801d75a:	6003      	str	r3, [r0, #0]
 801d75c:	4770      	bx	lr

0801d75e <__cxa_pure_virtual>:
 801d75e:	b508      	push	{r3, lr}
 801d760:	f000 f80c 	bl	801d77c <_ZSt9terminatev>

0801d764 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801d764:	b508      	push	{r3, lr}
 801d766:	4780      	blx	r0
 801d768:	f000 f816 	bl	801d798 <abort>

0801d76c <_ZSt13get_terminatev>:
 801d76c:	4b02      	ldr	r3, [pc, #8]	; (801d778 <_ZSt13get_terminatev+0xc>)
 801d76e:	6818      	ldr	r0, [r3, #0]
 801d770:	f3bf 8f5b 	dmb	ish
 801d774:	4770      	bx	lr
 801d776:	bf00      	nop
 801d778:	20000100 	.word	0x20000100

0801d77c <_ZSt9terminatev>:
 801d77c:	b508      	push	{r3, lr}
 801d77e:	f7ff fff5 	bl	801d76c <_ZSt13get_terminatev>
 801d782:	f7ff ffef 	bl	801d764 <_ZN10__cxxabiv111__terminateEPFvvE>

0801d786 <fabs>:
 801d786:	ec51 0b10 	vmov	r0, r1, d0
 801d78a:	ee10 2a10 	vmov	r2, s0
 801d78e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d792:	ec43 2b10 	vmov	d0, r2, r3
 801d796:	4770      	bx	lr

0801d798 <abort>:
 801d798:	b508      	push	{r3, lr}
 801d79a:	2006      	movs	r0, #6
 801d79c:	f000 ff88 	bl	801e6b0 <raise>
 801d7a0:	2001      	movs	r0, #1
 801d7a2:	f7e3 faee 	bl	8000d82 <_exit>

0801d7a6 <atexit>:
 801d7a6:	2300      	movs	r3, #0
 801d7a8:	4601      	mov	r1, r0
 801d7aa:	461a      	mov	r2, r3
 801d7ac:	4618      	mov	r0, r3
 801d7ae:	f002 b91f 	b.w	801f9f0 <__register_exitproc>
	...

0801d7b4 <calloc>:
 801d7b4:	4b02      	ldr	r3, [pc, #8]	; (801d7c0 <calloc+0xc>)
 801d7b6:	460a      	mov	r2, r1
 801d7b8:	4601      	mov	r1, r0
 801d7ba:	6818      	ldr	r0, [r3, #0]
 801d7bc:	f000 bde8 	b.w	801e390 <_calloc_r>
 801d7c0:	20000104 	.word	0x20000104

0801d7c4 <__errno>:
 801d7c4:	4b01      	ldr	r3, [pc, #4]	; (801d7cc <__errno+0x8>)
 801d7c6:	6818      	ldr	r0, [r3, #0]
 801d7c8:	4770      	bx	lr
 801d7ca:	bf00      	nop
 801d7cc:	20000104 	.word	0x20000104

0801d7d0 <_fclose_r>:
 801d7d0:	b570      	push	{r4, r5, r6, lr}
 801d7d2:	4605      	mov	r5, r0
 801d7d4:	460c      	mov	r4, r1
 801d7d6:	b911      	cbnz	r1, 801d7de <_fclose_r+0xe>
 801d7d8:	2600      	movs	r6, #0
 801d7da:	4630      	mov	r0, r6
 801d7dc:	bd70      	pop	{r4, r5, r6, pc}
 801d7de:	b118      	cbz	r0, 801d7e8 <_fclose_r+0x18>
 801d7e0:	6983      	ldr	r3, [r0, #24]
 801d7e2:	b90b      	cbnz	r3, 801d7e8 <_fclose_r+0x18>
 801d7e4:	f000 f994 	bl	801db10 <__sinit>
 801d7e8:	4b2c      	ldr	r3, [pc, #176]	; (801d89c <_fclose_r+0xcc>)
 801d7ea:	429c      	cmp	r4, r3
 801d7ec:	d114      	bne.n	801d818 <_fclose_r+0x48>
 801d7ee:	686c      	ldr	r4, [r5, #4]
 801d7f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d7f2:	07d8      	lsls	r0, r3, #31
 801d7f4:	d405      	bmi.n	801d802 <_fclose_r+0x32>
 801d7f6:	89a3      	ldrh	r3, [r4, #12]
 801d7f8:	0599      	lsls	r1, r3, #22
 801d7fa:	d402      	bmi.n	801d802 <_fclose_r+0x32>
 801d7fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d7fe:	f000 fd3a 	bl	801e276 <__retarget_lock_acquire_recursive>
 801d802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d806:	b98b      	cbnz	r3, 801d82c <_fclose_r+0x5c>
 801d808:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801d80a:	f016 0601 	ands.w	r6, r6, #1
 801d80e:	d1e3      	bne.n	801d7d8 <_fclose_r+0x8>
 801d810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d812:	f000 fd32 	bl	801e27a <__retarget_lock_release_recursive>
 801d816:	e7e0      	b.n	801d7da <_fclose_r+0xa>
 801d818:	4b21      	ldr	r3, [pc, #132]	; (801d8a0 <_fclose_r+0xd0>)
 801d81a:	429c      	cmp	r4, r3
 801d81c:	d101      	bne.n	801d822 <_fclose_r+0x52>
 801d81e:	68ac      	ldr	r4, [r5, #8]
 801d820:	e7e6      	b.n	801d7f0 <_fclose_r+0x20>
 801d822:	4b20      	ldr	r3, [pc, #128]	; (801d8a4 <_fclose_r+0xd4>)
 801d824:	429c      	cmp	r4, r3
 801d826:	bf08      	it	eq
 801d828:	68ec      	ldreq	r4, [r5, #12]
 801d82a:	e7e1      	b.n	801d7f0 <_fclose_r+0x20>
 801d82c:	4621      	mov	r1, r4
 801d82e:	4628      	mov	r0, r5
 801d830:	f000 f842 	bl	801d8b8 <__sflush_r>
 801d834:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801d836:	4606      	mov	r6, r0
 801d838:	b133      	cbz	r3, 801d848 <_fclose_r+0x78>
 801d83a:	6a21      	ldr	r1, [r4, #32]
 801d83c:	4628      	mov	r0, r5
 801d83e:	4798      	blx	r3
 801d840:	2800      	cmp	r0, #0
 801d842:	bfb8      	it	lt
 801d844:	f04f 36ff 	movlt.w	r6, #4294967295
 801d848:	89a3      	ldrh	r3, [r4, #12]
 801d84a:	061a      	lsls	r2, r3, #24
 801d84c:	d503      	bpl.n	801d856 <_fclose_r+0x86>
 801d84e:	6921      	ldr	r1, [r4, #16]
 801d850:	4628      	mov	r0, r5
 801d852:	f000 fdad 	bl	801e3b0 <_free_r>
 801d856:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d858:	b141      	cbz	r1, 801d86c <_fclose_r+0x9c>
 801d85a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d85e:	4299      	cmp	r1, r3
 801d860:	d002      	beq.n	801d868 <_fclose_r+0x98>
 801d862:	4628      	mov	r0, r5
 801d864:	f000 fda4 	bl	801e3b0 <_free_r>
 801d868:	2300      	movs	r3, #0
 801d86a:	6363      	str	r3, [r4, #52]	; 0x34
 801d86c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801d86e:	b121      	cbz	r1, 801d87a <_fclose_r+0xaa>
 801d870:	4628      	mov	r0, r5
 801d872:	f000 fd9d 	bl	801e3b0 <_free_r>
 801d876:	2300      	movs	r3, #0
 801d878:	64a3      	str	r3, [r4, #72]	; 0x48
 801d87a:	f000 f931 	bl	801dae0 <__sfp_lock_acquire>
 801d87e:	2300      	movs	r3, #0
 801d880:	81a3      	strh	r3, [r4, #12]
 801d882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d884:	07db      	lsls	r3, r3, #31
 801d886:	d402      	bmi.n	801d88e <_fclose_r+0xbe>
 801d888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d88a:	f000 fcf6 	bl	801e27a <__retarget_lock_release_recursive>
 801d88e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d890:	f000 fcef 	bl	801e272 <__retarget_lock_close_recursive>
 801d894:	f000 f92a 	bl	801daec <__sfp_lock_release>
 801d898:	e79f      	b.n	801d7da <_fclose_r+0xa>
 801d89a:	bf00      	nop
 801d89c:	080264ec 	.word	0x080264ec
 801d8a0:	0802650c 	.word	0x0802650c
 801d8a4:	080264cc 	.word	0x080264cc

0801d8a8 <fclose>:
 801d8a8:	4b02      	ldr	r3, [pc, #8]	; (801d8b4 <fclose+0xc>)
 801d8aa:	4601      	mov	r1, r0
 801d8ac:	6818      	ldr	r0, [r3, #0]
 801d8ae:	f7ff bf8f 	b.w	801d7d0 <_fclose_r>
 801d8b2:	bf00      	nop
 801d8b4:	20000104 	.word	0x20000104

0801d8b8 <__sflush_r>:
 801d8b8:	898a      	ldrh	r2, [r1, #12]
 801d8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8be:	4605      	mov	r5, r0
 801d8c0:	0710      	lsls	r0, r2, #28
 801d8c2:	460c      	mov	r4, r1
 801d8c4:	d458      	bmi.n	801d978 <__sflush_r+0xc0>
 801d8c6:	684b      	ldr	r3, [r1, #4]
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	dc05      	bgt.n	801d8d8 <__sflush_r+0x20>
 801d8cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	dc02      	bgt.n	801d8d8 <__sflush_r+0x20>
 801d8d2:	2000      	movs	r0, #0
 801d8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d8da:	2e00      	cmp	r6, #0
 801d8dc:	d0f9      	beq.n	801d8d2 <__sflush_r+0x1a>
 801d8de:	2300      	movs	r3, #0
 801d8e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d8e4:	682f      	ldr	r7, [r5, #0]
 801d8e6:	602b      	str	r3, [r5, #0]
 801d8e8:	d032      	beq.n	801d950 <__sflush_r+0x98>
 801d8ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d8ec:	89a3      	ldrh	r3, [r4, #12]
 801d8ee:	075a      	lsls	r2, r3, #29
 801d8f0:	d505      	bpl.n	801d8fe <__sflush_r+0x46>
 801d8f2:	6863      	ldr	r3, [r4, #4]
 801d8f4:	1ac0      	subs	r0, r0, r3
 801d8f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d8f8:	b10b      	cbz	r3, 801d8fe <__sflush_r+0x46>
 801d8fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d8fc:	1ac0      	subs	r0, r0, r3
 801d8fe:	2300      	movs	r3, #0
 801d900:	4602      	mov	r2, r0
 801d902:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d904:	6a21      	ldr	r1, [r4, #32]
 801d906:	4628      	mov	r0, r5
 801d908:	47b0      	blx	r6
 801d90a:	1c43      	adds	r3, r0, #1
 801d90c:	89a3      	ldrh	r3, [r4, #12]
 801d90e:	d106      	bne.n	801d91e <__sflush_r+0x66>
 801d910:	6829      	ldr	r1, [r5, #0]
 801d912:	291d      	cmp	r1, #29
 801d914:	d82c      	bhi.n	801d970 <__sflush_r+0xb8>
 801d916:	4a2a      	ldr	r2, [pc, #168]	; (801d9c0 <__sflush_r+0x108>)
 801d918:	40ca      	lsrs	r2, r1
 801d91a:	07d6      	lsls	r6, r2, #31
 801d91c:	d528      	bpl.n	801d970 <__sflush_r+0xb8>
 801d91e:	2200      	movs	r2, #0
 801d920:	6062      	str	r2, [r4, #4]
 801d922:	04d9      	lsls	r1, r3, #19
 801d924:	6922      	ldr	r2, [r4, #16]
 801d926:	6022      	str	r2, [r4, #0]
 801d928:	d504      	bpl.n	801d934 <__sflush_r+0x7c>
 801d92a:	1c42      	adds	r2, r0, #1
 801d92c:	d101      	bne.n	801d932 <__sflush_r+0x7a>
 801d92e:	682b      	ldr	r3, [r5, #0]
 801d930:	b903      	cbnz	r3, 801d934 <__sflush_r+0x7c>
 801d932:	6560      	str	r0, [r4, #84]	; 0x54
 801d934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d936:	602f      	str	r7, [r5, #0]
 801d938:	2900      	cmp	r1, #0
 801d93a:	d0ca      	beq.n	801d8d2 <__sflush_r+0x1a>
 801d93c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d940:	4299      	cmp	r1, r3
 801d942:	d002      	beq.n	801d94a <__sflush_r+0x92>
 801d944:	4628      	mov	r0, r5
 801d946:	f000 fd33 	bl	801e3b0 <_free_r>
 801d94a:	2000      	movs	r0, #0
 801d94c:	6360      	str	r0, [r4, #52]	; 0x34
 801d94e:	e7c1      	b.n	801d8d4 <__sflush_r+0x1c>
 801d950:	6a21      	ldr	r1, [r4, #32]
 801d952:	2301      	movs	r3, #1
 801d954:	4628      	mov	r0, r5
 801d956:	47b0      	blx	r6
 801d958:	1c41      	adds	r1, r0, #1
 801d95a:	d1c7      	bne.n	801d8ec <__sflush_r+0x34>
 801d95c:	682b      	ldr	r3, [r5, #0]
 801d95e:	2b00      	cmp	r3, #0
 801d960:	d0c4      	beq.n	801d8ec <__sflush_r+0x34>
 801d962:	2b1d      	cmp	r3, #29
 801d964:	d001      	beq.n	801d96a <__sflush_r+0xb2>
 801d966:	2b16      	cmp	r3, #22
 801d968:	d101      	bne.n	801d96e <__sflush_r+0xb6>
 801d96a:	602f      	str	r7, [r5, #0]
 801d96c:	e7b1      	b.n	801d8d2 <__sflush_r+0x1a>
 801d96e:	89a3      	ldrh	r3, [r4, #12]
 801d970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d974:	81a3      	strh	r3, [r4, #12]
 801d976:	e7ad      	b.n	801d8d4 <__sflush_r+0x1c>
 801d978:	690f      	ldr	r7, [r1, #16]
 801d97a:	2f00      	cmp	r7, #0
 801d97c:	d0a9      	beq.n	801d8d2 <__sflush_r+0x1a>
 801d97e:	0793      	lsls	r3, r2, #30
 801d980:	680e      	ldr	r6, [r1, #0]
 801d982:	bf08      	it	eq
 801d984:	694b      	ldreq	r3, [r1, #20]
 801d986:	600f      	str	r7, [r1, #0]
 801d988:	bf18      	it	ne
 801d98a:	2300      	movne	r3, #0
 801d98c:	eba6 0807 	sub.w	r8, r6, r7
 801d990:	608b      	str	r3, [r1, #8]
 801d992:	f1b8 0f00 	cmp.w	r8, #0
 801d996:	dd9c      	ble.n	801d8d2 <__sflush_r+0x1a>
 801d998:	6a21      	ldr	r1, [r4, #32]
 801d99a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d99c:	4643      	mov	r3, r8
 801d99e:	463a      	mov	r2, r7
 801d9a0:	4628      	mov	r0, r5
 801d9a2:	47b0      	blx	r6
 801d9a4:	2800      	cmp	r0, #0
 801d9a6:	dc06      	bgt.n	801d9b6 <__sflush_r+0xfe>
 801d9a8:	89a3      	ldrh	r3, [r4, #12]
 801d9aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d9ae:	81a3      	strh	r3, [r4, #12]
 801d9b0:	f04f 30ff 	mov.w	r0, #4294967295
 801d9b4:	e78e      	b.n	801d8d4 <__sflush_r+0x1c>
 801d9b6:	4407      	add	r7, r0
 801d9b8:	eba8 0800 	sub.w	r8, r8, r0
 801d9bc:	e7e9      	b.n	801d992 <__sflush_r+0xda>
 801d9be:	bf00      	nop
 801d9c0:	20400001 	.word	0x20400001

0801d9c4 <_fflush_r>:
 801d9c4:	b538      	push	{r3, r4, r5, lr}
 801d9c6:	690b      	ldr	r3, [r1, #16]
 801d9c8:	4605      	mov	r5, r0
 801d9ca:	460c      	mov	r4, r1
 801d9cc:	b913      	cbnz	r3, 801d9d4 <_fflush_r+0x10>
 801d9ce:	2500      	movs	r5, #0
 801d9d0:	4628      	mov	r0, r5
 801d9d2:	bd38      	pop	{r3, r4, r5, pc}
 801d9d4:	b118      	cbz	r0, 801d9de <_fflush_r+0x1a>
 801d9d6:	6983      	ldr	r3, [r0, #24]
 801d9d8:	b90b      	cbnz	r3, 801d9de <_fflush_r+0x1a>
 801d9da:	f000 f899 	bl	801db10 <__sinit>
 801d9de:	4b14      	ldr	r3, [pc, #80]	; (801da30 <_fflush_r+0x6c>)
 801d9e0:	429c      	cmp	r4, r3
 801d9e2:	d11b      	bne.n	801da1c <_fflush_r+0x58>
 801d9e4:	686c      	ldr	r4, [r5, #4]
 801d9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d0ef      	beq.n	801d9ce <_fflush_r+0xa>
 801d9ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d9f0:	07d0      	lsls	r0, r2, #31
 801d9f2:	d404      	bmi.n	801d9fe <_fflush_r+0x3a>
 801d9f4:	0599      	lsls	r1, r3, #22
 801d9f6:	d402      	bmi.n	801d9fe <_fflush_r+0x3a>
 801d9f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d9fa:	f000 fc3c 	bl	801e276 <__retarget_lock_acquire_recursive>
 801d9fe:	4628      	mov	r0, r5
 801da00:	4621      	mov	r1, r4
 801da02:	f7ff ff59 	bl	801d8b8 <__sflush_r>
 801da06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801da08:	07da      	lsls	r2, r3, #31
 801da0a:	4605      	mov	r5, r0
 801da0c:	d4e0      	bmi.n	801d9d0 <_fflush_r+0xc>
 801da0e:	89a3      	ldrh	r3, [r4, #12]
 801da10:	059b      	lsls	r3, r3, #22
 801da12:	d4dd      	bmi.n	801d9d0 <_fflush_r+0xc>
 801da14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801da16:	f000 fc30 	bl	801e27a <__retarget_lock_release_recursive>
 801da1a:	e7d9      	b.n	801d9d0 <_fflush_r+0xc>
 801da1c:	4b05      	ldr	r3, [pc, #20]	; (801da34 <_fflush_r+0x70>)
 801da1e:	429c      	cmp	r4, r3
 801da20:	d101      	bne.n	801da26 <_fflush_r+0x62>
 801da22:	68ac      	ldr	r4, [r5, #8]
 801da24:	e7df      	b.n	801d9e6 <_fflush_r+0x22>
 801da26:	4b04      	ldr	r3, [pc, #16]	; (801da38 <_fflush_r+0x74>)
 801da28:	429c      	cmp	r4, r3
 801da2a:	bf08      	it	eq
 801da2c:	68ec      	ldreq	r4, [r5, #12]
 801da2e:	e7da      	b.n	801d9e6 <_fflush_r+0x22>
 801da30:	080264ec 	.word	0x080264ec
 801da34:	0802650c 	.word	0x0802650c
 801da38:	080264cc 	.word	0x080264cc

0801da3c <fflush>:
 801da3c:	4601      	mov	r1, r0
 801da3e:	b920      	cbnz	r0, 801da4a <fflush+0xe>
 801da40:	4b04      	ldr	r3, [pc, #16]	; (801da54 <fflush+0x18>)
 801da42:	4905      	ldr	r1, [pc, #20]	; (801da58 <fflush+0x1c>)
 801da44:	6818      	ldr	r0, [r3, #0]
 801da46:	f000 babb 	b.w	801dfc0 <_fwalk_reent>
 801da4a:	4b04      	ldr	r3, [pc, #16]	; (801da5c <fflush+0x20>)
 801da4c:	6818      	ldr	r0, [r3, #0]
 801da4e:	f7ff bfb9 	b.w	801d9c4 <_fflush_r>
 801da52:	bf00      	nop
 801da54:	0802652c 	.word	0x0802652c
 801da58:	0801d9c5 	.word	0x0801d9c5
 801da5c:	20000104 	.word	0x20000104

0801da60 <std>:
 801da60:	2300      	movs	r3, #0
 801da62:	b510      	push	{r4, lr}
 801da64:	4604      	mov	r4, r0
 801da66:	e9c0 3300 	strd	r3, r3, [r0]
 801da6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801da6e:	6083      	str	r3, [r0, #8]
 801da70:	8181      	strh	r1, [r0, #12]
 801da72:	6643      	str	r3, [r0, #100]	; 0x64
 801da74:	81c2      	strh	r2, [r0, #14]
 801da76:	6183      	str	r3, [r0, #24]
 801da78:	4619      	mov	r1, r3
 801da7a:	2208      	movs	r2, #8
 801da7c:	305c      	adds	r0, #92	; 0x5c
 801da7e:	f000 fc7f 	bl	801e380 <memset>
 801da82:	4b05      	ldr	r3, [pc, #20]	; (801da98 <std+0x38>)
 801da84:	6263      	str	r3, [r4, #36]	; 0x24
 801da86:	4b05      	ldr	r3, [pc, #20]	; (801da9c <std+0x3c>)
 801da88:	62a3      	str	r3, [r4, #40]	; 0x28
 801da8a:	4b05      	ldr	r3, [pc, #20]	; (801daa0 <std+0x40>)
 801da8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801da8e:	4b05      	ldr	r3, [pc, #20]	; (801daa4 <std+0x44>)
 801da90:	6224      	str	r4, [r4, #32]
 801da92:	6323      	str	r3, [r4, #48]	; 0x30
 801da94:	bd10      	pop	{r4, pc}
 801da96:	bf00      	nop
 801da98:	0801e6e9 	.word	0x0801e6e9
 801da9c:	0801e70f 	.word	0x0801e70f
 801daa0:	0801e747 	.word	0x0801e747
 801daa4:	0801e76b 	.word	0x0801e76b

0801daa8 <_cleanup_r>:
 801daa8:	4901      	ldr	r1, [pc, #4]	; (801dab0 <_cleanup_r+0x8>)
 801daaa:	f000 ba89 	b.w	801dfc0 <_fwalk_reent>
 801daae:	bf00      	nop
 801dab0:	0801d9c5 	.word	0x0801d9c5

0801dab4 <__sfmoreglue>:
 801dab4:	b570      	push	{r4, r5, r6, lr}
 801dab6:	1e4a      	subs	r2, r1, #1
 801dab8:	2568      	movs	r5, #104	; 0x68
 801daba:	4355      	muls	r5, r2
 801dabc:	460e      	mov	r6, r1
 801dabe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dac2:	f000 fcc5 	bl	801e450 <_malloc_r>
 801dac6:	4604      	mov	r4, r0
 801dac8:	b140      	cbz	r0, 801dadc <__sfmoreglue+0x28>
 801daca:	2100      	movs	r1, #0
 801dacc:	e9c0 1600 	strd	r1, r6, [r0]
 801dad0:	300c      	adds	r0, #12
 801dad2:	60a0      	str	r0, [r4, #8]
 801dad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dad8:	f000 fc52 	bl	801e380 <memset>
 801dadc:	4620      	mov	r0, r4
 801dade:	bd70      	pop	{r4, r5, r6, pc}

0801dae0 <__sfp_lock_acquire>:
 801dae0:	4801      	ldr	r0, [pc, #4]	; (801dae8 <__sfp_lock_acquire+0x8>)
 801dae2:	f000 bbc8 	b.w	801e276 <__retarget_lock_acquire_recursive>
 801dae6:	bf00      	nop
 801dae8:	20000e28 	.word	0x20000e28

0801daec <__sfp_lock_release>:
 801daec:	4801      	ldr	r0, [pc, #4]	; (801daf4 <__sfp_lock_release+0x8>)
 801daee:	f000 bbc4 	b.w	801e27a <__retarget_lock_release_recursive>
 801daf2:	bf00      	nop
 801daf4:	20000e28 	.word	0x20000e28

0801daf8 <__sinit_lock_acquire>:
 801daf8:	4801      	ldr	r0, [pc, #4]	; (801db00 <__sinit_lock_acquire+0x8>)
 801dafa:	f000 bbbc 	b.w	801e276 <__retarget_lock_acquire_recursive>
 801dafe:	bf00      	nop
 801db00:	20000e23 	.word	0x20000e23

0801db04 <__sinit_lock_release>:
 801db04:	4801      	ldr	r0, [pc, #4]	; (801db0c <__sinit_lock_release+0x8>)
 801db06:	f000 bbb8 	b.w	801e27a <__retarget_lock_release_recursive>
 801db0a:	bf00      	nop
 801db0c:	20000e23 	.word	0x20000e23

0801db10 <__sinit>:
 801db10:	b510      	push	{r4, lr}
 801db12:	4604      	mov	r4, r0
 801db14:	f7ff fff0 	bl	801daf8 <__sinit_lock_acquire>
 801db18:	69a3      	ldr	r3, [r4, #24]
 801db1a:	b11b      	cbz	r3, 801db24 <__sinit+0x14>
 801db1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db20:	f7ff bff0 	b.w	801db04 <__sinit_lock_release>
 801db24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801db28:	6523      	str	r3, [r4, #80]	; 0x50
 801db2a:	4b13      	ldr	r3, [pc, #76]	; (801db78 <__sinit+0x68>)
 801db2c:	4a13      	ldr	r2, [pc, #76]	; (801db7c <__sinit+0x6c>)
 801db2e:	681b      	ldr	r3, [r3, #0]
 801db30:	62a2      	str	r2, [r4, #40]	; 0x28
 801db32:	42a3      	cmp	r3, r4
 801db34:	bf04      	itt	eq
 801db36:	2301      	moveq	r3, #1
 801db38:	61a3      	streq	r3, [r4, #24]
 801db3a:	4620      	mov	r0, r4
 801db3c:	f000 f820 	bl	801db80 <__sfp>
 801db40:	6060      	str	r0, [r4, #4]
 801db42:	4620      	mov	r0, r4
 801db44:	f000 f81c 	bl	801db80 <__sfp>
 801db48:	60a0      	str	r0, [r4, #8]
 801db4a:	4620      	mov	r0, r4
 801db4c:	f000 f818 	bl	801db80 <__sfp>
 801db50:	2200      	movs	r2, #0
 801db52:	60e0      	str	r0, [r4, #12]
 801db54:	2104      	movs	r1, #4
 801db56:	6860      	ldr	r0, [r4, #4]
 801db58:	f7ff ff82 	bl	801da60 <std>
 801db5c:	68a0      	ldr	r0, [r4, #8]
 801db5e:	2201      	movs	r2, #1
 801db60:	2109      	movs	r1, #9
 801db62:	f7ff ff7d 	bl	801da60 <std>
 801db66:	68e0      	ldr	r0, [r4, #12]
 801db68:	2202      	movs	r2, #2
 801db6a:	2112      	movs	r1, #18
 801db6c:	f7ff ff78 	bl	801da60 <std>
 801db70:	2301      	movs	r3, #1
 801db72:	61a3      	str	r3, [r4, #24]
 801db74:	e7d2      	b.n	801db1c <__sinit+0xc>
 801db76:	bf00      	nop
 801db78:	0802652c 	.word	0x0802652c
 801db7c:	0801daa9 	.word	0x0801daa9

0801db80 <__sfp>:
 801db80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db82:	4607      	mov	r7, r0
 801db84:	f7ff ffac 	bl	801dae0 <__sfp_lock_acquire>
 801db88:	4b1e      	ldr	r3, [pc, #120]	; (801dc04 <__sfp+0x84>)
 801db8a:	681e      	ldr	r6, [r3, #0]
 801db8c:	69b3      	ldr	r3, [r6, #24]
 801db8e:	b913      	cbnz	r3, 801db96 <__sfp+0x16>
 801db90:	4630      	mov	r0, r6
 801db92:	f7ff ffbd 	bl	801db10 <__sinit>
 801db96:	3648      	adds	r6, #72	; 0x48
 801db98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801db9c:	3b01      	subs	r3, #1
 801db9e:	d503      	bpl.n	801dba8 <__sfp+0x28>
 801dba0:	6833      	ldr	r3, [r6, #0]
 801dba2:	b30b      	cbz	r3, 801dbe8 <__sfp+0x68>
 801dba4:	6836      	ldr	r6, [r6, #0]
 801dba6:	e7f7      	b.n	801db98 <__sfp+0x18>
 801dba8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dbac:	b9d5      	cbnz	r5, 801dbe4 <__sfp+0x64>
 801dbae:	4b16      	ldr	r3, [pc, #88]	; (801dc08 <__sfp+0x88>)
 801dbb0:	60e3      	str	r3, [r4, #12]
 801dbb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dbb6:	6665      	str	r5, [r4, #100]	; 0x64
 801dbb8:	f000 fb5a 	bl	801e270 <__retarget_lock_init_recursive>
 801dbbc:	f7ff ff96 	bl	801daec <__sfp_lock_release>
 801dbc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dbc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dbc8:	6025      	str	r5, [r4, #0]
 801dbca:	61a5      	str	r5, [r4, #24]
 801dbcc:	2208      	movs	r2, #8
 801dbce:	4629      	mov	r1, r5
 801dbd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dbd4:	f000 fbd4 	bl	801e380 <memset>
 801dbd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dbdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dbe0:	4620      	mov	r0, r4
 801dbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dbe4:	3468      	adds	r4, #104	; 0x68
 801dbe6:	e7d9      	b.n	801db9c <__sfp+0x1c>
 801dbe8:	2104      	movs	r1, #4
 801dbea:	4638      	mov	r0, r7
 801dbec:	f7ff ff62 	bl	801dab4 <__sfmoreglue>
 801dbf0:	4604      	mov	r4, r0
 801dbf2:	6030      	str	r0, [r6, #0]
 801dbf4:	2800      	cmp	r0, #0
 801dbf6:	d1d5      	bne.n	801dba4 <__sfp+0x24>
 801dbf8:	f7ff ff78 	bl	801daec <__sfp_lock_release>
 801dbfc:	230c      	movs	r3, #12
 801dbfe:	603b      	str	r3, [r7, #0]
 801dc00:	e7ee      	b.n	801dbe0 <__sfp+0x60>
 801dc02:	bf00      	nop
 801dc04:	0802652c 	.word	0x0802652c
 801dc08:	ffff0001 	.word	0xffff0001

0801dc0c <_fopen_r>:
 801dc0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dc0e:	460f      	mov	r7, r1
 801dc10:	4611      	mov	r1, r2
 801dc12:	aa01      	add	r2, sp, #4
 801dc14:	4605      	mov	r5, r0
 801dc16:	f001 ff7f 	bl	801fb18 <__sflags>
 801dc1a:	4606      	mov	r6, r0
 801dc1c:	b918      	cbnz	r0, 801dc26 <_fopen_r+0x1a>
 801dc1e:	2400      	movs	r4, #0
 801dc20:	4620      	mov	r0, r4
 801dc22:	b003      	add	sp, #12
 801dc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc26:	4628      	mov	r0, r5
 801dc28:	f7ff ffaa 	bl	801db80 <__sfp>
 801dc2c:	4604      	mov	r4, r0
 801dc2e:	2800      	cmp	r0, #0
 801dc30:	d0f5      	beq.n	801dc1e <_fopen_r+0x12>
 801dc32:	4639      	mov	r1, r7
 801dc34:	9a01      	ldr	r2, [sp, #4]
 801dc36:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801dc3a:	4628      	mov	r0, r5
 801dc3c:	f000 fc62 	bl	801e504 <_open_r>
 801dc40:	1e07      	subs	r7, r0, #0
 801dc42:	da09      	bge.n	801dc58 <_fopen_r+0x4c>
 801dc44:	2500      	movs	r5, #0
 801dc46:	f7ff ff4b 	bl	801dae0 <__sfp_lock_acquire>
 801dc4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc4c:	81a5      	strh	r5, [r4, #12]
 801dc4e:	f000 fb10 	bl	801e272 <__retarget_lock_close_recursive>
 801dc52:	f7ff ff4b 	bl	801daec <__sfp_lock_release>
 801dc56:	e7e2      	b.n	801dc1e <_fopen_r+0x12>
 801dc58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dc5a:	07db      	lsls	r3, r3, #31
 801dc5c:	d405      	bmi.n	801dc6a <_fopen_r+0x5e>
 801dc5e:	89a3      	ldrh	r3, [r4, #12]
 801dc60:	0598      	lsls	r0, r3, #22
 801dc62:	d402      	bmi.n	801dc6a <_fopen_r+0x5e>
 801dc64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc66:	f000 fb06 	bl	801e276 <__retarget_lock_acquire_recursive>
 801dc6a:	4b0e      	ldr	r3, [pc, #56]	; (801dca4 <_fopen_r+0x98>)
 801dc6c:	6263      	str	r3, [r4, #36]	; 0x24
 801dc6e:	4b0e      	ldr	r3, [pc, #56]	; (801dca8 <_fopen_r+0x9c>)
 801dc70:	62a3      	str	r3, [r4, #40]	; 0x28
 801dc72:	4b0e      	ldr	r3, [pc, #56]	; (801dcac <_fopen_r+0xa0>)
 801dc74:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dc76:	05f1      	lsls	r1, r6, #23
 801dc78:	4b0d      	ldr	r3, [pc, #52]	; (801dcb0 <_fopen_r+0xa4>)
 801dc7a:	81e7      	strh	r7, [r4, #14]
 801dc7c:	81a6      	strh	r6, [r4, #12]
 801dc7e:	6224      	str	r4, [r4, #32]
 801dc80:	6323      	str	r3, [r4, #48]	; 0x30
 801dc82:	d505      	bpl.n	801dc90 <_fopen_r+0x84>
 801dc84:	2302      	movs	r3, #2
 801dc86:	2200      	movs	r2, #0
 801dc88:	4621      	mov	r1, r4
 801dc8a:	4628      	mov	r0, r5
 801dc8c:	f000 f888 	bl	801dda0 <_fseek_r>
 801dc90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dc92:	07da      	lsls	r2, r3, #31
 801dc94:	d4c4      	bmi.n	801dc20 <_fopen_r+0x14>
 801dc96:	89a3      	ldrh	r3, [r4, #12]
 801dc98:	059b      	lsls	r3, r3, #22
 801dc9a:	d4c1      	bmi.n	801dc20 <_fopen_r+0x14>
 801dc9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc9e:	f000 faec 	bl	801e27a <__retarget_lock_release_recursive>
 801dca2:	e7bd      	b.n	801dc20 <_fopen_r+0x14>
 801dca4:	0801e6e9 	.word	0x0801e6e9
 801dca8:	0801e70f 	.word	0x0801e70f
 801dcac:	0801e747 	.word	0x0801e747
 801dcb0:	0801e76b 	.word	0x0801e76b

0801dcb4 <fopen>:
 801dcb4:	4b02      	ldr	r3, [pc, #8]	; (801dcc0 <fopen+0xc>)
 801dcb6:	460a      	mov	r2, r1
 801dcb8:	4601      	mov	r1, r0
 801dcba:	6818      	ldr	r0, [r3, #0]
 801dcbc:	f7ff bfa6 	b.w	801dc0c <_fopen_r>
 801dcc0:	20000104 	.word	0x20000104

0801dcc4 <_fputs_r>:
 801dcc4:	b570      	push	{r4, r5, r6, lr}
 801dcc6:	460e      	mov	r6, r1
 801dcc8:	4614      	mov	r4, r2
 801dcca:	4605      	mov	r5, r0
 801dccc:	b118      	cbz	r0, 801dcd6 <_fputs_r+0x12>
 801dcce:	6983      	ldr	r3, [r0, #24]
 801dcd0:	b90b      	cbnz	r3, 801dcd6 <_fputs_r+0x12>
 801dcd2:	f7ff ff1d 	bl	801db10 <__sinit>
 801dcd6:	4b2b      	ldr	r3, [pc, #172]	; (801dd84 <_fputs_r+0xc0>)
 801dcd8:	429c      	cmp	r4, r3
 801dcda:	d11e      	bne.n	801dd1a <_fputs_r+0x56>
 801dcdc:	686c      	ldr	r4, [r5, #4]
 801dcde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dce0:	07da      	lsls	r2, r3, #31
 801dce2:	d405      	bmi.n	801dcf0 <_fputs_r+0x2c>
 801dce4:	89a3      	ldrh	r3, [r4, #12]
 801dce6:	059b      	lsls	r3, r3, #22
 801dce8:	d402      	bmi.n	801dcf0 <_fputs_r+0x2c>
 801dcea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dcec:	f000 fac3 	bl	801e276 <__retarget_lock_acquire_recursive>
 801dcf0:	89a3      	ldrh	r3, [r4, #12]
 801dcf2:	0718      	lsls	r0, r3, #28
 801dcf4:	d51b      	bpl.n	801dd2e <_fputs_r+0x6a>
 801dcf6:	6923      	ldr	r3, [r4, #16]
 801dcf8:	b1cb      	cbz	r3, 801dd2e <_fputs_r+0x6a>
 801dcfa:	3e01      	subs	r6, #1
 801dcfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801dd00:	bb39      	cbnz	r1, 801dd52 <_fputs_r+0x8e>
 801dd02:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801dd04:	f015 0501 	ands.w	r5, r5, #1
 801dd08:	d139      	bne.n	801dd7e <_fputs_r+0xba>
 801dd0a:	89a3      	ldrh	r3, [r4, #12]
 801dd0c:	0599      	lsls	r1, r3, #22
 801dd0e:	d402      	bmi.n	801dd16 <_fputs_r+0x52>
 801dd10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd12:	f000 fab2 	bl	801e27a <__retarget_lock_release_recursive>
 801dd16:	4628      	mov	r0, r5
 801dd18:	bd70      	pop	{r4, r5, r6, pc}
 801dd1a:	4b1b      	ldr	r3, [pc, #108]	; (801dd88 <_fputs_r+0xc4>)
 801dd1c:	429c      	cmp	r4, r3
 801dd1e:	d101      	bne.n	801dd24 <_fputs_r+0x60>
 801dd20:	68ac      	ldr	r4, [r5, #8]
 801dd22:	e7dc      	b.n	801dcde <_fputs_r+0x1a>
 801dd24:	4b19      	ldr	r3, [pc, #100]	; (801dd8c <_fputs_r+0xc8>)
 801dd26:	429c      	cmp	r4, r3
 801dd28:	bf08      	it	eq
 801dd2a:	68ec      	ldreq	r4, [r5, #12]
 801dd2c:	e7d7      	b.n	801dcde <_fputs_r+0x1a>
 801dd2e:	4621      	mov	r1, r4
 801dd30:	4628      	mov	r0, r5
 801dd32:	f001 fdef 	bl	801f914 <__swsetup_r>
 801dd36:	2800      	cmp	r0, #0
 801dd38:	d0df      	beq.n	801dcfa <_fputs_r+0x36>
 801dd3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dd3c:	07da      	lsls	r2, r3, #31
 801dd3e:	d405      	bmi.n	801dd4c <_fputs_r+0x88>
 801dd40:	89a3      	ldrh	r3, [r4, #12]
 801dd42:	059b      	lsls	r3, r3, #22
 801dd44:	d402      	bmi.n	801dd4c <_fputs_r+0x88>
 801dd46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd48:	f000 fa97 	bl	801e27a <__retarget_lock_release_recursive>
 801dd4c:	f04f 35ff 	mov.w	r5, #4294967295
 801dd50:	e7e1      	b.n	801dd16 <_fputs_r+0x52>
 801dd52:	68a3      	ldr	r3, [r4, #8]
 801dd54:	3b01      	subs	r3, #1
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	60a3      	str	r3, [r4, #8]
 801dd5a:	da04      	bge.n	801dd66 <_fputs_r+0xa2>
 801dd5c:	69a2      	ldr	r2, [r4, #24]
 801dd5e:	4293      	cmp	r3, r2
 801dd60:	db06      	blt.n	801dd70 <_fputs_r+0xac>
 801dd62:	290a      	cmp	r1, #10
 801dd64:	d004      	beq.n	801dd70 <_fputs_r+0xac>
 801dd66:	6823      	ldr	r3, [r4, #0]
 801dd68:	1c5a      	adds	r2, r3, #1
 801dd6a:	6022      	str	r2, [r4, #0]
 801dd6c:	7019      	strb	r1, [r3, #0]
 801dd6e:	e7c5      	b.n	801dcfc <_fputs_r+0x38>
 801dd70:	4622      	mov	r2, r4
 801dd72:	4628      	mov	r0, r5
 801dd74:	f001 fd6a 	bl	801f84c <__swbuf_r>
 801dd78:	3001      	adds	r0, #1
 801dd7a:	d1bf      	bne.n	801dcfc <_fputs_r+0x38>
 801dd7c:	e7dd      	b.n	801dd3a <_fputs_r+0x76>
 801dd7e:	460d      	mov	r5, r1
 801dd80:	e7c9      	b.n	801dd16 <_fputs_r+0x52>
 801dd82:	bf00      	nop
 801dd84:	080264ec 	.word	0x080264ec
 801dd88:	0802650c 	.word	0x0802650c
 801dd8c:	080264cc 	.word	0x080264cc

0801dd90 <fputs>:
 801dd90:	4b02      	ldr	r3, [pc, #8]	; (801dd9c <fputs+0xc>)
 801dd92:	460a      	mov	r2, r1
 801dd94:	4601      	mov	r1, r0
 801dd96:	6818      	ldr	r0, [r3, #0]
 801dd98:	f7ff bf94 	b.w	801dcc4 <_fputs_r>
 801dd9c:	20000104 	.word	0x20000104

0801dda0 <_fseek_r>:
 801dda0:	f000 b800 	b.w	801dda4 <_fseeko_r>

0801dda4 <_fseeko_r>:
 801dda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dda8:	460c      	mov	r4, r1
 801ddaa:	4617      	mov	r7, r2
 801ddac:	461e      	mov	r6, r3
 801ddae:	4605      	mov	r5, r0
 801ddb0:	b118      	cbz	r0, 801ddba <_fseeko_r+0x16>
 801ddb2:	6983      	ldr	r3, [r0, #24]
 801ddb4:	b90b      	cbnz	r3, 801ddba <_fseeko_r+0x16>
 801ddb6:	f7ff feab 	bl	801db10 <__sinit>
 801ddba:	4b44      	ldr	r3, [pc, #272]	; (801decc <_fseeko_r+0x128>)
 801ddbc:	429c      	cmp	r4, r3
 801ddbe:	d122      	bne.n	801de06 <_fseeko_r+0x62>
 801ddc0:	686c      	ldr	r4, [r5, #4]
 801ddc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ddc4:	07d9      	lsls	r1, r3, #31
 801ddc6:	d405      	bmi.n	801ddd4 <_fseeko_r+0x30>
 801ddc8:	89a3      	ldrh	r3, [r4, #12]
 801ddca:	059a      	lsls	r2, r3, #22
 801ddcc:	d402      	bmi.n	801ddd4 <_fseeko_r+0x30>
 801ddce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ddd0:	f000 fa51 	bl	801e276 <__retarget_lock_acquire_recursive>
 801ddd4:	89a3      	ldrh	r3, [r4, #12]
 801ddd6:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801ddda:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801ddde:	d103      	bne.n	801dde8 <_fseeko_r+0x44>
 801dde0:	4621      	mov	r1, r4
 801dde2:	4628      	mov	r0, r5
 801dde4:	f7ff fdee 	bl	801d9c4 <_fflush_r>
 801dde8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801ddec:	f1b8 0f00 	cmp.w	r8, #0
 801ddf0:	d113      	bne.n	801de1a <_fseeko_r+0x76>
 801ddf2:	231d      	movs	r3, #29
 801ddf4:	602b      	str	r3, [r5, #0]
 801ddf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ddf8:	07d9      	lsls	r1, r3, #31
 801ddfa:	d55d      	bpl.n	801deb8 <_fseeko_r+0x114>
 801ddfc:	f04f 36ff 	mov.w	r6, #4294967295
 801de00:	4630      	mov	r0, r6
 801de02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de06:	4b32      	ldr	r3, [pc, #200]	; (801ded0 <_fseeko_r+0x12c>)
 801de08:	429c      	cmp	r4, r3
 801de0a:	d101      	bne.n	801de10 <_fseeko_r+0x6c>
 801de0c:	68ac      	ldr	r4, [r5, #8]
 801de0e:	e7d8      	b.n	801ddc2 <_fseeko_r+0x1e>
 801de10:	4b30      	ldr	r3, [pc, #192]	; (801ded4 <_fseeko_r+0x130>)
 801de12:	429c      	cmp	r4, r3
 801de14:	bf08      	it	eq
 801de16:	68ec      	ldreq	r4, [r5, #12]
 801de18:	e7d3      	b.n	801ddc2 <_fseeko_r+0x1e>
 801de1a:	2e01      	cmp	r6, #1
 801de1c:	d036      	beq.n	801de8c <_fseeko_r+0xe8>
 801de1e:	f036 0302 	bics.w	r3, r6, #2
 801de22:	d147      	bne.n	801deb4 <_fseeko_r+0x110>
 801de24:	6923      	ldr	r3, [r4, #16]
 801de26:	b91b      	cbnz	r3, 801de30 <_fseeko_r+0x8c>
 801de28:	4621      	mov	r1, r4
 801de2a:	4628      	mov	r0, r5
 801de2c:	f000 fa4a 	bl	801e2c4 <__smakebuf_r>
 801de30:	4621      	mov	r1, r4
 801de32:	4628      	mov	r0, r5
 801de34:	f7ff fdc6 	bl	801d9c4 <_fflush_r>
 801de38:	2800      	cmp	r0, #0
 801de3a:	d1dc      	bne.n	801ddf6 <_fseeko_r+0x52>
 801de3c:	6a21      	ldr	r1, [r4, #32]
 801de3e:	4633      	mov	r3, r6
 801de40:	463a      	mov	r2, r7
 801de42:	4628      	mov	r0, r5
 801de44:	47c0      	blx	r8
 801de46:	3001      	adds	r0, #1
 801de48:	d0d5      	beq.n	801ddf6 <_fseeko_r+0x52>
 801de4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801de4c:	b141      	cbz	r1, 801de60 <_fseeko_r+0xbc>
 801de4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801de52:	4299      	cmp	r1, r3
 801de54:	d002      	beq.n	801de5c <_fseeko_r+0xb8>
 801de56:	4628      	mov	r0, r5
 801de58:	f000 faaa 	bl	801e3b0 <_free_r>
 801de5c:	2300      	movs	r3, #0
 801de5e:	6363      	str	r3, [r4, #52]	; 0x34
 801de60:	6923      	ldr	r3, [r4, #16]
 801de62:	6023      	str	r3, [r4, #0]
 801de64:	89a3      	ldrh	r3, [r4, #12]
 801de66:	2500      	movs	r5, #0
 801de68:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801de6c:	6065      	str	r5, [r4, #4]
 801de6e:	81a3      	strh	r3, [r4, #12]
 801de70:	2208      	movs	r2, #8
 801de72:	4629      	mov	r1, r5
 801de74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801de78:	f000 fa82 	bl	801e380 <memset>
 801de7c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801de7e:	f016 0601 	ands.w	r6, r6, #1
 801de82:	d120      	bne.n	801dec6 <_fseeko_r+0x122>
 801de84:	89a3      	ldrh	r3, [r4, #12]
 801de86:	059b      	lsls	r3, r3, #22
 801de88:	d4ba      	bmi.n	801de00 <_fseeko_r+0x5c>
 801de8a:	e00c      	b.n	801dea6 <_fseeko_r+0x102>
 801de8c:	4621      	mov	r1, r4
 801de8e:	4628      	mov	r0, r5
 801de90:	f000 f822 	bl	801ded8 <_ftello_r>
 801de94:	1c43      	adds	r3, r0, #1
 801de96:	4606      	mov	r6, r0
 801de98:	d109      	bne.n	801deae <_fseeko_r+0x10a>
 801de9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801de9c:	07dd      	lsls	r5, r3, #31
 801de9e:	d4ad      	bmi.n	801ddfc <_fseeko_r+0x58>
 801dea0:	89a3      	ldrh	r3, [r4, #12]
 801dea2:	0598      	lsls	r0, r3, #22
 801dea4:	d4aa      	bmi.n	801ddfc <_fseeko_r+0x58>
 801dea6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dea8:	f000 f9e7 	bl	801e27a <__retarget_lock_release_recursive>
 801deac:	e7a8      	b.n	801de00 <_fseeko_r+0x5c>
 801deae:	4407      	add	r7, r0
 801deb0:	2600      	movs	r6, #0
 801deb2:	e7b7      	b.n	801de24 <_fseeko_r+0x80>
 801deb4:	2316      	movs	r3, #22
 801deb6:	e79d      	b.n	801ddf4 <_fseeko_r+0x50>
 801deb8:	89a3      	ldrh	r3, [r4, #12]
 801deba:	059a      	lsls	r2, r3, #22
 801debc:	d49e      	bmi.n	801ddfc <_fseeko_r+0x58>
 801debe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dec0:	f000 f9db 	bl	801e27a <__retarget_lock_release_recursive>
 801dec4:	e79a      	b.n	801ddfc <_fseeko_r+0x58>
 801dec6:	462e      	mov	r6, r5
 801dec8:	e79a      	b.n	801de00 <_fseeko_r+0x5c>
 801deca:	bf00      	nop
 801decc:	080264ec 	.word	0x080264ec
 801ded0:	0802650c 	.word	0x0802650c
 801ded4:	080264cc 	.word	0x080264cc

0801ded8 <_ftello_r>:
 801ded8:	b570      	push	{r4, r5, r6, lr}
 801deda:	460c      	mov	r4, r1
 801dedc:	4605      	mov	r5, r0
 801dede:	b118      	cbz	r0, 801dee8 <_ftello_r+0x10>
 801dee0:	6983      	ldr	r3, [r0, #24]
 801dee2:	b90b      	cbnz	r3, 801dee8 <_ftello_r+0x10>
 801dee4:	f7ff fe14 	bl	801db10 <__sinit>
 801dee8:	4b32      	ldr	r3, [pc, #200]	; (801dfb4 <_ftello_r+0xdc>)
 801deea:	429c      	cmp	r4, r3
 801deec:	d114      	bne.n	801df18 <_ftello_r+0x40>
 801deee:	686c      	ldr	r4, [r5, #4]
 801def0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801def2:	07da      	lsls	r2, r3, #31
 801def4:	d405      	bmi.n	801df02 <_ftello_r+0x2a>
 801def6:	89a3      	ldrh	r3, [r4, #12]
 801def8:	059b      	lsls	r3, r3, #22
 801defa:	d402      	bmi.n	801df02 <_ftello_r+0x2a>
 801defc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801defe:	f000 f9ba 	bl	801e276 <__retarget_lock_acquire_recursive>
 801df02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801df04:	b9ce      	cbnz	r6, 801df3a <_ftello_r+0x62>
 801df06:	231d      	movs	r3, #29
 801df08:	602b      	str	r3, [r5, #0]
 801df0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801df0c:	07de      	lsls	r6, r3, #31
 801df0e:	d50d      	bpl.n	801df2c <_ftello_r+0x54>
 801df10:	f04f 35ff 	mov.w	r5, #4294967295
 801df14:	4628      	mov	r0, r5
 801df16:	bd70      	pop	{r4, r5, r6, pc}
 801df18:	4b27      	ldr	r3, [pc, #156]	; (801dfb8 <_ftello_r+0xe0>)
 801df1a:	429c      	cmp	r4, r3
 801df1c:	d101      	bne.n	801df22 <_ftello_r+0x4a>
 801df1e:	68ac      	ldr	r4, [r5, #8]
 801df20:	e7e6      	b.n	801def0 <_ftello_r+0x18>
 801df22:	4b26      	ldr	r3, [pc, #152]	; (801dfbc <_ftello_r+0xe4>)
 801df24:	429c      	cmp	r4, r3
 801df26:	bf08      	it	eq
 801df28:	68ec      	ldreq	r4, [r5, #12]
 801df2a:	e7e1      	b.n	801def0 <_ftello_r+0x18>
 801df2c:	89a3      	ldrh	r3, [r4, #12]
 801df2e:	059d      	lsls	r5, r3, #22
 801df30:	d4ee      	bmi.n	801df10 <_ftello_r+0x38>
 801df32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801df34:	f000 f9a1 	bl	801e27a <__retarget_lock_release_recursive>
 801df38:	e7ea      	b.n	801df10 <_ftello_r+0x38>
 801df3a:	89a2      	ldrh	r2, [r4, #12]
 801df3c:	f002 030c 	and.w	r3, r2, #12
 801df40:	2b08      	cmp	r3, #8
 801df42:	d119      	bne.n	801df78 <_ftello_r+0xa0>
 801df44:	6823      	ldr	r3, [r4, #0]
 801df46:	b1bb      	cbz	r3, 801df78 <_ftello_r+0xa0>
 801df48:	6921      	ldr	r1, [r4, #16]
 801df4a:	1a5b      	subs	r3, r3, r1
 801df4c:	2b00      	cmp	r3, #0
 801df4e:	dd13      	ble.n	801df78 <_ftello_r+0xa0>
 801df50:	05d0      	lsls	r0, r2, #23
 801df52:	d511      	bpl.n	801df78 <_ftello_r+0xa0>
 801df54:	2302      	movs	r3, #2
 801df56:	2200      	movs	r2, #0
 801df58:	6a21      	ldr	r1, [r4, #32]
 801df5a:	4628      	mov	r0, r5
 801df5c:	47b0      	blx	r6
 801df5e:	1c41      	adds	r1, r0, #1
 801df60:	4605      	mov	r5, r0
 801df62:	d10d      	bne.n	801df80 <_ftello_r+0xa8>
 801df64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801df66:	07da      	lsls	r2, r3, #31
 801df68:	d4d2      	bmi.n	801df10 <_ftello_r+0x38>
 801df6a:	89a3      	ldrh	r3, [r4, #12]
 801df6c:	059b      	lsls	r3, r3, #22
 801df6e:	d4cf      	bmi.n	801df10 <_ftello_r+0x38>
 801df70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801df72:	f000 f982 	bl	801e27a <__retarget_lock_release_recursive>
 801df76:	e7cd      	b.n	801df14 <_ftello_r+0x3c>
 801df78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801df7c:	d00f      	beq.n	801df9e <_ftello_r+0xc6>
 801df7e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801df80:	89a2      	ldrh	r2, [r4, #12]
 801df82:	0756      	lsls	r6, r2, #29
 801df84:	d50d      	bpl.n	801dfa2 <_ftello_r+0xca>
 801df86:	6863      	ldr	r3, [r4, #4]
 801df88:	1aed      	subs	r5, r5, r3
 801df8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801df8c:	b10b      	cbz	r3, 801df92 <_ftello_r+0xba>
 801df8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801df90:	1aed      	subs	r5, r5, r3
 801df92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801df94:	07d9      	lsls	r1, r3, #31
 801df96:	d4bd      	bmi.n	801df14 <_ftello_r+0x3c>
 801df98:	0593      	lsls	r3, r2, #22
 801df9a:	d4bb      	bmi.n	801df14 <_ftello_r+0x3c>
 801df9c:	e7e8      	b.n	801df70 <_ftello_r+0x98>
 801df9e:	2301      	movs	r3, #1
 801dfa0:	e7da      	b.n	801df58 <_ftello_r+0x80>
 801dfa2:	0710      	lsls	r0, r2, #28
 801dfa4:	d5f5      	bpl.n	801df92 <_ftello_r+0xba>
 801dfa6:	6823      	ldr	r3, [r4, #0]
 801dfa8:	2b00      	cmp	r3, #0
 801dfaa:	d0f2      	beq.n	801df92 <_ftello_r+0xba>
 801dfac:	6921      	ldr	r1, [r4, #16]
 801dfae:	1a5b      	subs	r3, r3, r1
 801dfb0:	441d      	add	r5, r3
 801dfb2:	e7ee      	b.n	801df92 <_ftello_r+0xba>
 801dfb4:	080264ec 	.word	0x080264ec
 801dfb8:	0802650c 	.word	0x0802650c
 801dfbc:	080264cc 	.word	0x080264cc

0801dfc0 <_fwalk_reent>:
 801dfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dfc4:	4606      	mov	r6, r0
 801dfc6:	4688      	mov	r8, r1
 801dfc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dfcc:	2700      	movs	r7, #0
 801dfce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dfd2:	f1b9 0901 	subs.w	r9, r9, #1
 801dfd6:	d505      	bpl.n	801dfe4 <_fwalk_reent+0x24>
 801dfd8:	6824      	ldr	r4, [r4, #0]
 801dfda:	2c00      	cmp	r4, #0
 801dfdc:	d1f7      	bne.n	801dfce <_fwalk_reent+0xe>
 801dfde:	4638      	mov	r0, r7
 801dfe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dfe4:	89ab      	ldrh	r3, [r5, #12]
 801dfe6:	2b01      	cmp	r3, #1
 801dfe8:	d907      	bls.n	801dffa <_fwalk_reent+0x3a>
 801dfea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dfee:	3301      	adds	r3, #1
 801dff0:	d003      	beq.n	801dffa <_fwalk_reent+0x3a>
 801dff2:	4629      	mov	r1, r5
 801dff4:	4630      	mov	r0, r6
 801dff6:	47c0      	blx	r8
 801dff8:	4307      	orrs	r7, r0
 801dffa:	3568      	adds	r5, #104	; 0x68
 801dffc:	e7e9      	b.n	801dfd2 <_fwalk_reent+0x12>
	...

0801e000 <__libc_init_array>:
 801e000:	b570      	push	{r4, r5, r6, lr}
 801e002:	4d0d      	ldr	r5, [pc, #52]	; (801e038 <__libc_init_array+0x38>)
 801e004:	4c0d      	ldr	r4, [pc, #52]	; (801e03c <__libc_init_array+0x3c>)
 801e006:	1b64      	subs	r4, r4, r5
 801e008:	10a4      	asrs	r4, r4, #2
 801e00a:	2600      	movs	r6, #0
 801e00c:	42a6      	cmp	r6, r4
 801e00e:	d109      	bne.n	801e024 <__libc_init_array+0x24>
 801e010:	4d0b      	ldr	r5, [pc, #44]	; (801e040 <__libc_init_array+0x40>)
 801e012:	4c0c      	ldr	r4, [pc, #48]	; (801e044 <__libc_init_array+0x44>)
 801e014:	f003 f8ac 	bl	8021170 <_init>
 801e018:	1b64      	subs	r4, r4, r5
 801e01a:	10a4      	asrs	r4, r4, #2
 801e01c:	2600      	movs	r6, #0
 801e01e:	42a6      	cmp	r6, r4
 801e020:	d105      	bne.n	801e02e <__libc_init_array+0x2e>
 801e022:	bd70      	pop	{r4, r5, r6, pc}
 801e024:	f855 3b04 	ldr.w	r3, [r5], #4
 801e028:	4798      	blx	r3
 801e02a:	3601      	adds	r6, #1
 801e02c:	e7ee      	b.n	801e00c <__libc_init_array+0xc>
 801e02e:	f855 3b04 	ldr.w	r3, [r5], #4
 801e032:	4798      	blx	r3
 801e034:	3601      	adds	r6, #1
 801e036:	e7f2      	b.n	801e01e <__libc_init_array+0x1e>
 801e038:	08026ac4 	.word	0x08026ac4
 801e03c:	08026ac4 	.word	0x08026ac4
 801e040:	08026ac4 	.word	0x08026ac4
 801e044:	08026ad4 	.word	0x08026ad4

0801e048 <localtime>:
 801e048:	b538      	push	{r3, r4, r5, lr}
 801e04a:	4b0b      	ldr	r3, [pc, #44]	; (801e078 <localtime+0x30>)
 801e04c:	681d      	ldr	r5, [r3, #0]
 801e04e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801e050:	4604      	mov	r4, r0
 801e052:	b953      	cbnz	r3, 801e06a <localtime+0x22>
 801e054:	2024      	movs	r0, #36	; 0x24
 801e056:	f000 f975 	bl	801e344 <malloc>
 801e05a:	4602      	mov	r2, r0
 801e05c:	63e8      	str	r0, [r5, #60]	; 0x3c
 801e05e:	b920      	cbnz	r0, 801e06a <localtime+0x22>
 801e060:	4b06      	ldr	r3, [pc, #24]	; (801e07c <localtime+0x34>)
 801e062:	4807      	ldr	r0, [pc, #28]	; (801e080 <localtime+0x38>)
 801e064:	2132      	movs	r1, #50	; 0x32
 801e066:	f001 fd29 	bl	801fabc <__assert_func>
 801e06a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801e06c:	4620      	mov	r0, r4
 801e06e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e072:	f000 b807 	b.w	801e084 <localtime_r>
 801e076:	bf00      	nop
 801e078:	20000104 	.word	0x20000104
 801e07c:	08026530 	.word	0x08026530
 801e080:	08026547 	.word	0x08026547

0801e084 <localtime_r>:
 801e084:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801e088:	4607      	mov	r7, r0
 801e08a:	9101      	str	r1, [sp, #4]
 801e08c:	f001 fde0 	bl	801fc50 <__gettzinfo>
 801e090:	9901      	ldr	r1, [sp, #4]
 801e092:	4680      	mov	r8, r0
 801e094:	4638      	mov	r0, r7
 801e096:	f001 fddf 	bl	801fc58 <gmtime_r>
 801e09a:	6943      	ldr	r3, [r0, #20]
 801e09c:	079a      	lsls	r2, r3, #30
 801e09e:	4604      	mov	r4, r0
 801e0a0:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801e0a4:	d105      	bne.n	801e0b2 <localtime_r+0x2e>
 801e0a6:	2264      	movs	r2, #100	; 0x64
 801e0a8:	fb96 f3f2 	sdiv	r3, r6, r2
 801e0ac:	fb02 6313 	mls	r3, r2, r3, r6
 801e0b0:	bb7b      	cbnz	r3, 801e112 <localtime_r+0x8e>
 801e0b2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801e0b6:	fb96 f5f3 	sdiv	r5, r6, r3
 801e0ba:	fb03 6515 	mls	r5, r3, r5, r6
 801e0be:	fab5 f585 	clz	r5, r5
 801e0c2:	096d      	lsrs	r5, r5, #5
 801e0c4:	4b68      	ldr	r3, [pc, #416]	; (801e268 <localtime_r+0x1e4>)
 801e0c6:	2230      	movs	r2, #48	; 0x30
 801e0c8:	fb02 3505 	mla	r5, r2, r5, r3
 801e0cc:	f001 f9f6 	bl	801f4bc <__tz_lock>
 801e0d0:	f001 fa00 	bl	801f4d4 <_tzset_unlocked>
 801e0d4:	4b65      	ldr	r3, [pc, #404]	; (801e26c <localtime_r+0x1e8>)
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	b353      	cbz	r3, 801e130 <localtime_r+0xac>
 801e0da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e0de:	42b3      	cmp	r3, r6
 801e0e0:	d119      	bne.n	801e116 <localtime_r+0x92>
 801e0e2:	f8d8 1000 	ldr.w	r1, [r8]
 801e0e6:	e9d7 6700 	ldrd	r6, r7, [r7]
 801e0ea:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801e0ee:	b9d1      	cbnz	r1, 801e126 <localtime_r+0xa2>
 801e0f0:	4296      	cmp	r6, r2
 801e0f2:	eb77 0303 	sbcs.w	r3, r7, r3
 801e0f6:	da23      	bge.n	801e140 <localtime_r+0xbc>
 801e0f8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801e0fc:	4296      	cmp	r6, r2
 801e0fe:	eb77 0303 	sbcs.w	r3, r7, r3
 801e102:	bfb4      	ite	lt
 801e104:	2301      	movlt	r3, #1
 801e106:	2300      	movge	r3, #0
 801e108:	6223      	str	r3, [r4, #32]
 801e10a:	db1b      	blt.n	801e144 <localtime_r+0xc0>
 801e10c:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801e110:	e01a      	b.n	801e148 <localtime_r+0xc4>
 801e112:	2501      	movs	r5, #1
 801e114:	e7d6      	b.n	801e0c4 <localtime_r+0x40>
 801e116:	4630      	mov	r0, r6
 801e118:	f001 f928 	bl	801f36c <__tzcalc_limits>
 801e11c:	2800      	cmp	r0, #0
 801e11e:	d1e0      	bne.n	801e0e2 <localtime_r+0x5e>
 801e120:	f04f 33ff 	mov.w	r3, #4294967295
 801e124:	e004      	b.n	801e130 <localtime_r+0xac>
 801e126:	4296      	cmp	r6, r2
 801e128:	eb77 0303 	sbcs.w	r3, r7, r3
 801e12c:	da02      	bge.n	801e134 <localtime_r+0xb0>
 801e12e:	2300      	movs	r3, #0
 801e130:	6223      	str	r3, [r4, #32]
 801e132:	e7eb      	b.n	801e10c <localtime_r+0x88>
 801e134:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801e138:	4296      	cmp	r6, r2
 801e13a:	eb77 0303 	sbcs.w	r3, r7, r3
 801e13e:	daf6      	bge.n	801e12e <localtime_r+0xaa>
 801e140:	2301      	movs	r3, #1
 801e142:	6223      	str	r3, [r4, #32]
 801e144:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801e148:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801e14c:	203c      	movs	r0, #60	; 0x3c
 801e14e:	fb91 f6f3 	sdiv	r6, r1, r3
 801e152:	fb03 1316 	mls	r3, r3, r6, r1
 801e156:	6861      	ldr	r1, [r4, #4]
 801e158:	fb93 f2f0 	sdiv	r2, r3, r0
 801e15c:	fb00 3012 	mls	r0, r0, r2, r3
 801e160:	6823      	ldr	r3, [r4, #0]
 801e162:	1a89      	subs	r1, r1, r2
 801e164:	68a2      	ldr	r2, [r4, #8]
 801e166:	6061      	str	r1, [r4, #4]
 801e168:	1a1b      	subs	r3, r3, r0
 801e16a:	1b92      	subs	r2, r2, r6
 801e16c:	2b3b      	cmp	r3, #59	; 0x3b
 801e16e:	6023      	str	r3, [r4, #0]
 801e170:	60a2      	str	r2, [r4, #8]
 801e172:	dd35      	ble.n	801e1e0 <localtime_r+0x15c>
 801e174:	3101      	adds	r1, #1
 801e176:	6061      	str	r1, [r4, #4]
 801e178:	3b3c      	subs	r3, #60	; 0x3c
 801e17a:	6023      	str	r3, [r4, #0]
 801e17c:	6863      	ldr	r3, [r4, #4]
 801e17e:	2b3b      	cmp	r3, #59	; 0x3b
 801e180:	dd34      	ble.n	801e1ec <localtime_r+0x168>
 801e182:	3201      	adds	r2, #1
 801e184:	60a2      	str	r2, [r4, #8]
 801e186:	3b3c      	subs	r3, #60	; 0x3c
 801e188:	6063      	str	r3, [r4, #4]
 801e18a:	68a3      	ldr	r3, [r4, #8]
 801e18c:	2b17      	cmp	r3, #23
 801e18e:	dd33      	ble.n	801e1f8 <localtime_r+0x174>
 801e190:	69e2      	ldr	r2, [r4, #28]
 801e192:	3201      	adds	r2, #1
 801e194:	61e2      	str	r2, [r4, #28]
 801e196:	69a2      	ldr	r2, [r4, #24]
 801e198:	3201      	adds	r2, #1
 801e19a:	2a06      	cmp	r2, #6
 801e19c:	bfc8      	it	gt
 801e19e:	2200      	movgt	r2, #0
 801e1a0:	61a2      	str	r2, [r4, #24]
 801e1a2:	68e2      	ldr	r2, [r4, #12]
 801e1a4:	3b18      	subs	r3, #24
 801e1a6:	3201      	adds	r2, #1
 801e1a8:	60a3      	str	r3, [r4, #8]
 801e1aa:	6923      	ldr	r3, [r4, #16]
 801e1ac:	60e2      	str	r2, [r4, #12]
 801e1ae:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801e1b2:	428a      	cmp	r2, r1
 801e1b4:	dd0e      	ble.n	801e1d4 <localtime_r+0x150>
 801e1b6:	2b0b      	cmp	r3, #11
 801e1b8:	eba2 0201 	sub.w	r2, r2, r1
 801e1bc:	60e2      	str	r2, [r4, #12]
 801e1be:	f103 0201 	add.w	r2, r3, #1
 801e1c2:	bf09      	itett	eq
 801e1c4:	6963      	ldreq	r3, [r4, #20]
 801e1c6:	6122      	strne	r2, [r4, #16]
 801e1c8:	2200      	moveq	r2, #0
 801e1ca:	3301      	addeq	r3, #1
 801e1cc:	bf02      	ittt	eq
 801e1ce:	6122      	streq	r2, [r4, #16]
 801e1d0:	6163      	streq	r3, [r4, #20]
 801e1d2:	61e2      	streq	r2, [r4, #28]
 801e1d4:	f001 f978 	bl	801f4c8 <__tz_unlock>
 801e1d8:	4620      	mov	r0, r4
 801e1da:	b002      	add	sp, #8
 801e1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	dacb      	bge.n	801e17c <localtime_r+0xf8>
 801e1e4:	3901      	subs	r1, #1
 801e1e6:	6061      	str	r1, [r4, #4]
 801e1e8:	333c      	adds	r3, #60	; 0x3c
 801e1ea:	e7c6      	b.n	801e17a <localtime_r+0xf6>
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	dacc      	bge.n	801e18a <localtime_r+0x106>
 801e1f0:	3a01      	subs	r2, #1
 801e1f2:	60a2      	str	r2, [r4, #8]
 801e1f4:	333c      	adds	r3, #60	; 0x3c
 801e1f6:	e7c7      	b.n	801e188 <localtime_r+0x104>
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	daeb      	bge.n	801e1d4 <localtime_r+0x150>
 801e1fc:	69e2      	ldr	r2, [r4, #28]
 801e1fe:	3a01      	subs	r2, #1
 801e200:	61e2      	str	r2, [r4, #28]
 801e202:	69a2      	ldr	r2, [r4, #24]
 801e204:	3a01      	subs	r2, #1
 801e206:	bf48      	it	mi
 801e208:	2206      	movmi	r2, #6
 801e20a:	61a2      	str	r2, [r4, #24]
 801e20c:	68e2      	ldr	r2, [r4, #12]
 801e20e:	3318      	adds	r3, #24
 801e210:	3a01      	subs	r2, #1
 801e212:	60e2      	str	r2, [r4, #12]
 801e214:	60a3      	str	r3, [r4, #8]
 801e216:	2a00      	cmp	r2, #0
 801e218:	d1dc      	bne.n	801e1d4 <localtime_r+0x150>
 801e21a:	6923      	ldr	r3, [r4, #16]
 801e21c:	3b01      	subs	r3, #1
 801e21e:	d405      	bmi.n	801e22c <localtime_r+0x1a8>
 801e220:	6123      	str	r3, [r4, #16]
 801e222:	6923      	ldr	r3, [r4, #16]
 801e224:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801e228:	60e3      	str	r3, [r4, #12]
 801e22a:	e7d3      	b.n	801e1d4 <localtime_r+0x150>
 801e22c:	230b      	movs	r3, #11
 801e22e:	6123      	str	r3, [r4, #16]
 801e230:	6963      	ldr	r3, [r4, #20]
 801e232:	1e5a      	subs	r2, r3, #1
 801e234:	6162      	str	r2, [r4, #20]
 801e236:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801e23a:	0793      	lsls	r3, r2, #30
 801e23c:	d105      	bne.n	801e24a <localtime_r+0x1c6>
 801e23e:	2164      	movs	r1, #100	; 0x64
 801e240:	fb92 f3f1 	sdiv	r3, r2, r1
 801e244:	fb01 2313 	mls	r3, r1, r3, r2
 801e248:	b963      	cbnz	r3, 801e264 <localtime_r+0x1e0>
 801e24a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801e24e:	fb92 f3f1 	sdiv	r3, r2, r1
 801e252:	fb01 2313 	mls	r3, r1, r3, r2
 801e256:	fab3 f383 	clz	r3, r3
 801e25a:	095b      	lsrs	r3, r3, #5
 801e25c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801e260:	61e3      	str	r3, [r4, #28]
 801e262:	e7de      	b.n	801e222 <localtime_r+0x19e>
 801e264:	2301      	movs	r3, #1
 801e266:	e7f9      	b.n	801e25c <localtime_r+0x1d8>
 801e268:	080265a8 	.word	0x080265a8
 801e26c:	20000d84 	.word	0x20000d84

0801e270 <__retarget_lock_init_recursive>:
 801e270:	4770      	bx	lr

0801e272 <__retarget_lock_close_recursive>:
 801e272:	4770      	bx	lr

0801e274 <__retarget_lock_acquire>:
 801e274:	4770      	bx	lr

0801e276 <__retarget_lock_acquire_recursive>:
 801e276:	4770      	bx	lr

0801e278 <__retarget_lock_release>:
 801e278:	4770      	bx	lr

0801e27a <__retarget_lock_release_recursive>:
 801e27a:	4770      	bx	lr

0801e27c <__swhatbuf_r>:
 801e27c:	b570      	push	{r4, r5, r6, lr}
 801e27e:	460e      	mov	r6, r1
 801e280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e284:	2900      	cmp	r1, #0
 801e286:	b096      	sub	sp, #88	; 0x58
 801e288:	4614      	mov	r4, r2
 801e28a:	461d      	mov	r5, r3
 801e28c:	da07      	bge.n	801e29e <__swhatbuf_r+0x22>
 801e28e:	2300      	movs	r3, #0
 801e290:	602b      	str	r3, [r5, #0]
 801e292:	89b3      	ldrh	r3, [r6, #12]
 801e294:	061a      	lsls	r2, r3, #24
 801e296:	d410      	bmi.n	801e2ba <__swhatbuf_r+0x3e>
 801e298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e29c:	e00e      	b.n	801e2bc <__swhatbuf_r+0x40>
 801e29e:	466a      	mov	r2, sp
 801e2a0:	f001 fc82 	bl	801fba8 <_fstat_r>
 801e2a4:	2800      	cmp	r0, #0
 801e2a6:	dbf2      	blt.n	801e28e <__swhatbuf_r+0x12>
 801e2a8:	9a01      	ldr	r2, [sp, #4]
 801e2aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e2ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e2b2:	425a      	negs	r2, r3
 801e2b4:	415a      	adcs	r2, r3
 801e2b6:	602a      	str	r2, [r5, #0]
 801e2b8:	e7ee      	b.n	801e298 <__swhatbuf_r+0x1c>
 801e2ba:	2340      	movs	r3, #64	; 0x40
 801e2bc:	2000      	movs	r0, #0
 801e2be:	6023      	str	r3, [r4, #0]
 801e2c0:	b016      	add	sp, #88	; 0x58
 801e2c2:	bd70      	pop	{r4, r5, r6, pc}

0801e2c4 <__smakebuf_r>:
 801e2c4:	898b      	ldrh	r3, [r1, #12]
 801e2c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e2c8:	079d      	lsls	r5, r3, #30
 801e2ca:	4606      	mov	r6, r0
 801e2cc:	460c      	mov	r4, r1
 801e2ce:	d507      	bpl.n	801e2e0 <__smakebuf_r+0x1c>
 801e2d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e2d4:	6023      	str	r3, [r4, #0]
 801e2d6:	6123      	str	r3, [r4, #16]
 801e2d8:	2301      	movs	r3, #1
 801e2da:	6163      	str	r3, [r4, #20]
 801e2dc:	b002      	add	sp, #8
 801e2de:	bd70      	pop	{r4, r5, r6, pc}
 801e2e0:	ab01      	add	r3, sp, #4
 801e2e2:	466a      	mov	r2, sp
 801e2e4:	f7ff ffca 	bl	801e27c <__swhatbuf_r>
 801e2e8:	9900      	ldr	r1, [sp, #0]
 801e2ea:	4605      	mov	r5, r0
 801e2ec:	4630      	mov	r0, r6
 801e2ee:	f000 f8af 	bl	801e450 <_malloc_r>
 801e2f2:	b948      	cbnz	r0, 801e308 <__smakebuf_r+0x44>
 801e2f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e2f8:	059a      	lsls	r2, r3, #22
 801e2fa:	d4ef      	bmi.n	801e2dc <__smakebuf_r+0x18>
 801e2fc:	f023 0303 	bic.w	r3, r3, #3
 801e300:	f043 0302 	orr.w	r3, r3, #2
 801e304:	81a3      	strh	r3, [r4, #12]
 801e306:	e7e3      	b.n	801e2d0 <__smakebuf_r+0xc>
 801e308:	4b0d      	ldr	r3, [pc, #52]	; (801e340 <__smakebuf_r+0x7c>)
 801e30a:	62b3      	str	r3, [r6, #40]	; 0x28
 801e30c:	89a3      	ldrh	r3, [r4, #12]
 801e30e:	6020      	str	r0, [r4, #0]
 801e310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e314:	81a3      	strh	r3, [r4, #12]
 801e316:	9b00      	ldr	r3, [sp, #0]
 801e318:	6163      	str	r3, [r4, #20]
 801e31a:	9b01      	ldr	r3, [sp, #4]
 801e31c:	6120      	str	r0, [r4, #16]
 801e31e:	b15b      	cbz	r3, 801e338 <__smakebuf_r+0x74>
 801e320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e324:	4630      	mov	r0, r6
 801e326:	f001 fd47 	bl	801fdb8 <_isatty_r>
 801e32a:	b128      	cbz	r0, 801e338 <__smakebuf_r+0x74>
 801e32c:	89a3      	ldrh	r3, [r4, #12]
 801e32e:	f023 0303 	bic.w	r3, r3, #3
 801e332:	f043 0301 	orr.w	r3, r3, #1
 801e336:	81a3      	strh	r3, [r4, #12]
 801e338:	89a0      	ldrh	r0, [r4, #12]
 801e33a:	4305      	orrs	r5, r0
 801e33c:	81a5      	strh	r5, [r4, #12]
 801e33e:	e7cd      	b.n	801e2dc <__smakebuf_r+0x18>
 801e340:	0801daa9 	.word	0x0801daa9

0801e344 <malloc>:
 801e344:	4b02      	ldr	r3, [pc, #8]	; (801e350 <malloc+0xc>)
 801e346:	4601      	mov	r1, r0
 801e348:	6818      	ldr	r0, [r3, #0]
 801e34a:	f000 b881 	b.w	801e450 <_malloc_r>
 801e34e:	bf00      	nop
 801e350:	20000104 	.word	0x20000104

0801e354 <free>:
 801e354:	4b02      	ldr	r3, [pc, #8]	; (801e360 <free+0xc>)
 801e356:	4601      	mov	r1, r0
 801e358:	6818      	ldr	r0, [r3, #0]
 801e35a:	f000 b829 	b.w	801e3b0 <_free_r>
 801e35e:	bf00      	nop
 801e360:	20000104 	.word	0x20000104

0801e364 <memcpy>:
 801e364:	440a      	add	r2, r1
 801e366:	4291      	cmp	r1, r2
 801e368:	f100 33ff 	add.w	r3, r0, #4294967295
 801e36c:	d100      	bne.n	801e370 <memcpy+0xc>
 801e36e:	4770      	bx	lr
 801e370:	b510      	push	{r4, lr}
 801e372:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e376:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e37a:	4291      	cmp	r1, r2
 801e37c:	d1f9      	bne.n	801e372 <memcpy+0xe>
 801e37e:	bd10      	pop	{r4, pc}

0801e380 <memset>:
 801e380:	4402      	add	r2, r0
 801e382:	4603      	mov	r3, r0
 801e384:	4293      	cmp	r3, r2
 801e386:	d100      	bne.n	801e38a <memset+0xa>
 801e388:	4770      	bx	lr
 801e38a:	f803 1b01 	strb.w	r1, [r3], #1
 801e38e:	e7f9      	b.n	801e384 <memset+0x4>

0801e390 <_calloc_r>:
 801e390:	b513      	push	{r0, r1, r4, lr}
 801e392:	434a      	muls	r2, r1
 801e394:	4611      	mov	r1, r2
 801e396:	9201      	str	r2, [sp, #4]
 801e398:	f000 f85a 	bl	801e450 <_malloc_r>
 801e39c:	4604      	mov	r4, r0
 801e39e:	b118      	cbz	r0, 801e3a8 <_calloc_r+0x18>
 801e3a0:	9a01      	ldr	r2, [sp, #4]
 801e3a2:	2100      	movs	r1, #0
 801e3a4:	f7ff ffec 	bl	801e380 <memset>
 801e3a8:	4620      	mov	r0, r4
 801e3aa:	b002      	add	sp, #8
 801e3ac:	bd10      	pop	{r4, pc}
	...

0801e3b0 <_free_r>:
 801e3b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e3b2:	2900      	cmp	r1, #0
 801e3b4:	d048      	beq.n	801e448 <_free_r+0x98>
 801e3b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e3ba:	9001      	str	r0, [sp, #4]
 801e3bc:	2b00      	cmp	r3, #0
 801e3be:	f1a1 0404 	sub.w	r4, r1, #4
 801e3c2:	bfb8      	it	lt
 801e3c4:	18e4      	addlt	r4, r4, r3
 801e3c6:	f001 fd2f 	bl	801fe28 <__malloc_lock>
 801e3ca:	4a20      	ldr	r2, [pc, #128]	; (801e44c <_free_r+0x9c>)
 801e3cc:	9801      	ldr	r0, [sp, #4]
 801e3ce:	6813      	ldr	r3, [r2, #0]
 801e3d0:	4615      	mov	r5, r2
 801e3d2:	b933      	cbnz	r3, 801e3e2 <_free_r+0x32>
 801e3d4:	6063      	str	r3, [r4, #4]
 801e3d6:	6014      	str	r4, [r2, #0]
 801e3d8:	b003      	add	sp, #12
 801e3da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e3de:	f001 bd29 	b.w	801fe34 <__malloc_unlock>
 801e3e2:	42a3      	cmp	r3, r4
 801e3e4:	d90b      	bls.n	801e3fe <_free_r+0x4e>
 801e3e6:	6821      	ldr	r1, [r4, #0]
 801e3e8:	1862      	adds	r2, r4, r1
 801e3ea:	4293      	cmp	r3, r2
 801e3ec:	bf04      	itt	eq
 801e3ee:	681a      	ldreq	r2, [r3, #0]
 801e3f0:	685b      	ldreq	r3, [r3, #4]
 801e3f2:	6063      	str	r3, [r4, #4]
 801e3f4:	bf04      	itt	eq
 801e3f6:	1852      	addeq	r2, r2, r1
 801e3f8:	6022      	streq	r2, [r4, #0]
 801e3fa:	602c      	str	r4, [r5, #0]
 801e3fc:	e7ec      	b.n	801e3d8 <_free_r+0x28>
 801e3fe:	461a      	mov	r2, r3
 801e400:	685b      	ldr	r3, [r3, #4]
 801e402:	b10b      	cbz	r3, 801e408 <_free_r+0x58>
 801e404:	42a3      	cmp	r3, r4
 801e406:	d9fa      	bls.n	801e3fe <_free_r+0x4e>
 801e408:	6811      	ldr	r1, [r2, #0]
 801e40a:	1855      	adds	r5, r2, r1
 801e40c:	42a5      	cmp	r5, r4
 801e40e:	d10b      	bne.n	801e428 <_free_r+0x78>
 801e410:	6824      	ldr	r4, [r4, #0]
 801e412:	4421      	add	r1, r4
 801e414:	1854      	adds	r4, r2, r1
 801e416:	42a3      	cmp	r3, r4
 801e418:	6011      	str	r1, [r2, #0]
 801e41a:	d1dd      	bne.n	801e3d8 <_free_r+0x28>
 801e41c:	681c      	ldr	r4, [r3, #0]
 801e41e:	685b      	ldr	r3, [r3, #4]
 801e420:	6053      	str	r3, [r2, #4]
 801e422:	4421      	add	r1, r4
 801e424:	6011      	str	r1, [r2, #0]
 801e426:	e7d7      	b.n	801e3d8 <_free_r+0x28>
 801e428:	d902      	bls.n	801e430 <_free_r+0x80>
 801e42a:	230c      	movs	r3, #12
 801e42c:	6003      	str	r3, [r0, #0]
 801e42e:	e7d3      	b.n	801e3d8 <_free_r+0x28>
 801e430:	6825      	ldr	r5, [r4, #0]
 801e432:	1961      	adds	r1, r4, r5
 801e434:	428b      	cmp	r3, r1
 801e436:	bf04      	itt	eq
 801e438:	6819      	ldreq	r1, [r3, #0]
 801e43a:	685b      	ldreq	r3, [r3, #4]
 801e43c:	6063      	str	r3, [r4, #4]
 801e43e:	bf04      	itt	eq
 801e440:	1949      	addeq	r1, r1, r5
 801e442:	6021      	streq	r1, [r4, #0]
 801e444:	6054      	str	r4, [r2, #4]
 801e446:	e7c7      	b.n	801e3d8 <_free_r+0x28>
 801e448:	b003      	add	sp, #12
 801e44a:	bd30      	pop	{r4, r5, pc}
 801e44c:	20000d60 	.word	0x20000d60

0801e450 <_malloc_r>:
 801e450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e452:	1ccd      	adds	r5, r1, #3
 801e454:	f025 0503 	bic.w	r5, r5, #3
 801e458:	3508      	adds	r5, #8
 801e45a:	2d0c      	cmp	r5, #12
 801e45c:	bf38      	it	cc
 801e45e:	250c      	movcc	r5, #12
 801e460:	2d00      	cmp	r5, #0
 801e462:	4606      	mov	r6, r0
 801e464:	db01      	blt.n	801e46a <_malloc_r+0x1a>
 801e466:	42a9      	cmp	r1, r5
 801e468:	d903      	bls.n	801e472 <_malloc_r+0x22>
 801e46a:	230c      	movs	r3, #12
 801e46c:	6033      	str	r3, [r6, #0]
 801e46e:	2000      	movs	r0, #0
 801e470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e472:	f001 fcd9 	bl	801fe28 <__malloc_lock>
 801e476:	4921      	ldr	r1, [pc, #132]	; (801e4fc <_malloc_r+0xac>)
 801e478:	680a      	ldr	r2, [r1, #0]
 801e47a:	4614      	mov	r4, r2
 801e47c:	b99c      	cbnz	r4, 801e4a6 <_malloc_r+0x56>
 801e47e:	4f20      	ldr	r7, [pc, #128]	; (801e500 <_malloc_r+0xb0>)
 801e480:	683b      	ldr	r3, [r7, #0]
 801e482:	b923      	cbnz	r3, 801e48e <_malloc_r+0x3e>
 801e484:	4621      	mov	r1, r4
 801e486:	4630      	mov	r0, r6
 801e488:	f000 f8da 	bl	801e640 <_sbrk_r>
 801e48c:	6038      	str	r0, [r7, #0]
 801e48e:	4629      	mov	r1, r5
 801e490:	4630      	mov	r0, r6
 801e492:	f000 f8d5 	bl	801e640 <_sbrk_r>
 801e496:	1c43      	adds	r3, r0, #1
 801e498:	d123      	bne.n	801e4e2 <_malloc_r+0x92>
 801e49a:	230c      	movs	r3, #12
 801e49c:	6033      	str	r3, [r6, #0]
 801e49e:	4630      	mov	r0, r6
 801e4a0:	f001 fcc8 	bl	801fe34 <__malloc_unlock>
 801e4a4:	e7e3      	b.n	801e46e <_malloc_r+0x1e>
 801e4a6:	6823      	ldr	r3, [r4, #0]
 801e4a8:	1b5b      	subs	r3, r3, r5
 801e4aa:	d417      	bmi.n	801e4dc <_malloc_r+0x8c>
 801e4ac:	2b0b      	cmp	r3, #11
 801e4ae:	d903      	bls.n	801e4b8 <_malloc_r+0x68>
 801e4b0:	6023      	str	r3, [r4, #0]
 801e4b2:	441c      	add	r4, r3
 801e4b4:	6025      	str	r5, [r4, #0]
 801e4b6:	e004      	b.n	801e4c2 <_malloc_r+0x72>
 801e4b8:	6863      	ldr	r3, [r4, #4]
 801e4ba:	42a2      	cmp	r2, r4
 801e4bc:	bf0c      	ite	eq
 801e4be:	600b      	streq	r3, [r1, #0]
 801e4c0:	6053      	strne	r3, [r2, #4]
 801e4c2:	4630      	mov	r0, r6
 801e4c4:	f001 fcb6 	bl	801fe34 <__malloc_unlock>
 801e4c8:	f104 000b 	add.w	r0, r4, #11
 801e4cc:	1d23      	adds	r3, r4, #4
 801e4ce:	f020 0007 	bic.w	r0, r0, #7
 801e4d2:	1ac2      	subs	r2, r0, r3
 801e4d4:	d0cc      	beq.n	801e470 <_malloc_r+0x20>
 801e4d6:	1a1b      	subs	r3, r3, r0
 801e4d8:	50a3      	str	r3, [r4, r2]
 801e4da:	e7c9      	b.n	801e470 <_malloc_r+0x20>
 801e4dc:	4622      	mov	r2, r4
 801e4de:	6864      	ldr	r4, [r4, #4]
 801e4e0:	e7cc      	b.n	801e47c <_malloc_r+0x2c>
 801e4e2:	1cc4      	adds	r4, r0, #3
 801e4e4:	f024 0403 	bic.w	r4, r4, #3
 801e4e8:	42a0      	cmp	r0, r4
 801e4ea:	d0e3      	beq.n	801e4b4 <_malloc_r+0x64>
 801e4ec:	1a21      	subs	r1, r4, r0
 801e4ee:	4630      	mov	r0, r6
 801e4f0:	f000 f8a6 	bl	801e640 <_sbrk_r>
 801e4f4:	3001      	adds	r0, #1
 801e4f6:	d1dd      	bne.n	801e4b4 <_malloc_r+0x64>
 801e4f8:	e7cf      	b.n	801e49a <_malloc_r+0x4a>
 801e4fa:	bf00      	nop
 801e4fc:	20000d60 	.word	0x20000d60
 801e500:	20000d64 	.word	0x20000d64

0801e504 <_open_r>:
 801e504:	b538      	push	{r3, r4, r5, lr}
 801e506:	4d07      	ldr	r5, [pc, #28]	; (801e524 <_open_r+0x20>)
 801e508:	4604      	mov	r4, r0
 801e50a:	4608      	mov	r0, r1
 801e50c:	4611      	mov	r1, r2
 801e50e:	2200      	movs	r2, #0
 801e510:	602a      	str	r2, [r5, #0]
 801e512:	461a      	mov	r2, r3
 801e514:	f7e2 fcac 	bl	8000e70 <_open>
 801e518:	1c43      	adds	r3, r0, #1
 801e51a:	d102      	bne.n	801e522 <_open_r+0x1e>
 801e51c:	682b      	ldr	r3, [r5, #0]
 801e51e:	b103      	cbz	r3, 801e522 <_open_r+0x1e>
 801e520:	6023      	str	r3, [r4, #0]
 801e522:	bd38      	pop	{r3, r4, r5, pc}
 801e524:	20000e2c 	.word	0x20000e2c

0801e528 <putchar>:
 801e528:	4b09      	ldr	r3, [pc, #36]	; (801e550 <putchar+0x28>)
 801e52a:	b513      	push	{r0, r1, r4, lr}
 801e52c:	681c      	ldr	r4, [r3, #0]
 801e52e:	4601      	mov	r1, r0
 801e530:	b134      	cbz	r4, 801e540 <putchar+0x18>
 801e532:	69a3      	ldr	r3, [r4, #24]
 801e534:	b923      	cbnz	r3, 801e540 <putchar+0x18>
 801e536:	9001      	str	r0, [sp, #4]
 801e538:	4620      	mov	r0, r4
 801e53a:	f7ff fae9 	bl	801db10 <__sinit>
 801e53e:	9901      	ldr	r1, [sp, #4]
 801e540:	68a2      	ldr	r2, [r4, #8]
 801e542:	4620      	mov	r0, r4
 801e544:	b002      	add	sp, #8
 801e546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e54a:	f002 b8e9 	b.w	8020720 <_putc_r>
 801e54e:	bf00      	nop
 801e550:	20000104 	.word	0x20000104

0801e554 <srand>:
 801e554:	b538      	push	{r3, r4, r5, lr}
 801e556:	4b10      	ldr	r3, [pc, #64]	; (801e598 <srand+0x44>)
 801e558:	681d      	ldr	r5, [r3, #0]
 801e55a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801e55c:	4604      	mov	r4, r0
 801e55e:	b9b3      	cbnz	r3, 801e58e <srand+0x3a>
 801e560:	2018      	movs	r0, #24
 801e562:	f7ff feef 	bl	801e344 <malloc>
 801e566:	4602      	mov	r2, r0
 801e568:	63a8      	str	r0, [r5, #56]	; 0x38
 801e56a:	b920      	cbnz	r0, 801e576 <srand+0x22>
 801e56c:	4b0b      	ldr	r3, [pc, #44]	; (801e59c <srand+0x48>)
 801e56e:	480c      	ldr	r0, [pc, #48]	; (801e5a0 <srand+0x4c>)
 801e570:	2142      	movs	r1, #66	; 0x42
 801e572:	f001 faa3 	bl	801fabc <__assert_func>
 801e576:	490b      	ldr	r1, [pc, #44]	; (801e5a4 <srand+0x50>)
 801e578:	4b0b      	ldr	r3, [pc, #44]	; (801e5a8 <srand+0x54>)
 801e57a:	e9c0 1300 	strd	r1, r3, [r0]
 801e57e:	4b0b      	ldr	r3, [pc, #44]	; (801e5ac <srand+0x58>)
 801e580:	6083      	str	r3, [r0, #8]
 801e582:	230b      	movs	r3, #11
 801e584:	8183      	strh	r3, [r0, #12]
 801e586:	2100      	movs	r1, #0
 801e588:	2001      	movs	r0, #1
 801e58a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e58e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801e590:	2200      	movs	r2, #0
 801e592:	611c      	str	r4, [r3, #16]
 801e594:	615a      	str	r2, [r3, #20]
 801e596:	bd38      	pop	{r3, r4, r5, pc}
 801e598:	20000104 	.word	0x20000104
 801e59c:	08026530 	.word	0x08026530
 801e5a0:	08026608 	.word	0x08026608
 801e5a4:	abcd330e 	.word	0xabcd330e
 801e5a8:	e66d1234 	.word	0xe66d1234
 801e5ac:	0005deec 	.word	0x0005deec

0801e5b0 <rand>:
 801e5b0:	4b17      	ldr	r3, [pc, #92]	; (801e610 <rand+0x60>)
 801e5b2:	b510      	push	{r4, lr}
 801e5b4:	681c      	ldr	r4, [r3, #0]
 801e5b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e5b8:	b9b3      	cbnz	r3, 801e5e8 <rand+0x38>
 801e5ba:	2018      	movs	r0, #24
 801e5bc:	f7ff fec2 	bl	801e344 <malloc>
 801e5c0:	63a0      	str	r0, [r4, #56]	; 0x38
 801e5c2:	b928      	cbnz	r0, 801e5d0 <rand+0x20>
 801e5c4:	4602      	mov	r2, r0
 801e5c6:	4b13      	ldr	r3, [pc, #76]	; (801e614 <rand+0x64>)
 801e5c8:	4813      	ldr	r0, [pc, #76]	; (801e618 <rand+0x68>)
 801e5ca:	214e      	movs	r1, #78	; 0x4e
 801e5cc:	f001 fa76 	bl	801fabc <__assert_func>
 801e5d0:	4a12      	ldr	r2, [pc, #72]	; (801e61c <rand+0x6c>)
 801e5d2:	4b13      	ldr	r3, [pc, #76]	; (801e620 <rand+0x70>)
 801e5d4:	e9c0 2300 	strd	r2, r3, [r0]
 801e5d8:	4b12      	ldr	r3, [pc, #72]	; (801e624 <rand+0x74>)
 801e5da:	6083      	str	r3, [r0, #8]
 801e5dc:	230b      	movs	r3, #11
 801e5de:	8183      	strh	r3, [r0, #12]
 801e5e0:	2201      	movs	r2, #1
 801e5e2:	2300      	movs	r3, #0
 801e5e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801e5e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801e5ea:	480f      	ldr	r0, [pc, #60]	; (801e628 <rand+0x78>)
 801e5ec:	690a      	ldr	r2, [r1, #16]
 801e5ee:	694b      	ldr	r3, [r1, #20]
 801e5f0:	4c0e      	ldr	r4, [pc, #56]	; (801e62c <rand+0x7c>)
 801e5f2:	4350      	muls	r0, r2
 801e5f4:	fb04 0003 	mla	r0, r4, r3, r0
 801e5f8:	fba2 3404 	umull	r3, r4, r2, r4
 801e5fc:	1c5a      	adds	r2, r3, #1
 801e5fe:	4404      	add	r4, r0
 801e600:	f144 0000 	adc.w	r0, r4, #0
 801e604:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801e608:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e60c:	bd10      	pop	{r4, pc}
 801e60e:	bf00      	nop
 801e610:	20000104 	.word	0x20000104
 801e614:	08026530 	.word	0x08026530
 801e618:	08026608 	.word	0x08026608
 801e61c:	abcd330e 	.word	0xabcd330e
 801e620:	e66d1234 	.word	0xe66d1234
 801e624:	0005deec 	.word	0x0005deec
 801e628:	5851f42d 	.word	0x5851f42d
 801e62c:	4c957f2d 	.word	0x4c957f2d

0801e630 <realloc>:
 801e630:	4b02      	ldr	r3, [pc, #8]	; (801e63c <realloc+0xc>)
 801e632:	460a      	mov	r2, r1
 801e634:	4601      	mov	r1, r0
 801e636:	6818      	ldr	r0, [r3, #0]
 801e638:	f001 bc02 	b.w	801fe40 <_realloc_r>
 801e63c:	20000104 	.word	0x20000104

0801e640 <_sbrk_r>:
 801e640:	b538      	push	{r3, r4, r5, lr}
 801e642:	4d06      	ldr	r5, [pc, #24]	; (801e65c <_sbrk_r+0x1c>)
 801e644:	2300      	movs	r3, #0
 801e646:	4604      	mov	r4, r0
 801e648:	4608      	mov	r0, r1
 801e64a:	602b      	str	r3, [r5, #0]
 801e64c:	f7e2 fc1e 	bl	8000e8c <_sbrk>
 801e650:	1c43      	adds	r3, r0, #1
 801e652:	d102      	bne.n	801e65a <_sbrk_r+0x1a>
 801e654:	682b      	ldr	r3, [r5, #0]
 801e656:	b103      	cbz	r3, 801e65a <_sbrk_r+0x1a>
 801e658:	6023      	str	r3, [r4, #0]
 801e65a:	bd38      	pop	{r3, r4, r5, pc}
 801e65c:	20000e2c 	.word	0x20000e2c

0801e660 <_raise_r>:
 801e660:	291f      	cmp	r1, #31
 801e662:	b538      	push	{r3, r4, r5, lr}
 801e664:	4604      	mov	r4, r0
 801e666:	460d      	mov	r5, r1
 801e668:	d904      	bls.n	801e674 <_raise_r+0x14>
 801e66a:	2316      	movs	r3, #22
 801e66c:	6003      	str	r3, [r0, #0]
 801e66e:	f04f 30ff 	mov.w	r0, #4294967295
 801e672:	bd38      	pop	{r3, r4, r5, pc}
 801e674:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e676:	b112      	cbz	r2, 801e67e <_raise_r+0x1e>
 801e678:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e67c:	b94b      	cbnz	r3, 801e692 <_raise_r+0x32>
 801e67e:	4620      	mov	r0, r4
 801e680:	f000 f830 	bl	801e6e4 <_getpid_r>
 801e684:	462a      	mov	r2, r5
 801e686:	4601      	mov	r1, r0
 801e688:	4620      	mov	r0, r4
 801e68a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e68e:	f000 b817 	b.w	801e6c0 <_kill_r>
 801e692:	2b01      	cmp	r3, #1
 801e694:	d00a      	beq.n	801e6ac <_raise_r+0x4c>
 801e696:	1c59      	adds	r1, r3, #1
 801e698:	d103      	bne.n	801e6a2 <_raise_r+0x42>
 801e69a:	2316      	movs	r3, #22
 801e69c:	6003      	str	r3, [r0, #0]
 801e69e:	2001      	movs	r0, #1
 801e6a0:	e7e7      	b.n	801e672 <_raise_r+0x12>
 801e6a2:	2400      	movs	r4, #0
 801e6a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e6a8:	4628      	mov	r0, r5
 801e6aa:	4798      	blx	r3
 801e6ac:	2000      	movs	r0, #0
 801e6ae:	e7e0      	b.n	801e672 <_raise_r+0x12>

0801e6b0 <raise>:
 801e6b0:	4b02      	ldr	r3, [pc, #8]	; (801e6bc <raise+0xc>)
 801e6b2:	4601      	mov	r1, r0
 801e6b4:	6818      	ldr	r0, [r3, #0]
 801e6b6:	f7ff bfd3 	b.w	801e660 <_raise_r>
 801e6ba:	bf00      	nop
 801e6bc:	20000104 	.word	0x20000104

0801e6c0 <_kill_r>:
 801e6c0:	b538      	push	{r3, r4, r5, lr}
 801e6c2:	4d07      	ldr	r5, [pc, #28]	; (801e6e0 <_kill_r+0x20>)
 801e6c4:	2300      	movs	r3, #0
 801e6c6:	4604      	mov	r4, r0
 801e6c8:	4608      	mov	r0, r1
 801e6ca:	4611      	mov	r1, r2
 801e6cc:	602b      	str	r3, [r5, #0]
 801e6ce:	f7e2 fb48 	bl	8000d62 <_kill>
 801e6d2:	1c43      	adds	r3, r0, #1
 801e6d4:	d102      	bne.n	801e6dc <_kill_r+0x1c>
 801e6d6:	682b      	ldr	r3, [r5, #0]
 801e6d8:	b103      	cbz	r3, 801e6dc <_kill_r+0x1c>
 801e6da:	6023      	str	r3, [r4, #0]
 801e6dc:	bd38      	pop	{r3, r4, r5, pc}
 801e6de:	bf00      	nop
 801e6e0:	20000e2c 	.word	0x20000e2c

0801e6e4 <_getpid_r>:
 801e6e4:	f7e2 bb35 	b.w	8000d52 <_getpid>

0801e6e8 <__sread>:
 801e6e8:	b510      	push	{r4, lr}
 801e6ea:	460c      	mov	r4, r1
 801e6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e6f0:	f002 f85e 	bl	80207b0 <_read_r>
 801e6f4:	2800      	cmp	r0, #0
 801e6f6:	bfab      	itete	ge
 801e6f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e6fa:	89a3      	ldrhlt	r3, [r4, #12]
 801e6fc:	181b      	addge	r3, r3, r0
 801e6fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e702:	bfac      	ite	ge
 801e704:	6563      	strge	r3, [r4, #84]	; 0x54
 801e706:	81a3      	strhlt	r3, [r4, #12]
 801e708:	bd10      	pop	{r4, pc}

0801e70a <__seofread>:
 801e70a:	2000      	movs	r0, #0
 801e70c:	4770      	bx	lr

0801e70e <__swrite>:
 801e70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e712:	461f      	mov	r7, r3
 801e714:	898b      	ldrh	r3, [r1, #12]
 801e716:	05db      	lsls	r3, r3, #23
 801e718:	4605      	mov	r5, r0
 801e71a:	460c      	mov	r4, r1
 801e71c:	4616      	mov	r6, r2
 801e71e:	d505      	bpl.n	801e72c <__swrite+0x1e>
 801e720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e724:	2302      	movs	r3, #2
 801e726:	2200      	movs	r2, #0
 801e728:	f001 fb5a 	bl	801fde0 <_lseek_r>
 801e72c:	89a3      	ldrh	r3, [r4, #12]
 801e72e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e736:	81a3      	strh	r3, [r4, #12]
 801e738:	4632      	mov	r2, r6
 801e73a:	463b      	mov	r3, r7
 801e73c:	4628      	mov	r0, r5
 801e73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e742:	f001 b8d5 	b.w	801f8f0 <_write_r>

0801e746 <__sseek>:
 801e746:	b510      	push	{r4, lr}
 801e748:	460c      	mov	r4, r1
 801e74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e74e:	f001 fb47 	bl	801fde0 <_lseek_r>
 801e752:	1c43      	adds	r3, r0, #1
 801e754:	89a3      	ldrh	r3, [r4, #12]
 801e756:	bf15      	itete	ne
 801e758:	6560      	strne	r0, [r4, #84]	; 0x54
 801e75a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e75e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e762:	81a3      	strheq	r3, [r4, #12]
 801e764:	bf18      	it	ne
 801e766:	81a3      	strhne	r3, [r4, #12]
 801e768:	bd10      	pop	{r4, pc}

0801e76a <__sclose>:
 801e76a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e76e:	f001 b9c3 	b.w	801faf8 <_close_r>
	...

0801e774 <iso_year_adjust>:
 801e774:	6941      	ldr	r1, [r0, #20]
 801e776:	2900      	cmp	r1, #0
 801e778:	f240 736c 	movw	r3, #1900	; 0x76c
 801e77c:	bfa8      	it	ge
 801e77e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 801e782:	18ca      	adds	r2, r1, r3
 801e784:	078b      	lsls	r3, r1, #30
 801e786:	d105      	bne.n	801e794 <iso_year_adjust+0x20>
 801e788:	2164      	movs	r1, #100	; 0x64
 801e78a:	fb92 f3f1 	sdiv	r3, r2, r1
 801e78e:	fb01 2313 	mls	r3, r1, r3, r2
 801e792:	b9db      	cbnz	r3, 801e7cc <iso_year_adjust+0x58>
 801e794:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801e798:	fb92 f3f1 	sdiv	r3, r2, r1
 801e79c:	fb01 2313 	mls	r3, r1, r3, r2
 801e7a0:	fab3 f383 	clz	r3, r3
 801e7a4:	095b      	lsrs	r3, r3, #5
 801e7a6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801e7aa:	0040      	lsls	r0, r0, #1
 801e7ac:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801e7b0:	4418      	add	r0, r3
 801e7b2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801e7b6:	4298      	cmp	r0, r3
 801e7b8:	d03a      	beq.n	801e830 <iso_year_adjust+0xbc>
 801e7ba:	dc21      	bgt.n	801e800 <iso_year_adjust+0x8c>
 801e7bc:	2801      	cmp	r0, #1
 801e7be:	dc1a      	bgt.n	801e7f6 <iso_year_adjust+0x82>
 801e7c0:	2800      	cmp	r0, #0
 801e7c2:	bfb4      	ite	lt
 801e7c4:	2000      	movlt	r0, #0
 801e7c6:	f04f 30ff 	movge.w	r0, #4294967295
 801e7ca:	4770      	bx	lr
 801e7cc:	2301      	movs	r3, #1
 801e7ce:	e7ea      	b.n	801e7a6 <iso_year_adjust+0x32>
 801e7d0:	2817      	cmp	r0, #23
 801e7d2:	d813      	bhi.n	801e7fc <iso_year_adjust+0x88>
 801e7d4:	e8df f000 	tbb	[pc, r0]
 801e7d8:	0c0c0c0c 	.word	0x0c0c0c0c
 801e7dc:	0c0c1212 	.word	0x0c0c1212
 801e7e0:	12121212 	.word	0x12121212
 801e7e4:	12121212 	.word	0x12121212
 801e7e8:	0c0c1212 	.word	0x0c0c1212
 801e7ec:	0c0c1212 	.word	0x0c0c1212
 801e7f0:	f04f 30ff 	mov.w	r0, #4294967295
 801e7f4:	4770      	bx	lr
 801e7f6:	380a      	subs	r0, #10
 801e7f8:	2817      	cmp	r0, #23
 801e7fa:	d9e9      	bls.n	801e7d0 <iso_year_adjust+0x5c>
 801e7fc:	2000      	movs	r0, #0
 801e7fe:	4770      	bx	lr
 801e800:	f241 63b4 	movw	r3, #5812	; 0x16b4
 801e804:	4298      	cmp	r0, r3
 801e806:	dc06      	bgt.n	801e816 <iso_year_adjust+0xa2>
 801e808:	f241 63b1 	movw	r3, #5809	; 0x16b1
 801e80c:	4298      	cmp	r0, r3
 801e80e:	bfd4      	ite	le
 801e810:	2000      	movle	r0, #0
 801e812:	2001      	movgt	r0, #1
 801e814:	4770      	bx	lr
 801e816:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801e81a:	3802      	subs	r0, #2
 801e81c:	2815      	cmp	r0, #21
 801e81e:	d8ed      	bhi.n	801e7fc <iso_year_adjust+0x88>
 801e820:	2301      	movs	r3, #1
 801e822:	4083      	lsls	r3, r0
 801e824:	4803      	ldr	r0, [pc, #12]	; (801e834 <iso_year_adjust+0xc0>)
 801e826:	4018      	ands	r0, r3
 801e828:	3800      	subs	r0, #0
 801e82a:	bf18      	it	ne
 801e82c:	2001      	movne	r0, #1
 801e82e:	4770      	bx	lr
 801e830:	2001      	movs	r0, #1
 801e832:	4770      	bx	lr
 801e834:	002a001f 	.word	0x002a001f

0801e838 <__strftime>:
 801e838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e83c:	b091      	sub	sp, #68	; 0x44
 801e83e:	461d      	mov	r5, r3
 801e840:	2300      	movs	r3, #0
 801e842:	4681      	mov	r9, r0
 801e844:	4688      	mov	r8, r1
 801e846:	9304      	str	r3, [sp, #16]
 801e848:	461c      	mov	r4, r3
 801e84a:	7813      	ldrb	r3, [r2, #0]
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	f000 84d1 	beq.w	801f1f4 <__strftime+0x9bc>
 801e852:	2b25      	cmp	r3, #37	; 0x25
 801e854:	d11b      	bne.n	801e88e <__strftime+0x56>
 801e856:	7857      	ldrb	r7, [r2, #1]
 801e858:	2f30      	cmp	r7, #48	; 0x30
 801e85a:	d024      	beq.n	801e8a6 <__strftime+0x6e>
 801e85c:	2f2b      	cmp	r7, #43	; 0x2b
 801e85e:	d022      	beq.n	801e8a6 <__strftime+0x6e>
 801e860:	f102 0b01 	add.w	fp, r2, #1
 801e864:	2700      	movs	r7, #0
 801e866:	f89b 3000 	ldrb.w	r3, [fp]
 801e86a:	3b31      	subs	r3, #49	; 0x31
 801e86c:	2b08      	cmp	r3, #8
 801e86e:	d81d      	bhi.n	801e8ac <__strftime+0x74>
 801e870:	4658      	mov	r0, fp
 801e872:	220a      	movs	r2, #10
 801e874:	a908      	add	r1, sp, #32
 801e876:	f000 fd6f 	bl	801f358 <strtoul>
 801e87a:	f8dd b020 	ldr.w	fp, [sp, #32]
 801e87e:	4606      	mov	r6, r0
 801e880:	f89b 3000 	ldrb.w	r3, [fp]
 801e884:	2b45      	cmp	r3, #69	; 0x45
 801e886:	d113      	bne.n	801e8b0 <__strftime+0x78>
 801e888:	f10b 0b01 	add.w	fp, fp, #1
 801e88c:	e012      	b.n	801e8b4 <__strftime+0x7c>
 801e88e:	f108 31ff 	add.w	r1, r8, #4294967295
 801e892:	42a1      	cmp	r1, r4
 801e894:	d802      	bhi.n	801e89c <__strftime+0x64>
 801e896:	2400      	movs	r4, #0
 801e898:	f000 bcb2 	b.w	801f200 <__strftime+0x9c8>
 801e89c:	f809 3004 	strb.w	r3, [r9, r4]
 801e8a0:	3201      	adds	r2, #1
 801e8a2:	3401      	adds	r4, #1
 801e8a4:	e7d1      	b.n	801e84a <__strftime+0x12>
 801e8a6:	f102 0b02 	add.w	fp, r2, #2
 801e8aa:	e7dc      	b.n	801e866 <__strftime+0x2e>
 801e8ac:	2600      	movs	r6, #0
 801e8ae:	e7e7      	b.n	801e880 <__strftime+0x48>
 801e8b0:	2b4f      	cmp	r3, #79	; 0x4f
 801e8b2:	d0e9      	beq.n	801e888 <__strftime+0x50>
 801e8b4:	f89b 0000 	ldrb.w	r0, [fp]
 801e8b8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 801e8bc:	2b55      	cmp	r3, #85	; 0x55
 801e8be:	d8ea      	bhi.n	801e896 <__strftime+0x5e>
 801e8c0:	a201      	add	r2, pc, #4	; (adr r2, 801e8c8 <__strftime+0x90>)
 801e8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e8c6:	bf00      	nop
 801e8c8:	0801f1e7 	.word	0x0801f1e7
 801e8cc:	0801e897 	.word	0x0801e897
 801e8d0:	0801e897 	.word	0x0801e897
 801e8d4:	0801e897 	.word	0x0801e897
 801e8d8:	0801e897 	.word	0x0801e897
 801e8dc:	0801e897 	.word	0x0801e897
 801e8e0:	0801e897 	.word	0x0801e897
 801e8e4:	0801e897 	.word	0x0801e897
 801e8e8:	0801e897 	.word	0x0801e897
 801e8ec:	0801e897 	.word	0x0801e897
 801e8f0:	0801e897 	.word	0x0801e897
 801e8f4:	0801e897 	.word	0x0801e897
 801e8f8:	0801e897 	.word	0x0801e897
 801e8fc:	0801e897 	.word	0x0801e897
 801e900:	0801e897 	.word	0x0801e897
 801e904:	0801e897 	.word	0x0801e897
 801e908:	0801e897 	.word	0x0801e897
 801e90c:	0801e897 	.word	0x0801e897
 801e910:	0801e897 	.word	0x0801e897
 801e914:	0801e897 	.word	0x0801e897
 801e918:	0801e897 	.word	0x0801e897
 801e91c:	0801e897 	.word	0x0801e897
 801e920:	0801e897 	.word	0x0801e897
 801e924:	0801e897 	.word	0x0801e897
 801e928:	0801e897 	.word	0x0801e897
 801e92c:	0801e897 	.word	0x0801e897
 801e930:	0801e897 	.word	0x0801e897
 801e934:	0801e897 	.word	0x0801e897
 801e938:	0801ea5f 	.word	0x0801ea5f
 801e93c:	0801eab9 	.word	0x0801eab9
 801e940:	0801eb2f 	.word	0x0801eb2f
 801e944:	0801ebc9 	.word	0x0801ebc9
 801e948:	0801e897 	.word	0x0801e897
 801e94c:	0801ec15 	.word	0x0801ec15
 801e950:	0801ecf5 	.word	0x0801ecf5
 801e954:	0801edf7 	.word	0x0801edf7
 801e958:	0801ee05 	.word	0x0801ee05
 801e95c:	0801e897 	.word	0x0801e897
 801e960:	0801e897 	.word	0x0801e897
 801e964:	0801e897 	.word	0x0801e897
 801e968:	0801ee35 	.word	0x0801ee35
 801e96c:	0801e897 	.word	0x0801e897
 801e970:	0801e897 	.word	0x0801e897
 801e974:	0801ee4d 	.word	0x0801ee4d
 801e978:	0801e897 	.word	0x0801e897
 801e97c:	0801ee9b 	.word	0x0801ee9b
 801e980:	0801efb1 	.word	0x0801efb1
 801e984:	0801efc3 	.word	0x0801efc3
 801e988:	0801f01b 	.word	0x0801f01b
 801e98c:	0801f02b 	.word	0x0801f02b
 801e990:	0801f0a1 	.word	0x0801f0a1
 801e994:	0801eb27 	.word	0x0801eb27
 801e998:	0801f0d5 	.word	0x0801f0d5
 801e99c:	0801f193 	.word	0x0801f193
 801e9a0:	0801e897 	.word	0x0801e897
 801e9a4:	0801e897 	.word	0x0801e897
 801e9a8:	0801e897 	.word	0x0801e897
 801e9ac:	0801e897 	.word	0x0801e897
 801e9b0:	0801e897 	.word	0x0801e897
 801e9b4:	0801e897 	.word	0x0801e897
 801e9b8:	0801ea21 	.word	0x0801ea21
 801e9bc:	0801ea8d 	.word	0x0801ea8d
 801e9c0:	0801eae7 	.word	0x0801eae7
 801e9c4:	0801eba1 	.word	0x0801eba1
 801e9c8:	0801eba1 	.word	0x0801eba1
 801e9cc:	0801e897 	.word	0x0801e897
 801e9d0:	0801ec5d 	.word	0x0801ec5d
 801e9d4:	0801ea8d 	.word	0x0801ea8d
 801e9d8:	0801e897 	.word	0x0801e897
 801e9dc:	0801ee27 	.word	0x0801ee27
 801e9e0:	0801edf7 	.word	0x0801edf7
 801e9e4:	0801ee05 	.word	0x0801ee05
 801e9e8:	0801ee2f 	.word	0x0801ee2f
 801e9ec:	0801ee39 	.word	0x0801ee39
 801e9f0:	0801e897 	.word	0x0801e897
 801e9f4:	0801ee4d 	.word	0x0801ee4d
 801e9f8:	0801e897 	.word	0x0801e897
 801e9fc:	0801eb17 	.word	0x0801eb17
 801ea00:	0801eeb1 	.word	0x0801eeb1
 801ea04:	0801efb5 	.word	0x0801efb5
 801ea08:	0801effd 	.word	0x0801effd
 801ea0c:	0801e897 	.word	0x0801e897
 801ea10:	0801f091 	.word	0x0801f091
 801ea14:	0801eb1f 	.word	0x0801eb1f
 801ea18:	0801f0b9 	.word	0x0801f0b9
 801ea1c:	0801f125 	.word	0x0801f125
 801ea20:	69ab      	ldr	r3, [r5, #24]
 801ea22:	4aa7      	ldr	r2, [pc, #668]	; (801ecc0 <__strftime+0x488>)
 801ea24:	3318      	adds	r3, #24
 801ea26:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801ea2a:	4630      	mov	r0, r6
 801ea2c:	f7e1 fc06 	bl	800023c <strlen>
 801ea30:	3e01      	subs	r6, #1
 801ea32:	4420      	add	r0, r4
 801ea34:	f108 33ff 	add.w	r3, r8, #4294967295
 801ea38:	42a0      	cmp	r0, r4
 801ea3a:	d107      	bne.n	801ea4c <__strftime+0x214>
 801ea3c:	f89b 3000 	ldrb.w	r3, [fp]
 801ea40:	2b00      	cmp	r3, #0
 801ea42:	f000 83d7 	beq.w	801f1f4 <__strftime+0x9bc>
 801ea46:	f10b 0201 	add.w	r2, fp, #1
 801ea4a:	e6fe      	b.n	801e84a <__strftime+0x12>
 801ea4c:	42a3      	cmp	r3, r4
 801ea4e:	f67f af22 	bls.w	801e896 <__strftime+0x5e>
 801ea52:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801ea56:	f809 2004 	strb.w	r2, [r9, r4]
 801ea5a:	3401      	adds	r4, #1
 801ea5c:	e7ec      	b.n	801ea38 <__strftime+0x200>
 801ea5e:	69aa      	ldr	r2, [r5, #24]
 801ea60:	4b97      	ldr	r3, [pc, #604]	; (801ecc0 <__strftime+0x488>)
 801ea62:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801ea66:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 801ea68:	4630      	mov	r0, r6
 801ea6a:	f7e1 fbe7 	bl	800023c <strlen>
 801ea6e:	3e01      	subs	r6, #1
 801ea70:	4420      	add	r0, r4
 801ea72:	f108 33ff 	add.w	r3, r8, #4294967295
 801ea76:	42a0      	cmp	r0, r4
 801ea78:	d0e0      	beq.n	801ea3c <__strftime+0x204>
 801ea7a:	42a3      	cmp	r3, r4
 801ea7c:	f67f af0b 	bls.w	801e896 <__strftime+0x5e>
 801ea80:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801ea84:	f809 2004 	strb.w	r2, [r9, r4]
 801ea88:	3401      	adds	r4, #1
 801ea8a:	e7f4      	b.n	801ea76 <__strftime+0x23e>
 801ea8c:	4b8c      	ldr	r3, [pc, #560]	; (801ecc0 <__strftime+0x488>)
 801ea8e:	692a      	ldr	r2, [r5, #16]
 801ea90:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ea94:	4630      	mov	r0, r6
 801ea96:	f7e1 fbd1 	bl	800023c <strlen>
 801ea9a:	3e01      	subs	r6, #1
 801ea9c:	4420      	add	r0, r4
 801ea9e:	f108 33ff 	add.w	r3, r8, #4294967295
 801eaa2:	42a0      	cmp	r0, r4
 801eaa4:	d0ca      	beq.n	801ea3c <__strftime+0x204>
 801eaa6:	42a3      	cmp	r3, r4
 801eaa8:	f67f aef5 	bls.w	801e896 <__strftime+0x5e>
 801eaac:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801eab0:	f809 2004 	strb.w	r2, [r9, r4]
 801eab4:	3401      	adds	r4, #1
 801eab6:	e7f4      	b.n	801eaa2 <__strftime+0x26a>
 801eab8:	692b      	ldr	r3, [r5, #16]
 801eaba:	4a81      	ldr	r2, [pc, #516]	; (801ecc0 <__strftime+0x488>)
 801eabc:	330c      	adds	r3, #12
 801eabe:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801eac2:	4630      	mov	r0, r6
 801eac4:	f7e1 fbba 	bl	800023c <strlen>
 801eac8:	3e01      	subs	r6, #1
 801eaca:	4420      	add	r0, r4
 801eacc:	f108 33ff 	add.w	r3, r8, #4294967295
 801ead0:	42a0      	cmp	r0, r4
 801ead2:	d0b3      	beq.n	801ea3c <__strftime+0x204>
 801ead4:	42a3      	cmp	r3, r4
 801ead6:	f67f aede 	bls.w	801e896 <__strftime+0x5e>
 801eada:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801eade:	f809 2004 	strb.w	r2, [r9, r4]
 801eae2:	3401      	adds	r4, #1
 801eae4:	e7f4      	b.n	801ead0 <__strftime+0x298>
 801eae6:	4b76      	ldr	r3, [pc, #472]	; (801ecc0 <__strftime+0x488>)
 801eae8:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801eaec:	4630      	mov	r0, r6
 801eaee:	f7e1 fba5 	bl	800023c <strlen>
 801eaf2:	7833      	ldrb	r3, [r6, #0]
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	d0a1      	beq.n	801ea3c <__strftime+0x204>
 801eaf8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801eafa:	9300      	str	r3, [sp, #0]
 801eafc:	4632      	mov	r2, r6
 801eafe:	462b      	mov	r3, r5
 801eb00:	eba8 0104 	sub.w	r1, r8, r4
 801eb04:	eb09 0004 	add.w	r0, r9, r4
 801eb08:	f7ff fe96 	bl	801e838 <__strftime>
 801eb0c:	2800      	cmp	r0, #0
 801eb0e:	f77f aec2 	ble.w	801e896 <__strftime+0x5e>
 801eb12:	4404      	add	r4, r0
 801eb14:	e792      	b.n	801ea3c <__strftime+0x204>
 801eb16:	4b6a      	ldr	r3, [pc, #424]	; (801ecc0 <__strftime+0x488>)
 801eb18:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 801eb1c:	e7e6      	b.n	801eaec <__strftime+0x2b4>
 801eb1e:	4b68      	ldr	r3, [pc, #416]	; (801ecc0 <__strftime+0x488>)
 801eb20:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 801eb24:	e7e2      	b.n	801eaec <__strftime+0x2b4>
 801eb26:	4b66      	ldr	r3, [pc, #408]	; (801ecc0 <__strftime+0x488>)
 801eb28:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 801eb2c:	e7de      	b.n	801eaec <__strftime+0x2b4>
 801eb2e:	4965      	ldr	r1, [pc, #404]	; (801ecc4 <__strftime+0x48c>)
 801eb30:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801eb34:	458a      	cmp	sl, r1
 801eb36:	bfac      	ite	ge
 801eb38:	2100      	movge	r1, #0
 801eb3a:	2101      	movlt	r1, #1
 801eb3c:	f1ba 0f00 	cmp.w	sl, #0
 801eb40:	db0e      	blt.n	801eb60 <__strftime+0x328>
 801eb42:	2064      	movs	r0, #100	; 0x64
 801eb44:	fb9a f0f0 	sdiv	r0, sl, r0
 801eb48:	3013      	adds	r0, #19
 801eb4a:	b19f      	cbz	r7, 801eb74 <__strftime+0x33c>
 801eb4c:	2863      	cmp	r0, #99	; 0x63
 801eb4e:	dd25      	ble.n	801eb9c <__strftime+0x364>
 801eb50:	4a5d      	ldr	r2, [pc, #372]	; (801ecc8 <__strftime+0x490>)
 801eb52:	4b5e      	ldr	r3, [pc, #376]	; (801eccc <__strftime+0x494>)
 801eb54:	2f2b      	cmp	r7, #43	; 0x2b
 801eb56:	bf14      	ite	ne
 801eb58:	4617      	movne	r7, r2
 801eb5a:	461f      	moveq	r7, r3
 801eb5c:	4a5c      	ldr	r2, [pc, #368]	; (801ecd0 <__strftime+0x498>)
 801eb5e:	e00b      	b.n	801eb78 <__strftime+0x340>
 801eb60:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 801eb64:	9105      	str	r1, [sp, #20]
 801eb66:	f000 ffa5 	bl	801fab4 <abs>
 801eb6a:	2364      	movs	r3, #100	; 0x64
 801eb6c:	9905      	ldr	r1, [sp, #20]
 801eb6e:	fb90 f0f3 	sdiv	r0, r0, r3
 801eb72:	e7ea      	b.n	801eb4a <__strftime+0x312>
 801eb74:	4f54      	ldr	r7, [pc, #336]	; (801ecc8 <__strftime+0x490>)
 801eb76:	4a57      	ldr	r2, [pc, #348]	; (801ecd4 <__strftime+0x49c>)
 801eb78:	4b57      	ldr	r3, [pc, #348]	; (801ecd8 <__strftime+0x4a0>)
 801eb7a:	9001      	str	r0, [sp, #4]
 801eb7c:	2e02      	cmp	r6, #2
 801eb7e:	bf2c      	ite	cs
 801eb80:	ebc1 0606 	rsbcs	r6, r1, r6
 801eb84:	f1c1 0602 	rsbcc	r6, r1, #2
 801eb88:	494e      	ldr	r1, [pc, #312]	; (801ecc4 <__strftime+0x48c>)
 801eb8a:	9600      	str	r6, [sp, #0]
 801eb8c:	458a      	cmp	sl, r1
 801eb8e:	bfa8      	it	ge
 801eb90:	463b      	movge	r3, r7
 801eb92:	eba8 0104 	sub.w	r1, r8, r4
 801eb96:	eb09 0004 	add.w	r0, r9, r4
 801eb9a:	e02a      	b.n	801ebf2 <__strftime+0x3ba>
 801eb9c:	4f4a      	ldr	r7, [pc, #296]	; (801ecc8 <__strftime+0x490>)
 801eb9e:	e7dd      	b.n	801eb5c <__strftime+0x324>
 801eba0:	494e      	ldr	r1, [pc, #312]	; (801ecdc <__strftime+0x4a4>)
 801eba2:	4a4f      	ldr	r2, [pc, #316]	; (801ece0 <__strftime+0x4a8>)
 801eba4:	68eb      	ldr	r3, [r5, #12]
 801eba6:	2864      	cmp	r0, #100	; 0x64
 801eba8:	bf08      	it	eq
 801ebaa:	460a      	moveq	r2, r1
 801ebac:	eba8 0104 	sub.w	r1, r8, r4
 801ebb0:	eb09 0004 	add.w	r0, r9, r4
 801ebb4:	f001 fe0e 	bl	80207d4 <sniprintf>
 801ebb8:	2800      	cmp	r0, #0
 801ebba:	f6ff ae6c 	blt.w	801e896 <__strftime+0x5e>
 801ebbe:	4404      	add	r4, r0
 801ebc0:	45a0      	cmp	r8, r4
 801ebc2:	f63f af3b 	bhi.w	801ea3c <__strftime+0x204>
 801ebc6:	e666      	b.n	801e896 <__strftime+0x5e>
 801ebc8:	6968      	ldr	r0, [r5, #20]
 801ebca:	692b      	ldr	r3, [r5, #16]
 801ebcc:	68ef      	ldr	r7, [r5, #12]
 801ebce:	2800      	cmp	r0, #0
 801ebd0:	eb09 0604 	add.w	r6, r9, r4
 801ebd4:	eba8 0104 	sub.w	r1, r8, r4
 801ebd8:	f103 0301 	add.w	r3, r3, #1
 801ebdc:	db0c      	blt.n	801ebf8 <__strftime+0x3c0>
 801ebde:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801ebe2:	fb90 f2fc 	sdiv	r2, r0, ip
 801ebe6:	fb0c 0212 	mls	r2, ip, r2, r0
 801ebea:	e9cd 7200 	strd	r7, r2, [sp]
 801ebee:	4a3d      	ldr	r2, [pc, #244]	; (801ece4 <__strftime+0x4ac>)
 801ebf0:	4630      	mov	r0, r6
 801ebf2:	f001 fdef 	bl	80207d4 <sniprintf>
 801ebf6:	e7df      	b.n	801ebb8 <__strftime+0x380>
 801ebf8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801ebfc:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801ec00:	f000 ff58 	bl	801fab4 <abs>
 801ec04:	2264      	movs	r2, #100	; 0x64
 801ec06:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 801ec0a:	fb90 fcf2 	sdiv	ip, r0, r2
 801ec0e:	fb0c 0212 	mls	r2, ip, r2, r0
 801ec12:	e7ea      	b.n	801ebea <__strftime+0x3b2>
 801ec14:	2325      	movs	r3, #37	; 0x25
 801ec16:	f88d 3020 	strb.w	r3, [sp, #32]
 801ec1a:	b187      	cbz	r7, 801ec3e <__strftime+0x406>
 801ec1c:	2e06      	cmp	r6, #6
 801ec1e:	bf38      	it	cc
 801ec20:	2606      	movcc	r6, #6
 801ec22:	1fb3      	subs	r3, r6, #6
 801ec24:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 801ec28:	d10c      	bne.n	801ec44 <__strftime+0x40c>
 801ec2a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801ec2e:	492e      	ldr	r1, [pc, #184]	; (801ece8 <__strftime+0x4b0>)
 801ec30:	f001 fe30 	bl	8020894 <strcpy>
 801ec34:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ec36:	9300      	str	r3, [sp, #0]
 801ec38:	aa08      	add	r2, sp, #32
 801ec3a:	462b      	mov	r3, r5
 801ec3c:	e760      	b.n	801eb00 <__strftime+0x2c8>
 801ec3e:	272b      	movs	r7, #43	; 0x2b
 801ec40:	260a      	movs	r6, #10
 801ec42:	e7ee      	b.n	801ec22 <__strftime+0x3ea>
 801ec44:	4a29      	ldr	r2, [pc, #164]	; (801ecec <__strftime+0x4b4>)
 801ec46:	211e      	movs	r1, #30
 801ec48:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801ec4c:	f001 fdc2 	bl	80207d4 <sniprintf>
 801ec50:	2800      	cmp	r0, #0
 801ec52:	ddea      	ble.n	801ec2a <__strftime+0x3f2>
 801ec54:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 801ec58:	4418      	add	r0, r3
 801ec5a:	e7e8      	b.n	801ec2e <__strftime+0x3f6>
 801ec5c:	4628      	mov	r0, r5
 801ec5e:	f7ff fd89 	bl	801e774 <iso_year_adjust>
 801ec62:	4606      	mov	r6, r0
 801ec64:	6968      	ldr	r0, [r5, #20]
 801ec66:	2800      	cmp	r0, #0
 801ec68:	db11      	blt.n	801ec8e <__strftime+0x456>
 801ec6a:	2264      	movs	r2, #100	; 0x64
 801ec6c:	fb90 f3f2 	sdiv	r3, r0, r2
 801ec70:	fb02 0313 	mls	r3, r2, r3, r0
 801ec74:	441e      	add	r6, r3
 801ec76:	2364      	movs	r3, #100	; 0x64
 801ec78:	fb96 f0f3 	sdiv	r0, r6, r3
 801ec7c:	fb03 6610 	mls	r6, r3, r0, r6
 801ec80:	441e      	add	r6, r3
 801ec82:	fbb6 f2f3 	udiv	r2, r6, r3
 801ec86:	fb03 6312 	mls	r3, r3, r2, r6
 801ec8a:	4a14      	ldr	r2, [pc, #80]	; (801ecdc <__strftime+0x4a4>)
 801ec8c:	e78e      	b.n	801ebac <__strftime+0x374>
 801ec8e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801ec92:	f000 ff0f 	bl	801fab4 <abs>
 801ec96:	2364      	movs	r3, #100	; 0x64
 801ec98:	2e00      	cmp	r6, #0
 801ec9a:	fb90 f2f3 	sdiv	r2, r0, r3
 801ec9e:	fb02 0313 	mls	r3, r2, r3, r0
 801eca2:	da05      	bge.n	801ecb0 <__strftime+0x478>
 801eca4:	6969      	ldr	r1, [r5, #20]
 801eca6:	4a12      	ldr	r2, [pc, #72]	; (801ecf0 <__strftime+0x4b8>)
 801eca8:	4291      	cmp	r1, r2
 801ecaa:	bfb8      	it	lt
 801ecac:	2601      	movlt	r6, #1
 801ecae:	e7e1      	b.n	801ec74 <__strftime+0x43c>
 801ecb0:	d0e0      	beq.n	801ec74 <__strftime+0x43c>
 801ecb2:	6969      	ldr	r1, [r5, #20]
 801ecb4:	4a03      	ldr	r2, [pc, #12]	; (801ecc4 <__strftime+0x48c>)
 801ecb6:	4291      	cmp	r1, r2
 801ecb8:	bfb8      	it	lt
 801ecba:	f04f 36ff 	movlt.w	r6, #4294967295
 801ecbe:	e7d9      	b.n	801ec74 <__strftime+0x43c>
 801ecc0:	080267ec 	.word	0x080267ec
 801ecc4:	fffff894 	.word	0xfffff894
 801ecc8:	0802695f 	.word	0x0802695f
 801eccc:	08026676 	.word	0x08026676
 801ecd0:	0802666e 	.word	0x0802666e
 801ecd4:	08026667 	.word	0x08026667
 801ecd8:	08026a9f 	.word	0x08026a9f
 801ecdc:	08026686 	.word	0x08026686
 801ece0:	08026678 	.word	0x08026678
 801ece4:	0802667c 	.word	0x0802667c
 801ece8:	0802668f 	.word	0x0802668f
 801ecec:	0802668b 	.word	0x0802668b
 801ecf0:	fffff895 	.word	0xfffff895
 801ecf4:	4bb6      	ldr	r3, [pc, #728]	; (801efd0 <__strftime+0x798>)
 801ecf6:	6969      	ldr	r1, [r5, #20]
 801ecf8:	4299      	cmp	r1, r3
 801ecfa:	bfac      	ite	ge
 801ecfc:	2300      	movge	r3, #0
 801ecfe:	2301      	movlt	r3, #1
 801ed00:	4628      	mov	r0, r5
 801ed02:	e9cd 3105 	strd	r3, r1, [sp, #20]
 801ed06:	f7ff fd35 	bl	801e774 <iso_year_adjust>
 801ed0a:	9906      	ldr	r1, [sp, #24]
 801ed0c:	2900      	cmp	r1, #0
 801ed0e:	4682      	mov	sl, r0
 801ed10:	db27      	blt.n	801ed62 <__strftime+0x52a>
 801ed12:	2264      	movs	r2, #100	; 0x64
 801ed14:	fb91 f2f2 	sdiv	r2, r1, r2
 801ed18:	3213      	adds	r2, #19
 801ed1a:	6968      	ldr	r0, [r5, #20]
 801ed1c:	2800      	cmp	r0, #0
 801ed1e:	db2b      	blt.n	801ed78 <__strftime+0x540>
 801ed20:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801ed24:	fb90 fefc 	sdiv	lr, r0, ip
 801ed28:	fb0c 001e 	mls	r0, ip, lr, r0
 801ed2c:	f1ba 0f00 	cmp.w	sl, #0
 801ed30:	da31      	bge.n	801ed96 <__strftime+0x55e>
 801ed32:	6969      	ldr	r1, [r5, #20]
 801ed34:	4ba7      	ldr	r3, [pc, #668]	; (801efd4 <__strftime+0x79c>)
 801ed36:	4299      	cmp	r1, r3
 801ed38:	db38      	blt.n	801edac <__strftime+0x574>
 801ed3a:	eb0a 0300 	add.w	r3, sl, r0
 801ed3e:	1c59      	adds	r1, r3, #1
 801ed40:	d139      	bne.n	801edb6 <__strftime+0x57e>
 801ed42:	3a01      	subs	r2, #1
 801ed44:	2363      	movs	r3, #99	; 0x63
 801ed46:	2064      	movs	r0, #100	; 0x64
 801ed48:	fb00 3202 	mla	r2, r0, r2, r3
 801ed4c:	9b05      	ldr	r3, [sp, #20]
 801ed4e:	2b00      	cmp	r3, #0
 801ed50:	d036      	beq.n	801edc0 <__strftime+0x588>
 801ed52:	232d      	movs	r3, #45	; 0x2d
 801ed54:	f88d 3020 	strb.w	r3, [sp, #32]
 801ed58:	b106      	cbz	r6, 801ed5c <__strftime+0x524>
 801ed5a:	3e01      	subs	r6, #1
 801ed5c:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801ed60:	e038      	b.n	801edd4 <__strftime+0x59c>
 801ed62:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801ed66:	9106      	str	r1, [sp, #24]
 801ed68:	f000 fea4 	bl	801fab4 <abs>
 801ed6c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801ed70:	9906      	ldr	r1, [sp, #24]
 801ed72:	fb90 f2fc 	sdiv	r2, r0, ip
 801ed76:	e7d0      	b.n	801ed1a <__strftime+0x4e2>
 801ed78:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801ed7c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801ed80:	f000 fe98 	bl	801fab4 <abs>
 801ed84:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801ed88:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801ed8c:	fb90 fefc 	sdiv	lr, r0, ip
 801ed90:	fb0e 001c 	mls	r0, lr, ip, r0
 801ed94:	e7ca      	b.n	801ed2c <__strftime+0x4f4>
 801ed96:	d0d0      	beq.n	801ed3a <__strftime+0x502>
 801ed98:	4b8d      	ldr	r3, [pc, #564]	; (801efd0 <__strftime+0x798>)
 801ed9a:	4299      	cmp	r1, r3
 801ed9c:	bfb4      	ite	lt
 801ed9e:	2301      	movlt	r3, #1
 801eda0:	2300      	movge	r3, #0
 801eda2:	9305      	str	r3, [sp, #20]
 801eda4:	bfb8      	it	lt
 801eda6:	f04f 3aff 	movlt.w	sl, #4294967295
 801edaa:	e7c6      	b.n	801ed3a <__strftime+0x502>
 801edac:	f04f 0a01 	mov.w	sl, #1
 801edb0:	f8cd a014 	str.w	sl, [sp, #20]
 801edb4:	e7c1      	b.n	801ed3a <__strftime+0x502>
 801edb6:	2b64      	cmp	r3, #100	; 0x64
 801edb8:	bf04      	itt	eq
 801edba:	3201      	addeq	r2, #1
 801edbc:	2300      	moveq	r3, #0
 801edbe:	e7c2      	b.n	801ed46 <__strftime+0x50e>
 801edc0:	2f2b      	cmp	r7, #43	; 0x2b
 801edc2:	d106      	bne.n	801edd2 <__strftime+0x59a>
 801edc4:	f242 730f 	movw	r3, #9999	; 0x270f
 801edc8:	429a      	cmp	r2, r3
 801edca:	d902      	bls.n	801edd2 <__strftime+0x59a>
 801edcc:	f88d 7020 	strb.w	r7, [sp, #32]
 801edd0:	e7c2      	b.n	801ed58 <__strftime+0x520>
 801edd2:	ab08      	add	r3, sp, #32
 801edd4:	2125      	movs	r1, #37	; 0x25
 801edd6:	7019      	strb	r1, [r3, #0]
 801edd8:	b94f      	cbnz	r7, 801edee <__strftime+0x5b6>
 801edda:	1c58      	adds	r0, r3, #1
 801eddc:	497e      	ldr	r1, [pc, #504]	; (801efd8 <__strftime+0x7a0>)
 801edde:	9205      	str	r2, [sp, #20]
 801ede0:	f001 fd58 	bl	8020894 <strcpy>
 801ede4:	9a05      	ldr	r2, [sp, #20]
 801ede6:	9200      	str	r2, [sp, #0]
 801ede8:	4633      	mov	r3, r6
 801edea:	aa08      	add	r2, sp, #32
 801edec:	e059      	b.n	801eea2 <__strftime+0x66a>
 801edee:	2130      	movs	r1, #48	; 0x30
 801edf0:	1c98      	adds	r0, r3, #2
 801edf2:	7059      	strb	r1, [r3, #1]
 801edf4:	e7f2      	b.n	801eddc <__strftime+0x5a4>
 801edf6:	4979      	ldr	r1, [pc, #484]	; (801efdc <__strftime+0x7a4>)
 801edf8:	4a79      	ldr	r2, [pc, #484]	; (801efe0 <__strftime+0x7a8>)
 801edfa:	68ab      	ldr	r3, [r5, #8]
 801edfc:	286b      	cmp	r0, #107	; 0x6b
 801edfe:	bf08      	it	eq
 801ee00:	460a      	moveq	r2, r1
 801ee02:	e6d3      	b.n	801ebac <__strftime+0x374>
 801ee04:	68ab      	ldr	r3, [r5, #8]
 801ee06:	b163      	cbz	r3, 801ee22 <__strftime+0x5ea>
 801ee08:	2b0c      	cmp	r3, #12
 801ee0a:	d004      	beq.n	801ee16 <__strftime+0x5de>
 801ee0c:	210c      	movs	r1, #12
 801ee0e:	fb93 f2f1 	sdiv	r2, r3, r1
 801ee12:	fb01 3312 	mls	r3, r1, r2, r3
 801ee16:	4972      	ldr	r1, [pc, #456]	; (801efe0 <__strftime+0x7a8>)
 801ee18:	4a70      	ldr	r2, [pc, #448]	; (801efdc <__strftime+0x7a4>)
 801ee1a:	2849      	cmp	r0, #73	; 0x49
 801ee1c:	bf08      	it	eq
 801ee1e:	460a      	moveq	r2, r1
 801ee20:	e6c4      	b.n	801ebac <__strftime+0x374>
 801ee22:	230c      	movs	r3, #12
 801ee24:	e7f7      	b.n	801ee16 <__strftime+0x5de>
 801ee26:	69eb      	ldr	r3, [r5, #28]
 801ee28:	4a6e      	ldr	r2, [pc, #440]	; (801efe4 <__strftime+0x7ac>)
 801ee2a:	3301      	adds	r3, #1
 801ee2c:	e6be      	b.n	801ebac <__strftime+0x374>
 801ee2e:	692b      	ldr	r3, [r5, #16]
 801ee30:	3301      	adds	r3, #1
 801ee32:	e72a      	b.n	801ec8a <__strftime+0x452>
 801ee34:	686b      	ldr	r3, [r5, #4]
 801ee36:	e728      	b.n	801ec8a <__strftime+0x452>
 801ee38:	f108 33ff 	add.w	r3, r8, #4294967295
 801ee3c:	42a3      	cmp	r3, r4
 801ee3e:	f67f ad2a 	bls.w	801e896 <__strftime+0x5e>
 801ee42:	230a      	movs	r3, #10
 801ee44:	f809 3004 	strb.w	r3, [r9, r4]
 801ee48:	3401      	adds	r4, #1
 801ee4a:	e5f7      	b.n	801ea3c <__strftime+0x204>
 801ee4c:	68ab      	ldr	r3, [r5, #8]
 801ee4e:	2b0b      	cmp	r3, #11
 801ee50:	bfcc      	ite	gt
 801ee52:	22a4      	movgt	r2, #164	; 0xa4
 801ee54:	22a0      	movle	r2, #160	; 0xa0
 801ee56:	4b64      	ldr	r3, [pc, #400]	; (801efe8 <__strftime+0x7b0>)
 801ee58:	4413      	add	r3, r2
 801ee5a:	685e      	ldr	r6, [r3, #4]
 801ee5c:	4630      	mov	r0, r6
 801ee5e:	f7e1 f9ed 	bl	800023c <strlen>
 801ee62:	1e72      	subs	r2, r6, #1
 801ee64:	4420      	add	r0, r4
 801ee66:	f108 36ff 	add.w	r6, r8, #4294967295
 801ee6a:	42a0      	cmp	r0, r4
 801ee6c:	f43f ade6 	beq.w	801ea3c <__strftime+0x204>
 801ee70:	42a6      	cmp	r6, r4
 801ee72:	f67f ad10 	bls.w	801e896 <__strftime+0x5e>
 801ee76:	f89b 1000 	ldrb.w	r1, [fp]
 801ee7a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801ee7e:	2950      	cmp	r1, #80	; 0x50
 801ee80:	d107      	bne.n	801ee92 <__strftime+0x65a>
 801ee82:	495a      	ldr	r1, [pc, #360]	; (801efec <__strftime+0x7b4>)
 801ee84:	5cc9      	ldrb	r1, [r1, r3]
 801ee86:	f001 0103 	and.w	r1, r1, #3
 801ee8a:	2901      	cmp	r1, #1
 801ee8c:	bf08      	it	eq
 801ee8e:	3320      	addeq	r3, #32
 801ee90:	b2db      	uxtb	r3, r3
 801ee92:	f809 3004 	strb.w	r3, [r9, r4]
 801ee96:	3401      	adds	r4, #1
 801ee98:	e7e7      	b.n	801ee6a <__strftime+0x632>
 801ee9a:	686b      	ldr	r3, [r5, #4]
 801ee9c:	9300      	str	r3, [sp, #0]
 801ee9e:	4a54      	ldr	r2, [pc, #336]	; (801eff0 <__strftime+0x7b8>)
 801eea0:	68ab      	ldr	r3, [r5, #8]
 801eea2:	eba8 0104 	sub.w	r1, r8, r4
 801eea6:	eb09 0004 	add.w	r0, r9, r4
 801eeaa:	f001 fc93 	bl	80207d4 <sniprintf>
 801eeae:	e683      	b.n	801ebb8 <__strftime+0x380>
 801eeb0:	6a2b      	ldr	r3, [r5, #32]
 801eeb2:	2b00      	cmp	r3, #0
 801eeb4:	db79      	blt.n	801efaa <__strftime+0x772>
 801eeb6:	f000 fb01 	bl	801f4bc <__tz_lock>
 801eeba:	9b04      	ldr	r3, [sp, #16]
 801eebc:	b90b      	cbnz	r3, 801eec2 <__strftime+0x68a>
 801eebe:	f000 fb09 	bl	801f4d4 <_tzset_unlocked>
 801eec2:	f000 fec5 	bl	801fc50 <__gettzinfo>
 801eec6:	6a2b      	ldr	r3, [r5, #32]
 801eec8:	2b00      	cmp	r3, #0
 801eeca:	bfcc      	ite	gt
 801eecc:	2350      	movgt	r3, #80	; 0x50
 801eece:	2328      	movle	r3, #40	; 0x28
 801eed0:	58c3      	ldr	r3, [r0, r3]
 801eed2:	f1c3 0a00 	rsb	sl, r3, #0
 801eed6:	f000 faf7 	bl	801f4c8 <__tz_unlock>
 801eeda:	2301      	movs	r3, #1
 801eedc:	9304      	str	r3, [sp, #16]
 801eede:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801eee2:	4662      	mov	r2, ip
 801eee4:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 801eee8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801eeec:	9602      	str	r6, [sp, #8]
 801eeee:	f143 36ff 	adc.w	r6, r3, #4294967295
 801eef2:	9603      	str	r6, [sp, #12]
 801eef4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801eef8:	2e00      	cmp	r6, #0
 801eefa:	f177 0600 	sbcs.w	r6, r7, #0
 801eefe:	eba8 0104 	sub.w	r1, r8, r4
 801ef02:	eb09 0004 	add.w	r0, r9, r4
 801ef06:	da05      	bge.n	801ef14 <__strftime+0x6dc>
 801ef08:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 801ef0c:	f143 33ff 	adc.w	r3, r3, #4294967295
 801ef10:	9602      	str	r6, [sp, #8]
 801ef12:	9303      	str	r3, [sp, #12]
 801ef14:	9b02      	ldr	r3, [sp, #8]
 801ef16:	089e      	lsrs	r6, r3, #2
 801ef18:	9b03      	ldr	r3, [sp, #12]
 801ef1a:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 801ef1e:	f10c 32ff 	add.w	r2, ip, #4294967295
 801ef22:	109f      	asrs	r7, r3, #2
 801ef24:	2364      	movs	r3, #100	; 0x64
 801ef26:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef2a:	1af6      	subs	r6, r6, r3
 801ef2c:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 801ef30:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 801ef34:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801ef38:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef3c:	18f6      	adds	r6, r6, r3
 801ef3e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801ef42:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 801ef46:	f240 136d 	movw	r3, #365	; 0x16d
 801ef4a:	fb03 fc0c 	mul.w	ip, r3, ip
 801ef4e:	69eb      	ldr	r3, [r5, #28]
 801ef50:	eb16 060c 	adds.w	r6, r6, ip
 801ef54:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 801ef58:	18f6      	adds	r6, r6, r3
 801ef5a:	f04f 0c18 	mov.w	ip, #24
 801ef5e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801ef62:	fba6 230c 	umull	r2, r3, r6, ip
 801ef66:	68ae      	ldr	r6, [r5, #8]
 801ef68:	fb0c 3307 	mla	r3, ip, r7, r3
 801ef6c:	1992      	adds	r2, r2, r6
 801ef6e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 801ef72:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801ef76:	fba2 670c 	umull	r6, r7, r2, ip
 801ef7a:	fb0c 7703 	mla	r7, ip, r3, r7
 801ef7e:	686b      	ldr	r3, [r5, #4]
 801ef80:	18f6      	adds	r6, r6, r3
 801ef82:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801ef86:	fba6 230c 	umull	r2, r3, r6, ip
 801ef8a:	682e      	ldr	r6, [r5, #0]
 801ef8c:	fb0c 3307 	mla	r3, ip, r7, r3
 801ef90:	1992      	adds	r2, r2, r6
 801ef92:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801ef96:	ebb2 020a 	subs.w	r2, r2, sl
 801ef9a:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 801ef9e:	e9cd 2300 	strd	r2, r3, [sp]
 801efa2:	4a14      	ldr	r2, [pc, #80]	; (801eff4 <__strftime+0x7bc>)
 801efa4:	f001 fc16 	bl	80207d4 <sniprintf>
 801efa8:	e606      	b.n	801ebb8 <__strftime+0x380>
 801efaa:	f04f 0a00 	mov.w	sl, #0
 801efae:	e796      	b.n	801eede <__strftime+0x6a6>
 801efb0:	682b      	ldr	r3, [r5, #0]
 801efb2:	e66a      	b.n	801ec8a <__strftime+0x452>
 801efb4:	f108 33ff 	add.w	r3, r8, #4294967295
 801efb8:	42a3      	cmp	r3, r4
 801efba:	f67f ac6c 	bls.w	801e896 <__strftime+0x5e>
 801efbe:	2309      	movs	r3, #9
 801efc0:	e740      	b.n	801ee44 <__strftime+0x60c>
 801efc2:	682b      	ldr	r3, [r5, #0]
 801efc4:	9301      	str	r3, [sp, #4]
 801efc6:	686b      	ldr	r3, [r5, #4]
 801efc8:	9300      	str	r3, [sp, #0]
 801efca:	4a0b      	ldr	r2, [pc, #44]	; (801eff8 <__strftime+0x7c0>)
 801efcc:	68ab      	ldr	r3, [r5, #8]
 801efce:	e5e0      	b.n	801eb92 <__strftime+0x35a>
 801efd0:	fffff894 	.word	0xfffff894
 801efd4:	fffff895 	.word	0xfffff895
 801efd8:	08026697 	.word	0x08026697
 801efdc:	08026678 	.word	0x08026678
 801efe0:	08026686 	.word	0x08026686
 801efe4:	0802669b 	.word	0x0802669b
 801efe8:	080267ec 	.word	0x080267ec
 801efec:	08026961 	.word	0x08026961
 801eff0:	080266aa 	.word	0x080266aa
 801eff4:	080266a0 	.word	0x080266a0
 801eff8:	080266a5 	.word	0x080266a5
 801effc:	f108 33ff 	add.w	r3, r8, #4294967295
 801f000:	42a3      	cmp	r3, r4
 801f002:	f67f ac48 	bls.w	801e896 <__strftime+0x5e>
 801f006:	69ab      	ldr	r3, [r5, #24]
 801f008:	eb09 0204 	add.w	r2, r9, r4
 801f00c:	3401      	adds	r4, #1
 801f00e:	b913      	cbnz	r3, 801f016 <__strftime+0x7de>
 801f010:	2337      	movs	r3, #55	; 0x37
 801f012:	7013      	strb	r3, [r2, #0]
 801f014:	e512      	b.n	801ea3c <__strftime+0x204>
 801f016:	3330      	adds	r3, #48	; 0x30
 801f018:	e7fb      	b.n	801f012 <__strftime+0x7da>
 801f01a:	69eb      	ldr	r3, [r5, #28]
 801f01c:	69aa      	ldr	r2, [r5, #24]
 801f01e:	3307      	adds	r3, #7
 801f020:	1a9b      	subs	r3, r3, r2
 801f022:	2207      	movs	r2, #7
 801f024:	fb93 f3f2 	sdiv	r3, r3, r2
 801f028:	e62f      	b.n	801ec8a <__strftime+0x452>
 801f02a:	4628      	mov	r0, r5
 801f02c:	f7ff fba2 	bl	801e774 <iso_year_adjust>
 801f030:	69aa      	ldr	r2, [r5, #24]
 801f032:	b132      	cbz	r2, 801f042 <__strftime+0x80a>
 801f034:	3a01      	subs	r2, #1
 801f036:	2800      	cmp	r0, #0
 801f038:	dc28      	bgt.n	801f08c <__strftime+0x854>
 801f03a:	69eb      	ldr	r3, [r5, #28]
 801f03c:	d103      	bne.n	801f046 <__strftime+0x80e>
 801f03e:	330a      	adds	r3, #10
 801f040:	e7ee      	b.n	801f020 <__strftime+0x7e8>
 801f042:	2206      	movs	r2, #6
 801f044:	e7f7      	b.n	801f036 <__strftime+0x7fe>
 801f046:	6968      	ldr	r0, [r5, #20]
 801f048:	2800      	cmp	r0, #0
 801f04a:	eba2 0303 	sub.w	r3, r2, r3
 801f04e:	f240 726b 	movw	r2, #1899	; 0x76b
 801f052:	bfa8      	it	ge
 801f054:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 801f058:	4410      	add	r0, r2
 801f05a:	0782      	lsls	r2, r0, #30
 801f05c:	d105      	bne.n	801f06a <__strftime+0x832>
 801f05e:	2264      	movs	r2, #100	; 0x64
 801f060:	fb90 f1f2 	sdiv	r1, r0, r2
 801f064:	fb02 0111 	mls	r1, r2, r1, r0
 801f068:	b971      	cbnz	r1, 801f088 <__strftime+0x850>
 801f06a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801f06e:	fb90 f2f1 	sdiv	r2, r0, r1
 801f072:	fb01 0212 	mls	r2, r1, r2, r0
 801f076:	fab2 f282 	clz	r2, r2
 801f07a:	0952      	lsrs	r2, r2, #5
 801f07c:	1a9a      	subs	r2, r3, r2
 801f07e:	2a05      	cmp	r2, #5
 801f080:	bfb4      	ite	lt
 801f082:	2335      	movlt	r3, #53	; 0x35
 801f084:	2334      	movge	r3, #52	; 0x34
 801f086:	e600      	b.n	801ec8a <__strftime+0x452>
 801f088:	2201      	movs	r2, #1
 801f08a:	e7f7      	b.n	801f07c <__strftime+0x844>
 801f08c:	2301      	movs	r3, #1
 801f08e:	e5fc      	b.n	801ec8a <__strftime+0x452>
 801f090:	f108 33ff 	add.w	r3, r8, #4294967295
 801f094:	42a3      	cmp	r3, r4
 801f096:	f67f abfe 	bls.w	801e896 <__strftime+0x5e>
 801f09a:	69ab      	ldr	r3, [r5, #24]
 801f09c:	3330      	adds	r3, #48	; 0x30
 801f09e:	e6d1      	b.n	801ee44 <__strftime+0x60c>
 801f0a0:	69ab      	ldr	r3, [r5, #24]
 801f0a2:	b13b      	cbz	r3, 801f0b4 <__strftime+0x87c>
 801f0a4:	3b01      	subs	r3, #1
 801f0a6:	69ea      	ldr	r2, [r5, #28]
 801f0a8:	3207      	adds	r2, #7
 801f0aa:	1ad2      	subs	r2, r2, r3
 801f0ac:	2307      	movs	r3, #7
 801f0ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0b2:	e5ea      	b.n	801ec8a <__strftime+0x452>
 801f0b4:	2306      	movs	r3, #6
 801f0b6:	e7f6      	b.n	801f0a6 <__strftime+0x86e>
 801f0b8:	6968      	ldr	r0, [r5, #20]
 801f0ba:	2800      	cmp	r0, #0
 801f0bc:	db05      	blt.n	801f0ca <__strftime+0x892>
 801f0be:	2264      	movs	r2, #100	; 0x64
 801f0c0:	fb90 f3f2 	sdiv	r3, r0, r2
 801f0c4:	fb03 0312 	mls	r3, r3, r2, r0
 801f0c8:	e5df      	b.n	801ec8a <__strftime+0x452>
 801f0ca:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f0ce:	f000 fcf1 	bl	801fab4 <abs>
 801f0d2:	e7f4      	b.n	801f0be <__strftime+0x886>
 801f0d4:	696b      	ldr	r3, [r5, #20]
 801f0d6:	4a4c      	ldr	r2, [pc, #304]	; (801f208 <__strftime+0x9d0>)
 801f0d8:	4293      	cmp	r3, r2
 801f0da:	da09      	bge.n	801f0f0 <__strftime+0x8b8>
 801f0dc:	212d      	movs	r1, #45	; 0x2d
 801f0de:	f88d 1020 	strb.w	r1, [sp, #32]
 801f0e2:	eba2 0a03 	sub.w	sl, r2, r3
 801f0e6:	b106      	cbz	r6, 801f0ea <__strftime+0x8b2>
 801f0e8:	3e01      	subs	r6, #1
 801f0ea:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801f0ee:	e00b      	b.n	801f108 <__strftime+0x8d0>
 801f0f0:	2f2b      	cmp	r7, #43	; 0x2b
 801f0f2:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 801f0f6:	d106      	bne.n	801f106 <__strftime+0x8ce>
 801f0f8:	f242 730f 	movw	r3, #9999	; 0x270f
 801f0fc:	459a      	cmp	sl, r3
 801f0fe:	d902      	bls.n	801f106 <__strftime+0x8ce>
 801f100:	f88d 7020 	strb.w	r7, [sp, #32]
 801f104:	e7ef      	b.n	801f0e6 <__strftime+0x8ae>
 801f106:	ab08      	add	r3, sp, #32
 801f108:	2225      	movs	r2, #37	; 0x25
 801f10a:	701a      	strb	r2, [r3, #0]
 801f10c:	b937      	cbnz	r7, 801f11c <__strftime+0x8e4>
 801f10e:	1c58      	adds	r0, r3, #1
 801f110:	493e      	ldr	r1, [pc, #248]	; (801f20c <__strftime+0x9d4>)
 801f112:	f001 fbbf 	bl	8020894 <strcpy>
 801f116:	f8cd a000 	str.w	sl, [sp]
 801f11a:	e665      	b.n	801ede8 <__strftime+0x5b0>
 801f11c:	2230      	movs	r2, #48	; 0x30
 801f11e:	1c98      	adds	r0, r3, #2
 801f120:	705a      	strb	r2, [r3, #1]
 801f122:	e7f5      	b.n	801f110 <__strftime+0x8d8>
 801f124:	6a2b      	ldr	r3, [r5, #32]
 801f126:	2b00      	cmp	r3, #0
 801f128:	f6ff ac88 	blt.w	801ea3c <__strftime+0x204>
 801f12c:	f000 f9c6 	bl	801f4bc <__tz_lock>
 801f130:	9b04      	ldr	r3, [sp, #16]
 801f132:	b90b      	cbnz	r3, 801f138 <__strftime+0x900>
 801f134:	f000 f9ce 	bl	801f4d4 <_tzset_unlocked>
 801f138:	f000 fd8a 	bl	801fc50 <__gettzinfo>
 801f13c:	6a2b      	ldr	r3, [r5, #32]
 801f13e:	2b00      	cmp	r3, #0
 801f140:	bfcc      	ite	gt
 801f142:	2350      	movgt	r3, #80	; 0x50
 801f144:	2328      	movle	r3, #40	; 0x28
 801f146:	eb09 0704 	add.w	r7, r9, r4
 801f14a:	58c6      	ldr	r6, [r0, r3]
 801f14c:	f000 f9bc 	bl	801f4c8 <__tz_unlock>
 801f150:	4276      	negs	r6, r6
 801f152:	233c      	movs	r3, #60	; 0x3c
 801f154:	fb96 f0f3 	sdiv	r0, r6, r3
 801f158:	f000 fe3e 	bl	801fdd8 <labs>
 801f15c:	233c      	movs	r3, #60	; 0x3c
 801f15e:	eba8 0a04 	sub.w	sl, r8, r4
 801f162:	fb90 f2f3 	sdiv	r2, r0, r3
 801f166:	fb02 0013 	mls	r0, r2, r3, r0
 801f16a:	9000      	str	r0, [sp, #0]
 801f16c:	4a28      	ldr	r2, [pc, #160]	; (801f210 <__strftime+0x9d8>)
 801f16e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801f172:	4651      	mov	r1, sl
 801f174:	4638      	mov	r0, r7
 801f176:	fb96 f3f3 	sdiv	r3, r6, r3
 801f17a:	f001 fb2b 	bl	80207d4 <sniprintf>
 801f17e:	2800      	cmp	r0, #0
 801f180:	f6ff ab89 	blt.w	801e896 <__strftime+0x5e>
 801f184:	4404      	add	r4, r0
 801f186:	45a0      	cmp	r8, r4
 801f188:	f67f ab85 	bls.w	801e896 <__strftime+0x5e>
 801f18c:	2301      	movs	r3, #1
 801f18e:	9304      	str	r3, [sp, #16]
 801f190:	e454      	b.n	801ea3c <__strftime+0x204>
 801f192:	6a2b      	ldr	r3, [r5, #32]
 801f194:	2b00      	cmp	r3, #0
 801f196:	f6ff ac51 	blt.w	801ea3c <__strftime+0x204>
 801f19a:	f000 f98f 	bl	801f4bc <__tz_lock>
 801f19e:	9b04      	ldr	r3, [sp, #16]
 801f1a0:	b90b      	cbnz	r3, 801f1a6 <__strftime+0x96e>
 801f1a2:	f000 f997 	bl	801f4d4 <_tzset_unlocked>
 801f1a6:	6a2b      	ldr	r3, [r5, #32]
 801f1a8:	4a1a      	ldr	r2, [pc, #104]	; (801f214 <__strftime+0x9dc>)
 801f1aa:	2b00      	cmp	r3, #0
 801f1ac:	bfd4      	ite	le
 801f1ae:	2300      	movle	r3, #0
 801f1b0:	2301      	movgt	r3, #1
 801f1b2:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801f1b6:	4630      	mov	r0, r6
 801f1b8:	f7e1 f840 	bl	800023c <strlen>
 801f1bc:	3e01      	subs	r6, #1
 801f1be:	4420      	add	r0, r4
 801f1c0:	f108 33ff 	add.w	r3, r8, #4294967295
 801f1c4:	42a0      	cmp	r0, r4
 801f1c6:	d102      	bne.n	801f1ce <__strftime+0x996>
 801f1c8:	f000 f97e 	bl	801f4c8 <__tz_unlock>
 801f1cc:	e7de      	b.n	801f18c <__strftime+0x954>
 801f1ce:	42a3      	cmp	r3, r4
 801f1d0:	d905      	bls.n	801f1de <__strftime+0x9a6>
 801f1d2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801f1d6:	f809 2004 	strb.w	r2, [r9, r4]
 801f1da:	3401      	adds	r4, #1
 801f1dc:	e7f2      	b.n	801f1c4 <__strftime+0x98c>
 801f1de:	f000 f973 	bl	801f4c8 <__tz_unlock>
 801f1e2:	f7ff bb58 	b.w	801e896 <__strftime+0x5e>
 801f1e6:	f108 33ff 	add.w	r3, r8, #4294967295
 801f1ea:	42a3      	cmp	r3, r4
 801f1ec:	f67f ab53 	bls.w	801e896 <__strftime+0x5e>
 801f1f0:	2325      	movs	r3, #37	; 0x25
 801f1f2:	e627      	b.n	801ee44 <__strftime+0x60c>
 801f1f4:	f1b8 0f00 	cmp.w	r8, #0
 801f1f8:	d002      	beq.n	801f200 <__strftime+0x9c8>
 801f1fa:	2300      	movs	r3, #0
 801f1fc:	f809 3004 	strb.w	r3, [r9, r4]
 801f200:	4620      	mov	r0, r4
 801f202:	b011      	add	sp, #68	; 0x44
 801f204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f208:	fffff894 	.word	0xfffff894
 801f20c:	08026697 	.word	0x08026697
 801f210:	080266b4 	.word	0x080266b4
 801f214:	20000168 	.word	0x20000168

0801f218 <strftime>:
 801f218:	b513      	push	{r0, r1, r4, lr}
 801f21a:	4c03      	ldr	r4, [pc, #12]	; (801f228 <strftime+0x10>)
 801f21c:	9400      	str	r4, [sp, #0]
 801f21e:	f7ff fb0b 	bl	801e838 <__strftime>
 801f222:	b002      	add	sp, #8
 801f224:	bd10      	pop	{r4, pc}
 801f226:	bf00      	nop
 801f228:	200001d0 	.word	0x200001d0

0801f22c <strstr>:
 801f22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f22e:	780c      	ldrb	r4, [r1, #0]
 801f230:	b164      	cbz	r4, 801f24c <strstr+0x20>
 801f232:	4603      	mov	r3, r0
 801f234:	781a      	ldrb	r2, [r3, #0]
 801f236:	4618      	mov	r0, r3
 801f238:	1c5e      	adds	r6, r3, #1
 801f23a:	b90a      	cbnz	r2, 801f240 <strstr+0x14>
 801f23c:	4610      	mov	r0, r2
 801f23e:	e005      	b.n	801f24c <strstr+0x20>
 801f240:	4294      	cmp	r4, r2
 801f242:	d108      	bne.n	801f256 <strstr+0x2a>
 801f244:	460d      	mov	r5, r1
 801f246:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801f24a:	b902      	cbnz	r2, 801f24e <strstr+0x22>
 801f24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f24e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801f252:	4297      	cmp	r7, r2
 801f254:	d0f7      	beq.n	801f246 <strstr+0x1a>
 801f256:	4633      	mov	r3, r6
 801f258:	e7ec      	b.n	801f234 <strstr+0x8>
	...

0801f25c <_strtoul_l.isra.0>:
 801f25c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f260:	4e3b      	ldr	r6, [pc, #236]	; (801f350 <_strtoul_l.isra.0+0xf4>)
 801f262:	4686      	mov	lr, r0
 801f264:	468c      	mov	ip, r1
 801f266:	4660      	mov	r0, ip
 801f268:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801f26c:	5da5      	ldrb	r5, [r4, r6]
 801f26e:	f015 0508 	ands.w	r5, r5, #8
 801f272:	d1f8      	bne.n	801f266 <_strtoul_l.isra.0+0xa>
 801f274:	2c2d      	cmp	r4, #45	; 0x2d
 801f276:	d134      	bne.n	801f2e2 <_strtoul_l.isra.0+0x86>
 801f278:	f89c 4000 	ldrb.w	r4, [ip]
 801f27c:	f04f 0801 	mov.w	r8, #1
 801f280:	f100 0c02 	add.w	ip, r0, #2
 801f284:	2b00      	cmp	r3, #0
 801f286:	d05e      	beq.n	801f346 <_strtoul_l.isra.0+0xea>
 801f288:	2b10      	cmp	r3, #16
 801f28a:	d10c      	bne.n	801f2a6 <_strtoul_l.isra.0+0x4a>
 801f28c:	2c30      	cmp	r4, #48	; 0x30
 801f28e:	d10a      	bne.n	801f2a6 <_strtoul_l.isra.0+0x4a>
 801f290:	f89c 0000 	ldrb.w	r0, [ip]
 801f294:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801f298:	2858      	cmp	r0, #88	; 0x58
 801f29a:	d14f      	bne.n	801f33c <_strtoul_l.isra.0+0xe0>
 801f29c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801f2a0:	2310      	movs	r3, #16
 801f2a2:	f10c 0c02 	add.w	ip, ip, #2
 801f2a6:	f04f 37ff 	mov.w	r7, #4294967295
 801f2aa:	2500      	movs	r5, #0
 801f2ac:	fbb7 f7f3 	udiv	r7, r7, r3
 801f2b0:	fb03 f907 	mul.w	r9, r3, r7
 801f2b4:	ea6f 0909 	mvn.w	r9, r9
 801f2b8:	4628      	mov	r0, r5
 801f2ba:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801f2be:	2e09      	cmp	r6, #9
 801f2c0:	d818      	bhi.n	801f2f4 <_strtoul_l.isra.0+0x98>
 801f2c2:	4634      	mov	r4, r6
 801f2c4:	42a3      	cmp	r3, r4
 801f2c6:	dd24      	ble.n	801f312 <_strtoul_l.isra.0+0xb6>
 801f2c8:	2d00      	cmp	r5, #0
 801f2ca:	db1f      	blt.n	801f30c <_strtoul_l.isra.0+0xb0>
 801f2cc:	4287      	cmp	r7, r0
 801f2ce:	d31d      	bcc.n	801f30c <_strtoul_l.isra.0+0xb0>
 801f2d0:	d101      	bne.n	801f2d6 <_strtoul_l.isra.0+0x7a>
 801f2d2:	45a1      	cmp	r9, r4
 801f2d4:	db1a      	blt.n	801f30c <_strtoul_l.isra.0+0xb0>
 801f2d6:	fb00 4003 	mla	r0, r0, r3, r4
 801f2da:	2501      	movs	r5, #1
 801f2dc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801f2e0:	e7eb      	b.n	801f2ba <_strtoul_l.isra.0+0x5e>
 801f2e2:	2c2b      	cmp	r4, #43	; 0x2b
 801f2e4:	bf08      	it	eq
 801f2e6:	f89c 4000 	ldrbeq.w	r4, [ip]
 801f2ea:	46a8      	mov	r8, r5
 801f2ec:	bf08      	it	eq
 801f2ee:	f100 0c02 	addeq.w	ip, r0, #2
 801f2f2:	e7c7      	b.n	801f284 <_strtoul_l.isra.0+0x28>
 801f2f4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801f2f8:	2e19      	cmp	r6, #25
 801f2fa:	d801      	bhi.n	801f300 <_strtoul_l.isra.0+0xa4>
 801f2fc:	3c37      	subs	r4, #55	; 0x37
 801f2fe:	e7e1      	b.n	801f2c4 <_strtoul_l.isra.0+0x68>
 801f300:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801f304:	2e19      	cmp	r6, #25
 801f306:	d804      	bhi.n	801f312 <_strtoul_l.isra.0+0xb6>
 801f308:	3c57      	subs	r4, #87	; 0x57
 801f30a:	e7db      	b.n	801f2c4 <_strtoul_l.isra.0+0x68>
 801f30c:	f04f 35ff 	mov.w	r5, #4294967295
 801f310:	e7e4      	b.n	801f2dc <_strtoul_l.isra.0+0x80>
 801f312:	2d00      	cmp	r5, #0
 801f314:	da07      	bge.n	801f326 <_strtoul_l.isra.0+0xca>
 801f316:	2322      	movs	r3, #34	; 0x22
 801f318:	f8ce 3000 	str.w	r3, [lr]
 801f31c:	f04f 30ff 	mov.w	r0, #4294967295
 801f320:	b942      	cbnz	r2, 801f334 <_strtoul_l.isra.0+0xd8>
 801f322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f326:	f1b8 0f00 	cmp.w	r8, #0
 801f32a:	d000      	beq.n	801f32e <_strtoul_l.isra.0+0xd2>
 801f32c:	4240      	negs	r0, r0
 801f32e:	2a00      	cmp	r2, #0
 801f330:	d0f7      	beq.n	801f322 <_strtoul_l.isra.0+0xc6>
 801f332:	b10d      	cbz	r5, 801f338 <_strtoul_l.isra.0+0xdc>
 801f334:	f10c 31ff 	add.w	r1, ip, #4294967295
 801f338:	6011      	str	r1, [r2, #0]
 801f33a:	e7f2      	b.n	801f322 <_strtoul_l.isra.0+0xc6>
 801f33c:	2430      	movs	r4, #48	; 0x30
 801f33e:	2b00      	cmp	r3, #0
 801f340:	d1b1      	bne.n	801f2a6 <_strtoul_l.isra.0+0x4a>
 801f342:	2308      	movs	r3, #8
 801f344:	e7af      	b.n	801f2a6 <_strtoul_l.isra.0+0x4a>
 801f346:	2c30      	cmp	r4, #48	; 0x30
 801f348:	d0a2      	beq.n	801f290 <_strtoul_l.isra.0+0x34>
 801f34a:	230a      	movs	r3, #10
 801f34c:	e7ab      	b.n	801f2a6 <_strtoul_l.isra.0+0x4a>
 801f34e:	bf00      	nop
 801f350:	08026961 	.word	0x08026961

0801f354 <_strtoul_r>:
 801f354:	f7ff bf82 	b.w	801f25c <_strtoul_l.isra.0>

0801f358 <strtoul>:
 801f358:	4613      	mov	r3, r2
 801f35a:	460a      	mov	r2, r1
 801f35c:	4601      	mov	r1, r0
 801f35e:	4802      	ldr	r0, [pc, #8]	; (801f368 <strtoul+0x10>)
 801f360:	6800      	ldr	r0, [r0, #0]
 801f362:	f7ff bf7b 	b.w	801f25c <_strtoul_l.isra.0>
 801f366:	bf00      	nop
 801f368:	20000104 	.word	0x20000104

0801f36c <__tzcalc_limits>:
 801f36c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f370:	4680      	mov	r8, r0
 801f372:	f000 fc6d 	bl	801fc50 <__gettzinfo>
 801f376:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801f37a:	4598      	cmp	r8, r3
 801f37c:	f340 8098 	ble.w	801f4b0 <__tzcalc_limits+0x144>
 801f380:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801f384:	4443      	add	r3, r8
 801f386:	109b      	asrs	r3, r3, #2
 801f388:	f240 126d 	movw	r2, #365	; 0x16d
 801f38c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801f390:	fb02 3505 	mla	r5, r2, r5, r3
 801f394:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801f398:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801f39c:	fb93 f3f2 	sdiv	r3, r3, r2
 801f3a0:	441d      	add	r5, r3
 801f3a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f3a6:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801f3aa:	fb98 f7f3 	sdiv	r7, r8, r3
 801f3ae:	fb03 8717 	mls	r7, r3, r7, r8
 801f3b2:	4442      	add	r2, r8
 801f3b4:	fab7 fc87 	clz	ip, r7
 801f3b8:	fbb2 f2f3 	udiv	r2, r2, r3
 801f3bc:	f008 0303 	and.w	r3, r8, #3
 801f3c0:	4415      	add	r5, r2
 801f3c2:	2264      	movs	r2, #100	; 0x64
 801f3c4:	f8c0 8004 	str.w	r8, [r0, #4]
 801f3c8:	fb98 f6f2 	sdiv	r6, r8, r2
 801f3cc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f3d0:	fb02 8616 	mls	r6, r2, r6, r8
 801f3d4:	4604      	mov	r4, r0
 801f3d6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801f3da:	9300      	str	r3, [sp, #0]
 801f3dc:	f04f 0e07 	mov.w	lr, #7
 801f3e0:	7a22      	ldrb	r2, [r4, #8]
 801f3e2:	6963      	ldr	r3, [r4, #20]
 801f3e4:	2a4a      	cmp	r2, #74	; 0x4a
 801f3e6:	d128      	bne.n	801f43a <__tzcalc_limits+0xce>
 801f3e8:	9900      	ldr	r1, [sp, #0]
 801f3ea:	18ea      	adds	r2, r5, r3
 801f3ec:	b901      	cbnz	r1, 801f3f0 <__tzcalc_limits+0x84>
 801f3ee:	b906      	cbnz	r6, 801f3f2 <__tzcalc_limits+0x86>
 801f3f0:	bb0f      	cbnz	r7, 801f436 <__tzcalc_limits+0xca>
 801f3f2:	2b3b      	cmp	r3, #59	; 0x3b
 801f3f4:	bfd4      	ite	le
 801f3f6:	2300      	movle	r3, #0
 801f3f8:	2301      	movgt	r3, #1
 801f3fa:	4413      	add	r3, r2
 801f3fc:	1e5a      	subs	r2, r3, #1
 801f3fe:	69a3      	ldr	r3, [r4, #24]
 801f400:	492c      	ldr	r1, [pc, #176]	; (801f4b4 <__tzcalc_limits+0x148>)
 801f402:	fb01 3202 	mla	r2, r1, r2, r3
 801f406:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f408:	4413      	add	r3, r2
 801f40a:	461a      	mov	r2, r3
 801f40c:	17db      	asrs	r3, r3, #31
 801f40e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801f412:	3428      	adds	r4, #40	; 0x28
 801f414:	45a3      	cmp	fp, r4
 801f416:	d1e3      	bne.n	801f3e0 <__tzcalc_limits+0x74>
 801f418:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801f41c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801f420:	4294      	cmp	r4, r2
 801f422:	eb75 0303 	sbcs.w	r3, r5, r3
 801f426:	bfb4      	ite	lt
 801f428:	2301      	movlt	r3, #1
 801f42a:	2300      	movge	r3, #0
 801f42c:	6003      	str	r3, [r0, #0]
 801f42e:	2001      	movs	r0, #1
 801f430:	b003      	add	sp, #12
 801f432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f436:	2300      	movs	r3, #0
 801f438:	e7df      	b.n	801f3fa <__tzcalc_limits+0x8e>
 801f43a:	2a44      	cmp	r2, #68	; 0x44
 801f43c:	d101      	bne.n	801f442 <__tzcalc_limits+0xd6>
 801f43e:	18ea      	adds	r2, r5, r3
 801f440:	e7dd      	b.n	801f3fe <__tzcalc_limits+0x92>
 801f442:	9a00      	ldr	r2, [sp, #0]
 801f444:	bb72      	cbnz	r2, 801f4a4 <__tzcalc_limits+0x138>
 801f446:	2e00      	cmp	r6, #0
 801f448:	bf0c      	ite	eq
 801f44a:	46e0      	moveq	r8, ip
 801f44c:	f04f 0801 	movne.w	r8, #1
 801f450:	4919      	ldr	r1, [pc, #100]	; (801f4b8 <__tzcalc_limits+0x14c>)
 801f452:	68e2      	ldr	r2, [r4, #12]
 801f454:	9201      	str	r2, [sp, #4]
 801f456:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801f45a:	fb0a 1808 	mla	r8, sl, r8, r1
 801f45e:	462a      	mov	r2, r5
 801f460:	f04f 0900 	mov.w	r9, #0
 801f464:	f1a8 0804 	sub.w	r8, r8, #4
 801f468:	9901      	ldr	r1, [sp, #4]
 801f46a:	f109 0901 	add.w	r9, r9, #1
 801f46e:	4549      	cmp	r1, r9
 801f470:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801f474:	dc18      	bgt.n	801f4a8 <__tzcalc_limits+0x13c>
 801f476:	f102 0804 	add.w	r8, r2, #4
 801f47a:	fb98 f9fe 	sdiv	r9, r8, lr
 801f47e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801f482:	eba8 0909 	sub.w	r9, r8, r9
 801f486:	ebb3 0909 	subs.w	r9, r3, r9
 801f48a:	6923      	ldr	r3, [r4, #16]
 801f48c:	f103 33ff 	add.w	r3, r3, #4294967295
 801f490:	bf48      	it	mi
 801f492:	f109 0907 	addmi.w	r9, r9, #7
 801f496:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801f49a:	444b      	add	r3, r9
 801f49c:	4553      	cmp	r3, sl
 801f49e:	da05      	bge.n	801f4ac <__tzcalc_limits+0x140>
 801f4a0:	441a      	add	r2, r3
 801f4a2:	e7ac      	b.n	801f3fe <__tzcalc_limits+0x92>
 801f4a4:	46e0      	mov	r8, ip
 801f4a6:	e7d3      	b.n	801f450 <__tzcalc_limits+0xe4>
 801f4a8:	4452      	add	r2, sl
 801f4aa:	e7dd      	b.n	801f468 <__tzcalc_limits+0xfc>
 801f4ac:	3b07      	subs	r3, #7
 801f4ae:	e7f5      	b.n	801f49c <__tzcalc_limits+0x130>
 801f4b0:	2000      	movs	r0, #0
 801f4b2:	e7bd      	b.n	801f430 <__tzcalc_limits+0xc4>
 801f4b4:	00015180 	.word	0x00015180
 801f4b8:	080265a8 	.word	0x080265a8

0801f4bc <__tz_lock>:
 801f4bc:	4801      	ldr	r0, [pc, #4]	; (801f4c4 <__tz_lock+0x8>)
 801f4be:	f7fe bed9 	b.w	801e274 <__retarget_lock_acquire>
 801f4c2:	bf00      	nop
 801f4c4:	20000e27 	.word	0x20000e27

0801f4c8 <__tz_unlock>:
 801f4c8:	4801      	ldr	r0, [pc, #4]	; (801f4d0 <__tz_unlock+0x8>)
 801f4ca:	f7fe bed5 	b.w	801e278 <__retarget_lock_release>
 801f4ce:	bf00      	nop
 801f4d0:	20000e27 	.word	0x20000e27

0801f4d4 <_tzset_unlocked>:
 801f4d4:	4b01      	ldr	r3, [pc, #4]	; (801f4dc <_tzset_unlocked+0x8>)
 801f4d6:	6818      	ldr	r0, [r3, #0]
 801f4d8:	f000 b802 	b.w	801f4e0 <_tzset_unlocked_r>
 801f4dc:	20000104 	.word	0x20000104

0801f4e0 <_tzset_unlocked_r>:
 801f4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4e4:	b08d      	sub	sp, #52	; 0x34
 801f4e6:	4607      	mov	r7, r0
 801f4e8:	f000 fbb2 	bl	801fc50 <__gettzinfo>
 801f4ec:	49ae      	ldr	r1, [pc, #696]	; (801f7a8 <_tzset_unlocked_r+0x2c8>)
 801f4ee:	4eaf      	ldr	r6, [pc, #700]	; (801f7ac <_tzset_unlocked_r+0x2cc>)
 801f4f0:	4605      	mov	r5, r0
 801f4f2:	4638      	mov	r0, r7
 801f4f4:	f000 fba4 	bl	801fc40 <_getenv_r>
 801f4f8:	4604      	mov	r4, r0
 801f4fa:	b970      	cbnz	r0, 801f51a <_tzset_unlocked_r+0x3a>
 801f4fc:	4bac      	ldr	r3, [pc, #688]	; (801f7b0 <_tzset_unlocked_r+0x2d0>)
 801f4fe:	4aad      	ldr	r2, [pc, #692]	; (801f7b4 <_tzset_unlocked_r+0x2d4>)
 801f500:	6018      	str	r0, [r3, #0]
 801f502:	4bad      	ldr	r3, [pc, #692]	; (801f7b8 <_tzset_unlocked_r+0x2d8>)
 801f504:	6018      	str	r0, [r3, #0]
 801f506:	4bad      	ldr	r3, [pc, #692]	; (801f7bc <_tzset_unlocked_r+0x2dc>)
 801f508:	6830      	ldr	r0, [r6, #0]
 801f50a:	e9c3 2200 	strd	r2, r2, [r3]
 801f50e:	f7fe ff21 	bl	801e354 <free>
 801f512:	6034      	str	r4, [r6, #0]
 801f514:	b00d      	add	sp, #52	; 0x34
 801f516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f51a:	6831      	ldr	r1, [r6, #0]
 801f51c:	2900      	cmp	r1, #0
 801f51e:	d15f      	bne.n	801f5e0 <_tzset_unlocked_r+0x100>
 801f520:	6830      	ldr	r0, [r6, #0]
 801f522:	f7fe ff17 	bl	801e354 <free>
 801f526:	4620      	mov	r0, r4
 801f528:	f7e0 fe88 	bl	800023c <strlen>
 801f52c:	1c41      	adds	r1, r0, #1
 801f52e:	4638      	mov	r0, r7
 801f530:	f7fe ff8e 	bl	801e450 <_malloc_r>
 801f534:	6030      	str	r0, [r6, #0]
 801f536:	2800      	cmp	r0, #0
 801f538:	d157      	bne.n	801f5ea <_tzset_unlocked_r+0x10a>
 801f53a:	7823      	ldrb	r3, [r4, #0]
 801f53c:	4aa0      	ldr	r2, [pc, #640]	; (801f7c0 <_tzset_unlocked_r+0x2e0>)
 801f53e:	49a1      	ldr	r1, [pc, #644]	; (801f7c4 <_tzset_unlocked_r+0x2e4>)
 801f540:	2b3a      	cmp	r3, #58	; 0x3a
 801f542:	bf08      	it	eq
 801f544:	3401      	addeq	r4, #1
 801f546:	ae0a      	add	r6, sp, #40	; 0x28
 801f548:	4633      	mov	r3, r6
 801f54a:	4620      	mov	r0, r4
 801f54c:	f001 f976 	bl	802083c <siscanf>
 801f550:	2800      	cmp	r0, #0
 801f552:	dddf      	ble.n	801f514 <_tzset_unlocked_r+0x34>
 801f554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f556:	18e7      	adds	r7, r4, r3
 801f558:	5ce3      	ldrb	r3, [r4, r3]
 801f55a:	2b2d      	cmp	r3, #45	; 0x2d
 801f55c:	d149      	bne.n	801f5f2 <_tzset_unlocked_r+0x112>
 801f55e:	3701      	adds	r7, #1
 801f560:	f04f 34ff 	mov.w	r4, #4294967295
 801f564:	f10d 0a20 	add.w	sl, sp, #32
 801f568:	f10d 0b1e 	add.w	fp, sp, #30
 801f56c:	f04f 0800 	mov.w	r8, #0
 801f570:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801f574:	4994      	ldr	r1, [pc, #592]	; (801f7c8 <_tzset_unlocked_r+0x2e8>)
 801f576:	9603      	str	r6, [sp, #12]
 801f578:	f8cd b000 	str.w	fp, [sp]
 801f57c:	4633      	mov	r3, r6
 801f57e:	aa07      	add	r2, sp, #28
 801f580:	4638      	mov	r0, r7
 801f582:	f8ad 801e 	strh.w	r8, [sp, #30]
 801f586:	f8ad 8020 	strh.w	r8, [sp, #32]
 801f58a:	f001 f957 	bl	802083c <siscanf>
 801f58e:	4540      	cmp	r0, r8
 801f590:	ddc0      	ble.n	801f514 <_tzset_unlocked_r+0x34>
 801f592:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801f596:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f59a:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801f7d4 <_tzset_unlocked_r+0x2f4>
 801f59e:	213c      	movs	r1, #60	; 0x3c
 801f5a0:	fb01 2203 	mla	r2, r1, r3, r2
 801f5a4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801f5a8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f5ac:	fb01 2303 	mla	r3, r1, r3, r2
 801f5b0:	435c      	muls	r4, r3
 801f5b2:	62ac      	str	r4, [r5, #40]	; 0x28
 801f5b4:	4c81      	ldr	r4, [pc, #516]	; (801f7bc <_tzset_unlocked_r+0x2dc>)
 801f5b6:	4b82      	ldr	r3, [pc, #520]	; (801f7c0 <_tzset_unlocked_r+0x2e0>)
 801f5b8:	6023      	str	r3, [r4, #0]
 801f5ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f5bc:	4981      	ldr	r1, [pc, #516]	; (801f7c4 <_tzset_unlocked_r+0x2e4>)
 801f5be:	441f      	add	r7, r3
 801f5c0:	464a      	mov	r2, r9
 801f5c2:	4633      	mov	r3, r6
 801f5c4:	4638      	mov	r0, r7
 801f5c6:	f001 f939 	bl	802083c <siscanf>
 801f5ca:	4540      	cmp	r0, r8
 801f5cc:	dc16      	bgt.n	801f5fc <_tzset_unlocked_r+0x11c>
 801f5ce:	6823      	ldr	r3, [r4, #0]
 801f5d0:	6063      	str	r3, [r4, #4]
 801f5d2:	4b77      	ldr	r3, [pc, #476]	; (801f7b0 <_tzset_unlocked_r+0x2d0>)
 801f5d4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801f5d6:	601a      	str	r2, [r3, #0]
 801f5d8:	4b77      	ldr	r3, [pc, #476]	; (801f7b8 <_tzset_unlocked_r+0x2d8>)
 801f5da:	f8c3 8000 	str.w	r8, [r3]
 801f5de:	e799      	b.n	801f514 <_tzset_unlocked_r+0x34>
 801f5e0:	f7e0 fe34 	bl	800024c <strcmp>
 801f5e4:	2800      	cmp	r0, #0
 801f5e6:	d19b      	bne.n	801f520 <_tzset_unlocked_r+0x40>
 801f5e8:	e794      	b.n	801f514 <_tzset_unlocked_r+0x34>
 801f5ea:	4621      	mov	r1, r4
 801f5ec:	f001 f952 	bl	8020894 <strcpy>
 801f5f0:	e7a3      	b.n	801f53a <_tzset_unlocked_r+0x5a>
 801f5f2:	2b2b      	cmp	r3, #43	; 0x2b
 801f5f4:	bf08      	it	eq
 801f5f6:	3701      	addeq	r7, #1
 801f5f8:	2401      	movs	r4, #1
 801f5fa:	e7b3      	b.n	801f564 <_tzset_unlocked_r+0x84>
 801f5fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f5fe:	f8c4 9004 	str.w	r9, [r4, #4]
 801f602:	18fc      	adds	r4, r7, r3
 801f604:	5cfb      	ldrb	r3, [r7, r3]
 801f606:	2b2d      	cmp	r3, #45	; 0x2d
 801f608:	f040 808b 	bne.w	801f722 <_tzset_unlocked_r+0x242>
 801f60c:	3401      	adds	r4, #1
 801f60e:	f04f 37ff 	mov.w	r7, #4294967295
 801f612:	2300      	movs	r3, #0
 801f614:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f618:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f61c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801f620:	930a      	str	r3, [sp, #40]	; 0x28
 801f622:	e9cd a602 	strd	sl, r6, [sp, #8]
 801f626:	e9cd b600 	strd	fp, r6, [sp]
 801f62a:	4967      	ldr	r1, [pc, #412]	; (801f7c8 <_tzset_unlocked_r+0x2e8>)
 801f62c:	4633      	mov	r3, r6
 801f62e:	aa07      	add	r2, sp, #28
 801f630:	4620      	mov	r0, r4
 801f632:	f001 f903 	bl	802083c <siscanf>
 801f636:	2800      	cmp	r0, #0
 801f638:	dc78      	bgt.n	801f72c <_tzset_unlocked_r+0x24c>
 801f63a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801f63c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801f640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f642:	652f      	str	r7, [r5, #80]	; 0x50
 801f644:	441c      	add	r4, r3
 801f646:	462f      	mov	r7, r5
 801f648:	f04f 0900 	mov.w	r9, #0
 801f64c:	7823      	ldrb	r3, [r4, #0]
 801f64e:	2b2c      	cmp	r3, #44	; 0x2c
 801f650:	bf08      	it	eq
 801f652:	3401      	addeq	r4, #1
 801f654:	f894 8000 	ldrb.w	r8, [r4]
 801f658:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801f65c:	d178      	bne.n	801f750 <_tzset_unlocked_r+0x270>
 801f65e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801f662:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801f666:	ab09      	add	r3, sp, #36	; 0x24
 801f668:	9300      	str	r3, [sp, #0]
 801f66a:	4958      	ldr	r1, [pc, #352]	; (801f7cc <_tzset_unlocked_r+0x2ec>)
 801f66c:	9603      	str	r6, [sp, #12]
 801f66e:	4633      	mov	r3, r6
 801f670:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801f674:	4620      	mov	r0, r4
 801f676:	f001 f8e1 	bl	802083c <siscanf>
 801f67a:	2803      	cmp	r0, #3
 801f67c:	f47f af4a 	bne.w	801f514 <_tzset_unlocked_r+0x34>
 801f680:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801f684:	1e4b      	subs	r3, r1, #1
 801f686:	2b0b      	cmp	r3, #11
 801f688:	f63f af44 	bhi.w	801f514 <_tzset_unlocked_r+0x34>
 801f68c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801f690:	1e53      	subs	r3, r2, #1
 801f692:	2b04      	cmp	r3, #4
 801f694:	f63f af3e 	bhi.w	801f514 <_tzset_unlocked_r+0x34>
 801f698:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801f69c:	2b06      	cmp	r3, #6
 801f69e:	f63f af39 	bhi.w	801f514 <_tzset_unlocked_r+0x34>
 801f6a2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801f6a6:	f887 8008 	strb.w	r8, [r7, #8]
 801f6aa:	617b      	str	r3, [r7, #20]
 801f6ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f6ae:	eb04 0803 	add.w	r8, r4, r3
 801f6b2:	2302      	movs	r3, #2
 801f6b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f6b8:	2300      	movs	r3, #0
 801f6ba:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f6be:	f8ad 3020 	strh.w	r3, [sp, #32]
 801f6c2:	930a      	str	r3, [sp, #40]	; 0x28
 801f6c4:	f898 3000 	ldrb.w	r3, [r8]
 801f6c8:	2b2f      	cmp	r3, #47	; 0x2f
 801f6ca:	d109      	bne.n	801f6e0 <_tzset_unlocked_r+0x200>
 801f6cc:	e9cd a602 	strd	sl, r6, [sp, #8]
 801f6d0:	e9cd b600 	strd	fp, r6, [sp]
 801f6d4:	493e      	ldr	r1, [pc, #248]	; (801f7d0 <_tzset_unlocked_r+0x2f0>)
 801f6d6:	4633      	mov	r3, r6
 801f6d8:	aa07      	add	r2, sp, #28
 801f6da:	4640      	mov	r0, r8
 801f6dc:	f001 f8ae 	bl	802083c <siscanf>
 801f6e0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801f6e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f6e8:	213c      	movs	r1, #60	; 0x3c
 801f6ea:	fb01 2203 	mla	r2, r1, r3, r2
 801f6ee:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801f6f2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f6f6:	fb01 2303 	mla	r3, r1, r3, r2
 801f6fa:	61bb      	str	r3, [r7, #24]
 801f6fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f6fe:	3728      	adds	r7, #40	; 0x28
 801f700:	4444      	add	r4, r8
 801f702:	f1b9 0f00 	cmp.w	r9, #0
 801f706:	d020      	beq.n	801f74a <_tzset_unlocked_r+0x26a>
 801f708:	6868      	ldr	r0, [r5, #4]
 801f70a:	f7ff fe2f 	bl	801f36c <__tzcalc_limits>
 801f70e:	4b28      	ldr	r3, [pc, #160]	; (801f7b0 <_tzset_unlocked_r+0x2d0>)
 801f710:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801f712:	601a      	str	r2, [r3, #0]
 801f714:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801f716:	1a9b      	subs	r3, r3, r2
 801f718:	4a27      	ldr	r2, [pc, #156]	; (801f7b8 <_tzset_unlocked_r+0x2d8>)
 801f71a:	bf18      	it	ne
 801f71c:	2301      	movne	r3, #1
 801f71e:	6013      	str	r3, [r2, #0]
 801f720:	e6f8      	b.n	801f514 <_tzset_unlocked_r+0x34>
 801f722:	2b2b      	cmp	r3, #43	; 0x2b
 801f724:	bf08      	it	eq
 801f726:	3401      	addeq	r4, #1
 801f728:	2701      	movs	r7, #1
 801f72a:	e772      	b.n	801f612 <_tzset_unlocked_r+0x132>
 801f72c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801f730:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f734:	213c      	movs	r1, #60	; 0x3c
 801f736:	fb01 2203 	mla	r2, r1, r3, r2
 801f73a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801f73e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f742:	fb01 2303 	mla	r3, r1, r3, r2
 801f746:	435f      	muls	r7, r3
 801f748:	e77a      	b.n	801f640 <_tzset_unlocked_r+0x160>
 801f74a:	f04f 0901 	mov.w	r9, #1
 801f74e:	e77d      	b.n	801f64c <_tzset_unlocked_r+0x16c>
 801f750:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801f754:	bf06      	itte	eq
 801f756:	3401      	addeq	r4, #1
 801f758:	4643      	moveq	r3, r8
 801f75a:	2344      	movne	r3, #68	; 0x44
 801f75c:	220a      	movs	r2, #10
 801f75e:	a90b      	add	r1, sp, #44	; 0x2c
 801f760:	4620      	mov	r0, r4
 801f762:	9305      	str	r3, [sp, #20]
 801f764:	f7ff fdf8 	bl	801f358 <strtoul>
 801f768:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801f76c:	9b05      	ldr	r3, [sp, #20]
 801f76e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801f772:	45a0      	cmp	r8, r4
 801f774:	d114      	bne.n	801f7a0 <_tzset_unlocked_r+0x2c0>
 801f776:	234d      	movs	r3, #77	; 0x4d
 801f778:	f1b9 0f00 	cmp.w	r9, #0
 801f77c:	d107      	bne.n	801f78e <_tzset_unlocked_r+0x2ae>
 801f77e:	722b      	strb	r3, [r5, #8]
 801f780:	2103      	movs	r1, #3
 801f782:	2302      	movs	r3, #2
 801f784:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801f788:	f8c5 9014 	str.w	r9, [r5, #20]
 801f78c:	e791      	b.n	801f6b2 <_tzset_unlocked_r+0x1d2>
 801f78e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801f792:	220b      	movs	r2, #11
 801f794:	2301      	movs	r3, #1
 801f796:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801f79a:	2300      	movs	r3, #0
 801f79c:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f79e:	e788      	b.n	801f6b2 <_tzset_unlocked_r+0x1d2>
 801f7a0:	b280      	uxth	r0, r0
 801f7a2:	723b      	strb	r3, [r7, #8]
 801f7a4:	6178      	str	r0, [r7, #20]
 801f7a6:	e784      	b.n	801f6b2 <_tzset_unlocked_r+0x1d2>
 801f7a8:	080268e8 	.word	0x080268e8
 801f7ac:	20000d80 	.word	0x20000d80
 801f7b0:	20000d88 	.word	0x20000d88
 801f7b4:	080268eb 	.word	0x080268eb
 801f7b8:	20000d84 	.word	0x20000d84
 801f7bc:	20000168 	.word	0x20000168
 801f7c0:	20000d73 	.word	0x20000d73
 801f7c4:	080268ef 	.word	0x080268ef
 801f7c8:	08026912 	.word	0x08026912
 801f7cc:	080268fe 	.word	0x080268fe
 801f7d0:	08026911 	.word	0x08026911
 801f7d4:	20000d68 	.word	0x20000d68

0801f7d8 <_vsniprintf_r>:
 801f7d8:	b530      	push	{r4, r5, lr}
 801f7da:	1e14      	subs	r4, r2, #0
 801f7dc:	4605      	mov	r5, r0
 801f7de:	b09b      	sub	sp, #108	; 0x6c
 801f7e0:	4618      	mov	r0, r3
 801f7e2:	da05      	bge.n	801f7f0 <_vsniprintf_r+0x18>
 801f7e4:	238b      	movs	r3, #139	; 0x8b
 801f7e6:	602b      	str	r3, [r5, #0]
 801f7e8:	f04f 30ff 	mov.w	r0, #4294967295
 801f7ec:	b01b      	add	sp, #108	; 0x6c
 801f7ee:	bd30      	pop	{r4, r5, pc}
 801f7f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801f7f4:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f7f8:	bf14      	ite	ne
 801f7fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f7fe:	4623      	moveq	r3, r4
 801f800:	9302      	str	r3, [sp, #8]
 801f802:	9305      	str	r3, [sp, #20]
 801f804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f808:	9100      	str	r1, [sp, #0]
 801f80a:	9104      	str	r1, [sp, #16]
 801f80c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f810:	4602      	mov	r2, r0
 801f812:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f814:	4669      	mov	r1, sp
 801f816:	4628      	mov	r0, r5
 801f818:	f000 fb94 	bl	801ff44 <_svfiprintf_r>
 801f81c:	1c43      	adds	r3, r0, #1
 801f81e:	bfbc      	itt	lt
 801f820:	238b      	movlt	r3, #139	; 0x8b
 801f822:	602b      	strlt	r3, [r5, #0]
 801f824:	2c00      	cmp	r4, #0
 801f826:	d0e1      	beq.n	801f7ec <_vsniprintf_r+0x14>
 801f828:	9b00      	ldr	r3, [sp, #0]
 801f82a:	2200      	movs	r2, #0
 801f82c:	701a      	strb	r2, [r3, #0]
 801f82e:	e7dd      	b.n	801f7ec <_vsniprintf_r+0x14>

0801f830 <vsniprintf>:
 801f830:	b507      	push	{r0, r1, r2, lr}
 801f832:	9300      	str	r3, [sp, #0]
 801f834:	4613      	mov	r3, r2
 801f836:	460a      	mov	r2, r1
 801f838:	4601      	mov	r1, r0
 801f83a:	4803      	ldr	r0, [pc, #12]	; (801f848 <vsniprintf+0x18>)
 801f83c:	6800      	ldr	r0, [r0, #0]
 801f83e:	f7ff ffcb 	bl	801f7d8 <_vsniprintf_r>
 801f842:	b003      	add	sp, #12
 801f844:	f85d fb04 	ldr.w	pc, [sp], #4
 801f848:	20000104 	.word	0x20000104

0801f84c <__swbuf_r>:
 801f84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f84e:	460e      	mov	r6, r1
 801f850:	4614      	mov	r4, r2
 801f852:	4605      	mov	r5, r0
 801f854:	b118      	cbz	r0, 801f85e <__swbuf_r+0x12>
 801f856:	6983      	ldr	r3, [r0, #24]
 801f858:	b90b      	cbnz	r3, 801f85e <__swbuf_r+0x12>
 801f85a:	f7fe f959 	bl	801db10 <__sinit>
 801f85e:	4b21      	ldr	r3, [pc, #132]	; (801f8e4 <__swbuf_r+0x98>)
 801f860:	429c      	cmp	r4, r3
 801f862:	d12b      	bne.n	801f8bc <__swbuf_r+0x70>
 801f864:	686c      	ldr	r4, [r5, #4]
 801f866:	69a3      	ldr	r3, [r4, #24]
 801f868:	60a3      	str	r3, [r4, #8]
 801f86a:	89a3      	ldrh	r3, [r4, #12]
 801f86c:	071a      	lsls	r2, r3, #28
 801f86e:	d52f      	bpl.n	801f8d0 <__swbuf_r+0x84>
 801f870:	6923      	ldr	r3, [r4, #16]
 801f872:	b36b      	cbz	r3, 801f8d0 <__swbuf_r+0x84>
 801f874:	6923      	ldr	r3, [r4, #16]
 801f876:	6820      	ldr	r0, [r4, #0]
 801f878:	1ac0      	subs	r0, r0, r3
 801f87a:	6963      	ldr	r3, [r4, #20]
 801f87c:	b2f6      	uxtb	r6, r6
 801f87e:	4283      	cmp	r3, r0
 801f880:	4637      	mov	r7, r6
 801f882:	dc04      	bgt.n	801f88e <__swbuf_r+0x42>
 801f884:	4621      	mov	r1, r4
 801f886:	4628      	mov	r0, r5
 801f888:	f7fe f89c 	bl	801d9c4 <_fflush_r>
 801f88c:	bb30      	cbnz	r0, 801f8dc <__swbuf_r+0x90>
 801f88e:	68a3      	ldr	r3, [r4, #8]
 801f890:	3b01      	subs	r3, #1
 801f892:	60a3      	str	r3, [r4, #8]
 801f894:	6823      	ldr	r3, [r4, #0]
 801f896:	1c5a      	adds	r2, r3, #1
 801f898:	6022      	str	r2, [r4, #0]
 801f89a:	701e      	strb	r6, [r3, #0]
 801f89c:	6963      	ldr	r3, [r4, #20]
 801f89e:	3001      	adds	r0, #1
 801f8a0:	4283      	cmp	r3, r0
 801f8a2:	d004      	beq.n	801f8ae <__swbuf_r+0x62>
 801f8a4:	89a3      	ldrh	r3, [r4, #12]
 801f8a6:	07db      	lsls	r3, r3, #31
 801f8a8:	d506      	bpl.n	801f8b8 <__swbuf_r+0x6c>
 801f8aa:	2e0a      	cmp	r6, #10
 801f8ac:	d104      	bne.n	801f8b8 <__swbuf_r+0x6c>
 801f8ae:	4621      	mov	r1, r4
 801f8b0:	4628      	mov	r0, r5
 801f8b2:	f7fe f887 	bl	801d9c4 <_fflush_r>
 801f8b6:	b988      	cbnz	r0, 801f8dc <__swbuf_r+0x90>
 801f8b8:	4638      	mov	r0, r7
 801f8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f8bc:	4b0a      	ldr	r3, [pc, #40]	; (801f8e8 <__swbuf_r+0x9c>)
 801f8be:	429c      	cmp	r4, r3
 801f8c0:	d101      	bne.n	801f8c6 <__swbuf_r+0x7a>
 801f8c2:	68ac      	ldr	r4, [r5, #8]
 801f8c4:	e7cf      	b.n	801f866 <__swbuf_r+0x1a>
 801f8c6:	4b09      	ldr	r3, [pc, #36]	; (801f8ec <__swbuf_r+0xa0>)
 801f8c8:	429c      	cmp	r4, r3
 801f8ca:	bf08      	it	eq
 801f8cc:	68ec      	ldreq	r4, [r5, #12]
 801f8ce:	e7ca      	b.n	801f866 <__swbuf_r+0x1a>
 801f8d0:	4621      	mov	r1, r4
 801f8d2:	4628      	mov	r0, r5
 801f8d4:	f000 f81e 	bl	801f914 <__swsetup_r>
 801f8d8:	2800      	cmp	r0, #0
 801f8da:	d0cb      	beq.n	801f874 <__swbuf_r+0x28>
 801f8dc:	f04f 37ff 	mov.w	r7, #4294967295
 801f8e0:	e7ea      	b.n	801f8b8 <__swbuf_r+0x6c>
 801f8e2:	bf00      	nop
 801f8e4:	080264ec 	.word	0x080264ec
 801f8e8:	0802650c 	.word	0x0802650c
 801f8ec:	080264cc 	.word	0x080264cc

0801f8f0 <_write_r>:
 801f8f0:	b538      	push	{r3, r4, r5, lr}
 801f8f2:	4d07      	ldr	r5, [pc, #28]	; (801f910 <_write_r+0x20>)
 801f8f4:	4604      	mov	r4, r0
 801f8f6:	4608      	mov	r0, r1
 801f8f8:	4611      	mov	r1, r2
 801f8fa:	2200      	movs	r2, #0
 801f8fc:	602a      	str	r2, [r5, #0]
 801f8fe:	461a      	mov	r2, r3
 801f900:	f7e1 fa66 	bl	8000dd0 <_write>
 801f904:	1c43      	adds	r3, r0, #1
 801f906:	d102      	bne.n	801f90e <_write_r+0x1e>
 801f908:	682b      	ldr	r3, [r5, #0]
 801f90a:	b103      	cbz	r3, 801f90e <_write_r+0x1e>
 801f90c:	6023      	str	r3, [r4, #0]
 801f90e:	bd38      	pop	{r3, r4, r5, pc}
 801f910:	20000e2c 	.word	0x20000e2c

0801f914 <__swsetup_r>:
 801f914:	4b32      	ldr	r3, [pc, #200]	; (801f9e0 <__swsetup_r+0xcc>)
 801f916:	b570      	push	{r4, r5, r6, lr}
 801f918:	681d      	ldr	r5, [r3, #0]
 801f91a:	4606      	mov	r6, r0
 801f91c:	460c      	mov	r4, r1
 801f91e:	b125      	cbz	r5, 801f92a <__swsetup_r+0x16>
 801f920:	69ab      	ldr	r3, [r5, #24]
 801f922:	b913      	cbnz	r3, 801f92a <__swsetup_r+0x16>
 801f924:	4628      	mov	r0, r5
 801f926:	f7fe f8f3 	bl	801db10 <__sinit>
 801f92a:	4b2e      	ldr	r3, [pc, #184]	; (801f9e4 <__swsetup_r+0xd0>)
 801f92c:	429c      	cmp	r4, r3
 801f92e:	d10f      	bne.n	801f950 <__swsetup_r+0x3c>
 801f930:	686c      	ldr	r4, [r5, #4]
 801f932:	89a3      	ldrh	r3, [r4, #12]
 801f934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f938:	0719      	lsls	r1, r3, #28
 801f93a:	d42c      	bmi.n	801f996 <__swsetup_r+0x82>
 801f93c:	06dd      	lsls	r5, r3, #27
 801f93e:	d411      	bmi.n	801f964 <__swsetup_r+0x50>
 801f940:	2309      	movs	r3, #9
 801f942:	6033      	str	r3, [r6, #0]
 801f944:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f948:	81a3      	strh	r3, [r4, #12]
 801f94a:	f04f 30ff 	mov.w	r0, #4294967295
 801f94e:	e03e      	b.n	801f9ce <__swsetup_r+0xba>
 801f950:	4b25      	ldr	r3, [pc, #148]	; (801f9e8 <__swsetup_r+0xd4>)
 801f952:	429c      	cmp	r4, r3
 801f954:	d101      	bne.n	801f95a <__swsetup_r+0x46>
 801f956:	68ac      	ldr	r4, [r5, #8]
 801f958:	e7eb      	b.n	801f932 <__swsetup_r+0x1e>
 801f95a:	4b24      	ldr	r3, [pc, #144]	; (801f9ec <__swsetup_r+0xd8>)
 801f95c:	429c      	cmp	r4, r3
 801f95e:	bf08      	it	eq
 801f960:	68ec      	ldreq	r4, [r5, #12]
 801f962:	e7e6      	b.n	801f932 <__swsetup_r+0x1e>
 801f964:	0758      	lsls	r0, r3, #29
 801f966:	d512      	bpl.n	801f98e <__swsetup_r+0x7a>
 801f968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f96a:	b141      	cbz	r1, 801f97e <__swsetup_r+0x6a>
 801f96c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f970:	4299      	cmp	r1, r3
 801f972:	d002      	beq.n	801f97a <__swsetup_r+0x66>
 801f974:	4630      	mov	r0, r6
 801f976:	f7fe fd1b 	bl	801e3b0 <_free_r>
 801f97a:	2300      	movs	r3, #0
 801f97c:	6363      	str	r3, [r4, #52]	; 0x34
 801f97e:	89a3      	ldrh	r3, [r4, #12]
 801f980:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f984:	81a3      	strh	r3, [r4, #12]
 801f986:	2300      	movs	r3, #0
 801f988:	6063      	str	r3, [r4, #4]
 801f98a:	6923      	ldr	r3, [r4, #16]
 801f98c:	6023      	str	r3, [r4, #0]
 801f98e:	89a3      	ldrh	r3, [r4, #12]
 801f990:	f043 0308 	orr.w	r3, r3, #8
 801f994:	81a3      	strh	r3, [r4, #12]
 801f996:	6923      	ldr	r3, [r4, #16]
 801f998:	b94b      	cbnz	r3, 801f9ae <__swsetup_r+0x9a>
 801f99a:	89a3      	ldrh	r3, [r4, #12]
 801f99c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f9a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f9a4:	d003      	beq.n	801f9ae <__swsetup_r+0x9a>
 801f9a6:	4621      	mov	r1, r4
 801f9a8:	4630      	mov	r0, r6
 801f9aa:	f7fe fc8b 	bl	801e2c4 <__smakebuf_r>
 801f9ae:	89a0      	ldrh	r0, [r4, #12]
 801f9b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f9b4:	f010 0301 	ands.w	r3, r0, #1
 801f9b8:	d00a      	beq.n	801f9d0 <__swsetup_r+0xbc>
 801f9ba:	2300      	movs	r3, #0
 801f9bc:	60a3      	str	r3, [r4, #8]
 801f9be:	6963      	ldr	r3, [r4, #20]
 801f9c0:	425b      	negs	r3, r3
 801f9c2:	61a3      	str	r3, [r4, #24]
 801f9c4:	6923      	ldr	r3, [r4, #16]
 801f9c6:	b943      	cbnz	r3, 801f9da <__swsetup_r+0xc6>
 801f9c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f9cc:	d1ba      	bne.n	801f944 <__swsetup_r+0x30>
 801f9ce:	bd70      	pop	{r4, r5, r6, pc}
 801f9d0:	0781      	lsls	r1, r0, #30
 801f9d2:	bf58      	it	pl
 801f9d4:	6963      	ldrpl	r3, [r4, #20]
 801f9d6:	60a3      	str	r3, [r4, #8]
 801f9d8:	e7f4      	b.n	801f9c4 <__swsetup_r+0xb0>
 801f9da:	2000      	movs	r0, #0
 801f9dc:	e7f7      	b.n	801f9ce <__swsetup_r+0xba>
 801f9de:	bf00      	nop
 801f9e0:	20000104 	.word	0x20000104
 801f9e4:	080264ec 	.word	0x080264ec
 801f9e8:	0802650c 	.word	0x0802650c
 801f9ec:	080264cc 	.word	0x080264cc

0801f9f0 <__register_exitproc>:
 801f9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f9f4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801fab0 <__register_exitproc+0xc0>
 801f9f8:	4606      	mov	r6, r0
 801f9fa:	f8d8 0000 	ldr.w	r0, [r8]
 801f9fe:	461f      	mov	r7, r3
 801fa00:	460d      	mov	r5, r1
 801fa02:	4691      	mov	r9, r2
 801fa04:	f7fe fc37 	bl	801e276 <__retarget_lock_acquire_recursive>
 801fa08:	4b25      	ldr	r3, [pc, #148]	; (801faa0 <__register_exitproc+0xb0>)
 801fa0a:	681c      	ldr	r4, [r3, #0]
 801fa0c:	b934      	cbnz	r4, 801fa1c <__register_exitproc+0x2c>
 801fa0e:	4c25      	ldr	r4, [pc, #148]	; (801faa4 <__register_exitproc+0xb4>)
 801fa10:	601c      	str	r4, [r3, #0]
 801fa12:	4b25      	ldr	r3, [pc, #148]	; (801faa8 <__register_exitproc+0xb8>)
 801fa14:	b113      	cbz	r3, 801fa1c <__register_exitproc+0x2c>
 801fa16:	681b      	ldr	r3, [r3, #0]
 801fa18:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801fa1c:	6863      	ldr	r3, [r4, #4]
 801fa1e:	2b1f      	cmp	r3, #31
 801fa20:	dd07      	ble.n	801fa32 <__register_exitproc+0x42>
 801fa22:	f8d8 0000 	ldr.w	r0, [r8]
 801fa26:	f7fe fc28 	bl	801e27a <__retarget_lock_release_recursive>
 801fa2a:	f04f 30ff 	mov.w	r0, #4294967295
 801fa2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fa32:	b34e      	cbz	r6, 801fa88 <__register_exitproc+0x98>
 801fa34:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801fa38:	b988      	cbnz	r0, 801fa5e <__register_exitproc+0x6e>
 801fa3a:	4b1c      	ldr	r3, [pc, #112]	; (801faac <__register_exitproc+0xbc>)
 801fa3c:	b923      	cbnz	r3, 801fa48 <__register_exitproc+0x58>
 801fa3e:	f8d8 0000 	ldr.w	r0, [r8]
 801fa42:	f7fe fc19 	bl	801e278 <__retarget_lock_release>
 801fa46:	e7f0      	b.n	801fa2a <__register_exitproc+0x3a>
 801fa48:	f44f 7084 	mov.w	r0, #264	; 0x108
 801fa4c:	f7fe fc7a 	bl	801e344 <malloc>
 801fa50:	2800      	cmp	r0, #0
 801fa52:	d0f4      	beq.n	801fa3e <__register_exitproc+0x4e>
 801fa54:	2300      	movs	r3, #0
 801fa56:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801fa5a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801fa5e:	6863      	ldr	r3, [r4, #4]
 801fa60:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801fa64:	2201      	movs	r2, #1
 801fa66:	409a      	lsls	r2, r3
 801fa68:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801fa6c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801fa70:	4313      	orrs	r3, r2
 801fa72:	2e02      	cmp	r6, #2
 801fa74:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801fa78:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801fa7c:	bf02      	ittt	eq
 801fa7e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801fa82:	431a      	orreq	r2, r3
 801fa84:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801fa88:	6863      	ldr	r3, [r4, #4]
 801fa8a:	f8d8 0000 	ldr.w	r0, [r8]
 801fa8e:	1c5a      	adds	r2, r3, #1
 801fa90:	3302      	adds	r3, #2
 801fa92:	6062      	str	r2, [r4, #4]
 801fa94:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801fa98:	f7fe fbef 	bl	801e27a <__retarget_lock_release_recursive>
 801fa9c:	2000      	movs	r0, #0
 801fa9e:	e7c6      	b.n	801fa2e <__register_exitproc+0x3e>
 801faa0:	20000e18 	.word	0x20000e18
 801faa4:	20000d8c 	.word	0x20000d8c
 801faa8:	00000000 	.word	0x00000000
 801faac:	0801e345 	.word	0x0801e345
 801fab0:	20000170 	.word	0x20000170

0801fab4 <abs>:
 801fab4:	2800      	cmp	r0, #0
 801fab6:	bfb8      	it	lt
 801fab8:	4240      	neglt	r0, r0
 801faba:	4770      	bx	lr

0801fabc <__assert_func>:
 801fabc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fabe:	4614      	mov	r4, r2
 801fac0:	461a      	mov	r2, r3
 801fac2:	4b09      	ldr	r3, [pc, #36]	; (801fae8 <__assert_func+0x2c>)
 801fac4:	681b      	ldr	r3, [r3, #0]
 801fac6:	4605      	mov	r5, r0
 801fac8:	68d8      	ldr	r0, [r3, #12]
 801faca:	b14c      	cbz	r4, 801fae0 <__assert_func+0x24>
 801facc:	4b07      	ldr	r3, [pc, #28]	; (801faec <__assert_func+0x30>)
 801face:	9100      	str	r1, [sp, #0]
 801fad0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fad4:	4906      	ldr	r1, [pc, #24]	; (801faf0 <__assert_func+0x34>)
 801fad6:	462b      	mov	r3, r5
 801fad8:	f000 f854 	bl	801fb84 <fiprintf>
 801fadc:	f7fd fe5c 	bl	801d798 <abort>
 801fae0:	4b04      	ldr	r3, [pc, #16]	; (801faf4 <__assert_func+0x38>)
 801fae2:	461c      	mov	r4, r3
 801fae4:	e7f3      	b.n	801face <__assert_func+0x12>
 801fae6:	bf00      	nop
 801fae8:	20000104 	.word	0x20000104
 801faec:	08026924 	.word	0x08026924
 801faf0:	08026931 	.word	0x08026931
 801faf4:	0802695f 	.word	0x0802695f

0801faf8 <_close_r>:
 801faf8:	b538      	push	{r3, r4, r5, lr}
 801fafa:	4d06      	ldr	r5, [pc, #24]	; (801fb14 <_close_r+0x1c>)
 801fafc:	2300      	movs	r3, #0
 801fafe:	4604      	mov	r4, r0
 801fb00:	4608      	mov	r0, r1
 801fb02:	602b      	str	r3, [r5, #0]
 801fb04:	f7e1 f980 	bl	8000e08 <_close>
 801fb08:	1c43      	adds	r3, r0, #1
 801fb0a:	d102      	bne.n	801fb12 <_close_r+0x1a>
 801fb0c:	682b      	ldr	r3, [r5, #0]
 801fb0e:	b103      	cbz	r3, 801fb12 <_close_r+0x1a>
 801fb10:	6023      	str	r3, [r4, #0]
 801fb12:	bd38      	pop	{r3, r4, r5, pc}
 801fb14:	20000e2c 	.word	0x20000e2c

0801fb18 <__sflags>:
 801fb18:	780b      	ldrb	r3, [r1, #0]
 801fb1a:	2b72      	cmp	r3, #114	; 0x72
 801fb1c:	b530      	push	{r4, r5, lr}
 801fb1e:	d022      	beq.n	801fb66 <__sflags+0x4e>
 801fb20:	2b77      	cmp	r3, #119	; 0x77
 801fb22:	d024      	beq.n	801fb6e <__sflags+0x56>
 801fb24:	2b61      	cmp	r3, #97	; 0x61
 801fb26:	d027      	beq.n	801fb78 <__sflags+0x60>
 801fb28:	2316      	movs	r3, #22
 801fb2a:	6003      	str	r3, [r0, #0]
 801fb2c:	2000      	movs	r0, #0
 801fb2e:	bd30      	pop	{r4, r5, pc}
 801fb30:	2d62      	cmp	r5, #98	; 0x62
 801fb32:	d012      	beq.n	801fb5a <__sflags+0x42>
 801fb34:	2d78      	cmp	r5, #120	; 0x78
 801fb36:	d013      	beq.n	801fb60 <__sflags+0x48>
 801fb38:	2d2b      	cmp	r5, #43	; 0x2b
 801fb3a:	d107      	bne.n	801fb4c <__sflags+0x34>
 801fb3c:	f020 001c 	bic.w	r0, r0, #28
 801fb40:	f023 0303 	bic.w	r3, r3, #3
 801fb44:	f040 0010 	orr.w	r0, r0, #16
 801fb48:	f043 0302 	orr.w	r3, r3, #2
 801fb4c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801fb50:	2d00      	cmp	r5, #0
 801fb52:	d1ed      	bne.n	801fb30 <__sflags+0x18>
 801fb54:	4323      	orrs	r3, r4
 801fb56:	6013      	str	r3, [r2, #0]
 801fb58:	e7e9      	b.n	801fb2e <__sflags+0x16>
 801fb5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801fb5e:	e7f5      	b.n	801fb4c <__sflags+0x34>
 801fb60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801fb64:	e7f2      	b.n	801fb4c <__sflags+0x34>
 801fb66:	2400      	movs	r4, #0
 801fb68:	4623      	mov	r3, r4
 801fb6a:	2004      	movs	r0, #4
 801fb6c:	e7ee      	b.n	801fb4c <__sflags+0x34>
 801fb6e:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801fb72:	2301      	movs	r3, #1
 801fb74:	2008      	movs	r0, #8
 801fb76:	e7e9      	b.n	801fb4c <__sflags+0x34>
 801fb78:	f44f 7402 	mov.w	r4, #520	; 0x208
 801fb7c:	2301      	movs	r3, #1
 801fb7e:	f44f 7084 	mov.w	r0, #264	; 0x108
 801fb82:	e7e3      	b.n	801fb4c <__sflags+0x34>

0801fb84 <fiprintf>:
 801fb84:	b40e      	push	{r1, r2, r3}
 801fb86:	b503      	push	{r0, r1, lr}
 801fb88:	4601      	mov	r1, r0
 801fb8a:	ab03      	add	r3, sp, #12
 801fb8c:	4805      	ldr	r0, [pc, #20]	; (801fba4 <fiprintf+0x20>)
 801fb8e:	f853 2b04 	ldr.w	r2, [r3], #4
 801fb92:	6800      	ldr	r0, [r0, #0]
 801fb94:	9301      	str	r3, [sp, #4]
 801fb96:	f000 faff 	bl	8020198 <_vfiprintf_r>
 801fb9a:	b002      	add	sp, #8
 801fb9c:	f85d eb04 	ldr.w	lr, [sp], #4
 801fba0:	b003      	add	sp, #12
 801fba2:	4770      	bx	lr
 801fba4:	20000104 	.word	0x20000104

0801fba8 <_fstat_r>:
 801fba8:	b538      	push	{r3, r4, r5, lr}
 801fbaa:	4d07      	ldr	r5, [pc, #28]	; (801fbc8 <_fstat_r+0x20>)
 801fbac:	2300      	movs	r3, #0
 801fbae:	4604      	mov	r4, r0
 801fbb0:	4608      	mov	r0, r1
 801fbb2:	4611      	mov	r1, r2
 801fbb4:	602b      	str	r3, [r5, #0]
 801fbb6:	f7e1 f933 	bl	8000e20 <_fstat>
 801fbba:	1c43      	adds	r3, r0, #1
 801fbbc:	d102      	bne.n	801fbc4 <_fstat_r+0x1c>
 801fbbe:	682b      	ldr	r3, [r5, #0]
 801fbc0:	b103      	cbz	r3, 801fbc4 <_fstat_r+0x1c>
 801fbc2:	6023      	str	r3, [r4, #0]
 801fbc4:	bd38      	pop	{r3, r4, r5, pc}
 801fbc6:	bf00      	nop
 801fbc8:	20000e2c 	.word	0x20000e2c

0801fbcc <_findenv_r>:
 801fbcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbd0:	4607      	mov	r7, r0
 801fbd2:	4689      	mov	r9, r1
 801fbd4:	4616      	mov	r6, r2
 801fbd6:	f000 fe85 	bl	80208e4 <__env_lock>
 801fbda:	4b18      	ldr	r3, [pc, #96]	; (801fc3c <_findenv_r+0x70>)
 801fbdc:	681c      	ldr	r4, [r3, #0]
 801fbde:	469a      	mov	sl, r3
 801fbe0:	b134      	cbz	r4, 801fbf0 <_findenv_r+0x24>
 801fbe2:	464b      	mov	r3, r9
 801fbe4:	4698      	mov	r8, r3
 801fbe6:	f813 1b01 	ldrb.w	r1, [r3], #1
 801fbea:	b139      	cbz	r1, 801fbfc <_findenv_r+0x30>
 801fbec:	293d      	cmp	r1, #61	; 0x3d
 801fbee:	d1f9      	bne.n	801fbe4 <_findenv_r+0x18>
 801fbf0:	4638      	mov	r0, r7
 801fbf2:	f000 fe7d 	bl	80208f0 <__env_unlock>
 801fbf6:	2000      	movs	r0, #0
 801fbf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbfc:	eba8 0809 	sub.w	r8, r8, r9
 801fc00:	46a3      	mov	fp, r4
 801fc02:	f854 0b04 	ldr.w	r0, [r4], #4
 801fc06:	2800      	cmp	r0, #0
 801fc08:	d0f2      	beq.n	801fbf0 <_findenv_r+0x24>
 801fc0a:	4642      	mov	r2, r8
 801fc0c:	4649      	mov	r1, r9
 801fc0e:	f000 fe49 	bl	80208a4 <strncmp>
 801fc12:	2800      	cmp	r0, #0
 801fc14:	d1f4      	bne.n	801fc00 <_findenv_r+0x34>
 801fc16:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801fc1a:	eb03 0508 	add.w	r5, r3, r8
 801fc1e:	f813 3008 	ldrb.w	r3, [r3, r8]
 801fc22:	2b3d      	cmp	r3, #61	; 0x3d
 801fc24:	d1ec      	bne.n	801fc00 <_findenv_r+0x34>
 801fc26:	f8da 3000 	ldr.w	r3, [sl]
 801fc2a:	ebab 0303 	sub.w	r3, fp, r3
 801fc2e:	109b      	asrs	r3, r3, #2
 801fc30:	4638      	mov	r0, r7
 801fc32:	6033      	str	r3, [r6, #0]
 801fc34:	f000 fe5c 	bl	80208f0 <__env_unlock>
 801fc38:	1c68      	adds	r0, r5, #1
 801fc3a:	e7dd      	b.n	801fbf8 <_findenv_r+0x2c>
 801fc3c:	20000000 	.word	0x20000000

0801fc40 <_getenv_r>:
 801fc40:	b507      	push	{r0, r1, r2, lr}
 801fc42:	aa01      	add	r2, sp, #4
 801fc44:	f7ff ffc2 	bl	801fbcc <_findenv_r>
 801fc48:	b003      	add	sp, #12
 801fc4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801fc50 <__gettzinfo>:
 801fc50:	4800      	ldr	r0, [pc, #0]	; (801fc54 <__gettzinfo+0x4>)
 801fc52:	4770      	bx	lr
 801fc54:	20000178 	.word	0x20000178

0801fc58 <gmtime_r>:
 801fc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc5c:	e9d0 6700 	ldrd	r6, r7, [r0]
 801fc60:	460c      	mov	r4, r1
 801fc62:	4a51      	ldr	r2, [pc, #324]	; (801fda8 <gmtime_r+0x150>)
 801fc64:	2300      	movs	r3, #0
 801fc66:	4630      	mov	r0, r6
 801fc68:	4639      	mov	r1, r7
 801fc6a:	f7e0 fda3 	bl	80007b4 <__aeabi_ldivmod>
 801fc6e:	4639      	mov	r1, r7
 801fc70:	4605      	mov	r5, r0
 801fc72:	4a4d      	ldr	r2, [pc, #308]	; (801fda8 <gmtime_r+0x150>)
 801fc74:	4630      	mov	r0, r6
 801fc76:	2300      	movs	r3, #0
 801fc78:	f7e0 fd9c 	bl	80007b4 <__aeabi_ldivmod>
 801fc7c:	2a00      	cmp	r2, #0
 801fc7e:	bfbc      	itt	lt
 801fc80:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801fc84:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801fc88:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801fc8c:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801fc90:	fbb2 f3f1 	udiv	r3, r2, r1
 801fc94:	fb01 2213 	mls	r2, r1, r3, r2
 801fc98:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801fc9c:	bfac      	ite	ge
 801fc9e:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801fca2:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801fca6:	60a3      	str	r3, [r4, #8]
 801fca8:	fbb2 f3f1 	udiv	r3, r2, r1
 801fcac:	fb01 2213 	mls	r2, r1, r3, r2
 801fcb0:	6063      	str	r3, [r4, #4]
 801fcb2:	6022      	str	r2, [r4, #0]
 801fcb4:	1cc3      	adds	r3, r0, #3
 801fcb6:	2207      	movs	r2, #7
 801fcb8:	fb93 f2f2 	sdiv	r2, r3, r2
 801fcbc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801fcc0:	1a9b      	subs	r3, r3, r2
 801fcc2:	bf48      	it	mi
 801fcc4:	3307      	addmi	r3, #7
 801fcc6:	2800      	cmp	r0, #0
 801fcc8:	61a3      	str	r3, [r4, #24]
 801fcca:	bfb8      	it	lt
 801fccc:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801fcd0:	4936      	ldr	r1, [pc, #216]	; (801fdac <gmtime_r+0x154>)
 801fcd2:	bfae      	itee	ge
 801fcd4:	fb90 f1f1 	sdivge	r1, r0, r1
 801fcd8:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801fcdc:	fb93 f1f1 	sdivlt	r1, r3, r1
 801fce0:	4b33      	ldr	r3, [pc, #204]	; (801fdb0 <gmtime_r+0x158>)
 801fce2:	fb03 0001 	mla	r0, r3, r1, r0
 801fce6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801fcea:	fbb0 f2f2 	udiv	r2, r0, r2
 801fcee:	4402      	add	r2, r0
 801fcf0:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801fcf4:	fbb0 f3fc 	udiv	r3, r0, ip
 801fcf8:	1ad2      	subs	r2, r2, r3
 801fcfa:	f240 176d 	movw	r7, #365	; 0x16d
 801fcfe:	4b2d      	ldr	r3, [pc, #180]	; (801fdb4 <gmtime_r+0x15c>)
 801fd00:	fbb0 f3f3 	udiv	r3, r0, r3
 801fd04:	2664      	movs	r6, #100	; 0x64
 801fd06:	1ad3      	subs	r3, r2, r3
 801fd08:	fbb3 f5f7 	udiv	r5, r3, r7
 801fd0c:	fbb3 f3fc 	udiv	r3, r3, ip
 801fd10:	fbb5 f2f6 	udiv	r2, r5, r6
 801fd14:	1ad3      	subs	r3, r2, r3
 801fd16:	4403      	add	r3, r0
 801fd18:	fb07 3315 	mls	r3, r7, r5, r3
 801fd1c:	2099      	movs	r0, #153	; 0x99
 801fd1e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801fd22:	f10c 0c02 	add.w	ip, ip, #2
 801fd26:	f103 0e01 	add.w	lr, r3, #1
 801fd2a:	fbbc f7f0 	udiv	r7, ip, r0
 801fd2e:	4378      	muls	r0, r7
 801fd30:	3002      	adds	r0, #2
 801fd32:	f04f 0805 	mov.w	r8, #5
 801fd36:	fbb0 f0f8 	udiv	r0, r0, r8
 801fd3a:	ebae 0000 	sub.w	r0, lr, r0
 801fd3e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801fd42:	45f4      	cmp	ip, lr
 801fd44:	bf94      	ite	ls
 801fd46:	f04f 0c02 	movls.w	ip, #2
 801fd4a:	f06f 0c09 	mvnhi.w	ip, #9
 801fd4e:	4467      	add	r7, ip
 801fd50:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801fd54:	fb0c 5101 	mla	r1, ip, r1, r5
 801fd58:	2f01      	cmp	r7, #1
 801fd5a:	bf98      	it	ls
 801fd5c:	3101      	addls	r1, #1
 801fd5e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801fd62:	d30c      	bcc.n	801fd7e <gmtime_r+0x126>
 801fd64:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801fd68:	61e3      	str	r3, [r4, #28]
 801fd6a:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801fd6e:	2300      	movs	r3, #0
 801fd70:	60e0      	str	r0, [r4, #12]
 801fd72:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801fd76:	6223      	str	r3, [r4, #32]
 801fd78:	4620      	mov	r0, r4
 801fd7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd7e:	f015 0f03 	tst.w	r5, #3
 801fd82:	d102      	bne.n	801fd8a <gmtime_r+0x132>
 801fd84:	fb06 5212 	mls	r2, r6, r2, r5
 801fd88:	b95a      	cbnz	r2, 801fda2 <gmtime_r+0x14a>
 801fd8a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801fd8e:	fbb5 f2f6 	udiv	r2, r5, r6
 801fd92:	fb06 5212 	mls	r2, r6, r2, r5
 801fd96:	fab2 f282 	clz	r2, r2
 801fd9a:	0952      	lsrs	r2, r2, #5
 801fd9c:	333b      	adds	r3, #59	; 0x3b
 801fd9e:	4413      	add	r3, r2
 801fda0:	e7e2      	b.n	801fd68 <gmtime_r+0x110>
 801fda2:	2201      	movs	r2, #1
 801fda4:	e7fa      	b.n	801fd9c <gmtime_r+0x144>
 801fda6:	bf00      	nop
 801fda8:	00015180 	.word	0x00015180
 801fdac:	00023ab1 	.word	0x00023ab1
 801fdb0:	fffdc54f 	.word	0xfffdc54f
 801fdb4:	00023ab0 	.word	0x00023ab0

0801fdb8 <_isatty_r>:
 801fdb8:	b538      	push	{r3, r4, r5, lr}
 801fdba:	4d06      	ldr	r5, [pc, #24]	; (801fdd4 <_isatty_r+0x1c>)
 801fdbc:	2300      	movs	r3, #0
 801fdbe:	4604      	mov	r4, r0
 801fdc0:	4608      	mov	r0, r1
 801fdc2:	602b      	str	r3, [r5, #0]
 801fdc4:	f7e1 f83c 	bl	8000e40 <_isatty>
 801fdc8:	1c43      	adds	r3, r0, #1
 801fdca:	d102      	bne.n	801fdd2 <_isatty_r+0x1a>
 801fdcc:	682b      	ldr	r3, [r5, #0]
 801fdce:	b103      	cbz	r3, 801fdd2 <_isatty_r+0x1a>
 801fdd0:	6023      	str	r3, [r4, #0]
 801fdd2:	bd38      	pop	{r3, r4, r5, pc}
 801fdd4:	20000e2c 	.word	0x20000e2c

0801fdd8 <labs>:
 801fdd8:	2800      	cmp	r0, #0
 801fdda:	bfb8      	it	lt
 801fddc:	4240      	neglt	r0, r0
 801fdde:	4770      	bx	lr

0801fde0 <_lseek_r>:
 801fde0:	b538      	push	{r3, r4, r5, lr}
 801fde2:	4d07      	ldr	r5, [pc, #28]	; (801fe00 <_lseek_r+0x20>)
 801fde4:	4604      	mov	r4, r0
 801fde6:	4608      	mov	r0, r1
 801fde8:	4611      	mov	r1, r2
 801fdea:	2200      	movs	r2, #0
 801fdec:	602a      	str	r2, [r5, #0]
 801fdee:	461a      	mov	r2, r3
 801fdf0:	f7e1 f831 	bl	8000e56 <_lseek>
 801fdf4:	1c43      	adds	r3, r0, #1
 801fdf6:	d102      	bne.n	801fdfe <_lseek_r+0x1e>
 801fdf8:	682b      	ldr	r3, [r5, #0]
 801fdfa:	b103      	cbz	r3, 801fdfe <_lseek_r+0x1e>
 801fdfc:	6023      	str	r3, [r4, #0]
 801fdfe:	bd38      	pop	{r3, r4, r5, pc}
 801fe00:	20000e2c 	.word	0x20000e2c

0801fe04 <__ascii_mbtowc>:
 801fe04:	b082      	sub	sp, #8
 801fe06:	b901      	cbnz	r1, 801fe0a <__ascii_mbtowc+0x6>
 801fe08:	a901      	add	r1, sp, #4
 801fe0a:	b142      	cbz	r2, 801fe1e <__ascii_mbtowc+0x1a>
 801fe0c:	b14b      	cbz	r3, 801fe22 <__ascii_mbtowc+0x1e>
 801fe0e:	7813      	ldrb	r3, [r2, #0]
 801fe10:	600b      	str	r3, [r1, #0]
 801fe12:	7812      	ldrb	r2, [r2, #0]
 801fe14:	1e10      	subs	r0, r2, #0
 801fe16:	bf18      	it	ne
 801fe18:	2001      	movne	r0, #1
 801fe1a:	b002      	add	sp, #8
 801fe1c:	4770      	bx	lr
 801fe1e:	4610      	mov	r0, r2
 801fe20:	e7fb      	b.n	801fe1a <__ascii_mbtowc+0x16>
 801fe22:	f06f 0001 	mvn.w	r0, #1
 801fe26:	e7f8      	b.n	801fe1a <__ascii_mbtowc+0x16>

0801fe28 <__malloc_lock>:
 801fe28:	4801      	ldr	r0, [pc, #4]	; (801fe30 <__malloc_lock+0x8>)
 801fe2a:	f7fe ba24 	b.w	801e276 <__retarget_lock_acquire_recursive>
 801fe2e:	bf00      	nop
 801fe30:	20000e24 	.word	0x20000e24

0801fe34 <__malloc_unlock>:
 801fe34:	4801      	ldr	r0, [pc, #4]	; (801fe3c <__malloc_unlock+0x8>)
 801fe36:	f7fe ba20 	b.w	801e27a <__retarget_lock_release_recursive>
 801fe3a:	bf00      	nop
 801fe3c:	20000e24 	.word	0x20000e24

0801fe40 <_realloc_r>:
 801fe40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe42:	4607      	mov	r7, r0
 801fe44:	4614      	mov	r4, r2
 801fe46:	460e      	mov	r6, r1
 801fe48:	b921      	cbnz	r1, 801fe54 <_realloc_r+0x14>
 801fe4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801fe4e:	4611      	mov	r1, r2
 801fe50:	f7fe bafe 	b.w	801e450 <_malloc_r>
 801fe54:	b922      	cbnz	r2, 801fe60 <_realloc_r+0x20>
 801fe56:	f7fe faab 	bl	801e3b0 <_free_r>
 801fe5a:	4625      	mov	r5, r4
 801fe5c:	4628      	mov	r0, r5
 801fe5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fe60:	f000 fd66 	bl	8020930 <_malloc_usable_size_r>
 801fe64:	42a0      	cmp	r0, r4
 801fe66:	d20f      	bcs.n	801fe88 <_realloc_r+0x48>
 801fe68:	4621      	mov	r1, r4
 801fe6a:	4638      	mov	r0, r7
 801fe6c:	f7fe faf0 	bl	801e450 <_malloc_r>
 801fe70:	4605      	mov	r5, r0
 801fe72:	2800      	cmp	r0, #0
 801fe74:	d0f2      	beq.n	801fe5c <_realloc_r+0x1c>
 801fe76:	4631      	mov	r1, r6
 801fe78:	4622      	mov	r2, r4
 801fe7a:	f7fe fa73 	bl	801e364 <memcpy>
 801fe7e:	4631      	mov	r1, r6
 801fe80:	4638      	mov	r0, r7
 801fe82:	f7fe fa95 	bl	801e3b0 <_free_r>
 801fe86:	e7e9      	b.n	801fe5c <_realloc_r+0x1c>
 801fe88:	4635      	mov	r5, r6
 801fe8a:	e7e7      	b.n	801fe5c <_realloc_r+0x1c>

0801fe8c <__ssputs_r>:
 801fe8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fe90:	688e      	ldr	r6, [r1, #8]
 801fe92:	429e      	cmp	r6, r3
 801fe94:	4682      	mov	sl, r0
 801fe96:	460c      	mov	r4, r1
 801fe98:	4690      	mov	r8, r2
 801fe9a:	461f      	mov	r7, r3
 801fe9c:	d838      	bhi.n	801ff10 <__ssputs_r+0x84>
 801fe9e:	898a      	ldrh	r2, [r1, #12]
 801fea0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801fea4:	d032      	beq.n	801ff0c <__ssputs_r+0x80>
 801fea6:	6825      	ldr	r5, [r4, #0]
 801fea8:	6909      	ldr	r1, [r1, #16]
 801feaa:	eba5 0901 	sub.w	r9, r5, r1
 801feae:	6965      	ldr	r5, [r4, #20]
 801feb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801feb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801feb8:	3301      	adds	r3, #1
 801feba:	444b      	add	r3, r9
 801febc:	106d      	asrs	r5, r5, #1
 801febe:	429d      	cmp	r5, r3
 801fec0:	bf38      	it	cc
 801fec2:	461d      	movcc	r5, r3
 801fec4:	0553      	lsls	r3, r2, #21
 801fec6:	d531      	bpl.n	801ff2c <__ssputs_r+0xa0>
 801fec8:	4629      	mov	r1, r5
 801feca:	f7fe fac1 	bl	801e450 <_malloc_r>
 801fece:	4606      	mov	r6, r0
 801fed0:	b950      	cbnz	r0, 801fee8 <__ssputs_r+0x5c>
 801fed2:	230c      	movs	r3, #12
 801fed4:	f8ca 3000 	str.w	r3, [sl]
 801fed8:	89a3      	ldrh	r3, [r4, #12]
 801feda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fede:	81a3      	strh	r3, [r4, #12]
 801fee0:	f04f 30ff 	mov.w	r0, #4294967295
 801fee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fee8:	6921      	ldr	r1, [r4, #16]
 801feea:	464a      	mov	r2, r9
 801feec:	f7fe fa3a 	bl	801e364 <memcpy>
 801fef0:	89a3      	ldrh	r3, [r4, #12]
 801fef2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801fef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fefa:	81a3      	strh	r3, [r4, #12]
 801fefc:	6126      	str	r6, [r4, #16]
 801fefe:	6165      	str	r5, [r4, #20]
 801ff00:	444e      	add	r6, r9
 801ff02:	eba5 0509 	sub.w	r5, r5, r9
 801ff06:	6026      	str	r6, [r4, #0]
 801ff08:	60a5      	str	r5, [r4, #8]
 801ff0a:	463e      	mov	r6, r7
 801ff0c:	42be      	cmp	r6, r7
 801ff0e:	d900      	bls.n	801ff12 <__ssputs_r+0x86>
 801ff10:	463e      	mov	r6, r7
 801ff12:	4632      	mov	r2, r6
 801ff14:	6820      	ldr	r0, [r4, #0]
 801ff16:	4641      	mov	r1, r8
 801ff18:	f000 fcf0 	bl	80208fc <memmove>
 801ff1c:	68a3      	ldr	r3, [r4, #8]
 801ff1e:	6822      	ldr	r2, [r4, #0]
 801ff20:	1b9b      	subs	r3, r3, r6
 801ff22:	4432      	add	r2, r6
 801ff24:	60a3      	str	r3, [r4, #8]
 801ff26:	6022      	str	r2, [r4, #0]
 801ff28:	2000      	movs	r0, #0
 801ff2a:	e7db      	b.n	801fee4 <__ssputs_r+0x58>
 801ff2c:	462a      	mov	r2, r5
 801ff2e:	f7ff ff87 	bl	801fe40 <_realloc_r>
 801ff32:	4606      	mov	r6, r0
 801ff34:	2800      	cmp	r0, #0
 801ff36:	d1e1      	bne.n	801fefc <__ssputs_r+0x70>
 801ff38:	6921      	ldr	r1, [r4, #16]
 801ff3a:	4650      	mov	r0, sl
 801ff3c:	f7fe fa38 	bl	801e3b0 <_free_r>
 801ff40:	e7c7      	b.n	801fed2 <__ssputs_r+0x46>
	...

0801ff44 <_svfiprintf_r>:
 801ff44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff48:	4698      	mov	r8, r3
 801ff4a:	898b      	ldrh	r3, [r1, #12]
 801ff4c:	061b      	lsls	r3, r3, #24
 801ff4e:	b09d      	sub	sp, #116	; 0x74
 801ff50:	4607      	mov	r7, r0
 801ff52:	460d      	mov	r5, r1
 801ff54:	4614      	mov	r4, r2
 801ff56:	d50e      	bpl.n	801ff76 <_svfiprintf_r+0x32>
 801ff58:	690b      	ldr	r3, [r1, #16]
 801ff5a:	b963      	cbnz	r3, 801ff76 <_svfiprintf_r+0x32>
 801ff5c:	2140      	movs	r1, #64	; 0x40
 801ff5e:	f7fe fa77 	bl	801e450 <_malloc_r>
 801ff62:	6028      	str	r0, [r5, #0]
 801ff64:	6128      	str	r0, [r5, #16]
 801ff66:	b920      	cbnz	r0, 801ff72 <_svfiprintf_r+0x2e>
 801ff68:	230c      	movs	r3, #12
 801ff6a:	603b      	str	r3, [r7, #0]
 801ff6c:	f04f 30ff 	mov.w	r0, #4294967295
 801ff70:	e0d1      	b.n	8020116 <_svfiprintf_r+0x1d2>
 801ff72:	2340      	movs	r3, #64	; 0x40
 801ff74:	616b      	str	r3, [r5, #20]
 801ff76:	2300      	movs	r3, #0
 801ff78:	9309      	str	r3, [sp, #36]	; 0x24
 801ff7a:	2320      	movs	r3, #32
 801ff7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ff80:	f8cd 800c 	str.w	r8, [sp, #12]
 801ff84:	2330      	movs	r3, #48	; 0x30
 801ff86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020130 <_svfiprintf_r+0x1ec>
 801ff8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ff8e:	f04f 0901 	mov.w	r9, #1
 801ff92:	4623      	mov	r3, r4
 801ff94:	469a      	mov	sl, r3
 801ff96:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ff9a:	b10a      	cbz	r2, 801ffa0 <_svfiprintf_r+0x5c>
 801ff9c:	2a25      	cmp	r2, #37	; 0x25
 801ff9e:	d1f9      	bne.n	801ff94 <_svfiprintf_r+0x50>
 801ffa0:	ebba 0b04 	subs.w	fp, sl, r4
 801ffa4:	d00b      	beq.n	801ffbe <_svfiprintf_r+0x7a>
 801ffa6:	465b      	mov	r3, fp
 801ffa8:	4622      	mov	r2, r4
 801ffaa:	4629      	mov	r1, r5
 801ffac:	4638      	mov	r0, r7
 801ffae:	f7ff ff6d 	bl	801fe8c <__ssputs_r>
 801ffb2:	3001      	adds	r0, #1
 801ffb4:	f000 80aa 	beq.w	802010c <_svfiprintf_r+0x1c8>
 801ffb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ffba:	445a      	add	r2, fp
 801ffbc:	9209      	str	r2, [sp, #36]	; 0x24
 801ffbe:	f89a 3000 	ldrb.w	r3, [sl]
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	f000 80a2 	beq.w	802010c <_svfiprintf_r+0x1c8>
 801ffc8:	2300      	movs	r3, #0
 801ffca:	f04f 32ff 	mov.w	r2, #4294967295
 801ffce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ffd2:	f10a 0a01 	add.w	sl, sl, #1
 801ffd6:	9304      	str	r3, [sp, #16]
 801ffd8:	9307      	str	r3, [sp, #28]
 801ffda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ffde:	931a      	str	r3, [sp, #104]	; 0x68
 801ffe0:	4654      	mov	r4, sl
 801ffe2:	2205      	movs	r2, #5
 801ffe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ffe8:	4851      	ldr	r0, [pc, #324]	; (8020130 <_svfiprintf_r+0x1ec>)
 801ffea:	f7e0 f939 	bl	8000260 <memchr>
 801ffee:	9a04      	ldr	r2, [sp, #16]
 801fff0:	b9d8      	cbnz	r0, 802002a <_svfiprintf_r+0xe6>
 801fff2:	06d0      	lsls	r0, r2, #27
 801fff4:	bf44      	itt	mi
 801fff6:	2320      	movmi	r3, #32
 801fff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fffc:	0711      	lsls	r1, r2, #28
 801fffe:	bf44      	itt	mi
 8020000:	232b      	movmi	r3, #43	; 0x2b
 8020002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020006:	f89a 3000 	ldrb.w	r3, [sl]
 802000a:	2b2a      	cmp	r3, #42	; 0x2a
 802000c:	d015      	beq.n	802003a <_svfiprintf_r+0xf6>
 802000e:	9a07      	ldr	r2, [sp, #28]
 8020010:	4654      	mov	r4, sl
 8020012:	2000      	movs	r0, #0
 8020014:	f04f 0c0a 	mov.w	ip, #10
 8020018:	4621      	mov	r1, r4
 802001a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802001e:	3b30      	subs	r3, #48	; 0x30
 8020020:	2b09      	cmp	r3, #9
 8020022:	d94e      	bls.n	80200c2 <_svfiprintf_r+0x17e>
 8020024:	b1b0      	cbz	r0, 8020054 <_svfiprintf_r+0x110>
 8020026:	9207      	str	r2, [sp, #28]
 8020028:	e014      	b.n	8020054 <_svfiprintf_r+0x110>
 802002a:	eba0 0308 	sub.w	r3, r0, r8
 802002e:	fa09 f303 	lsl.w	r3, r9, r3
 8020032:	4313      	orrs	r3, r2
 8020034:	9304      	str	r3, [sp, #16]
 8020036:	46a2      	mov	sl, r4
 8020038:	e7d2      	b.n	801ffe0 <_svfiprintf_r+0x9c>
 802003a:	9b03      	ldr	r3, [sp, #12]
 802003c:	1d19      	adds	r1, r3, #4
 802003e:	681b      	ldr	r3, [r3, #0]
 8020040:	9103      	str	r1, [sp, #12]
 8020042:	2b00      	cmp	r3, #0
 8020044:	bfbb      	ittet	lt
 8020046:	425b      	neglt	r3, r3
 8020048:	f042 0202 	orrlt.w	r2, r2, #2
 802004c:	9307      	strge	r3, [sp, #28]
 802004e:	9307      	strlt	r3, [sp, #28]
 8020050:	bfb8      	it	lt
 8020052:	9204      	strlt	r2, [sp, #16]
 8020054:	7823      	ldrb	r3, [r4, #0]
 8020056:	2b2e      	cmp	r3, #46	; 0x2e
 8020058:	d10c      	bne.n	8020074 <_svfiprintf_r+0x130>
 802005a:	7863      	ldrb	r3, [r4, #1]
 802005c:	2b2a      	cmp	r3, #42	; 0x2a
 802005e:	d135      	bne.n	80200cc <_svfiprintf_r+0x188>
 8020060:	9b03      	ldr	r3, [sp, #12]
 8020062:	1d1a      	adds	r2, r3, #4
 8020064:	681b      	ldr	r3, [r3, #0]
 8020066:	9203      	str	r2, [sp, #12]
 8020068:	2b00      	cmp	r3, #0
 802006a:	bfb8      	it	lt
 802006c:	f04f 33ff 	movlt.w	r3, #4294967295
 8020070:	3402      	adds	r4, #2
 8020072:	9305      	str	r3, [sp, #20]
 8020074:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020140 <_svfiprintf_r+0x1fc>
 8020078:	7821      	ldrb	r1, [r4, #0]
 802007a:	2203      	movs	r2, #3
 802007c:	4650      	mov	r0, sl
 802007e:	f7e0 f8ef 	bl	8000260 <memchr>
 8020082:	b140      	cbz	r0, 8020096 <_svfiprintf_r+0x152>
 8020084:	2340      	movs	r3, #64	; 0x40
 8020086:	eba0 000a 	sub.w	r0, r0, sl
 802008a:	fa03 f000 	lsl.w	r0, r3, r0
 802008e:	9b04      	ldr	r3, [sp, #16]
 8020090:	4303      	orrs	r3, r0
 8020092:	3401      	adds	r4, #1
 8020094:	9304      	str	r3, [sp, #16]
 8020096:	f814 1b01 	ldrb.w	r1, [r4], #1
 802009a:	4826      	ldr	r0, [pc, #152]	; (8020134 <_svfiprintf_r+0x1f0>)
 802009c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80200a0:	2206      	movs	r2, #6
 80200a2:	f7e0 f8dd 	bl	8000260 <memchr>
 80200a6:	2800      	cmp	r0, #0
 80200a8:	d038      	beq.n	802011c <_svfiprintf_r+0x1d8>
 80200aa:	4b23      	ldr	r3, [pc, #140]	; (8020138 <_svfiprintf_r+0x1f4>)
 80200ac:	bb1b      	cbnz	r3, 80200f6 <_svfiprintf_r+0x1b2>
 80200ae:	9b03      	ldr	r3, [sp, #12]
 80200b0:	3307      	adds	r3, #7
 80200b2:	f023 0307 	bic.w	r3, r3, #7
 80200b6:	3308      	adds	r3, #8
 80200b8:	9303      	str	r3, [sp, #12]
 80200ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200bc:	4433      	add	r3, r6
 80200be:	9309      	str	r3, [sp, #36]	; 0x24
 80200c0:	e767      	b.n	801ff92 <_svfiprintf_r+0x4e>
 80200c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80200c6:	460c      	mov	r4, r1
 80200c8:	2001      	movs	r0, #1
 80200ca:	e7a5      	b.n	8020018 <_svfiprintf_r+0xd4>
 80200cc:	2300      	movs	r3, #0
 80200ce:	3401      	adds	r4, #1
 80200d0:	9305      	str	r3, [sp, #20]
 80200d2:	4619      	mov	r1, r3
 80200d4:	f04f 0c0a 	mov.w	ip, #10
 80200d8:	4620      	mov	r0, r4
 80200da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80200de:	3a30      	subs	r2, #48	; 0x30
 80200e0:	2a09      	cmp	r2, #9
 80200e2:	d903      	bls.n	80200ec <_svfiprintf_r+0x1a8>
 80200e4:	2b00      	cmp	r3, #0
 80200e6:	d0c5      	beq.n	8020074 <_svfiprintf_r+0x130>
 80200e8:	9105      	str	r1, [sp, #20]
 80200ea:	e7c3      	b.n	8020074 <_svfiprintf_r+0x130>
 80200ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80200f0:	4604      	mov	r4, r0
 80200f2:	2301      	movs	r3, #1
 80200f4:	e7f0      	b.n	80200d8 <_svfiprintf_r+0x194>
 80200f6:	ab03      	add	r3, sp, #12
 80200f8:	9300      	str	r3, [sp, #0]
 80200fa:	462a      	mov	r2, r5
 80200fc:	4b0f      	ldr	r3, [pc, #60]	; (802013c <_svfiprintf_r+0x1f8>)
 80200fe:	a904      	add	r1, sp, #16
 8020100:	4638      	mov	r0, r7
 8020102:	f3af 8000 	nop.w
 8020106:	1c42      	adds	r2, r0, #1
 8020108:	4606      	mov	r6, r0
 802010a:	d1d6      	bne.n	80200ba <_svfiprintf_r+0x176>
 802010c:	89ab      	ldrh	r3, [r5, #12]
 802010e:	065b      	lsls	r3, r3, #25
 8020110:	f53f af2c 	bmi.w	801ff6c <_svfiprintf_r+0x28>
 8020114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020116:	b01d      	add	sp, #116	; 0x74
 8020118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802011c:	ab03      	add	r3, sp, #12
 802011e:	9300      	str	r3, [sp, #0]
 8020120:	462a      	mov	r2, r5
 8020122:	4b06      	ldr	r3, [pc, #24]	; (802013c <_svfiprintf_r+0x1f8>)
 8020124:	a904      	add	r1, sp, #16
 8020126:	4638      	mov	r0, r7
 8020128:	f000 f9d4 	bl	80204d4 <_printf_i>
 802012c:	e7eb      	b.n	8020106 <_svfiprintf_r+0x1c2>
 802012e:	bf00      	nop
 8020130:	08026a6b 	.word	0x08026a6b
 8020134:	08026a75 	.word	0x08026a75
 8020138:	00000000 	.word	0x00000000
 802013c:	0801fe8d 	.word	0x0801fe8d
 8020140:	08026a71 	.word	0x08026a71

08020144 <__sfputc_r>:
 8020144:	6893      	ldr	r3, [r2, #8]
 8020146:	3b01      	subs	r3, #1
 8020148:	2b00      	cmp	r3, #0
 802014a:	b410      	push	{r4}
 802014c:	6093      	str	r3, [r2, #8]
 802014e:	da08      	bge.n	8020162 <__sfputc_r+0x1e>
 8020150:	6994      	ldr	r4, [r2, #24]
 8020152:	42a3      	cmp	r3, r4
 8020154:	db01      	blt.n	802015a <__sfputc_r+0x16>
 8020156:	290a      	cmp	r1, #10
 8020158:	d103      	bne.n	8020162 <__sfputc_r+0x1e>
 802015a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802015e:	f7ff bb75 	b.w	801f84c <__swbuf_r>
 8020162:	6813      	ldr	r3, [r2, #0]
 8020164:	1c58      	adds	r0, r3, #1
 8020166:	6010      	str	r0, [r2, #0]
 8020168:	7019      	strb	r1, [r3, #0]
 802016a:	4608      	mov	r0, r1
 802016c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020170:	4770      	bx	lr

08020172 <__sfputs_r>:
 8020172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020174:	4606      	mov	r6, r0
 8020176:	460f      	mov	r7, r1
 8020178:	4614      	mov	r4, r2
 802017a:	18d5      	adds	r5, r2, r3
 802017c:	42ac      	cmp	r4, r5
 802017e:	d101      	bne.n	8020184 <__sfputs_r+0x12>
 8020180:	2000      	movs	r0, #0
 8020182:	e007      	b.n	8020194 <__sfputs_r+0x22>
 8020184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020188:	463a      	mov	r2, r7
 802018a:	4630      	mov	r0, r6
 802018c:	f7ff ffda 	bl	8020144 <__sfputc_r>
 8020190:	1c43      	adds	r3, r0, #1
 8020192:	d1f3      	bne.n	802017c <__sfputs_r+0xa>
 8020194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020198 <_vfiprintf_r>:
 8020198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802019c:	460d      	mov	r5, r1
 802019e:	b09d      	sub	sp, #116	; 0x74
 80201a0:	4614      	mov	r4, r2
 80201a2:	4698      	mov	r8, r3
 80201a4:	4606      	mov	r6, r0
 80201a6:	b118      	cbz	r0, 80201b0 <_vfiprintf_r+0x18>
 80201a8:	6983      	ldr	r3, [r0, #24]
 80201aa:	b90b      	cbnz	r3, 80201b0 <_vfiprintf_r+0x18>
 80201ac:	f7fd fcb0 	bl	801db10 <__sinit>
 80201b0:	4b89      	ldr	r3, [pc, #548]	; (80203d8 <_vfiprintf_r+0x240>)
 80201b2:	429d      	cmp	r5, r3
 80201b4:	d11b      	bne.n	80201ee <_vfiprintf_r+0x56>
 80201b6:	6875      	ldr	r5, [r6, #4]
 80201b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80201ba:	07d9      	lsls	r1, r3, #31
 80201bc:	d405      	bmi.n	80201ca <_vfiprintf_r+0x32>
 80201be:	89ab      	ldrh	r3, [r5, #12]
 80201c0:	059a      	lsls	r2, r3, #22
 80201c2:	d402      	bmi.n	80201ca <_vfiprintf_r+0x32>
 80201c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80201c6:	f7fe f856 	bl	801e276 <__retarget_lock_acquire_recursive>
 80201ca:	89ab      	ldrh	r3, [r5, #12]
 80201cc:	071b      	lsls	r3, r3, #28
 80201ce:	d501      	bpl.n	80201d4 <_vfiprintf_r+0x3c>
 80201d0:	692b      	ldr	r3, [r5, #16]
 80201d2:	b9eb      	cbnz	r3, 8020210 <_vfiprintf_r+0x78>
 80201d4:	4629      	mov	r1, r5
 80201d6:	4630      	mov	r0, r6
 80201d8:	f7ff fb9c 	bl	801f914 <__swsetup_r>
 80201dc:	b1c0      	cbz	r0, 8020210 <_vfiprintf_r+0x78>
 80201de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80201e0:	07dc      	lsls	r4, r3, #31
 80201e2:	d50e      	bpl.n	8020202 <_vfiprintf_r+0x6a>
 80201e4:	f04f 30ff 	mov.w	r0, #4294967295
 80201e8:	b01d      	add	sp, #116	; 0x74
 80201ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201ee:	4b7b      	ldr	r3, [pc, #492]	; (80203dc <_vfiprintf_r+0x244>)
 80201f0:	429d      	cmp	r5, r3
 80201f2:	d101      	bne.n	80201f8 <_vfiprintf_r+0x60>
 80201f4:	68b5      	ldr	r5, [r6, #8]
 80201f6:	e7df      	b.n	80201b8 <_vfiprintf_r+0x20>
 80201f8:	4b79      	ldr	r3, [pc, #484]	; (80203e0 <_vfiprintf_r+0x248>)
 80201fa:	429d      	cmp	r5, r3
 80201fc:	bf08      	it	eq
 80201fe:	68f5      	ldreq	r5, [r6, #12]
 8020200:	e7da      	b.n	80201b8 <_vfiprintf_r+0x20>
 8020202:	89ab      	ldrh	r3, [r5, #12]
 8020204:	0598      	lsls	r0, r3, #22
 8020206:	d4ed      	bmi.n	80201e4 <_vfiprintf_r+0x4c>
 8020208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802020a:	f7fe f836 	bl	801e27a <__retarget_lock_release_recursive>
 802020e:	e7e9      	b.n	80201e4 <_vfiprintf_r+0x4c>
 8020210:	2300      	movs	r3, #0
 8020212:	9309      	str	r3, [sp, #36]	; 0x24
 8020214:	2320      	movs	r3, #32
 8020216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802021a:	f8cd 800c 	str.w	r8, [sp, #12]
 802021e:	2330      	movs	r3, #48	; 0x30
 8020220:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80203e4 <_vfiprintf_r+0x24c>
 8020224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020228:	f04f 0901 	mov.w	r9, #1
 802022c:	4623      	mov	r3, r4
 802022e:	469a      	mov	sl, r3
 8020230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020234:	b10a      	cbz	r2, 802023a <_vfiprintf_r+0xa2>
 8020236:	2a25      	cmp	r2, #37	; 0x25
 8020238:	d1f9      	bne.n	802022e <_vfiprintf_r+0x96>
 802023a:	ebba 0b04 	subs.w	fp, sl, r4
 802023e:	d00b      	beq.n	8020258 <_vfiprintf_r+0xc0>
 8020240:	465b      	mov	r3, fp
 8020242:	4622      	mov	r2, r4
 8020244:	4629      	mov	r1, r5
 8020246:	4630      	mov	r0, r6
 8020248:	f7ff ff93 	bl	8020172 <__sfputs_r>
 802024c:	3001      	adds	r0, #1
 802024e:	f000 80aa 	beq.w	80203a6 <_vfiprintf_r+0x20e>
 8020252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020254:	445a      	add	r2, fp
 8020256:	9209      	str	r2, [sp, #36]	; 0x24
 8020258:	f89a 3000 	ldrb.w	r3, [sl]
 802025c:	2b00      	cmp	r3, #0
 802025e:	f000 80a2 	beq.w	80203a6 <_vfiprintf_r+0x20e>
 8020262:	2300      	movs	r3, #0
 8020264:	f04f 32ff 	mov.w	r2, #4294967295
 8020268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802026c:	f10a 0a01 	add.w	sl, sl, #1
 8020270:	9304      	str	r3, [sp, #16]
 8020272:	9307      	str	r3, [sp, #28]
 8020274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020278:	931a      	str	r3, [sp, #104]	; 0x68
 802027a:	4654      	mov	r4, sl
 802027c:	2205      	movs	r2, #5
 802027e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020282:	4858      	ldr	r0, [pc, #352]	; (80203e4 <_vfiprintf_r+0x24c>)
 8020284:	f7df ffec 	bl	8000260 <memchr>
 8020288:	9a04      	ldr	r2, [sp, #16]
 802028a:	b9d8      	cbnz	r0, 80202c4 <_vfiprintf_r+0x12c>
 802028c:	06d1      	lsls	r1, r2, #27
 802028e:	bf44      	itt	mi
 8020290:	2320      	movmi	r3, #32
 8020292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020296:	0713      	lsls	r3, r2, #28
 8020298:	bf44      	itt	mi
 802029a:	232b      	movmi	r3, #43	; 0x2b
 802029c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80202a0:	f89a 3000 	ldrb.w	r3, [sl]
 80202a4:	2b2a      	cmp	r3, #42	; 0x2a
 80202a6:	d015      	beq.n	80202d4 <_vfiprintf_r+0x13c>
 80202a8:	9a07      	ldr	r2, [sp, #28]
 80202aa:	4654      	mov	r4, sl
 80202ac:	2000      	movs	r0, #0
 80202ae:	f04f 0c0a 	mov.w	ip, #10
 80202b2:	4621      	mov	r1, r4
 80202b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80202b8:	3b30      	subs	r3, #48	; 0x30
 80202ba:	2b09      	cmp	r3, #9
 80202bc:	d94e      	bls.n	802035c <_vfiprintf_r+0x1c4>
 80202be:	b1b0      	cbz	r0, 80202ee <_vfiprintf_r+0x156>
 80202c0:	9207      	str	r2, [sp, #28]
 80202c2:	e014      	b.n	80202ee <_vfiprintf_r+0x156>
 80202c4:	eba0 0308 	sub.w	r3, r0, r8
 80202c8:	fa09 f303 	lsl.w	r3, r9, r3
 80202cc:	4313      	orrs	r3, r2
 80202ce:	9304      	str	r3, [sp, #16]
 80202d0:	46a2      	mov	sl, r4
 80202d2:	e7d2      	b.n	802027a <_vfiprintf_r+0xe2>
 80202d4:	9b03      	ldr	r3, [sp, #12]
 80202d6:	1d19      	adds	r1, r3, #4
 80202d8:	681b      	ldr	r3, [r3, #0]
 80202da:	9103      	str	r1, [sp, #12]
 80202dc:	2b00      	cmp	r3, #0
 80202de:	bfbb      	ittet	lt
 80202e0:	425b      	neglt	r3, r3
 80202e2:	f042 0202 	orrlt.w	r2, r2, #2
 80202e6:	9307      	strge	r3, [sp, #28]
 80202e8:	9307      	strlt	r3, [sp, #28]
 80202ea:	bfb8      	it	lt
 80202ec:	9204      	strlt	r2, [sp, #16]
 80202ee:	7823      	ldrb	r3, [r4, #0]
 80202f0:	2b2e      	cmp	r3, #46	; 0x2e
 80202f2:	d10c      	bne.n	802030e <_vfiprintf_r+0x176>
 80202f4:	7863      	ldrb	r3, [r4, #1]
 80202f6:	2b2a      	cmp	r3, #42	; 0x2a
 80202f8:	d135      	bne.n	8020366 <_vfiprintf_r+0x1ce>
 80202fa:	9b03      	ldr	r3, [sp, #12]
 80202fc:	1d1a      	adds	r2, r3, #4
 80202fe:	681b      	ldr	r3, [r3, #0]
 8020300:	9203      	str	r2, [sp, #12]
 8020302:	2b00      	cmp	r3, #0
 8020304:	bfb8      	it	lt
 8020306:	f04f 33ff 	movlt.w	r3, #4294967295
 802030a:	3402      	adds	r4, #2
 802030c:	9305      	str	r3, [sp, #20]
 802030e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80203f4 <_vfiprintf_r+0x25c>
 8020312:	7821      	ldrb	r1, [r4, #0]
 8020314:	2203      	movs	r2, #3
 8020316:	4650      	mov	r0, sl
 8020318:	f7df ffa2 	bl	8000260 <memchr>
 802031c:	b140      	cbz	r0, 8020330 <_vfiprintf_r+0x198>
 802031e:	2340      	movs	r3, #64	; 0x40
 8020320:	eba0 000a 	sub.w	r0, r0, sl
 8020324:	fa03 f000 	lsl.w	r0, r3, r0
 8020328:	9b04      	ldr	r3, [sp, #16]
 802032a:	4303      	orrs	r3, r0
 802032c:	3401      	adds	r4, #1
 802032e:	9304      	str	r3, [sp, #16]
 8020330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020334:	482c      	ldr	r0, [pc, #176]	; (80203e8 <_vfiprintf_r+0x250>)
 8020336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802033a:	2206      	movs	r2, #6
 802033c:	f7df ff90 	bl	8000260 <memchr>
 8020340:	2800      	cmp	r0, #0
 8020342:	d03f      	beq.n	80203c4 <_vfiprintf_r+0x22c>
 8020344:	4b29      	ldr	r3, [pc, #164]	; (80203ec <_vfiprintf_r+0x254>)
 8020346:	bb1b      	cbnz	r3, 8020390 <_vfiprintf_r+0x1f8>
 8020348:	9b03      	ldr	r3, [sp, #12]
 802034a:	3307      	adds	r3, #7
 802034c:	f023 0307 	bic.w	r3, r3, #7
 8020350:	3308      	adds	r3, #8
 8020352:	9303      	str	r3, [sp, #12]
 8020354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020356:	443b      	add	r3, r7
 8020358:	9309      	str	r3, [sp, #36]	; 0x24
 802035a:	e767      	b.n	802022c <_vfiprintf_r+0x94>
 802035c:	fb0c 3202 	mla	r2, ip, r2, r3
 8020360:	460c      	mov	r4, r1
 8020362:	2001      	movs	r0, #1
 8020364:	e7a5      	b.n	80202b2 <_vfiprintf_r+0x11a>
 8020366:	2300      	movs	r3, #0
 8020368:	3401      	adds	r4, #1
 802036a:	9305      	str	r3, [sp, #20]
 802036c:	4619      	mov	r1, r3
 802036e:	f04f 0c0a 	mov.w	ip, #10
 8020372:	4620      	mov	r0, r4
 8020374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020378:	3a30      	subs	r2, #48	; 0x30
 802037a:	2a09      	cmp	r2, #9
 802037c:	d903      	bls.n	8020386 <_vfiprintf_r+0x1ee>
 802037e:	2b00      	cmp	r3, #0
 8020380:	d0c5      	beq.n	802030e <_vfiprintf_r+0x176>
 8020382:	9105      	str	r1, [sp, #20]
 8020384:	e7c3      	b.n	802030e <_vfiprintf_r+0x176>
 8020386:	fb0c 2101 	mla	r1, ip, r1, r2
 802038a:	4604      	mov	r4, r0
 802038c:	2301      	movs	r3, #1
 802038e:	e7f0      	b.n	8020372 <_vfiprintf_r+0x1da>
 8020390:	ab03      	add	r3, sp, #12
 8020392:	9300      	str	r3, [sp, #0]
 8020394:	462a      	mov	r2, r5
 8020396:	4b16      	ldr	r3, [pc, #88]	; (80203f0 <_vfiprintf_r+0x258>)
 8020398:	a904      	add	r1, sp, #16
 802039a:	4630      	mov	r0, r6
 802039c:	f3af 8000 	nop.w
 80203a0:	4607      	mov	r7, r0
 80203a2:	1c78      	adds	r0, r7, #1
 80203a4:	d1d6      	bne.n	8020354 <_vfiprintf_r+0x1bc>
 80203a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80203a8:	07d9      	lsls	r1, r3, #31
 80203aa:	d405      	bmi.n	80203b8 <_vfiprintf_r+0x220>
 80203ac:	89ab      	ldrh	r3, [r5, #12]
 80203ae:	059a      	lsls	r2, r3, #22
 80203b0:	d402      	bmi.n	80203b8 <_vfiprintf_r+0x220>
 80203b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80203b4:	f7fd ff61 	bl	801e27a <__retarget_lock_release_recursive>
 80203b8:	89ab      	ldrh	r3, [r5, #12]
 80203ba:	065b      	lsls	r3, r3, #25
 80203bc:	f53f af12 	bmi.w	80201e4 <_vfiprintf_r+0x4c>
 80203c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80203c2:	e711      	b.n	80201e8 <_vfiprintf_r+0x50>
 80203c4:	ab03      	add	r3, sp, #12
 80203c6:	9300      	str	r3, [sp, #0]
 80203c8:	462a      	mov	r2, r5
 80203ca:	4b09      	ldr	r3, [pc, #36]	; (80203f0 <_vfiprintf_r+0x258>)
 80203cc:	a904      	add	r1, sp, #16
 80203ce:	4630      	mov	r0, r6
 80203d0:	f000 f880 	bl	80204d4 <_printf_i>
 80203d4:	e7e4      	b.n	80203a0 <_vfiprintf_r+0x208>
 80203d6:	bf00      	nop
 80203d8:	080264ec 	.word	0x080264ec
 80203dc:	0802650c 	.word	0x0802650c
 80203e0:	080264cc 	.word	0x080264cc
 80203e4:	08026a6b 	.word	0x08026a6b
 80203e8:	08026a75 	.word	0x08026a75
 80203ec:	00000000 	.word	0x00000000
 80203f0:	08020173 	.word	0x08020173
 80203f4:	08026a71 	.word	0x08026a71

080203f8 <_printf_common>:
 80203f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203fc:	4616      	mov	r6, r2
 80203fe:	4699      	mov	r9, r3
 8020400:	688a      	ldr	r2, [r1, #8]
 8020402:	690b      	ldr	r3, [r1, #16]
 8020404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020408:	4293      	cmp	r3, r2
 802040a:	bfb8      	it	lt
 802040c:	4613      	movlt	r3, r2
 802040e:	6033      	str	r3, [r6, #0]
 8020410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020414:	4607      	mov	r7, r0
 8020416:	460c      	mov	r4, r1
 8020418:	b10a      	cbz	r2, 802041e <_printf_common+0x26>
 802041a:	3301      	adds	r3, #1
 802041c:	6033      	str	r3, [r6, #0]
 802041e:	6823      	ldr	r3, [r4, #0]
 8020420:	0699      	lsls	r1, r3, #26
 8020422:	bf42      	ittt	mi
 8020424:	6833      	ldrmi	r3, [r6, #0]
 8020426:	3302      	addmi	r3, #2
 8020428:	6033      	strmi	r3, [r6, #0]
 802042a:	6825      	ldr	r5, [r4, #0]
 802042c:	f015 0506 	ands.w	r5, r5, #6
 8020430:	d106      	bne.n	8020440 <_printf_common+0x48>
 8020432:	f104 0a19 	add.w	sl, r4, #25
 8020436:	68e3      	ldr	r3, [r4, #12]
 8020438:	6832      	ldr	r2, [r6, #0]
 802043a:	1a9b      	subs	r3, r3, r2
 802043c:	42ab      	cmp	r3, r5
 802043e:	dc26      	bgt.n	802048e <_printf_common+0x96>
 8020440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020444:	1e13      	subs	r3, r2, #0
 8020446:	6822      	ldr	r2, [r4, #0]
 8020448:	bf18      	it	ne
 802044a:	2301      	movne	r3, #1
 802044c:	0692      	lsls	r2, r2, #26
 802044e:	d42b      	bmi.n	80204a8 <_printf_common+0xb0>
 8020450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020454:	4649      	mov	r1, r9
 8020456:	4638      	mov	r0, r7
 8020458:	47c0      	blx	r8
 802045a:	3001      	adds	r0, #1
 802045c:	d01e      	beq.n	802049c <_printf_common+0xa4>
 802045e:	6823      	ldr	r3, [r4, #0]
 8020460:	68e5      	ldr	r5, [r4, #12]
 8020462:	6832      	ldr	r2, [r6, #0]
 8020464:	f003 0306 	and.w	r3, r3, #6
 8020468:	2b04      	cmp	r3, #4
 802046a:	bf08      	it	eq
 802046c:	1aad      	subeq	r5, r5, r2
 802046e:	68a3      	ldr	r3, [r4, #8]
 8020470:	6922      	ldr	r2, [r4, #16]
 8020472:	bf0c      	ite	eq
 8020474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020478:	2500      	movne	r5, #0
 802047a:	4293      	cmp	r3, r2
 802047c:	bfc4      	itt	gt
 802047e:	1a9b      	subgt	r3, r3, r2
 8020480:	18ed      	addgt	r5, r5, r3
 8020482:	2600      	movs	r6, #0
 8020484:	341a      	adds	r4, #26
 8020486:	42b5      	cmp	r5, r6
 8020488:	d11a      	bne.n	80204c0 <_printf_common+0xc8>
 802048a:	2000      	movs	r0, #0
 802048c:	e008      	b.n	80204a0 <_printf_common+0xa8>
 802048e:	2301      	movs	r3, #1
 8020490:	4652      	mov	r2, sl
 8020492:	4649      	mov	r1, r9
 8020494:	4638      	mov	r0, r7
 8020496:	47c0      	blx	r8
 8020498:	3001      	adds	r0, #1
 802049a:	d103      	bne.n	80204a4 <_printf_common+0xac>
 802049c:	f04f 30ff 	mov.w	r0, #4294967295
 80204a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204a4:	3501      	adds	r5, #1
 80204a6:	e7c6      	b.n	8020436 <_printf_common+0x3e>
 80204a8:	18e1      	adds	r1, r4, r3
 80204aa:	1c5a      	adds	r2, r3, #1
 80204ac:	2030      	movs	r0, #48	; 0x30
 80204ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80204b2:	4422      	add	r2, r4
 80204b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80204b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80204bc:	3302      	adds	r3, #2
 80204be:	e7c7      	b.n	8020450 <_printf_common+0x58>
 80204c0:	2301      	movs	r3, #1
 80204c2:	4622      	mov	r2, r4
 80204c4:	4649      	mov	r1, r9
 80204c6:	4638      	mov	r0, r7
 80204c8:	47c0      	blx	r8
 80204ca:	3001      	adds	r0, #1
 80204cc:	d0e6      	beq.n	802049c <_printf_common+0xa4>
 80204ce:	3601      	adds	r6, #1
 80204d0:	e7d9      	b.n	8020486 <_printf_common+0x8e>
	...

080204d4 <_printf_i>:
 80204d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80204d8:	460c      	mov	r4, r1
 80204da:	4691      	mov	r9, r2
 80204dc:	7e27      	ldrb	r7, [r4, #24]
 80204de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80204e0:	2f78      	cmp	r7, #120	; 0x78
 80204e2:	4680      	mov	r8, r0
 80204e4:	469a      	mov	sl, r3
 80204e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80204ea:	d807      	bhi.n	80204fc <_printf_i+0x28>
 80204ec:	2f62      	cmp	r7, #98	; 0x62
 80204ee:	d80a      	bhi.n	8020506 <_printf_i+0x32>
 80204f0:	2f00      	cmp	r7, #0
 80204f2:	f000 80d8 	beq.w	80206a6 <_printf_i+0x1d2>
 80204f6:	2f58      	cmp	r7, #88	; 0x58
 80204f8:	f000 80a3 	beq.w	8020642 <_printf_i+0x16e>
 80204fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020504:	e03a      	b.n	802057c <_printf_i+0xa8>
 8020506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802050a:	2b15      	cmp	r3, #21
 802050c:	d8f6      	bhi.n	80204fc <_printf_i+0x28>
 802050e:	a001      	add	r0, pc, #4	; (adr r0, 8020514 <_printf_i+0x40>)
 8020510:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8020514:	0802056d 	.word	0x0802056d
 8020518:	08020581 	.word	0x08020581
 802051c:	080204fd 	.word	0x080204fd
 8020520:	080204fd 	.word	0x080204fd
 8020524:	080204fd 	.word	0x080204fd
 8020528:	080204fd 	.word	0x080204fd
 802052c:	08020581 	.word	0x08020581
 8020530:	080204fd 	.word	0x080204fd
 8020534:	080204fd 	.word	0x080204fd
 8020538:	080204fd 	.word	0x080204fd
 802053c:	080204fd 	.word	0x080204fd
 8020540:	0802068d 	.word	0x0802068d
 8020544:	080205b1 	.word	0x080205b1
 8020548:	0802066f 	.word	0x0802066f
 802054c:	080204fd 	.word	0x080204fd
 8020550:	080204fd 	.word	0x080204fd
 8020554:	080206af 	.word	0x080206af
 8020558:	080204fd 	.word	0x080204fd
 802055c:	080205b1 	.word	0x080205b1
 8020560:	080204fd 	.word	0x080204fd
 8020564:	080204fd 	.word	0x080204fd
 8020568:	08020677 	.word	0x08020677
 802056c:	680b      	ldr	r3, [r1, #0]
 802056e:	1d1a      	adds	r2, r3, #4
 8020570:	681b      	ldr	r3, [r3, #0]
 8020572:	600a      	str	r2, [r1, #0]
 8020574:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802057c:	2301      	movs	r3, #1
 802057e:	e0a3      	b.n	80206c8 <_printf_i+0x1f4>
 8020580:	6825      	ldr	r5, [r4, #0]
 8020582:	6808      	ldr	r0, [r1, #0]
 8020584:	062e      	lsls	r6, r5, #24
 8020586:	f100 0304 	add.w	r3, r0, #4
 802058a:	d50a      	bpl.n	80205a2 <_printf_i+0xce>
 802058c:	6805      	ldr	r5, [r0, #0]
 802058e:	600b      	str	r3, [r1, #0]
 8020590:	2d00      	cmp	r5, #0
 8020592:	da03      	bge.n	802059c <_printf_i+0xc8>
 8020594:	232d      	movs	r3, #45	; 0x2d
 8020596:	426d      	negs	r5, r5
 8020598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802059c:	485e      	ldr	r0, [pc, #376]	; (8020718 <_printf_i+0x244>)
 802059e:	230a      	movs	r3, #10
 80205a0:	e019      	b.n	80205d6 <_printf_i+0x102>
 80205a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80205a6:	6805      	ldr	r5, [r0, #0]
 80205a8:	600b      	str	r3, [r1, #0]
 80205aa:	bf18      	it	ne
 80205ac:	b22d      	sxthne	r5, r5
 80205ae:	e7ef      	b.n	8020590 <_printf_i+0xbc>
 80205b0:	680b      	ldr	r3, [r1, #0]
 80205b2:	6825      	ldr	r5, [r4, #0]
 80205b4:	1d18      	adds	r0, r3, #4
 80205b6:	6008      	str	r0, [r1, #0]
 80205b8:	0628      	lsls	r0, r5, #24
 80205ba:	d501      	bpl.n	80205c0 <_printf_i+0xec>
 80205bc:	681d      	ldr	r5, [r3, #0]
 80205be:	e002      	b.n	80205c6 <_printf_i+0xf2>
 80205c0:	0669      	lsls	r1, r5, #25
 80205c2:	d5fb      	bpl.n	80205bc <_printf_i+0xe8>
 80205c4:	881d      	ldrh	r5, [r3, #0]
 80205c6:	4854      	ldr	r0, [pc, #336]	; (8020718 <_printf_i+0x244>)
 80205c8:	2f6f      	cmp	r7, #111	; 0x6f
 80205ca:	bf0c      	ite	eq
 80205cc:	2308      	moveq	r3, #8
 80205ce:	230a      	movne	r3, #10
 80205d0:	2100      	movs	r1, #0
 80205d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80205d6:	6866      	ldr	r6, [r4, #4]
 80205d8:	60a6      	str	r6, [r4, #8]
 80205da:	2e00      	cmp	r6, #0
 80205dc:	bfa2      	ittt	ge
 80205de:	6821      	ldrge	r1, [r4, #0]
 80205e0:	f021 0104 	bicge.w	r1, r1, #4
 80205e4:	6021      	strge	r1, [r4, #0]
 80205e6:	b90d      	cbnz	r5, 80205ec <_printf_i+0x118>
 80205e8:	2e00      	cmp	r6, #0
 80205ea:	d04d      	beq.n	8020688 <_printf_i+0x1b4>
 80205ec:	4616      	mov	r6, r2
 80205ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80205f2:	fb03 5711 	mls	r7, r3, r1, r5
 80205f6:	5dc7      	ldrb	r7, [r0, r7]
 80205f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80205fc:	462f      	mov	r7, r5
 80205fe:	42bb      	cmp	r3, r7
 8020600:	460d      	mov	r5, r1
 8020602:	d9f4      	bls.n	80205ee <_printf_i+0x11a>
 8020604:	2b08      	cmp	r3, #8
 8020606:	d10b      	bne.n	8020620 <_printf_i+0x14c>
 8020608:	6823      	ldr	r3, [r4, #0]
 802060a:	07df      	lsls	r7, r3, #31
 802060c:	d508      	bpl.n	8020620 <_printf_i+0x14c>
 802060e:	6923      	ldr	r3, [r4, #16]
 8020610:	6861      	ldr	r1, [r4, #4]
 8020612:	4299      	cmp	r1, r3
 8020614:	bfde      	ittt	le
 8020616:	2330      	movle	r3, #48	; 0x30
 8020618:	f806 3c01 	strble.w	r3, [r6, #-1]
 802061c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020620:	1b92      	subs	r2, r2, r6
 8020622:	6122      	str	r2, [r4, #16]
 8020624:	f8cd a000 	str.w	sl, [sp]
 8020628:	464b      	mov	r3, r9
 802062a:	aa03      	add	r2, sp, #12
 802062c:	4621      	mov	r1, r4
 802062e:	4640      	mov	r0, r8
 8020630:	f7ff fee2 	bl	80203f8 <_printf_common>
 8020634:	3001      	adds	r0, #1
 8020636:	d14c      	bne.n	80206d2 <_printf_i+0x1fe>
 8020638:	f04f 30ff 	mov.w	r0, #4294967295
 802063c:	b004      	add	sp, #16
 802063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020642:	4835      	ldr	r0, [pc, #212]	; (8020718 <_printf_i+0x244>)
 8020644:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020648:	6823      	ldr	r3, [r4, #0]
 802064a:	680e      	ldr	r6, [r1, #0]
 802064c:	061f      	lsls	r7, r3, #24
 802064e:	f856 5b04 	ldr.w	r5, [r6], #4
 8020652:	600e      	str	r6, [r1, #0]
 8020654:	d514      	bpl.n	8020680 <_printf_i+0x1ac>
 8020656:	07d9      	lsls	r1, r3, #31
 8020658:	bf44      	itt	mi
 802065a:	f043 0320 	orrmi.w	r3, r3, #32
 802065e:	6023      	strmi	r3, [r4, #0]
 8020660:	b91d      	cbnz	r5, 802066a <_printf_i+0x196>
 8020662:	6823      	ldr	r3, [r4, #0]
 8020664:	f023 0320 	bic.w	r3, r3, #32
 8020668:	6023      	str	r3, [r4, #0]
 802066a:	2310      	movs	r3, #16
 802066c:	e7b0      	b.n	80205d0 <_printf_i+0xfc>
 802066e:	6823      	ldr	r3, [r4, #0]
 8020670:	f043 0320 	orr.w	r3, r3, #32
 8020674:	6023      	str	r3, [r4, #0]
 8020676:	2378      	movs	r3, #120	; 0x78
 8020678:	4828      	ldr	r0, [pc, #160]	; (802071c <_printf_i+0x248>)
 802067a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802067e:	e7e3      	b.n	8020648 <_printf_i+0x174>
 8020680:	065e      	lsls	r6, r3, #25
 8020682:	bf48      	it	mi
 8020684:	b2ad      	uxthmi	r5, r5
 8020686:	e7e6      	b.n	8020656 <_printf_i+0x182>
 8020688:	4616      	mov	r6, r2
 802068a:	e7bb      	b.n	8020604 <_printf_i+0x130>
 802068c:	680b      	ldr	r3, [r1, #0]
 802068e:	6826      	ldr	r6, [r4, #0]
 8020690:	6960      	ldr	r0, [r4, #20]
 8020692:	1d1d      	adds	r5, r3, #4
 8020694:	600d      	str	r5, [r1, #0]
 8020696:	0635      	lsls	r5, r6, #24
 8020698:	681b      	ldr	r3, [r3, #0]
 802069a:	d501      	bpl.n	80206a0 <_printf_i+0x1cc>
 802069c:	6018      	str	r0, [r3, #0]
 802069e:	e002      	b.n	80206a6 <_printf_i+0x1d2>
 80206a0:	0671      	lsls	r1, r6, #25
 80206a2:	d5fb      	bpl.n	802069c <_printf_i+0x1c8>
 80206a4:	8018      	strh	r0, [r3, #0]
 80206a6:	2300      	movs	r3, #0
 80206a8:	6123      	str	r3, [r4, #16]
 80206aa:	4616      	mov	r6, r2
 80206ac:	e7ba      	b.n	8020624 <_printf_i+0x150>
 80206ae:	680b      	ldr	r3, [r1, #0]
 80206b0:	1d1a      	adds	r2, r3, #4
 80206b2:	600a      	str	r2, [r1, #0]
 80206b4:	681e      	ldr	r6, [r3, #0]
 80206b6:	6862      	ldr	r2, [r4, #4]
 80206b8:	2100      	movs	r1, #0
 80206ba:	4630      	mov	r0, r6
 80206bc:	f7df fdd0 	bl	8000260 <memchr>
 80206c0:	b108      	cbz	r0, 80206c6 <_printf_i+0x1f2>
 80206c2:	1b80      	subs	r0, r0, r6
 80206c4:	6060      	str	r0, [r4, #4]
 80206c6:	6863      	ldr	r3, [r4, #4]
 80206c8:	6123      	str	r3, [r4, #16]
 80206ca:	2300      	movs	r3, #0
 80206cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80206d0:	e7a8      	b.n	8020624 <_printf_i+0x150>
 80206d2:	6923      	ldr	r3, [r4, #16]
 80206d4:	4632      	mov	r2, r6
 80206d6:	4649      	mov	r1, r9
 80206d8:	4640      	mov	r0, r8
 80206da:	47d0      	blx	sl
 80206dc:	3001      	adds	r0, #1
 80206de:	d0ab      	beq.n	8020638 <_printf_i+0x164>
 80206e0:	6823      	ldr	r3, [r4, #0]
 80206e2:	079b      	lsls	r3, r3, #30
 80206e4:	d413      	bmi.n	802070e <_printf_i+0x23a>
 80206e6:	68e0      	ldr	r0, [r4, #12]
 80206e8:	9b03      	ldr	r3, [sp, #12]
 80206ea:	4298      	cmp	r0, r3
 80206ec:	bfb8      	it	lt
 80206ee:	4618      	movlt	r0, r3
 80206f0:	e7a4      	b.n	802063c <_printf_i+0x168>
 80206f2:	2301      	movs	r3, #1
 80206f4:	4632      	mov	r2, r6
 80206f6:	4649      	mov	r1, r9
 80206f8:	4640      	mov	r0, r8
 80206fa:	47d0      	blx	sl
 80206fc:	3001      	adds	r0, #1
 80206fe:	d09b      	beq.n	8020638 <_printf_i+0x164>
 8020700:	3501      	adds	r5, #1
 8020702:	68e3      	ldr	r3, [r4, #12]
 8020704:	9903      	ldr	r1, [sp, #12]
 8020706:	1a5b      	subs	r3, r3, r1
 8020708:	42ab      	cmp	r3, r5
 802070a:	dcf2      	bgt.n	80206f2 <_printf_i+0x21e>
 802070c:	e7eb      	b.n	80206e6 <_printf_i+0x212>
 802070e:	2500      	movs	r5, #0
 8020710:	f104 0619 	add.w	r6, r4, #25
 8020714:	e7f5      	b.n	8020702 <_printf_i+0x22e>
 8020716:	bf00      	nop
 8020718:	08026a7c 	.word	0x08026a7c
 802071c:	08026a8d 	.word	0x08026a8d

08020720 <_putc_r>:
 8020720:	b570      	push	{r4, r5, r6, lr}
 8020722:	460d      	mov	r5, r1
 8020724:	4614      	mov	r4, r2
 8020726:	4606      	mov	r6, r0
 8020728:	b118      	cbz	r0, 8020732 <_putc_r+0x12>
 802072a:	6983      	ldr	r3, [r0, #24]
 802072c:	b90b      	cbnz	r3, 8020732 <_putc_r+0x12>
 802072e:	f7fd f9ef 	bl	801db10 <__sinit>
 8020732:	4b1c      	ldr	r3, [pc, #112]	; (80207a4 <_putc_r+0x84>)
 8020734:	429c      	cmp	r4, r3
 8020736:	d124      	bne.n	8020782 <_putc_r+0x62>
 8020738:	6874      	ldr	r4, [r6, #4]
 802073a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802073c:	07d8      	lsls	r0, r3, #31
 802073e:	d405      	bmi.n	802074c <_putc_r+0x2c>
 8020740:	89a3      	ldrh	r3, [r4, #12]
 8020742:	0599      	lsls	r1, r3, #22
 8020744:	d402      	bmi.n	802074c <_putc_r+0x2c>
 8020746:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020748:	f7fd fd95 	bl	801e276 <__retarget_lock_acquire_recursive>
 802074c:	68a3      	ldr	r3, [r4, #8]
 802074e:	3b01      	subs	r3, #1
 8020750:	2b00      	cmp	r3, #0
 8020752:	60a3      	str	r3, [r4, #8]
 8020754:	da05      	bge.n	8020762 <_putc_r+0x42>
 8020756:	69a2      	ldr	r2, [r4, #24]
 8020758:	4293      	cmp	r3, r2
 802075a:	db1c      	blt.n	8020796 <_putc_r+0x76>
 802075c:	b2eb      	uxtb	r3, r5
 802075e:	2b0a      	cmp	r3, #10
 8020760:	d019      	beq.n	8020796 <_putc_r+0x76>
 8020762:	6823      	ldr	r3, [r4, #0]
 8020764:	1c5a      	adds	r2, r3, #1
 8020766:	6022      	str	r2, [r4, #0]
 8020768:	701d      	strb	r5, [r3, #0]
 802076a:	b2ed      	uxtb	r5, r5
 802076c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802076e:	07da      	lsls	r2, r3, #31
 8020770:	d405      	bmi.n	802077e <_putc_r+0x5e>
 8020772:	89a3      	ldrh	r3, [r4, #12]
 8020774:	059b      	lsls	r3, r3, #22
 8020776:	d402      	bmi.n	802077e <_putc_r+0x5e>
 8020778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802077a:	f7fd fd7e 	bl	801e27a <__retarget_lock_release_recursive>
 802077e:	4628      	mov	r0, r5
 8020780:	bd70      	pop	{r4, r5, r6, pc}
 8020782:	4b09      	ldr	r3, [pc, #36]	; (80207a8 <_putc_r+0x88>)
 8020784:	429c      	cmp	r4, r3
 8020786:	d101      	bne.n	802078c <_putc_r+0x6c>
 8020788:	68b4      	ldr	r4, [r6, #8]
 802078a:	e7d6      	b.n	802073a <_putc_r+0x1a>
 802078c:	4b07      	ldr	r3, [pc, #28]	; (80207ac <_putc_r+0x8c>)
 802078e:	429c      	cmp	r4, r3
 8020790:	bf08      	it	eq
 8020792:	68f4      	ldreq	r4, [r6, #12]
 8020794:	e7d1      	b.n	802073a <_putc_r+0x1a>
 8020796:	4629      	mov	r1, r5
 8020798:	4622      	mov	r2, r4
 802079a:	4630      	mov	r0, r6
 802079c:	f7ff f856 	bl	801f84c <__swbuf_r>
 80207a0:	4605      	mov	r5, r0
 80207a2:	e7e3      	b.n	802076c <_putc_r+0x4c>
 80207a4:	080264ec 	.word	0x080264ec
 80207a8:	0802650c 	.word	0x0802650c
 80207ac:	080264cc 	.word	0x080264cc

080207b0 <_read_r>:
 80207b0:	b538      	push	{r3, r4, r5, lr}
 80207b2:	4d07      	ldr	r5, [pc, #28]	; (80207d0 <_read_r+0x20>)
 80207b4:	4604      	mov	r4, r0
 80207b6:	4608      	mov	r0, r1
 80207b8:	4611      	mov	r1, r2
 80207ba:	2200      	movs	r2, #0
 80207bc:	602a      	str	r2, [r5, #0]
 80207be:	461a      	mov	r2, r3
 80207c0:	f7e0 fae9 	bl	8000d96 <_read>
 80207c4:	1c43      	adds	r3, r0, #1
 80207c6:	d102      	bne.n	80207ce <_read_r+0x1e>
 80207c8:	682b      	ldr	r3, [r5, #0]
 80207ca:	b103      	cbz	r3, 80207ce <_read_r+0x1e>
 80207cc:	6023      	str	r3, [r4, #0]
 80207ce:	bd38      	pop	{r3, r4, r5, pc}
 80207d0:	20000e2c 	.word	0x20000e2c

080207d4 <sniprintf>:
 80207d4:	b40c      	push	{r2, r3}
 80207d6:	b530      	push	{r4, r5, lr}
 80207d8:	4b17      	ldr	r3, [pc, #92]	; (8020838 <sniprintf+0x64>)
 80207da:	1e0c      	subs	r4, r1, #0
 80207dc:	681d      	ldr	r5, [r3, #0]
 80207de:	b09d      	sub	sp, #116	; 0x74
 80207e0:	da08      	bge.n	80207f4 <sniprintf+0x20>
 80207e2:	238b      	movs	r3, #139	; 0x8b
 80207e4:	602b      	str	r3, [r5, #0]
 80207e6:	f04f 30ff 	mov.w	r0, #4294967295
 80207ea:	b01d      	add	sp, #116	; 0x74
 80207ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80207f0:	b002      	add	sp, #8
 80207f2:	4770      	bx	lr
 80207f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80207f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80207fc:	bf14      	ite	ne
 80207fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8020802:	4623      	moveq	r3, r4
 8020804:	9304      	str	r3, [sp, #16]
 8020806:	9307      	str	r3, [sp, #28]
 8020808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802080c:	9002      	str	r0, [sp, #8]
 802080e:	9006      	str	r0, [sp, #24]
 8020810:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020814:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020816:	ab21      	add	r3, sp, #132	; 0x84
 8020818:	a902      	add	r1, sp, #8
 802081a:	4628      	mov	r0, r5
 802081c:	9301      	str	r3, [sp, #4]
 802081e:	f7ff fb91 	bl	801ff44 <_svfiprintf_r>
 8020822:	1c43      	adds	r3, r0, #1
 8020824:	bfbc      	itt	lt
 8020826:	238b      	movlt	r3, #139	; 0x8b
 8020828:	602b      	strlt	r3, [r5, #0]
 802082a:	2c00      	cmp	r4, #0
 802082c:	d0dd      	beq.n	80207ea <sniprintf+0x16>
 802082e:	9b02      	ldr	r3, [sp, #8]
 8020830:	2200      	movs	r2, #0
 8020832:	701a      	strb	r2, [r3, #0]
 8020834:	e7d9      	b.n	80207ea <sniprintf+0x16>
 8020836:	bf00      	nop
 8020838:	20000104 	.word	0x20000104

0802083c <siscanf>:
 802083c:	b40e      	push	{r1, r2, r3}
 802083e:	b510      	push	{r4, lr}
 8020840:	b09f      	sub	sp, #124	; 0x7c
 8020842:	ac21      	add	r4, sp, #132	; 0x84
 8020844:	f44f 7101 	mov.w	r1, #516	; 0x204
 8020848:	f854 2b04 	ldr.w	r2, [r4], #4
 802084c:	9201      	str	r2, [sp, #4]
 802084e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020852:	9004      	str	r0, [sp, #16]
 8020854:	9008      	str	r0, [sp, #32]
 8020856:	f7df fcf1 	bl	800023c <strlen>
 802085a:	4b0c      	ldr	r3, [pc, #48]	; (802088c <siscanf+0x50>)
 802085c:	9005      	str	r0, [sp, #20]
 802085e:	9009      	str	r0, [sp, #36]	; 0x24
 8020860:	930d      	str	r3, [sp, #52]	; 0x34
 8020862:	480b      	ldr	r0, [pc, #44]	; (8020890 <siscanf+0x54>)
 8020864:	9a01      	ldr	r2, [sp, #4]
 8020866:	6800      	ldr	r0, [r0, #0]
 8020868:	9403      	str	r4, [sp, #12]
 802086a:	2300      	movs	r3, #0
 802086c:	9311      	str	r3, [sp, #68]	; 0x44
 802086e:	9316      	str	r3, [sp, #88]	; 0x58
 8020870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020874:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020878:	a904      	add	r1, sp, #16
 802087a:	4623      	mov	r3, r4
 802087c:	f000 f8ba 	bl	80209f4 <__ssvfiscanf_r>
 8020880:	b01f      	add	sp, #124	; 0x7c
 8020882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020886:	b003      	add	sp, #12
 8020888:	4770      	bx	lr
 802088a:	bf00      	nop
 802088c:	0801e70b 	.word	0x0801e70b
 8020890:	20000104 	.word	0x20000104

08020894 <strcpy>:
 8020894:	4603      	mov	r3, r0
 8020896:	f811 2b01 	ldrb.w	r2, [r1], #1
 802089a:	f803 2b01 	strb.w	r2, [r3], #1
 802089e:	2a00      	cmp	r2, #0
 80208a0:	d1f9      	bne.n	8020896 <strcpy+0x2>
 80208a2:	4770      	bx	lr

080208a4 <strncmp>:
 80208a4:	b510      	push	{r4, lr}
 80208a6:	b16a      	cbz	r2, 80208c4 <strncmp+0x20>
 80208a8:	3901      	subs	r1, #1
 80208aa:	1884      	adds	r4, r0, r2
 80208ac:	f810 3b01 	ldrb.w	r3, [r0], #1
 80208b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80208b4:	4293      	cmp	r3, r2
 80208b6:	d103      	bne.n	80208c0 <strncmp+0x1c>
 80208b8:	42a0      	cmp	r0, r4
 80208ba:	d001      	beq.n	80208c0 <strncmp+0x1c>
 80208bc:	2b00      	cmp	r3, #0
 80208be:	d1f5      	bne.n	80208ac <strncmp+0x8>
 80208c0:	1a98      	subs	r0, r3, r2
 80208c2:	bd10      	pop	{r4, pc}
 80208c4:	4610      	mov	r0, r2
 80208c6:	e7fc      	b.n	80208c2 <strncmp+0x1e>

080208c8 <__ascii_wctomb>:
 80208c8:	b149      	cbz	r1, 80208de <__ascii_wctomb+0x16>
 80208ca:	2aff      	cmp	r2, #255	; 0xff
 80208cc:	bf85      	ittet	hi
 80208ce:	238a      	movhi	r3, #138	; 0x8a
 80208d0:	6003      	strhi	r3, [r0, #0]
 80208d2:	700a      	strbls	r2, [r1, #0]
 80208d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80208d8:	bf98      	it	ls
 80208da:	2001      	movls	r0, #1
 80208dc:	4770      	bx	lr
 80208de:	4608      	mov	r0, r1
 80208e0:	4770      	bx	lr
	...

080208e4 <__env_lock>:
 80208e4:	4801      	ldr	r0, [pc, #4]	; (80208ec <__env_lock+0x8>)
 80208e6:	f7fd bcc6 	b.w	801e276 <__retarget_lock_acquire_recursive>
 80208ea:	bf00      	nop
 80208ec:	20000e22 	.word	0x20000e22

080208f0 <__env_unlock>:
 80208f0:	4801      	ldr	r0, [pc, #4]	; (80208f8 <__env_unlock+0x8>)
 80208f2:	f7fd bcc2 	b.w	801e27a <__retarget_lock_release_recursive>
 80208f6:	bf00      	nop
 80208f8:	20000e22 	.word	0x20000e22

080208fc <memmove>:
 80208fc:	4288      	cmp	r0, r1
 80208fe:	b510      	push	{r4, lr}
 8020900:	eb01 0402 	add.w	r4, r1, r2
 8020904:	d902      	bls.n	802090c <memmove+0x10>
 8020906:	4284      	cmp	r4, r0
 8020908:	4623      	mov	r3, r4
 802090a:	d807      	bhi.n	802091c <memmove+0x20>
 802090c:	1e43      	subs	r3, r0, #1
 802090e:	42a1      	cmp	r1, r4
 8020910:	d008      	beq.n	8020924 <memmove+0x28>
 8020912:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020916:	f803 2f01 	strb.w	r2, [r3, #1]!
 802091a:	e7f8      	b.n	802090e <memmove+0x12>
 802091c:	4402      	add	r2, r0
 802091e:	4601      	mov	r1, r0
 8020920:	428a      	cmp	r2, r1
 8020922:	d100      	bne.n	8020926 <memmove+0x2a>
 8020924:	bd10      	pop	{r4, pc}
 8020926:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802092a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802092e:	e7f7      	b.n	8020920 <memmove+0x24>

08020930 <_malloc_usable_size_r>:
 8020930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020934:	1f18      	subs	r0, r3, #4
 8020936:	2b00      	cmp	r3, #0
 8020938:	bfbc      	itt	lt
 802093a:	580b      	ldrlt	r3, [r1, r0]
 802093c:	18c0      	addlt	r0, r0, r3
 802093e:	4770      	bx	lr

08020940 <_sungetc_r>:
 8020940:	b538      	push	{r3, r4, r5, lr}
 8020942:	1c4b      	adds	r3, r1, #1
 8020944:	4614      	mov	r4, r2
 8020946:	d103      	bne.n	8020950 <_sungetc_r+0x10>
 8020948:	f04f 35ff 	mov.w	r5, #4294967295
 802094c:	4628      	mov	r0, r5
 802094e:	bd38      	pop	{r3, r4, r5, pc}
 8020950:	8993      	ldrh	r3, [r2, #12]
 8020952:	f023 0320 	bic.w	r3, r3, #32
 8020956:	8193      	strh	r3, [r2, #12]
 8020958:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802095a:	6852      	ldr	r2, [r2, #4]
 802095c:	b2cd      	uxtb	r5, r1
 802095e:	b18b      	cbz	r3, 8020984 <_sungetc_r+0x44>
 8020960:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020962:	4293      	cmp	r3, r2
 8020964:	dd08      	ble.n	8020978 <_sungetc_r+0x38>
 8020966:	6823      	ldr	r3, [r4, #0]
 8020968:	1e5a      	subs	r2, r3, #1
 802096a:	6022      	str	r2, [r4, #0]
 802096c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020970:	6863      	ldr	r3, [r4, #4]
 8020972:	3301      	adds	r3, #1
 8020974:	6063      	str	r3, [r4, #4]
 8020976:	e7e9      	b.n	802094c <_sungetc_r+0xc>
 8020978:	4621      	mov	r1, r4
 802097a:	f000 fbbf 	bl	80210fc <__submore>
 802097e:	2800      	cmp	r0, #0
 8020980:	d0f1      	beq.n	8020966 <_sungetc_r+0x26>
 8020982:	e7e1      	b.n	8020948 <_sungetc_r+0x8>
 8020984:	6921      	ldr	r1, [r4, #16]
 8020986:	6823      	ldr	r3, [r4, #0]
 8020988:	b151      	cbz	r1, 80209a0 <_sungetc_r+0x60>
 802098a:	4299      	cmp	r1, r3
 802098c:	d208      	bcs.n	80209a0 <_sungetc_r+0x60>
 802098e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020992:	42a9      	cmp	r1, r5
 8020994:	d104      	bne.n	80209a0 <_sungetc_r+0x60>
 8020996:	3b01      	subs	r3, #1
 8020998:	3201      	adds	r2, #1
 802099a:	6023      	str	r3, [r4, #0]
 802099c:	6062      	str	r2, [r4, #4]
 802099e:	e7d5      	b.n	802094c <_sungetc_r+0xc>
 80209a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80209a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80209a8:	6363      	str	r3, [r4, #52]	; 0x34
 80209aa:	2303      	movs	r3, #3
 80209ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80209ae:	4623      	mov	r3, r4
 80209b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80209b4:	6023      	str	r3, [r4, #0]
 80209b6:	2301      	movs	r3, #1
 80209b8:	e7dc      	b.n	8020974 <_sungetc_r+0x34>

080209ba <__ssrefill_r>:
 80209ba:	b510      	push	{r4, lr}
 80209bc:	460c      	mov	r4, r1
 80209be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80209c0:	b169      	cbz	r1, 80209de <__ssrefill_r+0x24>
 80209c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80209c6:	4299      	cmp	r1, r3
 80209c8:	d001      	beq.n	80209ce <__ssrefill_r+0x14>
 80209ca:	f7fd fcf1 	bl	801e3b0 <_free_r>
 80209ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80209d0:	6063      	str	r3, [r4, #4]
 80209d2:	2000      	movs	r0, #0
 80209d4:	6360      	str	r0, [r4, #52]	; 0x34
 80209d6:	b113      	cbz	r3, 80209de <__ssrefill_r+0x24>
 80209d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80209da:	6023      	str	r3, [r4, #0]
 80209dc:	bd10      	pop	{r4, pc}
 80209de:	6923      	ldr	r3, [r4, #16]
 80209e0:	6023      	str	r3, [r4, #0]
 80209e2:	2300      	movs	r3, #0
 80209e4:	6063      	str	r3, [r4, #4]
 80209e6:	89a3      	ldrh	r3, [r4, #12]
 80209e8:	f043 0320 	orr.w	r3, r3, #32
 80209ec:	81a3      	strh	r3, [r4, #12]
 80209ee:	f04f 30ff 	mov.w	r0, #4294967295
 80209f2:	e7f3      	b.n	80209dc <__ssrefill_r+0x22>

080209f4 <__ssvfiscanf_r>:
 80209f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209f8:	460c      	mov	r4, r1
 80209fa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80209fe:	2100      	movs	r1, #0
 8020a00:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8020a04:	49b2      	ldr	r1, [pc, #712]	; (8020cd0 <__ssvfiscanf_r+0x2dc>)
 8020a06:	91a0      	str	r1, [sp, #640]	; 0x280
 8020a08:	f10d 0804 	add.w	r8, sp, #4
 8020a0c:	49b1      	ldr	r1, [pc, #708]	; (8020cd4 <__ssvfiscanf_r+0x2e0>)
 8020a0e:	4fb2      	ldr	r7, [pc, #712]	; (8020cd8 <__ssvfiscanf_r+0x2e4>)
 8020a10:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8020cdc <__ssvfiscanf_r+0x2e8>
 8020a14:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8020a18:	4606      	mov	r6, r0
 8020a1a:	91a1      	str	r1, [sp, #644]	; 0x284
 8020a1c:	9300      	str	r3, [sp, #0]
 8020a1e:	f892 a000 	ldrb.w	sl, [r2]
 8020a22:	f1ba 0f00 	cmp.w	sl, #0
 8020a26:	f000 8151 	beq.w	8020ccc <__ssvfiscanf_r+0x2d8>
 8020a2a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8020a2e:	f013 0308 	ands.w	r3, r3, #8
 8020a32:	f102 0501 	add.w	r5, r2, #1
 8020a36:	d019      	beq.n	8020a6c <__ssvfiscanf_r+0x78>
 8020a38:	6863      	ldr	r3, [r4, #4]
 8020a3a:	2b00      	cmp	r3, #0
 8020a3c:	dd0f      	ble.n	8020a5e <__ssvfiscanf_r+0x6a>
 8020a3e:	6823      	ldr	r3, [r4, #0]
 8020a40:	781a      	ldrb	r2, [r3, #0]
 8020a42:	5cba      	ldrb	r2, [r7, r2]
 8020a44:	0712      	lsls	r2, r2, #28
 8020a46:	d401      	bmi.n	8020a4c <__ssvfiscanf_r+0x58>
 8020a48:	462a      	mov	r2, r5
 8020a4a:	e7e8      	b.n	8020a1e <__ssvfiscanf_r+0x2a>
 8020a4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020a4e:	3201      	adds	r2, #1
 8020a50:	9245      	str	r2, [sp, #276]	; 0x114
 8020a52:	6862      	ldr	r2, [r4, #4]
 8020a54:	3301      	adds	r3, #1
 8020a56:	3a01      	subs	r2, #1
 8020a58:	6062      	str	r2, [r4, #4]
 8020a5a:	6023      	str	r3, [r4, #0]
 8020a5c:	e7ec      	b.n	8020a38 <__ssvfiscanf_r+0x44>
 8020a5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020a60:	4621      	mov	r1, r4
 8020a62:	4630      	mov	r0, r6
 8020a64:	4798      	blx	r3
 8020a66:	2800      	cmp	r0, #0
 8020a68:	d0e9      	beq.n	8020a3e <__ssvfiscanf_r+0x4a>
 8020a6a:	e7ed      	b.n	8020a48 <__ssvfiscanf_r+0x54>
 8020a6c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8020a70:	f040 8083 	bne.w	8020b7a <__ssvfiscanf_r+0x186>
 8020a74:	9341      	str	r3, [sp, #260]	; 0x104
 8020a76:	9343      	str	r3, [sp, #268]	; 0x10c
 8020a78:	7853      	ldrb	r3, [r2, #1]
 8020a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8020a7c:	bf02      	ittt	eq
 8020a7e:	2310      	moveq	r3, #16
 8020a80:	1c95      	addeq	r5, r2, #2
 8020a82:	9341      	streq	r3, [sp, #260]	; 0x104
 8020a84:	220a      	movs	r2, #10
 8020a86:	46ab      	mov	fp, r5
 8020a88:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8020a8c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8020a90:	2b09      	cmp	r3, #9
 8020a92:	d91d      	bls.n	8020ad0 <__ssvfiscanf_r+0xdc>
 8020a94:	4891      	ldr	r0, [pc, #580]	; (8020cdc <__ssvfiscanf_r+0x2e8>)
 8020a96:	2203      	movs	r2, #3
 8020a98:	f7df fbe2 	bl	8000260 <memchr>
 8020a9c:	b140      	cbz	r0, 8020ab0 <__ssvfiscanf_r+0xbc>
 8020a9e:	2301      	movs	r3, #1
 8020aa0:	eba0 0009 	sub.w	r0, r0, r9
 8020aa4:	fa03 f000 	lsl.w	r0, r3, r0
 8020aa8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020aaa:	4318      	orrs	r0, r3
 8020aac:	9041      	str	r0, [sp, #260]	; 0x104
 8020aae:	465d      	mov	r5, fp
 8020ab0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020ab4:	2b78      	cmp	r3, #120	; 0x78
 8020ab6:	d806      	bhi.n	8020ac6 <__ssvfiscanf_r+0xd2>
 8020ab8:	2b57      	cmp	r3, #87	; 0x57
 8020aba:	d810      	bhi.n	8020ade <__ssvfiscanf_r+0xea>
 8020abc:	2b25      	cmp	r3, #37	; 0x25
 8020abe:	d05c      	beq.n	8020b7a <__ssvfiscanf_r+0x186>
 8020ac0:	d856      	bhi.n	8020b70 <__ssvfiscanf_r+0x17c>
 8020ac2:	2b00      	cmp	r3, #0
 8020ac4:	d074      	beq.n	8020bb0 <__ssvfiscanf_r+0x1bc>
 8020ac6:	2303      	movs	r3, #3
 8020ac8:	9347      	str	r3, [sp, #284]	; 0x11c
 8020aca:	230a      	movs	r3, #10
 8020acc:	9342      	str	r3, [sp, #264]	; 0x108
 8020ace:	e081      	b.n	8020bd4 <__ssvfiscanf_r+0x1e0>
 8020ad0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020ad2:	fb02 1303 	mla	r3, r2, r3, r1
 8020ad6:	3b30      	subs	r3, #48	; 0x30
 8020ad8:	9343      	str	r3, [sp, #268]	; 0x10c
 8020ada:	465d      	mov	r5, fp
 8020adc:	e7d3      	b.n	8020a86 <__ssvfiscanf_r+0x92>
 8020ade:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8020ae2:	2a20      	cmp	r2, #32
 8020ae4:	d8ef      	bhi.n	8020ac6 <__ssvfiscanf_r+0xd2>
 8020ae6:	a101      	add	r1, pc, #4	; (adr r1, 8020aec <__ssvfiscanf_r+0xf8>)
 8020ae8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8020aec:	08020bbf 	.word	0x08020bbf
 8020af0:	08020ac7 	.word	0x08020ac7
 8020af4:	08020ac7 	.word	0x08020ac7
 8020af8:	08020c1d 	.word	0x08020c1d
 8020afc:	08020ac7 	.word	0x08020ac7
 8020b00:	08020ac7 	.word	0x08020ac7
 8020b04:	08020ac7 	.word	0x08020ac7
 8020b08:	08020ac7 	.word	0x08020ac7
 8020b0c:	08020ac7 	.word	0x08020ac7
 8020b10:	08020ac7 	.word	0x08020ac7
 8020b14:	08020ac7 	.word	0x08020ac7
 8020b18:	08020c33 	.word	0x08020c33
 8020b1c:	08020c09 	.word	0x08020c09
 8020b20:	08020b77 	.word	0x08020b77
 8020b24:	08020b77 	.word	0x08020b77
 8020b28:	08020b77 	.word	0x08020b77
 8020b2c:	08020ac7 	.word	0x08020ac7
 8020b30:	08020c0d 	.word	0x08020c0d
 8020b34:	08020ac7 	.word	0x08020ac7
 8020b38:	08020ac7 	.word	0x08020ac7
 8020b3c:	08020ac7 	.word	0x08020ac7
 8020b40:	08020ac7 	.word	0x08020ac7
 8020b44:	08020c43 	.word	0x08020c43
 8020b48:	08020c15 	.word	0x08020c15
 8020b4c:	08020bb7 	.word	0x08020bb7
 8020b50:	08020ac7 	.word	0x08020ac7
 8020b54:	08020ac7 	.word	0x08020ac7
 8020b58:	08020c3f 	.word	0x08020c3f
 8020b5c:	08020ac7 	.word	0x08020ac7
 8020b60:	08020c09 	.word	0x08020c09
 8020b64:	08020ac7 	.word	0x08020ac7
 8020b68:	08020ac7 	.word	0x08020ac7
 8020b6c:	08020bbf 	.word	0x08020bbf
 8020b70:	3b45      	subs	r3, #69	; 0x45
 8020b72:	2b02      	cmp	r3, #2
 8020b74:	d8a7      	bhi.n	8020ac6 <__ssvfiscanf_r+0xd2>
 8020b76:	2305      	movs	r3, #5
 8020b78:	e02b      	b.n	8020bd2 <__ssvfiscanf_r+0x1de>
 8020b7a:	6863      	ldr	r3, [r4, #4]
 8020b7c:	2b00      	cmp	r3, #0
 8020b7e:	dd0d      	ble.n	8020b9c <__ssvfiscanf_r+0x1a8>
 8020b80:	6823      	ldr	r3, [r4, #0]
 8020b82:	781a      	ldrb	r2, [r3, #0]
 8020b84:	4552      	cmp	r2, sl
 8020b86:	f040 80a1 	bne.w	8020ccc <__ssvfiscanf_r+0x2d8>
 8020b8a:	3301      	adds	r3, #1
 8020b8c:	6862      	ldr	r2, [r4, #4]
 8020b8e:	6023      	str	r3, [r4, #0]
 8020b90:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020b92:	3a01      	subs	r2, #1
 8020b94:	3301      	adds	r3, #1
 8020b96:	6062      	str	r2, [r4, #4]
 8020b98:	9345      	str	r3, [sp, #276]	; 0x114
 8020b9a:	e755      	b.n	8020a48 <__ssvfiscanf_r+0x54>
 8020b9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020b9e:	4621      	mov	r1, r4
 8020ba0:	4630      	mov	r0, r6
 8020ba2:	4798      	blx	r3
 8020ba4:	2800      	cmp	r0, #0
 8020ba6:	d0eb      	beq.n	8020b80 <__ssvfiscanf_r+0x18c>
 8020ba8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020baa:	2800      	cmp	r0, #0
 8020bac:	f040 8084 	bne.w	8020cb8 <__ssvfiscanf_r+0x2c4>
 8020bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8020bb4:	e086      	b.n	8020cc4 <__ssvfiscanf_r+0x2d0>
 8020bb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020bb8:	f042 0220 	orr.w	r2, r2, #32
 8020bbc:	9241      	str	r2, [sp, #260]	; 0x104
 8020bbe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020bc4:	9241      	str	r2, [sp, #260]	; 0x104
 8020bc6:	2210      	movs	r2, #16
 8020bc8:	2b6f      	cmp	r3, #111	; 0x6f
 8020bca:	9242      	str	r2, [sp, #264]	; 0x108
 8020bcc:	bf34      	ite	cc
 8020bce:	2303      	movcc	r3, #3
 8020bd0:	2304      	movcs	r3, #4
 8020bd2:	9347      	str	r3, [sp, #284]	; 0x11c
 8020bd4:	6863      	ldr	r3, [r4, #4]
 8020bd6:	2b00      	cmp	r3, #0
 8020bd8:	dd41      	ble.n	8020c5e <__ssvfiscanf_r+0x26a>
 8020bda:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020bdc:	0659      	lsls	r1, r3, #25
 8020bde:	d404      	bmi.n	8020bea <__ssvfiscanf_r+0x1f6>
 8020be0:	6823      	ldr	r3, [r4, #0]
 8020be2:	781a      	ldrb	r2, [r3, #0]
 8020be4:	5cba      	ldrb	r2, [r7, r2]
 8020be6:	0712      	lsls	r2, r2, #28
 8020be8:	d440      	bmi.n	8020c6c <__ssvfiscanf_r+0x278>
 8020bea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8020bec:	2b02      	cmp	r3, #2
 8020bee:	dc4f      	bgt.n	8020c90 <__ssvfiscanf_r+0x29c>
 8020bf0:	466b      	mov	r3, sp
 8020bf2:	4622      	mov	r2, r4
 8020bf4:	a941      	add	r1, sp, #260	; 0x104
 8020bf6:	4630      	mov	r0, r6
 8020bf8:	f000 f874 	bl	8020ce4 <_scanf_chars>
 8020bfc:	2801      	cmp	r0, #1
 8020bfe:	d065      	beq.n	8020ccc <__ssvfiscanf_r+0x2d8>
 8020c00:	2802      	cmp	r0, #2
 8020c02:	f47f af21 	bne.w	8020a48 <__ssvfiscanf_r+0x54>
 8020c06:	e7cf      	b.n	8020ba8 <__ssvfiscanf_r+0x1b4>
 8020c08:	220a      	movs	r2, #10
 8020c0a:	e7dd      	b.n	8020bc8 <__ssvfiscanf_r+0x1d4>
 8020c0c:	2300      	movs	r3, #0
 8020c0e:	9342      	str	r3, [sp, #264]	; 0x108
 8020c10:	2303      	movs	r3, #3
 8020c12:	e7de      	b.n	8020bd2 <__ssvfiscanf_r+0x1de>
 8020c14:	2308      	movs	r3, #8
 8020c16:	9342      	str	r3, [sp, #264]	; 0x108
 8020c18:	2304      	movs	r3, #4
 8020c1a:	e7da      	b.n	8020bd2 <__ssvfiscanf_r+0x1de>
 8020c1c:	4629      	mov	r1, r5
 8020c1e:	4640      	mov	r0, r8
 8020c20:	f000 f9ac 	bl	8020f7c <__sccl>
 8020c24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020c2a:	9341      	str	r3, [sp, #260]	; 0x104
 8020c2c:	4605      	mov	r5, r0
 8020c2e:	2301      	movs	r3, #1
 8020c30:	e7cf      	b.n	8020bd2 <__ssvfiscanf_r+0x1de>
 8020c32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020c38:	9341      	str	r3, [sp, #260]	; 0x104
 8020c3a:	2300      	movs	r3, #0
 8020c3c:	e7c9      	b.n	8020bd2 <__ssvfiscanf_r+0x1de>
 8020c3e:	2302      	movs	r3, #2
 8020c40:	e7c7      	b.n	8020bd2 <__ssvfiscanf_r+0x1de>
 8020c42:	9841      	ldr	r0, [sp, #260]	; 0x104
 8020c44:	06c3      	lsls	r3, r0, #27
 8020c46:	f53f aeff 	bmi.w	8020a48 <__ssvfiscanf_r+0x54>
 8020c4a:	9b00      	ldr	r3, [sp, #0]
 8020c4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020c4e:	1d19      	adds	r1, r3, #4
 8020c50:	9100      	str	r1, [sp, #0]
 8020c52:	681b      	ldr	r3, [r3, #0]
 8020c54:	07c0      	lsls	r0, r0, #31
 8020c56:	bf4c      	ite	mi
 8020c58:	801a      	strhmi	r2, [r3, #0]
 8020c5a:	601a      	strpl	r2, [r3, #0]
 8020c5c:	e6f4      	b.n	8020a48 <__ssvfiscanf_r+0x54>
 8020c5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020c60:	4621      	mov	r1, r4
 8020c62:	4630      	mov	r0, r6
 8020c64:	4798      	blx	r3
 8020c66:	2800      	cmp	r0, #0
 8020c68:	d0b7      	beq.n	8020bda <__ssvfiscanf_r+0x1e6>
 8020c6a:	e79d      	b.n	8020ba8 <__ssvfiscanf_r+0x1b4>
 8020c6c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020c6e:	3201      	adds	r2, #1
 8020c70:	9245      	str	r2, [sp, #276]	; 0x114
 8020c72:	6862      	ldr	r2, [r4, #4]
 8020c74:	3a01      	subs	r2, #1
 8020c76:	2a00      	cmp	r2, #0
 8020c78:	6062      	str	r2, [r4, #4]
 8020c7a:	dd02      	ble.n	8020c82 <__ssvfiscanf_r+0x28e>
 8020c7c:	3301      	adds	r3, #1
 8020c7e:	6023      	str	r3, [r4, #0]
 8020c80:	e7ae      	b.n	8020be0 <__ssvfiscanf_r+0x1ec>
 8020c82:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020c84:	4621      	mov	r1, r4
 8020c86:	4630      	mov	r0, r6
 8020c88:	4798      	blx	r3
 8020c8a:	2800      	cmp	r0, #0
 8020c8c:	d0a8      	beq.n	8020be0 <__ssvfiscanf_r+0x1ec>
 8020c8e:	e78b      	b.n	8020ba8 <__ssvfiscanf_r+0x1b4>
 8020c90:	2b04      	cmp	r3, #4
 8020c92:	dc06      	bgt.n	8020ca2 <__ssvfiscanf_r+0x2ae>
 8020c94:	466b      	mov	r3, sp
 8020c96:	4622      	mov	r2, r4
 8020c98:	a941      	add	r1, sp, #260	; 0x104
 8020c9a:	4630      	mov	r0, r6
 8020c9c:	f000 f87a 	bl	8020d94 <_scanf_i>
 8020ca0:	e7ac      	b.n	8020bfc <__ssvfiscanf_r+0x208>
 8020ca2:	4b0f      	ldr	r3, [pc, #60]	; (8020ce0 <__ssvfiscanf_r+0x2ec>)
 8020ca4:	2b00      	cmp	r3, #0
 8020ca6:	f43f aecf 	beq.w	8020a48 <__ssvfiscanf_r+0x54>
 8020caa:	466b      	mov	r3, sp
 8020cac:	4622      	mov	r2, r4
 8020cae:	a941      	add	r1, sp, #260	; 0x104
 8020cb0:	4630      	mov	r0, r6
 8020cb2:	f3af 8000 	nop.w
 8020cb6:	e7a1      	b.n	8020bfc <__ssvfiscanf_r+0x208>
 8020cb8:	89a3      	ldrh	r3, [r4, #12]
 8020cba:	f013 0f40 	tst.w	r3, #64	; 0x40
 8020cbe:	bf18      	it	ne
 8020cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8020cc4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8020cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ccc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020cce:	e7f9      	b.n	8020cc4 <__ssvfiscanf_r+0x2d0>
 8020cd0:	08020941 	.word	0x08020941
 8020cd4:	080209bb 	.word	0x080209bb
 8020cd8:	08026961 	.word	0x08026961
 8020cdc:	08026a71 	.word	0x08026a71
 8020ce0:	00000000 	.word	0x00000000

08020ce4 <_scanf_chars>:
 8020ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020ce8:	4615      	mov	r5, r2
 8020cea:	688a      	ldr	r2, [r1, #8]
 8020cec:	4680      	mov	r8, r0
 8020cee:	460c      	mov	r4, r1
 8020cf0:	b932      	cbnz	r2, 8020d00 <_scanf_chars+0x1c>
 8020cf2:	698a      	ldr	r2, [r1, #24]
 8020cf4:	2a00      	cmp	r2, #0
 8020cf6:	bf0c      	ite	eq
 8020cf8:	2201      	moveq	r2, #1
 8020cfa:	f04f 32ff 	movne.w	r2, #4294967295
 8020cfe:	608a      	str	r2, [r1, #8]
 8020d00:	6822      	ldr	r2, [r4, #0]
 8020d02:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8020d90 <_scanf_chars+0xac>
 8020d06:	06d1      	lsls	r1, r2, #27
 8020d08:	bf5f      	itttt	pl
 8020d0a:	681a      	ldrpl	r2, [r3, #0]
 8020d0c:	1d11      	addpl	r1, r2, #4
 8020d0e:	6019      	strpl	r1, [r3, #0]
 8020d10:	6816      	ldrpl	r6, [r2, #0]
 8020d12:	2700      	movs	r7, #0
 8020d14:	69a0      	ldr	r0, [r4, #24]
 8020d16:	b188      	cbz	r0, 8020d3c <_scanf_chars+0x58>
 8020d18:	2801      	cmp	r0, #1
 8020d1a:	d107      	bne.n	8020d2c <_scanf_chars+0x48>
 8020d1c:	682b      	ldr	r3, [r5, #0]
 8020d1e:	781a      	ldrb	r2, [r3, #0]
 8020d20:	6963      	ldr	r3, [r4, #20]
 8020d22:	5c9b      	ldrb	r3, [r3, r2]
 8020d24:	b953      	cbnz	r3, 8020d3c <_scanf_chars+0x58>
 8020d26:	bb27      	cbnz	r7, 8020d72 <_scanf_chars+0x8e>
 8020d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020d2c:	2802      	cmp	r0, #2
 8020d2e:	d120      	bne.n	8020d72 <_scanf_chars+0x8e>
 8020d30:	682b      	ldr	r3, [r5, #0]
 8020d32:	781b      	ldrb	r3, [r3, #0]
 8020d34:	f813 3009 	ldrb.w	r3, [r3, r9]
 8020d38:	071b      	lsls	r3, r3, #28
 8020d3a:	d41a      	bmi.n	8020d72 <_scanf_chars+0x8e>
 8020d3c:	6823      	ldr	r3, [r4, #0]
 8020d3e:	06da      	lsls	r2, r3, #27
 8020d40:	bf5e      	ittt	pl
 8020d42:	682b      	ldrpl	r3, [r5, #0]
 8020d44:	781b      	ldrbpl	r3, [r3, #0]
 8020d46:	f806 3b01 	strbpl.w	r3, [r6], #1
 8020d4a:	682a      	ldr	r2, [r5, #0]
 8020d4c:	686b      	ldr	r3, [r5, #4]
 8020d4e:	3201      	adds	r2, #1
 8020d50:	602a      	str	r2, [r5, #0]
 8020d52:	68a2      	ldr	r2, [r4, #8]
 8020d54:	3b01      	subs	r3, #1
 8020d56:	3a01      	subs	r2, #1
 8020d58:	606b      	str	r3, [r5, #4]
 8020d5a:	3701      	adds	r7, #1
 8020d5c:	60a2      	str	r2, [r4, #8]
 8020d5e:	b142      	cbz	r2, 8020d72 <_scanf_chars+0x8e>
 8020d60:	2b00      	cmp	r3, #0
 8020d62:	dcd7      	bgt.n	8020d14 <_scanf_chars+0x30>
 8020d64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020d68:	4629      	mov	r1, r5
 8020d6a:	4640      	mov	r0, r8
 8020d6c:	4798      	blx	r3
 8020d6e:	2800      	cmp	r0, #0
 8020d70:	d0d0      	beq.n	8020d14 <_scanf_chars+0x30>
 8020d72:	6823      	ldr	r3, [r4, #0]
 8020d74:	f013 0310 	ands.w	r3, r3, #16
 8020d78:	d105      	bne.n	8020d86 <_scanf_chars+0xa2>
 8020d7a:	68e2      	ldr	r2, [r4, #12]
 8020d7c:	3201      	adds	r2, #1
 8020d7e:	60e2      	str	r2, [r4, #12]
 8020d80:	69a2      	ldr	r2, [r4, #24]
 8020d82:	b102      	cbz	r2, 8020d86 <_scanf_chars+0xa2>
 8020d84:	7033      	strb	r3, [r6, #0]
 8020d86:	6923      	ldr	r3, [r4, #16]
 8020d88:	441f      	add	r7, r3
 8020d8a:	6127      	str	r7, [r4, #16]
 8020d8c:	2000      	movs	r0, #0
 8020d8e:	e7cb      	b.n	8020d28 <_scanf_chars+0x44>
 8020d90:	08026961 	.word	0x08026961

08020d94 <_scanf_i>:
 8020d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d98:	4698      	mov	r8, r3
 8020d9a:	4b74      	ldr	r3, [pc, #464]	; (8020f6c <_scanf_i+0x1d8>)
 8020d9c:	460c      	mov	r4, r1
 8020d9e:	4682      	mov	sl, r0
 8020da0:	4616      	mov	r6, r2
 8020da2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020da6:	b087      	sub	sp, #28
 8020da8:	ab03      	add	r3, sp, #12
 8020daa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8020dae:	4b70      	ldr	r3, [pc, #448]	; (8020f70 <_scanf_i+0x1dc>)
 8020db0:	69a1      	ldr	r1, [r4, #24]
 8020db2:	4a70      	ldr	r2, [pc, #448]	; (8020f74 <_scanf_i+0x1e0>)
 8020db4:	2903      	cmp	r1, #3
 8020db6:	bf18      	it	ne
 8020db8:	461a      	movne	r2, r3
 8020dba:	68a3      	ldr	r3, [r4, #8]
 8020dbc:	9201      	str	r2, [sp, #4]
 8020dbe:	1e5a      	subs	r2, r3, #1
 8020dc0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020dc4:	bf88      	it	hi
 8020dc6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8020dca:	4627      	mov	r7, r4
 8020dcc:	bf82      	ittt	hi
 8020dce:	eb03 0905 	addhi.w	r9, r3, r5
 8020dd2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020dd6:	60a3      	strhi	r3, [r4, #8]
 8020dd8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8020ddc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8020de0:	bf98      	it	ls
 8020de2:	f04f 0900 	movls.w	r9, #0
 8020de6:	6023      	str	r3, [r4, #0]
 8020de8:	463d      	mov	r5, r7
 8020dea:	f04f 0b00 	mov.w	fp, #0
 8020dee:	6831      	ldr	r1, [r6, #0]
 8020df0:	ab03      	add	r3, sp, #12
 8020df2:	7809      	ldrb	r1, [r1, #0]
 8020df4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8020df8:	2202      	movs	r2, #2
 8020dfa:	f7df fa31 	bl	8000260 <memchr>
 8020dfe:	b328      	cbz	r0, 8020e4c <_scanf_i+0xb8>
 8020e00:	f1bb 0f01 	cmp.w	fp, #1
 8020e04:	d159      	bne.n	8020eba <_scanf_i+0x126>
 8020e06:	6862      	ldr	r2, [r4, #4]
 8020e08:	b92a      	cbnz	r2, 8020e16 <_scanf_i+0x82>
 8020e0a:	6822      	ldr	r2, [r4, #0]
 8020e0c:	2308      	movs	r3, #8
 8020e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020e12:	6063      	str	r3, [r4, #4]
 8020e14:	6022      	str	r2, [r4, #0]
 8020e16:	6822      	ldr	r2, [r4, #0]
 8020e18:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8020e1c:	6022      	str	r2, [r4, #0]
 8020e1e:	68a2      	ldr	r2, [r4, #8]
 8020e20:	1e51      	subs	r1, r2, #1
 8020e22:	60a1      	str	r1, [r4, #8]
 8020e24:	b192      	cbz	r2, 8020e4c <_scanf_i+0xb8>
 8020e26:	6832      	ldr	r2, [r6, #0]
 8020e28:	1c51      	adds	r1, r2, #1
 8020e2a:	6031      	str	r1, [r6, #0]
 8020e2c:	7812      	ldrb	r2, [r2, #0]
 8020e2e:	f805 2b01 	strb.w	r2, [r5], #1
 8020e32:	6872      	ldr	r2, [r6, #4]
 8020e34:	3a01      	subs	r2, #1
 8020e36:	2a00      	cmp	r2, #0
 8020e38:	6072      	str	r2, [r6, #4]
 8020e3a:	dc07      	bgt.n	8020e4c <_scanf_i+0xb8>
 8020e3c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8020e40:	4631      	mov	r1, r6
 8020e42:	4650      	mov	r0, sl
 8020e44:	4790      	blx	r2
 8020e46:	2800      	cmp	r0, #0
 8020e48:	f040 8085 	bne.w	8020f56 <_scanf_i+0x1c2>
 8020e4c:	f10b 0b01 	add.w	fp, fp, #1
 8020e50:	f1bb 0f03 	cmp.w	fp, #3
 8020e54:	d1cb      	bne.n	8020dee <_scanf_i+0x5a>
 8020e56:	6863      	ldr	r3, [r4, #4]
 8020e58:	b90b      	cbnz	r3, 8020e5e <_scanf_i+0xca>
 8020e5a:	230a      	movs	r3, #10
 8020e5c:	6063      	str	r3, [r4, #4]
 8020e5e:	6863      	ldr	r3, [r4, #4]
 8020e60:	4945      	ldr	r1, [pc, #276]	; (8020f78 <_scanf_i+0x1e4>)
 8020e62:	6960      	ldr	r0, [r4, #20]
 8020e64:	1ac9      	subs	r1, r1, r3
 8020e66:	f000 f889 	bl	8020f7c <__sccl>
 8020e6a:	f04f 0b00 	mov.w	fp, #0
 8020e6e:	68a3      	ldr	r3, [r4, #8]
 8020e70:	6822      	ldr	r2, [r4, #0]
 8020e72:	2b00      	cmp	r3, #0
 8020e74:	d03d      	beq.n	8020ef2 <_scanf_i+0x15e>
 8020e76:	6831      	ldr	r1, [r6, #0]
 8020e78:	6960      	ldr	r0, [r4, #20]
 8020e7a:	f891 c000 	ldrb.w	ip, [r1]
 8020e7e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8020e82:	2800      	cmp	r0, #0
 8020e84:	d035      	beq.n	8020ef2 <_scanf_i+0x15e>
 8020e86:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8020e8a:	d124      	bne.n	8020ed6 <_scanf_i+0x142>
 8020e8c:	0510      	lsls	r0, r2, #20
 8020e8e:	d522      	bpl.n	8020ed6 <_scanf_i+0x142>
 8020e90:	f10b 0b01 	add.w	fp, fp, #1
 8020e94:	f1b9 0f00 	cmp.w	r9, #0
 8020e98:	d003      	beq.n	8020ea2 <_scanf_i+0x10e>
 8020e9a:	3301      	adds	r3, #1
 8020e9c:	f109 39ff 	add.w	r9, r9, #4294967295
 8020ea0:	60a3      	str	r3, [r4, #8]
 8020ea2:	6873      	ldr	r3, [r6, #4]
 8020ea4:	3b01      	subs	r3, #1
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	6073      	str	r3, [r6, #4]
 8020eaa:	dd1b      	ble.n	8020ee4 <_scanf_i+0x150>
 8020eac:	6833      	ldr	r3, [r6, #0]
 8020eae:	3301      	adds	r3, #1
 8020eb0:	6033      	str	r3, [r6, #0]
 8020eb2:	68a3      	ldr	r3, [r4, #8]
 8020eb4:	3b01      	subs	r3, #1
 8020eb6:	60a3      	str	r3, [r4, #8]
 8020eb8:	e7d9      	b.n	8020e6e <_scanf_i+0xda>
 8020eba:	f1bb 0f02 	cmp.w	fp, #2
 8020ebe:	d1ae      	bne.n	8020e1e <_scanf_i+0x8a>
 8020ec0:	6822      	ldr	r2, [r4, #0]
 8020ec2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8020ec6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8020eca:	d1bf      	bne.n	8020e4c <_scanf_i+0xb8>
 8020ecc:	2310      	movs	r3, #16
 8020ece:	6063      	str	r3, [r4, #4]
 8020ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020ed4:	e7a2      	b.n	8020e1c <_scanf_i+0x88>
 8020ed6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8020eda:	6022      	str	r2, [r4, #0]
 8020edc:	780b      	ldrb	r3, [r1, #0]
 8020ede:	f805 3b01 	strb.w	r3, [r5], #1
 8020ee2:	e7de      	b.n	8020ea2 <_scanf_i+0x10e>
 8020ee4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020ee8:	4631      	mov	r1, r6
 8020eea:	4650      	mov	r0, sl
 8020eec:	4798      	blx	r3
 8020eee:	2800      	cmp	r0, #0
 8020ef0:	d0df      	beq.n	8020eb2 <_scanf_i+0x11e>
 8020ef2:	6823      	ldr	r3, [r4, #0]
 8020ef4:	05d9      	lsls	r1, r3, #23
 8020ef6:	d50d      	bpl.n	8020f14 <_scanf_i+0x180>
 8020ef8:	42bd      	cmp	r5, r7
 8020efa:	d909      	bls.n	8020f10 <_scanf_i+0x17c>
 8020efc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020f00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020f04:	4632      	mov	r2, r6
 8020f06:	4650      	mov	r0, sl
 8020f08:	4798      	blx	r3
 8020f0a:	f105 39ff 	add.w	r9, r5, #4294967295
 8020f0e:	464d      	mov	r5, r9
 8020f10:	42bd      	cmp	r5, r7
 8020f12:	d028      	beq.n	8020f66 <_scanf_i+0x1d2>
 8020f14:	6822      	ldr	r2, [r4, #0]
 8020f16:	f012 0210 	ands.w	r2, r2, #16
 8020f1a:	d113      	bne.n	8020f44 <_scanf_i+0x1b0>
 8020f1c:	702a      	strb	r2, [r5, #0]
 8020f1e:	6863      	ldr	r3, [r4, #4]
 8020f20:	9e01      	ldr	r6, [sp, #4]
 8020f22:	4639      	mov	r1, r7
 8020f24:	4650      	mov	r0, sl
 8020f26:	47b0      	blx	r6
 8020f28:	f8d8 3000 	ldr.w	r3, [r8]
 8020f2c:	6821      	ldr	r1, [r4, #0]
 8020f2e:	1d1a      	adds	r2, r3, #4
 8020f30:	f8c8 2000 	str.w	r2, [r8]
 8020f34:	f011 0f20 	tst.w	r1, #32
 8020f38:	681b      	ldr	r3, [r3, #0]
 8020f3a:	d00f      	beq.n	8020f5c <_scanf_i+0x1c8>
 8020f3c:	6018      	str	r0, [r3, #0]
 8020f3e:	68e3      	ldr	r3, [r4, #12]
 8020f40:	3301      	adds	r3, #1
 8020f42:	60e3      	str	r3, [r4, #12]
 8020f44:	1bed      	subs	r5, r5, r7
 8020f46:	44ab      	add	fp, r5
 8020f48:	6925      	ldr	r5, [r4, #16]
 8020f4a:	445d      	add	r5, fp
 8020f4c:	6125      	str	r5, [r4, #16]
 8020f4e:	2000      	movs	r0, #0
 8020f50:	b007      	add	sp, #28
 8020f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f56:	f04f 0b00 	mov.w	fp, #0
 8020f5a:	e7ca      	b.n	8020ef2 <_scanf_i+0x15e>
 8020f5c:	07ca      	lsls	r2, r1, #31
 8020f5e:	bf4c      	ite	mi
 8020f60:	8018      	strhmi	r0, [r3, #0]
 8020f62:	6018      	strpl	r0, [r3, #0]
 8020f64:	e7eb      	b.n	8020f3e <_scanf_i+0x1aa>
 8020f66:	2001      	movs	r0, #1
 8020f68:	e7f2      	b.n	8020f50 <_scanf_i+0x1bc>
 8020f6a:	bf00      	nop
 8020f6c:	080241ec 	.word	0x080241ec
 8020f70:	0801f355 	.word	0x0801f355
 8020f74:	080210f9 	.word	0x080210f9
 8020f78:	08026ab7 	.word	0x08026ab7

08020f7c <__sccl>:
 8020f7c:	b570      	push	{r4, r5, r6, lr}
 8020f7e:	780b      	ldrb	r3, [r1, #0]
 8020f80:	4604      	mov	r4, r0
 8020f82:	2b5e      	cmp	r3, #94	; 0x5e
 8020f84:	bf0b      	itete	eq
 8020f86:	784b      	ldrbeq	r3, [r1, #1]
 8020f88:	1c48      	addne	r0, r1, #1
 8020f8a:	1c88      	addeq	r0, r1, #2
 8020f8c:	2200      	movne	r2, #0
 8020f8e:	bf08      	it	eq
 8020f90:	2201      	moveq	r2, #1
 8020f92:	1e61      	subs	r1, r4, #1
 8020f94:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8020f98:	f801 2f01 	strb.w	r2, [r1, #1]!
 8020f9c:	42a9      	cmp	r1, r5
 8020f9e:	d1fb      	bne.n	8020f98 <__sccl+0x1c>
 8020fa0:	b90b      	cbnz	r3, 8020fa6 <__sccl+0x2a>
 8020fa2:	3801      	subs	r0, #1
 8020fa4:	bd70      	pop	{r4, r5, r6, pc}
 8020fa6:	f082 0101 	eor.w	r1, r2, #1
 8020faa:	54e1      	strb	r1, [r4, r3]
 8020fac:	1c42      	adds	r2, r0, #1
 8020fae:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8020fb2:	2d2d      	cmp	r5, #45	; 0x2d
 8020fb4:	f102 36ff 	add.w	r6, r2, #4294967295
 8020fb8:	4610      	mov	r0, r2
 8020fba:	d006      	beq.n	8020fca <__sccl+0x4e>
 8020fbc:	2d5d      	cmp	r5, #93	; 0x5d
 8020fbe:	d0f1      	beq.n	8020fa4 <__sccl+0x28>
 8020fc0:	b90d      	cbnz	r5, 8020fc6 <__sccl+0x4a>
 8020fc2:	4630      	mov	r0, r6
 8020fc4:	e7ee      	b.n	8020fa4 <__sccl+0x28>
 8020fc6:	462b      	mov	r3, r5
 8020fc8:	e7ef      	b.n	8020faa <__sccl+0x2e>
 8020fca:	7816      	ldrb	r6, [r2, #0]
 8020fcc:	2e5d      	cmp	r6, #93	; 0x5d
 8020fce:	d0fa      	beq.n	8020fc6 <__sccl+0x4a>
 8020fd0:	42b3      	cmp	r3, r6
 8020fd2:	dcf8      	bgt.n	8020fc6 <__sccl+0x4a>
 8020fd4:	4618      	mov	r0, r3
 8020fd6:	3001      	adds	r0, #1
 8020fd8:	4286      	cmp	r6, r0
 8020fda:	5421      	strb	r1, [r4, r0]
 8020fdc:	dcfb      	bgt.n	8020fd6 <__sccl+0x5a>
 8020fde:	43d8      	mvns	r0, r3
 8020fe0:	4430      	add	r0, r6
 8020fe2:	1c5d      	adds	r5, r3, #1
 8020fe4:	42b3      	cmp	r3, r6
 8020fe6:	bfa8      	it	ge
 8020fe8:	2000      	movge	r0, #0
 8020fea:	182b      	adds	r3, r5, r0
 8020fec:	3202      	adds	r2, #2
 8020fee:	e7de      	b.n	8020fae <__sccl+0x32>

08020ff0 <_strtol_l.isra.0>:
 8020ff0:	2b01      	cmp	r3, #1
 8020ff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020ff6:	d001      	beq.n	8020ffc <_strtol_l.isra.0+0xc>
 8020ff8:	2b24      	cmp	r3, #36	; 0x24
 8020ffa:	d906      	bls.n	802100a <_strtol_l.isra.0+0x1a>
 8020ffc:	f7fc fbe2 	bl	801d7c4 <__errno>
 8021000:	2316      	movs	r3, #22
 8021002:	6003      	str	r3, [r0, #0]
 8021004:	2000      	movs	r0, #0
 8021006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802100a:	4f3a      	ldr	r7, [pc, #232]	; (80210f4 <_strtol_l.isra.0+0x104>)
 802100c:	468e      	mov	lr, r1
 802100e:	4676      	mov	r6, lr
 8021010:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021014:	5de5      	ldrb	r5, [r4, r7]
 8021016:	f015 0508 	ands.w	r5, r5, #8
 802101a:	d1f8      	bne.n	802100e <_strtol_l.isra.0+0x1e>
 802101c:	2c2d      	cmp	r4, #45	; 0x2d
 802101e:	d134      	bne.n	802108a <_strtol_l.isra.0+0x9a>
 8021020:	f89e 4000 	ldrb.w	r4, [lr]
 8021024:	f04f 0801 	mov.w	r8, #1
 8021028:	f106 0e02 	add.w	lr, r6, #2
 802102c:	2b00      	cmp	r3, #0
 802102e:	d05c      	beq.n	80210ea <_strtol_l.isra.0+0xfa>
 8021030:	2b10      	cmp	r3, #16
 8021032:	d10c      	bne.n	802104e <_strtol_l.isra.0+0x5e>
 8021034:	2c30      	cmp	r4, #48	; 0x30
 8021036:	d10a      	bne.n	802104e <_strtol_l.isra.0+0x5e>
 8021038:	f89e 4000 	ldrb.w	r4, [lr]
 802103c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021040:	2c58      	cmp	r4, #88	; 0x58
 8021042:	d14d      	bne.n	80210e0 <_strtol_l.isra.0+0xf0>
 8021044:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8021048:	2310      	movs	r3, #16
 802104a:	f10e 0e02 	add.w	lr, lr, #2
 802104e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8021052:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021056:	2600      	movs	r6, #0
 8021058:	fbbc f9f3 	udiv	r9, ip, r3
 802105c:	4635      	mov	r5, r6
 802105e:	fb03 ca19 	mls	sl, r3, r9, ip
 8021062:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021066:	2f09      	cmp	r7, #9
 8021068:	d818      	bhi.n	802109c <_strtol_l.isra.0+0xac>
 802106a:	463c      	mov	r4, r7
 802106c:	42a3      	cmp	r3, r4
 802106e:	dd24      	ble.n	80210ba <_strtol_l.isra.0+0xca>
 8021070:	2e00      	cmp	r6, #0
 8021072:	db1f      	blt.n	80210b4 <_strtol_l.isra.0+0xc4>
 8021074:	45a9      	cmp	r9, r5
 8021076:	d31d      	bcc.n	80210b4 <_strtol_l.isra.0+0xc4>
 8021078:	d101      	bne.n	802107e <_strtol_l.isra.0+0x8e>
 802107a:	45a2      	cmp	sl, r4
 802107c:	db1a      	blt.n	80210b4 <_strtol_l.isra.0+0xc4>
 802107e:	fb05 4503 	mla	r5, r5, r3, r4
 8021082:	2601      	movs	r6, #1
 8021084:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021088:	e7eb      	b.n	8021062 <_strtol_l.isra.0+0x72>
 802108a:	2c2b      	cmp	r4, #43	; 0x2b
 802108c:	bf08      	it	eq
 802108e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021092:	46a8      	mov	r8, r5
 8021094:	bf08      	it	eq
 8021096:	f106 0e02 	addeq.w	lr, r6, #2
 802109a:	e7c7      	b.n	802102c <_strtol_l.isra.0+0x3c>
 802109c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80210a0:	2f19      	cmp	r7, #25
 80210a2:	d801      	bhi.n	80210a8 <_strtol_l.isra.0+0xb8>
 80210a4:	3c37      	subs	r4, #55	; 0x37
 80210a6:	e7e1      	b.n	802106c <_strtol_l.isra.0+0x7c>
 80210a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80210ac:	2f19      	cmp	r7, #25
 80210ae:	d804      	bhi.n	80210ba <_strtol_l.isra.0+0xca>
 80210b0:	3c57      	subs	r4, #87	; 0x57
 80210b2:	e7db      	b.n	802106c <_strtol_l.isra.0+0x7c>
 80210b4:	f04f 36ff 	mov.w	r6, #4294967295
 80210b8:	e7e4      	b.n	8021084 <_strtol_l.isra.0+0x94>
 80210ba:	2e00      	cmp	r6, #0
 80210bc:	da05      	bge.n	80210ca <_strtol_l.isra.0+0xda>
 80210be:	2322      	movs	r3, #34	; 0x22
 80210c0:	6003      	str	r3, [r0, #0]
 80210c2:	4665      	mov	r5, ip
 80210c4:	b942      	cbnz	r2, 80210d8 <_strtol_l.isra.0+0xe8>
 80210c6:	4628      	mov	r0, r5
 80210c8:	e79d      	b.n	8021006 <_strtol_l.isra.0+0x16>
 80210ca:	f1b8 0f00 	cmp.w	r8, #0
 80210ce:	d000      	beq.n	80210d2 <_strtol_l.isra.0+0xe2>
 80210d0:	426d      	negs	r5, r5
 80210d2:	2a00      	cmp	r2, #0
 80210d4:	d0f7      	beq.n	80210c6 <_strtol_l.isra.0+0xd6>
 80210d6:	b10e      	cbz	r6, 80210dc <_strtol_l.isra.0+0xec>
 80210d8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80210dc:	6011      	str	r1, [r2, #0]
 80210de:	e7f2      	b.n	80210c6 <_strtol_l.isra.0+0xd6>
 80210e0:	2430      	movs	r4, #48	; 0x30
 80210e2:	2b00      	cmp	r3, #0
 80210e4:	d1b3      	bne.n	802104e <_strtol_l.isra.0+0x5e>
 80210e6:	2308      	movs	r3, #8
 80210e8:	e7b1      	b.n	802104e <_strtol_l.isra.0+0x5e>
 80210ea:	2c30      	cmp	r4, #48	; 0x30
 80210ec:	d0a4      	beq.n	8021038 <_strtol_l.isra.0+0x48>
 80210ee:	230a      	movs	r3, #10
 80210f0:	e7ad      	b.n	802104e <_strtol_l.isra.0+0x5e>
 80210f2:	bf00      	nop
 80210f4:	08026961 	.word	0x08026961

080210f8 <_strtol_r>:
 80210f8:	f7ff bf7a 	b.w	8020ff0 <_strtol_l.isra.0>

080210fc <__submore>:
 80210fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021100:	460c      	mov	r4, r1
 8021102:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021108:	4299      	cmp	r1, r3
 802110a:	d11d      	bne.n	8021148 <__submore+0x4c>
 802110c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021110:	f7fd f99e 	bl	801e450 <_malloc_r>
 8021114:	b918      	cbnz	r0, 802111e <__submore+0x22>
 8021116:	f04f 30ff 	mov.w	r0, #4294967295
 802111a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802111e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021122:	63a3      	str	r3, [r4, #56]	; 0x38
 8021124:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8021128:	6360      	str	r0, [r4, #52]	; 0x34
 802112a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802112e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8021132:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8021136:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802113a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802113e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8021142:	6020      	str	r0, [r4, #0]
 8021144:	2000      	movs	r0, #0
 8021146:	e7e8      	b.n	802111a <__submore+0x1e>
 8021148:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802114a:	0077      	lsls	r7, r6, #1
 802114c:	463a      	mov	r2, r7
 802114e:	f7fe fe77 	bl	801fe40 <_realloc_r>
 8021152:	4605      	mov	r5, r0
 8021154:	2800      	cmp	r0, #0
 8021156:	d0de      	beq.n	8021116 <__submore+0x1a>
 8021158:	eb00 0806 	add.w	r8, r0, r6
 802115c:	4601      	mov	r1, r0
 802115e:	4632      	mov	r2, r6
 8021160:	4640      	mov	r0, r8
 8021162:	f7fd f8ff 	bl	801e364 <memcpy>
 8021166:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802116a:	f8c4 8000 	str.w	r8, [r4]
 802116e:	e7e9      	b.n	8021144 <__submore+0x48>

08021170 <_init>:
 8021170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021172:	bf00      	nop
 8021174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021176:	bc08      	pop	{r3}
 8021178:	469e      	mov	lr, r3
 802117a:	4770      	bx	lr

0802117c <_fini>:
 802117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802117e:	bf00      	nop
 8021180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021182:	bc08      	pop	{r3}
 8021184:	469e      	mov	lr, r3
 8021186:	4770      	bx	lr

08021188 <__time_veneer>:
 8021188:	e51ff004 	ldr	pc, [pc, #-4]	; 802118c <__time_veneer+0x4>
 802118c:	200005b8 	.word	0x200005b8
